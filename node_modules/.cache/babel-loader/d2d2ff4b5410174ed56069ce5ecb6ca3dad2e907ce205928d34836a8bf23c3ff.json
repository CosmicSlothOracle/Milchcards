{"ast":null,"code":"var _CardEffectsTestRunner;import{runInitiativeAndPublicTests}from'../__tests__/initiative_public_suite';/**\r\n * Browser-compatible test runner for card effects\r\n * Can be called from browser console: window.__MILCH_TESTS__.run()\r\n */export class CardEffectsTestRunner{constructor(){this.results=null;}static getInstance(){if(!CardEffectsTestRunner.instance){CardEffectsTestRunner.instance=new CardEffectsTestRunner();}return CardEffectsTestRunner.instance;}async runTests(){console.log('🧪 Starting Card Effects Test Suite...');this.results=await runInitiativeAndPublicTests();console.log('📊 Test Results Summary:');console.table(this.results.summary);return this.results;}getResults(){return this.results;}getFailedTests(){if(!this.results)return[];return this.results.items.filter(item=>item.status==='FAIL');}getPassedTests(){if(!this.results)return[];return this.results.items.filter(item=>item.status==='PASS');}getPendingTests(){if(!this.results)return[];return this.results.items.filter(item=>item.status==='PENDING');}getNoHandlerTests(){if(!this.results)return[];return this.results.items.filter(item=>item.status==='NO_HANDLER');}logDetailedResults(){if(!this.results){console.log('❌ No test results available. Run tests first.');return;}console.log('\\n🔍 DETAILED TEST RESULTS:');console.log('========================');this.results.items.forEach((item,index)=>{const status=item.status==='PASS'?'✅':item.status==='FAIL'?'❌':item.status==='PENDING'?'⏳':'❓';console.log(\"\".concat(index+1,\". \").concat(status,\" \").concat(item.cardName,\" (\").concat(item.effectKey||'no key',\")\"));if(item.status==='FAIL'&&item.details){console.log(\"   Details:\",item.details);}});}exportResults(){if(!this.results){console.log('❌ No test results available. Run tests first.');return;}const data=JSON.stringify(this.results,null,2);const blob=new Blob([data],{type:'application/json'});const url=URL.createObjectURL(blob);const a=document.createElement('a');a.href=url;a.download=\"card_effects_test_results_\".concat(new Date().toISOString().split('T')[0],\".json\");document.body.appendChild(a);a.click();document.body.removeChild(a);URL.revokeObjectURL(url);console.log('💾 Test results exported to JSON file');}}// Browser global interface\n_CardEffectsTestRunner=CardEffectsTestRunner;CardEffectsTestRunner.instance=void 0;// Initialize browser interface\nif(typeof window!=='undefined'){const runner=CardEffectsTestRunner.getInstance();window.__MILCH_TESTS__={run:()=>runner.runTests(),results:()=>runner.getResults(),failed:()=>runner.getFailedTests(),passed:()=>runner.getPassedTests(),pending:()=>runner.getPendingTests(),noHandler:()=>runner.getNoHandlerTests(),details:()=>runner.logDetailedResults(),export:()=>runner.exportResults(),runner};console.log('🧪 Card Effects Test Runner loaded. Use window.__MILCH_TESTS__.run() to start tests.');}","map":{"version":3,"names":["runInitiativeAndPublicTests","CardEffectsTestRunner","constructor","results","getInstance","instance","runTests","console","log","table","summary","getResults","getFailedTests","items","filter","item","status","getPassedTests","getPendingTests","getNoHandlerTests","logDetailedResults","forEach","index","concat","cardName","effectKey","details","exportResults","data","JSON","stringify","blob","Blob","type","url","URL","createObjectURL","a","document","createElement","href","download","Date","toISOString","split","body","appendChild","click","removeChild","revokeObjectURL","_CardEffectsTestRunner","window","runner","__MILCH_TESTS__","run","failed","passed","pending","noHandler","export"],"sources":["C:/Users/skank/Videos/Cards/Milchcards/src/utils/testRunner.ts"],"sourcesContent":["import { runInitiativeAndPublicTests, type SuiteResult } from '../__tests__/initiative_public_suite';\r\n\r\n/**\r\n * Browser-compatible test runner for card effects\r\n * Can be called from browser console: window.__MILCH_TESTS__.run()\r\n */\r\nexport class CardEffectsTestRunner {\r\n  private static instance: CardEffectsTestRunner;\r\n  private results: SuiteResult | null = null;\r\n\r\n  static getInstance(): CardEffectsTestRunner {\r\n    if (!CardEffectsTestRunner.instance) {\r\n      CardEffectsTestRunner.instance = new CardEffectsTestRunner();\r\n    }\r\n    return CardEffectsTestRunner.instance;\r\n  }\r\n\r\n  async runTests(): Promise<SuiteResult> {\r\n    console.log('🧪 Starting Card Effects Test Suite...');\r\n    this.results = await runInitiativeAndPublicTests();\r\n    \r\n    console.log('📊 Test Results Summary:');\r\n    console.table(this.results.summary);\r\n    \r\n    return this.results;\r\n  }\r\n\r\n  getResults(): SuiteResult | null {\r\n    return this.results;\r\n  }\r\n\r\n  getFailedTests(): any[] {\r\n    if (!this.results) return [];\r\n    return this.results.items.filter(item => item.status === 'FAIL');\r\n  }\r\n\r\n  getPassedTests(): any[] {\r\n    if (!this.results) return [];\r\n    return this.results.items.filter(item => item.status === 'PASS');\r\n  }\r\n\r\n  getPendingTests(): any[] {\r\n    if (!this.results) return [];\r\n    return this.results.items.filter(item => item.status === 'PENDING');\r\n  }\r\n\r\n  getNoHandlerTests(): any[] {\r\n    if (!this.results) return [];\r\n    return this.results.items.filter(item => item.status === 'NO_HANDLER');\r\n  }\r\n\r\n  logDetailedResults(): void {\r\n    if (!this.results) {\r\n      console.log('❌ No test results available. Run tests first.');\r\n      return;\r\n    }\r\n\r\n    console.log('\\n🔍 DETAILED TEST RESULTS:');\r\n    console.log('========================');\r\n    \r\n    this.results.items.forEach((item, index) => {\r\n      const status = item.status === 'PASS' ? '✅' : \r\n                    item.status === 'FAIL' ? '❌' : \r\n                    item.status === 'PENDING' ? '⏳' : '❓';\r\n      \r\n      console.log(`${index + 1}. ${status} ${item.cardName} (${item.effectKey || 'no key'})`);\r\n      \r\n      if (item.status === 'FAIL' && item.details) {\r\n        console.log(`   Details:`, item.details);\r\n      }\r\n    });\r\n  }\r\n\r\n  exportResults(): void {\r\n    if (!this.results) {\r\n      console.log('❌ No test results available. Run tests first.');\r\n      return;\r\n    }\r\n\r\n    const data = JSON.stringify(this.results, null, 2);\r\n    const blob = new Blob([data], { type: 'application/json' });\r\n    const url = URL.createObjectURL(blob);\r\n    \r\n    const a = document.createElement('a');\r\n    a.href = url;\r\n    a.download = `card_effects_test_results_${new Date().toISOString().split('T')[0]}.json`;\r\n    document.body.appendChild(a);\r\n    a.click();\r\n    document.body.removeChild(a);\r\n    URL.revokeObjectURL(url);\r\n    \r\n    console.log('💾 Test results exported to JSON file');\r\n  }\r\n}\r\n\r\n// Browser global interface\r\ndeclare global {\r\n  interface Window {\r\n    __MILCH_TESTS__?: {\r\n      run: () => Promise<SuiteResult>;\r\n      results: () => SuiteResult | null;\r\n      failed: () => any[];\r\n      passed: () => any[];\r\n      pending: () => any[];\r\n      noHandler: () => any[];\r\n      details: () => void;\r\n      export: () => void;\r\n      runner: CardEffectsTestRunner;\r\n    };\r\n  }\r\n}\r\n\r\n// Initialize browser interface\r\nif (typeof window !== 'undefined') {\r\n  const runner = CardEffectsTestRunner.getInstance();\r\n  \r\n  window.__MILCH_TESTS__ = {\r\n    run: () => runner.runTests(),\r\n    results: () => runner.getResults(),\r\n    failed: () => runner.getFailedTests(),\r\n    passed: () => runner.getPassedTests(),\r\n    pending: () => runner.getPendingTests(),\r\n    noHandler: () => runner.getNoHandlerTests(),\r\n    details: () => runner.logDetailedResults(),\r\n    export: () => runner.exportResults(),\r\n    runner\r\n  };\r\n\r\n  console.log('🧪 Card Effects Test Runner loaded. Use window.__MILCH_TESTS__.run() to start tests.');\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}