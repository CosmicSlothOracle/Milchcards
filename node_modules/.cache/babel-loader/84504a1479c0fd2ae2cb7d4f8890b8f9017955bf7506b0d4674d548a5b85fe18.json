{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useCallback, useState } from 'react';\nimport { sumRow, getCardActionPointCost } from '../utils/gameUtils';\nexport function useGameAI(gameState, setGameState, log) {\n  _s();\n  var _gameState$aiEnabled$, _gameState$aiEnabled;\n  const aiEnabled = (_gameState$aiEnabled$ = (_gameState$aiEnabled = gameState.aiEnabled) === null || _gameState$aiEnabled === void 0 ? void 0 : _gameState$aiEnabled[2]) !== null && _gameState$aiEnabled$ !== void 0 ? _gameState$aiEnabled$ : false;\n  const [aiPreset, setAiPreset] = useState('AUTORITAERER_REALIST');\n\n  // Debug logging for AI state changes (only in development)\n  if (process.env.NODE_ENV === 'development') {\n    console.log('ðŸ”§ DEBUG: useGameAI state - aiEnabled:', aiEnabled, 'aiPreset:', aiPreset);\n  }\n\n  // AI enabled state - controlled by game logic\n  // const forceAIEnabled = true; // Removed force-enable hack\n\n  // Enhanced setAiEnabled with logging\n  const setAiEnabledWithLog = useCallback(enabled => {\n    setGameState(prev => {\n      var _prev$aiEnabled$, _prev$aiEnabled;\n      return {\n        ...prev,\n        aiEnabled: {\n          1: (_prev$aiEnabled$ = (_prev$aiEnabled = prev.aiEnabled) === null || _prev$aiEnabled === void 0 ? void 0 : _prev$aiEnabled[1]) !== null && _prev$aiEnabled$ !== void 0 ? _prev$aiEnabled$ : false,\n          2: enabled\n        }\n      };\n    });\n\n    // Only set preset when AI is enabled\n    if (enabled) {\n      setAiPreset('AUTORITAERER_REALIST');\n    }\n  }, [setGameState]);\n\n  // Enhanced setAiPreset with logging - only when AI is enabled\n  const setAiPresetWithLog = useCallback(preset => {\n    if (aiEnabled) {\n      console.log('ðŸ”§ DEBUG: setAiPreset called with:', preset);\n      setAiPreset(preset);\n    } else {\n      console.log('ðŸ”§ DEBUG: setAiPreset ignored - AI not enabled');\n    }\n  }, [aiEnabled]);\n  const runAITurn = useCallback(() => {\n    console.log('ðŸ”§ DEBUG: runAITurn called - aiEnabled:', aiEnabled, 'current player:', gameState.current);\n    setGameState(prev => {\n      // Check if AI is enabled and it's AI's turn\n      if (!aiEnabled || prev.current !== 2) {\n        console.log('ðŸ”§ DEBUG: AI not enabled or not AI turn - aiEnabled:', aiEnabled, 'current:', prev.current);\n        console.log('ðŸ”§ DEBUG: Full AI state check - aiEnabled:', aiEnabled, 'current:', prev.current, 'aiPreset:', aiPreset);\n        console.log('ðŸ”§ DEBUG: AI state check failed - returning early');\n        return prev;\n      }\n      console.log('ðŸ”§ DEBUG: AI turn starting - analyzing hand and board...');\n      if (process.env.NODE_ENV === 'development') {\n        console.log('ðŸ”§ DEBUG: AI hand size:', prev.hands[2].length);\n        console.log('ðŸ”§ DEBUG: AI AP:', prev.actionPoints[2]);\n        console.log('ðŸ”§ DEBUG: AI hand cards:', prev.hands[2].map(c => c.name));\n      }\n      const hand = prev.hands[2];\n      const playerBoard = prev.board[1]; // Player Board for analysis\n      const aiBoard = prev.board[2]; // AI Board for analysis\n      const aiAP = prev.actionPoints[2];\n\n      // Strategy Analysis\n      const playerInfluence = sumRow([...playerBoard.aussen]);\n      const aiInfluence = sumRow([...aiBoard.aussen]);\n      const influenceDiff = playerInfluence - aiInfluence;\n      log(`ðŸ¤– KI-Analyse: Spieler ${playerInfluence} vs KI ${aiInfluence} (Diff: ${influenceDiff})`);\n\n      // Check if AI should pass\n      if (aiAP <= 0) {\n        log('ðŸ¤– KI passt - keine AP mehr.');\n        return {\n          ...prev,\n          passed: {\n            ...prev.passed,\n            2: true\n          }\n        };\n      }\n\n      // AI Strategy: Prioritize based on situation\n      const candidates = [];\n      hand.forEach((card, idx) => {\n        const apCost = getCardActionPointCost(card, prev, 2);\n\n        // Debug logging for card analysis\n        console.log(`ðŸ”§ DEBUG: AI card analysis - ${card.name}: AP cost ${apCost}, AI AP ${aiAP}, playable: ${apCost <= aiAP}`);\n\n        // Skip if not enough AP\n        if (apCost > aiAP) return;\n        if (card.kind === 'pol') {\n          const polCard = card;\n          const lane = polCard.tag === 'Staatsoberhaupt' || polCard.tag === 'Regierungschef' || polCard.tag === 'Diplomat' ? 'aussen' : 'innen';\n          if (prev.board[2][lane].length < 5) {\n            let priority = 0;\n            let reason = '';\n\n            // High priority for strong government cards when behind\n            if (lane === 'aussen' && influenceDiff > 5) {\n              priority = 100 + polCard.influence;\n              reason = 'Einfluss-Aufholjagd';\n            }\n            // High priority for Leadership/Diplomat synergy\n            else if (polCard.tag === 'Leadership' || polCard.tag === 'Diplomat') {\n              priority = 80 + polCard.influence;\n              reason = 'FÃ¤higkeiten-Synergie';\n            }\n            // Medium priority for government building\n            else if (lane === 'aussen') {\n              priority = 60 + polCard.influence;\n              reason = 'Regierungsaufbau';\n            }\n            // Lower priority for public cards\n            else {\n              priority = 30 + polCard.influence;\n              reason = 'Ã–ffentlichkeits-UnterstÃ¼tzung';\n            }\n            candidates.push({\n              index: idx,\n              card,\n              priority,\n              reason,\n              apCost\n            });\n          }\n        } else if (card.kind === 'spec') {\n          const specCard = card;\n\n          // Initiatives\n          if (specCard.type === 'Sofort-Initiative' || specCard.type === 'Dauerhaft-Initiative') {\n            let priority = 0;\n            let reason = '';\n\n            // High priority for opponent weakening\n            if (specCard.name.includes('Offensive') || specCard.name.includes('Skandal')) {\n              priority = 90;\n              reason = 'Gegner-SchwÃ¤chung';\n            }\n            // High priority for influence boost\n            else if (specCard.name.includes('Wirtschaftlicher Druck') || specCard.name.includes('Koalitionszwang')) {\n              if (influenceDiff > 3) {\n                priority = 85;\n                reason = 'Einfluss-VerstÃ¤rkung';\n              } else {\n                priority = 40;\n                reason = 'Defensiver Boost';\n              }\n            }\n            // Medium priority for other initiatives\n            else {\n              priority = 50;\n              reason = 'Allgemeine Initiative';\n            }\n            candidates.push({\n              index: idx,\n              card,\n              priority,\n              reason,\n              apCost\n            });\n          }\n\n          // Interventions (Traps)\n          else if (specCard.type === 'Intervention') {\n            let priority = 0;\n            let reason = '';\n\n            // High priority for media opponents\n            if (specCard.name === 'Fake News-Kampagne' && playerBoard.innen.some(c => c.name.includes('Oprah') || c.name.includes('Zuckerberg'))) {\n              priority = 95;\n              reason = 'Medien-Gegner bekÃ¤mpfen';\n            }\n            // High priority for strong opponents\n            else if (specCard.name === 'Whistleblower' && playerBoard.aussen.some(c => c.T === 2)) {\n              priority = 90;\n              reason = 'Tier-2-Gegner schwÃ¤chen';\n            }\n            // High priority for movement/NGO opponents\n            else if (specCard.name === 'Boykott-Kampagne' && playerBoard.innen.some(c => ['Greta Thunberg', 'Malala Yousafzai', 'Bill Gates', 'George Soros'].includes(c.name))) {\n              priority = 85;\n              reason = 'Bewegung/NGO-Gegner bekÃ¤mpfen';\n            }\n            // Medium priority for general interventions\n            else {\n              priority = 40;\n              reason = 'PrÃ¤ventive Falle';\n            }\n            candidates.push({\n              index: idx,\n              card,\n              priority,\n              reason,\n              apCost\n            });\n          }\n        }\n      });\n      if (candidates.length === 0) {\n        // Pass if no playable card\n        log('ðŸ¤– KI passt - keine spielbaren Karten verfÃ¼gbar.');\n        return {\n          ...prev,\n          passed: {\n            ...prev.passed,\n            2: true\n          }\n        };\n      }\n\n      // Sort by priority (highest first)\n      candidates.sort((a, b) => b.priority - a.priority);\n\n      // Debug logging of top candidates\n      log(`ðŸ¤– KI-Kandidaten (Top 3): ${candidates.slice(0, 3).map(c => `${c.card.name} (${c.priority} - ${c.reason})`).join(', ')}`);\n      const choice = candidates[0];\n\n      // Execute the chosen action\n      if (choice.card.kind === 'pol') {\n        var _influence;\n        const polChoice = choice.card;\n        const lane = polChoice.tag === 'Staatsoberhaupt' || polChoice.tag === 'Regierungschef' || polChoice.tag === 'Diplomat' ? 'aussen' : 'innen';\n\n        // Hand update\n        const newP2Hand = [...prev.hands[2]];\n        const [played] = newP2Hand.splice(choice.index, 1);\n\n        // Board update\n        const newP2Lane = [...prev.board[2][lane], played];\n        const newP2Board = {\n          ...prev.board[2],\n          [lane]: newP2Lane\n        };\n        const newBoard = {\n          ...prev.board,\n          2: newP2Board\n        };\n\n        // AP update\n        const newActionPoints = {\n          ...prev.actionPoints,\n          2: prev.actionPoints[2] - choice.apCost\n        };\n        const laneName = lane === 'aussen' ? 'Regierungsreihe' : 'Ã–ffentlichkeitsreihe';\n        const power = (_influence = played.influence) !== null && _influence !== void 0 ? _influence : 0;\n        log(`ðŸ¤– KI spielt ${played.name} (${power} Einfluss) nach ${laneName}. (${choice.reason})`);\n        return {\n          ...prev,\n          hands: {\n            ...prev.hands,\n            2: newP2Hand\n          },\n          board: newBoard,\n          actionPoints: newActionPoints\n        };\n      } else if (choice.card.kind === 'spec') {\n        const newP2Hand = [...prev.hands[2]];\n        const [played] = newP2Hand.splice(choice.index, 1);\n\n        // AP update\n        const newActionPoints = {\n          ...prev.actionPoints,\n          2: prev.actionPoints[2] - choice.apCost\n        };\n\n        // Permanent initiatives go to slots\n        if (played.type === 'Dauerhaft-Initiative') {\n          const slotType = played.slot === 'Ã–ffentlichkeit' ? 'public' : 'government';\n          if (slotType === 'government' && !prev.permanentSlots[2].government) {\n            const newPermanentSlots = {\n              ...prev.permanentSlots,\n              2: {\n                ...prev.permanentSlots[2],\n                government: played\n              }\n            };\n            log(`ðŸ¤– KI legt ${played.name} in Regierung Spezial-Slot. (${choice.reason})`);\n            return {\n              ...prev,\n              hands: {\n                ...prev.hands,\n                2: newP2Hand\n              },\n              permanentSlots: newPermanentSlots,\n              actionPoints: newActionPoints\n            };\n          } else if (slotType === 'public' && !prev.permanentSlots[2].public) {\n            const newPermanentSlots = {\n              ...prev.permanentSlots,\n              2: {\n                ...prev.permanentSlots[2],\n                public: played\n              }\n            };\n            log(`ðŸ¤– KI legt ${played.name} in Ã–ffentlichkeit Spezial-Slot. (${choice.reason})`);\n            return {\n              ...prev,\n              hands: {\n                ...prev.hands,\n                2: newP2Hand\n              },\n              permanentSlots: newPermanentSlots,\n              actionPoints: newActionPoints\n            };\n          }\n        }\n\n        // Execute immediate initiatives\n        log(`ðŸ¤– KI spielt Initiative ${played.name}. (${choice.reason})`);\n        return {\n          ...prev,\n          hands: {\n            ...prev.hands,\n            2: newP2Hand\n          },\n          actionPoints: newActionPoints\n        };\n      }\n      return prev;\n    });\n\n    // Auto-advance turn after AI action if needed\n    setTimeout(() => {\n      setGameState(currentState => {\n        if (currentState.current === 2 && currentState.actionPoints[2] <= 0) {\n          // Trigger turn advancement\n          const newCurrent = 1;\n          const newActionPoints = {\n            ...currentState.actionPoints\n          };\n          const newActionsUsed = {\n            ...currentState.actionsUsed\n          };\n          newActionPoints[newCurrent] = 2;\n          newActionsUsed[newCurrent] = 0;\n          log(`ðŸ¤– KI-Zug beendet - Spieler ${newCurrent} ist am Zug (2 AP verfÃ¼gbar)`);\n          return {\n            ...currentState,\n            current: newCurrent,\n            actionPoints: newActionPoints,\n            actionsUsed: newActionsUsed\n          };\n        }\n        return currentState;\n      });\n    }, 100);\n  }, [aiEnabled, log, gameState.current]);\n  const canUsePutinDoubleIntervention = useCallback(player => {\n    const board = gameState.board[player];\n    const allCards = [...board.innen, ...board.aussen].filter(c => c.kind === 'pol');\n    const putin = allCards.find(c => c.name === 'Vladimir Putin');\n    if (!putin || putin.deactivated || putin._activeUsed) return false;\n    const interventions = gameState.hands[player].filter(c => c.kind === 'spec');\n    return interventions.length >= 2;\n  }, [gameState]);\n  const executePutinDoubleIntervention = useCallback(interventionCardIds => {\n    setGameState(prev => {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const player = prev.current;\n      // Putin special ability implementation would go here\n      log(`ðŸ¤– Putin setzt doppelte Intervention ein`);\n      return prev;\n    });\n  }, [log]);\n  return {\n    runAITurn,\n    canUsePutinDoubleIntervention,\n    executePutinDoubleIntervention,\n    aiEnabled,\n    setAiEnabled: setAiEnabledWithLog,\n    aiPreset,\n    setAiPreset: setAiPreset // Use original function temporarily\n  };\n}\n_s(useGameAI, \"+uhHMLxDap/B8NVFNqsXEy76SxQ=\");","map":{"version":3,"names":["useCallback","useState","sumRow","getCardActionPointCost","useGameAI","gameState","setGameState","log","_s","_gameState$aiEnabled$","_gameState$aiEnabled","aiEnabled","aiPreset","setAiPreset","process","env","NODE_ENV","console","setAiEnabledWithLog","enabled","prev","_prev$aiEnabled$","_prev$aiEnabled","setAiPresetWithLog","preset","runAITurn","current","hands","length","actionPoints","map","c","name","hand","playerBoard","board","aiBoard","aiAP","playerInfluence","aussen","aiInfluence","influenceDiff","passed","candidates","forEach","card","idx","apCost","kind","polCard","lane","tag","priority","reason","influence","push","index","specCard","type","includes","innen","some","T","sort","a","b","slice","join","choice","_influence","polChoice","newP2Hand","played","splice","newP2Lane","newP2Board","newBoard","newActionPoints","laneName","power","slotType","slot","permanentSlots","government","newPermanentSlots","public","setTimeout","currentState","newCurrent","newActionsUsed","actionsUsed","canUsePutinDoubleIntervention","player","allCards","filter","putin","find","deactivated","_activeUsed","interventions","executePutinDoubleIntervention","interventionCardIds","setAiEnabled"],"sources":["C:/Users/skank/Videos/Cards/Milchcards/src/hooks/useGameAI.ts"],"sourcesContent":["import { useCallback, useState } from 'react';\r\nimport { GameState, Card, Player } from '../types/game';\r\nimport { PRESET_DECKS } from '../data/gameData';\r\nimport { sumRow, getCardActionPointCost } from '../utils/gameUtils';\r\n\r\nexport function useGameAI(\r\n  gameState: GameState,\r\n  setGameState: React.Dispatch<React.SetStateAction<GameState>>,\r\n  log: (msg: string) => void\r\n) {\r\n  const aiEnabled = gameState.aiEnabled?.[2] ?? false;\r\n  const [aiPreset, setAiPreset] = useState<keyof typeof PRESET_DECKS>('AUTORITAERER_REALIST');\r\n\r\n  // Debug logging for AI state changes (only in development)\r\n  if (process.env.NODE_ENV === 'development') {\r\n    console.log('ðŸ”§ DEBUG: useGameAI state - aiEnabled:', aiEnabled, 'aiPreset:', aiPreset);\r\n  }\r\n\r\n  // AI enabled state - controlled by game logic\r\n  // const forceAIEnabled = true; // Removed force-enable hack\r\n\r\n  // Enhanced setAiEnabled with logging\r\n  const setAiEnabledWithLog = useCallback((enabled: boolean) => {\r\n    setGameState(prev => ({\r\n      ...prev,\r\n      aiEnabled: {\r\n        1: prev.aiEnabled?.[1] ?? false,\r\n        2: enabled\r\n      }\r\n    }));\r\n\r\n    // Only set preset when AI is enabled\r\n    if (enabled) {\r\n      setAiPreset('AUTORITAERER_REALIST');\r\n    }\r\n  }, [setGameState]);\r\n\r\n  // Enhanced setAiPreset with logging - only when AI is enabled\r\n  const setAiPresetWithLog = useCallback((preset: keyof typeof PRESET_DECKS) => {\r\n    if (aiEnabled) {\r\n      console.log('ðŸ”§ DEBUG: setAiPreset called with:', preset);\r\n      setAiPreset(preset);\r\n    } else {\r\n      console.log('ðŸ”§ DEBUG: setAiPreset ignored - AI not enabled');\r\n    }\r\n  }, [aiEnabled]);\r\n\r\n  const runAITurn = useCallback(() => {\r\n    console.log('ðŸ”§ DEBUG: runAITurn called - aiEnabled:', aiEnabled, 'current player:', gameState.current);\r\n\r\n    setGameState(prev => {\r\n      // Check if AI is enabled and it's AI's turn\r\n      if (!aiEnabled || prev.current !== 2) {\r\n        console.log('ðŸ”§ DEBUG: AI not enabled or not AI turn - aiEnabled:', aiEnabled, 'current:', prev.current);\r\n        console.log('ðŸ”§ DEBUG: Full AI state check - aiEnabled:', aiEnabled, 'current:', prev.current, 'aiPreset:', aiPreset);\r\n        console.log('ðŸ”§ DEBUG: AI state check failed - returning early');\r\n        return prev;\r\n      }\r\n\r\n      console.log('ðŸ”§ DEBUG: AI turn starting - analyzing hand and board...');\r\n      if (process.env.NODE_ENV === 'development') {\r\n        console.log('ðŸ”§ DEBUG: AI hand size:', prev.hands[2].length);\r\n        console.log('ðŸ”§ DEBUG: AI AP:', prev.actionPoints[2]);\r\n        console.log('ðŸ”§ DEBUG: AI hand cards:', prev.hands[2].map(c => c.name));\r\n      }\r\n\r\n      const hand = prev.hands[2];\r\n      const playerBoard = prev.board[1]; // Player Board for analysis\r\n      const aiBoard = prev.board[2]; // AI Board for analysis\r\n      const aiAP = prev.actionPoints[2];\r\n\r\n      // Strategy Analysis\r\n      const playerInfluence = sumRow([...playerBoard.aussen]);\r\n      const aiInfluence = sumRow([...aiBoard.aussen]);\r\n      const influenceDiff = playerInfluence - aiInfluence;\r\n\r\n      log(`ðŸ¤– KI-Analyse: Spieler ${playerInfluence} vs KI ${aiInfluence} (Diff: ${influenceDiff})`);\r\n\r\n      // Check if AI should pass\r\n      if (aiAP <= 0) {\r\n        log('ðŸ¤– KI passt - keine AP mehr.');\r\n        return { ...prev, passed: { ...prev.passed, 2: true } };\r\n      }\r\n\r\n      // AI Strategy: Prioritize based on situation\r\n      const candidates: Array<{\r\n        index: number;\r\n        card: Card;\r\n        priority: number;\r\n        reason: string;\r\n        apCost: number;\r\n      }> = [];\r\n\r\n      hand.forEach((card, idx) => {\r\n        const apCost = getCardActionPointCost(card, prev, 2);\r\n\r\n        // Debug logging for card analysis\r\n        console.log(`ðŸ”§ DEBUG: AI card analysis - ${card.name}: AP cost ${apCost}, AI AP ${aiAP}, playable: ${apCost <= aiAP}`);\r\n\r\n        // Skip if not enough AP\r\n        if (apCost > aiAP) return;\r\n\r\n        if (card.kind === 'pol') {\r\n          const polCard = card as any;\r\n          const lane = polCard.tag === 'Staatsoberhaupt' || polCard.tag === 'Regierungschef' || polCard.tag === 'Diplomat' ? 'aussen' : 'innen';\r\n\r\n          if (prev.board[2][lane].length < 5) {\r\n            let priority = 0;\r\n            let reason = '';\r\n\r\n            // High priority for strong government cards when behind\r\n            if (lane === 'aussen' && influenceDiff > 5) {\r\n              priority = 100 + polCard.influence;\r\n              reason = 'Einfluss-Aufholjagd';\r\n            }\r\n            // High priority for Leadership/Diplomat synergy\r\n            else if (polCard.tag === 'Leadership' || polCard.tag === 'Diplomat') {\r\n              priority = 80 + polCard.influence;\r\n              reason = 'FÃ¤higkeiten-Synergie';\r\n            }\r\n            // Medium priority for government building\r\n            else if (lane === 'aussen') {\r\n              priority = 60 + polCard.influence;\r\n              reason = 'Regierungsaufbau';\r\n            }\r\n            // Lower priority for public cards\r\n            else {\r\n              priority = 30 + polCard.influence;\r\n              reason = 'Ã–ffentlichkeits-UnterstÃ¼tzung';\r\n            }\r\n\r\n            candidates.push({ index: idx, card, priority, reason, apCost });\r\n          }\r\n        }\r\n        else if (card.kind === 'spec') {\r\n          const specCard = card as any;\r\n\r\n          // Initiatives\r\n          if (specCard.type === 'Sofort-Initiative' || specCard.type === 'Dauerhaft-Initiative') {\r\n            let priority = 0;\r\n            let reason = '';\r\n\r\n            // High priority for opponent weakening\r\n            if (specCard.name.includes('Offensive') || specCard.name.includes('Skandal')) {\r\n              priority = 90;\r\n              reason = 'Gegner-SchwÃ¤chung';\r\n            }\r\n            // High priority for influence boost\r\n            else if (specCard.name.includes('Wirtschaftlicher Druck') || specCard.name.includes('Koalitionszwang')) {\r\n              if (influenceDiff > 3) {\r\n                priority = 85;\r\n                reason = 'Einfluss-VerstÃ¤rkung';\r\n              } else {\r\n                priority = 40;\r\n                reason = 'Defensiver Boost';\r\n              }\r\n            }\r\n            // Medium priority for other initiatives\r\n            else {\r\n              priority = 50;\r\n              reason = 'Allgemeine Initiative';\r\n            }\r\n\r\n            candidates.push({ index: idx, card, priority, reason, apCost });\r\n          }\r\n\r\n          // Interventions (Traps)\r\n          else if (specCard.type === 'Intervention') {\r\n            let priority = 0;\r\n            let reason = '';\r\n\r\n            // High priority for media opponents\r\n            if (specCard.name === 'Fake News-Kampagne' &&\r\n                playerBoard.innen.some(c => c.name.includes('Oprah') || c.name.includes('Zuckerberg'))) {\r\n              priority = 95;\r\n              reason = 'Medien-Gegner bekÃ¤mpfen';\r\n            }\r\n            // High priority for strong opponents\r\n            else if (specCard.name === 'Whistleblower' &&\r\n                     playerBoard.aussen.some(c => (c as any).T === 2)) {\r\n              priority = 90;\r\n              reason = 'Tier-2-Gegner schwÃ¤chen';\r\n            }\r\n            // High priority for movement/NGO opponents\r\n            else if (specCard.name === 'Boykott-Kampagne' &&\r\n                     playerBoard.innen.some(c => ['Greta Thunberg', 'Malala Yousafzai', 'Bill Gates', 'George Soros'].includes(c.name))) {\r\n              priority = 85;\r\n              reason = 'Bewegung/NGO-Gegner bekÃ¤mpfen';\r\n            }\r\n            // Medium priority for general interventions\r\n            else {\r\n              priority = 40;\r\n              reason = 'PrÃ¤ventive Falle';\r\n            }\r\n\r\n            candidates.push({ index: idx, card, priority, reason, apCost });\r\n          }\r\n        }\r\n      });\r\n\r\n      if (candidates.length === 0) {\r\n        // Pass if no playable card\r\n        log('ðŸ¤– KI passt - keine spielbaren Karten verfÃ¼gbar.');\r\n        return { ...prev, passed: { ...prev.passed, 2: true } };\r\n      }\r\n\r\n      // Sort by priority (highest first)\r\n      candidates.sort((a, b) => b.priority - a.priority);\r\n\r\n      // Debug logging of top candidates\r\n      log(`ðŸ¤– KI-Kandidaten (Top 3): ${candidates.slice(0, 3).map(c => `${c.card.name} (${c.priority} - ${c.reason})`).join(', ')}`);\r\n\r\n      const choice = candidates[0];\r\n\r\n      // Execute the chosen action\r\n      if (choice.card.kind === 'pol') {\r\n        const polChoice = choice.card as any;\r\n        const lane = polChoice.tag === 'Staatsoberhaupt' || polChoice.tag === 'Regierungschef' || polChoice.tag === 'Diplomat' ? 'aussen' : 'innen';\r\n\r\n        // Hand update\r\n        const newP2Hand = [...prev.hands[2]];\r\n        const [played] = newP2Hand.splice(choice.index, 1);\r\n\r\n        // Board update\r\n        const newP2Lane = [...prev.board[2][lane], played];\r\n        const newP2Board = { ...prev.board[2], [lane]: newP2Lane };\r\n        const newBoard = { ...prev.board, 2: newP2Board };\r\n\r\n        // AP update\r\n        const newActionPoints = { ...prev.actionPoints, 2: prev.actionPoints[2] - choice.apCost };\r\n\r\n        const laneName = lane === 'aussen' ? 'Regierungsreihe' : 'Ã–ffentlichkeitsreihe';\r\n        const power = (played as any).influence ?? 0;\r\n        log(`ðŸ¤– KI spielt ${played.name} (${power} Einfluss) nach ${laneName}. (${choice.reason})`);\r\n\r\n        return {\r\n          ...prev,\r\n          hands: { ...prev.hands, 2: newP2Hand },\r\n          board: newBoard,\r\n          actionPoints: newActionPoints\r\n        };\r\n      }\r\n\r\n      else if (choice.card.kind === 'spec') {\r\n        const newP2Hand = [...prev.hands[2]];\r\n        const [played] = newP2Hand.splice(choice.index, 1);\r\n\r\n        // AP update\r\n        const newActionPoints = { ...prev.actionPoints, 2: prev.actionPoints[2] - choice.apCost };\r\n\r\n        // Permanent initiatives go to slots\r\n        if ((played as any).type === 'Dauerhaft-Initiative') {\r\n          const slotType = (played as any).slot === 'Ã–ffentlichkeit' ? 'public' : 'government';\r\n\r\n          if (slotType === 'government' && !prev.permanentSlots[2].government) {\r\n            const newPermanentSlots = {\r\n              ...prev.permanentSlots,\r\n              2: { ...prev.permanentSlots[2], government: played }\r\n            };\r\n            log(`ðŸ¤– KI legt ${played.name} in Regierung Spezial-Slot. (${choice.reason})`);\r\n\r\n            return {\r\n              ...prev,\r\n              hands: { ...prev.hands, 2: newP2Hand },\r\n              permanentSlots: newPermanentSlots,\r\n              actionPoints: newActionPoints\r\n            };\r\n          }\r\n          else if (slotType === 'public' && !prev.permanentSlots[2].public) {\r\n            const newPermanentSlots = {\r\n              ...prev.permanentSlots,\r\n              2: { ...prev.permanentSlots[2], public: played }\r\n            };\r\n            log(`ðŸ¤– KI legt ${played.name} in Ã–ffentlichkeit Spezial-Slot. (${choice.reason})`);\r\n\r\n            return {\r\n              ...prev,\r\n              hands: { ...prev.hands, 2: newP2Hand },\r\n              permanentSlots: newPermanentSlots,\r\n              actionPoints: newActionPoints\r\n            };\r\n          }\r\n        }\r\n\r\n        // Execute immediate initiatives\r\n        log(`ðŸ¤– KI spielt Initiative ${played.name}. (${choice.reason})`);\r\n        return {\r\n          ...prev,\r\n          hands: { ...prev.hands, 2: newP2Hand },\r\n          actionPoints: newActionPoints\r\n        };\r\n      }\r\n\r\n      return prev;\r\n    });\r\n\r\n    // Auto-advance turn after AI action if needed\r\n    setTimeout(() => {\r\n      setGameState(currentState => {\r\n        if (currentState.current === 2 && currentState.actionPoints[2] <= 0) {\r\n          // Trigger turn advancement\r\n          const newCurrent: Player = 1;\r\n          const newActionPoints = { ...currentState.actionPoints };\r\n          const newActionsUsed = { ...currentState.actionsUsed };\r\n          newActionPoints[newCurrent] = 2;\r\n          newActionsUsed[newCurrent] = 0;\r\n\r\n          log(`ðŸ¤– KI-Zug beendet - Spieler ${newCurrent} ist am Zug (2 AP verfÃ¼gbar)`);\r\n\r\n          return {\r\n            ...currentState,\r\n            current: newCurrent,\r\n            actionPoints: newActionPoints,\r\n            actionsUsed: newActionsUsed\r\n          };\r\n        }\r\n        return currentState;\r\n      });\r\n    }, 100);\r\n  }, [aiEnabled, log, gameState.current]);\r\n\r\n  const canUsePutinDoubleIntervention = useCallback((player: Player): boolean => {\r\n    const board = gameState.board[player];\r\n    const allCards = [...board.innen, ...board.aussen].filter(c => c.kind === 'pol') as any[];\r\n    const putin = allCards.find(c => c.name === 'Vladimir Putin');\r\n\r\n    if (!putin || putin.deactivated || putin._activeUsed) return false;\r\n\r\n    const interventions = gameState.hands[player].filter(c => c.kind === 'spec');\r\n    return interventions.length >= 2;\r\n  }, [gameState]);\r\n\r\n  const executePutinDoubleIntervention = useCallback((interventionCardIds: number[]) => {\r\n    setGameState(prev => {\r\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n      const player = prev.current;\r\n      // Putin special ability implementation would go here\r\n      log(`ðŸ¤– Putin setzt doppelte Intervention ein`);\r\n      return prev;\r\n    });\r\n  }, [log]);\r\n\r\n  return {\r\n    runAITurn,\r\n    canUsePutinDoubleIntervention,\r\n    executePutinDoubleIntervention,\r\n    aiEnabled,\r\n    setAiEnabled: setAiEnabledWithLog,\r\n    aiPreset,\r\n    setAiPreset: setAiPreset, // Use original function temporarily\r\n  };\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}