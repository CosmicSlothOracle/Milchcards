{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\skank\\\\Videos\\\\Cards\\\\Milchcards\\\\src\\\\components\\\\GameCanvas.tsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useCallback } from 'react';\nimport { LAYOUT, getZone, computeSlotRects, getUiTransform, getLaneCapacity, getPublicRects, getGovernmentRects } from '../ui/layout';\nimport { sortHandCards } from '../utils/gameUtils';\nimport { getCardImagePath } from '../data/gameData';\nimport influenceIconUrl from '../assets/icons/influence.svg';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const GameCanvas = ({\n  gameState,\n  selectedHandIndex,\n  onCardClick,\n  onCardHover,\n  devMode = false\n}) => {\n  _s();\n  const canvasRef = useRef(null);\n  const clickZonesRef = useRef([]);\n  // Smooth vertical scroll for P1 hand when it has more than visible slots\n  const handScrollTargetRef = useRef(0);\n  const handScrollCurrentRef = useRef(0);\n  const handScrollEnabledRef = useRef(true);\n  // Touch handling refs\n  const touchStartYRef = useRef(null);\n  const lastTouchYRef = useRef(null);\n  const isTouchingRef = useRef(false);\n  const backgroundImageRef = useRef(null);\n  const imageCacheRef = useRef(new Map());\n  const influenceImgRef = useRef(null);\n  // Animation state for visual influence changes: Map<uid, Array<Anim>>\n  const influenceAnimRef = useRef(new Map());\n  // Previous per-card influence snapshot to detect increases\n  const prevInfluencesRef = useRef({});\n\n  // Load influence icon once\n  useEffect(() => {\n    const img = new Image();\n    img.src = influenceIconUrl;\n    influenceImgRef.current = img;\n  }, []);\n  const drawCardAt = useCallback((ctx, card, x, y, size, selected = false, showAPCost = false, player) => {\n    var _shield;\n    let dx = x,\n      dy = y,\n      s = size;\n    if (selected) {\n      s = Math.floor(size * 1.05);\n      dx = x - Math.floor((s - size) / 2);\n      dy = y - Math.floor((s - size) / 2);\n    }\n\n    // Note: pulse overlay is drawn at top layer after all cards are rendered\n\n    // Draw card image with caching to prevent flicker in continuous loop\n    const src = getCardImagePath(card, 'ui');\n    const cached = imageCacheRef.current.get(src);\n    if (cached && cached.complete) {\n      ctx.drawImage(cached, dx, dy, s, s);\n    } else {\n      const img = new Image();\n      img.onload = () => {\n        imageCacheRef.current.set(src, img);\n        ctx.drawImage(img, dx, dy, s, s);\n      };\n      img.src = src;\n      imageCacheRef.current.set(src, img);\n    }\n\n    // Status-Indikatoren (für alle Board-Karten)\n    // Einfluss-Wert dauerhaft anzeigen (oben links) – nur für Regierungskarten\n    if (card.kind === 'pol') {\n      var _influence;\n      const barH = Math.max(20, Math.floor(s * 0.12) + 6);\n      ctx.fillStyle = 'rgba(0,0,0,0.6)';\n      ctx.fillRect(dx, dy + s - barH, s, barH);\n      ctx.fillStyle = '#ffffff';\n      const fontSize = Math.floor(s * 0.12);\n      ctx.font = `bold ${fontSize}px sans-serif`;\n      ctx.textAlign = 'left';\n      ctx.textBaseline = 'middle';\n      ctx.fillText(`${(_influence = card.influence) !== null && _influence !== void 0 ? _influence : 0}`, dx + 8, dy + s - barH / 2);\n    }\n    // Schutz-Status (blauer Punkt)\n    if (card.protected || ((_shield = card.shield) !== null && _shield !== void 0 ? _shield : 0) > 0) {\n      ctx.fillStyle = '#1da1f2';\n      ctx.fillRect(dx + s - 22, dy + 6, 16, 16);\n    }\n    // Deaktiviert-Status (roter Punkt)\n    if (card.deactivated) {\n      ctx.fillStyle = '#b63838';\n      ctx.fillRect(dx + s - 22, dy + 26, 16, 16);\n    }\n\n    // Einfluss-Badge für Handkarten oben rechts (nur Regierungskarten)\n    if (showAPCost && player && card.kind === 'pol') {\n      var _influence2;\n      const badgeHeight = Math.max(16, Math.floor(s * 0.12));\n      const badgeWidth = badgeHeight * 2;\n      const badgeX = dx + s - badgeWidth - 6;\n      const badgeY = dy + 6;\n\n      // Semi-transparent dunkler Hintergrund\n      ctx.fillStyle = 'rgba(0,0,0,0.6)';\n      ctx.beginPath();\n      ctx.roundRect(badgeX, badgeY, badgeWidth, badgeHeight, badgeHeight / 2);\n      ctx.fill();\n\n      // Influence icon (90% opacity) links im Badge\n      if (influenceImgRef.current && influenceImgRef.current.complete) {\n        ctx.globalAlpha = 0.9;\n        ctx.drawImage(influenceImgRef.current, badgeX + 2, badgeY + 2, badgeHeight - 4, badgeHeight - 4);\n        ctx.globalAlpha = 1;\n      }\n\n      // Influence number rechts im Badge\n      ctx.fillStyle = '#ffffff';\n      ctx.font = `bold ${Math.floor(badgeHeight * 0.5)}px sans-serif`;\n      ctx.textAlign = 'right';\n      ctx.textBaseline = 'middle';\n      ctx.fillText(`${(_influence2 = card.influence) !== null && _influence2 !== void 0 ? _influence2 : 0}`, badgeX + badgeWidth - 4, badgeY + badgeHeight / 2);\n\n      // Reset align\n      ctx.textAlign = 'start';\n      ctx.textBaseline = 'alphabetic';\n    }\n\n    // Draw floating +N green labels for recent influence increases\n    try {\n      var _uid, _id;\n      const uid = (_uid = card.uid) !== null && _uid !== void 0 ? _uid : (_id = card.id) === null || _id === void 0 ? void 0 : _id.toString();\n      if (uid) {\n        const now = performance.now();\n        const anims = influenceAnimRef.current.get(uid) || [];\n        const remaining = [];\n        anims.forEach(a => {\n          const t = (now - a.start) / a.duration;\n          if (t < 1) {\n            // position label top-center of card\n            const labelX = dx + s / 2;\n            const labelY = dy - 8 - t * 18; // float up over time\n            const alpha = Math.max(0, 1 - t);\n            ctx.save();\n            ctx.globalAlpha = alpha;\n            ctx.fillStyle = '#2ecc71'; // green\n            ctx.font = `bold ${Math.max(12, Math.floor(s * 0.14))}px sans-serif`;\n            ctx.textAlign = 'center';\n            ctx.textBaseline = 'middle';\n            ctx.fillText(`+${a.amount}`, labelX, labelY);\n            ctx.restore();\n            remaining.push(a);\n          }\n        });\n        if (remaining.length > 0) influenceAnimRef.current.set(uid, remaining);else influenceAnimRef.current.delete(uid);\n      }\n    } catch (e) {\n      // ignore animation errors\n    }\n\n    // Auswahl-Rahmen\n    if (selected) {\n      ctx.strokeStyle = '#61dafb';\n      ctx.lineWidth = 3;\n      ctx.strokeRect(dx + 1, dy + 1, s - 2, s - 2);\n      ctx.lineWidth = 1;\n    }\n\n    // Return exact 256x256 click zone over the card\n    // Since all cards are 256x256, the click zone should match exactly\n    return {\n      x: dx,\n      y: dy,\n      w: 256,\n      h: 256\n    };\n  }, [gameState]);\n\n  // Slot-Benennungs-Funktion basierend auf Glossar\n  const getSlotDisplayName = useCallback((zoneId, index, player) => {\n    const slotNumber = index + 1;\n    if (zoneId.includes('government')) {\n      if (zoneId.includes('player')) {\n        return `Regierungsreihe Slot ${slotNumber}`;\n      } else {\n        return `Gegner Regierung Slot ${slotNumber}`;\n      }\n    } else if (zoneId.includes('public')) {\n      if (zoneId.includes('player')) {\n        return `Öffentlichkeitsreihe Slot ${slotNumber}`;\n      } else {\n        return `Gegner Öffentlichkeit Slot ${slotNumber}`;\n      }\n    } else if (zoneId.includes('permanent.government')) {\n      if (zoneId.includes('player')) {\n        return 'Regierung Spezial-Slot';\n      } else {\n        return 'Gegner Regierung Spezial-Slot';\n      }\n    } else if (zoneId.includes('permanent.public')) {\n      if (zoneId.includes('player')) {\n        return 'Öffentlichkeit Spezial-Slot';\n      } else {\n        return 'Gegner Öffentlichkeit Spezial-Slot';\n      }\n    } else if (zoneId.includes('instant')) {\n      if (zoneId.includes('player')) {\n        return 'Sofort-Slot';\n      } else {\n        return 'Gegner Sofort-Slot';\n      }\n    } else if (zoneId.includes('hand')) {\n      return 'Hand';\n    } else if (zoneId.includes('interventions')) {\n      return 'Interventionen';\n    }\n    return `Slot ${slotNumber}`;\n  }, []);\n  const drawLane = useCallback((ctx, zoneId, player, lane, clickable) => {\n    const zone = getZone(zoneId);\n    if (!zone) return;\n    const slots = computeSlotRects(zone);\n    const arr = gameState.board[player][lane];\n    slots.forEach((s, idx) => {\n      const card = arr[idx];\n\n      // Hintergrundfarbe nach Kategorie\n      let bgColor = 'rgba(0,0,0,0.1)'; // Standard\n      if (zoneId.includes('government')) {\n        bgColor = 'rgba(255, 197, 0, 0.15)'; // Hellgelb für Regierung\n      } else if (zoneId.includes('public')) {\n        bgColor = 'rgba(0, 255, 0, 0.15)'; // Hellgrün für Öffentlichkeit\n      }\n      ctx.fillStyle = bgColor;\n      ctx.fillRect(s.x, s.y, s.w, s.h);\n\n      // Slot-Rahmen\n      ctx.strokeStyle = 'rgba(255,255,255,0.06)';\n      ctx.strokeRect(s.x + 0.5, s.y + 0.5, s.w - 1, s.h - 1);\n      if (card) {\n        const isSelected = player === 1 && selectedHandIndex !== null && gameState.hands[1][selectedHandIndex] === card;\n        const clickZone = drawCardAt(ctx, card, s.x, s.y, s.w, isSelected, false);\n\n        // Kartenname unter dem Slot anzeigen\n        ctx.fillStyle = 'rgba(255,255,255,0.9)';\n        ctx.font = 'bold 12px sans-serif';\n        ctx.textAlign = 'center';\n        const textY = s.y + s.h + 16;\n        ctx.fillText(card.name, s.x + s.w / 2, textY);\n        clickZonesRef.current.push({\n          ...clickZone,\n          data: {\n            type: 'board_card',\n            player,\n            lane,\n            index: idx,\n            card\n          }\n        });\n      } else if (clickable && gameState.current === player) {\n        // Slot-Benennung anzeigen (für den aktuellen Spieler)\n        const slotName = getSlotDisplayName(zoneId, idx, player);\n        ctx.fillStyle = 'rgba(255,255,255,0.6)';\n        ctx.font = '11px sans-serif';\n        ctx.textAlign = 'center';\n        const textY = s.y + s.h / 2;\n        ctx.fillText(slotName, s.x + s.w / 2, textY);\n        clickZonesRef.current.push({\n          x: s.x,\n          y: s.y,\n          w: s.w,\n          h: s.h,\n          data: {\n            type: 'row_slot',\n            lane,\n            index: idx\n          }\n        });\n      }\n    });\n  }, [gameState, selectedHandIndex, drawCardAt, getSlotDisplayName]);\n  const drawHandP1 = useCallback(ctx => {\n    const hand = sortHandCards(gameState.hands[1]);\n    const zone = getZone('hand.player');\n    if (!zone) return;\n    const slots = computeSlotRects(zone);\n    // Apply smooth offset (lerp towards target)\n    const target = handScrollTargetRef.current;\n    handScrollCurrentRef.current += (target - handScrollCurrentRef.current) * 0.15; // easing\n    const offsetY = Math.round(handScrollCurrentRef.current);\n    slots.forEach((s, i) => {\n      const card = hand[i];\n      if (!card) return;\n      // Find original index in unsorted hand for click handling\n      const originalIndex = gameState.hands[1].findIndex(c => c.uid === card.uid);\n      const isSel = selectedHandIndex === originalIndex;\n      // apply vertical offset\n      const sx = s.x;\n      const sy = s.y + offsetY;\n      const clickZone = drawCardAt(ctx, card, sx, sy, s.w, isSel, true, 1); // Show AP cost for player 1 hand\n      clickZonesRef.current.push({\n        ...clickZone,\n        data: {\n          type: 'hand_p1',\n          index: originalIndex,\n          card\n        }\n      });\n    });\n  }, [gameState.hands, selectedHandIndex, drawCardAt]);\n\n  // 🔧 DEV MODE: Player 2 Hand (rechts unten, kompakter)\n  const drawHandP2 = useCallback(ctx => {\n    const hand = sortHandCards(gameState.hands[2]);\n    const zone = getZone('hand.opponent');\n    if (!zone) return;\n    const slots = computeSlotRects(zone);\n\n    // Hintergrund für P2 Hand\n    const [x, y, w, h] = zone.rectPx;\n    ctx.fillStyle = 'rgba(255, 100, 100, 0.15)'; // Rötlicher Hintergrund für P2\n    ctx.fillRect(x, y, w, h);\n    ctx.strokeStyle = 'rgba(255, 100, 100, 0.3)';\n    ctx.strokeRect(x + 0.5, y + 0.5, w - 1, h - 1);\n\n    // Label für P2 Hand\n    ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\n    ctx.font = 'bold 14px sans-serif';\n    ctx.textAlign = 'center';\n    ctx.fillText('Player 2 Hand', x + w / 2, y - 8);\n    slots.forEach((s, i) => {\n      const card = hand[i];\n      if (!card) return;\n      // Find original index in unsorted hand for click handling\n      const originalIndex = gameState.hands[2].findIndex(c => c.uid === card.uid);\n      const isSel = gameState.current === 2 && selectedHandIndex === originalIndex;\n      const clickZone = drawCardAt(ctx, card, s.x, s.y, s.w, isSel, true, 2); // Show AP cost for player 2 hand\n      clickZonesRef.current.push({\n        ...clickZone,\n        data: {\n          type: 'hand_p2',\n          index: originalIndex,\n          card\n        }\n      });\n    });\n  }, [gameState, selectedHandIndex, drawCardAt]);\n  // Interventions strip (player traps)\n  const drawInterventionsP1 = useCallback(ctx => {\n    const traps = gameState.traps[1] || [];\n    const zone = getZone('interventions.player');\n    if (!zone) return;\n\n    // Single intervention slot\n    const [zx, zy, zw, zh] = zone.rectPx;\n    const card = traps[0]; // Only first trap\n\n    // Hintergrund für Interventions-Slot\n    ctx.fillStyle = 'rgba(200, 160, 255, 0.15)'; // Lavendelfarben für Interventionen\n    ctx.fillRect(zx, zy, zw, zh);\n    ctx.strokeStyle = 'rgba(200, 160, 255, 0.3)';\n    ctx.strokeRect(zx + 0.5, zy + 0.5, zw - 1, zh - 1);\n\n    // Slot-Benennung für Interventions-Slot\n    ctx.fillStyle = 'rgba(200, 160, 255, 0.8)';\n    ctx.font = '11px sans-serif';\n    ctx.textAlign = 'left';\n    ctx.fillText('Intervention', zx + 8, zy + zh - 6);\n    if (card) {\n      const clickZone = drawCardAt(ctx, card, zx, zy, zw, false, false);\n      clickZonesRef.current.push({\n        ...clickZone,\n        data: {\n          type: 'trap_p1',\n          index: 0,\n          card\n        }\n      });\n    }\n  }, [gameState.traps, drawCardAt]);\n\n  // Interventions strip (opponent traps)\n  const drawInterventionsP2 = useCallback(ctx => {\n    const traps = gameState.traps[2] || [];\n    const zone = getZone('interventions.opponent');\n    if (!zone) return;\n\n    // Single intervention slot\n    const [zx, zy, zw, zh] = zone.rectPx;\n    const card = traps[0]; // Only first trap\n\n    // Hintergrund für Interventions-Slot\n    ctx.fillStyle = 'rgba(200, 160, 255, 0.15)'; // Lavendelfarben für Interventionen\n    ctx.fillRect(zx, zy, zw, zh);\n    ctx.strokeStyle = 'rgba(200, 160, 255, 0.3)';\n    ctx.strokeRect(zx + 0.5, zy + 0.5, zw - 1, zh - 1);\n\n    // Slot-Benennung für Interventions-Slot\n    ctx.fillStyle = 'rgba(200, 160, 255, 0.8)';\n    ctx.font = '11px sans-serif';\n    ctx.textAlign = 'left';\n    ctx.fillText('Intervention', zx + 8, zy + zh - 6);\n    if (card) {\n      const clickZone = drawCardAt(ctx, card, zx, zy, zw, false, false);\n      clickZonesRef.current.push({\n        ...clickZone,\n        data: {\n          type: 'trap_p2',\n          index: 0,\n          card\n        }\n      });\n    }\n  }, [gameState.traps, drawCardAt]);\n\n  // Single slot drawing function\n  const drawSingleSlot = useCallback((ctx, zoneId, card, clickType, player) => {\n    const zone = getZone(zoneId);\n    if (!zone) return;\n    const [x, y, w, h] = zone.rectPx;\n\n    // Hintergrundfarbe nach Kategorie\n    let bgColor = 'rgba(0,0,0,0.1)'; // Standard\n    if (zoneId.includes('government')) {\n      bgColor = 'rgba(255, 197, 0, 0.15)'; // Hellgelb für Regierung\n    } else if (zoneId.includes('public')) {\n      bgColor = 'rgba(0, 255, 0, 0.15)'; // Hellgrün für Öffentlichkeit\n    } else if (zoneId.includes('instant')) {\n      bgColor = 'rgba(127, 116, 91, 0.15)'; // Neutral für Sofort-Slots\n    } else if (zoneId.includes('permanent')) {\n      // Unterscheide zwischen government und public permanent slots\n      if (zoneId.includes('government')) {\n        bgColor = 'rgba(255, 197, 0, 0.15)';\n      } else if (zoneId.includes('public')) {\n        bgColor = 'rgba(0, 255, 0, 0.15)';\n      }\n    }\n    ctx.fillStyle = bgColor;\n    ctx.fillRect(x, y, w, h);\n\n    // Draw slot border\n    ctx.strokeStyle = 'rgba(255,255,255,0.06)';\n    ctx.strokeRect(x + 0.5, y + 0.5, w - 1, h - 1);\n    if (card) {\n      const isSelected = player === 1 && selectedHandIndex !== null && gameState.hands[1][selectedHandIndex] === card;\n      const clickZone = drawCardAt(ctx, card, x, y, w, isSelected, false);\n\n      // Kartenname unter dem Slot anzeigen\n      ctx.fillStyle = 'rgba(255,255,255,0.9)';\n      ctx.font = 'bold 12px sans-serif';\n      ctx.textAlign = 'center';\n      const textY = y + h + 16;\n      ctx.fillText(card.name, x + w / 2, textY);\n      clickZonesRef.current.push({\n        ...clickZone,\n        data: {\n          type: 'slot_card',\n          slot: clickType,\n          card\n        }\n      });\n\n      // 🔧 NEU: Sofort-Initiative-Slots sind klickbar für Aktivierung\n      if (clickType === 'instant' && gameState.current === player) {\n        clickZonesRef.current.push({\n          x,\n          y,\n          w,\n          h,\n          data: {\n            type: 'activate_instant',\n            player,\n            card\n          }\n        });\n      }\n    } else if (gameState.current === player) {\n      // Slot-Benennung für leere Slots anzeigen (für den aktuellen Spieler)\n      const slotName = getSlotDisplayName(zoneId, 0, player);\n      ctx.fillStyle = 'rgba(255,255,255,0.6)';\n      ctx.font = '11px sans-serif';\n      ctx.textAlign = 'center';\n      const textY = y + h / 2;\n      ctx.fillText(slotName, x + w / 2, textY);\n      clickZonesRef.current.push({\n        x,\n        y,\n        w,\n        h,\n        data: {\n          type: 'empty_slot',\n          slot: clickType\n        }\n      });\n    }\n  }, [selectedHandIndex, gameState, drawCardAt, getSlotDisplayName]);\n\n  // Draw permanent slots for player\n  const drawPermanentSlotsP1 = useCallback(ctx => {\n    drawSingleSlot(ctx, 'slot.permanent.government.player', gameState.permanentSlots[1].government, 'permanent_government', 1);\n    drawSingleSlot(ctx, 'slot.permanent.public.player', gameState.permanentSlots[1].public, 'permanent_public', 1);\n  }, [gameState.permanentSlots, drawSingleSlot]);\n\n  // Draw permanent slots for opponent\n  const drawPermanentSlotsP2 = useCallback(ctx => {\n    drawSingleSlot(ctx, 'slot.permanent.government.opponent', gameState.permanentSlots[2].government, 'permanent_government', 2);\n    drawSingleSlot(ctx, 'slot.permanent.public.opponent', gameState.permanentSlots[2].public, 'permanent_public', 2);\n  }, [gameState.permanentSlots, drawSingleSlot]);\n\n  // Draw instant slots\n  const drawInstantSlots = useCallback(ctx => {\n    // Sofort-Initiative-Slots aus dem Board zeichnen\n    const sofortPlayerCard = gameState.board[1].sofort[0];\n    const sofortOppCard = gameState.board[2].sofort[0];\n    drawSingleSlot(ctx, 'slot.instant.player', sofortPlayerCard, 'instant', 1);\n    drawSingleSlot(ctx, 'slot.instant.opponent', sofortOppCard, 'instant', 2);\n  }, [gameState.board, drawSingleSlot]);\n\n  // Aktive Schlüsselwörter und Unterkategorien ermitteln\n  const getActiveKeywordsAndSubcategories = useCallback(player => {\n    const board = gameState.board[player];\n    const permanentSlots = gameState.permanentSlots[player];\n    const allCards = [...board.innen, ...board.aussen, permanentSlots.government, permanentSlots.public].filter(c => c && c.kind === 'pol');\n    const keywords = new Set();\n    const subcategories = new Set();\n    allCards.forEach(card => {\n      if (!card.deactivated) {\n        // Regierungskarten-Schlüsselwörter\n        if (card.tag === 'Leadership') {\n          keywords.add('Leadership');\n        }\n        if (card.tag === 'Diplomat') {\n          keywords.add('Diplomat');\n        }\n\n        // Öffentlichkeits-Unterkategorien (für Karten in Öffentlichkeitsreihe)\n        if (board.innen.includes(card)) {\n          const publicCard = card;\n          if (publicCard.tag) {\n            // Oligarch\n            const oligarchNames = ['Elon Musk', 'Bill Gates', 'George Soros', 'Warren Buffett', 'Mukesh Ambani', 'Jeff Bezos', 'Alisher Usmanov', 'Gautam Adani', 'Jack Ma', 'Zhang Yiming', 'Roman Abramovich'];\n            if (oligarchNames.includes(publicCard.name)) {\n              subcategories.add('Oligarch');\n            }\n\n            // Plattform\n            const platformNames = ['Mark Zuckerberg', 'Tim Cook', 'Sam Altman', 'Jack Ma'];\n            if (platformNames.includes(publicCard.name)) {\n              subcategories.add('Plattform');\n            }\n\n            // Bewegung\n            const movementNames = ['Greta Thunberg', 'Malala Yousafzai', 'Ai Weiwei', 'Alexei Navalny'];\n            if (movementNames.includes(publicCard.name)) {\n              subcategories.add('Bewegung');\n            }\n\n            // NGO/Think-Tank\n            const ngoNames = ['Bill Gates', 'George Soros', 'Jennifer Doudna', 'Noam Chomsky', 'Anthony Fauci'];\n            if (ngoNames.includes(publicCard.name)) {\n              subcategories.add('NGO/Think-Tank');\n            }\n\n            // Intelligenz\n            const intelligenceNames = ['Jennifer Doudna', 'Noam Chomsky', 'Edward Snowden', 'Julian Assange', 'Yuval Noah Harari', 'Ai Weiwei', 'Alexei Navalny', 'Anthony Fauci'];\n            if (intelligenceNames.includes(publicCard.name)) {\n              subcategories.add('Intelligenz');\n            }\n\n            // Medien\n            const mediaNames = ['Oprah Winfrey'];\n            if (mediaNames.includes(publicCard.name)) {\n              subcategories.add('Medien');\n            }\n          }\n        }\n      }\n    });\n    return {\n      keywords: Array.from(keywords),\n      subcategories: Array.from(subcategories)\n    };\n  }, [gameState]);\n\n  // Info-Panels zeichnen\n  const drawInfoPanels = useCallback(ctx => {\n    const {\n      keywords,\n      subcategories\n    } = getActiveKeywordsAndSubcategories(1);\n\n    // Panel für Regierungsschlüsselwörter (rechts neben Regierungsslots)\n    const govPanelX = 1640 + 256 + 20; // Nach dem letzten permanenten Slot\n    const govPanelY = 300; // Auf Höhe der Regierungsslots\n    const govPanelW = 120;\n    const govPanelH = 256;\n\n    // Regierungspanel Hintergrund\n    ctx.fillStyle = 'rgba(255, 197, 0, 0.15)';\n    ctx.fillRect(govPanelX, govPanelY, govPanelW, govPanelH);\n    ctx.strokeStyle = 'rgba(255, 197, 0, 0.3)';\n    ctx.strokeRect(govPanelX + 0.5, govPanelY + 0.5, govPanelW - 1, govPanelH - 1);\n\n    // Regierungspanel Titel\n    ctx.fillStyle = 'rgba(255, 197, 0, 0.9)';\n    ctx.font = 'bold 12px sans-serif';\n    ctx.textAlign = 'center';\n    ctx.fillText('Regierung', govPanelX + govPanelW / 2, govPanelY + 16);\n\n    // Schlüsselwörter auflisten\n    ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\n    ctx.font = '11px sans-serif';\n    ctx.textAlign = 'left';\n    if (keywords.length > 0) {\n      keywords.forEach((keyword, idx) => {\n        ctx.fillText(`• ${keyword}`, govPanelX + 8, govPanelY + 36 + idx * 16);\n      });\n    } else {\n      ctx.fillStyle = 'rgba(255, 255, 255, 0.5)';\n      ctx.fillText('Keine aktiven', govPanelX + 8, govPanelY + 36);\n      ctx.fillText('Schlüsselwörter', govPanelX + 8, govPanelY + 52);\n    }\n\n    // Panel für Öffentlichkeits-Unterkategorien (rechts neben Öffentlichkeitsslots)\n    const pubPanelX = 1640 + 256 + 20;\n    const pubPanelY = 580; // Auf Höhe der Öffentlichkeitsslots\n    const pubPanelW = 120;\n    const pubPanelH = 256;\n\n    // Öffentlichkeitspanel Hintergrund\n    ctx.fillStyle = 'rgba(0, 255, 0, 0.15)';\n    ctx.fillRect(pubPanelX, pubPanelY, pubPanelW, pubPanelH);\n    ctx.strokeStyle = 'rgba(0, 255, 0, 0.3)';\n    ctx.strokeRect(pubPanelX + 0.5, pubPanelY + 0.5, pubPanelW - 1, pubPanelH - 1);\n\n    // Öffentlichkeitspanel Titel\n    ctx.fillStyle = 'rgba(0, 255, 0, 0.9)';\n    ctx.font = 'bold 12px sans-serif';\n    ctx.textAlign = 'center';\n    ctx.fillText('Öffentlichkeit', pubPanelX + pubPanelW / 2, pubPanelY + 16);\n\n    // Unterkategorien auflisten\n    ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\n    ctx.font = '11px sans-serif';\n    ctx.textAlign = 'left';\n    if (subcategories.length > 0) {\n      subcategories.forEach((subcategory, idx) => {\n        const displayName = subcategory.length > 12 ? subcategory.substring(0, 10) + '...' : subcategory;\n        ctx.fillText(`• ${displayName}`, pubPanelX + 8, pubPanelY + 36 + idx * 16);\n      });\n    } else {\n      ctx.fillStyle = 'rgba(255, 255, 255, 0.5)';\n      ctx.fillText('Keine aktiven', pubPanelX + 8, pubPanelY + 36);\n      ctx.fillText('Unterkategorien', pubPanelX + 8, pubPanelY + 52);\n    }\n  }, [getActiveKeywordsAndSubcategories]);\n\n  // Move diagnostics to draw callback to ensure they run after canvas is actually rendered\n  const runDiagnostics = useCallback(() => {\n    try {\n      const handZones = clickZonesRef.current.filter(z => z.data && z.data.type === 'hand_p1');\n      const uiUIDs = handZones.map(z => {\n        var _z$data$card$uid;\n        return z.data.card && ((_z$data$card$uid = z.data.card.uid) !== null && _z$data$card$uid !== void 0 ? _z$data$card$uid : z.data.card.id);\n      }).filter(Boolean);\n      const stateHand = gameState.hands && gameState.hands[1] ? gameState.hands[1] : [];\n      const stateUIDs = stateHand.map(c => {\n        var _c$uid;\n        return (_c$uid = c.uid) !== null && _c$uid !== void 0 ? _c$uid : c.id;\n      }).filter(Boolean);\n      const missingInState = uiUIDs.filter(u => !stateUIDs.includes(u));\n      const missingInUI = stateUIDs.filter(u => !uiUIDs.includes(u));\n\n      // Only warn if there are cards in UI that don't exist in state (real error)\n      // Don't warn about missing UI cards due to limited slot capacity\n      if (missingInState.length > 0) {\n        var _politicardDebug;\n        const mismatch = {\n          ts: Date.now(),\n          uiCount: uiUIDs.length,\n          stateCount: stateUIDs.length,\n          uiUIDs,\n          stateUIDs,\n          missingInState,\n          missingInUI,\n          stack: new Error('mismatch-stack').stack\n        };\n        window.__politicardDebug = {\n          ...window.__politicardDebug,\n          mismatch: [...(((_politicardDebug = window.__politicardDebug) === null || _politicardDebug === void 0 ? void 0 : _politicardDebug.mismatch) || [])].slice(-19).concat([mismatch])\n        };\n        // Clear, then log to console so user can copy/paste trace\n        console.warn('POLITICARD DIAGNOSTIC: hand mismatch detected', mismatch);\n      }\n    } catch (e) {\n      // swallow diagnostic errors to avoid breaking rendering\n      console.error('Diagnostic error', e);\n    }\n  }, [gameState.hands]);\n  const draw = useCallback(() => {\n    var _LAYOUT$background, _LAYOUT$background2;\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n\n    // Detect influence increases and start animations\n    try {\n      const currSnapshot = {};\n      const collect = c => {\n        var _c$uid2, _c$influence;\n        if (!c) return;\n        if (c.kind !== 'pol') return;\n        const uid = (_c$uid2 = c.uid) !== null && _c$uid2 !== void 0 ? _c$uid2 : c.id != null ? String(c.id) : null;\n        if (!uid) return;\n        currSnapshot[uid] = (_c$influence = c.influence) !== null && _c$influence !== void 0 ? _c$influence : 0;\n      };\n      // board rows\n      (gameState.board[1].aussen || []).forEach(collect);\n      (gameState.board[2].aussen || []).forEach(collect);\n      (gameState.board[1].innen || []).forEach(collect);\n      (gameState.board[2].innen || []).forEach(collect);\n      // permanent slots\n      collect(gameState.permanentSlots[1].government);\n      collect(gameState.permanentSlots[2].government);\n      collect(gameState.permanentSlots[1].public);\n      collect(gameState.permanentSlots[2].public);\n      const now = performance.now();\n      Object.keys(currSnapshot).forEach(uid => {\n        var _currSnapshot$uid, _prevInfluencesRef$cu;\n        const curr = (_currSnapshot$uid = currSnapshot[uid]) !== null && _currSnapshot$uid !== void 0 ? _currSnapshot$uid : 0;\n        const prev = (_prevInfluencesRef$cu = prevInfluencesRef.current[uid]) !== null && _prevInfluencesRef$cu !== void 0 ? _prevInfluencesRef$cu : curr;\n        if (curr > prev) {\n          const delta = curr - prev;\n          const list = influenceAnimRef.current.get(uid) || [];\n          list.push({\n            start: now,\n            duration: 900,\n            amount: delta\n          });\n          influenceAnimRef.current.set(uid, list);\n        }\n        prevInfluencesRef.current[uid] = curr;\n      });\n    } catch (e) {\n      // ignore\n    }\n\n    // Clear canvas\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    // Clear click zones\n    clickZonesRef.current = [];\n\n    // Background: prefer PNG if configured\n    if ((_LAYOUT$background = LAYOUT.background) !== null && _LAYOUT$background !== void 0 && _LAYOUT$background.enabled && (_LAYOUT$background2 = LAYOUT.background) !== null && _LAYOUT$background2 !== void 0 && _LAYOUT$background2.src) {\n      if (backgroundImageRef.current) {\n        ctx.drawImage(backgroundImageRef.current, 0, 0, canvas.width, canvas.height);\n      } else {\n        ctx.fillStyle = '#0c131b';\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\n      }\n    } else {\n      ctx.fillStyle = '#0c131b';\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n    }\n\n    // Apply UI transform (new signature)\n    const {\n      scale,\n      offsetX,\n      offsetY\n    } = getUiTransform(canvas.width, canvas.height);\n    ctx.save();\n    ctx.translate(offsetX, offsetY);\n    ctx.scale(scale, scale);\n\n    // Draw opponent board (top rows) - clickable im Dev Mode\n    // Draw opponent board using new layout system\n    const opponentPublicRects = getPublicRects('opponent');\n    const opponentGovRects = getGovernmentRects('opponent');\n\n    // Draw opponent public slots\n    opponentPublicRects.forEach((s, idx) => {\n      const card = gameState.board[2].innen[idx];\n      if (card) {\n        drawCardAt(ctx, card, s.x, s.y, s.w, false, false, 2);\n      }\n    });\n\n    // Draw opponent government slots\n    opponentGovRects.forEach((s, idx) => {\n      const card = gameState.board[2].aussen[idx];\n      if (card) {\n        drawCardAt(ctx, card, s.x, s.y, s.w, false, false, 2);\n      }\n    });\n\n    // Draw opponent permanent slots\n    drawPermanentSlotsP2(ctx);\n\n    // Draw player board (middle rows)\n    // Draw player board using new layout system\n    const playerPublicRects = getPublicRects('player');\n    const playerGovRects = getGovernmentRects('player');\n\n    // Draw player public slots\n    playerPublicRects.forEach((s, idx) => {\n      const card = gameState.board[1].innen[idx];\n      if (card) {\n        const clickZone = drawCardAt(ctx, card, s.x, s.y, s.w, false, false, 1);\n        clickZonesRef.current.push({\n          ...clickZone,\n          data: {\n            type: 'row_slot',\n            player: 1,\n            lane: 'innen',\n            index: idx\n          }\n        });\n      } else {\n        // Empty slot click zone\n        clickZonesRef.current.push({\n          x: s.x,\n          y: s.y,\n          w: s.w,\n          h: s.h,\n          data: {\n            type: 'row_slot',\n            player: 1,\n            lane: 'innen',\n            index: idx\n          }\n        });\n      }\n    });\n\n    // Draw player government slots\n    playerGovRects.forEach((s, idx) => {\n      const card = gameState.board[1].aussen[idx];\n      if (card) {\n        const clickZone = drawCardAt(ctx, card, s.x, s.y, s.w, false, false, 1);\n        clickZonesRef.current.push({\n          ...clickZone,\n          data: {\n            type: 'row_slot',\n            player: 1,\n            lane: 'aussen',\n            index: idx\n          }\n        });\n      } else {\n        // Empty slot click zone\n        clickZonesRef.current.push({\n          x: s.x,\n          y: s.y,\n          w: s.w,\n          h: s.h,\n          data: {\n            type: 'row_slot',\n            player: 1,\n            lane: 'aussen',\n            index: idx\n          }\n        });\n      }\n    });\n\n    // Draw player permanent slots\n    drawPermanentSlotsP1(ctx);\n\n    // Draw instant slots (both players)\n    drawInstantSlots(ctx);\n\n    // Draw interventions strip (player)\n    drawInterventionsP1(ctx);\n\n    // Draw interventions strip (opponent) - nur im Dev Mode\n    if (devMode) {\n      drawInterventionsP2(ctx);\n    }\n\n    // Draw hand (P1)\n    drawHandP1(ctx);\n\n    // 🔧 DEV MODE: Draw hand (P2) - nur im Dev Mode\n    if (devMode) {\n      drawHandP2(ctx);\n    }\n\n    // Draw info panels\n    drawInfoPanels(ctx);\n    ctx.restore();\n\n    // expose zones for debug snapshot\n    window.__politicardDebug = {\n      uiTransform: getUiTransform(canvas.width, canvas.height),\n      canvasSize: {\n        width: canvas.width,\n        height: canvas.height\n      },\n      zones: LAYOUT.zones,\n      clickZones: clickZonesRef.current.slice(0, 1000)\n    };\n\n    // Run diagnostics after canvas is fully rendered\n    runDiagnostics();\n  }, [drawLane, drawHandP1, drawHandP2, drawInterventionsP1, drawInterventionsP2, drawPermanentSlotsP1, drawPermanentSlotsP2, drawInstantSlots, drawInfoPanels, devMode, runDiagnostics]);\n  const DRAW_LAYOUT_OVERLAY = false; // force off per new layout system\n\n  // Load background image if configured\n  useEffect(() => {\n    var _LAYOUT$background3, _LAYOUT$background4;\n    if ((_LAYOUT$background3 = LAYOUT.background) !== null && _LAYOUT$background3 !== void 0 && _LAYOUT$background3.enabled && (_LAYOUT$background4 = LAYOUT.background) !== null && _LAYOUT$background4 !== void 0 && _LAYOUT$background4.src) {\n      const img = new Image();\n      img.onload = () => {\n        backgroundImageRef.current = img;\n        requestAnimationFrame(draw);\n      };\n      img.onerror = () => {\n        var _LAYOUT$background5;\n        console.warn('Failed to load background image', (_LAYOUT$background5 = LAYOUT.background) === null || _LAYOUT$background5 === void 0 ? void 0 : _LAYOUT$background5.src);\n      };\n      img.src = LAYOUT.background.src;\n    } else {\n      // Fallback: ensure first draw without background\n      requestAnimationFrame(draw);\n    }\n  }, [draw]);\n\n  // Redraw when game state or selection changes\n  useEffect(() => {\n    requestAnimationFrame(draw);\n  }, [gameState, selectedHandIndex, draw]);\n\n  // Continuous render loop to keep canvas updated without relying on external state refs\n  useEffect(() => {\n    let frame;\n    const loop = () => {\n      draw();\n      frame = requestAnimationFrame(loop);\n    };\n    frame = requestAnimationFrame(loop);\n    return () => cancelAnimationFrame(frame);\n  }, [draw]);\n  const handleCardClick = useCallback(data => {\n    // Hand-Klick\n    if (data.type === 'hand_p1') {\n      var _data$card$uid, _data$card, _data$card2, _gameState$hands;\n      const uid = (_data$card$uid = (_data$card = data.card) === null || _data$card === void 0 ? void 0 : _data$card.uid) !== null && _data$card$uid !== void 0 ? _data$card$uid : (_data$card2 = data.card) === null || _data$card2 === void 0 ? void 0 : _data$card2.id;\n      const stateHand = ((_gameState$hands = gameState.hands) === null || _gameState$hands === void 0 ? void 0 : _gameState$hands[1]) || [];\n      const idxInState = stateHand.findIndex(c => {\n        var _c$uid3;\n        return ((_c$uid3 = c.uid) !== null && _c$uid3 !== void 0 ? _c$uid3 : c.id) === uid;\n      });\n      onCardClick(data);\n      return;\n    }\n\n    // Slot-Klick\n    if (data.type === 'row_slot') {\n      var _gameState$board$1$in, _gameState$board, _gameState$board$, _gameState$board$1$au, _gameState$board2, _gameState$board2$;\n      const lane = data.lane;\n      const cap = getLaneCapacity(lane);\n\n      // Hole aktuelle Row-Länge aus gameState\n      const rowCards = lane === 'public' ? (_gameState$board$1$in = (_gameState$board = gameState.board) === null || _gameState$board === void 0 ? void 0 : (_gameState$board$ = _gameState$board[1]) === null || _gameState$board$ === void 0 ? void 0 : _gameState$board$.innen) !== null && _gameState$board$1$in !== void 0 ? _gameState$board$1$in : [] : (_gameState$board$1$au = (_gameState$board2 = gameState.board) === null || _gameState$board2 === void 0 ? void 0 : (_gameState$board2$ = _gameState$board2[1]) === null || _gameState$board2$ === void 0 ? void 0 : _gameState$board2$.aussen) !== null && _gameState$board$1$au !== void 0 ? _gameState$board$1$au : [];\n      if (rowCards.length >= cap) {\n        // Optional: UI Feedback\n        console.warn(`Row ${lane} is full (${rowCards.length}/${cap})`);\n        return;\n      }\n      onCardClick(data);\n      return;\n    }\n\n    // Andere Klicks (empty_slot, board_card, etc.)\n    onCardClick(data);\n  }, [gameState, onCardClick]);\n  const handleClick = useCallback(e => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const rect = canvas.getBoundingClientRect();\n    const {\n      scale,\n      offsetX,\n      offsetY\n    } = getUiTransform(canvas.width, canvas.height);\n    const mx = (e.clientX - rect.left - offsetX) / scale;\n    const my = (e.clientY - rect.top - offsetY) / scale;\n    const hit = clickZonesRef.current.find(z => mx >= z.x && mx <= z.x + z.w && my >= z.y && my <= z.y + z.h);\n    if (hit) handleCardClick(hit.data);\n  }, [handleCardClick]);\n  const handleMouseMove = useCallback(e => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const rect = canvas.getBoundingClientRect();\n    const {\n      scale,\n      offsetX,\n      offsetY\n    } = getUiTransform(canvas.width, canvas.height);\n    const mx = (e.clientX - rect.left - offsetX) / scale;\n    const my = (e.clientY - rect.top - offsetY) / scale;\n    const hit = clickZonesRef.current.find(z => mx >= z.x && mx <= z.x + z.w && my >= z.y && my <= z.y + z.h);\n    if (hit) {\n      var _hit$data$card;\n      console.log('[hover]', hit.data.type, (_hit$data$card = hit.data.card) === null || _hit$data$card === void 0 ? void 0 : _hit$data$card.name);\n      onCardHover({\n        ...hit.data,\n        x: e.clientX,\n        y: e.clientY\n      });\n    } else {\n      onCardHover(null);\n    }\n  }, [onCardHover]);\n  const handleWheel = useCallback(e => {\n    // only enable when player1 has more slots than visible\n    const handLen = gameState.hands && gameState.hands[1] ? gameState.hands[1].length : 0;\n    const zone = getZone('hand.player');\n    if (!zone) return;\n    if (handLen <= 5) return; // nothing to scroll\n\n    // Prevent page scrolling when over canvas\n    e.preventDefault();\n\n    // accumulate target offset (invert so wheel down moves cards up)\n    // Each wheel step moves by 48px per delta unit\n    const delta = Math.sign(e.deltaY) * 48;\n    // compute slot height more robustly\n    const slots = computeSlotRects(zone);\n    const slotH = slots && slots.length > 0 ? slots[0].h : zone.rectPx[3] / 5;\n    const visible = 5;\n    const maxOffset = -(Math.max(0, handLen - visible) * slotH);\n    handScrollTargetRef.current = Math.max(Math.min(handScrollTargetRef.current - delta, 0), maxOffset);\n  }, [gameState.hands]);\n  const handleTouchStart = useCallback(e => {\n    if (!e.touches || e.touches.length === 0) return;\n    const handLen = gameState.hands && gameState.hands[1] ? gameState.hands[1].length : 0;\n    if (handLen <= 5) return;\n    isTouchingRef.current = true;\n    const y = e.touches[0].clientY;\n    touchStartYRef.current = y;\n    lastTouchYRef.current = y;\n    e.preventDefault();\n  }, [gameState.hands]);\n  const handleTouchMove = useCallback(e => {\n    var _lastTouchYRef$curren;\n    if (!isTouchingRef.current) return;\n    if (!e.touches || e.touches.length === 0) return;\n    const y = e.touches[0].clientY;\n    const last = (_lastTouchYRef$curren = lastTouchYRef.current) !== null && _lastTouchYRef$curren !== void 0 ? _lastTouchYRef$curren : y;\n    const dy = y - last; // positive when moving down\n    lastTouchYRef.current = y;\n\n    // invert so dragging up moves cards up\n    const delta = -dy;\n    const handLen = gameState.hands && gameState.hands[1] ? gameState.hands[1].length : 0;\n    const zone = getZone('hand.player');\n    if (!zone) return;\n    const slots = computeSlotRects(zone);\n    const slotH = slots && slots.length > 0 ? slots[0].h : zone.rectPx[3] / 5;\n    const visible = 5;\n    const maxOffset = -(Math.max(0, handLen - visible) * slotH);\n    handScrollTargetRef.current = Math.max(Math.min(handScrollTargetRef.current + delta, 0), maxOffset);\n    e.preventDefault();\n  }, [gameState.hands]);\n  const handleTouchEnd = useCallback(e => {\n    isTouchingRef.current = false;\n    touchStartYRef.current = null;\n    lastTouchYRef.current = null;\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    width: 1920,\n    height: 1080,\n    style: {\n      display: 'block',\n      width: '100%',\n      height: '100%',\n      imageRendering: 'auto'\n    },\n    onClick: handleClick,\n    onMouseMove: handleMouseMove,\n    onWheel: handleWheel,\n    onTouchStart: handleTouchStart,\n    onTouchMove: handleTouchMove,\n    onTouchEnd: handleTouchEnd\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 1012,\n    columnNumber: 5\n  }, this);\n};\n_s(GameCanvas, \"9MmxW5VCdvORqMPaAqvMIhmiqac=\");\n_c = GameCanvas;\nvar _c;\n$RefreshReg$(_c, \"GameCanvas\");","map":{"version":3,"names":["React","useRef","useEffect","useCallback","LAYOUT","getZone","computeSlotRects","getUiTransform","getLaneCapacity","getPublicRects","getGovernmentRects","sortHandCards","getCardImagePath","influenceIconUrl","jsxDEV","_jsxDEV","GameCanvas","gameState","selectedHandIndex","onCardClick","onCardHover","devMode","_s","canvasRef","clickZonesRef","handScrollTargetRef","handScrollCurrentRef","handScrollEnabledRef","touchStartYRef","lastTouchYRef","isTouchingRef","backgroundImageRef","imageCacheRef","Map","influenceImgRef","influenceAnimRef","prevInfluencesRef","img","Image","src","current","drawCardAt","ctx","card","x","y","size","selected","showAPCost","player","_shield","dx","dy","s","Math","floor","cached","get","complete","drawImage","onload","set","kind","_influence","barH","max","fillStyle","fillRect","fontSize","font","textAlign","textBaseline","fillText","influence","protected","shield","deactivated","_influence2","badgeHeight","badgeWidth","badgeX","badgeY","beginPath","roundRect","fill","globalAlpha","_uid","_id","uid","id","toString","now","performance","anims","remaining","forEach","a","t","start","duration","labelX","labelY","alpha","save","amount","restore","push","length","delete","e","strokeStyle","lineWidth","strokeRect","w","h","getSlotDisplayName","zoneId","index","slotNumber","includes","drawLane","lane","clickable","zone","slots","arr","board","idx","bgColor","isSelected","hands","clickZone","textY","name","data","type","slotName","drawHandP1","hand","target","offsetY","round","i","originalIndex","findIndex","c","isSel","sx","sy","drawHandP2","rectPx","drawInterventionsP1","traps","zx","zy","zw","zh","drawInterventionsP2","drawSingleSlot","clickType","slot","drawPermanentSlotsP1","permanentSlots","government","public","drawPermanentSlotsP2","drawInstantSlots","sofortPlayerCard","sofort","sofortOppCard","getActiveKeywordsAndSubcategories","allCards","innen","aussen","filter","keywords","Set","subcategories","tag","add","publicCard","oligarchNames","platformNames","movementNames","ngoNames","intelligenceNames","mediaNames","Array","from","drawInfoPanels","govPanelX","govPanelY","govPanelW","govPanelH","keyword","pubPanelX","pubPanelY","pubPanelW","pubPanelH","subcategory","displayName","substring","runDiagnostics","handZones","z","uiUIDs","map","_z$data$card$uid","Boolean","stateHand","stateUIDs","_c$uid","missingInState","u","missingInUI","_politicardDebug","mismatch","ts","Date","uiCount","stateCount","stack","Error","window","__politicardDebug","slice","concat","console","warn","error","draw","_LAYOUT$background","_LAYOUT$background2","canvas","getContext","currSnapshot","collect","_c$uid2","_c$influence","String","Object","keys","_currSnapshot$uid","_prevInfluencesRef$cu","curr","prev","delta","list","clearRect","width","height","background","enabled","scale","offsetX","translate","opponentPublicRects","opponentGovRects","playerPublicRects","playerGovRects","uiTransform","canvasSize","zones","clickZones","DRAW_LAYOUT_OVERLAY","_LAYOUT$background3","_LAYOUT$background4","requestAnimationFrame","onerror","_LAYOUT$background5","frame","loop","cancelAnimationFrame","handleCardClick","_data$card$uid","_data$card","_data$card2","_gameState$hands","idxInState","_c$uid3","_gameState$board$1$in","_gameState$board","_gameState$board$","_gameState$board$1$au","_gameState$board2","_gameState$board2$","cap","rowCards","handleClick","rect","getBoundingClientRect","mx","clientX","left","my","clientY","top","hit","find","handleMouseMove","_hit$data$card","log","handleWheel","handLen","preventDefault","sign","deltaY","slotH","visible","maxOffset","min","handleTouchStart","touches","handleTouchMove","_lastTouchYRef$curren","last","handleTouchEnd","ref","style","display","imageRendering","onClick","onMouseMove","onWheel","onTouchStart","onTouchMove","onTouchEnd","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/skank/Videos/Cards/Milchcards/src/components/GameCanvas.tsx"],"sourcesContent":["import React, { useRef, useEffect, useCallback } from 'react';\nimport { GameState, Card, PoliticianCard, Player, Lane } from '../types/game';\nimport { LAYOUT, getZone, computeSlotRects, getUiTransform, getLaneCapacity, getPublicRects, getGovernmentRects, getSofortRect } from '../ui/layout';\nimport { drawCardImage, sortHandCards } from '../utils/gameUtils';\nimport { getNetApCost } from '../utils/ap';\nimport { getCardImagePath } from '../data/gameData';\nimport influenceIconUrl from '../assets/icons/influence.svg';\n\ninterface GameCanvasProps {\n  gameState: GameState;\n  selectedHandIndex: number | null;\n  onCardClick: (data: any) => void;\n  onCardHover: (data: any) => void;\n  devMode?: boolean; // 🔧 DEV MODE: Show P2 hand when true\n}\n\n\n\nexport const GameCanvas: React.FC<GameCanvasProps> = ({\n  gameState,\n  selectedHandIndex,\n  onCardClick,\n  onCardHover,\n  devMode = false,\n}) => {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const clickZonesRef = useRef<Array<{ x: number; y: number; w: number; h: number; data: any }>>([]);\n  // Smooth vertical scroll for P1 hand when it has more than visible slots\n  const handScrollTargetRef = useRef<number>(0);\n  const handScrollCurrentRef = useRef<number>(0);\n  const handScrollEnabledRef = useRef<boolean>(true);\n  // Touch handling refs\n  const touchStartYRef = useRef<number | null>(null);\n  const lastTouchYRef = useRef<number | null>(null);\n  const isTouchingRef = useRef<boolean>(false);\n  const backgroundImageRef = useRef<HTMLImageElement | null>(null);\n  const imageCacheRef = useRef<Map<string, HTMLImageElement>>(new Map());\n  const influenceImgRef = useRef<HTMLImageElement | null>(null);\n  // Animation state for visual influence changes: Map<uid, Array<Anim>>\n  const influenceAnimRef = useRef<Map<string, Array<{ start: number; duration: number; amount: number }>>>(new Map());\n  // Previous per-card influence snapshot to detect increases\n  const prevInfluencesRef = useRef<Record<string, number>>({});\n\n  // Load influence icon once\n  useEffect(() => {\n    const img = new Image();\n    img.src = influenceIconUrl;\n    influenceImgRef.current = img;\n  }, []);\n\n\n  const drawCardAt = useCallback((\n    ctx: CanvasRenderingContext2D,\n    card: Card,\n    x: number,\n    y: number,\n    size: number,\n    selected: boolean = false,\n    showAPCost: boolean = false,\n    player?: Player\n  ) => {\n    let dx = x, dy = y, s = size;\n    if (selected) {\n      s = Math.floor(size * 1.05);\n      dx = x - Math.floor((s - size) / 2);\n      dy = y - Math.floor((s - size) / 2);\n    }\n\n    // Note: pulse overlay is drawn at top layer after all cards are rendered\n\n    // Draw card image with caching to prevent flicker in continuous loop\n    const src = getCardImagePath(card, 'ui');\n    const cached = imageCacheRef.current.get(src);\n    if (cached && cached.complete) {\n      ctx.drawImage(cached, dx, dy, s, s);\n    } else {\n      const img = new Image();\n      img.onload = () => {\n        imageCacheRef.current.set(src, img);\n        ctx.drawImage(img, dx, dy, s, s);\n      };\n      img.src = src;\n      imageCacheRef.current.set(src, img);\n    }\n\n    // Status-Indikatoren (für alle Board-Karten)\n    // Einfluss-Wert dauerhaft anzeigen (oben links) – nur für Regierungskarten\n    if ((card as any).kind === 'pol') {\n      const barH = Math.max(20, Math.floor(s * 0.12) + 6);\n      ctx.fillStyle = 'rgba(0,0,0,0.6)';\n      ctx.fillRect(dx, dy + s - barH, s, barH);\n\n      ctx.fillStyle = '#ffffff';\n      const fontSize = Math.floor(s * 0.12);\n      ctx.font = `bold ${fontSize}px sans-serif`;\n      ctx.textAlign = 'left';\n      ctx.textBaseline = 'middle';\n      ctx.fillText(`${(card as any).influence ?? 0}`, dx + 8, dy + s - barH / 2);\n    }\n    // Schutz-Status (blauer Punkt)\n    if ((card as any).protected || ((card as any).shield ?? 0) > 0) {\n      ctx.fillStyle = '#1da1f2';\n      ctx.fillRect(dx + s - 22, dy + 6, 16, 16);\n    }\n    // Deaktiviert-Status (roter Punkt)\n    if ((card as any).deactivated) {\n      ctx.fillStyle = '#b63838';\n      ctx.fillRect(dx + s - 22, dy + 26, 16, 16);\n    }\n\n    // Einfluss-Badge für Handkarten oben rechts (nur Regierungskarten)\n    if (showAPCost && player && (card as any).kind === 'pol') {\n      const badgeHeight = Math.max(16, Math.floor(s * 0.12));\n      const badgeWidth = badgeHeight * 2;\n      const badgeX = dx + s - badgeWidth - 6;\n      const badgeY = dy + 6;\n\n      // Semi-transparent dunkler Hintergrund\n      ctx.fillStyle = 'rgba(0,0,0,0.6)';\n      ctx.beginPath();\n      ctx.roundRect(badgeX, badgeY, badgeWidth, badgeHeight, badgeHeight / 2);\n      ctx.fill();\n\n      // Influence icon (90% opacity) links im Badge\n      if (influenceImgRef.current && influenceImgRef.current.complete) {\n        ctx.globalAlpha = 0.9;\n        ctx.drawImage(influenceImgRef.current, badgeX + 2, badgeY + 2, badgeHeight - 4, badgeHeight - 4);\n        ctx.globalAlpha = 1;\n      }\n\n      // Influence number rechts im Badge\n      ctx.fillStyle = '#ffffff';\n      ctx.font = `bold ${Math.floor(badgeHeight * 0.5)}px sans-serif`;\n      ctx.textAlign = 'right';\n      ctx.textBaseline = 'middle';\n      ctx.fillText(`${(card as any).influence ?? 0}`, badgeX + badgeWidth - 4, badgeY + badgeHeight / 2);\n\n      // Reset align\n      ctx.textAlign = 'start';\n      ctx.textBaseline = 'alphabetic';\n    }\n\n    // Draw floating +N green labels for recent influence increases\n    try {\n      const uid = (card as any).uid ?? (card as any).id?.toString();\n      if (uid) {\n        const now = performance.now();\n        const anims = influenceAnimRef.current.get(uid) || [];\n        const remaining = [] as Array<{ start: number; duration: number; amount: number }>;\n        anims.forEach(a => {\n          const t = (now - a.start) / a.duration;\n          if (t < 1) {\n            // position label top-center of card\n            const labelX = dx + s / 2;\n            const labelY = dy - 8 - (t * 18); // float up over time\n            const alpha = Math.max(0, 1 - t);\n            ctx.save();\n            ctx.globalAlpha = alpha;\n            ctx.fillStyle = '#2ecc71'; // green\n            ctx.font = `bold ${Math.max(12, Math.floor(s * 0.14))}px sans-serif`;\n            ctx.textAlign = 'center';\n            ctx.textBaseline = 'middle';\n            ctx.fillText(`+${a.amount}`, labelX, labelY);\n            ctx.restore();\n            remaining.push(a);\n          }\n        });\n        if (remaining.length > 0) influenceAnimRef.current.set(uid, remaining);\n        else influenceAnimRef.current.delete(uid);\n      }\n    } catch (e) {\n      // ignore animation errors\n    }\n\n    // Auswahl-Rahmen\n    if (selected) {\n      ctx.strokeStyle = '#61dafb';\n      ctx.lineWidth = 3;\n      ctx.strokeRect(dx + 1, dy + 1, s - 2, s - 2);\n      ctx.lineWidth = 1;\n    }\n\n    // Return exact 256x256 click zone over the card\n    // Since all cards are 256x256, the click zone should match exactly\n    return { x: dx, y: dy, w: 256, h: 256 };\n  }, [gameState]);\n\n\n\n\n\n\n\n  // Slot-Benennungs-Funktion basierend auf Glossar\n  const getSlotDisplayName = useCallback((zoneId: string, index: number, player: Player): string => {\n    const slotNumber = index + 1;\n\n    if (zoneId.includes('government')) {\n      if (zoneId.includes('player')) {\n        return `Regierungsreihe Slot ${slotNumber}`;\n      } else {\n        return `Gegner Regierung Slot ${slotNumber}`;\n      }\n    } else if (zoneId.includes('public')) {\n      if (zoneId.includes('player')) {\n        return `Öffentlichkeitsreihe Slot ${slotNumber}`;\n      } else {\n        return `Gegner Öffentlichkeit Slot ${slotNumber}`;\n      }\n    } else if (zoneId.includes('permanent.government')) {\n      if (zoneId.includes('player')) {\n        return 'Regierung Spezial-Slot';\n      } else {\n        return 'Gegner Regierung Spezial-Slot';\n      }\n    } else if (zoneId.includes('permanent.public')) {\n      if (zoneId.includes('player')) {\n        return 'Öffentlichkeit Spezial-Slot';\n      } else {\n        return 'Gegner Öffentlichkeit Spezial-Slot';\n      }\n    } else if (zoneId.includes('instant')) {\n      if (zoneId.includes('player')) {\n        return 'Sofort-Slot';\n      } else {\n        return 'Gegner Sofort-Slot';\n      }\n    } else if (zoneId.includes('hand')) {\n      return 'Hand';\n    } else if (zoneId.includes('interventions')) {\n      return 'Interventionen';\n    }\n\n    return `Slot ${slotNumber}`;\n  }, []);\n\n  const drawLane = useCallback((\n    ctx: CanvasRenderingContext2D,\n    zoneId: string,\n    player: Player,\n    lane: Lane,\n    clickable: boolean\n  ) => {\n    const zone = getZone(zoneId);\n    if (!zone) return;\n\n    const slots = computeSlotRects(zone);\n    const arr = gameState.board[player][lane];\n\n    slots.forEach((s, idx) => {\n      const card = arr[idx];\n\n      // Hintergrundfarbe nach Kategorie\n      let bgColor = 'rgba(0,0,0,0.1)'; // Standard\n      if (zoneId.includes('government')) {\n        bgColor = 'rgba(255, 197, 0, 0.15)'; // Hellgelb für Regierung\n      } else if (zoneId.includes('public')) {\n        bgColor = 'rgba(0, 255, 0, 0.15)'; // Hellgrün für Öffentlichkeit\n      }\n\n      ctx.fillStyle = bgColor;\n      ctx.fillRect(s.x, s.y, s.w, s.h);\n\n      // Slot-Rahmen\n      ctx.strokeStyle = 'rgba(255,255,255,0.06)';\n      ctx.strokeRect(s.x + 0.5, s.y + 0.5, s.w - 1, s.h - 1);\n\n      if (card) {\n        const isSelected = player === 1 && selectedHandIndex !== null && gameState.hands[1][selectedHandIndex] === card;\n        const clickZone = drawCardAt(ctx, card, s.x, s.y, s.w, isSelected, false);\n\n        // Kartenname unter dem Slot anzeigen\n        ctx.fillStyle = 'rgba(255,255,255,0.9)';\n        ctx.font = 'bold 12px sans-serif';\n        ctx.textAlign = 'center';\n        const textY = s.y + s.h + 16;\n        ctx.fillText(card.name, s.x + s.w/2, textY);\n\n        clickZonesRef.current.push({\n          ...clickZone,\n          data: { type: 'board_card', player, lane, index: idx, card }\n        });\n      } else if (clickable && gameState.current === player) {\n        // Slot-Benennung anzeigen (für den aktuellen Spieler)\n        const slotName = getSlotDisplayName(zoneId, idx, player);\n        ctx.fillStyle = 'rgba(255,255,255,0.6)';\n        ctx.font = '11px sans-serif';\n        ctx.textAlign = 'center';\n        const textY = s.y + s.h/2;\n        ctx.fillText(slotName, s.x + s.w/2, textY);\n\n        clickZonesRef.current.push({\n          x: s.x, y: s.y, w: s.w, h: s.h,\n          data: { type: 'row_slot', lane, index: idx }\n        });\n      }\n    });\n  }, [gameState, selectedHandIndex, drawCardAt, getSlotDisplayName]);\n\n  const drawHandP1 = useCallback((ctx: CanvasRenderingContext2D) => {\n    const hand = sortHandCards(gameState.hands[1]);\n    const zone = getZone('hand.player');\n    if (!zone) return;\n\n    const slots = computeSlotRects(zone);\n    // Apply smooth offset (lerp towards target)\n    const target = handScrollTargetRef.current;\n    handScrollCurrentRef.current += (target - handScrollCurrentRef.current) * 0.15; // easing\n    const offsetY = Math.round(handScrollCurrentRef.current);\n    slots.forEach((s: { x: number; y: number; w: number; h: number }, i: number) => {\n      const card = hand[i];\n      if (!card) return;\n      // Find original index in unsorted hand for click handling\n      const originalIndex = gameState.hands[1].findIndex(c => c.uid === card.uid);\n      const isSel = selectedHandIndex === originalIndex;\n      // apply vertical offset\n      const sx = s.x;\n      const sy = s.y + offsetY;\n      const clickZone = drawCardAt(ctx, card, sx, sy, s.w, isSel, true, 1); // Show AP cost for player 1 hand\n      clickZonesRef.current.push({ ...clickZone, data: { type: 'hand_p1', index: originalIndex, card } });\n    });\n  }, [gameState.hands, selectedHandIndex, drawCardAt]);\n\n      // 🔧 DEV MODE: Player 2 Hand (rechts unten, kompakter)\n  const drawHandP2 = useCallback((ctx: CanvasRenderingContext2D) => {\n    const hand = sortHandCards(gameState.hands[2]);\n    const zone = getZone('hand.opponent');\n    if (!zone) return;\n\n    const slots = computeSlotRects(zone);\n\n    // Hintergrund für P2 Hand\n    const [x, y, w, h] = zone.rectPx;\n    ctx.fillStyle = 'rgba(255, 100, 100, 0.15)'; // Rötlicher Hintergrund für P2\n    ctx.fillRect(x, y, w, h);\n    ctx.strokeStyle = 'rgba(255, 100, 100, 0.3)';\n    ctx.strokeRect(x + 0.5, y + 0.5, w - 1, h - 1);\n\n    // Label für P2 Hand\n    ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\n    ctx.font = 'bold 14px sans-serif';\n    ctx.textAlign = 'center';\n    ctx.fillText('Player 2 Hand', x + w/2, y - 8);\n\n    slots.forEach((s: { x: number; y: number; w: number; h: number }, i: number) => {\n      const card = hand[i];\n      if (!card) return;\n      // Find original index in unsorted hand for click handling\n      const originalIndex = gameState.hands[2].findIndex(c => c.uid === card.uid);\n      const isSel = gameState.current === 2 && selectedHandIndex === originalIndex;\n      const clickZone = drawCardAt(ctx, card, s.x, s.y, s.w, isSel, true, 2); // Show AP cost for player 2 hand\n      clickZonesRef.current.push({ ...clickZone, data: { type: 'hand_p2', index: originalIndex, card } });\n    });\n  }, [gameState, selectedHandIndex, drawCardAt]);\n  // Interventions strip (player traps)\n  const drawInterventionsP1 = useCallback((ctx: CanvasRenderingContext2D) => {\n    const traps = gameState.traps[1] || [];\n    const zone = getZone('interventions.player');\n    if (!zone) return;\n\n    // Single intervention slot\n    const [zx, zy, zw, zh] = zone.rectPx;\n    const card = traps[0]; // Only first trap\n\n    // Hintergrund für Interventions-Slot\n    ctx.fillStyle = 'rgba(200, 160, 255, 0.15)'; // Lavendelfarben für Interventionen\n    ctx.fillRect(zx, zy, zw, zh);\n    ctx.strokeStyle = 'rgba(200, 160, 255, 0.3)';\n    ctx.strokeRect(zx + 0.5, zy + 0.5, zw - 1, zh - 1);\n\n    // Slot-Benennung für Interventions-Slot\n    ctx.fillStyle = 'rgba(200, 160, 255, 0.8)';\n    ctx.font = '11px sans-serif';\n    ctx.textAlign = 'left';\n    ctx.fillText('Intervention', zx + 8, zy + zh - 6);\n\n    if (card) {\n      const clickZone = drawCardAt(ctx, card, zx, zy, zw, false, false);\n      clickZonesRef.current.push({ ...clickZone, data: { type: 'trap_p1', index: 0, card } });\n    }\n  }, [gameState.traps, drawCardAt]);\n\n  // Interventions strip (opponent traps)\n  const drawInterventionsP2 = useCallback((ctx: CanvasRenderingContext2D) => {\n    const traps = gameState.traps[2] || [];\n    const zone = getZone('interventions.opponent');\n    if (!zone) return;\n\n    // Single intervention slot\n    const [zx, zy, zw, zh] = zone.rectPx;\n    const card = traps[0]; // Only first trap\n\n    // Hintergrund für Interventions-Slot\n    ctx.fillStyle = 'rgba(200, 160, 255, 0.15)'; // Lavendelfarben für Interventionen\n    ctx.fillRect(zx, zy, zw, zh);\n    ctx.strokeStyle = 'rgba(200, 160, 255, 0.3)';\n    ctx.strokeRect(zx + 0.5, zy + 0.5, zw - 1, zh - 1);\n\n    // Slot-Benennung für Interventions-Slot\n    ctx.fillStyle = 'rgba(200, 160, 255, 0.8)';\n    ctx.font = '11px sans-serif';\n    ctx.textAlign = 'left';\n    ctx.fillText('Intervention', zx + 8, zy + zh - 6);\n\n    if (card) {\n      const clickZone = drawCardAt(ctx, card, zx, zy, zw, false, false);\n      clickZonesRef.current.push({ ...clickZone, data: { type: 'trap_p2', index: 0, card } });\n    }\n  }, [gameState.traps, drawCardAt]);\n\n  // Single slot drawing function\n  const drawSingleSlot = useCallback((\n    ctx: CanvasRenderingContext2D,\n    zoneId: string,\n    card: Card | null,\n    clickType: string,\n    player: Player\n  ) => {\n    const zone = getZone(zoneId);\n    if (!zone) return;\n    const [x, y, w, h] = zone.rectPx;\n\n    // Hintergrundfarbe nach Kategorie\n    let bgColor = 'rgba(0,0,0,0.1)'; // Standard\n    if (zoneId.includes('government')) {\n      bgColor = 'rgba(255, 197, 0, 0.15)'; // Hellgelb für Regierung\n    } else if (zoneId.includes('public')) {\n      bgColor = 'rgba(0, 255, 0, 0.15)'; // Hellgrün für Öffentlichkeit\n    } else if (zoneId.includes('instant')) {\n      bgColor = 'rgba(127, 116, 91, 0.15)'; // Neutral für Sofort-Slots\n    } else if (zoneId.includes('permanent')) {\n      // Unterscheide zwischen government und public permanent slots\n      if (zoneId.includes('government')) {\n        bgColor = 'rgba(255, 197, 0, 0.15)';\n      } else if (zoneId.includes('public')) {\n        bgColor = 'rgba(0, 255, 0, 0.15)';\n      }\n    }\n\n    ctx.fillStyle = bgColor;\n    ctx.fillRect(x, y, w, h);\n\n    // Draw slot border\n    ctx.strokeStyle = 'rgba(255,255,255,0.06)';\n    ctx.strokeRect(x + 0.5, y + 0.5, w - 1, h - 1);\n\n    if (card) {\n      const isSelected = player === 1 && selectedHandIndex !== null && gameState.hands[1][selectedHandIndex] === card;\n      const clickZone = drawCardAt(ctx, card, x, y, w, isSelected, false);\n\n      // Kartenname unter dem Slot anzeigen\n      ctx.fillStyle = 'rgba(255,255,255,0.9)';\n      ctx.font = 'bold 12px sans-serif';\n      ctx.textAlign = 'center';\n      const textY = y + h + 16;\n      ctx.fillText(card.name, x + w/2, textY);\n\n      clickZonesRef.current.push({ ...clickZone, data: { type: 'slot_card', slot: clickType, card } });\n\n      // 🔧 NEU: Sofort-Initiative-Slots sind klickbar für Aktivierung\n      if (clickType === 'instant' && gameState.current === player) {\n        clickZonesRef.current.push({\n          x, y, w, h,\n          data: { type: 'activate_instant', player, card }\n        });\n      }\n    } else if (gameState.current === player) {\n      // Slot-Benennung für leere Slots anzeigen (für den aktuellen Spieler)\n      const slotName = getSlotDisplayName(zoneId, 0, player);\n      ctx.fillStyle = 'rgba(255,255,255,0.6)';\n      ctx.font = '11px sans-serif';\n      ctx.textAlign = 'center';\n      const textY = y + h/2;\n      ctx.fillText(slotName, x + w/2, textY);\n\n      clickZonesRef.current.push({ x, y, w, h, data: { type: 'empty_slot', slot: clickType } });\n    }\n  }, [selectedHandIndex, gameState, drawCardAt, getSlotDisplayName]);\n\n  // Draw permanent slots for player\n  const drawPermanentSlotsP1 = useCallback((ctx: CanvasRenderingContext2D) => {\n    drawSingleSlot(ctx, 'slot.permanent.government.player', gameState.permanentSlots[1].government, 'permanent_government', 1);\n    drawSingleSlot(ctx, 'slot.permanent.public.player', gameState.permanentSlots[1].public, 'permanent_public', 1);\n  }, [gameState.permanentSlots, drawSingleSlot]);\n\n  // Draw permanent slots for opponent\n  const drawPermanentSlotsP2 = useCallback((ctx: CanvasRenderingContext2D) => {\n    drawSingleSlot(ctx, 'slot.permanent.government.opponent', gameState.permanentSlots[2].government, 'permanent_government', 2);\n    drawSingleSlot(ctx, 'slot.permanent.public.opponent', gameState.permanentSlots[2].public, 'permanent_public', 2);\n  }, [gameState.permanentSlots, drawSingleSlot]);\n\n  // Draw instant slots\n  const drawInstantSlots = useCallback((ctx: CanvasRenderingContext2D) => {\n    // Sofort-Initiative-Slots aus dem Board zeichnen\n    const sofortPlayerCard = gameState.board[1].sofort[0];\n    const sofortOppCard = gameState.board[2].sofort[0];\n\n    drawSingleSlot(ctx, 'slot.instant.player', sofortPlayerCard, 'instant', 1);\n    drawSingleSlot(ctx, 'slot.instant.opponent', sofortOppCard, 'instant', 2);\n  }, [gameState.board, drawSingleSlot]);\n\n  // Aktive Schlüsselwörter und Unterkategorien ermitteln\n  const getActiveKeywordsAndSubcategories = useCallback((player: Player) => {\n    const board = gameState.board[player];\n    const permanentSlots = gameState.permanentSlots[player];\n    const allCards = [\n      ...board.innen,\n      ...board.aussen,\n      permanentSlots.government,\n      permanentSlots.public\n    ].filter(c => c && c.kind === 'pol') as PoliticianCard[];\n\n    const keywords = new Set<string>();\n    const subcategories = new Set<string>();\n\n    allCards.forEach(card => {\n      if (!card.deactivated) {\n        // Regierungskarten-Schlüsselwörter\n        if (card.tag === 'Leadership') {\n          keywords.add('Leadership');\n        }\n        if (card.tag === 'Diplomat') {\n          keywords.add('Diplomat');\n        }\n\n        // Öffentlichkeits-Unterkategorien (für Karten in Öffentlichkeitsreihe)\n        if (board.innen.includes(card)) {\n          const publicCard = card as any;\n          if (publicCard.tag) {\n            // Oligarch\n            const oligarchNames = ['Elon Musk', 'Bill Gates', 'George Soros', 'Warren Buffett', 'Mukesh Ambani', 'Jeff Bezos', 'Alisher Usmanov', 'Gautam Adani', 'Jack Ma', 'Zhang Yiming', 'Roman Abramovich'];\n            if (oligarchNames.includes(publicCard.name)) {\n              subcategories.add('Oligarch');\n            }\n\n            // Plattform\n            const platformNames = ['Mark Zuckerberg', 'Tim Cook', 'Sam Altman', 'Jack Ma'];\n            if (platformNames.includes(publicCard.name)) {\n              subcategories.add('Plattform');\n            }\n\n            // Bewegung\n            const movementNames = ['Greta Thunberg', 'Malala Yousafzai', 'Ai Weiwei', 'Alexei Navalny'];\n            if (movementNames.includes(publicCard.name)) {\n              subcategories.add('Bewegung');\n            }\n\n            // NGO/Think-Tank\n            const ngoNames = ['Bill Gates', 'George Soros', 'Jennifer Doudna', 'Noam Chomsky', 'Anthony Fauci'];\n            if (ngoNames.includes(publicCard.name)) {\n              subcategories.add('NGO/Think-Tank');\n            }\n\n            // Intelligenz\n            const intelligenceNames = ['Jennifer Doudna', 'Noam Chomsky', 'Edward Snowden', 'Julian Assange', 'Yuval Noah Harari', 'Ai Weiwei', 'Alexei Navalny', 'Anthony Fauci'];\n            if (intelligenceNames.includes(publicCard.name)) {\n              subcategories.add('Intelligenz');\n            }\n\n            // Medien\n            const mediaNames = ['Oprah Winfrey'];\n            if (mediaNames.includes(publicCard.name)) {\n              subcategories.add('Medien');\n            }\n          }\n        }\n      }\n    });\n\n    return {\n      keywords: Array.from(keywords),\n      subcategories: Array.from(subcategories)\n    };\n  }, [gameState]);\n\n  // Info-Panels zeichnen\n  const drawInfoPanels = useCallback((ctx: CanvasRenderingContext2D) => {\n    const { keywords, subcategories } = getActiveKeywordsAndSubcategories(1);\n\n    // Panel für Regierungsschlüsselwörter (rechts neben Regierungsslots)\n    const govPanelX = 1640 + 256 + 20; // Nach dem letzten permanenten Slot\n    const govPanelY = 300; // Auf Höhe der Regierungsslots\n    const govPanelW = 120;\n    const govPanelH = 256;\n\n    // Regierungspanel Hintergrund\n    ctx.fillStyle = 'rgba(255, 197, 0, 0.15)';\n    ctx.fillRect(govPanelX, govPanelY, govPanelW, govPanelH);\n    ctx.strokeStyle = 'rgba(255, 197, 0, 0.3)';\n    ctx.strokeRect(govPanelX + 0.5, govPanelY + 0.5, govPanelW - 1, govPanelH - 1);\n\n    // Regierungspanel Titel\n    ctx.fillStyle = 'rgba(255, 197, 0, 0.9)';\n    ctx.font = 'bold 12px sans-serif';\n    ctx.textAlign = 'center';\n    ctx.fillText('Regierung', govPanelX + govPanelW/2, govPanelY + 16);\n\n    // Schlüsselwörter auflisten\n    ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\n    ctx.font = '11px sans-serif';\n    ctx.textAlign = 'left';\n    if (keywords.length > 0) {\n      keywords.forEach((keyword, idx) => {\n        ctx.fillText(`• ${keyword}`, govPanelX + 8, govPanelY + 36 + idx * 16);\n      });\n    } else {\n      ctx.fillStyle = 'rgba(255, 255, 255, 0.5)';\n      ctx.fillText('Keine aktiven', govPanelX + 8, govPanelY + 36);\n      ctx.fillText('Schlüsselwörter', govPanelX + 8, govPanelY + 52);\n    }\n\n    // Panel für Öffentlichkeits-Unterkategorien (rechts neben Öffentlichkeitsslots)\n    const pubPanelX = 1640 + 256 + 20;\n    const pubPanelY = 580; // Auf Höhe der Öffentlichkeitsslots\n    const pubPanelW = 120;\n    const pubPanelH = 256;\n\n    // Öffentlichkeitspanel Hintergrund\n    ctx.fillStyle = 'rgba(0, 255, 0, 0.15)';\n    ctx.fillRect(pubPanelX, pubPanelY, pubPanelW, pubPanelH);\n    ctx.strokeStyle = 'rgba(0, 255, 0, 0.3)';\n    ctx.strokeRect(pubPanelX + 0.5, pubPanelY + 0.5, pubPanelW - 1, pubPanelH - 1);\n\n    // Öffentlichkeitspanel Titel\n    ctx.fillStyle = 'rgba(0, 255, 0, 0.9)';\n    ctx.font = 'bold 12px sans-serif';\n    ctx.textAlign = 'center';\n    ctx.fillText('Öffentlichkeit', pubPanelX + pubPanelW/2, pubPanelY + 16);\n\n    // Unterkategorien auflisten\n    ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\n    ctx.font = '11px sans-serif';\n    ctx.textAlign = 'left';\n    if (subcategories.length > 0) {\n      subcategories.forEach((subcategory, idx) => {\n        const displayName = subcategory.length > 12 ? subcategory.substring(0, 10) + '...' : subcategory;\n        ctx.fillText(`• ${displayName}`, pubPanelX + 8, pubPanelY + 36 + idx * 16);\n      });\n    } else {\n      ctx.fillStyle = 'rgba(255, 255, 255, 0.5)';\n      ctx.fillText('Keine aktiven', pubPanelX + 8, pubPanelY + 36);\n      ctx.fillText('Unterkategorien', pubPanelX + 8, pubPanelY + 52);\n    }\n  }, [getActiveKeywordsAndSubcategories]);\n\n  // Move diagnostics to draw callback to ensure they run after canvas is actually rendered\n  const runDiagnostics = useCallback(() => {\n    try {\n      const handZones = clickZonesRef.current.filter(z => z.data && z.data.type === 'hand_p1');\n      const uiUIDs = handZones.map(z => (z.data.card && (z.data.card.uid ?? z.data.card.id)) ).filter(Boolean);\n      const stateHand = gameState.hands && gameState.hands[1] ? gameState.hands[1] : [];\n      const stateUIDs = stateHand.map((c: any) => c.uid ?? c.id).filter(Boolean);\n\n      const missingInState = uiUIDs.filter((u: any) => !stateUIDs.includes(u));\n      const missingInUI = stateUIDs.filter((u: any) => !uiUIDs.includes(u));\n\n      // Only warn if there are cards in UI that don't exist in state (real error)\n      // Don't warn about missing UI cards due to limited slot capacity\n      if (missingInState.length > 0) {\n        const mismatch = {\n          ts: Date.now(),\n          uiCount: uiUIDs.length,\n          stateCount: stateUIDs.length,\n          uiUIDs,\n          stateUIDs,\n          missingInState,\n          missingInUI,\n          stack: (new Error('mismatch-stack')).stack\n        };\n        (window as any).__politicardDebug = {\n          ...(window as any).__politicardDebug,\n          mismatch: [ ...(window as any).__politicardDebug?.mismatch || [] ].slice(-19).concat([mismatch])\n        };\n        // Clear, then log to console so user can copy/paste trace\n        console.warn('POLITICARD DIAGNOSTIC: hand mismatch detected', mismatch);\n      }\n    } catch (e) {\n      // swallow diagnostic errors to avoid breaking rendering\n      console.error('Diagnostic error', e);\n    }\n  }, [gameState.hands]);\n\n  const draw = useCallback(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n\n    // Detect influence increases and start animations\n    try {\n      const currSnapshot: Record<string, number> = {};\n      const collect = (c: any) => {\n        if (!c) return;\n        if ((c as any).kind !== 'pol') return;\n        const uid = c.uid ?? (c.id != null ? String(c.id) : null);\n        if (!uid) return;\n        currSnapshot[uid] = (c.influence ?? 0) as number;\n      };\n      // board rows\n      (gameState.board[1].aussen || []).forEach(collect);\n      (gameState.board[2].aussen || []).forEach(collect);\n      (gameState.board[1].innen || []).forEach(collect);\n      (gameState.board[2].innen || []).forEach(collect);\n      // permanent slots\n      collect(gameState.permanentSlots[1].government as any);\n      collect(gameState.permanentSlots[2].government as any);\n      collect(gameState.permanentSlots[1].public as any);\n      collect(gameState.permanentSlots[2].public as any);\n\n      const now = performance.now();\n      Object.keys(currSnapshot).forEach(uid => {\n        const curr = currSnapshot[uid] ?? 0;\n        const prev = prevInfluencesRef.current[uid] ?? curr;\n        if (curr > prev) {\n          const delta = curr - prev;\n          const list = influenceAnimRef.current.get(uid) || [];\n          list.push({ start: now, duration: 900, amount: delta });\n          influenceAnimRef.current.set(uid, list);\n        }\n        prevInfluencesRef.current[uid] = curr;\n      });\n    } catch (e) {\n      // ignore\n    }\n\n    // Clear canvas\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    // Clear click zones\n    clickZonesRef.current = [];\n\n    // Background: prefer PNG if configured\n    if (LAYOUT.background?.enabled && LAYOUT.background?.src) {\n      if (backgroundImageRef.current) {\n        ctx.drawImage(backgroundImageRef.current, 0, 0, canvas.width, canvas.height);\n      } else {\n        ctx.fillStyle = '#0c131b';\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\n      }\n    } else {\n      ctx.fillStyle = '#0c131b';\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n    }\n\n    // Apply UI transform (new signature)\n    const { scale, offsetX, offsetY } = getUiTransform(canvas.width, canvas.height);\n    ctx.save();\n    ctx.translate(offsetX, offsetY);\n    ctx.scale(scale, scale);\n\n    // Draw opponent board (top rows) - clickable im Dev Mode\n    // Draw opponent board using new layout system\n    const opponentPublicRects = getPublicRects('opponent');\n    const opponentGovRects = getGovernmentRects('opponent');\n\n    // Draw opponent public slots\n    opponentPublicRects.forEach((s: { x: number; y: number; w: number; h: number }, idx: number) => {\n      const card = gameState.board[2].innen[idx];\n      if (card) {\n        drawCardAt(ctx, card, s.x, s.y, s.w, false, false, 2);\n      }\n    });\n\n    // Draw opponent government slots\n    opponentGovRects.forEach((s: { x: number; y: number; w: number; h: number }, idx: number) => {\n      const card = gameState.board[2].aussen[idx];\n      if (card) {\n        drawCardAt(ctx, card, s.x, s.y, s.w, false, false, 2);\n      }\n    });\n\n    // Draw opponent permanent slots\n    drawPermanentSlotsP2(ctx);\n\n    // Draw player board (middle rows)\n    // Draw player board using new layout system\n    const playerPublicRects = getPublicRects('player');\n    const playerGovRects = getGovernmentRects('player');\n\n    // Draw player public slots\n    playerPublicRects.forEach((s: { x: number; y: number; w: number; h: number }, idx: number) => {\n      const card = gameState.board[1].innen[idx];\n      if (card) {\n        const clickZone = drawCardAt(ctx, card, s.x, s.y, s.w, false, false, 1);\n        clickZonesRef.current.push({\n          ...clickZone,\n          data: { type: 'row_slot', player: 1, lane: 'innen', index: idx }\n        });\n      } else {\n        // Empty slot click zone\n        clickZonesRef.current.push({\n          x: s.x, y: s.y, w: s.w, h: s.h,\n          data: { type: 'row_slot', player: 1, lane: 'innen', index: idx }\n        });\n      }\n    });\n\n    // Draw player government slots\n    playerGovRects.forEach((s: { x: number; y: number; w: number; h: number }, idx: number) => {\n      const card = gameState.board[1].aussen[idx];\n      if (card) {\n        const clickZone = drawCardAt(ctx, card, s.x, s.y, s.w, false, false, 1);\n        clickZonesRef.current.push({\n          ...clickZone,\n          data: { type: 'row_slot', player: 1, lane: 'aussen', index: idx }\n        });\n      } else {\n        // Empty slot click zone\n        clickZonesRef.current.push({\n          x: s.x, y: s.y, w: s.w, h: s.h,\n          data: { type: 'row_slot', player: 1, lane: 'aussen', index: idx }\n        });\n      }\n    });\n\n    // Draw player permanent slots\n    drawPermanentSlotsP1(ctx);\n\n    // Draw instant slots (both players)\n    drawInstantSlots(ctx);\n\n    // Draw interventions strip (player)\n    drawInterventionsP1(ctx);\n\n    // Draw interventions strip (opponent) - nur im Dev Mode\n    if (devMode) {\n      drawInterventionsP2(ctx);\n    }\n\n    // Draw hand (P1)\n    drawHandP1(ctx);\n\n    // 🔧 DEV MODE: Draw hand (P2) - nur im Dev Mode\n    if (devMode) {\n      drawHandP2(ctx);\n    }\n\n    // Draw info panels\n    drawInfoPanels(ctx);\n\n    ctx.restore();\n\n    // expose zones for debug snapshot\n    (window as any).__politicardDebug = {\n      uiTransform: getUiTransform(canvas.width, canvas.height),\n      canvasSize: { width: canvas.width, height: canvas.height },\n      zones: LAYOUT.zones,\n      clickZones: clickZonesRef.current.slice(0, 1000)\n    };\n\n    // Run diagnostics after canvas is fully rendered\n    runDiagnostics();\n  }, [drawLane, drawHandP1, drawHandP2, drawInterventionsP1, drawInterventionsP2, drawPermanentSlotsP1, drawPermanentSlotsP2, drawInstantSlots, drawInfoPanels, devMode, runDiagnostics]);\n\n  const DRAW_LAYOUT_OVERLAY = false; // force off per new layout system\n\n  // Load background image if configured\n  useEffect(() => {\n    if (LAYOUT.background?.enabled && LAYOUT.background?.src) {\n      const img = new Image();\n      img.onload = () => { backgroundImageRef.current = img; requestAnimationFrame(draw); };\n      img.onerror = () => { console.warn('Failed to load background image', LAYOUT.background?.src); };\n      img.src = LAYOUT.background.src as string;\n    } else {\n      // Fallback: ensure first draw without background\n      requestAnimationFrame(draw);\n    }\n  }, [draw]);\n\n  // Redraw when game state or selection changes\n  useEffect(() => {\n    requestAnimationFrame(draw);\n  }, [gameState, selectedHandIndex, draw]);\n\n  // Continuous render loop to keep canvas updated without relying on external state refs\n  useEffect(() => {\n    let frame: number;\n    const loop = () => {\n      draw();\n      frame = requestAnimationFrame(loop);\n    };\n    frame = requestAnimationFrame(loop);\n    return () => cancelAnimationFrame(frame);\n  }, [draw]);\n\n  const handleCardClick = useCallback((data: any) => {\n    // Hand-Klick\n    if (data.type === 'hand_p1') {\n      const uid = data.card?.uid ?? data.card?.id;\n      const stateHand = gameState.hands?.[1] || [];\n      const idxInState = stateHand.findIndex((c: any) => (c.uid ?? c.id) === uid);\n      onCardClick(data);\n      return;\n    }\n\n    // Slot-Klick\n    if (data.type === 'row_slot') {\n      const lane: 'public' | 'government' = data.lane;\n      const cap = getLaneCapacity(lane);\n\n      // Hole aktuelle Row-Länge aus gameState\n      const rowCards = lane === 'public'\n        ? gameState.board?.[1]?.innen ?? []\n        : gameState.board?.[1]?.aussen ?? [];\n\n      if (rowCards.length >= cap) {\n        // Optional: UI Feedback\n        console.warn(`Row ${lane} is full (${rowCards.length}/${cap})`);\n        return;\n      }\n\n      onCardClick(data);\n      return;\n    }\n\n    // Andere Klicks (empty_slot, board_card, etc.)\n    onCardClick(data);\n  }, [gameState, onCardClick]);\n\n  const handleClick = useCallback((e: React.MouseEvent<HTMLCanvasElement>) => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const rect = canvas.getBoundingClientRect();\n    const { scale, offsetX, offsetY } = getUiTransform(canvas.width, canvas.height);\n    const mx = (e.clientX - rect.left - offsetX) / scale;\n    const my = (e.clientY - rect.top - offsetY) / scale;\n\n    const hit = clickZonesRef.current.find(z => mx >= z.x && mx <= z.x + z.w && my >= z.y && my <= z.y + z.h);\n    if (hit) handleCardClick(hit.data);\n  }, [handleCardClick]);\n\n  const handleMouseMove = useCallback((e: React.MouseEvent<HTMLCanvasElement>) => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const rect = canvas.getBoundingClientRect();\n    const { scale, offsetX, offsetY } = getUiTransform(canvas.width, canvas.height);\n    const mx = (e.clientX - rect.left - offsetX) / scale;\n    const my = (e.clientY - rect.top - offsetY) / scale;\n\n    const hit = clickZonesRef.current.find(z => mx >= z.x && mx <= z.x + z.w && my >= z.y && my <= z.y + z.h);\n    if (hit) {\n      console.log('[hover]', hit.data.type, hit.data.card?.name);\n      onCardHover({ ...hit.data, x: e.clientX, y: e.clientY });\n    } else {\n      onCardHover(null);\n    }\n  }, [onCardHover]);\n\n  const handleWheel = useCallback((e: React.WheelEvent<HTMLCanvasElement>) => {\n    // only enable when player1 has more slots than visible\n    const handLen = (gameState.hands && gameState.hands[1]) ? gameState.hands[1].length : 0;\n    const zone = getZone('hand.player');\n    if (!zone) return;\n    if (handLen <= 5) return; // nothing to scroll\n\n    // Prevent page scrolling when over canvas\n    e.preventDefault();\n\n    // accumulate target offset (invert so wheel down moves cards up)\n    // Each wheel step moves by 48px per delta unit\n    const delta = Math.sign(e.deltaY) * 48;\n    // compute slot height more robustly\n    const slots = computeSlotRects(zone);\n    const slotH = slots && slots.length > 0 ? slots[0].h : zone.rectPx[3] / 5;\n    const visible = 5;\n    const maxOffset = -(Math.max(0, handLen - visible) * slotH);\n    handScrollTargetRef.current = Math.max(Math.min(handScrollTargetRef.current - delta, 0), maxOffset);\n  }, [gameState.hands]);\n\n  const handleTouchStart = useCallback((e: React.TouchEvent<HTMLCanvasElement>) => {\n    if (!e.touches || e.touches.length === 0) return;\n    const handLen = (gameState.hands && gameState.hands[1]) ? gameState.hands[1].length : 0;\n    if (handLen <= 5) return;\n    isTouchingRef.current = true;\n    const y = e.touches[0].clientY;\n    touchStartYRef.current = y;\n    lastTouchYRef.current = y;\n    e.preventDefault();\n  }, [gameState.hands]);\n\n  const handleTouchMove = useCallback((e: React.TouchEvent<HTMLCanvasElement>) => {\n    if (!isTouchingRef.current) return;\n    if (!e.touches || e.touches.length === 0) return;\n    const y = e.touches[0].clientY;\n    const last = lastTouchYRef.current ?? y;\n    const dy = y - last; // positive when moving down\n    lastTouchYRef.current = y;\n\n    // invert so dragging up moves cards up\n    const delta = -dy;\n    const handLen = (gameState.hands && gameState.hands[1]) ? gameState.hands[1].length : 0;\n    const zone = getZone('hand.player');\n    if (!zone) return;\n    const slots = computeSlotRects(zone);\n    const slotH = slots && slots.length > 0 ? slots[0].h : zone.rectPx[3] / 5;\n    const visible = 5;\n    const maxOffset = -(Math.max(0, handLen - visible) * slotH);\n    handScrollTargetRef.current = Math.max(Math.min(handScrollTargetRef.current + delta, 0), maxOffset);\n    e.preventDefault();\n  }, [gameState.hands]);\n\n  const handleTouchEnd = useCallback((e: React.TouchEvent<HTMLCanvasElement>) => {\n    isTouchingRef.current = false;\n    touchStartYRef.current = null;\n    lastTouchYRef.current = null;\n  }, []);\n\n  return (\n    <canvas\n      ref={canvasRef}\n      width={1920}\n      height={1080}\n      style={{\n        display: 'block',\n        width: '100%',\n        height: '100%',\n        imageRendering: 'auto',\n      }}\n      onClick={handleClick}\n      onMouseMove={handleMouseMove}\n      onWheel={handleWheel}\n      onTouchStart={handleTouchStart}\n      onTouchMove={handleTouchMove}\n      onTouchEnd={handleTouchEnd}\n    />\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}