{"ast":null,"code":"// Default keyboard bindings (same as previous HTML inline)\nexport const P1_KEYS={left:\"KeyA\",right:\"KeyD\",up:\"KeyW\",down:\"KeyS\",attack:\"KeyE\",parry:\"KeyR\",ranged:\"KeyT\"};export const P2_KEYS={left:\"ArrowLeft\",right:\"ArrowRight\",up:\"ArrowUp\",down:\"ArrowDown\",attack:\"Numpad1\",parry:\"Numpad2\",ranged:\"Numpad3\"};/**\r\n * Returns a fresh InputState object filled from Keyboard events.\r\n */export function createKeyboardListener(){let target=arguments.length>0&&arguments[0]!==undefined?arguments[0]:document.body;const state={};function keydown(e){state[e.code]=true;}function keyup(e){state[e.code]=false;}target.addEventListener(\"keydown\",keydown);target.addEventListener(\"keyup\",keyup);return state;}/**\r\n * Read Gamepads and map buttons/axes into an InputState according to provided bindings.\r\n */export function readGamepadsUnified(p1Bindings,p2Bindings){const pads=navigator.getGamepads&&navigator.getGamepads()||[];const inputFromPads={};const dead=0.35;function mapPadToKeys(pad,keys){if(!pad)return;const b=pad.buttons||[];const a=pad.axes||[];const left=b[14]&&b[14].pressed||a[0]<-dead;const right=b[15]&&b[15].pressed||a[0]>dead;const up=b[12]&&b[12].pressed||a[1]<-0.6||b[0]&&b[0].pressed;const down=b[13]&&b[13].pressed||a[1]>0.6;const attack=!!(b[5]&&b[5].pressed);// R1\nconst parry=!!(b[4]&&b[4].pressed);// L1\nconst ranged=!!(b[1]&&b[1].pressed);// Circle\nif(left)inputFromPads[keys.left]=true;if(right)inputFromPads[keys.right]=true;if(up)inputFromPads[keys.up]=true;if(down)inputFromPads[keys.down]=true;if(attack)inputFromPads[keys.attack]=true;if(parry)inputFromPads[keys.parry]=true;if(ranged)inputFromPads[keys.ranged]=true;}mapPadToKeys(pads[0],p1Bindings);mapPadToKeys(pads[1],p2Bindings);return inputFromPads;}","map":{"version":3,"names":["P1_KEYS","left","right","up","down","attack","parry","ranged","P2_KEYS","createKeyboardListener","target","arguments","length","undefined","document","body","state","keydown","e","code","keyup","addEventListener","readGamepadsUnified","p1Bindings","p2Bindings","pads","navigator","getGamepads","inputFromPads","dead","mapPadToKeys","pad","keys","b","buttons","a","axes","pressed"],"sources":["C:/Users/skank/Videos/Cards/Milchcards/src/qte/input.ts"],"sourcesContent":["export interface KeyBindings {\r\n  left: string;\r\n  right: string;\r\n  up: string;\r\n  down: string;\r\n  attack: string;\r\n  parry: string;\r\n  ranged: string;\r\n}\r\n\r\nexport interface InputState {\r\n  [key: string]: boolean;\r\n}\r\n\r\n// Default keyboard bindings (same as previous HTML inline)\r\nexport const P1_KEYS: KeyBindings = {\r\n  left: \"KeyA\",\r\n  right: \"KeyD\",\r\n  up: \"KeyW\",\r\n  down: \"KeyS\",\r\n  attack: \"KeyE\",\r\n  parry: \"KeyR\",\r\n  ranged: \"KeyT\",\r\n};\r\n\r\nexport const P2_KEYS: KeyBindings = {\r\n  left: \"ArrowLeft\",\r\n  right: \"ArrowRight\",\r\n  up: \"ArrowUp\",\r\n  down: \"ArrowDown\",\r\n  attack: \"Numpad1\",\r\n  parry: \"Numpad2\",\r\n  ranged: \"Numpad3\",\r\n};\r\n\r\n/**\r\n * Returns a fresh InputState object filled from Keyboard events.\r\n */\r\nexport function createKeyboardListener(target: HTMLElement = document.body) {\r\n  const state: InputState = {};\r\n  function keydown(e: KeyboardEvent) {\r\n    state[e.code] = true;\r\n  }\r\n  function keyup(e: KeyboardEvent) {\r\n    state[e.code] = false;\r\n  }\r\n  target.addEventListener(\"keydown\", keydown);\r\n  target.addEventListener(\"keyup\", keyup);\r\n  return state;\r\n}\r\n\r\n/**\r\n * Read Gamepads and map buttons/axes into an InputState according to provided bindings.\r\n */\r\nexport function readGamepadsUnified(\r\n  p1Bindings: KeyBindings,\r\n  p2Bindings: KeyBindings\r\n): InputState {\r\n  const pads = (navigator.getGamepads && navigator.getGamepads()) || [];\r\n  const inputFromPads: InputState = {};\r\n  const dead = 0.35;\r\n  function mapPadToKeys(pad: Gamepad | null, keys: KeyBindings) {\r\n    if (!pad) return;\r\n    const b = pad.buttons || [];\r\n    const a = pad.axes || [];\r\n    const left = (b[14] && b[14].pressed) || a[0] < -dead;\r\n    const right = (b[15] && b[15].pressed) || a[0] > dead;\r\n    const up = (b[12] && b[12].pressed) || a[1] < -0.6 || (b[0] && b[0].pressed);\r\n    const down = (b[13] && b[13].pressed) || a[1] > 0.6;\r\n    const attack = !!(b[5] && b[5].pressed); // R1\r\n    const parry = !!(b[4] && b[4].pressed); // L1\r\n    const ranged = !!(b[1] && b[1].pressed); // Circle\r\n    if (left) inputFromPads[keys.left] = true;\r\n    if (right) inputFromPads[keys.right] = true;\r\n    if (up) inputFromPads[keys.up] = true;\r\n    if (down) inputFromPads[keys.down] = true;\r\n    if (attack) inputFromPads[keys.attack] = true;\r\n    if (parry) inputFromPads[keys.parry] = true;\r\n    if (ranged) inputFromPads[keys.ranged] = true;\r\n  }\r\n  mapPadToKeys(pads[0], p1Bindings);\r\n  mapPadToKeys(pads[1], p2Bindings);\r\n  return inputFromPads;\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}