{"ast":null,"code":"// Default keyboard bindings (same as previous HTML inline)\nexport const P1_KEYS = {\n  left: \"KeyA\",\n  right: \"KeyD\",\n  up: \"KeyW\",\n  down: \"KeyS\",\n  attack: \"KeyE\",\n  parry: \"KeyR\",\n  ranged: \"KeyT\"\n};\nexport const P2_KEYS = {\n  left: \"ArrowLeft\",\n  right: \"ArrowRight\",\n  up: \"ArrowUp\",\n  down: \"ArrowDown\",\n  attack: \"Numpad1\",\n  parry: \"Numpad2\",\n  ranged: \"Numpad3\"\n};\n\n/**\r\n * Returns a fresh InputState object filled from Keyboard events.\r\n */\nexport function createKeyboardListener(target = document.body) {\n  const state = {};\n  function keydown(e) {\n    state[e.code] = true;\n  }\n  function keyup(e) {\n    state[e.code] = false;\n  }\n  target.addEventListener(\"keydown\", keydown);\n  target.addEventListener(\"keyup\", keyup);\n  return state;\n}\n\n/**\r\n * Read Gamepads and map buttons/axes into an InputState according to provided bindings.\r\n */\nexport function readGamepadsUnified(p1Bindings, p2Bindings) {\n  const pads = navigator.getGamepads && navigator.getGamepads() || [];\n  const inputFromPads = {};\n  const dead = 0.35;\n  function mapPadToKeys(pad, keys) {\n    if (!pad) return;\n    const b = pad.buttons || [];\n    const a = pad.axes || [];\n    const left = b[14] && b[14].pressed || a[0] < -dead;\n    const right = b[15] && b[15].pressed || a[0] > dead;\n    const up = b[12] && b[12].pressed || a[1] < -0.6 || b[0] && b[0].pressed;\n    const down = b[13] && b[13].pressed || a[1] > 0.6;\n    const attack = !!(b[5] && b[5].pressed); // R1\n    const parry = !!(b[4] && b[4].pressed); // L1\n    const ranged = !!(b[1] && b[1].pressed); // Circle\n    if (left) inputFromPads[keys.left] = true;\n    if (right) inputFromPads[keys.right] = true;\n    if (up) inputFromPads[keys.up] = true;\n    if (down) inputFromPads[keys.down] = true;\n    if (attack) inputFromPads[keys.attack] = true;\n    if (parry) inputFromPads[keys.parry] = true;\n    if (ranged) inputFromPads[keys.ranged] = true;\n  }\n  mapPadToKeys(pads[0], p1Bindings);\n  mapPadToKeys(pads[1], p2Bindings);\n  return inputFromPads;\n}","map":{"version":3,"names":["P1_KEYS","left","right","up","down","attack","parry","ranged","P2_KEYS","createKeyboardListener","target","document","body","state","keydown","e","code","keyup","addEventListener","readGamepadsUnified","p1Bindings","p2Bindings","pads","navigator","getGamepads","inputFromPads","dead","mapPadToKeys","pad","keys","b","buttons","a","axes","pressed"],"sources":["C:/Users/skank/Videos/Cards/Milchcards/src/qte/input.ts"],"sourcesContent":["export interface KeyBindings {\r\n  left: string;\r\n  right: string;\r\n  up: string;\r\n  down: string;\r\n  attack: string;\r\n  parry: string;\r\n  ranged: string;\r\n}\r\n\r\nexport interface InputState {\r\n  [key: string]: boolean;\r\n}\r\n\r\n// Default keyboard bindings (same as previous HTML inline)\r\nexport const P1_KEYS: KeyBindings = {\r\n  left: \"KeyA\",\r\n  right: \"KeyD\",\r\n  up: \"KeyW\",\r\n  down: \"KeyS\",\r\n  attack: \"KeyE\",\r\n  parry: \"KeyR\",\r\n  ranged: \"KeyT\",\r\n};\r\n\r\nexport const P2_KEYS: KeyBindings = {\r\n  left: \"ArrowLeft\",\r\n  right: \"ArrowRight\",\r\n  up: \"ArrowUp\",\r\n  down: \"ArrowDown\",\r\n  attack: \"Numpad1\",\r\n  parry: \"Numpad2\",\r\n  ranged: \"Numpad3\",\r\n};\r\n\r\n/**\r\n * Returns a fresh InputState object filled from Keyboard events.\r\n */\r\nexport function createKeyboardListener(target: HTMLElement = document.body) {\r\n  const state: InputState = {};\r\n  function keydown(e: KeyboardEvent) {\r\n    state[e.code] = true;\r\n  }\r\n  function keyup(e: KeyboardEvent) {\r\n    state[e.code] = false;\r\n  }\r\n  target.addEventListener(\"keydown\", keydown);\r\n  target.addEventListener(\"keyup\", keyup);\r\n  return state;\r\n}\r\n\r\n/**\r\n * Read Gamepads and map buttons/axes into an InputState according to provided bindings.\r\n */\r\nexport function readGamepadsUnified(\r\n  p1Bindings: KeyBindings,\r\n  p2Bindings: KeyBindings\r\n): InputState {\r\n  const pads = (navigator.getGamepads && navigator.getGamepads()) || [];\r\n  const inputFromPads: InputState = {};\r\n  const dead = 0.35;\r\n  function mapPadToKeys(pad: Gamepad | null, keys: KeyBindings) {\r\n    if (!pad) return;\r\n    const b = pad.buttons || [];\r\n    const a = pad.axes || [];\r\n    const left = (b[14] && b[14].pressed) || a[0] < -dead;\r\n    const right = (b[15] && b[15].pressed) || a[0] > dead;\r\n    const up = (b[12] && b[12].pressed) || a[1] < -0.6 || (b[0] && b[0].pressed);\r\n    const down = (b[13] && b[13].pressed) || a[1] > 0.6;\r\n    const attack = !!(b[5] && b[5].pressed); // R1\r\n    const parry = !!(b[4] && b[4].pressed); // L1\r\n    const ranged = !!(b[1] && b[1].pressed); // Circle\r\n    if (left) inputFromPads[keys.left] = true;\r\n    if (right) inputFromPads[keys.right] = true;\r\n    if (up) inputFromPads[keys.up] = true;\r\n    if (down) inputFromPads[keys.down] = true;\r\n    if (attack) inputFromPads[keys.attack] = true;\r\n    if (parry) inputFromPads[keys.parry] = true;\r\n    if (ranged) inputFromPads[keys.ranged] = true;\r\n  }\r\n  mapPadToKeys(pads[0], p1Bindings);\r\n  mapPadToKeys(pads[1], p2Bindings);\r\n  return inputFromPads;\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}