{"ast":null,"code":"function other(p){return p===1?2:1;}export function startOfTurn(state,p){var _state$board$p$innen,_state$board$p,_state$board$p$aussen,_state$board$p2;// AP reset\nstate.actionPoints[p]=2;// Flags reset\nconst f=state.effectFlags[p];// Flags reset\nconst prevZuck=f.zuckSpent;f.zuckOnceAp=false;f.zuckSpent=false;f.aiWeiweiOnActivate=false;f.elonOnceAp=false;f.elonOnActivate=false;f.auraScience=0;f.auraHealth=0;f.auraMilitaryPenalty=0;// Oppositionsblockade ends at start of player's turn\nf.initiativesLocked=false;// Simplified AP system: No initiative-specific bonuses\n// Helper to consume double aura flag once\nconst consumeDouble=()=>{if(f.doublePublicAura){f.doublePublicAura=false;if(!state._effectQueue)state._effectQueue=[];state._effectQueue.push({type:'LOG',msg:'Double Public Aura consumed.'});return true;}return false;};// Determine active public cards (inner lane)\nconst pubNames=((_state$board$p$innen=(_state$board$p=state.board[p])===null||_state$board$p===void 0?void 0:_state$board$p.innen)!==null&&_state$board$p$innen!==void 0?_state$board$p$innen:[]).map(c=>c.name);// Apply auras via events instead of direct state mutation\nif(pubNames.includes('Jennifer Doudna')){const doubled=consumeDouble();if(!state._effectQueue)state._effectQueue=[];state._effectQueue.push({type:'LOG',msg:\"Jennifer Doudna: Science aura \".concat(doubled?'+2':'+1',\" activated.\")});}if(pubNames.includes('Anthony Fauci')){const doubled=consumeDouble();if(!state._effectQueue)state._effectQueue=[];state._effectQueue.push({type:'LOG',msg:\"Anthony Fauci: Health aura \".concat(doubled?'+2':'+1',\" activated.\")});}if(pubNames.includes('Noam Chomsky')){const doubled=consumeDouble();if(!state._effectQueue)state._effectQueue=[];state._effectQueue.push({type:'LOG',msg:\"Noam Chomsky: Military penalty aura \".concat(doubled?'+2':'+1',\" activated.\")});}// Activation bonuses via events\nif(pubNames.includes('Mark Zuckerberg')){if(!state._effectQueue)state._effectQueue=[];state._effectQueue.push({type:'LOG',msg:'Mark Zuckerberg: +1 AP on next initiative activation.'});}if(pubNames.includes('Ai Weiwei')){if(!state._effectQueue)state._effectQueue=[];state._effectQueue.push({type:'LOG',msg:'Ai Weiwei: +1 card +1 AP on next initiative activation.'});}// Leadership effect: +1 AP immediately\nconst govNames=((_state$board$p$aussen=(_state$board$p2=state.board[p])===null||_state$board$p2===void 0?void 0:_state$board$p2.aussen)!==null&&_state$board$p$aussen!==void 0?_state$board$p$aussen:[]).map(c=>c.name);if(govNames.some(name=>['Justin Trudeau','Volodymyr Zelenskyy','Ursula von der Leyen','Donald Trump','Mohammed bin Salman','Benjamin Netanyahu','Helmut Schmidt'].includes(name))){// Simplified AP system: Leadership gives +1 AP immediately\nstate.actionPoints[p]+=1;}}// Legacy compatibility\nexport function applyStartOfTurnFlags(state,player,log){startOfTurn(state,player);}export function applyStartOfTurnHooks(state,player,log){applyStartOfTurnFlags(state,player,log);}","map":{"version":3,"names":["other","p","startOfTurn","state","_state$board$p$innen","_state$board$p","_state$board$p$aussen","_state$board$p2","actionPoints","f","effectFlags","prevZuck","zuckSpent","zuckOnceAp","aiWeiweiOnActivate","elonOnceAp","elonOnActivate","auraScience","auraHealth","auraMilitaryPenalty","initiativesLocked","consumeDouble","doublePublicAura","_effectQueue","push","type","msg","pubNames","board","innen","map","c","name","includes","doubled","concat","govNames","aussen","some","applyStartOfTurnFlags","player","log","applyStartOfTurnHooks"],"sources":["C:/Users/skank/Videos/Cards/Milchcards/src/utils/startOfTurnHooks.ts"],"sourcesContent":["import { GameState, Player } from '../types/game';\n\nfunction other(p: Player): Player { return p === 1 ? 2 : 1; }\n\nexport function startOfTurn(state: GameState, p: Player) {\n  // AP reset\n  state.actionPoints[p] = 2;\n\n  // Flags reset\n  const f = state.effectFlags[p];\n  // Flags reset\n  const prevZuck = f.zuckSpent;\n  f.zuckOnceAp = false;\n  f.zuckSpent = false;\n  f.aiWeiweiOnActivate = false;\n  f.elonOnceAp = false;\n  f.elonOnActivate = false;\n  f.auraScience = 0;\n  f.auraHealth = 0;\n  f.auraMilitaryPenalty = 0;\n  // Oppositionsblockade ends at start of player's turn\n  f.initiativesLocked = false;\n  // Simplified AP system: No initiative-specific bonuses\n\n  // Helper to consume double aura flag once\n  const consumeDouble = (): boolean => {\n    if (f.doublePublicAura) {\n      f.doublePublicAura = false;\n      if (!state._effectQueue) state._effectQueue = [];\n      state._effectQueue.push({ type: 'LOG', msg: 'Double Public Aura consumed.' } as any);\n      return true;\n    }\n    return false;\n  };\n\n  // Determine active public cards (inner lane)\n  const pubNames: string[] = (state.board[p]?.innen ?? []).map(c => c.name);\n\n  // Apply auras via events instead of direct state mutation\n  if (pubNames.includes('Jennifer Doudna')) {\n    const doubled = consumeDouble();\n    if (!state._effectQueue) state._effectQueue = [];\n    state._effectQueue.push({ type: 'LOG', msg: `Jennifer Doudna: Science aura ${doubled ? '+2' : '+1'} activated.` } as any);\n  }\n  if (pubNames.includes('Anthony Fauci')) {\n    const doubled = consumeDouble();\n    if (!state._effectQueue) state._effectQueue = [];\n    state._effectQueue.push({ type: 'LOG', msg: `Anthony Fauci: Health aura ${doubled ? '+2' : '+1'} activated.` } as any);\n  }\n  if (pubNames.includes('Noam Chomsky')) {\n    const doubled = consumeDouble();\n    if (!state._effectQueue) state._effectQueue = [];\n    state._effectQueue.push({ type: 'LOG', msg: `Noam Chomsky: Military penalty aura ${doubled ? '+2' : '+1'} activated.` } as any);\n  }\n\n  // Activation bonuses via events\n  if (pubNames.includes('Mark Zuckerberg')) {\n    if (!state._effectQueue) state._effectQueue = [];\n    state._effectQueue.push({ type: 'LOG', msg: 'Mark Zuckerberg: +1 AP on next initiative activation.' } as any);\n  }\n  if (pubNames.includes('Ai Weiwei')) {\n    if (!state._effectQueue) state._effectQueue = [];\n    state._effectQueue.push({ type: 'LOG', msg: 'Ai Weiwei: +1 card +1 AP on next initiative activation.' } as any);\n  }\n\n  // Leadership effect: +1 AP immediately\n  const govNames: string[] = (state.board[p]?.aussen ?? []).map((c: any) => c.name);\n  if (govNames.some(name => ['Justin Trudeau', 'Volodymyr Zelenskyy', 'Ursula von der Leyen', 'Donald Trump', 'Mohammed bin Salman', 'Benjamin Netanyahu', 'Helmut Schmidt'].includes(name))) {\n    // Simplified AP system: Leadership gives +1 AP immediately\n    state.actionPoints[p] += 1;\n  }\n}\n\n// Legacy compatibility\nexport function applyStartOfTurnFlags(state: GameState, player: Player, log: (m: string) => void) {\n  startOfTurn(state, player);\n}\n\nexport function applyStartOfTurnHooks(state: GameState, player: Player, log: (m: string) => void) {\n  applyStartOfTurnFlags(state, player, log);\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}