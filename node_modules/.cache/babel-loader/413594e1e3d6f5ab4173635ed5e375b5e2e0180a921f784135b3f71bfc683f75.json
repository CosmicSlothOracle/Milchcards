{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\skank\\\\Videos\\\\Cards\\\\Milchcards\\\\src\\\\components\\\\GameCanvas.tsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useCallback } from 'react';\nimport { useVisualEffectsSafe } from '../context/VisualEffectsContext';\nimport { LAYOUT, getZone, computeSlotRects, getUiTransform, getLaneCapacity, getPublicRects, getGovernmentRects, getSofortRect } from '../ui/layout';\nimport { sortHandCards } from '../utils/gameUtils';\nimport { getCardImagePath } from '../data/gameData';\nimport influenceIconUrl from '../assets/icons/influence.svg';\nimport publicSymbolUrl from '../assets/icons/public_symbol.png';\nimport sofortSymbolUrl from '../assets/icons/sofort_initiative_symbol.png';\nimport dauerhaftSymbolUrl from '../assets/icons/dauerhaft_initative.png';\nimport governmentSymbolUrl from '../assets/icons/government_symbol.png';\nimport interventionSymbolUrl from '../assets/icons/intervention_symbol.png';\nimport govPlaceGifUrl from '../assets/effect_gif/place_card_gov_256x256.gif';\nimport govPlaceSpritesheetUrl from '../ui/sprites/playcard_gov_256x256_14.png';\nimport instantSpritesheetUrl from '../ui/sprites/activate_trap_hit_target_256x256_16x2.png';\nimport hitSpritesheetUrl from '../ui/sprites/activate_inititive_hit_target_256x256_16_2rows.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Helper: is corruption target selection active\nfunction isCorruptionSelection(state, player) {\n  const sel = state.pendingAbilitySelect;\n  return sel && sel.type === 'corruption_steal' && sel.actorPlayer === player;\n}\nexport const GameCanvas = ({\n  gameState,\n  selectedHandIndex,\n  onCardClick,\n  onCardHover,\n  devMode = false\n}) => {\n  _s();\n  // listen for dice roll requests from resolver and trigger Dice3D\n  useEffect(() => {\n    const handler = ev => {\n      try {\n        var _ev$detail;\n        const player = (_ev$detail = ev.detail) === null || _ev$detail === void 0 ? void 0 : _ev$detail.player;\n        // find Dice3D canvas on page and trigger click (it rolls on click)\n        const dice = document.querySelector('canvas');\n        // better: dispatch global event so App-level Dice3D component can roll programmatically\n        window.dispatchEvent(new CustomEvent('pc:ui_request_dice_roll', {\n          detail: {\n            player\n          }\n        }));\n      } catch (e) {}\n    };\n    window.addEventListener('pc:request_dice_roll', handler);\n    return () => window.removeEventListener('pc:request_dice_roll', handler);\n  }, []);\n  const canvasRef = useRef(null);\n  const visualEffects = useVisualEffectsSafe();\n  const clickZonesRef = useRef([]);\n  // Smooth vertical scroll for P1 hand when it has more than visible slots\n  const handScrollTargetRef = useRef(0);\n  const handScrollCurrentRef = useRef(0);\n  const handScrollEnabledRef = useRef(true);\n  // Touch handling refs\n  const touchStartYRef = useRef(null);\n  const lastTouchYRef = useRef(null);\n  const isTouchingRef = useRef(false);\n  const backgroundImageRef = useRef(null);\n  const imageCacheRef = useRef(new Map());\n  const influenceImgRef = useRef(null);\n  // Animation state for visual influence changes: Map<uid, Array<Anim>>\n  const influenceAnimRef = useRef(new Map());\n  // Previous per-card influence snapshot to detect increases\n  const prevInfluencesRef = useRef({});\n  // Slot symbol images\n  const slotSymbolImgsRef = useRef(new Map());\n  // Map of canonical slot positions for animations: key -> {x,y,w,h,cx,cy}\n  const slotPositionsRef = useRef({});\n  // Mapping between animation UIDs and slot keys to ensure one-shot playback\n  const uidToKeyRef = useRef({});\n  const keyToUidRef = useRef({});\n  // Temporary test GIF for government slots\n  const govGifRef = useRef(null);\n  const govSpritesRef = useRef(null);\n  // hit (target) spritesheet (25 frames)\n  const hitSpritesRef = useRef(null);\n  // sprite animation state keyed by slot-key (player.lane.index)\n  const govSpriteStateRef = useRef({});\n  const instantSpritesRef = useRef(null);\n  const instantSpriteStateRef = useRef({});\n  const hitSpriteStateRef = useRef({});\n\n  // Corruption (Bestechungsskandal) target selection mode\n  const corruptionSelectActorRef = useRef(null);\n  const gameStateRef = useRef(gameState);\n  useEffect(() => {\n    gameStateRef.current = gameState;\n  }, [gameState]);\n  useEffect(() => {\n    const onEnterCorruptionSelect = ev => {\n      try {\n        var _ev$detail2;\n        const actor = (_ev$detail2 = ev.detail) === null || _ev$detail2 === void 0 ? void 0 : _ev$detail2.player;\n        console.log('ðŸ”¥ GAMECANVAS RECEIVED pc:corruption_select_target - Actor:', actor);\n        corruptionSelectActorRef.current = actor !== null && actor !== void 0 ? actor : null;\n        console.log('ðŸ”¥ SET corruptionSelectActorRef.current:', corruptionSelectActorRef.current);\n      } catch (e) {\n        console.error('ðŸ”¥ ERROR in corruption select handler:', e);\n      }\n    };\n    window.addEventListener('pc:corruption_select_target', onEnterCorruptionSelect);\n    // Keyboard hotkeys 1-5 to choose opponent government slot when corruption select is active\n    const onKeyDown = ev => {\n      try {\n        var _gs$board, _gs$board$victim, _gs$board$victim$auss, _card$uid;\n        const k = ev.key;\n        if (!['1', '2', '3', '4', '5'].includes(k)) return;\n        const actor = corruptionSelectActorRef.current;\n        if (!actor) return;\n        const victim = actor === 1 ? 2 : 1;\n        const idx = Number(k) - 1; // map '1' -> slot 0\n        const gs = gameStateRef.current;\n        const card = gs === null || gs === void 0 ? void 0 : (_gs$board = gs.board) === null || _gs$board === void 0 ? void 0 : (_gs$board$victim = _gs$board[victim]) === null || _gs$board$victim === void 0 ? void 0 : (_gs$board$victim$auss = _gs$board$victim.aussen) === null || _gs$board$victim$auss === void 0 ? void 0 : _gs$board$victim$auss[idx];\n        console.debug('[CORR][KEY] pressed', k, 'actor', actor, 'victim', victim, 'idx', idx, 'card', card);\n        if (!card) return;\n        const uid = (_card$uid = card.uid) !== null && _card$uid !== void 0 ? _card$uid : card.id;\n        if (!uid) return;\n        console.debug('[CORR][KEY] dispatching pick_target for uid', uid);\n        window.dispatchEvent(new CustomEvent('pc:corruption_pick_target', {\n          detail: {\n            player: actor,\n            targetUid: uid\n          }\n        }));\n        try {\n          console.debug('[CORR][KEY] dispatching target_selected for uid', uid);\n          window.dispatchEvent(new CustomEvent('pc:corruption_target_selected', {\n            detail: {\n              player: actor,\n              targetUid: uid\n            }\n          }));\n        } catch (e) {\n          console.debug('[CORR][KEY] target_selected dispatch error', e);\n        }\n        ev.preventDefault();\n      } catch (e) {}\n    };\n    window.addEventListener('keydown', onKeyDown);\n    return () => {\n      window.removeEventListener('pc:corruption_select_target', onEnterCorruptionSelect);\n      window.removeEventListener('keydown', onKeyDown);\n    };\n  }, []);\n\n  // Helper: draw slot icons with uniform pulsing opacity and a light reflection\n  const drawSlotIconWithPulse = useCallback((ctx, img, x, y, w, h, phase = 0) => {\n    if (!img || !img.complete) return;\n    try {\n      const now = performance.now();\n      const base = 0.10; // base opacity\n      const pulseRange = 0.08; // pulse amplitude (-> up to base + pulseRange)\n      const period = 700; // ms\n      const pulse = base + pulseRange * (0.5 + 0.5 * Math.sin(now / period + phase));\n\n      // draw icon with pulsing alpha\n      ctx.save();\n      ctx.globalAlpha = pulse;\n      ctx.drawImage(img, x, y, w, h);\n\n      // subtle reflection: gradient overlay on top half\n      const grad = ctx.createLinearGradient(x, y, x, y + h * 0.5);\n      grad.addColorStop(0, `rgba(255,255,255,${0.18 * pulse})`);\n      grad.addColorStop(1, `rgba(255,255,255,0)`);\n      ctx.globalCompositeOperation = 'lighter';\n      ctx.fillStyle = grad;\n      ctx.fillRect(x, y, w, h * 0.5);\n      ctx.restore();\n    } catch (e) {\n      // silent fallback\n    }\n  }, []);\n\n  // Load influence icon once\n  useEffect(() => {\n    const img = new Image();\n    img.src = influenceIconUrl;\n    influenceImgRef.current = img;\n  }, []);\n  const drawCardAt = useCallback((ctx, card, x, y, size, selected = false, showAPCost = false, player) => {\n    var _shield;\n    // Apply per-card fade-in if a play animation is active for this uid\n    let extraAlpha = 1;\n    try {\n      var _uid;\n      const uid = (_uid = card.uid) !== null && _uid !== void 0 ? _uid : card.id;\n      const list = visualEffects && visualEffects.playAnimsRef && visualEffects.playAnimsRef.current || window.__pc_play_anims || [];\n      const anim = list.find(a => a.uid === uid);\n      if (anim) {\n        const p = Math.min(1, Math.max(0, (performance.now() - anim.started) / anim.duration));\n        // ease-out\n        extraAlpha = Math.pow(p, 2);\n      }\n    } catch (e) {}\n    let dx = x,\n      dy = y,\n      s = size;\n    if (selected) {\n      s = Math.floor(size * 1.05);\n      dx = x - Math.floor((s - size) / 2);\n      dy = y - Math.floor((s - size) / 2);\n    }\n\n    // Note: pulse overlay is drawn at top layer after all cards are rendered\n\n    // Draw card image with caching to prevent flicker in continuous loop\n    const src = getCardImagePath(card, 'ui');\n    const cached = imageCacheRef.current.get(src);\n    ctx.save();\n    ctx.globalAlpha = extraAlpha;\n    if (cached && cached.complete && cached.naturalWidth > 0) {\n      ctx.drawImage(cached, dx, dy, s, s);\n    } else {\n      const img = new Image();\n      img.onload = () => {\n        imageCacheRef.current.set(src, img);\n        // Note: onload happens async; draw will occur on next frame\n        // don't draw here into stale ctx\n      };\n      img.src = src;\n      imageCacheRef.current.set(src, img);\n    }\n    ctx.restore();\n\n    // Status-Indikatoren (fÃ¼r alle Board-Karten)\n    // Einfluss-Wert dauerhaft anzeigen (oben links) â€“ nur fÃ¼r Regierungskarten\n    if (card.kind === 'pol') {\n      var _influence;\n      const barH = Math.max(20, Math.floor(s * 0.12) + 6);\n      ctx.fillStyle = 'rgba(0,0,0,0.6)';\n      ctx.fillRect(dx, dy + s - barH, s, barH);\n      ctx.fillStyle = '#ffffff';\n      const fontSize = Math.floor(s * 0.12);\n      ctx.font = `bold ${fontSize}px sans-serif`;\n      ctx.textAlign = 'left';\n      ctx.textBaseline = 'middle';\n      ctx.fillText(`${(_influence = card.influence) !== null && _influence !== void 0 ? _influence : 0}`, dx + 8, dy + s - barH / 2);\n    }\n    // Schutz-Status (blauer Punkt)\n    if (card.protected || ((_shield = card.shield) !== null && _shield !== void 0 ? _shield : 0) > 0) {\n      ctx.fillStyle = '#1da1f2';\n      ctx.fillRect(dx + s - 22, dy + 6, 16, 16);\n    }\n    // Deaktiviert-Status (roter Punkt)\n    if (card.deactivated) {\n      ctx.fillStyle = '#b63838';\n      ctx.fillRect(dx + s - 22, dy + 26, 16, 16);\n    }\n\n    // Einfluss-Badge fÃ¼r Handkarten oben rechts (nur Regierungskarten)\n    if (showAPCost && player && card.kind === 'pol') {\n      var _influence2;\n      const badgeHeight = Math.max(16, Math.floor(s * 0.12));\n      const badgeWidth = badgeHeight * 2;\n      const badgeX = dx + s - badgeWidth - 6;\n      const badgeY = dy + 6;\n\n      // Semi-transparent dunkler Hintergrund\n      ctx.fillStyle = 'rgba(0,0,0,0.6)';\n      ctx.beginPath();\n      ctx.roundRect(badgeX, badgeY, badgeWidth, badgeHeight, badgeHeight / 2);\n      ctx.fill();\n\n      // Influence icon (90% opacity) links im Badge\n      if (influenceImgRef.current && influenceImgRef.current.complete) {\n        ctx.globalAlpha = 0.9;\n        ctx.drawImage(influenceImgRef.current, badgeX + 2, badgeY + 2, badgeHeight - 4, badgeHeight - 4);\n        ctx.globalAlpha = 1;\n      }\n\n      // Influence number rechts im Badge\n      ctx.fillStyle = '#ffffff';\n      ctx.font = `bold ${Math.floor(badgeHeight * 0.5)}px sans-serif`;\n      ctx.textAlign = 'right';\n      ctx.textBaseline = 'middle';\n      ctx.fillText(`${(_influence2 = card.influence) !== null && _influence2 !== void 0 ? _influence2 : 0}`, badgeX + badgeWidth - 4, badgeY + badgeHeight / 2);\n\n      // Reset align\n      ctx.textAlign = 'start';\n      ctx.textBaseline = 'alphabetic';\n    }\n\n    // NOTE: influence overlays (pulse + labels) are drawn in a separate pass\n\n    // Auswahl-Rahmen\n    if (selected) {\n      ctx.strokeStyle = '#61dafb';\n      ctx.lineWidth = 3;\n      ctx.strokeRect(dx + 1, dy + 1, s - 2, s - 2);\n      ctx.lineWidth = 1;\n    }\n\n    // Return exact 256x256 click zone over the card\n    // Since all cards are 256x256, the click zone should match exactly\n    return {\n      x: dx,\n      y: dy,\n      w: 256,\n      h: 256\n    };\n  }, [gameState]);\n\n  // Slot-Benennungs-Funktion basierend auf Glossar\n  const getSlotDisplayName = useCallback((zoneId, index, player) => {\n    const slotNumber = index + 1;\n    if (zoneId.includes('government')) {\n      if (zoneId.includes('player')) {\n        return `Regierungsreihe Slot ${slotNumber}`;\n      } else {\n        return `Gegner Regierung Slot ${slotNumber}`;\n      }\n    } else if (zoneId.includes('public')) {\n      if (zoneId.includes('player')) {\n        return `Ã–ffentlichkeitsreihe Slot ${slotNumber}`;\n      } else {\n        return `Gegner Ã–ffentlichkeit Slot ${slotNumber}`;\n      }\n    } else if (zoneId.includes('permanent.government')) {\n      if (zoneId.includes('player')) {\n        return 'Regierung Spezial-Slot';\n      } else {\n        return 'Gegner Regierung Spezial-Slot';\n      }\n    } else if (zoneId.includes('permanent.public')) {\n      if (zoneId.includes('player')) {\n        return 'Ã–ffentlichkeit Spezial-Slot';\n      } else {\n        return 'Gegner Ã–ffentlichkeit Spezial-Slot';\n      }\n    } else if (zoneId.includes('instant')) {\n      if (zoneId.includes('player')) {\n        return 'Sofort-Slot';\n      } else {\n        return 'Gegner Sofort-Slot';\n      }\n    } else if (zoneId.includes('hand')) {\n      return 'Hand';\n    } else if (zoneId.includes('interventions')) {\n      return 'Interventionen';\n    }\n    return `Slot ${slotNumber}`;\n  }, []);\n  const drawLane = useCallback((ctx, zoneId, player, lane, clickable) => {\n    const zone = getZone(zoneId);\n    if (!zone) return;\n    const slots = computeSlotRects(zone);\n    const arr = gameState.board[player][lane];\n    slots.forEach((s, idx) => {\n      const card = arr[idx];\n\n      // Hintergrundfarbe nach Kategorie\n      let bgColor = 'rgba(0,0,0,0.1)'; // Standard\n      if (zoneId.includes('government')) {\n        bgColor = 'rgba(255, 197, 0, 0.15)'; // Hellgelb fÃ¼r Regierung\n      } else if (zoneId.includes('public')) {\n        bgColor = 'rgba(0, 255, 0, 0.15)'; // HellgrÃ¼n fÃ¼r Ã–ffentlichkeit\n      }\n      ctx.fillStyle = bgColor;\n      ctx.fillRect(s.x, s.y, s.w, s.h);\n\n      // Slot-Rahmen\n      ctx.strokeStyle = 'rgba(255,255,255,0.06)';\n      ctx.strokeRect(s.x + 0.5, s.y + 0.5, s.w - 1, s.h - 1);\n      if (card) {\n        const isSelected = player === 1 && selectedHandIndex !== null && gameState.hands[1][selectedHandIndex] === card;\n        const clickZone = drawCardAt(ctx, card, s.x, s.y, s.w, isSelected, false);\n\n        // Kartenname unter dem Slot anzeigen\n        ctx.fillStyle = 'rgba(255,255,255,0.9)';\n        ctx.font = 'bold 12px sans-serif';\n        ctx.textAlign = 'center';\n        const textY = s.y + s.h + 16;\n        ctx.fillText(card.name, s.x + s.w / 2, textY);\n        clickZonesRef.current.push({\n          ...clickZone,\n          data: {\n            type: 'board_card',\n            player,\n            lane,\n            index: idx,\n            card\n          }\n        });\n      } else if (clickable && gameState.current === player) {\n        // Slot-Benennung anzeigen (fÃ¼r den aktuellen Spieler)\n        const slotName = getSlotDisplayName(zoneId, idx, player);\n        ctx.fillStyle = 'rgba(255,255,255,0.6)';\n        ctx.font = '11px sans-serif';\n        ctx.textAlign = 'center';\n        const textY = s.y + s.h / 2;\n        ctx.fillText(slotName, s.x + s.w / 2, textY);\n        clickZonesRef.current.push({\n          x: s.x,\n          y: s.y,\n          w: s.w,\n          h: s.h,\n          data: {\n            type: 'row_slot',\n            lane,\n            index: idx\n          }\n        });\n      }\n    });\n  }, [gameState, selectedHandIndex, drawCardAt, getSlotDisplayName]);\n  const drawHandP1 = useCallback(ctx => {\n    const hand = sortHandCards(gameState.hands[1]);\n    const zone = getZone('hand.player');\n    if (!zone) return;\n    const slots = computeSlotRects(zone);\n    // Apply smooth offset (lerp towards target)\n    const target = handScrollTargetRef.current;\n    handScrollCurrentRef.current += (target - handScrollCurrentRef.current) * 0.15; // easing\n    const offsetY = Math.round(handScrollCurrentRef.current);\n    slots.forEach((s, i) => {\n      const card = hand[i];\n      if (!card) return;\n      // Find original index in unsorted hand for click handling\n      const originalIndex = gameState.hands[1].findIndex(c => c.uid === card.uid);\n      const isSel = selectedHandIndex === originalIndex;\n      // apply vertical offset\n      const sx = s.x;\n      const sy = s.y + offsetY;\n      const clickZone = drawCardAt(ctx, card, sx, sy, s.w, isSel, true, 1); // Show AP cost for player 1 hand\n      clickZonesRef.current.push({\n        ...clickZone,\n        data: {\n          type: 'hand_p1',\n          index: originalIndex,\n          card\n        }\n      });\n    });\n  }, [gameState.hands, selectedHandIndex, drawCardAt]);\n\n  // ðŸ”§ DEV MODE: Player 2 Hand (rechts unten, kompakter)\n  const drawHandP2 = useCallback(ctx => {\n    const hand = sortHandCards(gameState.hands[2]);\n    const zone = getZone('hand.opponent');\n    if (!zone) return;\n    const slots = computeSlotRects(zone);\n\n    // Hintergrund fÃ¼r P2 Hand\n    const [x, y, w, h] = zone.rectPx;\n    ctx.fillStyle = 'rgba(255, 100, 100, 0.15)'; // RÃ¶tlicher Hintergrund fÃ¼r P2\n    ctx.fillRect(x, y, w, h);\n    ctx.strokeStyle = 'rgba(255, 100, 100, 0.3)';\n    ctx.strokeRect(x + 0.5, y + 0.5, w - 1, h - 1);\n\n    // Label fÃ¼r P2 Hand\n    ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\n    ctx.font = 'bold 14px sans-serif';\n    ctx.textAlign = 'center';\n    ctx.fillText('Player 2 Hand', x + w / 2, y - 8);\n    slots.forEach((s, i) => {\n      const card = hand[i];\n      if (!card) return;\n      // Find original index in unsorted hand for click handling\n      const originalIndex = gameState.hands[2].findIndex(c => c.uid === card.uid);\n      const isSel = gameState.current === 2 && selectedHandIndex === originalIndex;\n      const clickZone = drawCardAt(ctx, card, s.x, s.y, s.w, isSel, true, 2); // Show AP cost for player 2 hand\n      clickZonesRef.current.push({\n        ...clickZone,\n        data: {\n          type: 'hand_p2',\n          index: originalIndex,\n          card\n        }\n      });\n    });\n  }, [gameState, selectedHandIndex, drawCardAt]);\n  // Interventions strip (player traps)\n  const drawInterventionsP1 = useCallback(ctx => {\n    const traps = gameState.traps[1] || [];\n    const zone = getZone('interventions.player');\n    if (!zone) return;\n\n    // Single intervention slot\n    const [zx, zy, zw, zh] = zone.rectPx;\n    const card = traps[0]; // Only first trap\n\n    // Hintergrund fÃ¼r Interventions-Slot\n    ctx.fillStyle = 'rgba(200, 160, 255, 0.15)'; // Lavendelfarben fÃ¼r Interventionen\n    ctx.fillRect(zx, zy, zw, zh);\n    ctx.strokeStyle = 'rgba(200, 160, 255, 0.3)';\n    ctx.strokeRect(zx + 0.5, zy + 0.5, zw - 1, zh - 1);\n\n    // Slot-Benennung fÃ¼r Interventions-Slot\n    ctx.fillStyle = 'rgba(200, 160, 255, 0.8)';\n    ctx.font = '11px sans-serif';\n    ctx.textAlign = 'left';\n    ctx.fillText('Intervention', zx + 8, zy + zh - 6);\n    if (card) {\n      const clickZone = drawCardAt(ctx, card, zx, zy, zw, false, false);\n      clickZonesRef.current.push({\n        ...clickZone,\n        data: {\n          type: 'trap_p1',\n          index: 0,\n          card\n        }\n      });\n    }\n  }, [gameState.traps, drawCardAt]);\n\n  // Interventions strip (opponent traps)\n  const drawInterventionsP2 = useCallback(ctx => {\n    const traps = gameState.traps[2] || [];\n    const zone = getZone('interventions.opponent');\n    if (!zone) return;\n\n    // Single intervention slot\n    const [zx, zy, zw, zh] = zone.rectPx;\n    const card = traps[0]; // Only first trap\n\n    // Hintergrund fÃ¼r Interventions-Slot\n    ctx.fillStyle = 'rgba(200, 160, 255, 0.15)'; // Lavendelfarben fÃ¼r Interventionen\n    ctx.fillRect(zx, zy, zw, zh);\n    ctx.strokeStyle = 'rgba(200, 160, 255, 0.3)';\n    ctx.strokeRect(zx + 0.5, zy + 0.5, zw - 1, zh - 1);\n\n    // Slot-Benennung fÃ¼r Interventions-Slot\n    ctx.fillStyle = 'rgba(200, 160, 255, 0.8)';\n    ctx.font = '11px sans-serif';\n    ctx.textAlign = 'left';\n    ctx.fillText('Intervention', zx + 8, zy + zh - 6);\n    if (card) {\n      const clickZone = drawCardAt(ctx, card, zx, zy, zw, false, false);\n      clickZonesRef.current.push({\n        ...clickZone,\n        data: {\n          type: 'trap_p2',\n          index: 0,\n          card\n        }\n      });\n    }\n  }, [gameState.traps, drawCardAt]);\n\n  // Single slot drawing function\n  const drawSingleSlot = useCallback((ctx, zoneId, card, clickType, player) => {\n    const zone = getZone(zoneId);\n    if (!zone) return;\n    const [x, y, w, h] = zone.rectPx;\n\n    // Hintergrundfarbe nach Kategorie\n    let bgColor = 'rgba(0,0,0,0.1)'; // Standard\n    if (zoneId.includes('government')) {\n      bgColor = 'rgba(255, 197, 0, 0.15)'; // Hellgelb fÃ¼r Regierung\n    } else if (zoneId.includes('public')) {\n      bgColor = 'rgba(0, 255, 0, 0.15)'; // HellgrÃ¼n fÃ¼r Ã–ffentlichkeit\n    } else if (zoneId.includes('instant')) {\n      bgColor = 'rgba(127, 116, 91, 0.15)'; // Neutral fÃ¼r Sofort-Slots\n    } else if (zoneId.includes('permanent')) {\n      // Unterscheide zwischen government und public permanent slots\n      if (zoneId.includes('government')) {\n        bgColor = 'rgba(255, 197, 0, 0.15)';\n      } else if (zoneId.includes('public')) {\n        bgColor = 'rgba(0, 255, 0, 0.15)';\n      }\n    }\n    ctx.fillStyle = bgColor;\n    ctx.fillRect(x, y, w, h);\n\n    // Draw slot border\n    ctx.strokeStyle = 'rgba(255,255,255,0.06)';\n    ctx.strokeRect(x + 0.5, y + 0.5, w - 1, h - 1);\n    if (card) {\n      const isSelected = player === 1 && selectedHandIndex !== null && gameState.hands[1][selectedHandIndex] === card;\n      const clickZone = drawCardAt(ctx, card, x, y, w, isSelected, false);\n\n      // Kartenname unter dem Slot anzeigen\n      ctx.fillStyle = 'rgba(255,255,255,0.9)';\n      ctx.font = 'bold 12px sans-serif';\n      ctx.textAlign = 'center';\n      const textY = y + h + 16;\n      ctx.fillText(card.name, x + w / 2, textY);\n\n      // Register click zone for the card - always in dev mode, otherwise only for current player\n      if (devMode || player === gameState.current) {\n        clickZonesRef.current.push({\n          ...clickZone,\n          data: {\n            type: 'slot_card',\n            slot: clickType,\n            player,\n            card\n          }\n        });\n      }\n\n      // ðŸ”§ NEU: Sofort-Initiative-Slots sind immer klickbar fÃ¼r Aktivierung (handled by activateInstantInitiative)\n      if (clickType === 'instant') {\n        clickZonesRef.current.push({\n          x,\n          y,\n          w,\n          h,\n          data: {\n            type: 'activate_instant',\n            player,\n            card\n          }\n        });\n      }\n    } else if (gameState.current === player || devMode) {\n      // Slot-Benennung fÃ¼r leere Slots anzeigen (fÃ¼r den aktuellen Spieler oder im Dev Mode)\n      const slotName = getSlotDisplayName(zoneId, 0, player);\n      ctx.fillStyle = 'rgba(255,255,255,0.6)';\n      ctx.font = '11px sans-serif';\n      ctx.textAlign = 'center';\n      const textY = y + h / 2;\n      ctx.fillText(slotName, x + w / 2, textY);\n      clickZonesRef.current.push({\n        x,\n        y,\n        w,\n        h,\n        data: {\n          type: 'empty_slot',\n          slot: clickType,\n          player\n        }\n      });\n    }\n  }, [selectedHandIndex, gameState, drawCardAt, getSlotDisplayName, devMode]);\n\n  // Small UI hook: show a lightweight corruption modal overlay when a target is selected\n  useEffect(() => {\n    const onTargetSelected = ev => {\n      const {\n        player,\n        targetUid\n      } = ev.detail || {};\n      if (!player || !targetUid) return;\n      // create transient overlay element if not present\n      try {\n        var _board, _board2, _board2$aussen, _board3, _board4, _board4$aussen;\n        const id = 'pc-corruption-modal';\n        let el = document.getElementById(id);\n        if (!el) {\n          el = document.createElement('div');\n          el.id = id;\n          el.style.position = 'fixed';\n          el.style.left = '50%';\n          el.style.top = '40%';\n          el.style.transform = 'translate(-50%, -50%)';\n          el.style.padding = '12px 16px';\n          el.style.background = 'rgba(6,10,15,0.9)';\n          el.style.border = '1px solid rgba(255,255,255,0.12)';\n          el.style.borderRadius = '8px';\n          el.style.zIndex = '3000';\n          el.style.color = '#e5e7eb';\n          el.style.fontFamily = 'monospace';\n          el.style.fontSize = '14px';\n          document.body.appendChild(el);\n        }\n        const card = ((_board = gameState.board) === null || _board === void 0 ? void 0 : (_board2 = _board[player === 1 ? 1 : 2]) === null || _board2 === void 0 ? void 0 : (_board2$aussen = _board2.aussen) === null || _board2$aussen === void 0 ? void 0 : _board2$aussen.find(c => c.uid === targetUid)) || ((_board3 = gameState.board) === null || _board3 === void 0 ? void 0 : (_board4 = _board3[player === 1 ? 2 : 1]) === null || _board4 === void 0 ? void 0 : (_board4$aussen = _board4.aussen) === null || _board4$aussen === void 0 ? void 0 : _board4$aussen.find(c => c.uid === targetUid));\n        el.innerHTML = `<div style=\"display:flex;flex-direction:column;gap:8px;min-width:260px;\">\n          <div style=\"font-weight:700\">Bestechungsskandal 2.0 â€” Ziel gewÃ¤hlt</div>\n          <div>GewÃ¤hltes Ziel: <b>${card ? card.name : 'UID ' + targetUid}</b></div>\n          <div>Probe: W6 â‰¥ Einfluss (inkl. Oligarch-Bonus)</div>\n          <div style=\"display:flex;gap:8px;justify-content:flex-end;\">\n            <button id=\"pc-corruption-roll\" style=\"background:#2563eb;color:white;border:none;padding:6px 10px;border-radius:6px;cursor:pointer;\">WÃ¼rfeln</button>\n            <button id=\"pc-corruption-cancel\" style=\"background:#374151;color:white;border:none;padding:6px 10px;border-radius:6px;cursor:pointer;\">Abbrechen</button>\n          </div>\n        </div>`;\n        const rollBtn = document.getElementById('pc-corruption-roll');\n        const cancelBtn = document.getElementById('pc-corruption-cancel');\n        if (rollBtn) {\n          rollBtn.onclick = () => {\n            try {\n              console.log('ðŸ”¥ CORRUPTION WÃœRFELN CLICKED - triggering dice roll');\n              // Trigger the dice component to roll\n              window.dispatchEvent(new CustomEvent('pc:ui_request_dice_roll', {\n                detail: {\n                  player,\n                  targetUid\n                }\n              }));\n              window.dispatchEvent(new CustomEvent('pc:corruption_request_roll', {\n                detail: {\n                  player,\n                  targetUid\n                }\n              }));\n            } catch (e) {\n              console.error('ðŸ”¥ ERROR triggering dice roll:', e);\n            }\n            // disable until result\n            rollBtn.disabled = true;\n            rollBtn.innerText = 'WÃ¼rfelt...';\n          };\n        }\n        if (cancelBtn) {\n          cancelBtn.onclick = () => {\n            el.remove();\n          };\n        }\n      } catch (e) {\n        console.debug('corruption modal create failed', e);\n      }\n    };\n    window.addEventListener('pc:corruption_target_selected', onTargetSelected);\n    return () => window.removeEventListener('pc:corruption_target_selected', onTargetSelected);\n  }, [gameState]);\n\n  // Draw permanent slots for player\n  const drawPermanentSlotsP1 = useCallback(ctx => {\n    drawSingleSlot(ctx, 'slot.permanent.government.player', gameState.permanentSlots[1].government, 'permanent_government', 1);\n    drawSingleSlot(ctx, 'slot.permanent.public.player', gameState.permanentSlots[1].public, 'permanent_public', 1);\n  }, [gameState.permanentSlots, drawSingleSlot]);\n\n  // Draw permanent slots for opponent\n  const drawPermanentSlotsP2 = useCallback(ctx => {\n    drawSingleSlot(ctx, 'slot.permanent.government.opponent', gameState.permanentSlots[2].government, 'permanent_government', 2);\n    drawSingleSlot(ctx, 'slot.permanent.public.opponent', gameState.permanentSlots[2].public, 'permanent_public', 2);\n  }, [gameState.permanentSlots, drawSingleSlot]);\n\n  // Draw instant slots\n  const drawInstantSlots = useCallback(ctx => {\n    // Sofort-Initiative-Slots aus dem Board zeichnen\n    const sofortPlayerCard = gameState.board[1].sofort[0];\n    const sofortOppCard = gameState.board[2].sofort[0];\n    drawSingleSlot(ctx, 'slot.instant.player', sofortPlayerCard, 'instant', 1);\n    drawSingleSlot(ctx, 'slot.instant.opponent', sofortOppCard, 'instant', 2);\n  }, [gameState.board, drawSingleSlot]);\n\n  // Aktive SchlÃ¼sselwÃ¶rter und Unterkategorien ermitteln\n  const getActiveKeywordsAndSubcategories = useCallback(player => {\n    const board = gameState.board[player];\n    const permanentSlots = gameState.permanentSlots[player];\n    const allCards = [...board.innen, ...board.aussen, permanentSlots.government, permanentSlots.public].filter(c => c && c.kind === 'pol');\n    const keywords = new Set();\n    const subcategories = new Set();\n    allCards.forEach(card => {\n      if (!card.deactivated) {\n        // Regierungskarten-SchlÃ¼sselwÃ¶rter\n        if (card.tag === 'Leadership') {\n          keywords.add('Leadership');\n        }\n        if (card.tag === 'Diplomat') {\n          keywords.add('Diplomat');\n        }\n\n        // Ã–ffentlichkeits-Unterkategorien (fÃ¼r Karten in Ã–ffentlichkeitsreihe)\n        if (board.innen.includes(card)) {\n          const publicCard = card;\n          if (publicCard.tag) {\n            // Oligarch\n            const oligarchNames = ['Elon Musk', 'Bill Gates', 'George Soros', 'Warren Buffett', 'Mukesh Ambani', 'Jeff Bezos', 'Alisher Usmanov', 'Gautam Adani', 'Jack Ma', 'Zhang Yiming', 'Roman Abramovich'];\n            if (oligarchNames.includes(publicCard.name)) {\n              subcategories.add('Oligarch');\n            }\n\n            // Plattform\n            const platformNames = ['Mark Zuckerberg', 'Tim Cook', 'Sam Altman', 'Jack Ma'];\n            if (platformNames.includes(publicCard.name)) {\n              subcategories.add('Plattform');\n            }\n\n            // Bewegung\n            const movementNames = ['Greta Thunberg', 'Malala Yousafzai', 'Ai Weiwei', 'Alexei Navalny'];\n            if (movementNames.includes(publicCard.name)) {\n              subcategories.add('Bewegung');\n            }\n\n            // NGO/Think-Tank\n            const ngoNames = ['Bill Gates', 'George Soros', 'Jennifer Doudna', 'Noam Chomsky', 'Anthony Fauci'];\n            if (ngoNames.includes(publicCard.name)) {\n              subcategories.add('NGO/Think-Tank');\n            }\n\n            // Intelligenz\n            const intelligenceNames = ['Jennifer Doudna', 'Noam Chomsky', 'Edward Snowden', 'Julian Assange', 'Yuval Noah Harari', 'Ai Weiwei', 'Alexei Navalny', 'Anthony Fauci'];\n            if (intelligenceNames.includes(publicCard.name)) {\n              subcategories.add('Intelligenz');\n            }\n\n            // Medien\n            const mediaNames = ['Oprah Winfrey'];\n            if (mediaNames.includes(publicCard.name)) {\n              subcategories.add('Medien');\n            }\n          }\n        }\n      }\n    });\n    return {\n      keywords: Array.from(keywords),\n      subcategories: Array.from(subcategories)\n    };\n  }, [gameState]);\n\n  // Info-Panels zeichnen\n  const drawInfoPanels = useCallback(ctx => {\n    const {\n      keywords,\n      subcategories\n    } = getActiveKeywordsAndSubcategories(1);\n\n    // Panel fÃ¼r RegierungsschlÃ¼sselwÃ¶rter (rechts neben Regierungsslots)\n    const govPanelX = 1640 + 256 + 20; // Nach dem letzten permanenten Slot\n    const govPanelY = 300; // Auf HÃ¶he der Regierungsslots\n    const govPanelW = 120;\n    const govPanelH = 256;\n\n    // Regierungspanel Hintergrund\n    ctx.fillStyle = 'rgba(255, 197, 0, 0.15)';\n    ctx.fillRect(govPanelX, govPanelY, govPanelW, govPanelH);\n    ctx.strokeStyle = 'rgba(255, 197, 0, 0.3)';\n    ctx.strokeRect(govPanelX + 0.5, govPanelY + 0.5, govPanelW - 1, govPanelH - 1);\n\n    // Regierungspanel Titel\n    ctx.fillStyle = 'rgba(255, 197, 0, 0.9)';\n    ctx.font = 'bold 12px sans-serif';\n    ctx.textAlign = 'center';\n    ctx.fillText('Regierung', govPanelX + govPanelW / 2, govPanelY + 16);\n\n    // SchlÃ¼sselwÃ¶rter auflisten\n    ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\n    ctx.font = '11px sans-serif';\n    ctx.textAlign = 'left';\n    if (keywords.length > 0) {\n      keywords.forEach((keyword, idx) => {\n        ctx.fillText(`â€¢ ${keyword}`, govPanelX + 8, govPanelY + 36 + idx * 16);\n      });\n    } else {\n      ctx.fillStyle = 'rgba(255, 255, 255, 0.5)';\n      ctx.fillText('Keine aktiven', govPanelX + 8, govPanelY + 36);\n      ctx.fillText('SchlÃ¼sselwÃ¶rter', govPanelX + 8, govPanelY + 52);\n    }\n\n    // Panel fÃ¼r Ã–ffentlichkeits-Unterkategorien (rechts neben Ã–ffentlichkeitsslots)\n    const pubPanelX = 1640 + 256 + 20;\n    const pubPanelY = 580; // Auf HÃ¶he der Ã–ffentlichkeitsslots\n    const pubPanelW = 120;\n    const pubPanelH = 256;\n\n    // Ã–ffentlichkeitspanel Hintergrund\n    ctx.fillStyle = 'rgba(0, 255, 0, 0.15)';\n    ctx.fillRect(pubPanelX, pubPanelY, pubPanelW, pubPanelH);\n    ctx.strokeStyle = 'rgba(0, 255, 0, 0.3)';\n    ctx.strokeRect(pubPanelX + 0.5, pubPanelY + 0.5, pubPanelW - 1, pubPanelH - 1);\n\n    // Ã–ffentlichkeitspanel Titel\n    ctx.fillStyle = 'rgba(0, 255, 0, 0.9)';\n    ctx.font = 'bold 12px sans-serif';\n    ctx.textAlign = 'center';\n    ctx.fillText('Ã–ffentlichkeit', pubPanelX + pubPanelW / 2, pubPanelY + 16);\n\n    // Unterkategorien auflisten\n    ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\n    ctx.font = '11px sans-serif';\n    ctx.textAlign = 'left';\n    if (subcategories.length > 0) {\n      subcategories.forEach((subcategory, idx) => {\n        const displayName = subcategory.length > 12 ? subcategory.substring(0, 10) + '...' : subcategory;\n        ctx.fillText(`â€¢ ${displayName}`, pubPanelX + 8, pubPanelY + 36 + idx * 16);\n      });\n    } else {\n      ctx.fillStyle = 'rgba(255, 255, 255, 0.5)';\n      ctx.fillText('Keine aktiven', pubPanelX + 8, pubPanelY + 36);\n      ctx.fillText('Unterkategorien', pubPanelX + 8, pubPanelY + 52);\n    }\n  }, [getActiveKeywordsAndSubcategories]);\n\n  // Move diagnostics to draw callback to ensure they run after canvas is actually rendered\n  const runDiagnostics = useCallback(() => {\n    try {\n      const handZones = clickZonesRef.current.filter(z => z.data && z.data.type === 'hand_p1');\n      const uiUIDs = handZones.map(z => {\n        var _z$data$card$uid;\n        return z.data.card && ((_z$data$card$uid = z.data.card.uid) !== null && _z$data$card$uid !== void 0 ? _z$data$card$uid : z.data.card.id);\n      }).filter(Boolean);\n      const stateHand = gameState.hands && gameState.hands[1] ? gameState.hands[1] : [];\n      const stateUIDs = stateHand.map(c => {\n        var _c$uid;\n        return (_c$uid = c.uid) !== null && _c$uid !== void 0 ? _c$uid : c.id;\n      }).filter(Boolean);\n      const missingInState = uiUIDs.filter(u => !stateUIDs.includes(u));\n      const missingInUI = stateUIDs.filter(u => !uiUIDs.includes(u));\n\n      // Only warn if there are cards in UI that don't exist in state (real error)\n      // Don't warn about missing UI cards due to limited slot capacity\n      if (missingInState.length > 0) {\n        var _politicardDebug;\n        const mismatch = {\n          ts: Date.now(),\n          uiCount: uiUIDs.length,\n          stateCount: stateUIDs.length,\n          uiUIDs,\n          stateUIDs,\n          missingInState,\n          missingInUI,\n          stack: new Error('mismatch-stack').stack\n        };\n        window.__politicardDebug = {\n          ...window.__politicardDebug,\n          mismatch: [...(((_politicardDebug = window.__politicardDebug) === null || _politicardDebug === void 0 ? void 0 : _politicardDebug.mismatch) || [])].slice(-19).concat([mismatch])\n        };\n        // Clear, then log to console so user can copy/paste trace\n        console.warn('POLITICARD DIAGNOSTIC: hand mismatch detected', mismatch);\n      }\n    } catch (e) {\n      // swallow diagnostic errors to avoid breaking rendering\n      console.error('Diagnostic error', e);\n    }\n  }, [gameState.hands]);\n  const draw = useCallback(() => {\n    var _LAYOUT$background, _LAYOUT$background2;\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n\n    // Detect influence increases and start animations\n    try {\n      const currSnapshot = {};\n      const collect = c => {\n        var _c$uid2, _c$influence;\n        if (!c) return;\n        if (c.kind !== 'pol') return;\n        const uid = (_c$uid2 = c.uid) !== null && _c$uid2 !== void 0 ? _c$uid2 : c.id != null ? String(c.id) : null;\n        if (!uid) return;\n        currSnapshot[uid] = (_c$influence = c.influence) !== null && _c$influence !== void 0 ? _c$influence : 0;\n      };\n      // board rows\n      (gameState.board[1].aussen || []).forEach(collect);\n      (gameState.board[2].aussen || []).forEach(collect);\n      (gameState.board[1].innen || []).forEach(collect);\n      (gameState.board[2].innen || []).forEach(collect);\n      // permanent slots\n      collect(gameState.permanentSlots[1].government);\n      collect(gameState.permanentSlots[2].government);\n      collect(gameState.permanentSlots[1].public);\n      collect(gameState.permanentSlots[2].public);\n      const now = performance.now();\n      Object.keys(currSnapshot).forEach(uid => {\n        var _currSnapshot$uid, _prevInfluencesRef$cu;\n        const curr = (_currSnapshot$uid = currSnapshot[uid]) !== null && _currSnapshot$uid !== void 0 ? _currSnapshot$uid : 0;\n        const prev = (_prevInfluencesRef$cu = prevInfluencesRef.current[uid]) !== null && _prevInfluencesRef$cu !== void 0 ? _prevInfluencesRef$cu : curr;\n        if (curr > prev) {\n          const delta = curr - prev;\n          const list = influenceAnimRef.current.get(uid) || [];\n          list.push({\n            start: now,\n            duration: 900,\n            amount: delta\n          });\n          influenceAnimRef.current.set(uid, list);\n        }\n        prevInfluencesRef.current[uid] = curr;\n      });\n    } catch (e) {\n      // ignore\n    }\n\n    // Clear canvas\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    // Clear click zones\n    clickZonesRef.current = [];\n\n    // Background: prefer PNG if configured\n    if ((_LAYOUT$background = LAYOUT.background) !== null && _LAYOUT$background !== void 0 && _LAYOUT$background.enabled && (_LAYOUT$background2 = LAYOUT.background) !== null && _LAYOUT$background2 !== void 0 && _LAYOUT$background2.src) {\n      if (backgroundImageRef.current) {\n        ctx.drawImage(backgroundImageRef.current, 0, 0, canvas.width, canvas.height);\n      } else {\n        ctx.fillStyle = '#0c131b';\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\n      }\n    } else {\n      ctx.fillStyle = '#0c131b';\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n    }\n\n    // Apply UI transform (new signature)\n    const {\n      scale,\n      offsetX,\n      offsetY\n    } = getUiTransform(canvas.width, canvas.height);\n    ctx.save();\n    ctx.translate(offsetX, offsetY);\n    ctx.scale(scale, scale);\n\n    // Draw opponent board (top rows) - clickable im Dev Mode\n    // Draw opponent board using new layout system\n    const opponentPublicRects = getPublicRects('opponent');\n    const opponentGovRects = getGovernmentRects('opponent');\n\n    // Draw opponent public slots\n    opponentPublicRects.forEach((s, idx) => {\n      const card = gameState.board[2].innen[idx];\n      if (card) {\n        const clickZone = drawCardAt(ctx, card, s.x, s.y, s.w, false, false, 2);\n        // Register hover/click zone for opponent card (always) - include card for hover info\n        clickZonesRef.current.push({\n          ...clickZone,\n          data: {\n            type: 'board_card',\n            player: 2,\n            lane: 'innen',\n            index: idx,\n            card\n          }\n        });\n      } else {\n        // draw placeholder symbol for empty public slot\n        const img = slotSymbolImgsRef.current.get('public');\n        drawSlotIconWithPulse(ctx, img, s.x, s.y, s.w, s.h, 0.4);\n        // Register empty slot click zone in dev mode\n        if (devMode) {\n          clickZonesRef.current.push({\n            x: s.x,\n            y: s.y,\n            w: s.w,\n            h: s.h,\n            data: {\n              type: 'row_slot',\n              player: 2,\n              lane: 'innen',\n              index: idx\n            }\n          });\n        }\n      }\n    });\n\n    // Draw opponent government slots\n    opponentGovRects.forEach((s, idx) => {\n      const card = gameState.board[2].aussen[idx];\n      const corrActive = !!(gameState.pendingAbilitySelect && gameState.pendingAbilitySelect.type === 'corruption_steal');\n      if (card) {\n        const clickZone = drawCardAt(ctx, card, s.x, s.y, s.w, false, false, 2);\n        // Register hover/click zone for opponent card (always) - include card for hover info\n        clickZonesRef.current.push({\n          ...clickZone,\n          data: {\n            type: 'board_card',\n            player: 2,\n            lane: 'aussen',\n            index: idx,\n            card\n          }\n        });\n        // When corruption target selection is active, register exact slot rectangle for click detection\n        if (corrActive) {\n          clickZonesRef.current.push({\n            x: s.x,\n            y: s.y,\n            w: s.w,\n            h: s.h,\n            data: {\n              type: 'board_card',\n              player: 2,\n              lane: 'aussen',\n              index: idx,\n              card\n            }\n          });\n        }\n      } else {\n        const img = slotSymbolImgsRef.current.get('government');\n        drawSlotIconWithPulse(ctx, img, s.x, s.y, s.w, s.h, 0.1);\n        // Register empty slot click zone only in dev mode\n        if (devMode) {\n          clickZonesRef.current.push({\n            x: s.x,\n            y: s.y,\n            w: s.w,\n            h: s.h,\n            data: {\n              type: 'row_slot',\n              player: 2,\n              lane: 'aussen',\n              index: idx\n            }\n          });\n        }\n      }\n    });\n\n    // Draw opponent permanent slots (show icons even when not current)\n    try {\n      const permGovZoneOpp = getZone('slot.permanent.government.opponent');\n      if (permGovZoneOpp) {\n        const card = gameState.permanentSlots[2].government;\n        const [ox, oy, ow, oh] = permGovZoneOpp.rectPx;\n        if (card) {\n          drawSingleSlot(ctx, 'slot.permanent.government.opponent', card, 'permanent_government', 2);\n        } else {\n          const img = slotSymbolImgsRef.current.get('dauerhaft');\n          drawSlotIconWithPulse(ctx, img, ox, oy, ow, oh, 0.3);\n          // Register empty slot click zone in dev mode\n          if (devMode) {\n            clickZonesRef.current.push({\n              x: ox,\n              y: oy,\n              w: ow,\n              h: oh,\n              data: {\n                type: 'empty_slot',\n                slot: 'permanent_government',\n                player: 2\n              }\n            });\n          }\n        }\n      }\n    } catch (e) {}\n    try {\n      const permPubZoneOpp = getZone('slot.permanent.public.opponent');\n      if (permPubZoneOpp) {\n        const card = gameState.permanentSlots[2].public;\n        const [ox2, oy2, ow2, oh2] = permPubZoneOpp.rectPx;\n        if (card) {\n          drawSingleSlot(ctx, 'slot.permanent.public.opponent', card, 'permanent_public', 2);\n        } else {\n          const img = slotSymbolImgsRef.current.get('dauerhaft');\n          drawSlotIconWithPulse(ctx, img, ox2, oy2, ow2, oh2, 0.7);\n          // Register empty slot click zone in dev mode\n          if (devMode) {\n            clickZonesRef.current.push({\n              x: ox2,\n              y: oy2,\n              w: ow2,\n              h: oh2,\n              data: {\n                type: 'empty_slot',\n                slot: 'permanent_public',\n                player: 2\n              }\n            });\n          }\n        }\n      }\n    } catch (e) {}\n\n    // Draw player board (middle rows)\n    // Draw player board using new layout system\n    const playerPublicRects = getPublicRects('player');\n    const playerGovRects = getGovernmentRects('player');\n\n    // Draw player public slots\n    playerPublicRects.forEach((s, idx) => {\n      const card = gameState.board[1].innen[idx];\n      if (card) {\n        const clickZone = drawCardAt(ctx, card, s.x, s.y, s.w, false, false, 1);\n        // register card zone including card so hover panel can show details\n        clickZonesRef.current.push({\n          ...clickZone,\n          data: {\n            type: 'board_card',\n            player: 1,\n            lane: 'innen',\n            index: idx,\n            card\n          }\n        });\n      } else {\n        // Empty slot click zone and draw public symbol\n        // Draw unified pulsing icon for empty public slot\n        const img = slotSymbolImgsRef.current.get('public');\n        drawSlotIconWithPulse(ctx, img, s.x, s.y, s.w, s.h, 0.4);\n        clickZonesRef.current.push({\n          x: s.x,\n          y: s.y,\n          w: s.w,\n          h: s.h,\n          data: {\n            type: 'row_slot',\n            player: 1,\n            lane: 'innen',\n            index: idx\n          }\n        });\n      }\n    });\n\n    // Draw player government slots\n    playerGovRects.forEach((s, idx) => {\n      const card = gameState.board[1].aussen[idx];\n      if (card) {\n        const clickZone = drawCardAt(ctx, card, s.x, s.y, s.w, false, false, 1);\n        clickZonesRef.current.push({\n          ...clickZone,\n          data: {\n            type: 'board_card',\n            player: 1,\n            lane: 'aussen',\n            index: idx,\n            card\n          }\n        });\n      } else {\n        // Empty slot click zone and draw government symbol\n        const img = slotSymbolImgsRef.current.get('government');\n        drawSlotIconWithPulse(ctx, img, s.x, s.y, s.w, s.h, 0.1);\n        clickZonesRef.current.push({\n          x: s.x,\n          y: s.y,\n          w: s.w,\n          h: s.h,\n          data: {\n            type: 'row_slot',\n            player: 1,\n            lane: 'aussen',\n            index: idx\n          }\n        });\n      }\n    });\n\n    // --- GOV PLACEMENT SPRITESHEET OVERLAY (frame-based) ---\n    try {\n      const sprites = govSpritesRef.current;\n      const gif = govGifRef.current;\n      const anims = visualEffects && visualEffects.playAnimsRef && visualEffects.playAnimsRef.current || [];\n\n      // Start sprite animation when a playAnim for a gov-card is active and maps to a slot\n      const now = performance.now();\n      // Prefer mutating the source anim array so entries are consumed and don't retrigger repeatedly\n      const animsArr = visualEffects && visualEffects.playAnimsRef && visualEffects.playAnimsRef.current || (window.__pc_play_anims = window.__pc_play_anims || []);\n\n      // Iterate backwards and consume processed animations to ensure one-shot playback\n      for (let i = animsArr.length - 1; i >= 0; i--) {\n        var _zone$data$player, _zone$data$lane, _zone$data$index;\n        const a = animsArr[i];\n        try {\n          // handle specialized 'hit:' playAnims which indicate target-hit sprites by slot key\n          if (typeof a.uid === 'string' && a.uid.indexOf('hit:') === 0) {\n            const inner = a.uid.slice(4); // '1.aussen.0'\n            if (!hitSpriteStateRef.current[inner]) {\n              hitSpriteStateRef.current[inner] = {\n                started: now,\n                frameCount: 25,\n                frameDuration: 30\n              };\n              animsArr.splice(i, 1);\n            }\n            continue;\n          }\n        } catch (e) {}\n\n        // find the zone/slot for this uid\n        const zone = clickZonesRef.current.find(z => {\n          var _z$data$card$uid2;\n          return z.data && z.data.card && ((_z$data$card$uid2 = z.data.card.uid) !== null && _z$data$card$uid2 !== void 0 ? _z$data$card$uid2 : String(z.data.card.id)) === a.uid;\n        });\n        if (!zone) continue;\n\n        // determine if gov slot or instant\n        let isGov = false;\n        let isInstant = false;\n        try {\n          const dt = zone.data || {};\n          if (dt.type === 'row_slot' && dt.lane === 'aussen') isGov = true;\n          if (dt.type === 'board_card' && dt.lane === 'aussen') isGov = true;\n          if (dt.slot && typeof dt.slot === 'string' && dt.slot.includes('government')) isGov = true;\n          if (dt.type === 'activate_instant' || dt.slot && typeof dt.slot === 'string' && dt.slot.includes('instant')) isInstant = true;\n        } catch (e) {}\n        if (!isGov && !isInstant) continue;\n        const player = (_zone$data$player = zone.data.player) !== null && _zone$data$player !== void 0 ? _zone$data$player : 1;\n        const lane = (_zone$data$lane = zone.data.lane) !== null && _zone$data$lane !== void 0 ? _zone$data$lane : 'aussen';\n        const idx = (_zone$data$index = zone.data.index) !== null && _zone$data$index !== void 0 ? _zone$data$index : 0;\n        const key = `${player}.${lane}.${idx}`;\n\n        // initialize sprite state if not present; consume the anim entry only when we actually start playback\n        let startedThis = false;\n        if (isGov) {\n          if (!govSpriteStateRef.current[key]) {\n            govSpriteStateRef.current[key] = {\n              started: now,\n              frameCount: 14,\n              frameDuration: 40\n            }; // 14 frames @ ~40ms -> ~560ms\n            startedThis = true;\n          }\n        }\n        if (isInstant) {\n          const instKey = `${player}.instant.${idx}`;\n          if (!instantSpriteStateRef.current[instKey]) {\n            instantSpriteStateRef.current[instKey] = {\n              started: now,\n              frameCount: 14,\n              frameDuration: 40\n            };\n            startedThis = true;\n          }\n        }\n        if (startedThis) {\n          animsArr.splice(i, 1);\n        }\n      }\n\n      // draw running sprite animations per gov slot\n      Object.keys(govSpriteStateRef.current).forEach(k => {\n        const st = govSpriteStateRef.current[k];\n        const elapsed = now - st.started;\n        const total = st.frameCount * st.frameDuration;\n        if (elapsed > total) {\n          // animation finished; remove state\n          delete govSpriteStateRef.current[k];\n          return;\n        }\n        const frame = Math.floor(elapsed / st.frameDuration);\n\n        // parse key -> player.lane.index\n        const parts = k.split('.');\n        const player = Number(parts[0]) || 1;\n        const lane = parts[1] || 'aussen';\n        const index = Number(parts[2] || 0);\n\n        // compute slot rect for this gov slot (player or opponent board)\n        const rect = player === 1 ? playerGovRects[index] : opponentGovRects[index];\n        if (!rect) return;\n\n        // spritesheet: frame N located at x = N*256, y = 0\n        if (sprites && sprites.complete) {\n          const sx = frame * 256;\n          const sy = 0;\n          const sw = 256;\n          const sh = 256;\n          // draw exactly matching the slot rect size to avoid scaling mismatches\n          const dx = rect.x;\n          const dy = rect.y;\n          ctx.drawImage(sprites, sx, sy, sw, sh, dx, dy, rect.w, rect.h);\n        } else if (gif && gif.complete) {\n          // fallback to static gif if spritesheet missing\n          ctx.drawImage(gif, rect.x, rect.y, rect.w, rect.h);\n        }\n      });\n      // --- INSTANT INITIATIVE SPRITESHEET (draw on instant slot) ---\n      try {\n        const spritesI = instantSpritesRef.current;\n        const nowI = performance.now();\n        Object.keys(instantSpriteStateRef.current).forEach(k => {\n          const st = instantSpriteStateRef.current[k];\n          const elapsed = nowI - st.started;\n          const total = st.frameCount * st.frameDuration;\n          if (elapsed > total) {\n            delete instantSpriteStateRef.current[k];\n            return;\n          }\n          const frame = Math.floor(elapsed / st.frameDuration);\n          const parts = k.split('.');\n          const player = Number(parts[0]) || 1;\n          const index = Number(parts[2] || 0);\n          const rects = getSofortRect(player ? 'player' : 'opponent');\n          // getSofortRect returns one rect; map by player/context â€” fallback to zone\n          const instantRect = getZone('slot.instant.player').rectPx;\n          const [ix, iy, iw, ih] = instantRect;\n          if (spritesI && spritesI.complete) {\n            const sx = frame * 256;\n            const sy = 0;\n            const sw = 256;\n            const sh = 256;\n            ctx.drawImage(spritesI, sx, sy, sw, sh, ix, iy, iw, ih);\n          }\n        });\n      } catch (e) {}\n      // --- HIT / TARGET SPRITESHEET (draw as overlay on targeted slot) ---\n      try {\n        const spritesH = hitSpritesRef.current;\n        const nowH = performance.now();\n        Object.keys(hitSpriteStateRef.current).forEach(k => {\n          const st = hitSpriteStateRef.current[k];\n          const elapsed = nowH - st.started;\n          const total = st.frameCount * st.frameDuration;\n          if (elapsed > total) {\n            delete hitSpriteStateRef.current[k];\n            return;\n          }\n          const frame = Math.floor(elapsed / st.frameDuration);\n\n          // parse key -> player.lane.index\n          const parts = k.split('.');\n          const player = Number(parts[0]) || 1;\n          const lane = parts[1] || 'aussen';\n          const index = Number(parts[2] || 0);\n\n          // compute slot rect for this gov slot (attempt gov then public)\n          const rect = (player === 1 ? playerGovRects : opponentGovRects)[index] || (player === 1 ? playerPublicRects : opponentPublicRects)[index];\n          if (!rect) return;\n          if (spritesH && spritesH.complete) {\n            const sx = frame * 256;\n            const sy = 0;\n            const sw = 256;\n            const sh = 256;\n            const dx = rect.x;\n            const dy = rect.y;\n            ctx.drawImage(spritesH, sx, sy, sw, sh, dx, dy, rect.w, rect.h);\n          }\n        });\n      } catch (e) {}\n    } catch (e) {}\n\n    // Draw player permanent slots (draw symbols if empty)\n    // permanent government\n    const permGovZone = getZone('slot.permanent.government.player');\n    if (permGovZone) {\n      const card = gameState.permanentSlots[1].government;\n      const [x, y, w, h] = permGovZone.rectPx;\n      if (card) {\n        drawSingleSlot(ctx, 'slot.permanent.government.player', card, 'permanent_government', 1);\n      } else {\n        // Draw all slot icons using unified helper (so 'dauerhaft' used visually for empty permanent gov slot)\n        const img = slotSymbolImgsRef.current.get('dauerhaft');\n        drawSlotIconWithPulse(ctx, img, x, y, w, h, 0.2);\n      }\n    }\n    // permanent public\n    const permPubZone = getZone('slot.permanent.public.player');\n    if (permPubZone) {\n      const card = gameState.permanentSlots[1].public;\n      const [x2, y2, w2, h2] = permPubZone.rectPx;\n      if (card) {\n        drawSingleSlot(ctx, 'slot.permanent.public.player', card, 'permanent_public', 1);\n      } else {\n        // Draw all slot icons using unified helper (so 'dauerhaft' used visually for empty permanent public slot)\n        const img = slotSymbolImgsRef.current.get('dauerhaft');\n        drawSlotIconWithPulse(ctx, img, x2, y2, w2, h2, 0.9);\n      }\n    }\n\n    // Draw instant slots (both players) and placeholder if empty\n    const instantPlayerZone = getZone('slot.instant.player');\n    if (instantPlayerZone) {\n      const card = gameState.board[1].sofort[0];\n      const [x, y, w, h] = instantPlayerZone.rectPx;\n      if (card) drawSingleSlot(ctx, 'slot.instant.player', card, 'instant', 1);else {\n        // Use unified icon draw helper for instant slot\n        const img = slotSymbolImgsRef.current.get('sofort');\n        drawSlotIconWithPulse(ctx, img, x, y, w, h, 0.0);\n      }\n    }\n\n    // Draw interventions strip (player)\n    // We draw symbol if empty\n    const interventionsZone = getZone('interventions.player');\n    if (interventionsZone) {\n      const [zx, zy, zw, zh] = interventionsZone.rectPx;\n      const card = gameState.traps[1] && gameState.traps[1][0];\n      if (card) drawInterventionsP1(ctx);else {\n        const img = slotSymbolImgsRef.current.get('intervention');\n        drawSlotIconWithPulse(ctx, img, zx, zy, zw, zh, 0.6);\n      }\n    }\n\n    // Draw interventions strip (opponent) - nur im Dev Mode\n    if (devMode) {\n      drawInterventionsP2(ctx);\n    }\n\n    // Draw hand (P1)\n    drawHandP1(ctx);\n\n    // ðŸ”§ DEV MODE: Draw hand (P2) - nur im Dev Mode\n    if (devMode) {\n      drawHandP2(ctx);\n    }\n\n    // Draw info panels\n    drawInfoPanels(ctx);\n\n    // Draw corruption mode indicator\n    const corrActive = !!(gameState.pendingAbilitySelect && gameState.pendingAbilitySelect.type === 'corruption_steal');\n    if (corrActive) {\n      ctx.save();\n      ctx.fillStyle = 'rgba(255, 0, 0, 0.8)';\n      ctx.font = 'bold 32px sans-serif';\n      ctx.textAlign = 'center';\n      ctx.fillText('ðŸ”¥ CORRUPTION TARGET SELECTION ACTIVE ðŸ”¥', 960, 100);\n      ctx.fillStyle = 'rgba(255, 255, 0, 0.9)';\n      ctx.font = 'bold 24px sans-serif';\n      ctx.fillText('Click on opponent government card to target', 960, 140);\n      ctx.restore();\n    }\n\n    // --- VISUAL EFFECTS: Particle bursts, card pop scale, initiative ripple & AP pop ---\n    try {\n      const now = performance.now();\n      const {\n        particlesRef,\n        popsRef,\n        ripplesRef,\n        apLabelsRef,\n        reducedMotion\n      } = visualEffects || {};\n      const parts = particlesRef.current || [];\n      if (!reducedMotion) {\n        for (let i = parts.length - 1; i >= 0; i--) {\n          const p = parts[i];\n          const age = now - p.start;\n          if (age > p.life) {\n            parts.splice(i, 1);\n            continue;\n          }\n          p.vy += p.gravity || 0.09;\n          p.x += p.vx;\n          p.y += p.vy;\n          const t = 1 - age / p.life;\n          ctx.save();\n          ctx.globalAlpha = Math.max(0, Math.min(1, t));\n          ctx.fillStyle = p.color || '#ffd166';\n          ctx.beginPath();\n          ctx.arc(p.x, p.y, (p.size || 4) * t, 0, Math.PI * 2);\n          ctx.fill();\n          ctx.restore();\n        }\n        particlesRef.current = parts;\n        const pops = popsRef.current || [];\n        pops.forEach(pop => {\n          const p = Math.min(1, Math.max(0, (now - pop.started) / pop.duration));\n          const eased = 1 + 0.12 * (1 - Math.pow(1 - p, 3));\n          const zone = clickZonesRef.current.find(z => {\n            var _z$data$card$uid3;\n            return z.data && z.data.card && ((_z$data$card$uid3 = z.data.card.uid) !== null && _z$data$card$uid3 !== void 0 ? _z$data$card$uid3 : String(z.data.card.id)) === pop.uid;\n          });\n          if (!zone) return;\n          ctx.save();\n          ctx.translate(zone.x + zone.w / 2, zone.y + zone.h / 2);\n          ctx.scale(eased, eased);\n          ctx.globalAlpha = 0.12 * (1 - p);\n          ctx.fillStyle = '#ffffff';\n          ctx.fillRect(-zone.w / 2, -zone.h / 2, zone.w, zone.h);\n          ctx.restore();\n        });\n        const ripples = ripplesRef.current || [];\n        for (let i = ripples.length - 1; i >= 0; i--) {\n          const r = ripples[i];\n          const p = Math.min(1, Math.max(0, (now - r.started) / r.duration));\n          if (p >= 1) {\n            ripples.splice(i, 1);\n            continue;\n          }\n          const radius = r.radius * (0.8 + 1.8 * p);\n          ctx.save();\n          const g = ctx.createRadialGradient(r.cx, r.cy, radius * 0.1, r.cx, r.cy, radius);\n          g.addColorStop(0, `rgba(255,255,255,${0.12 * (1 - p)})`);\n          g.addColorStop(1, `rgba(255,255,255,0)`);\n          ctx.fillStyle = g;\n          ctx.beginPath();\n          ctx.arc(r.cx, r.cy, radius, 0, Math.PI * 2);\n          ctx.fill();\n          ctx.restore();\n          if (r.showAp && !r._apSpawned) {\n            apLabelsRef.current = apLabelsRef.current || [];\n            apLabelsRef.current.push({\n              x: r.apX,\n              y: r.apY,\n              started: now,\n              duration: 800,\n              text: '+1'\n            });\n            r._apSpawned = true;\n          }\n        }\n        ripplesRef.current = ripples;\n        const apl = apLabelsRef.current || [];\n        for (let i = apl.length - 1; i >= 0; i--) {\n          const l = apl[i];\n          const p = Math.min(1, Math.max(0, (now - l.started) / l.duration));\n          if (p >= 1) {\n            apl.splice(i, 1);\n            continue;\n          }\n          ctx.save();\n          ctx.globalAlpha = 1 - p;\n          ctx.fillStyle = '#ffdd57';\n          ctx.font = 'bold 22px sans-serif';\n          ctx.textAlign = 'center';\n          ctx.fillText(l.text, l.x, l.y - 20 * p);\n          ctx.restore();\n        }\n        apLabelsRef.current = apl;\n      } else {\n        const apl = apLabelsRef.current || [];\n        for (let i = apl.length - 1; i >= 0; i--) {\n          const l = apl[i];\n          const p = Math.min(1, Math.max(0, (now - l.started) / l.duration));\n          if (p >= 1) {\n            apl.splice(i, 1);\n            continue;\n          }\n          ctx.save();\n          ctx.globalAlpha = 1 - p;\n          ctx.fillStyle = '#ffdd57';\n          ctx.font = 'bold 18px sans-serif';\n          ctx.textAlign = 'center';\n          ctx.fillText(l.text, l.x, l.y - 10 * p);\n          ctx.restore();\n        }\n        apLabelsRef.current = apl;\n      }\n    } catch (e) {}\n\n    // --- Overlay pass: draw influence pulse ring and +N labels on top of all cards ---\n    try {\n      const now = performance.now();\n      // iterate over stored anims\n      influenceAnimRef.current.forEach((anims, uid) => {\n        // find card position by scanning clickZones\n        const zone = clickZonesRef.current.find(z => {\n          var _z$data$card$uid4;\n          return z.data && (z.data.card && ((_z$data$card$uid4 = z.data.card.uid) !== null && _z$data$card$uid4 !== void 0 ? _z$data$card$uid4 : String(z.data.card.id)) === uid || z.data.card && z.data.card.uid === uid);\n        });\n        if (!zone) return;\n        const cx = zone.x + zone.w / 2;\n        const cy = zone.y + zone.h / 2;\n        // calculate aggregate pulse for this uid\n        let maxPulse = 0;\n        let totalAmount = 0;\n        const remaining = [];\n        anims.forEach(a => {\n          const p = Math.min(1, Math.max(0, (now - a.start) / a.duration));\n          const pulse = Math.pow(Math.max(0, 1 - p), 2);\n          if (pulse > maxPulse) maxPulse = pulse;\n          if (p < 1) {\n            remaining.push(a);\n            totalAmount += a.amount;\n          }\n        });\n\n        // update list\n        if (remaining.length > 0) influenceAnimRef.current.set(uid, remaining);else influenceAnimRef.current.delete(uid);\n        if (maxPulse > 0.001) {\n          // draw a soft ring to the right-bottom of influence number\n          const ringRadius = Math.max(8, zone.w * 0.08) * (1 + maxPulse * 0.6);\n          const ringX = zone.x + zone.w - 28; // near bottom-right where influence text lives\n          const ringY = zone.y + zone.h - 20;\n          ctx.save();\n          ctx.beginPath();\n          ctx.strokeStyle = `rgba(46, 204, 113, ${0.9 * maxPulse})`;\n          ctx.lineWidth = Math.max(2, Math.ceil(6 * maxPulse));\n          ctx.arc(ringX, ringY, ringRadius, 0, Math.PI * 2);\n          ctx.stroke();\n          ctx.restore();\n        }\n        if (totalAmount > 0) {\n          // floating +N to the right of influence number\n          const labelX = zone.x + zone.w - 12;\n          const labelY = zone.y + zone.h - 32 - Math.random() * 6; // slight jitter\n          ctx.save();\n          ctx.fillStyle = '#2ecc71';\n          ctx.font = 'bold 16px sans-serif';\n          ctx.textAlign = 'left';\n          ctx.textBaseline = 'middle';\n          ctx.fillText(`+${totalAmount}`, labelX, labelY);\n          ctx.restore();\n        }\n      });\n    } catch (e) {\n      // ignore overlay errors\n    }\n\n    // --- Outline pass: draw a subtle, slightly pulsing 257x257 square around 256x256 slots ---\n    try {\n      const now2 = performance.now();\n      clickZonesRef.current.forEach((z, i) => {\n        if (!z) return;\n        const w = z.w || 0;\n        const h = z.h || 0;\n        // only target 256x256 slot-sized zones (covers the icons)\n        if (Math.abs(w - 256) > 0.1 || Math.abs(h - 256) > 0.1) return;\n        const x = z.x;\n        const y = z.y;\n\n        // Color palette (rgb)\n        const rgbTeal = '20,184,166';\n        const rgbBurg = '127,29,29';\n        const rgbPurple = '139,92,246';\n        const rgbYellow = '250,204,21';\n        const rgbOrange = '251,146,60';\n\n        // Determine slot semantic\n        let slotType = 'default';\n        try {\n          const dt = z.data || {};\n          if (dt.slot && typeof dt.slot === 'string') {\n            if (dt.slot.includes('government')) slotType = 'government';else if (dt.slot.includes('public')) slotType = 'public';else if (dt.slot.includes('permanent')) slotType = 'permanent';else if (dt.slot.includes('instant')) slotType = 'instant';\n          }\n          if (dt.type === 'row_slot' && dt.lane === 'aussen') slotType = 'government';\n          if (dt.type === 'row_slot' && dt.lane === 'innen') slotType = 'public';\n          if (dt.type === 'trap_p1' || dt.type === 'trap_p2' || dt.card && dt.card.kind === 'trap') slotType = 'intervention';\n          if (dt.type === 'activate_instant' || dt.slot === 'instant') slotType = 'instant';\n          if (dt.slot === 'permanent_government' || dt.slot === 'permanent_public' || dt.slot === 'permanent') slotType = 'permanent';\n        } catch (e) {}\n        const pulse = 0.5 + 0.5 * Math.sin(now2 / 350 + i);\n        const alpha = 0.06 + 0.12 * pulse; // subtle alpha\n        const lw = 1 + 2 * pulse; // line width between 1 and 3\n\n        // Create gradient based on slot type\n        let grad = null;\n        try {\n          grad = ctx.createLinearGradient(x, y, x + w, y + h);\n          if (slotType === 'government') {\n            grad.addColorStop(0, `rgba(${rgbTeal},1)`);\n            grad.addColorStop(1, `rgba(${rgbBurg},1)`);\n          } else if (slotType === 'public') {\n            grad.addColorStop(0, `rgba(${rgbBurg},1)`);\n            grad.addColorStop(1, `rgba(${rgbTeal},1)`);\n          } else if (slotType === 'permanent') {\n            grad.addColorStop(0, `rgba(${rgbPurple},1)`);\n            grad.addColorStop(1, `rgba(${rgbPurple},1)`);\n          } else if (slotType === 'instant') {\n            grad.addColorStop(0, `rgba(${rgbYellow},1)`);\n            grad.addColorStop(1, `rgba(${rgbYellow},1)`);\n          } else if (slotType === 'intervention') {\n            grad.addColorStop(0, `rgba(${rgbOrange},1)`);\n            grad.addColorStop(1, `rgba(${rgbOrange},1)`);\n          } else {\n            grad.addColorStop(0, `rgba(255,255,255,1)`);\n            grad.addColorStop(1, `rgba(255,255,255,1)`);\n          }\n        } catch (e) {\n          grad = null;\n        }\n        ctx.save();\n        if (grad) ctx.strokeStyle = grad;else ctx.strokeStyle = `rgba(255,255,255,${alpha.toFixed(3)})`;\n        ctx.globalAlpha = alpha;\n        ctx.lineWidth = lw;\n        // draw 257x257 centered so that it encloses the 256 slot\n        ctx.strokeRect(x - 0.5, y - 0.5, w + 1, h + 1);\n        ctx.restore();\n      });\n    } catch (e) {\n      // ignore outline errors\n    }\n    ctx.restore();\n\n    // expose zones for debug snapshot\n    window.__politicardDebug = {\n      uiTransform: getUiTransform(canvas.width, canvas.height),\n      canvasSize: {\n        width: canvas.width,\n        height: canvas.height\n      },\n      zones: LAYOUT.zones,\n      clickZones: clickZonesRef.current.slice(0, 1000)\n    };\n\n    // Build canonical slotPositions map for animations/debugging\n    try {\n      const map = {};\n      clickZonesRef.current.forEach(z => {\n        const d = z.data || {};\n        // support row_slot, board_card, slot_card shapes\n        if (d.type === 'row_slot' || d.type === 'board_card' || d.type === 'slot_card' || d.type === 'hand_p1' || d.type === 'hand_p2') {\n          var _d$player, _d$lane;\n          const player = (_d$player = d.player) !== null && _d$player !== void 0 ? _d$player : d.type === 'hand_p2' ? 2 : 1;\n          const lane = (_d$lane = d.lane) !== null && _d$lane !== void 0 ? _d$lane : typeof d.slot === 'string' ? d.slot : d.type === 'hand_p2' ? 'hand' : 'unknown';\n          let index;\n          if (d.index != null) {\n            index = d.index;\n          } else if (d.card) {\n            // prefer explicit slotIndex, fallback to card.index, otherwise 0\n            index = d.card.slotIndex != null ? d.card.slotIndex : d.card.index != null ? d.card.index : 0;\n          } else {\n            index = 0;\n          }\n          const key = `${player}.${lane}.${index}`;\n          map[key] = {\n            x: z.x,\n            y: z.y,\n            w: z.w,\n            h: z.h,\n            cx: z.x + z.w / 2,\n            cy: z.y + z.h / 2\n          };\n        }\n      });\n      slotPositionsRef.current = map;\n      window.__politicardDebug = {\n        ...window.__politicardDebug,\n        slotPositions: slotPositionsRef.current\n      };\n    } catch (e) {\n      // don't let debug mapping break rendering\n    }\n\n    // Run diagnostics after canvas is fully rendered\n    runDiagnostics();\n  }, [drawLane, drawHandP1, drawHandP2, drawInterventionsP1, drawInterventionsP2, drawPermanentSlotsP1, drawPermanentSlotsP2, drawInstantSlots, drawInfoPanels, devMode, runDiagnostics]);\n  const DRAW_LAYOUT_OVERLAY = false; // force off per new layout system\n\n  // Load slot symbol images once\n  useEffect(() => {\n    const load = (key, src) => {\n      const img = new Image();\n      img.onload = () => {\n        slotSymbolImgsRef.current.set(key, img);\n      };\n      img.onerror = () => {\n        console.warn('Failed to load slot icon', src);\n      };\n      img.src = src;\n    };\n    // load all slot icons\n    load('public', publicSymbolUrl);\n    load('sofort', sofortSymbolUrl);\n    load('dauerhaft', dauerhaftSymbolUrl);\n    load('government', governmentSymbolUrl);\n    load('intervention', interventionSymbolUrl);\n\n    // load test GIF for gov overlay\n    try {\n      const img = new Image();\n      img.onload = () => {\n        govGifRef.current = img;\n      };\n      img.onerror = () => {\n        console.warn('Failed to load gov overlay gif', govPlaceGifUrl);\n      };\n      img.src = govPlaceGifUrl;\n    } catch (e) {}\n    // load spritesheet for placement animation\n    try {\n      const s = new Image();\n      s.onload = () => {\n        govSpritesRef.current = s;\n      };\n      s.onerror = () => {\n        console.warn('Failed to load gov spritesheet', govPlaceSpritesheetUrl);\n      };\n      s.src = govPlaceSpritesheetUrl;\n    } catch (e) {}\n    // load spritesheet for instant initiative activation\n    try {\n      const si = new Image();\n      si.onload = () => {\n        instantSpritesRef.current = si;\n      };\n      si.onerror = () => {\n        console.warn('Failed to load instant spritesheet', instantSpritesheetUrl);\n      };\n      si.src = instantSpritesheetUrl;\n    } catch (e) {}\n\n    // load spritesheet for hit/target animation (25 frames)\n    try {\n      const h = new Image();\n      h.onload = () => {\n        hitSpritesRef.current = h;\n      };\n      h.onerror = () => {\n        console.warn('Failed to load hit spritesheet', hitSpritesheetUrl);\n      };\n      h.src = hitSpritesheetUrl;\n    } catch (e) {}\n\n    // ensure first draw\n    requestAnimationFrame(draw);\n  }, [draw]);\n\n  // Expose debug trigger to manually start gov sprite animation by slot-key or uid\n  useEffect(() => {\n    window.__pc_triggerGovAnim = id => {\n      try {\n        var _zone$data$player2, _zone$data$lane2, _zone$data$index2;\n        const now = performance.now();\n        // if id is slot key like '1.aussen.2'\n        if (typeof id === 'string' && id.indexOf('.') >= 0) {\n          govSpriteStateRef.current[id] = {\n            started: now,\n            frameCount: 14,\n            frameDuration: 40\n          };\n          return;\n        }\n\n        // otherwise try to resolve as uid/id to a clickZone\n        const uid = id;\n        const zone = clickZonesRef.current.find(z => {\n          var _z$data$card$uid5;\n          return z.data && z.data.card && (((_z$data$card$uid5 = z.data.card.uid) !== null && _z$data$card$uid5 !== void 0 ? _z$data$card$uid5 : String(z.data.card.id)) === uid || z.data.card.id === uid);\n        });\n        if (!zone) {\n          console.warn('pc_triggerGovAnim: no slot found for uid', uid);\n          return;\n        }\n        const player = (_zone$data$player2 = zone.data.player) !== null && _zone$data$player2 !== void 0 ? _zone$data$player2 : 1;\n        const lane = (_zone$data$lane2 = zone.data.lane) !== null && _zone$data$lane2 !== void 0 ? _zone$data$lane2 : zone.data.slot && typeof zone.data.slot === 'string' ? zone.data.slot : 'aussen';\n        const index = (_zone$data$index2 = zone.data.index) !== null && _zone$data$index2 !== void 0 ? _zone$data$index2 : 0;\n        const key = `${player}.${lane}.${index}`;\n        govSpriteStateRef.current[key] = {\n          started: now,\n          frameCount: 14,\n          frameDuration: 40\n        };\n      } catch (e) {\n        console.warn('pc_triggerGovAnim error', e);\n      }\n    };\n    // expose easy alias\n    try {\n      window.pc_triggerGovAnim = window.__pc_triggerGovAnim;\n    } catch (e) {}\n    return () => {\n      delete window.__pc_triggerGovAnim;\n    };\n  }, []);\n\n  // Expose debug trigger for hit animation (key: '1.aussen.0' or uid)\n  useEffect(() => {\n    window.__pc_triggerHitAnim = id => {\n      try {\n        var _zone$data$player3, _zone$data$lane3, _zone$data$index3;\n        const now = performance.now();\n        // if id is slot key like '1.aussen.2'\n        if (typeof id === 'string' && id.indexOf('.') >= 0) {\n          hitSpriteStateRef.current[id] = {\n            started: now,\n            frameCount: 25,\n            frameDuration: 30\n          };\n          return;\n        }\n\n        // otherwise try to resolve as uid/id to a clickZone\n        const uid = id;\n        const zone = clickZonesRef.current.find(z => {\n          var _z$data$card$uid6;\n          return z.data && z.data.card && (((_z$data$card$uid6 = z.data.card.uid) !== null && _z$data$card$uid6 !== void 0 ? _z$data$card$uid6 : String(z.data.card.id)) === uid || z.data.card.id === uid);\n        });\n        if (!zone) {\n          console.warn('pc_triggerHitAnim: no slot found for uid', uid);\n          return;\n        }\n        const player = (_zone$data$player3 = zone.data.player) !== null && _zone$data$player3 !== void 0 ? _zone$data$player3 : 1;\n        const lane = (_zone$data$lane3 = zone.data.lane) !== null && _zone$data$lane3 !== void 0 ? _zone$data$lane3 : zone.data.slot && typeof zone.data.slot === 'string' ? zone.data.slot : 'aussen';\n        const index = (_zone$data$index3 = zone.data.index) !== null && _zone$data$index3 !== void 0 ? _zone$data$index3 : 0;\n        const key = `${player}.${lane}.${index}`;\n        hitSpriteStateRef.current[key] = {\n          started: now,\n          frameCount: 25,\n          frameDuration: 30\n        };\n      } catch (e) {\n        console.warn('pc_triggerHitAnim error', e);\n      }\n    };\n    try {\n      window.pc_triggerHitAnim = window.__pc_triggerHitAnim;\n    } catch (e) {}\n    return () => {\n      delete window.__pc_triggerHitAnim;\n    };\n  }, []);\n\n  // Redraw when game state or selection changes\n  useEffect(() => {\n    requestAnimationFrame(draw);\n  }, [gameState, selectedHandIndex, draw]);\n\n  // Continuous render loop to keep canvas updated without relying on external state refs\n  useEffect(() => {\n    let frame;\n    const loop = () => {\n      draw();\n      frame = requestAnimationFrame(loop);\n    };\n    frame = requestAnimationFrame(loop);\n    return () => cancelAnimationFrame(frame);\n  }, [draw]);\n  const handleCardClick = useCallback(data => {\n    // Corruption target selection: intercept board card clicks for opponent government\n    if (corruptionSelectActorRef.current && data && data.type === 'board_card') {\n      try {\n        const actor = corruptionSelectActorRef.current;\n        const victim = actor === 1 ? 2 : 1;\n        if (data.player === victim && (data.lane === 'aussen' || data.lane === 'government')) {\n          var _data$card$uid, _data$card, _data$card2;\n          const uid = (_data$card$uid = (_data$card = data.card) === null || _data$card === void 0 ? void 0 : _data$card.uid) !== null && _data$card$uid !== void 0 ? _data$card$uid : (_data$card2 = data.card) === null || _data$card2 === void 0 ? void 0 : _data$card2.id;\n          if (uid != null) {\n            corruptionSelectActorRef.current = null;\n            try {\n              window.dispatchEvent(new CustomEvent('pc:corruption_target_selected', {\n                detail: {\n                  player: actor,\n                  targetUid: uid\n                }\n              }));\n            } catch (e) {}\n            return; // do not propagate\n          }\n        }\n      } catch (e) {}\n    }\n    // Hand-Klick\n    if (data.type === 'hand_p1') {\n      var _data$card$uid2, _data$card3, _data$card4, _gameState$hands;\n      const uid = (_data$card$uid2 = (_data$card3 = data.card) === null || _data$card3 === void 0 ? void 0 : _data$card3.uid) !== null && _data$card$uid2 !== void 0 ? _data$card$uid2 : (_data$card4 = data.card) === null || _data$card4 === void 0 ? void 0 : _data$card4.id;\n      const stateHand = ((_gameState$hands = gameState.hands) === null || _gameState$hands === void 0 ? void 0 : _gameState$hands[1]) || [];\n      const idxInState = stateHand.findIndex(c => {\n        var _c$uid3;\n        return ((_c$uid3 = c.uid) !== null && _c$uid3 !== void 0 ? _c$uid3 : c.id) === uid;\n      });\n      onCardClick(data);\n      return;\n    }\n\n    // Slot-Klick\n    if (data.type === 'row_slot') {\n      var _gameState$board$1$in, _gameState$board, _gameState$board$, _gameState$board$1$au, _gameState$board2, _gameState$board2$;\n      const lane = data.lane;\n      const cap = getLaneCapacity(lane);\n\n      // Hole aktuelle Row-LÃ¤nge aus gameState\n      const rowCards = lane === 'public' ? (_gameState$board$1$in = (_gameState$board = gameState.board) === null || _gameState$board === void 0 ? void 0 : (_gameState$board$ = _gameState$board[1]) === null || _gameState$board$ === void 0 ? void 0 : _gameState$board$.innen) !== null && _gameState$board$1$in !== void 0 ? _gameState$board$1$in : [] : (_gameState$board$1$au = (_gameState$board2 = gameState.board) === null || _gameState$board2 === void 0 ? void 0 : (_gameState$board2$ = _gameState$board2[1]) === null || _gameState$board2$ === void 0 ? void 0 : _gameState$board2$.aussen) !== null && _gameState$board$1$au !== void 0 ? _gameState$board$1$au : [];\n      if (rowCards.length >= cap) {\n        // Optional: UI Feedback\n        console.warn(`Row ${lane} is full (${rowCards.length}/${cap})`);\n        return;\n      }\n      onCardClick(data);\n      return;\n    }\n\n    // Andere Klicks (empty_slot, board_card, etc.)\n    onCardClick(data);\n  }, [gameState, onCardClick]);\n  const handleClick = useCallback(e => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const rect = canvas.getBoundingClientRect();\n    const {\n      scale,\n      offsetX,\n      offsetY\n    } = getUiTransform(canvas.width, canvas.height);\n    const mx = (e.clientX - rect.left - offsetX) / scale;\n    const my = (e.clientY - rect.top - offsetY) / scale;\n    const hit = clickZonesRef.current.find(z => mx >= z.x && mx <= z.x + z.w && my >= z.y && my <= z.y + z.h);\n    if (hit) {\n      console.debug('[CanvasClick] mx,my,hit:', mx, my, hit.data);\n      try {\n        // If user clicked a drawn card in an instant slot, normalize to activate_instant\n        const d = hit.data || {};\n        if (d.type === 'slot_card' && d.slot === 'instant') {\n          handleCardClick({\n            type: 'activate_instant',\n            player: d.player || 1,\n            card: d.card\n          });\n          return;\n        }\n        // Fallback: if there's an explicit activate_instant zone, pass through\n        if (d.type === 'activate_instant') {\n          handleCardClick(d);\n          return;\n        }\n      } catch (err) {}\n      handleCardClickInternal(hit.data);\n    }\n  }, [handleCardClick]);\n  const handleMouseMove = useCallback(e => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const rect = canvas.getBoundingClientRect();\n    const {\n      scale,\n      offsetX,\n      offsetY\n    } = getUiTransform(canvas.width, canvas.height);\n    const mx = (e.clientX - rect.left - offsetX) / scale;\n    const my = (e.clientY - rect.top - offsetY) / scale;\n    const hit = clickZonesRef.current.find(z => mx >= z.x && mx <= z.x + z.w && my >= z.y && my <= z.y + z.h);\n    if (hit) {\n      var _hit$data$card;\n      console.log('[hover]', hit.data.type, (_hit$data$card = hit.data.card) === null || _hit$data$card === void 0 ? void 0 : _hit$data$card.name);\n      onCardHover({\n        ...hit.data,\n        x: e.clientX,\n        y: e.clientY\n      });\n    } else {\n      onCardHover(null);\n    }\n  }, [onCardHover]);\n  const handleWheel = useCallback(e => {\n    // only enable when player1 has more slots than visible\n    const handLen = gameState.hands && gameState.hands[1] ? gameState.hands[1].length : 0;\n    const zone = getZone('hand.player');\n    if (!zone) return;\n    if (handLen <= 5) return; // nothing to scroll\n\n    // Prevent page scrolling when over canvas\n    e.preventDefault();\n\n    // accumulate target offset (invert so wheel down moves cards up)\n    // Each wheel step moves by 48px per delta unit\n    const delta = Math.sign(e.deltaY) * 48;\n    // compute slot height more robustly\n    const slots = computeSlotRects(zone);\n    const slotH = slots && slots.length > 0 ? slots[0].h : zone.rectPx[3] / 5;\n    const visible = 5;\n    const maxOffset = -(Math.max(0, handLen - visible) * slotH);\n    handScrollTargetRef.current = Math.max(Math.min(handScrollTargetRef.current - delta, 0), maxOffset);\n  }, [gameState.hands]);\n  const handleTouchStart = useCallback(e => {\n    if (!e.touches || e.touches.length === 0) return;\n    const handLen = gameState.hands && gameState.hands[1] ? gameState.hands[1].length : 0;\n    if (handLen <= 5) return;\n    isTouchingRef.current = true;\n    const y = e.touches[0].clientY;\n    touchStartYRef.current = y;\n    lastTouchYRef.current = y;\n    e.preventDefault();\n  }, [gameState.hands]);\n  const handleTouchMove = useCallback(e => {\n    var _lastTouchYRef$curren;\n    if (!isTouchingRef.current) return;\n    if (!e.touches || e.touches.length === 0) return;\n    const y = e.touches[0].clientY;\n    const last = (_lastTouchYRef$curren = lastTouchYRef.current) !== null && _lastTouchYRef$curren !== void 0 ? _lastTouchYRef$curren : y;\n    const dy = y - last; // positive when moving down\n    lastTouchYRef.current = y;\n\n    // invert so dragging up moves cards up\n    const delta = -dy;\n    const handLen = gameState.hands && gameState.hands[1] ? gameState.hands[1].length : 0;\n    const zone = getZone('hand.player');\n    if (!zone) return;\n    const slots = computeSlotRects(zone);\n    const slotH = slots && slots.length > 0 ? slots[0].h : zone.rectPx[3] / 5;\n    const visible = 5;\n    const maxOffset = -(Math.max(0, handLen - visible) * slotH);\n    handScrollTargetRef.current = Math.max(Math.min(handScrollTargetRef.current + delta, 0), maxOffset);\n    e.preventDefault();\n  }, [gameState.hands]);\n  const handleTouchEnd = useCallback(e => {\n    isTouchingRef.current = false;\n    touchStartYRef.current = null;\n    lastTouchYRef.current = null;\n  }, []);\n\n  // Expose debug trigger to manually start instant sprite animation by slot-key or uid\n  useEffect(() => {\n    window.__pc_triggerInstantAnim = key => {\n      const now = performance.now();\n      instantSpriteStateRef.current[key || '1.instant.0'] = {\n        started: now,\n        frameCount: 14,\n        frameDuration: 40\n      };\n    };\n    // alias\n    try {\n      window.pc_triggerInstantAnim = window.__pc_triggerInstantAnim;\n    } catch (e) {}\n    return () => {\n      delete window.__pc_triggerGovAnim;\n      delete window.__pc_triggerInstantAnim;\n    };\n  }, []);\n\n  // Click handler wrapper for corruption selection\n  const handleCardClickInternal = useCallback(data => {\n    const sel = gameState.pendingAbilitySelect;\n    if (sel && sel.type === 'corruption_steal') {\n      // Accept clicks on either actual card sprites (with uid) or on empty row_slot hitboxes.\n      if (data.player !== sel.actorPlayer && data.lane === 'aussen') {\n        let targetUid = data.uid;\n\n        // If we got a row_slot hit (no uid), map indexâ†’uid from board state\n        if (!targetUid && data.type === 'row_slot') {\n          try {\n            var _board5, _board5$p, _board5$p$aussen;\n            const p = data.player;\n            const idx = data.index;\n            const card = (_board5 = gameState.board) === null || _board5 === void 0 ? void 0 : (_board5$p = _board5[p]) === null || _board5$p === void 0 ? void 0 : (_board5$p$aussen = _board5$p.aussen) === null || _board5$p$aussen === void 0 ? void 0 : _board5$p$aussen[idx];\n            targetUid = card === null || card === void 0 ? void 0 : card.uid;\n          } catch (e) {}\n        }\n        if (targetUid) {\n          try {\n            console.debug('[CORR] forwarding uid', targetUid, 'actorPlayer=', sel.actorPlayer);\n            window.dispatchEvent(new CustomEvent('pc:corruption_pick_target', {\n              detail: {\n                player: sel.actorPlayer,\n                targetUid\n              }\n            }));\n            // Also open small confirmation overlay via DOM event for modal convenience\n            try {\n              window.dispatchEvent(new CustomEvent('pc:corruption_target_selected', {\n                detail: {\n                  player: sel.actorPlayer,\n                  targetUid\n                }\n              }));\n            } catch (e) {}\n          } catch (e) {}\n          return; // consume click\n        }\n      }\n    }\n    onCardClick(data);\n  }, [gameState, onCardClick]);\n  useEffect(() => {\n    const onDiceResult = () => {\n      // remove corruption modal if exists\n      const el = document.getElementById('pc-corruption-modal');\n      if (el) el.remove();\n      corruptionSelectActorRef.current = null;\n    };\n    window.addEventListener('pc:dice_result', onDiceResult);\n    return () => window.removeEventListener('pc:dice_result', onDiceResult);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    width: 1920,\n    height: 1080,\n    style: {\n      display: 'block',\n      width: '100%',\n      height: '100%',\n      imageRendering: 'auto'\n    },\n    onClick: handleClick,\n    onMouseMove: handleMouseMove,\n    onWheel: handleWheel,\n    onTouchStart: handleTouchStart,\n    onTouchMove: handleTouchMove,\n    onTouchEnd: handleTouchEnd\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 1954,\n    columnNumber: 5\n  }, this);\n};\n_s(GameCanvas, \"D8GMrFBv8s/0io8rEbaSty2rM80=\", false, function () {\n  return [useVisualEffectsSafe];\n});\n_c = GameCanvas;\nvar _c;\n$RefreshReg$(_c, \"GameCanvas\");","map":{"version":3,"names":["React","useRef","useEffect","useCallback","useVisualEffectsSafe","LAYOUT","getZone","computeSlotRects","getUiTransform","getLaneCapacity","getPublicRects","getGovernmentRects","getSofortRect","sortHandCards","getCardImagePath","influenceIconUrl","publicSymbolUrl","sofortSymbolUrl","dauerhaftSymbolUrl","governmentSymbolUrl","interventionSymbolUrl","govPlaceGifUrl","govPlaceSpritesheetUrl","instantSpritesheetUrl","hitSpritesheetUrl","jsxDEV","_jsxDEV","isCorruptionSelection","state","player","sel","pendingAbilitySelect","type","actorPlayer","GameCanvas","gameState","selectedHandIndex","onCardClick","onCardHover","devMode","_s","handler","ev","_ev$detail","detail","dice","document","querySelector","window","dispatchEvent","CustomEvent","e","addEventListener","removeEventListener","canvasRef","visualEffects","clickZonesRef","handScrollTargetRef","handScrollCurrentRef","handScrollEnabledRef","touchStartYRef","lastTouchYRef","isTouchingRef","backgroundImageRef","imageCacheRef","Map","influenceImgRef","influenceAnimRef","prevInfluencesRef","slotSymbolImgsRef","slotPositionsRef","uidToKeyRef","keyToUidRef","govGifRef","govSpritesRef","hitSpritesRef","govSpriteStateRef","instantSpritesRef","instantSpriteStateRef","hitSpriteStateRef","corruptionSelectActorRef","gameStateRef","current","onEnterCorruptionSelect","_ev$detail2","actor","console","log","error","onKeyDown","_gs$board","_gs$board$victim","_gs$board$victim$auss","_card$uid","k","key","includes","victim","idx","Number","gs","card","board","aussen","debug","uid","id","targetUid","preventDefault","drawSlotIconWithPulse","ctx","img","x","y","w","h","phase","complete","now","performance","base","pulseRange","period","pulse","Math","sin","save","globalAlpha","drawImage","grad","createLinearGradient","addColorStop","globalCompositeOperation","fillStyle","fillRect","restore","Image","src","drawCardAt","size","selected","showAPCost","_shield","extraAlpha","_uid","list","playAnimsRef","__pc_play_anims","anim","find","a","p","min","max","started","duration","pow","dx","dy","s","floor","cached","get","naturalWidth","onload","set","kind","_influence","barH","fontSize","font","textAlign","textBaseline","fillText","influence","protected","shield","deactivated","_influence2","badgeHeight","badgeWidth","badgeX","badgeY","beginPath","roundRect","fill","strokeStyle","lineWidth","strokeRect","getSlotDisplayName","zoneId","index","slotNumber","drawLane","lane","clickable","zone","slots","arr","forEach","bgColor","isSelected","hands","clickZone","textY","name","push","data","slotName","drawHandP1","hand","target","offsetY","round","i","originalIndex","findIndex","c","isSel","sx","sy","drawHandP2","rectPx","drawInterventionsP1","traps","zx","zy","zw","zh","drawInterventionsP2","drawSingleSlot","clickType","slot","onTargetSelected","_board","_board2","_board2$aussen","_board3","_board4","_board4$aussen","el","getElementById","createElement","style","position","left","top","transform","padding","background","border","borderRadius","zIndex","color","fontFamily","body","appendChild","innerHTML","rollBtn","cancelBtn","onclick","disabled","innerText","remove","drawPermanentSlotsP1","permanentSlots","government","public","drawPermanentSlotsP2","drawInstantSlots","sofortPlayerCard","sofort","sofortOppCard","getActiveKeywordsAndSubcategories","allCards","innen","filter","keywords","Set","subcategories","tag","add","publicCard","oligarchNames","platformNames","movementNames","ngoNames","intelligenceNames","mediaNames","Array","from","drawInfoPanels","govPanelX","govPanelY","govPanelW","govPanelH","length","keyword","pubPanelX","pubPanelY","pubPanelW","pubPanelH","subcategory","displayName","substring","runDiagnostics","handZones","z","uiUIDs","map","_z$data$card$uid","Boolean","stateHand","stateUIDs","_c$uid","missingInState","u","missingInUI","_politicardDebug","mismatch","ts","Date","uiCount","stateCount","stack","Error","__politicardDebug","slice","concat","warn","draw","_LAYOUT$background","_LAYOUT$background2","canvas","getContext","currSnapshot","collect","_c$uid2","_c$influence","String","Object","keys","_currSnapshot$uid","_prevInfluencesRef$cu","curr","prev","delta","start","amount","clearRect","width","height","enabled","scale","offsetX","translate","opponentPublicRects","opponentGovRects","corrActive","permGovZoneOpp","ox","oy","ow","oh","permPubZoneOpp","ox2","oy2","ow2","oh2","playerPublicRects","playerGovRects","sprites","gif","anims","animsArr","_zone$data$player","_zone$data$lane","_zone$data$index","indexOf","inner","frameCount","frameDuration","splice","_z$data$card$uid2","isGov","isInstant","dt","startedThis","instKey","st","elapsed","total","frame","parts","split","rect","sw","sh","spritesI","nowI","rects","instantRect","ix","iy","iw","ih","spritesH","nowH","permGovZone","permPubZone","x2","y2","w2","h2","instantPlayerZone","interventionsZone","particlesRef","popsRef","ripplesRef","apLabelsRef","reducedMotion","age","life","vy","gravity","vx","t","arc","PI","pops","pop","eased","_z$data$card$uid3","ripples","r","radius","g","createRadialGradient","cx","cy","showAp","_apSpawned","apX","apY","text","apl","l","_z$data$card$uid4","maxPulse","totalAmount","remaining","delete","ringRadius","ringX","ringY","ceil","stroke","labelX","labelY","random","now2","abs","rgbTeal","rgbBurg","rgbPurple","rgbYellow","rgbOrange","slotType","alpha","lw","toFixed","uiTransform","canvasSize","zones","clickZones","d","_d$player","_d$lane","slotIndex","slotPositions","DRAW_LAYOUT_OVERLAY","load","onerror","si","requestAnimationFrame","__pc_triggerGovAnim","_zone$data$player2","_zone$data$lane2","_zone$data$index2","_z$data$card$uid5","pc_triggerGovAnim","__pc_triggerHitAnim","_zone$data$player3","_zone$data$lane3","_zone$data$index3","_z$data$card$uid6","pc_triggerHitAnim","loop","cancelAnimationFrame","handleCardClick","_data$card$uid","_data$card","_data$card2","_data$card$uid2","_data$card3","_data$card4","_gameState$hands","idxInState","_c$uid3","_gameState$board$1$in","_gameState$board","_gameState$board$","_gameState$board$1$au","_gameState$board2","_gameState$board2$","cap","rowCards","handleClick","getBoundingClientRect","mx","clientX","my","clientY","hit","err","handleCardClickInternal","handleMouseMove","_hit$data$card","handleWheel","handLen","sign","deltaY","slotH","visible","maxOffset","handleTouchStart","touches","handleTouchMove","_lastTouchYRef$curren","last","handleTouchEnd","__pc_triggerInstantAnim","pc_triggerInstantAnim","_board5","_board5$p","_board5$p$aussen","onDiceResult","ref","display","imageRendering","onClick","onMouseMove","onWheel","onTouchStart","onTouchMove","onTouchEnd","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/skank/Videos/Cards/Milchcards/src/components/GameCanvas.tsx"],"sourcesContent":["import React, { useRef, useEffect, useCallback } from 'react';\nimport { useVisualEffects, useVisualEffectsSafe } from '../context/VisualEffectsContext';\nimport { GameState, Card, PoliticianCard, Player, Lane } from '../types/game';\nimport { LAYOUT, getZone, computeSlotRects, getUiTransform, getLaneCapacity, getPublicRects, getGovernmentRects, getSofortRect } from '../ui/layout';\nimport { drawCardImage, sortHandCards } from '../utils/gameUtils';\nimport { getNetApCost } from '../utils/ap';\nimport { getCardImagePath } from '../data/gameData';\nimport influenceIconUrl from '../assets/icons/influence.svg';\nimport publicSymbolUrl from '../assets/icons/public_symbol.png';\nimport sofortSymbolUrl from '../assets/icons/sofort_initiative_symbol.png';\nimport dauerhaftSymbolUrl from '../assets/icons/dauerhaft_initative.png';\nimport governmentSymbolUrl from '../assets/icons/government_symbol.png';\nimport interventionSymbolUrl from '../assets/icons/intervention_symbol.png';\nimport govPlaceGifUrl from '../assets/effect_gif/place_card_gov_256x256.gif';\nimport govPlaceSpritesheetUrl from '../ui/sprites/playcard_gov_256x256_14.png';\nimport instantSpritesheetUrl from '../ui/sprites/activate_trap_hit_target_256x256_16x2.png';\nimport hitSpritesheetUrl from '../ui/sprites/activate_inititive_hit_target_256x256_16_2rows.png';\n\ninterface GameCanvasProps {\n  gameState: GameState;\n  selectedHandIndex: number | null;\n  onCardClick: (data: any) => void;\n  onCardHover: (data: any) => void;\n  devMode?: boolean; // ðŸ”§ DEV MODE: Show P2 hand when true\n}\n\n// Helper: is corruption target selection active\nfunction isCorruptionSelection(state: GameState, player: Player) {\n  const sel: any = (state as any).pendingAbilitySelect;\n  return sel && sel.type === 'corruption_steal' && sel.actorPlayer === player;\n}\n\nexport const GameCanvas: React.FC<GameCanvasProps> = ({\n  gameState,\n  selectedHandIndex,\n  onCardClick,\n  onCardHover,\n  devMode = false,\n}) => {\n  // listen for dice roll requests from resolver and trigger Dice3D\n  useEffect(() => {\n    const handler = (ev: any) => {\n      try {\n        const player = ev.detail?.player;\n        // find Dice3D canvas on page and trigger click (it rolls on click)\n        const dice = document.querySelector('canvas') as HTMLCanvasElement | null;\n        // better: dispatch global event so App-level Dice3D component can roll programmatically\n        window.dispatchEvent(new CustomEvent('pc:ui_request_dice_roll', { detail: { player } }));\n      } catch (e) {}\n    };\n    window.addEventListener('pc:request_dice_roll', handler as EventListener);\n    return () => window.removeEventListener('pc:request_dice_roll', handler as EventListener);\n  }, []);\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const visualEffects = useVisualEffectsSafe();\n  const clickZonesRef = useRef<Array<{ x: number; y: number; w: number; h: number; data: any }>>([]);\n  // Smooth vertical scroll for P1 hand when it has more than visible slots\n  const handScrollTargetRef = useRef<number>(0);\n  const handScrollCurrentRef = useRef<number>(0);\n  const handScrollEnabledRef = useRef<boolean>(true);\n  // Touch handling refs\n  const touchStartYRef = useRef<number | null>(null);\n  const lastTouchYRef = useRef<number | null>(null);\n  const isTouchingRef = useRef<boolean>(false);\n  const backgroundImageRef = useRef<HTMLImageElement | null>(null);\n  const imageCacheRef = useRef<Map<string, HTMLImageElement>>(new Map());\n  const influenceImgRef = useRef<HTMLImageElement | null>(null);\n  // Animation state for visual influence changes: Map<uid, Array<Anim>>\n  const influenceAnimRef = useRef<Map<string, Array<{ start: number; duration: number; amount: number }>>>(new Map());\n  // Previous per-card influence snapshot to detect increases\n  const prevInfluencesRef = useRef<Record<string, number>>({});\n  // Slot symbol images\n  const slotSymbolImgsRef = useRef<Map<string, HTMLImageElement>>(new Map());\n  // Map of canonical slot positions for animations: key -> {x,y,w,h,cx,cy}\n  const slotPositionsRef = useRef<Record<string, { x: number; y: number; w: number; h: number; cx: number; cy: number }>>({});\n  // Mapping between animation UIDs and slot keys to ensure one-shot playback\n  const uidToKeyRef = useRef<Record<string, string>>({});\n  const keyToUidRef = useRef<Record<string, string>>({});\n  // Temporary test GIF for government slots\n  const govGifRef = useRef<HTMLImageElement | null>(null);\n  const govSpritesRef = useRef<HTMLImageElement | null>(null);\n  // hit (target) spritesheet (25 frames)\n  const hitSpritesRef = useRef<HTMLImageElement | null>(null);\n  // sprite animation state keyed by slot-key (player.lane.index)\n  const govSpriteStateRef = useRef<Record<string, { started: number; frameCount: number; frameDuration: number }>>({});\n  const instantSpritesRef = useRef<HTMLImageElement | null>(null);\n  const instantSpriteStateRef = useRef<Record<string, { started: number; frameCount: number; frameDuration: number }>>({});\n\n  const hitSpriteStateRef = useRef<Record<string, { started: number; frameCount: number; frameDuration: number }>>({});\n\n  // Corruption (Bestechungsskandal) target selection mode\n  const corruptionSelectActorRef = useRef<Player | null>(null);\n  const gameStateRef = useRef<GameState>(gameState);\n  useEffect(() => { gameStateRef.current = gameState; }, [gameState]);\n  useEffect(() => {\n    const onEnterCorruptionSelect = (ev: any) => {\n      try {\n        const actor = ev.detail?.player as Player | undefined;\n        console.log('ðŸ”¥ GAMECANVAS RECEIVED pc:corruption_select_target - Actor:', actor);\n        corruptionSelectActorRef.current = actor ?? null;\n        console.log('ðŸ”¥ SET corruptionSelectActorRef.current:', corruptionSelectActorRef.current);\n      } catch (e) {\n        console.error('ðŸ”¥ ERROR in corruption select handler:', e);\n      }\n    };\n    window.addEventListener('pc:corruption_select_target', onEnterCorruptionSelect as EventListener);\n    // Keyboard hotkeys 1-5 to choose opponent government slot when corruption select is active\n    const onKeyDown = (ev: KeyboardEvent) => {\n      try {\n        const k = ev.key;\n        if (!['1','2','3','4','5'].includes(k)) return;\n        const actor = corruptionSelectActorRef.current;\n        if (!actor) return;\n        const victim = actor === 1 ? 2 : 1;\n        const idx = Number(k) - 1; // map '1' -> slot 0\n        const gs = gameStateRef.current as any;\n        const card = gs?.board?.[victim]?.aussen?.[idx];\n        console.debug('[CORR][KEY] pressed', k, 'actor', actor, 'victim', victim, 'idx', idx, 'card', card);\n        if (!card) return;\n        const uid = card.uid ?? card.id;\n        if (!uid) return;\n        console.debug('[CORR][KEY] dispatching pick_target for uid', uid);\n        window.dispatchEvent(new CustomEvent('pc:corruption_pick_target', { detail: { player: actor, targetUid: uid } }));\n        try {\n          console.debug('[CORR][KEY] dispatching target_selected for uid', uid);\n          window.dispatchEvent(new CustomEvent('pc:corruption_target_selected', { detail: { player: actor, targetUid: uid } }));\n        } catch(e) { console.debug('[CORR][KEY] target_selected dispatch error', e); }\n        ev.preventDefault();\n      } catch(e) {}\n    };\n    window.addEventListener('keydown', onKeyDown as EventListener);\n    return () => {\n      window.removeEventListener('pc:corruption_select_target', onEnterCorruptionSelect as EventListener);\n      window.removeEventListener('keydown', onKeyDown as EventListener);\n    };\n  }, []);\n\n  // Helper: draw slot icons with uniform pulsing opacity and a light reflection\n  const drawSlotIconWithPulse = useCallback((ctx: CanvasRenderingContext2D, img: HTMLImageElement | undefined, x: number, y: number, w: number, h: number, phase = 0) => {\n    if (!img || !img.complete) return;\n    try {\n      const now = performance.now();\n      const base = 0.10; // base opacity\n      const pulseRange = 0.08; // pulse amplitude (-> up to base + pulseRange)\n      const period = 700; // ms\n      const pulse = base + pulseRange * (0.5 + 0.5 * Math.sin(now / period + phase));\n\n      // draw icon with pulsing alpha\n      ctx.save();\n      ctx.globalAlpha = pulse;\n      ctx.drawImage(img, x, y, w, h);\n\n      // subtle reflection: gradient overlay on top half\n      const grad = ctx.createLinearGradient(x, y, x, y + h * 0.5);\n      grad.addColorStop(0, `rgba(255,255,255,${0.18 * pulse})`);\n      grad.addColorStop(1, `rgba(255,255,255,0)`);\n      ctx.globalCompositeOperation = 'lighter';\n      ctx.fillStyle = grad as any;\n      ctx.fillRect(x, y, w, h * 0.5);\n\n      ctx.restore();\n    } catch (e) {\n      // silent fallback\n    }\n  }, []);\n\n  // Load influence icon once\n  useEffect(() => {\n    const img = new Image();\n    img.src = influenceIconUrl;\n    influenceImgRef.current = img;\n  }, []);\n\n\n  const drawCardAt = useCallback((\n    ctx: CanvasRenderingContext2D,\n    card: Card,\n    x: number,\n    y: number,\n    size: number,\n    selected: boolean = false,\n    showAPCost: boolean = false,\n    player?: Player\n  ) => {\n    // Apply per-card fade-in if a play animation is active for this uid\n    let extraAlpha = 1;\n    try {\n      const uid = (card as any).uid ?? (card as any).id;\n      const list = (visualEffects && visualEffects.playAnimsRef && visualEffects.playAnimsRef.current) || (window as any).__pc_play_anims || [];\n      const anim = list.find((a: any) => a.uid === uid);\n      if (anim) {\n        const p = Math.min(1, Math.max(0, (performance.now() - anim.started) / anim.duration));\n        // ease-out\n        extraAlpha = Math.pow(p, 2);\n      }\n    } catch (e) {}\n    let dx = x, dy = y, s = size;\n    if (selected) {\n      s = Math.floor(size * 1.05);\n      dx = x - Math.floor((s - size) / 2);\n      dy = y - Math.floor((s - size) / 2);\n    }\n\n    // Note: pulse overlay is drawn at top layer after all cards are rendered\n\n    // Draw card image with caching to prevent flicker in continuous loop\n    const src = getCardImagePath(card, 'ui');\n    const cached = imageCacheRef.current.get(src);\n    ctx.save();\n    ctx.globalAlpha = extraAlpha;\n    if (cached && cached.complete && cached.naturalWidth > 0) {\n      ctx.drawImage(cached, dx, dy, s, s);\n    } else {\n      const img = new Image();\n      img.onload = () => {\n        imageCacheRef.current.set(src, img);\n        // Note: onload happens async; draw will occur on next frame\n        // don't draw here into stale ctx\n      };\n      img.src = src;\n      imageCacheRef.current.set(src, img);\n    }\n\n    ctx.restore();\n\n    // Status-Indikatoren (fÃ¼r alle Board-Karten)\n    // Einfluss-Wert dauerhaft anzeigen (oben links) â€“ nur fÃ¼r Regierungskarten\n    if ((card as any).kind === 'pol') {\n      const barH = Math.max(20, Math.floor(s * 0.12) + 6);\n      ctx.fillStyle = 'rgba(0,0,0,0.6)';\n      ctx.fillRect(dx, dy + s - barH, s, barH);\n\n      ctx.fillStyle = '#ffffff';\n      const fontSize = Math.floor(s * 0.12);\n      ctx.font = `bold ${fontSize}px sans-serif`;\n      ctx.textAlign = 'left';\n      ctx.textBaseline = 'middle';\n      ctx.fillText(`${(card as any).influence ?? 0}`, dx + 8, dy + s - barH / 2);\n    }\n    // Schutz-Status (blauer Punkt)\n    if ((card as any).protected || ((card as any).shield ?? 0) > 0) {\n      ctx.fillStyle = '#1da1f2';\n      ctx.fillRect(dx + s - 22, dy + 6, 16, 16);\n    }\n    // Deaktiviert-Status (roter Punkt)\n    if ((card as any).deactivated) {\n      ctx.fillStyle = '#b63838';\n      ctx.fillRect(dx + s - 22, dy + 26, 16, 16);\n    }\n\n    // Einfluss-Badge fÃ¼r Handkarten oben rechts (nur Regierungskarten)\n    if (showAPCost && player && (card as any).kind === 'pol') {\n      const badgeHeight = Math.max(16, Math.floor(s * 0.12));\n      const badgeWidth = badgeHeight * 2;\n      const badgeX = dx + s - badgeWidth - 6;\n      const badgeY = dy + 6;\n\n      // Semi-transparent dunkler Hintergrund\n      ctx.fillStyle = 'rgba(0,0,0,0.6)';\n      ctx.beginPath();\n      ctx.roundRect(badgeX, badgeY, badgeWidth, badgeHeight, badgeHeight / 2);\n      ctx.fill();\n\n      // Influence icon (90% opacity) links im Badge\n      if (influenceImgRef.current && influenceImgRef.current.complete) {\n        ctx.globalAlpha = 0.9;\n        ctx.drawImage(influenceImgRef.current, badgeX + 2, badgeY + 2, badgeHeight - 4, badgeHeight - 4);\n        ctx.globalAlpha = 1;\n      }\n\n      // Influence number rechts im Badge\n      ctx.fillStyle = '#ffffff';\n      ctx.font = `bold ${Math.floor(badgeHeight * 0.5)}px sans-serif`;\n      ctx.textAlign = 'right';\n      ctx.textBaseline = 'middle';\n      ctx.fillText(`${(card as any).influence ?? 0}`, badgeX + badgeWidth - 4, badgeY + badgeHeight / 2);\n\n      // Reset align\n      ctx.textAlign = 'start';\n      ctx.textBaseline = 'alphabetic';\n    }\n\n    // NOTE: influence overlays (pulse + labels) are drawn in a separate pass\n\n    // Auswahl-Rahmen\n    if (selected) {\n      ctx.strokeStyle = '#61dafb';\n      ctx.lineWidth = 3;\n      ctx.strokeRect(dx + 1, dy + 1, s - 2, s - 2);\n      ctx.lineWidth = 1;\n    }\n\n    // Return exact 256x256 click zone over the card\n    // Since all cards are 256x256, the click zone should match exactly\n    return { x: dx, y: dy, w: 256, h: 256 };\n  }, [gameState]);\n\n\n\n\n\n\n\n  // Slot-Benennungs-Funktion basierend auf Glossar\n  const getSlotDisplayName = useCallback((zoneId: string, index: number, player: Player): string => {\n    const slotNumber = index + 1;\n\n    if (zoneId.includes('government')) {\n      if (zoneId.includes('player')) {\n        return `Regierungsreihe Slot ${slotNumber}`;\n      } else {\n        return `Gegner Regierung Slot ${slotNumber}`;\n      }\n    } else if (zoneId.includes('public')) {\n      if (zoneId.includes('player')) {\n        return `Ã–ffentlichkeitsreihe Slot ${slotNumber}`;\n      } else {\n        return `Gegner Ã–ffentlichkeit Slot ${slotNumber}`;\n      }\n    } else if (zoneId.includes('permanent.government')) {\n      if (zoneId.includes('player')) {\n        return 'Regierung Spezial-Slot';\n      } else {\n        return 'Gegner Regierung Spezial-Slot';\n      }\n    } else if (zoneId.includes('permanent.public')) {\n      if (zoneId.includes('player')) {\n        return 'Ã–ffentlichkeit Spezial-Slot';\n      } else {\n        return 'Gegner Ã–ffentlichkeit Spezial-Slot';\n      }\n    } else if (zoneId.includes('instant')) {\n      if (zoneId.includes('player')) {\n        return 'Sofort-Slot';\n      } else {\n        return 'Gegner Sofort-Slot';\n      }\n    } else if (zoneId.includes('hand')) {\n      return 'Hand';\n    } else if (zoneId.includes('interventions')) {\n      return 'Interventionen';\n    }\n\n    return `Slot ${slotNumber}`;\n  }, []);\n\n  const drawLane = useCallback((\n    ctx: CanvasRenderingContext2D,\n    zoneId: string,\n    player: Player,\n    lane: Lane,\n    clickable: boolean\n  ) => {\n    const zone = getZone(zoneId);\n    if (!zone) return;\n\n    const slots = computeSlotRects(zone);\n    const arr = gameState.board[player][lane];\n\n    slots.forEach((s, idx) => {\n      const card = arr[idx];\n\n      // Hintergrundfarbe nach Kategorie\n      let bgColor = 'rgba(0,0,0,0.1)'; // Standard\n      if (zoneId.includes('government')) {\n        bgColor = 'rgba(255, 197, 0, 0.15)'; // Hellgelb fÃ¼r Regierung\n      } else if (zoneId.includes('public')) {\n        bgColor = 'rgba(0, 255, 0, 0.15)'; // HellgrÃ¼n fÃ¼r Ã–ffentlichkeit\n      }\n\n      ctx.fillStyle = bgColor;\n      ctx.fillRect(s.x, s.y, s.w, s.h);\n\n      // Slot-Rahmen\n      ctx.strokeStyle = 'rgba(255,255,255,0.06)';\n      ctx.strokeRect(s.x + 0.5, s.y + 0.5, s.w - 1, s.h - 1);\n\n      if (card) {\n        const isSelected = player === 1 && selectedHandIndex !== null && gameState.hands[1][selectedHandIndex] === card;\n        const clickZone = drawCardAt(ctx, card, s.x, s.y, s.w, isSelected, false);\n\n        // Kartenname unter dem Slot anzeigen\n        ctx.fillStyle = 'rgba(255,255,255,0.9)';\n        ctx.font = 'bold 12px sans-serif';\n        ctx.textAlign = 'center';\n        const textY = s.y + s.h + 16;\n        ctx.fillText(card.name, s.x + s.w/2, textY);\n\n        clickZonesRef.current.push({\n          ...clickZone,\n          data: { type: 'board_card', player, lane, index: idx, card }\n        });\n      } else if (clickable && gameState.current === player) {\n        // Slot-Benennung anzeigen (fÃ¼r den aktuellen Spieler)\n        const slotName = getSlotDisplayName(zoneId, idx, player);\n        ctx.fillStyle = 'rgba(255,255,255,0.6)';\n        ctx.font = '11px sans-serif';\n        ctx.textAlign = 'center';\n        const textY = s.y + s.h/2;\n        ctx.fillText(slotName, s.x + s.w/2, textY);\n\n        clickZonesRef.current.push({\n          x: s.x, y: s.y, w: s.w, h: s.h,\n          data: { type: 'row_slot', lane, index: idx }\n        });\n      }\n    });\n  }, [gameState, selectedHandIndex, drawCardAt, getSlotDisplayName]);\n\n  const drawHandP1 = useCallback((ctx: CanvasRenderingContext2D) => {\n    const hand = sortHandCards(gameState.hands[1]);\n    const zone = getZone('hand.player');\n    if (!zone) return;\n\n    const slots = computeSlotRects(zone);\n    // Apply smooth offset (lerp towards target)\n    const target = handScrollTargetRef.current;\n    handScrollCurrentRef.current += (target - handScrollCurrentRef.current) * 0.15; // easing\n    const offsetY = Math.round(handScrollCurrentRef.current);\n    slots.forEach((s: { x: number; y: number; w: number; h: number }, i: number) => {\n      const card = hand[i];\n      if (!card) return;\n      // Find original index in unsorted hand for click handling\n      const originalIndex = gameState.hands[1].findIndex(c => c.uid === card.uid);\n      const isSel = selectedHandIndex === originalIndex;\n      // apply vertical offset\n      const sx = s.x;\n      const sy = s.y + offsetY;\n      const clickZone = drawCardAt(ctx, card, sx, sy, s.w, isSel, true, 1); // Show AP cost for player 1 hand\n      clickZonesRef.current.push({ ...clickZone, data: { type: 'hand_p1', index: originalIndex, card } });\n    });\n  }, [gameState.hands, selectedHandIndex, drawCardAt]);\n\n      // ðŸ”§ DEV MODE: Player 2 Hand (rechts unten, kompakter)\n  const drawHandP2 = useCallback((ctx: CanvasRenderingContext2D) => {\n    const hand = sortHandCards(gameState.hands[2]);\n    const zone = getZone('hand.opponent');\n    if (!zone) return;\n\n    const slots = computeSlotRects(zone);\n\n    // Hintergrund fÃ¼r P2 Hand\n    const [x, y, w, h] = zone.rectPx;\n    ctx.fillStyle = 'rgba(255, 100, 100, 0.15)'; // RÃ¶tlicher Hintergrund fÃ¼r P2\n    ctx.fillRect(x, y, w, h);\n    ctx.strokeStyle = 'rgba(255, 100, 100, 0.3)';\n    ctx.strokeRect(x + 0.5, y + 0.5, w - 1, h - 1);\n\n    // Label fÃ¼r P2 Hand\n    ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\n    ctx.font = 'bold 14px sans-serif';\n    ctx.textAlign = 'center';\n    ctx.fillText('Player 2 Hand', x + w/2, y - 8);\n\n    slots.forEach((s: { x: number; y: number; w: number; h: number }, i: number) => {\n      const card = hand[i];\n      if (!card) return;\n      // Find original index in unsorted hand for click handling\n      const originalIndex = gameState.hands[2].findIndex(c => c.uid === card.uid);\n      const isSel = gameState.current === 2 && selectedHandIndex === originalIndex;\n      const clickZone = drawCardAt(ctx, card, s.x, s.y, s.w, isSel, true, 2); // Show AP cost for player 2 hand\n      clickZonesRef.current.push({ ...clickZone, data: { type: 'hand_p2', index: originalIndex, card } });\n    });\n  }, [gameState, selectedHandIndex, drawCardAt]);\n  // Interventions strip (player traps)\n  const drawInterventionsP1 = useCallback((ctx: CanvasRenderingContext2D) => {\n    const traps = gameState.traps[1] || [];\n    const zone = getZone('interventions.player');\n    if (!zone) return;\n\n    // Single intervention slot\n    const [zx, zy, zw, zh] = zone.rectPx;\n    const card = traps[0]; // Only first trap\n\n    // Hintergrund fÃ¼r Interventions-Slot\n    ctx.fillStyle = 'rgba(200, 160, 255, 0.15)'; // Lavendelfarben fÃ¼r Interventionen\n    ctx.fillRect(zx, zy, zw, zh);\n    ctx.strokeStyle = 'rgba(200, 160, 255, 0.3)';\n    ctx.strokeRect(zx + 0.5, zy + 0.5, zw - 1, zh - 1);\n\n    // Slot-Benennung fÃ¼r Interventions-Slot\n    ctx.fillStyle = 'rgba(200, 160, 255, 0.8)';\n    ctx.font = '11px sans-serif';\n    ctx.textAlign = 'left';\n    ctx.fillText('Intervention', zx + 8, zy + zh - 6);\n\n    if (card) {\n      const clickZone = drawCardAt(ctx, card, zx, zy, zw, false, false);\n      clickZonesRef.current.push({ ...clickZone, data: { type: 'trap_p1', index: 0, card } });\n    }\n  }, [gameState.traps, drawCardAt]);\n\n  // Interventions strip (opponent traps)\n  const drawInterventionsP2 = useCallback((ctx: CanvasRenderingContext2D) => {\n    const traps = gameState.traps[2] || [];\n    const zone = getZone('interventions.opponent');\n    if (!zone) return;\n\n    // Single intervention slot\n    const [zx, zy, zw, zh] = zone.rectPx;\n    const card = traps[0]; // Only first trap\n\n    // Hintergrund fÃ¼r Interventions-Slot\n    ctx.fillStyle = 'rgba(200, 160, 255, 0.15)'; // Lavendelfarben fÃ¼r Interventionen\n    ctx.fillRect(zx, zy, zw, zh);\n    ctx.strokeStyle = 'rgba(200, 160, 255, 0.3)';\n    ctx.strokeRect(zx + 0.5, zy + 0.5, zw - 1, zh - 1);\n\n    // Slot-Benennung fÃ¼r Interventions-Slot\n    ctx.fillStyle = 'rgba(200, 160, 255, 0.8)';\n    ctx.font = '11px sans-serif';\n    ctx.textAlign = 'left';\n    ctx.fillText('Intervention', zx + 8, zy + zh - 6);\n\n    if (card) {\n      const clickZone = drawCardAt(ctx, card, zx, zy, zw, false, false);\n      clickZonesRef.current.push({ ...clickZone, data: { type: 'trap_p2', index: 0, card } });\n    }\n  }, [gameState.traps, drawCardAt]);\n\n  // Single slot drawing function\n  const drawSingleSlot = useCallback((\n    ctx: CanvasRenderingContext2D,\n    zoneId: string,\n    card: Card | null,\n    clickType: string,\n    player: Player\n  ) => {\n    const zone = getZone(zoneId);\n    if (!zone) return;\n    const [x, y, w, h] = zone.rectPx;\n\n    // Hintergrundfarbe nach Kategorie\n    let bgColor = 'rgba(0,0,0,0.1)'; // Standard\n    if (zoneId.includes('government')) {\n      bgColor = 'rgba(255, 197, 0, 0.15)'; // Hellgelb fÃ¼r Regierung\n    } else if (zoneId.includes('public')) {\n      bgColor = 'rgba(0, 255, 0, 0.15)'; // HellgrÃ¼n fÃ¼r Ã–ffentlichkeit\n    } else if (zoneId.includes('instant')) {\n      bgColor = 'rgba(127, 116, 91, 0.15)'; // Neutral fÃ¼r Sofort-Slots\n    } else if (zoneId.includes('permanent')) {\n      // Unterscheide zwischen government und public permanent slots\n      if (zoneId.includes('government')) {\n        bgColor = 'rgba(255, 197, 0, 0.15)';\n      } else if (zoneId.includes('public')) {\n        bgColor = 'rgba(0, 255, 0, 0.15)';\n      }\n    }\n\n    ctx.fillStyle = bgColor;\n    ctx.fillRect(x, y, w, h);\n\n    // Draw slot border\n    ctx.strokeStyle = 'rgba(255,255,255,0.06)';\n    ctx.strokeRect(x + 0.5, y + 0.5, w - 1, h - 1);\n\n    if (card) {\n      const isSelected = player === 1 && selectedHandIndex !== null && gameState.hands[1][selectedHandIndex] === card;\n      const clickZone = drawCardAt(ctx, card, x, y, w, isSelected, false);\n\n      // Kartenname unter dem Slot anzeigen\n      ctx.fillStyle = 'rgba(255,255,255,0.9)';\n      ctx.font = 'bold 12px sans-serif';\n      ctx.textAlign = 'center';\n      const textY = y + h + 16;\n      ctx.fillText(card.name, x + w/2, textY);\n\n      // Register click zone for the card - always in dev mode, otherwise only for current player\n      if (devMode || player === gameState.current) {\n        clickZonesRef.current.push({ ...clickZone, data: { type: 'slot_card', slot: clickType, player, card } });\n      }\n\n      // ðŸ”§ NEU: Sofort-Initiative-Slots sind immer klickbar fÃ¼r Aktivierung (handled by activateInstantInitiative)\n      if (clickType === 'instant') {\n        clickZonesRef.current.push({\n          x, y, w, h,\n          data: { type: 'activate_instant', player, card }\n        });\n      }\n    } else if (gameState.current === player || devMode) {\n      // Slot-Benennung fÃ¼r leere Slots anzeigen (fÃ¼r den aktuellen Spieler oder im Dev Mode)\n      const slotName = getSlotDisplayName(zoneId, 0, player);\n      ctx.fillStyle = 'rgba(255,255,255,0.6)';\n      ctx.font = '11px sans-serif';\n      ctx.textAlign = 'center';\n      const textY = y + h/2;\n      ctx.fillText(slotName, x + w/2, textY);\n\n      clickZonesRef.current.push({ x, y, w, h, data: { type: 'empty_slot', slot: clickType, player } });\n    }\n  }, [selectedHandIndex, gameState, drawCardAt, getSlotDisplayName, devMode]);\n\n  // Small UI hook: show a lightweight corruption modal overlay when a target is selected\n  useEffect(() => {\n    const onTargetSelected = (ev: any) => {\n      const { player, targetUid } = ev.detail || {};\n      if (!player || !targetUid) return;\n      // create transient overlay element if not present\n      try {\n        const id = 'pc-corruption-modal';\n        let el = document.getElementById(id);\n        if (!el) {\n          el = document.createElement('div');\n          el.id = id;\n          el.style.position = 'fixed';\n          el.style.left = '50%';\n          el.style.top = '40%';\n          el.style.transform = 'translate(-50%, -50%)';\n          el.style.padding = '12px 16px';\n          el.style.background = 'rgba(6,10,15,0.9)';\n          el.style.border = '1px solid rgba(255,255,255,0.12)';\n          el.style.borderRadius = '8px';\n          el.style.zIndex = '3000';\n          el.style.color = '#e5e7eb';\n          el.style.fontFamily = 'monospace';\n          el.style.fontSize = '14px';\n          document.body.appendChild(el);\n        }\n        const card = (gameState as any).board?.[player === 1 ? 1 : 2]?.aussen?.find((c:any)=>c.uid===targetUid) || (gameState as any).board?.[player === 1 ? 2 : 1]?.aussen?.find((c:any)=>c.uid===targetUid);\n        el.innerHTML = `<div style=\"display:flex;flex-direction:column;gap:8px;min-width:260px;\">\n          <div style=\"font-weight:700\">Bestechungsskandal 2.0 â€” Ziel gewÃ¤hlt</div>\n          <div>GewÃ¤hltes Ziel: <b>${card ? card.name : 'UID '+targetUid}</b></div>\n          <div>Probe: W6 â‰¥ Einfluss (inkl. Oligarch-Bonus)</div>\n          <div style=\"display:flex;gap:8px;justify-content:flex-end;\">\n            <button id=\"pc-corruption-roll\" style=\"background:#2563eb;color:white;border:none;padding:6px 10px;border-radius:6px;cursor:pointer;\">WÃ¼rfeln</button>\n            <button id=\"pc-corruption-cancel\" style=\"background:#374151;color:white;border:none;padding:6px 10px;border-radius:6px;cursor:pointer;\">Abbrechen</button>\n          </div>\n        </div>`;\n\n        const rollBtn = document.getElementById('pc-corruption-roll');\n        const cancelBtn = document.getElementById('pc-corruption-cancel');\n        if (rollBtn) {\n          rollBtn.onclick = () => {\n            try {\n              console.log('ðŸ”¥ CORRUPTION WÃœRFELN CLICKED - triggering dice roll');\n              // Trigger the dice component to roll\n              window.dispatchEvent(new CustomEvent('pc:ui_request_dice_roll', { detail: { player, targetUid } }));\n              window.dispatchEvent(new CustomEvent('pc:corruption_request_roll', { detail: { player, targetUid } }));\n            } catch(e) {\n              console.error('ðŸ”¥ ERROR triggering dice roll:', e);\n            }\n            // disable until result\n            (rollBtn as HTMLButtonElement).disabled = true;\n            (rollBtn as HTMLButtonElement).innerText = 'WÃ¼rfelt...';\n          };\n        }\n        if (cancelBtn) {\n          cancelBtn.onclick = () => {\n            el!.remove();\n          };\n        }\n      } catch (e) { console.debug('corruption modal create failed', e); }\n    };\n\n    window.addEventListener('pc:corruption_target_selected', onTargetSelected as EventListener);\n    return () => window.removeEventListener('pc:corruption_target_selected', onTargetSelected as EventListener);\n  }, [gameState]);\n\n  // Draw permanent slots for player\n  const drawPermanentSlotsP1 = useCallback((ctx: CanvasRenderingContext2D) => {\n    drawSingleSlot(ctx, 'slot.permanent.government.player', gameState.permanentSlots[1].government, 'permanent_government', 1);\n    drawSingleSlot(ctx, 'slot.permanent.public.player', gameState.permanentSlots[1].public, 'permanent_public', 1);\n  }, [gameState.permanentSlots, drawSingleSlot]);\n\n  // Draw permanent slots for opponent\n  const drawPermanentSlotsP2 = useCallback((ctx: CanvasRenderingContext2D) => {\n    drawSingleSlot(ctx, 'slot.permanent.government.opponent', gameState.permanentSlots[2].government, 'permanent_government', 2);\n    drawSingleSlot(ctx, 'slot.permanent.public.opponent', gameState.permanentSlots[2].public, 'permanent_public', 2);\n  }, [gameState.permanentSlots, drawSingleSlot]);\n\n  // Draw instant slots\n  const drawInstantSlots = useCallback((ctx: CanvasRenderingContext2D) => {\n    // Sofort-Initiative-Slots aus dem Board zeichnen\n    const sofortPlayerCard = gameState.board[1].sofort[0];\n    const sofortOppCard = gameState.board[2].sofort[0];\n\n    drawSingleSlot(ctx, 'slot.instant.player', sofortPlayerCard, 'instant', 1);\n    drawSingleSlot(ctx, 'slot.instant.opponent', sofortOppCard, 'instant', 2);\n  }, [gameState.board, drawSingleSlot]);\n\n  // Aktive SchlÃ¼sselwÃ¶rter und Unterkategorien ermitteln\n  const getActiveKeywordsAndSubcategories = useCallback((player: Player) => {\n    const board = gameState.board[player];\n    const permanentSlots = gameState.permanentSlots[player];\n    const allCards = [\n      ...board.innen,\n      ...board.aussen,\n      permanentSlots.government,\n      permanentSlots.public\n    ].filter(c => c && c.kind === 'pol') as PoliticianCard[];\n\n    const keywords = new Set<string>();\n    const subcategories = new Set<string>();\n\n    allCards.forEach(card => {\n      if (!card.deactivated) {\n        // Regierungskarten-SchlÃ¼sselwÃ¶rter\n        if (card.tag === 'Leadership') {\n          keywords.add('Leadership');\n        }\n        if (card.tag === 'Diplomat') {\n          keywords.add('Diplomat');\n        }\n\n        // Ã–ffentlichkeits-Unterkategorien (fÃ¼r Karten in Ã–ffentlichkeitsreihe)\n        if (board.innen.includes(card)) {\n          const publicCard = card as any;\n          if (publicCard.tag) {\n            // Oligarch\n            const oligarchNames = ['Elon Musk', 'Bill Gates', 'George Soros', 'Warren Buffett', 'Mukesh Ambani', 'Jeff Bezos', 'Alisher Usmanov', 'Gautam Adani', 'Jack Ma', 'Zhang Yiming', 'Roman Abramovich'];\n            if (oligarchNames.includes(publicCard.name)) {\n              subcategories.add('Oligarch');\n            }\n\n            // Plattform\n            const platformNames = ['Mark Zuckerberg', 'Tim Cook', 'Sam Altman', 'Jack Ma'];\n            if (platformNames.includes(publicCard.name)) {\n              subcategories.add('Plattform');\n            }\n\n            // Bewegung\n            const movementNames = ['Greta Thunberg', 'Malala Yousafzai', 'Ai Weiwei', 'Alexei Navalny'];\n            if (movementNames.includes(publicCard.name)) {\n              subcategories.add('Bewegung');\n            }\n\n            // NGO/Think-Tank\n            const ngoNames = ['Bill Gates', 'George Soros', 'Jennifer Doudna', 'Noam Chomsky', 'Anthony Fauci'];\n            if (ngoNames.includes(publicCard.name)) {\n              subcategories.add('NGO/Think-Tank');\n            }\n\n            // Intelligenz\n            const intelligenceNames = ['Jennifer Doudna', 'Noam Chomsky', 'Edward Snowden', 'Julian Assange', 'Yuval Noah Harari', 'Ai Weiwei', 'Alexei Navalny', 'Anthony Fauci'];\n            if (intelligenceNames.includes(publicCard.name)) {\n              subcategories.add('Intelligenz');\n            }\n\n            // Medien\n            const mediaNames = ['Oprah Winfrey'];\n            if (mediaNames.includes(publicCard.name)) {\n              subcategories.add('Medien');\n            }\n          }\n        }\n      }\n    });\n\n    return {\n      keywords: Array.from(keywords),\n      subcategories: Array.from(subcategories)\n    };\n  }, [gameState]);\n\n  // Info-Panels zeichnen\n  const drawInfoPanels = useCallback((ctx: CanvasRenderingContext2D) => {\n    const { keywords, subcategories } = getActiveKeywordsAndSubcategories(1);\n\n    // Panel fÃ¼r RegierungsschlÃ¼sselwÃ¶rter (rechts neben Regierungsslots)\n    const govPanelX = 1640 + 256 + 20; // Nach dem letzten permanenten Slot\n    const govPanelY = 300; // Auf HÃ¶he der Regierungsslots\n    const govPanelW = 120;\n    const govPanelH = 256;\n\n    // Regierungspanel Hintergrund\n    ctx.fillStyle = 'rgba(255, 197, 0, 0.15)';\n    ctx.fillRect(govPanelX, govPanelY, govPanelW, govPanelH);\n    ctx.strokeStyle = 'rgba(255, 197, 0, 0.3)';\n    ctx.strokeRect(govPanelX + 0.5, govPanelY + 0.5, govPanelW - 1, govPanelH - 1);\n\n    // Regierungspanel Titel\n    ctx.fillStyle = 'rgba(255, 197, 0, 0.9)';\n    ctx.font = 'bold 12px sans-serif';\n    ctx.textAlign = 'center';\n    ctx.fillText('Regierung', govPanelX + govPanelW/2, govPanelY + 16);\n\n    // SchlÃ¼sselwÃ¶rter auflisten\n    ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\n    ctx.font = '11px sans-serif';\n    ctx.textAlign = 'left';\n    if (keywords.length > 0) {\n      keywords.forEach((keyword, idx) => {\n        ctx.fillText(`â€¢ ${keyword}`, govPanelX + 8, govPanelY + 36 + idx * 16);\n      });\n    } else {\n      ctx.fillStyle = 'rgba(255, 255, 255, 0.5)';\n      ctx.fillText('Keine aktiven', govPanelX + 8, govPanelY + 36);\n      ctx.fillText('SchlÃ¼sselwÃ¶rter', govPanelX + 8, govPanelY + 52);\n    }\n\n    // Panel fÃ¼r Ã–ffentlichkeits-Unterkategorien (rechts neben Ã–ffentlichkeitsslots)\n    const pubPanelX = 1640 + 256 + 20;\n    const pubPanelY = 580; // Auf HÃ¶he der Ã–ffentlichkeitsslots\n    const pubPanelW = 120;\n    const pubPanelH = 256;\n\n    // Ã–ffentlichkeitspanel Hintergrund\n    ctx.fillStyle = 'rgba(0, 255, 0, 0.15)';\n    ctx.fillRect(pubPanelX, pubPanelY, pubPanelW, pubPanelH);\n    ctx.strokeStyle = 'rgba(0, 255, 0, 0.3)';\n    ctx.strokeRect(pubPanelX + 0.5, pubPanelY + 0.5, pubPanelW - 1, pubPanelH - 1);\n\n    // Ã–ffentlichkeitspanel Titel\n    ctx.fillStyle = 'rgba(0, 255, 0, 0.9)';\n    ctx.font = 'bold 12px sans-serif';\n    ctx.textAlign = 'center';\n    ctx.fillText('Ã–ffentlichkeit', pubPanelX + pubPanelW/2, pubPanelY + 16);\n\n    // Unterkategorien auflisten\n    ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\n    ctx.font = '11px sans-serif';\n    ctx.textAlign = 'left';\n    if (subcategories.length > 0) {\n      subcategories.forEach((subcategory, idx) => {\n        const displayName = subcategory.length > 12 ? subcategory.substring(0, 10) + '...' : subcategory;\n        ctx.fillText(`â€¢ ${displayName}`, pubPanelX + 8, pubPanelY + 36 + idx * 16);\n      });\n    } else {\n      ctx.fillStyle = 'rgba(255, 255, 255, 0.5)';\n      ctx.fillText('Keine aktiven', pubPanelX + 8, pubPanelY + 36);\n      ctx.fillText('Unterkategorien', pubPanelX + 8, pubPanelY + 52);\n    }\n  }, [getActiveKeywordsAndSubcategories]);\n\n  // Move diagnostics to draw callback to ensure they run after canvas is actually rendered\n  const runDiagnostics = useCallback(() => {\n    try {\n      const handZones = clickZonesRef.current.filter(z => z.data && z.data.type === 'hand_p1');\n      const uiUIDs = handZones.map(z => (z.data.card && (z.data.card.uid ?? z.data.card.id)) ).filter(Boolean);\n      const stateHand = gameState.hands && gameState.hands[1] ? gameState.hands[1] : [];\n      const stateUIDs = stateHand.map((c: any) => c.uid ?? c.id).filter(Boolean);\n\n      const missingInState = uiUIDs.filter((u: any) => !stateUIDs.includes(u));\n      const missingInUI = stateUIDs.filter((u: any) => !uiUIDs.includes(u));\n\n      // Only warn if there are cards in UI that don't exist in state (real error)\n      // Don't warn about missing UI cards due to limited slot capacity\n      if (missingInState.length > 0) {\n        const mismatch = {\n          ts: Date.now(),\n          uiCount: uiUIDs.length,\n          stateCount: stateUIDs.length,\n          uiUIDs,\n          stateUIDs,\n          missingInState,\n          missingInUI,\n          stack: (new Error('mismatch-stack')).stack\n        };\n        (window as any).__politicardDebug = {\n          ...(window as any).__politicardDebug,\n          mismatch: [ ...(window as any).__politicardDebug?.mismatch || [] ].slice(-19).concat([mismatch])\n        };\n        // Clear, then log to console so user can copy/paste trace\n        console.warn('POLITICARD DIAGNOSTIC: hand mismatch detected', mismatch);\n      }\n    } catch (e) {\n      // swallow diagnostic errors to avoid breaking rendering\n      console.error('Diagnostic error', e);\n    }\n  }, [gameState.hands]);\n\n  const draw = useCallback(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n\n    // Detect influence increases and start animations\n    try {\n      const currSnapshot: Record<string, number> = {};\n      const collect = (c: any) => {\n        if (!c) return;\n        if ((c as any).kind !== 'pol') return;\n        const uid = c.uid ?? (c.id != null ? String(c.id) : null);\n        if (!uid) return;\n        currSnapshot[uid] = (c.influence ?? 0) as number;\n      };\n      // board rows\n      (gameState.board[1].aussen || []).forEach(collect);\n      (gameState.board[2].aussen || []).forEach(collect);\n      (gameState.board[1].innen || []).forEach(collect);\n      (gameState.board[2].innen || []).forEach(collect);\n      // permanent slots\n      collect(gameState.permanentSlots[1].government as any);\n      collect(gameState.permanentSlots[2].government as any);\n      collect(gameState.permanentSlots[1].public as any);\n      collect(gameState.permanentSlots[2].public as any);\n\n      const now = performance.now();\n      Object.keys(currSnapshot).forEach(uid => {\n        const curr = currSnapshot[uid] ?? 0;\n        const prev = prevInfluencesRef.current[uid] ?? curr;\n        if (curr > prev) {\n          const delta = curr - prev;\n          const list = influenceAnimRef.current.get(uid) || [];\n          list.push({ start: now, duration: 900, amount: delta });\n          influenceAnimRef.current.set(uid, list);\n        }\n        prevInfluencesRef.current[uid] = curr;\n      });\n    } catch (e) {\n      // ignore\n    }\n\n    // Clear canvas\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    // Clear click zones\n    clickZonesRef.current = [];\n\n    // Background: prefer PNG if configured\n    if (LAYOUT.background?.enabled && LAYOUT.background?.src) {\n      if (backgroundImageRef.current) {\n        ctx.drawImage(backgroundImageRef.current, 0, 0, canvas.width, canvas.height);\n      } else {\n        ctx.fillStyle = '#0c131b';\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\n      }\n    } else {\n      ctx.fillStyle = '#0c131b';\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n    }\n\n    // Apply UI transform (new signature)\n    const { scale, offsetX, offsetY } = getUiTransform(canvas.width, canvas.height);\n    ctx.save();\n    ctx.translate(offsetX, offsetY);\n    ctx.scale(scale, scale);\n\n    // Draw opponent board (top rows) - clickable im Dev Mode\n    // Draw opponent board using new layout system\n    const opponentPublicRects = getPublicRects('opponent');\n    const opponentGovRects = getGovernmentRects('opponent');\n\n    // Draw opponent public slots\n    opponentPublicRects.forEach((s: { x: number; y: number; w: number; h: number }, idx: number) => {\n      const card = gameState.board[2].innen[idx];\n      if (card) {\n        const clickZone = drawCardAt(ctx, card, s.x, s.y, s.w, false, false, 2);\n        // Register hover/click zone for opponent card (always) - include card for hover info\n        clickZonesRef.current.push({\n          ...clickZone,\n          data: { type: 'board_card', player: 2, lane: 'innen', index: idx, card }\n        });\n      }\n      else {\n        // draw placeholder symbol for empty public slot\n        const img = slotSymbolImgsRef.current.get('public');\n        drawSlotIconWithPulse(ctx, img, s.x, s.y, s.w, s.h, 0.4);\n        // Register empty slot click zone in dev mode\n        if (devMode) {\n          clickZonesRef.current.push({\n            x: s.x, y: s.y, w: s.w, h: s.h,\n            data: { type: 'row_slot', player: 2, lane: 'innen', index: idx }\n          });\n        }\n      }\n    });\n\n    // Draw opponent government slots\n    opponentGovRects.forEach((s: { x: number; y: number; w: number; h: number }, idx: number) => {\n      const card = gameState.board[2].aussen[idx];\n      const corrActive = !!((gameState as any).pendingAbilitySelect && (gameState as any).pendingAbilitySelect.type === 'corruption_steal');\n      if (card) {\n        const clickZone = drawCardAt(ctx, card, s.x, s.y, s.w, false, false, 2);\n        // Register hover/click zone for opponent card (always) - include card for hover info\n        clickZonesRef.current.push({\n          ...clickZone,\n          data: { type: 'board_card', player: 2, lane: 'aussen', index: idx, card }\n        });\n        // When corruption target selection is active, register exact slot rectangle for click detection\n        if (corrActive) {\n          clickZonesRef.current.push({\n            x: s.x,\n            y: s.y,\n            w: s.w,\n            h: s.h,\n            data: { type: 'board_card', player: 2, lane: 'aussen', index: idx, card }\n          });\n        }\n      }\n      else {\n        const img = slotSymbolImgsRef.current.get('government');\n        drawSlotIconWithPulse(ctx, img, s.x, s.y, s.w, s.h, 0.1);\n        // Register empty slot click zone only in dev mode\n        if (devMode) {\n          clickZonesRef.current.push({\n            x: s.x, y: s.y, w: s.w, h: s.h,\n            data: { type: 'row_slot', player: 2, lane: 'aussen', index: idx }\n          });\n        }\n      }\n    });\n\n    // Draw opponent permanent slots (show icons even when not current)\n    try {\n      const permGovZoneOpp = getZone('slot.permanent.government.opponent');\n      if (permGovZoneOpp) {\n        const card = gameState.permanentSlots[2].government;\n        const [ox, oy, ow, oh] = permGovZoneOpp.rectPx;\n        if (card) {\n          drawSingleSlot(ctx, 'slot.permanent.government.opponent', card, 'permanent_government', 2);\n        } else {\n          const img = slotSymbolImgsRef.current.get('dauerhaft');\n          drawSlotIconWithPulse(ctx, img, ox, oy, ow, oh, 0.3);\n          // Register empty slot click zone in dev mode\n          if (devMode) {\n            clickZonesRef.current.push({\n              x: ox, y: oy, w: ow, h: oh,\n              data: { type: 'empty_slot', slot: 'permanent_government', player: 2 }\n            });\n          }\n        }\n      }\n    } catch (e) {}\n    try {\n      const permPubZoneOpp = getZone('slot.permanent.public.opponent');\n      if (permPubZoneOpp) {\n        const card = gameState.permanentSlots[2].public;\n        const [ox2, oy2, ow2, oh2] = permPubZoneOpp.rectPx;\n        if (card) {\n          drawSingleSlot(ctx, 'slot.permanent.public.opponent', card, 'permanent_public', 2);\n        } else {\n          const img = slotSymbolImgsRef.current.get('dauerhaft');\n          drawSlotIconWithPulse(ctx, img, ox2, oy2, ow2, oh2, 0.7);\n          // Register empty slot click zone in dev mode\n          if (devMode) {\n            clickZonesRef.current.push({\n              x: ox2, y: oy2, w: ow2, h: oh2,\n              data: { type: 'empty_slot', slot: 'permanent_public', player: 2 }\n            });\n          }\n        }\n      }\n    } catch (e) {}\n\n    // Draw player board (middle rows)\n    // Draw player board using new layout system\n    const playerPublicRects = getPublicRects('player');\n    const playerGovRects = getGovernmentRects('player');\n\n    // Draw player public slots\n    playerPublicRects.forEach((s: { x: number; y: number; w: number; h: number }, idx: number) => {\n      const card = gameState.board[1].innen[idx];\n      if (card) {\n        const clickZone = drawCardAt(ctx, card, s.x, s.y, s.w, false, false, 1);\n        // register card zone including card so hover panel can show details\n        clickZonesRef.current.push({\n          ...clickZone,\n          data: { type: 'board_card', player: 1, lane: 'innen', index: idx, card }\n        });\n      } else {\n        // Empty slot click zone and draw public symbol\n        // Draw unified pulsing icon for empty public slot\n        const img = slotSymbolImgsRef.current.get('public');\n        drawSlotIconWithPulse(ctx, img, s.x, s.y, s.w, s.h, 0.4);\n        clickZonesRef.current.push({\n          x: s.x, y: s.y, w: s.w, h: s.h,\n          data: { type: 'row_slot', player: 1, lane: 'innen', index: idx }\n        });\n      }\n    });\n\n    // Draw player government slots\n    playerGovRects.forEach((s: { x: number; y: number; w: number; h: number }, idx: number) => {\n      const card = gameState.board[1].aussen[idx];\n      if (card) {\n        const clickZone = drawCardAt(ctx, card, s.x, s.y, s.w, false, false, 1);\n        clickZonesRef.current.push({\n          ...clickZone,\n          data: { type: 'board_card', player: 1, lane: 'aussen', index: idx, card }\n        });\n      } else {\n        // Empty slot click zone and draw government symbol\n        const img = slotSymbolImgsRef.current.get('government');\n        drawSlotIconWithPulse(ctx, img, s.x, s.y, s.w, s.h, 0.1);\n        clickZonesRef.current.push({\n          x: s.x, y: s.y, w: s.w, h: s.h,\n          data: { type: 'row_slot', player: 1, lane: 'aussen', index: idx }\n        });\n      }\n    });\n\n    // --- GOV PLACEMENT SPRITESHEET OVERLAY (frame-based) ---\n    try {\n      const sprites = govSpritesRef.current;\n      const gif = govGifRef.current;\n      const anims = (visualEffects && visualEffects.playAnimsRef && visualEffects.playAnimsRef.current) || [];\n\n      // Start sprite animation when a playAnim for a gov-card is active and maps to a slot\n      const now = performance.now();\n      // Prefer mutating the source anim array so entries are consumed and don't retrigger repeatedly\n      const animsArr: Array<{ uid: string | number; started: number; duration: number; lane?: string }> = (visualEffects && visualEffects.playAnimsRef && visualEffects.playAnimsRef.current) || ((window as any).__pc_play_anims = (window as any).__pc_play_anims || []);\n\n      // Iterate backwards and consume processed animations to ensure one-shot playback\n      for (let i = animsArr.length - 1; i >= 0; i--) {\n        const a = animsArr[i];\n        try {\n          // handle specialized 'hit:' playAnims which indicate target-hit sprites by slot key\n          if (typeof a.uid === 'string' && a.uid.indexOf('hit:') === 0) {\n            const inner = a.uid.slice(4); // '1.aussen.0'\n            if (!hitSpriteStateRef.current[inner]) {\n              hitSpriteStateRef.current[inner] = { started: now, frameCount: 25, frameDuration: 30 };\n              animsArr.splice(i, 1);\n            }\n            continue;\n          }\n        } catch (e) {}\n\n        // find the zone/slot for this uid\n        const zone = clickZonesRef.current.find(z => z.data && z.data.card && ((z.data.card.uid ?? String(z.data.card.id)) === a.uid));\n        if (!zone) continue;\n\n        // determine if gov slot or instant\n        let isGov = false;\n        let isInstant = false;\n        try {\n          const dt = zone.data || {};\n          if (dt.type === 'row_slot' && dt.lane === 'aussen') isGov = true;\n          if (dt.type === 'board_card' && dt.lane === 'aussen') isGov = true;\n          if (dt.slot && typeof dt.slot === 'string' && dt.slot.includes('government')) isGov = true;\n          if (dt.type === 'activate_instant' || (dt.slot && typeof dt.slot === 'string' && dt.slot.includes('instant'))) isInstant = true;\n        } catch (e) {}\n        if (!isGov && !isInstant) continue;\n\n        const player = zone.data.player ?? 1;\n        const lane = zone.data.lane ?? 'aussen';\n        const idx = zone.data.index ?? 0;\n        const key = `${player}.${lane}.${idx}`;\n\n        // initialize sprite state if not present; consume the anim entry only when we actually start playback\n        let startedThis = false;\n        if (isGov) {\n          if (!govSpriteStateRef.current[key]) {\n            govSpriteStateRef.current[key] = { started: now, frameCount: 14, frameDuration: 40 }; // 14 frames @ ~40ms -> ~560ms\n            startedThis = true;\n          }\n        }\n        if (isInstant) {\n          const instKey = `${player}.instant.${idx}`;\n          if (!instantSpriteStateRef.current[instKey]) {\n            instantSpriteStateRef.current[instKey] = { started: now, frameCount: 14, frameDuration: 40 };\n            startedThis = true;\n          }\n        }\n        if (startedThis) {\n          animsArr.splice(i, 1);\n        }\n      }\n\n      // draw running sprite animations per gov slot\n      Object.keys(govSpriteStateRef.current).forEach(k => {\n        const st = govSpriteStateRef.current[k];\n        const elapsed = now - st.started;\n        const total = st.frameCount * st.frameDuration;\n        if (elapsed > total) {\n          // animation finished; remove state\n          delete govSpriteStateRef.current[k];\n          return;\n        }\n        const frame = Math.floor(elapsed / st.frameDuration);\n\n        // parse key -> player.lane.index\n        const parts = k.split('.');\n        const player = Number(parts[0]) || 1;\n        const lane = parts[1] || 'aussen';\n        const index = Number(parts[2] || 0);\n\n        // compute slot rect for this gov slot (player or opponent board)\n        const rect = player === 1 ? playerGovRects[index] : opponentGovRects[index];\n        if (!rect) return;\n\n        // spritesheet: frame N located at x = N*256, y = 0\n        if (sprites && sprites.complete) {\n          const sx = frame * 256;\n          const sy = 0;\n          const sw = 256;\n          const sh = 256;\n          // draw exactly matching the slot rect size to avoid scaling mismatches\n          const dx = rect.x;\n          const dy = rect.y;\n          ctx.drawImage(sprites, sx, sy, sw, sh, dx, dy, rect.w, rect.h);\n        } else if (gif && gif.complete) {\n          // fallback to static gif if spritesheet missing\n          ctx.drawImage(gif, rect.x, rect.y, rect.w, rect.h);\n        }\n      });\n      // --- INSTANT INITIATIVE SPRITESHEET (draw on instant slot) ---\n      try {\n        const spritesI = instantSpritesRef.current;\n        const nowI = performance.now();\n        Object.keys(instantSpriteStateRef.current).forEach(k => {\n          const st = instantSpriteStateRef.current[k];\n          const elapsed = nowI - st.started;\n          const total = st.frameCount * st.frameDuration;\n          if (elapsed > total) { delete instantSpriteStateRef.current[k]; return; }\n          const frame = Math.floor(elapsed / st.frameDuration);\n          const parts = k.split('.');\n          const player = Number(parts[0]) || 1;\n          const index = Number(parts[2] || 0);\n          const rects = getSofortRect(player ? 'player' : 'opponent');\n          // getSofortRect returns one rect; map by player/context â€” fallback to zone\n          const instantRect = getZone('slot.instant.player').rectPx;\n          const [ix, iy, iw, ih] = instantRect;\n          if (spritesI && spritesI.complete) {\n            const sx = frame * 256; const sy = 0; const sw = 256; const sh = 256;\n            ctx.drawImage(spritesI, sx, sy, sw, sh, ix, iy, iw, ih);\n          }\n        });\n      } catch (e) {}\n      // --- HIT / TARGET SPRITESHEET (draw as overlay on targeted slot) ---\n      try {\n        const spritesH = hitSpritesRef.current;\n        const nowH = performance.now();\n        Object.keys(hitSpriteStateRef.current).forEach(k => {\n          const st = hitSpriteStateRef.current[k];\n          const elapsed = nowH - st.started;\n          const total = st.frameCount * st.frameDuration;\n          if (elapsed > total) { delete hitSpriteStateRef.current[k]; return; }\n          const frame = Math.floor(elapsed / st.frameDuration);\n\n          // parse key -> player.lane.index\n          const parts = k.split('.');\n          const player = Number(parts[0]) || 1;\n          const lane = parts[1] || 'aussen';\n          const index = Number(parts[2] || 0);\n\n          // compute slot rect for this gov slot (attempt gov then public)\n          const rect = (player === 1 ? playerGovRects : opponentGovRects)[index] || (player === 1 ? playerPublicRects : opponentPublicRects)[index];\n          if (!rect) return;\n\n          if (spritesH && spritesH.complete) {\n            const sx = frame * 256;\n            const sy = 0;\n            const sw = 256;\n            const sh = 256;\n            const dx = rect.x;\n            const dy = rect.y;\n            ctx.drawImage(spritesH, sx, sy, sw, sh, dx, dy, rect.w, rect.h);\n          }\n        });\n      } catch (e) {}\n    } catch (e) {}\n\n    // Draw player permanent slots (draw symbols if empty)\n    // permanent government\n    const permGovZone = getZone('slot.permanent.government.player');\n    if (permGovZone) {\n      const card = gameState.permanentSlots[1].government;\n      const [x, y, w, h] = permGovZone.rectPx;\n      if (card) {\n        drawSingleSlot(ctx, 'slot.permanent.government.player', card, 'permanent_government', 1);\n      } else {\n        // Draw all slot icons using unified helper (so 'dauerhaft' used visually for empty permanent gov slot)\n        const img = slotSymbolImgsRef.current.get('dauerhaft');\n        drawSlotIconWithPulse(ctx, img, x, y, w, h, 0.2);\n      }\n    }\n    // permanent public\n    const permPubZone = getZone('slot.permanent.public.player');\n    if (permPubZone) {\n      const card = gameState.permanentSlots[1].public;\n      const [x2, y2, w2, h2] = permPubZone.rectPx;\n      if (card) {\n        drawSingleSlot(ctx, 'slot.permanent.public.player', card, 'permanent_public', 1);\n      } else {\n        // Draw all slot icons using unified helper (so 'dauerhaft' used visually for empty permanent public slot)\n        const img = slotSymbolImgsRef.current.get('dauerhaft');\n        drawSlotIconWithPulse(ctx, img, x2, y2, w2, h2, 0.9);\n      }\n    }\n\n    // Draw instant slots (both players) and placeholder if empty\n    const instantPlayerZone = getZone('slot.instant.player');\n    if (instantPlayerZone) {\n      const card = gameState.board[1].sofort[0];\n      const [x, y, w, h] = instantPlayerZone.rectPx;\n      if (card) drawSingleSlot(ctx, 'slot.instant.player', card, 'instant', 1);\n      else {\n        // Use unified icon draw helper for instant slot\n        const img = slotSymbolImgsRef.current.get('sofort');\n        drawSlotIconWithPulse(ctx, img, x, y, w, h, 0.0);\n      }\n    }\n\n    // Draw interventions strip (player)\n    // We draw symbol if empty\n    const interventionsZone = getZone('interventions.player');\n    if (interventionsZone) {\n      const [zx, zy, zw, zh] = interventionsZone.rectPx;\n      const card = gameState.traps[1] && gameState.traps[1][0];\n      if (card) drawInterventionsP1(ctx);\n      else {\n        const img = slotSymbolImgsRef.current.get('intervention');\n        drawSlotIconWithPulse(ctx, img, zx, zy, zw, zh, 0.6);\n      }\n    }\n\n    // Draw interventions strip (opponent) - nur im Dev Mode\n    if (devMode) {\n      drawInterventionsP2(ctx);\n    }\n\n    // Draw hand (P1)\n    drawHandP1(ctx);\n\n    // ðŸ”§ DEV MODE: Draw hand (P2) - nur im Dev Mode\n    if (devMode) {\n      drawHandP2(ctx);\n    }\n\n    // Draw info panels\n    drawInfoPanels(ctx);\n\n    // Draw corruption mode indicator\n    const corrActive = !!((gameState as any).pendingAbilitySelect && (gameState as any).pendingAbilitySelect.type === 'corruption_steal');\n    if (corrActive) {\n      ctx.save();\n      ctx.fillStyle = 'rgba(255, 0, 0, 0.8)';\n      ctx.font = 'bold 32px sans-serif';\n      ctx.textAlign = 'center';\n      ctx.fillText('ðŸ”¥ CORRUPTION TARGET SELECTION ACTIVE ðŸ”¥', 960, 100);\n\n      ctx.fillStyle = 'rgba(255, 255, 0, 0.9)';\n      ctx.font = 'bold 24px sans-serif';\n      ctx.fillText('Click on opponent government card to target', 960, 140);\n      ctx.restore();\n    }\n\n    // --- VISUAL EFFECTS: Particle bursts, card pop scale, initiative ripple & AP pop ---\n    try {\n      const now = performance.now();\n      const { particlesRef, popsRef, ripplesRef, apLabelsRef, reducedMotion } = (visualEffects || {}) as any;\n\n      const parts: any[] = particlesRef.current || [];\n      if (!reducedMotion) {\n        for (let i = parts.length - 1; i >= 0; i--) {\n          const p = parts[i];\n          const age = now - p.start;\n          if (age > p.life) {\n            parts.splice(i, 1);\n            continue;\n          }\n          p.vy += (p.gravity || 0.09);\n          p.x += p.vx;\n          p.y += p.vy;\n          const t = 1 - age / p.life;\n          ctx.save();\n          ctx.globalAlpha = Math.max(0, Math.min(1, t));\n          ctx.fillStyle = p.color || '#ffd166';\n          ctx.beginPath();\n          ctx.arc(p.x, p.y, (p.size || 4) * t, 0, Math.PI * 2);\n          ctx.fill();\n          ctx.restore();\n        }\n        particlesRef.current = parts;\n\n        const pops: any[] = popsRef.current || [];\n        pops.forEach((pop) => {\n          const p = Math.min(1, Math.max(0, (now - pop.started) / pop.duration));\n          const eased = 1 + 0.12 * (1 - Math.pow(1 - p, 3));\n          const zone = clickZonesRef.current.find(z => z.data && z.data.card && ((z.data.card.uid ?? String(z.data.card.id)) === pop.uid));\n          if (!zone) return;\n          ctx.save();\n          ctx.translate(zone.x + zone.w / 2, zone.y + zone.h / 2);\n          ctx.scale(eased, eased);\n          ctx.globalAlpha = 0.12 * (1 - p);\n          ctx.fillStyle = '#ffffff';\n          ctx.fillRect(-zone.w / 2, -zone.h / 2, zone.w, zone.h);\n          ctx.restore();\n        });\n\n        const ripples: any[] = ripplesRef.current || [];\n        for (let i = ripples.length - 1; i >= 0; i--) {\n          const r = ripples[i];\n          const p = Math.min(1, Math.max(0, (now - r.started) / r.duration));\n          if (p >= 1) { ripples.splice(i, 1); continue; }\n          const radius = r.radius * (0.8 + 1.8 * p);\n          ctx.save();\n          const g = ctx.createRadialGradient(r.cx, r.cy, radius * 0.1, r.cx, r.cy, radius);\n          g.addColorStop(0, `rgba(255,255,255,${0.12 * (1 - p)})`);\n          g.addColorStop(1, `rgba(255,255,255,0)`);\n          ctx.fillStyle = g as any;\n          ctx.beginPath();\n          ctx.arc(r.cx, r.cy, radius, 0, Math.PI * 2);\n          ctx.fill();\n          ctx.restore();\n\n          if (r.showAp && !r._apSpawned) {\n            apLabelsRef.current = apLabelsRef.current || [];\n            apLabelsRef.current.push({ x: r.apX, y: r.apY, started: now, duration: 800, text: '+1' });\n            r._apSpawned = true;\n          }\n        }\n        ripplesRef.current = ripples;\n\n        const apl: any[] = apLabelsRef.current || [];\n        for (let i = apl.length - 1; i >= 0; i--) {\n          const l = apl[i];\n          const p = Math.min(1, Math.max(0, (now - l.started) / l.duration));\n          if (p >= 1) { apl.splice(i, 1); continue; }\n          ctx.save();\n          ctx.globalAlpha = 1 - p;\n          ctx.fillStyle = '#ffdd57';\n          ctx.font = 'bold 22px sans-serif';\n          ctx.textAlign = 'center';\n          ctx.fillText(l.text, l.x, l.y - 20 * p);\n          ctx.restore();\n        }\n        apLabelsRef.current = apl;\n      } else {\n        const apl: any[] = apLabelsRef.current || [];\n        for (let i = apl.length - 1; i >= 0; i--) {\n          const l = apl[i];\n          const p = Math.min(1, Math.max(0, (now - l.started) / l.duration));\n          if (p >= 1) { apl.splice(i, 1); continue; }\n          ctx.save();\n          ctx.globalAlpha = 1 - p;\n          ctx.fillStyle = '#ffdd57';\n          ctx.font = 'bold 18px sans-serif';\n          ctx.textAlign = 'center';\n          ctx.fillText(l.text, l.x, l.y - 10 * p);\n          ctx.restore();\n        }\n        apLabelsRef.current = apl;\n      }\n    } catch (e) {}\n\n    // --- Overlay pass: draw influence pulse ring and +N labels on top of all cards ---\n    try {\n      const now = performance.now();\n      // iterate over stored anims\n      influenceAnimRef.current.forEach((anims, uid) => {\n        // find card position by scanning clickZones\n        const zone = clickZonesRef.current.find(z => z.data && ((z.data.card && ((z.data.card.uid ?? String(z.data.card.id)) === uid)) || (z.data.card && z.data.card.uid === uid)) );\n        if (!zone) return;\n        const cx = zone.x + zone.w / 2;\n        const cy = zone.y + zone.h / 2;\n        // calculate aggregate pulse for this uid\n        let maxPulse = 0;\n        let totalAmount = 0;\n        const remaining: Array<{ start: number; duration: number; amount: number }> = [];\n        anims.forEach(a => {\n          const p = Math.min(1, Math.max(0, (now - a.start) / a.duration));\n          const pulse = Math.pow(Math.max(0, 1 - p), 2);\n          if (pulse > maxPulse) maxPulse = pulse;\n          if (p < 1) {\n            remaining.push(a);\n            totalAmount += a.amount;\n          }\n        });\n\n        // update list\n        if (remaining.length > 0) influenceAnimRef.current.set(uid, remaining);\n        else influenceAnimRef.current.delete(uid);\n\n        if (maxPulse > 0.001) {\n          // draw a soft ring to the right-bottom of influence number\n          const ringRadius = Math.max(8, zone.w * 0.08) * (1 + maxPulse * 0.6);\n          const ringX = zone.x + zone.w - 28; // near bottom-right where influence text lives\n          const ringY = zone.y + zone.h - 20;\n\n          ctx.save();\n          ctx.beginPath();\n          ctx.strokeStyle = `rgba(46, 204, 113, ${0.9 * maxPulse})`;\n          ctx.lineWidth = Math.max(2, Math.ceil(6 * maxPulse));\n          ctx.arc(ringX, ringY, ringRadius, 0, Math.PI * 2);\n          ctx.stroke();\n          ctx.restore();\n        }\n\n        if (totalAmount > 0) {\n          // floating +N to the right of influence number\n          const labelX = zone.x + zone.w - 12;\n          const labelY = zone.y + zone.h - 32 - (Math.random() * 6); // slight jitter\n          ctx.save();\n          ctx.fillStyle = '#2ecc71';\n          ctx.font = 'bold 16px sans-serif';\n          ctx.textAlign = 'left';\n          ctx.textBaseline = 'middle';\n          ctx.fillText(`+${totalAmount}`, labelX, labelY);\n          ctx.restore();\n        }\n      });\n    } catch (e) {\n      // ignore overlay errors\n    }\n\n    // --- Outline pass: draw a subtle, slightly pulsing 257x257 square around 256x256 slots ---\n    try {\n      const now2 = performance.now();\n      clickZonesRef.current.forEach((z, i) => {\n        if (!z) return;\n        const w = z.w || 0;\n        const h = z.h || 0;\n        // only target 256x256 slot-sized zones (covers the icons)\n        if (Math.abs(w - 256) > 0.1 || Math.abs(h - 256) > 0.1) return;\n        const x = z.x;\n        const y = z.y;\n\n        // Color palette (rgb)\n        const rgbTeal = '20,184,166';\n        const rgbBurg = '127,29,29';\n        const rgbPurple = '139,92,246';\n        const rgbYellow = '250,204,21';\n        const rgbOrange = '251,146,60';\n\n        // Determine slot semantic\n        let slotType: 'government' | 'public' | 'permanent' | 'instant' | 'intervention' | 'default' = 'default';\n        try {\n          const dt = z.data || {};\n          if (dt.slot && typeof dt.slot === 'string') {\n            if (dt.slot.includes('government')) slotType = 'government';\n            else if (dt.slot.includes('public')) slotType = 'public';\n            else if (dt.slot.includes('permanent')) slotType = 'permanent';\n            else if (dt.slot.includes('instant')) slotType = 'instant';\n          }\n          if (dt.type === 'row_slot' && dt.lane === 'aussen') slotType = 'government';\n          if (dt.type === 'row_slot' && dt.lane === 'innen') slotType = 'public';\n          if (dt.type === 'trap_p1' || dt.type === 'trap_p2' || (dt.card && dt.card.kind === 'trap')) slotType = 'intervention';\n          if (dt.type === 'activate_instant' || dt.slot === 'instant') slotType = 'instant';\n          if (dt.slot === 'permanent_government' || dt.slot === 'permanent_public' || dt.slot === 'permanent') slotType = 'permanent';\n        } catch (e) {}\n\n        const pulse = 0.5 + 0.5 * Math.sin(now2 / 350 + i);\n        const alpha = 0.06 + 0.12 * pulse; // subtle alpha\n        const lw = 1 + 2 * pulse; // line width between 1 and 3\n\n        // Create gradient based on slot type\n        let grad: CanvasGradient | null = null;\n        try {\n          grad = ctx.createLinearGradient(x, y, x + w, y + h);\n          if (slotType === 'government') {\n            grad.addColorStop(0, `rgba(${rgbTeal},1)`);\n            grad.addColorStop(1, `rgba(${rgbBurg},1)`);\n          } else if (slotType === 'public') {\n            grad.addColorStop(0, `rgba(${rgbBurg},1)`);\n            grad.addColorStop(1, `rgba(${rgbTeal},1)`);\n          } else if (slotType === 'permanent') {\n            grad.addColorStop(0, `rgba(${rgbPurple},1)`);\n            grad.addColorStop(1, `rgba(${rgbPurple},1)`);\n          } else if (slotType === 'instant') {\n            grad.addColorStop(0, `rgba(${rgbYellow},1)`);\n            grad.addColorStop(1, `rgba(${rgbYellow},1)`);\n          } else if (slotType === 'intervention') {\n            grad.addColorStop(0, `rgba(${rgbOrange},1)`);\n            grad.addColorStop(1, `rgba(${rgbOrange},1)`);\n          } else {\n            grad.addColorStop(0, `rgba(255,255,255,1)`);\n            grad.addColorStop(1, `rgba(255,255,255,1)`);\n          }\n        } catch (e) {\n          grad = null;\n        }\n\n        ctx.save();\n        if (grad) ctx.strokeStyle = grad as any;\n        else ctx.strokeStyle = `rgba(255,255,255,${alpha.toFixed(3)})`;\n        ctx.globalAlpha = alpha;\n        ctx.lineWidth = lw;\n        // draw 257x257 centered so that it encloses the 256 slot\n        ctx.strokeRect(x - 0.5, y - 0.5, w + 1, h + 1);\n        ctx.restore();\n      });\n    } catch (e) {\n      // ignore outline errors\n    }\n\n    ctx.restore();\n\n    // expose zones for debug snapshot\n    (window as any).__politicardDebug = {\n      uiTransform: getUiTransform(canvas.width, canvas.height),\n      canvasSize: { width: canvas.width, height: canvas.height },\n      zones: LAYOUT.zones,\n      clickZones: clickZonesRef.current.slice(0, 1000)\n    };\n\n    // Build canonical slotPositions map for animations/debugging\n    try {\n      const map: Record<string, { x: number; y: number; w: number; h: number; cx: number; cy: number }> = {};\n      clickZonesRef.current.forEach(z => {\n        const d = z.data || {};\n        // support row_slot, board_card, slot_card shapes\n        if (d.type === 'row_slot' || d.type === 'board_card' || d.type === 'slot_card' || d.type === 'hand_p1' || d.type === 'hand_p2') {\n          const player = d.player ?? (d.type === 'hand_p2' ? 2 : 1);\n          const lane = d.lane ?? (typeof d.slot === 'string' ? d.slot : (d.type === 'hand_p2' ? 'hand' : 'unknown'));\n          let index: number;\n          if (d.index != null) {\n            index = d.index;\n          } else if (d.card) {\n            // prefer explicit slotIndex, fallback to card.index, otherwise 0\n            index = (d.card.slotIndex != null) ? d.card.slotIndex : ((d.card.index != null) ? d.card.index : 0);\n          } else {\n            index = 0;\n          }\n          const key = `${player}.${lane}.${index}`;\n          map[key] = { x: z.x, y: z.y, w: z.w, h: z.h, cx: z.x + z.w / 2, cy: z.y + z.h / 2 };\n        }\n      });\n      slotPositionsRef.current = map;\n      (window as any).__politicardDebug = { ...(window as any).__politicardDebug, slotPositions: slotPositionsRef.current };\n    } catch (e) {\n      // don't let debug mapping break rendering\n    }\n\n    // Run diagnostics after canvas is fully rendered\n    runDiagnostics();\n  }, [drawLane, drawHandP1, drawHandP2, drawInterventionsP1, drawInterventionsP2, drawPermanentSlotsP1, drawPermanentSlotsP2, drawInstantSlots, drawInfoPanels, devMode, runDiagnostics]);\n\n  const DRAW_LAYOUT_OVERLAY = false; // force off per new layout system\n\n  // Load slot symbol images once\n  useEffect(() => {\n    const load = (key: string, src: string) => {\n      const img = new Image();\n      img.onload = () => { slotSymbolImgsRef.current.set(key, img); };\n      img.onerror = () => { console.warn('Failed to load slot icon', src); };\n      img.src = src;\n    };\n    // load all slot icons\n    load('public', publicSymbolUrl);\n    load('sofort', sofortSymbolUrl);\n    load('dauerhaft', dauerhaftSymbolUrl);\n    load('government', governmentSymbolUrl);\n    load('intervention', interventionSymbolUrl);\n\n    // load test GIF for gov overlay\n    try {\n      const img = new Image();\n      img.onload = () => { govGifRef.current = img; };\n      img.onerror = () => { console.warn('Failed to load gov overlay gif', govPlaceGifUrl); };\n      img.src = govPlaceGifUrl;\n    } catch (e) {}\n    // load spritesheet for placement animation\n    try {\n      const s = new Image();\n      s.onload = () => { govSpritesRef.current = s; };\n      s.onerror = () => { console.warn('Failed to load gov spritesheet', govPlaceSpritesheetUrl); };\n      s.src = govPlaceSpritesheetUrl;\n    } catch (e) {}\n    // load spritesheet for instant initiative activation\n    try {\n      const si = new Image();\n      si.onload = () => { instantSpritesRef.current = si; };\n      si.onerror = () => { console.warn('Failed to load instant spritesheet', instantSpritesheetUrl); };\n      si.src = instantSpritesheetUrl;\n    } catch (e) {}\n\n    // load spritesheet for hit/target animation (25 frames)\n    try {\n      const h = new Image();\n      h.onload = () => { hitSpritesRef.current = h; };\n      h.onerror = () => { console.warn('Failed to load hit spritesheet', hitSpritesheetUrl); };\n      h.src = hitSpritesheetUrl;\n    } catch (e) {}\n\n    // ensure first draw\n    requestAnimationFrame(draw);\n  }, [draw]);\n\n  // Expose debug trigger to manually start gov sprite animation by slot-key or uid\n  useEffect(() => {\n    (window as any).__pc_triggerGovAnim = (id: any) => {\n      try {\n        const now = performance.now();\n        // if id is slot key like '1.aussen.2'\n        if (typeof id === 'string' && id.indexOf('.') >= 0) {\n          govSpriteStateRef.current[id] = { started: now, frameCount: 14, frameDuration: 40 };\n          return;\n        }\n\n        // otherwise try to resolve as uid/id to a clickZone\n        const uid = id;\n        const zone = clickZonesRef.current.find(z => z.data && (z.data.card && ((z.data.card.uid ?? String(z.data.card.id)) === uid || (z.data.card.id === uid))));\n        if (!zone) {\n          console.warn('pc_triggerGovAnim: no slot found for uid', uid);\n          return;\n        }\n        const player = zone.data.player ?? 1;\n        const lane = zone.data.lane ?? (zone.data.slot && typeof zone.data.slot === 'string' ? zone.data.slot : 'aussen');\n        const index = zone.data.index ?? 0;\n        const key = `${player}.${lane}.${index}`;\n        govSpriteStateRef.current[key] = { started: now, frameCount: 14, frameDuration: 40 };\n      } catch (e) {\n        console.warn('pc_triggerGovAnim error', e);\n      }\n    };\n    // expose easy alias\n    try { (window as any).pc_triggerGovAnim = (window as any).__pc_triggerGovAnim; } catch (e) {}\n    return () => { delete (window as any).__pc_triggerGovAnim; };\n  }, []);\n\n  // Expose debug trigger for hit animation (key: '1.aussen.0' or uid)\n  useEffect(() => {\n    (window as any).__pc_triggerHitAnim = (id: any) => {\n      try {\n        const now = performance.now();\n        // if id is slot key like '1.aussen.2'\n        if (typeof id === 'string' && id.indexOf('.') >= 0) {\n          hitSpriteStateRef.current[id] = { started: now, frameCount: 25, frameDuration: 30 };\n          return;\n        }\n\n        // otherwise try to resolve as uid/id to a clickZone\n        const uid = id;\n        const zone = clickZonesRef.current.find(z => z.data && (z.data.card && ((z.data.card.uid ?? String(z.data.card.id)) === uid || (z.data.card.id === uid))));\n        if (!zone) {\n          console.warn('pc_triggerHitAnim: no slot found for uid', uid);\n          return;\n        }\n        const player = zone.data.player ?? 1;\n        const lane = zone.data.lane ?? (zone.data.slot && typeof zone.data.slot === 'string' ? zone.data.slot : 'aussen');\n        const index = zone.data.index ?? 0;\n        const key = `${player}.${lane}.${index}`;\n        hitSpriteStateRef.current[key] = { started: now, frameCount: 25, frameDuration: 30 };\n      } catch (e) {\n        console.warn('pc_triggerHitAnim error', e);\n      }\n    };\n    try { (window as any).pc_triggerHitAnim = (window as any).__pc_triggerHitAnim; } catch (e) {}\n    return () => { delete (window as any).__pc_triggerHitAnim; };\n  }, []);\n\n  // Redraw when game state or selection changes\n  useEffect(() => {\n    requestAnimationFrame(draw);\n  }, [gameState, selectedHandIndex, draw]);\n\n  // Continuous render loop to keep canvas updated without relying on external state refs\n  useEffect(() => {\n    let frame: number;\n    const loop = () => {\n      draw();\n      frame = requestAnimationFrame(loop);\n    };\n    frame = requestAnimationFrame(loop);\n    return () => cancelAnimationFrame(frame);\n  }, [draw]);\n\n  const handleCardClick = useCallback((data: any) => {\n    // Corruption target selection: intercept board card clicks for opponent government\n    if (corruptionSelectActorRef.current && data && data.type === 'board_card') {\n      try {\n        const actor = corruptionSelectActorRef.current as Player;\n        const victim = actor === 1 ? 2 : 1;\n        if (data.player === victim && (data.lane === 'aussen' || data.lane === 'government')) {\n          const uid = data.card?.uid ?? data.card?.id;\n          if (uid != null) {\n            corruptionSelectActorRef.current = null;\n            try { window.dispatchEvent(new CustomEvent('pc:corruption_target_selected', { detail: { player: actor, targetUid: uid } })); } catch (e) {}\n            return; // do not propagate\n          }\n        }\n      } catch (e) {}\n    }\n    // Hand-Klick\n    if (data.type === 'hand_p1') {\n      const uid = data.card?.uid ?? data.card?.id;\n      const stateHand = gameState.hands?.[1] || [];\n      const idxInState = stateHand.findIndex((c: any) => (c.uid ?? c.id) === uid);\n      onCardClick(data);\n      return;\n    }\n\n    // Slot-Klick\n    if (data.type === 'row_slot') {\n      const lane: 'public' | 'government' = data.lane;\n      const cap = getLaneCapacity(lane);\n\n      // Hole aktuelle Row-LÃ¤nge aus gameState\n      const rowCards = lane === 'public'\n        ? gameState.board?.[1]?.innen ?? []\n        : gameState.board?.[1]?.aussen ?? [];\n\n      if (rowCards.length >= cap) {\n        // Optional: UI Feedback\n        console.warn(`Row ${lane} is full (${rowCards.length}/${cap})`);\n        return;\n      }\n\n      onCardClick(data);\n      return;\n    }\n\n    // Andere Klicks (empty_slot, board_card, etc.)\n    onCardClick(data);\n  }, [gameState, onCardClick]);\n\n  const handleClick = useCallback((e: React.MouseEvent<HTMLCanvasElement>) => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const rect = canvas.getBoundingClientRect();\n    const { scale, offsetX, offsetY } = getUiTransform(canvas.width, canvas.height);\n    const mx = (e.clientX - rect.left - offsetX) / scale;\n    const my = (e.clientY - rect.top - offsetY) / scale;\n\n    const hit = clickZonesRef.current.find(z => mx >= z.x && mx <= z.x + z.w && my >= z.y && my <= z.y + z.h);\n    if (hit) {\n      console.debug('[CanvasClick] mx,my,hit:', mx, my, hit.data);\n      try {\n        // If user clicked a drawn card in an instant slot, normalize to activate_instant\n        const d = hit.data || {};\n        if (d.type === 'slot_card' && d.slot === 'instant') {\n          handleCardClick({ type: 'activate_instant', player: d.player || 1, card: d.card });\n          return;\n        }\n        // Fallback: if there's an explicit activate_instant zone, pass through\n        if (d.type === 'activate_instant') {\n          handleCardClick(d);\n          return;\n        }\n      } catch (err) {}\n      handleCardClickInternal(hit.data);\n    }\n  }, [handleCardClick]);\n\n  const handleMouseMove = useCallback((e: React.MouseEvent<HTMLCanvasElement>) => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const rect = canvas.getBoundingClientRect();\n    const { scale, offsetX, offsetY } = getUiTransform(canvas.width, canvas.height);\n    const mx = (e.clientX - rect.left - offsetX) / scale;\n    const my = (e.clientY - rect.top - offsetY) / scale;\n\n    const hit = clickZonesRef.current.find(z => mx >= z.x && mx <= z.x + z.w && my >= z.y && my <= z.y + z.h);\n    if (hit) {\n      console.log('[hover]', hit.data.type, hit.data.card?.name);\n      onCardHover({ ...hit.data, x: e.clientX, y: e.clientY });\n    } else {\n      onCardHover(null);\n    }\n  }, [onCardHover]);\n\n  const handleWheel = useCallback((e: React.WheelEvent<HTMLCanvasElement>) => {\n    // only enable when player1 has more slots than visible\n    const handLen = (gameState.hands && gameState.hands[1]) ? gameState.hands[1].length : 0;\n    const zone = getZone('hand.player');\n    if (!zone) return;\n    if (handLen <= 5) return; // nothing to scroll\n\n    // Prevent page scrolling when over canvas\n    e.preventDefault();\n\n    // accumulate target offset (invert so wheel down moves cards up)\n    // Each wheel step moves by 48px per delta unit\n    const delta = Math.sign(e.deltaY) * 48;\n    // compute slot height more robustly\n    const slots = computeSlotRects(zone);\n    const slotH = slots && slots.length > 0 ? slots[0].h : zone.rectPx[3] / 5;\n    const visible = 5;\n    const maxOffset = -(Math.max(0, handLen - visible) * slotH);\n    handScrollTargetRef.current = Math.max(Math.min(handScrollTargetRef.current - delta, 0), maxOffset);\n  }, [gameState.hands]);\n\n  const handleTouchStart = useCallback((e: React.TouchEvent<HTMLCanvasElement>) => {\n    if (!e.touches || e.touches.length === 0) return;\n    const handLen = (gameState.hands && gameState.hands[1]) ? gameState.hands[1].length : 0;\n    if (handLen <= 5) return;\n    isTouchingRef.current = true;\n    const y = e.touches[0].clientY;\n    touchStartYRef.current = y;\n    lastTouchYRef.current = y;\n    e.preventDefault();\n  }, [gameState.hands]);\n\n  const handleTouchMove = useCallback((e: React.TouchEvent<HTMLCanvasElement>) => {\n    if (!isTouchingRef.current) return;\n    if (!e.touches || e.touches.length === 0) return;\n    const y = e.touches[0].clientY;\n    const last = lastTouchYRef.current ?? y;\n    const dy = y - last; // positive when moving down\n    lastTouchYRef.current = y;\n\n    // invert so dragging up moves cards up\n    const delta = -dy;\n    const handLen = (gameState.hands && gameState.hands[1]) ? gameState.hands[1].length : 0;\n    const zone = getZone('hand.player');\n    if (!zone) return;\n    const slots = computeSlotRects(zone);\n    const slotH = slots && slots.length > 0 ? slots[0].h : zone.rectPx[3] / 5;\n    const visible = 5;\n    const maxOffset = -(Math.max(0, handLen - visible) * slotH);\n    handScrollTargetRef.current = Math.max(Math.min(handScrollTargetRef.current + delta, 0), maxOffset);\n    e.preventDefault();\n  }, [gameState.hands]);\n\n  const handleTouchEnd = useCallback((e: React.TouchEvent<HTMLCanvasElement>) => {\n    isTouchingRef.current = false;\n    touchStartYRef.current = null;\n    lastTouchYRef.current = null;\n  }, []);\n\n\n\n  // Expose debug trigger to manually start instant sprite animation by slot-key or uid\n  useEffect(() => {\n    (window as any).__pc_triggerInstantAnim = (key: any) => {\n      const now = performance.now();\n      instantSpriteStateRef.current[key || '1.instant.0'] = { started: now, frameCount: 14, frameDuration: 40 };\n    };\n    // alias\n    try { (window as any).pc_triggerInstantAnim = (window as any).__pc_triggerInstantAnim; } catch (e) {}\n    return () => { delete (window as any).__pc_triggerGovAnim; delete (window as any).__pc_triggerInstantAnim; };\n  }, []);\n\n  // Click handler wrapper for corruption selection\n  const handleCardClickInternal = useCallback((data: any) => {\n    const sel: any = (gameState as any).pendingAbilitySelect;\n    if (sel && sel.type === 'corruption_steal') {\n      // Accept clicks on either actual card sprites (with uid) or on empty row_slot hitboxes.\n      if (data.player !== sel.actorPlayer && data.lane === 'aussen') {\n        let targetUid = (data as any).uid;\n\n        // If we got a row_slot hit (no uid), map indexâ†’uid from board state\n        if (!targetUid && data.type === 'row_slot') {\n          try {\n            const p = data.player;\n            const idx = data.index;\n            const card = (gameState as any).board?.[p]?.aussen?.[idx];\n            targetUid = card?.uid;\n          } catch(e) {}\n        }\n\n        if (targetUid) {\n          try {\n            console.debug('[CORR] forwarding uid', targetUid, 'actorPlayer=', sel.actorPlayer);\n            window.dispatchEvent(new CustomEvent('pc:corruption_pick_target', { detail: { player: sel.actorPlayer, targetUid } }));\n            // Also open small confirmation overlay via DOM event for modal convenience\n            try { window.dispatchEvent(new CustomEvent('pc:corruption_target_selected', { detail: { player: sel.actorPlayer, targetUid } })); } catch(e) {}\n          } catch(e) {}\n          return; // consume click\n        }\n      }\n    }\n    onCardClick(data);\n  }, [gameState, onCardClick]);\n\n  useEffect(() => {\n    const onDiceResult = () => {\n      // remove corruption modal if exists\n      const el = document.getElementById('pc-corruption-modal');\n      if (el) el.remove();\n      corruptionSelectActorRef.current = null;\n    };\n    window.addEventListener('pc:dice_result', onDiceResult as EventListener);\n    return () => window.removeEventListener('pc:dice_result', onDiceResult as EventListener);\n  }, []);\n\n  return (\n    <canvas\n      ref={canvasRef}\n      width={1920}\n      height={1080}\n      style={{\n        display: 'block',\n        width: '100%',\n        height: '100%',\n        imageRendering: 'auto',\n      }}\n      onClick={handleClick}\n      onMouseMove={handleMouseMove}\n      onWheel={handleWheel}\n      onTouchStart={handleTouchStart}\n      onTouchMove={handleTouchMove}\n      onTouchEnd={handleTouchEnd}\n    />\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}