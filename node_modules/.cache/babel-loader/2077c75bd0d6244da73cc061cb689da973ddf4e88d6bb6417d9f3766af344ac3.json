{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useCallback } from 'react';\nimport { ActiveAbilitiesManager, EffectQueueManager } from '../utils/gameUtils';\nexport function useGameEffects(gameState, setGameState, log) {\n  _s();\n  const executeCardEffect = useCallback((card, player, state, log) => {\n    let newState = {\n      ...state\n    };\n    if (card.kind === 'spec') {\n      const specCard = card;\n\n      // Karten-Nachzieh-Effekte\n      if (specCard.name === 'Oprah Winfrey') {\n        log(`Oprah Winfrey: Ziehe 1 Karte`);\n        // Draw card logic would go here\n      }\n      // Additional card effects would be implemented here\n    }\n    return newState;\n  }, []);\n  const processEffectQueue = useCallback(state => {\n    if (!state.effectQueue || state.effectQueue.items.length === 0) {\n      return state;\n    }\n    const [newQueue, newState] = EffectQueueManager.processQueue(state.effectQueue, state, log);\n    return {\n      ...newState,\n      effectQueue: newQueue\n    };\n  }, [log]);\n  const getActiveAbilities = useCallback(player => {\n    return ActiveAbilitiesManager.getAvailableAbilities(player, gameState);\n  }, [gameState]);\n  const useActiveAbility = useCallback((abilityId, targetCardUid) => {\n    setGameState(prev => {\n      const player = prev.current;\n      const abilities = ActiveAbilitiesManager.getAvailableAbilities(player, prev);\n      const ability = abilities.find(a => a.id === abilityId);\n      if (!ability || !ActiveAbilitiesManager.canUseAbility(ability, player, prev)) {\n        return prev;\n      }\n\n      // Active ability execution logic would go here\n      log(`Aktive Fähigkeit verwendet: ${ability.name}`);\n      return prev;\n    });\n  }, [gameState, log]);\n  const transferInfluence = useCallback((player, fromCardUid, toCardUid, amount) => {\n    setGameState(prev => {\n      var _prev$effectFlags;\n      if (prev.current !== player) return prev;\n      const flags = (_prev$effectFlags = prev.effectFlags) === null || _prev$effectFlags === void 0 ? void 0 : _prev$effectFlags[player];\n      if (!flags || flags.diplomatInfluenceTransferUsed || flags.influenceTransferBlocked) return prev;\n\n      // Influence transfer logic would go here\n      log(`Einfluss transferiert: ${amount} Punkte`);\n      return prev;\n    });\n  }, [log]);\n  return {\n    executeCardEffect,\n    processEffectQueue,\n    getActiveAbilities,\n    useActiveAbility,\n    transferInfluence\n  };\n}\n_s(useGameEffects, \"HE5PNf5SdAou54w7AcmuOtX0+AI=\");","map":{"version":3,"names":["useCallback","ActiveAbilitiesManager","EffectQueueManager","useGameEffects","gameState","setGameState","log","_s","executeCardEffect","card","player","state","newState","kind","specCard","name","processEffectQueue","effectQueue","items","length","newQueue","processQueue","getActiveAbilities","getAvailableAbilities","useActiveAbility","abilityId","targetCardUid","prev","current","abilities","ability","find","a","id","canUseAbility","transferInfluence","fromCardUid","toCardUid","amount","_prev$effectFlags","flags","effectFlags","diplomatInfluenceTransferUsed","influenceTransferBlocked"],"sources":["C:/Users/skank/Videos/Cards/Milchcards/src/hooks/useGameEffects.ts"],"sourcesContent":["import { useCallback } from 'react';\r\nimport { GameState, Card, Player } from '../types/game';\r\nimport { ActiveAbilitiesManager, EffectQueueManager } from '../utils/gameUtils';\r\n\r\nexport function useGameEffects(\r\n  gameState: GameState,\r\n  setGameState: React.Dispatch<React.SetStateAction<GameState>>,\r\n  log: (msg: string) => void\r\n) {\r\n\r\n  const executeCardEffect = useCallback((\r\n    card: Card,\r\n    player: Player,\r\n    state: GameState,\r\n    log: (msg: string) => void\r\n  ): GameState => {\r\n    let newState = { ...state };\r\n\r\n    if (card.kind === 'spec') {\r\n      const specCard = card as any;\r\n\r\n      // Karten-Nachzieh-Effekte\r\n      if (specCard.name === 'Oprah Winfrey') {\r\n        log(`Oprah Winfrey: Ziehe 1 Karte`);\r\n        // Draw card logic would go here\r\n      }\r\n      // Additional card effects would be implemented here\r\n    }\r\n\r\n    return newState;\r\n  }, []);\r\n\r\n  const processEffectQueue = useCallback((state: GameState): GameState => {\r\n    if (!state.effectQueue || state.effectQueue.items.length === 0) {\r\n      return state;\r\n    }\r\n\r\n    const [newQueue, newState] = EffectQueueManager.processQueue(\r\n      state.effectQueue,\r\n      state,\r\n      log\r\n    );\r\n\r\n    return {\r\n      ...newState,\r\n      effectQueue: newQueue\r\n    };\r\n  }, [log]);\r\n\r\n  const getActiveAbilities = useCallback((player: Player) => {\r\n    return ActiveAbilitiesManager.getAvailableAbilities(player, gameState);\r\n  }, [gameState]);\r\n\r\n  const useActiveAbility = useCallback((abilityId: string, targetCardUid?: number) => {\r\n    setGameState(prev => {\r\n      const player = prev.current;\r\n      const abilities = ActiveAbilitiesManager.getAvailableAbilities(player, prev);\r\n      const ability = abilities.find(a => a.id === abilityId);\r\n\r\n      if (!ability || !ActiveAbilitiesManager.canUseAbility(ability, player, prev)) {\r\n        return prev;\r\n      }\r\n\r\n      // Active ability execution logic would go here\r\n      log(`Aktive Fähigkeit verwendet: ${ability.name}`);\r\n\r\n      return prev;\r\n    });\r\n  }, [gameState, log]);\r\n\r\n  const transferInfluence = useCallback((player: Player, fromCardUid: number, toCardUid: number, amount: number) => {\r\n    setGameState(prev => {\r\n      if (prev.current !== player) return prev;\r\n\r\n      const flags = prev.effectFlags?.[player];\r\n      if (!flags || flags.diplomatInfluenceTransferUsed || flags.influenceTransferBlocked) return prev;\r\n\r\n      // Influence transfer logic would go here\r\n      log(`Einfluss transferiert: ${amount} Punkte`);\r\n\r\n      return prev;\r\n    });\r\n  }, [log]);\r\n\r\n  return {\r\n    executeCardEffect,\r\n    processEffectQueue,\r\n    getActiveAbilities,\r\n    useActiveAbility,\r\n    transferInfluence,\r\n  };\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}