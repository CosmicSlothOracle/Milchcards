{"ast":null,"code":"/**\r\n * Deterministisches RNG-System\r\n * Ermöglicht reproduzierbare Zufallszahlen für Tests\r\n *//**\r\n * Einfacher Pseudo-Zufallszahlengenerator (Linear Congruential Generator)\r\n * Basiert auf Park & Miller (1988)\r\n */class SeededRNG{constructor(){let seed=arguments.length>0&&arguments[0]!==undefined?arguments[0]:Date.now();this.seed=void 0;// Konvertiere String-Seed zu Zahl\nif(typeof seed==='string'){this.seed=this.hashString(seed);}else{this.seed=seed;}// Stelle sicher, dass Seed positiv ist\nif(this.seed<=0){this.seed=1;}}/**\r\n   * Einfacher String-Hash für Seed-Konvertierung\r\n   */hashString(str){let hash=0;for(let i=0;i<str.length;i++){const char=str.charCodeAt(i);hash=(hash<<5)-hash+char;hash=hash&hash;// Convert to 32-bit integer\n}return Math.abs(hash)||1;}/**\r\n   * Generiert nächste Pseudo-Zufallszahl\r\n   */random(){// Park & Miller constants\nconst a=16807;const m=2147483647;this.seed=a*this.seed%m;return(this.seed-1)/(m-1);}/**\r\n   * Generiert Zufalls-Integer zwischen 0 und max (exklusiv)\r\n   */randomInt(max){return Math.floor(this.random()*max);}/**\r\n   * Wählt zufälliges Element aus Array\r\n   */pick(array){if(array.length===0)return undefined;const index=this.randomInt(array.length);return array[index];}}/**\r\n * Standard Math.random() basiertes RNG für Produktion\r\n */class StandardRNG{random(){return Math.random();}randomInt(max){return Math.floor(Math.random()*max);}pick(array){if(array.length===0)return undefined;const index=Math.floor(Math.random()*array.length);return array[index];}}/**\r\n * Factory-Funktion zum Erstellen eines RNG\r\n * @param seed Optional: Seed für deterministisches RNG (für Tests)\r\n */export function makeRNG(seed){if(seed!==undefined){return new SeededRNG(seed);}return new StandardRNG();}/**\r\n * Globale RNG-Instanz (kann für Tests überschrieben werden)\r\n */let globalRNG=new StandardRNG();/**\r\n * Setzt die globale RNG-Instanz\r\n */export function setGlobalRNG(rng){globalRNG=rng;}/**\r\n * Gibt die globale RNG-Instanz zurück\r\n */export function getGlobalRNG(){return globalRNG;}/**\r\n * Convenience-Funktion: Setzt globales RNG mit Seed\r\n */export function seedGlobalRNG(seed){globalRNG=new SeededRNG(seed);}/**\r\n * Convenience-Funktion: Setzt globales RNG auf Standard zurück\r\n */export function resetGlobalRNG(){globalRNG=new StandardRNG();}","map":{"version":3,"names":["SeededRNG","constructor","seed","arguments","length","undefined","Date","now","hashString","str","hash","i","char","charCodeAt","Math","abs","random","a","m","randomInt","max","floor","pick","array","index","StandardRNG","makeRNG","globalRNG","setGlobalRNG","rng","getGlobalRNG","seedGlobalRNG","resetGlobalRNG"],"sources":["C:/Users/skank/Videos/Cards/Milchcards/src/services/rng.ts"],"sourcesContent":["/**\r\n * Deterministisches RNG-System\r\n * Ermöglicht reproduzierbare Zufallszahlen für Tests\r\n */\r\n\r\nexport interface RNG {\r\n  /**\r\n   * Wählt ein zufälliges Element aus einem Array\r\n   */\r\n  pick<T>(array: T[]): T | undefined;\r\n\r\n  /**\r\n   * Gibt eine Zufallszahl zwischen 0 (inklusiv) und 1 (exklusiv) zurück\r\n   */\r\n  random(): number;\r\n\r\n  /**\r\n   * Gibt eine ganze Zufallszahl zwischen 0 (inklusiv) und max (exklusiv) zurück\r\n   */\r\n  randomInt(max: number): number;\r\n}\r\n\r\n/**\r\n * Einfacher Pseudo-Zufallszahlengenerator (Linear Congruential Generator)\r\n * Basiert auf Park & Miller (1988)\r\n */\r\nclass SeededRNG implements RNG {\r\n  private seed: number;\r\n\r\n  constructor(seed: string | number = Date.now()) {\r\n    // Konvertiere String-Seed zu Zahl\r\n    if (typeof seed === 'string') {\r\n      this.seed = this.hashString(seed);\r\n    } else {\r\n      this.seed = seed;\r\n    }\r\n\r\n    // Stelle sicher, dass Seed positiv ist\r\n    if (this.seed <= 0) {\r\n      this.seed = 1;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Einfacher String-Hash für Seed-Konvertierung\r\n   */\r\n  private hashString(str: string): number {\r\n    let hash = 0;\r\n    for (let i = 0; i < str.length; i++) {\r\n      const char = str.charCodeAt(i);\r\n      hash = ((hash << 5) - hash) + char;\r\n      hash = hash & hash; // Convert to 32-bit integer\r\n    }\r\n    return Math.abs(hash) || 1;\r\n  }\r\n\r\n  /**\r\n   * Generiert nächste Pseudo-Zufallszahl\r\n   */\r\n  random(): number {\r\n    // Park & Miller constants\r\n    const a = 16807;\r\n    const m = 2147483647;\r\n\r\n    this.seed = (a * this.seed) % m;\r\n    return (this.seed - 1) / (m - 1);\r\n  }\r\n\r\n  /**\r\n   * Generiert Zufalls-Integer zwischen 0 und max (exklusiv)\r\n   */\r\n  randomInt(max: number): number {\r\n    return Math.floor(this.random() * max);\r\n  }\r\n\r\n  /**\r\n   * Wählt zufälliges Element aus Array\r\n   */\r\n  pick<T>(array: T[]): T | undefined {\r\n    if (array.length === 0) return undefined;\r\n    const index = this.randomInt(array.length);\r\n    return array[index];\r\n  }\r\n}\r\n\r\n/**\r\n * Standard Math.random() basiertes RNG für Produktion\r\n */\r\nclass StandardRNG implements RNG {\r\n  random(): number {\r\n    return Math.random();\r\n  }\r\n\r\n  randomInt(max: number): number {\r\n    return Math.floor(Math.random() * max);\r\n  }\r\n\r\n  pick<T>(array: T[]): T | undefined {\r\n    if (array.length === 0) return undefined;\r\n    const index = Math.floor(Math.random() * array.length);\r\n    return array[index];\r\n  }\r\n}\r\n\r\n/**\r\n * Factory-Funktion zum Erstellen eines RNG\r\n * @param seed Optional: Seed für deterministisches RNG (für Tests)\r\n */\r\nexport function makeRNG(seed?: string | number): RNG {\r\n  if (seed !== undefined) {\r\n    return new SeededRNG(seed);\r\n  }\r\n  return new StandardRNG();\r\n}\r\n\r\n/**\r\n * Globale RNG-Instanz (kann für Tests überschrieben werden)\r\n */\r\nlet globalRNG: RNG = new StandardRNG();\r\n\r\n/**\r\n * Setzt die globale RNG-Instanz\r\n */\r\nexport function setGlobalRNG(rng: RNG): void {\r\n  globalRNG = rng;\r\n}\r\n\r\n/**\r\n * Gibt die globale RNG-Instanz zurück\r\n */\r\nexport function getGlobalRNG(): RNG {\r\n  return globalRNG;\r\n}\r\n\r\n/**\r\n * Convenience-Funktion: Setzt globales RNG mit Seed\r\n */\r\nexport function seedGlobalRNG(seed: string | number): void {\r\n  globalRNG = new SeededRNG(seed);\r\n}\r\n\r\n/**\r\n * Convenience-Funktion: Setzt globales RNG auf Standard zurück\r\n */\r\nexport function resetGlobalRNG(): void {\r\n  globalRNG = new StandardRNG();\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}