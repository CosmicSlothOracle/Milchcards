{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\skank\\\\Videos\\\\Cards\\\\Milchcards\\\\src\\\\components\\\\GameCanvas.tsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useCallback } from 'react';\nimport { useVisualEffectsSafe } from '../context/VisualEffectsContext';\nimport { LAYOUT, getZone, computeSlotRects, getUiTransform, getLaneCapacity, getPublicRects, getGovernmentRects, getSofortRect } from '../ui/layout';\nimport { sortHandCards } from '../utils/gameUtils';\nimport { getCardImagePath } from '../data/gameData';\nimport influenceIconUrl from '../assets/icons/influence.svg';\nimport publicSymbolUrl from '../assets/icons/public_symbol.png';\nimport sofortSymbolUrl from '../assets/icons/sofort_initiative_symbol.png';\nimport dauerhaftSymbolUrl from '../assets/icons/dauerhaft_initative.png';\nimport governmentSymbolUrl from '../assets/icons/government_symbol.png';\nimport interventionSymbolUrl from '../assets/icons/intervention_symbol.png';\nimport govPlaceGifUrl from '../assets/effect_gif/place_card_gov_256x256.gif';\nimport govPlaceSpritesheetUrl from '../ui/sprites/playcard_gov_256x256_14.png';\nimport instantSpritesheetUrl from '../ui/sprites/activate_trap_hit_target_256x256_16x2.png';\nimport hitSpritesheetUrl from '../ui/sprites/activate_inititive_hit_target_256x256_16_2rows.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Helper: is corruption target selection active\nfunction isCorruptionSelection(state, player) {\n  const sel = state.pendingAbilitySelect;\n  return sel && sel.type === 'corruption_steal' && sel.actorPlayer === player;\n}\nexport const GameCanvas = ({\n  gameState,\n  selectedHandIndex,\n  onCardClick,\n  onCardHover,\n  devMode = false\n}) => {\n  _s();\n  // listen for dice roll requests from resolver and trigger Dice3D\n  useEffect(() => {\n    const handler = ev => {\n      try {\n        var _ev$detail;\n        const player = (_ev$detail = ev.detail) === null || _ev$detail === void 0 ? void 0 : _ev$detail.player;\n        // find Dice3D canvas on page and trigger click (it rolls on click)\n        const dice = document.querySelector('canvas');\n        // better: dispatch global event so App-level Dice3D component can roll programmatically\n        window.dispatchEvent(new CustomEvent('pc:ui_request_dice_roll', {\n          detail: {\n            player\n          }\n        }));\n      } catch (e) {}\n    };\n    window.addEventListener('pc:request_dice_roll', handler);\n    return () => window.removeEventListener('pc:request_dice_roll', handler);\n  }, []);\n  const canvasRef = useRef(null);\n  const visualEffects = useVisualEffectsSafe();\n  const clickZonesRef = useRef([]);\n  // Smooth vertical scroll for P1 hand when it has more than visible slots\n  const handScrollTargetRef = useRef(0);\n  const handScrollCurrentRef = useRef(0);\n  const handScrollEnabledRef = useRef(true);\n  // Touch handling refs\n  const touchStartYRef = useRef(null);\n  const lastTouchYRef = useRef(null);\n  const isTouchingRef = useRef(false);\n  const backgroundImageRef = useRef(null);\n  const imageCacheRef = useRef(new Map());\n  const influenceImgRef = useRef(null);\n  // Animation state for visual influence changes: Map<uid, Array<Anim>>\n  const influenceAnimRef = useRef(new Map());\n  // Previous per-card influence snapshot to detect increases\n  const prevInfluencesRef = useRef({});\n  // Slot symbol images\n  const slotSymbolImgsRef = useRef(new Map());\n  // Map of canonical slot positions for animations: key -> {x,y,w,h,cx,cy}\n  const slotPositionsRef = useRef({});\n  // Temporary test GIF for government slots\n  const govGifRef = useRef(null);\n  const govSpritesRef = useRef(null);\n  // hit (target) spritesheet (25 frames)\n  const hitSpritesRef = useRef(null);\n  // sprite animation state keyed by slot-key (player.lane.index)\n  const govSpriteStateRef = useRef({});\n  const instantSpritesRef = useRef(null);\n  const instantSpriteStateRef = useRef({});\n  const hitSpriteStateRef = useRef({});\n\n  // Helper: draw slot icons with uniform pulsing opacity and a light reflection\n  const drawSlotIconWithPulse = useCallback((ctx, img, x, y, w, h, phase = 0) => {\n    if (!img || !img.complete) return;\n    try {\n      const now = performance.now();\n      const base = 0.10; // base opacity\n      const pulseRange = 0.08; // pulse amplitude (-> up to base + pulseRange)\n      const period = 700; // ms\n      const pulse = base + pulseRange * (0.5 + 0.5 * Math.sin(now / period + phase));\n\n      // draw icon with pulsing alpha\n      ctx.save();\n      ctx.globalAlpha = pulse;\n      ctx.drawImage(img, x, y, w, h);\n\n      // subtle reflection: gradient overlay on top half\n      const grad = ctx.createLinearGradient(x, y, x, y + h * 0.5);\n      grad.addColorStop(0, `rgba(255,255,255,${0.18 * pulse})`);\n      grad.addColorStop(1, `rgba(255,255,255,0)`);\n      ctx.globalCompositeOperation = 'lighter';\n      ctx.fillStyle = grad;\n      ctx.fillRect(x, y, w, h * 0.5);\n      ctx.restore();\n    } catch (e) {\n      // silent fallback\n    }\n  }, []);\n\n  // Load influence icon once\n  useEffect(() => {\n    const img = new Image();\n    img.src = influenceIconUrl;\n    influenceImgRef.current = img;\n  }, []);\n  const drawCardAt = useCallback((ctx, card, x, y, size, selected = false, showAPCost = false, player) => {\n    var _shield;\n    // Apply per-card fade-in if a play animation is active for this uid\n    let extraAlpha = 1;\n    try {\n      var _uid;\n      const uid = (_uid = card.uid) !== null && _uid !== void 0 ? _uid : card.id;\n      const list = visualEffects && visualEffects.playAnimsRef && visualEffects.playAnimsRef.current || window.__pc_play_anims || [];\n      const anim = list.find(a => a.uid === uid);\n      if (anim) {\n        const p = Math.min(1, Math.max(0, (performance.now() - anim.started) / anim.duration));\n        // ease-out\n        extraAlpha = Math.pow(p, 2);\n      }\n    } catch (e) {}\n    let dx = x,\n      dy = y,\n      s = size;\n    if (selected) {\n      s = Math.floor(size * 1.05);\n      dx = x - Math.floor((s - size) / 2);\n      dy = y - Math.floor((s - size) / 2);\n    }\n\n    // Note: pulse overlay is drawn at top layer after all cards are rendered\n\n    // Draw card image with caching to prevent flicker in continuous loop\n    const src = getCardImagePath(card, 'ui');\n    const cached = imageCacheRef.current.get(src);\n    ctx.save();\n    ctx.globalAlpha = extraAlpha;\n    if (cached && cached.complete && cached.naturalWidth > 0) {\n      ctx.drawImage(cached, dx, dy, s, s);\n    } else {\n      const img = new Image();\n      img.onload = () => {\n        imageCacheRef.current.set(src, img);\n        // Note: onload happens async; draw will occur on next frame\n        // don't draw here into stale ctx\n      };\n      img.src = src;\n      imageCacheRef.current.set(src, img);\n    }\n    ctx.restore();\n\n    // Status-Indikatoren (für alle Board-Karten)\n    // Einfluss-Wert dauerhaft anzeigen (oben links) – nur für Regierungskarten\n    if (card.kind === 'pol') {\n      var _influence;\n      const barH = Math.max(20, Math.floor(s * 0.12) + 6);\n      ctx.fillStyle = 'rgba(0,0,0,0.6)';\n      ctx.fillRect(dx, dy + s - barH, s, barH);\n      ctx.fillStyle = '#ffffff';\n      const fontSize = Math.floor(s * 0.12);\n      ctx.font = `bold ${fontSize}px sans-serif`;\n      ctx.textAlign = 'left';\n      ctx.textBaseline = 'middle';\n      ctx.fillText(`${(_influence = card.influence) !== null && _influence !== void 0 ? _influence : 0}`, dx + 8, dy + s - barH / 2);\n    }\n    // Schutz-Status (blauer Punkt)\n    if (card.protected || ((_shield = card.shield) !== null && _shield !== void 0 ? _shield : 0) > 0) {\n      ctx.fillStyle = '#1da1f2';\n      ctx.fillRect(dx + s - 22, dy + 6, 16, 16);\n    }\n    // Deaktiviert-Status (roter Punkt)\n    if (card.deactivated) {\n      ctx.fillStyle = '#b63838';\n      ctx.fillRect(dx + s - 22, dy + 26, 16, 16);\n    }\n\n    // Einfluss-Badge für Handkarten oben rechts (nur Regierungskarten)\n    if (showAPCost && player && card.kind === 'pol') {\n      var _influence2;\n      const badgeHeight = Math.max(16, Math.floor(s * 0.12));\n      const badgeWidth = badgeHeight * 2;\n      const badgeX = dx + s - badgeWidth - 6;\n      const badgeY = dy + 6;\n\n      // Semi-transparent dunkler Hintergrund\n      ctx.fillStyle = 'rgba(0,0,0,0.6)';\n      ctx.beginPath();\n      ctx.roundRect(badgeX, badgeY, badgeWidth, badgeHeight, badgeHeight / 2);\n      ctx.fill();\n\n      // Influence icon (90% opacity) links im Badge\n      if (influenceImgRef.current && influenceImgRef.current.complete) {\n        ctx.globalAlpha = 0.9;\n        ctx.drawImage(influenceImgRef.current, badgeX + 2, badgeY + 2, badgeHeight - 4, badgeHeight - 4);\n        ctx.globalAlpha = 1;\n      }\n\n      // Influence number rechts im Badge\n      ctx.fillStyle = '#ffffff';\n      ctx.font = `bold ${Math.floor(badgeHeight * 0.5)}px sans-serif`;\n      ctx.textAlign = 'right';\n      ctx.textBaseline = 'middle';\n      ctx.fillText(`${(_influence2 = card.influence) !== null && _influence2 !== void 0 ? _influence2 : 0}`, badgeX + badgeWidth - 4, badgeY + badgeHeight / 2);\n\n      // Reset align\n      ctx.textAlign = 'start';\n      ctx.textBaseline = 'alphabetic';\n    }\n\n    // NOTE: influence overlays (pulse + labels) are drawn in a separate pass\n\n    // Auswahl-Rahmen\n    if (selected) {\n      ctx.strokeStyle = '#61dafb';\n      ctx.lineWidth = 3;\n      ctx.strokeRect(dx + 1, dy + 1, s - 2, s - 2);\n      ctx.lineWidth = 1;\n    }\n\n    // Return exact 256x256 click zone over the card\n    // Since all cards are 256x256, the click zone should match exactly\n    return {\n      x: dx,\n      y: dy,\n      w: 256,\n      h: 256\n    };\n  }, [gameState]);\n\n  // Slot-Benennungs-Funktion basierend auf Glossar\n  const getSlotDisplayName = useCallback((zoneId, index, player) => {\n    const slotNumber = index + 1;\n    if (zoneId.includes('government')) {\n      if (zoneId.includes('player')) {\n        return `Regierungsreihe Slot ${slotNumber}`;\n      } else {\n        return `Gegner Regierung Slot ${slotNumber}`;\n      }\n    } else if (zoneId.includes('public')) {\n      if (zoneId.includes('player')) {\n        return `Öffentlichkeitsreihe Slot ${slotNumber}`;\n      } else {\n        return `Gegner Öffentlichkeit Slot ${slotNumber}`;\n      }\n    } else if (zoneId.includes('permanent.government')) {\n      if (zoneId.includes('player')) {\n        return 'Regierung Spezial-Slot';\n      } else {\n        return 'Gegner Regierung Spezial-Slot';\n      }\n    } else if (zoneId.includes('permanent.public')) {\n      if (zoneId.includes('player')) {\n        return 'Öffentlichkeit Spezial-Slot';\n      } else {\n        return 'Gegner Öffentlichkeit Spezial-Slot';\n      }\n    } else if (zoneId.includes('instant')) {\n      if (zoneId.includes('player')) {\n        return 'Sofort-Slot';\n      } else {\n        return 'Gegner Sofort-Slot';\n      }\n    } else if (zoneId.includes('hand')) {\n      return 'Hand';\n    } else if (zoneId.includes('interventions')) {\n      return 'Interventionen';\n    }\n    return `Slot ${slotNumber}`;\n  }, []);\n  const drawLane = useCallback((ctx, zoneId, player, lane, clickable) => {\n    const zone = getZone(zoneId);\n    if (!zone) return;\n    const slots = computeSlotRects(zone);\n    const arr = gameState.board[player][lane];\n    slots.forEach((s, idx) => {\n      const card = arr[idx];\n\n      // Hintergrundfarbe nach Kategorie\n      let bgColor = 'rgba(0,0,0,0.1)'; // Standard\n      if (zoneId.includes('government')) {\n        bgColor = 'rgba(255, 197, 0, 0.15)'; // Hellgelb für Regierung\n      } else if (zoneId.includes('public')) {\n        bgColor = 'rgba(0, 255, 0, 0.15)'; // Hellgrün für Öffentlichkeit\n      }\n      ctx.fillStyle = bgColor;\n      ctx.fillRect(s.x, s.y, s.w, s.h);\n\n      // Slot-Rahmen\n      ctx.strokeStyle = 'rgba(255,255,255,0.06)';\n      ctx.strokeRect(s.x + 0.5, s.y + 0.5, s.w - 1, s.h - 1);\n      if (card) {\n        const isSelected = player === 1 && selectedHandIndex !== null && gameState.hands[1][selectedHandIndex] === card;\n        const clickZone = drawCardAt(ctx, card, s.x, s.y, s.w, isSelected, false);\n\n        // Kartenname unter dem Slot anzeigen\n        ctx.fillStyle = 'rgba(255,255,255,0.9)';\n        ctx.font = 'bold 12px sans-serif';\n        ctx.textAlign = 'center';\n        const textY = s.y + s.h + 16;\n        ctx.fillText(card.name, s.x + s.w / 2, textY);\n        clickZonesRef.current.push({\n          ...clickZone,\n          data: {\n            type: 'board_card',\n            player,\n            lane,\n            index: idx,\n            card\n          }\n        });\n      } else if (clickable && gameState.current === player) {\n        // Slot-Benennung anzeigen (für den aktuellen Spieler)\n        const slotName = getSlotDisplayName(zoneId, idx, player);\n        ctx.fillStyle = 'rgba(255,255,255,0.6)';\n        ctx.font = '11px sans-serif';\n        ctx.textAlign = 'center';\n        const textY = s.y + s.h / 2;\n        ctx.fillText(slotName, s.x + s.w / 2, textY);\n        clickZonesRef.current.push({\n          x: s.x,\n          y: s.y,\n          w: s.w,\n          h: s.h,\n          data: {\n            type: 'row_slot',\n            lane,\n            index: idx\n          }\n        });\n      }\n    });\n  }, [gameState, selectedHandIndex, drawCardAt, getSlotDisplayName]);\n  const drawHandP1 = useCallback(ctx => {\n    const hand = sortHandCards(gameState.hands[1]);\n    const zone = getZone('hand.player');\n    if (!zone) return;\n    const slots = computeSlotRects(zone);\n    // Apply smooth offset (lerp towards target)\n    const target = handScrollTargetRef.current;\n    handScrollCurrentRef.current += (target - handScrollCurrentRef.current) * 0.15; // easing\n    const offsetY = Math.round(handScrollCurrentRef.current);\n    slots.forEach((s, i) => {\n      const card = hand[i];\n      if (!card) return;\n      // Find original index in unsorted hand for click handling\n      const originalIndex = gameState.hands[1].findIndex(c => c.uid === card.uid);\n      const isSel = selectedHandIndex === originalIndex;\n      // apply vertical offset\n      const sx = s.x;\n      const sy = s.y + offsetY;\n      const clickZone = drawCardAt(ctx, card, sx, sy, s.w, isSel, true, 1); // Show AP cost for player 1 hand\n      clickZonesRef.current.push({\n        ...clickZone,\n        data: {\n          type: 'hand_p1',\n          index: originalIndex,\n          card\n        }\n      });\n    });\n  }, [gameState.hands, selectedHandIndex, drawCardAt]);\n\n  // 🔧 DEV MODE: Player 2 Hand (rechts unten, kompakter)\n  const drawHandP2 = useCallback(ctx => {\n    const hand = sortHandCards(gameState.hands[2]);\n    const zone = getZone('hand.opponent');\n    if (!zone) return;\n    const slots = computeSlotRects(zone);\n\n    // Hintergrund für P2 Hand\n    const [x, y, w, h] = zone.rectPx;\n    ctx.fillStyle = 'rgba(255, 100, 100, 0.15)'; // Rötlicher Hintergrund für P2\n    ctx.fillRect(x, y, w, h);\n    ctx.strokeStyle = 'rgba(255, 100, 100, 0.3)';\n    ctx.strokeRect(x + 0.5, y + 0.5, w - 1, h - 1);\n\n    // Label für P2 Hand\n    ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\n    ctx.font = 'bold 14px sans-serif';\n    ctx.textAlign = 'center';\n    ctx.fillText('Player 2 Hand', x + w / 2, y - 8);\n    slots.forEach((s, i) => {\n      const card = hand[i];\n      if (!card) return;\n      // Find original index in unsorted hand for click handling\n      const originalIndex = gameState.hands[2].findIndex(c => c.uid === card.uid);\n      const isSel = gameState.current === 2 && selectedHandIndex === originalIndex;\n      const clickZone = drawCardAt(ctx, card, s.x, s.y, s.w, isSel, true, 2); // Show AP cost for player 2 hand\n      clickZonesRef.current.push({\n        ...clickZone,\n        data: {\n          type: 'hand_p2',\n          index: originalIndex,\n          card\n        }\n      });\n    });\n  }, [gameState, selectedHandIndex, drawCardAt]);\n  // Interventions strip (player traps)\n  const drawInterventionsP1 = useCallback(ctx => {\n    const traps = gameState.traps[1] || [];\n    const zone = getZone('interventions.player');\n    if (!zone) return;\n\n    // Single intervention slot\n    const [zx, zy, zw, zh] = zone.rectPx;\n    const card = traps[0]; // Only first trap\n\n    // Hintergrund für Interventions-Slot\n    ctx.fillStyle = 'rgba(200, 160, 255, 0.15)'; // Lavendelfarben für Interventionen\n    ctx.fillRect(zx, zy, zw, zh);\n    ctx.strokeStyle = 'rgba(200, 160, 255, 0.3)';\n    ctx.strokeRect(zx + 0.5, zy + 0.5, zw - 1, zh - 1);\n\n    // Slot-Benennung für Interventions-Slot\n    ctx.fillStyle = 'rgba(200, 160, 255, 0.8)';\n    ctx.font = '11px sans-serif';\n    ctx.textAlign = 'left';\n    ctx.fillText('Intervention', zx + 8, zy + zh - 6);\n    if (card) {\n      const clickZone = drawCardAt(ctx, card, zx, zy, zw, false, false);\n      clickZonesRef.current.push({\n        ...clickZone,\n        data: {\n          type: 'trap_p1',\n          index: 0,\n          card\n        }\n      });\n    }\n  }, [gameState.traps, drawCardAt]);\n\n  // Interventions strip (opponent traps)\n  const drawInterventionsP2 = useCallback(ctx => {\n    const traps = gameState.traps[2] || [];\n    const zone = getZone('interventions.opponent');\n    if (!zone) return;\n\n    // Single intervention slot\n    const [zx, zy, zw, zh] = zone.rectPx;\n    const card = traps[0]; // Only first trap\n\n    // Hintergrund für Interventions-Slot\n    ctx.fillStyle = 'rgba(200, 160, 255, 0.15)'; // Lavendelfarben für Interventionen\n    ctx.fillRect(zx, zy, zw, zh);\n    ctx.strokeStyle = 'rgba(200, 160, 255, 0.3)';\n    ctx.strokeRect(zx + 0.5, zy + 0.5, zw - 1, zh - 1);\n\n    // Slot-Benennung für Interventions-Slot\n    ctx.fillStyle = 'rgba(200, 160, 255, 0.8)';\n    ctx.font = '11px sans-serif';\n    ctx.textAlign = 'left';\n    ctx.fillText('Intervention', zx + 8, zy + zh - 6);\n    if (card) {\n      const clickZone = drawCardAt(ctx, card, zx, zy, zw, false, false);\n      clickZonesRef.current.push({\n        ...clickZone,\n        data: {\n          type: 'trap_p2',\n          index: 0,\n          card\n        }\n      });\n    }\n  }, [gameState.traps, drawCardAt]);\n\n  // Single slot drawing function\n  const drawSingleSlot = useCallback((ctx, zoneId, card, clickType, player) => {\n    const zone = getZone(zoneId);\n    if (!zone) return;\n    const [x, y, w, h] = zone.rectPx;\n\n    // Hintergrundfarbe nach Kategorie\n    let bgColor = 'rgba(0,0,0,0.1)'; // Standard\n    if (zoneId.includes('government')) {\n      bgColor = 'rgba(255, 197, 0, 0.15)'; // Hellgelb für Regierung\n    } else if (zoneId.includes('public')) {\n      bgColor = 'rgba(0, 255, 0, 0.15)'; // Hellgrün für Öffentlichkeit\n    } else if (zoneId.includes('instant')) {\n      bgColor = 'rgba(127, 116, 91, 0.15)'; // Neutral für Sofort-Slots\n    } else if (zoneId.includes('permanent')) {\n      // Unterscheide zwischen government und public permanent slots\n      if (zoneId.includes('government')) {\n        bgColor = 'rgba(255, 197, 0, 0.15)';\n      } else if (zoneId.includes('public')) {\n        bgColor = 'rgba(0, 255, 0, 0.15)';\n      }\n    }\n    ctx.fillStyle = bgColor;\n    ctx.fillRect(x, y, w, h);\n\n    // Draw slot border\n    ctx.strokeStyle = 'rgba(255,255,255,0.06)';\n    ctx.strokeRect(x + 0.5, y + 0.5, w - 1, h - 1);\n    if (card) {\n      const isSelected = player === 1 && selectedHandIndex !== null && gameState.hands[1][selectedHandIndex] === card;\n      const clickZone = drawCardAt(ctx, card, x, y, w, isSelected, false);\n\n      // Kartenname unter dem Slot anzeigen\n      ctx.fillStyle = 'rgba(255,255,255,0.9)';\n      ctx.font = 'bold 12px sans-serif';\n      ctx.textAlign = 'center';\n      const textY = y + h + 16;\n      ctx.fillText(card.name, x + w / 2, textY);\n      clickZonesRef.current.push({\n        ...clickZone,\n        data: {\n          type: 'slot_card',\n          slot: clickType,\n          card\n        }\n      });\n\n      // 🔧 NEU: Sofort-Initiative-Slots sind immer klickbar für Aktivierung (handled by activateInstantInitiative)\n      if (clickType === 'instant') {\n        clickZonesRef.current.push({\n          x,\n          y,\n          w,\n          h,\n          data: {\n            type: 'activate_instant',\n            player,\n            card\n          }\n        });\n      }\n    } else if (gameState.current === player) {\n      // Slot-Benennung für leere Slots anzeigen (für den aktuellen Spieler)\n      const slotName = getSlotDisplayName(zoneId, 0, player);\n      ctx.fillStyle = 'rgba(255,255,255,0.6)';\n      ctx.font = '11px sans-serif';\n      ctx.textAlign = 'center';\n      const textY = y + h / 2;\n      ctx.fillText(slotName, x + w / 2, textY);\n      clickZonesRef.current.push({\n        x,\n        y,\n        w,\n        h,\n        data: {\n          type: 'empty_slot',\n          slot: clickType\n        }\n      });\n    }\n  }, [selectedHandIndex, gameState, drawCardAt, getSlotDisplayName]);\n\n  // Draw permanent slots for player\n  const drawPermanentSlotsP1 = useCallback(ctx => {\n    drawSingleSlot(ctx, 'slot.permanent.government.player', gameState.permanentSlots[1].government, 'permanent_government', 1);\n    drawSingleSlot(ctx, 'slot.permanent.public.player', gameState.permanentSlots[1].public, 'permanent_public', 1);\n  }, [gameState.permanentSlots, drawSingleSlot]);\n\n  // Draw permanent slots for opponent\n  const drawPermanentSlotsP2 = useCallback(ctx => {\n    drawSingleSlot(ctx, 'slot.permanent.government.opponent', gameState.permanentSlots[2].government, 'permanent_government', 2);\n    drawSingleSlot(ctx, 'slot.permanent.public.opponent', gameState.permanentSlots[2].public, 'permanent_public', 2);\n  }, [gameState.permanentSlots, drawSingleSlot]);\n\n  // Draw instant slots\n  const drawInstantSlots = useCallback(ctx => {\n    // Sofort-Initiative-Slots aus dem Board zeichnen\n    const sofortPlayerCard = gameState.board[1].sofort[0];\n    const sofortOppCard = gameState.board[2].sofort[0];\n    drawSingleSlot(ctx, 'slot.instant.player', sofortPlayerCard, 'instant', 1);\n    drawSingleSlot(ctx, 'slot.instant.opponent', sofortOppCard, 'instant', 2);\n  }, [gameState.board, drawSingleSlot]);\n\n  // Aktive Schlüsselwörter und Unterkategorien ermitteln\n  const getActiveKeywordsAndSubcategories = useCallback(player => {\n    const board = gameState.board[player];\n    const permanentSlots = gameState.permanentSlots[player];\n    const allCards = [...board.innen, ...board.aussen, permanentSlots.government, permanentSlots.public].filter(c => c && c.kind === 'pol');\n    const keywords = new Set();\n    const subcategories = new Set();\n    allCards.forEach(card => {\n      if (!card.deactivated) {\n        // Regierungskarten-Schlüsselwörter\n        if (card.tag === 'Leadership') {\n          keywords.add('Leadership');\n        }\n        if (card.tag === 'Diplomat') {\n          keywords.add('Diplomat');\n        }\n\n        // Öffentlichkeits-Unterkategorien (für Karten in Öffentlichkeitsreihe)\n        if (board.innen.includes(card)) {\n          const publicCard = card;\n          if (publicCard.tag) {\n            // Oligarch\n            const oligarchNames = ['Elon Musk', 'Bill Gates', 'George Soros', 'Warren Buffett', 'Mukesh Ambani', 'Jeff Bezos', 'Alisher Usmanov', 'Gautam Adani', 'Jack Ma', 'Zhang Yiming', 'Roman Abramovich'];\n            if (oligarchNames.includes(publicCard.name)) {\n              subcategories.add('Oligarch');\n            }\n\n            // Plattform\n            const platformNames = ['Mark Zuckerberg', 'Tim Cook', 'Sam Altman', 'Jack Ma'];\n            if (platformNames.includes(publicCard.name)) {\n              subcategories.add('Plattform');\n            }\n\n            // Bewegung\n            const movementNames = ['Greta Thunberg', 'Malala Yousafzai', 'Ai Weiwei', 'Alexei Navalny'];\n            if (movementNames.includes(publicCard.name)) {\n              subcategories.add('Bewegung');\n            }\n\n            // NGO/Think-Tank\n            const ngoNames = ['Bill Gates', 'George Soros', 'Jennifer Doudna', 'Noam Chomsky', 'Anthony Fauci'];\n            if (ngoNames.includes(publicCard.name)) {\n              subcategories.add('NGO/Think-Tank');\n            }\n\n            // Intelligenz\n            const intelligenceNames = ['Jennifer Doudna', 'Noam Chomsky', 'Edward Snowden', 'Julian Assange', 'Yuval Noah Harari', 'Ai Weiwei', 'Alexei Navalny', 'Anthony Fauci'];\n            if (intelligenceNames.includes(publicCard.name)) {\n              subcategories.add('Intelligenz');\n            }\n\n            // Medien\n            const mediaNames = ['Oprah Winfrey'];\n            if (mediaNames.includes(publicCard.name)) {\n              subcategories.add('Medien');\n            }\n          }\n        }\n      }\n    });\n    return {\n      keywords: Array.from(keywords),\n      subcategories: Array.from(subcategories)\n    };\n  }, [gameState]);\n\n  // Info-Panels zeichnen\n  const drawInfoPanels = useCallback(ctx => {\n    const {\n      keywords,\n      subcategories\n    } = getActiveKeywordsAndSubcategories(1);\n\n    // Panel für Regierungsschlüsselwörter (rechts neben Regierungsslots)\n    const govPanelX = 1640 + 256 + 20; // Nach dem letzten permanenten Slot\n    const govPanelY = 300; // Auf Höhe der Regierungsslots\n    const govPanelW = 120;\n    const govPanelH = 256;\n\n    // Regierungspanel Hintergrund\n    ctx.fillStyle = 'rgba(255, 197, 0, 0.15)';\n    ctx.fillRect(govPanelX, govPanelY, govPanelW, govPanelH);\n    ctx.strokeStyle = 'rgba(255, 197, 0, 0.3)';\n    ctx.strokeRect(govPanelX + 0.5, govPanelY + 0.5, govPanelW - 1, govPanelH - 1);\n\n    // Regierungspanel Titel\n    ctx.fillStyle = 'rgba(255, 197, 0, 0.9)';\n    ctx.font = 'bold 12px sans-serif';\n    ctx.textAlign = 'center';\n    ctx.fillText('Regierung', govPanelX + govPanelW / 2, govPanelY + 16);\n\n    // Schlüsselwörter auflisten\n    ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\n    ctx.font = '11px sans-serif';\n    ctx.textAlign = 'left';\n    if (keywords.length > 0) {\n      keywords.forEach((keyword, idx) => {\n        ctx.fillText(`• ${keyword}`, govPanelX + 8, govPanelY + 36 + idx * 16);\n      });\n    } else {\n      ctx.fillStyle = 'rgba(255, 255, 255, 0.5)';\n      ctx.fillText('Keine aktiven', govPanelX + 8, govPanelY + 36);\n      ctx.fillText('Schlüsselwörter', govPanelX + 8, govPanelY + 52);\n    }\n\n    // Panel für Öffentlichkeits-Unterkategorien (rechts neben Öffentlichkeitsslots)\n    const pubPanelX = 1640 + 256 + 20;\n    const pubPanelY = 580; // Auf Höhe der Öffentlichkeitsslots\n    const pubPanelW = 120;\n    const pubPanelH = 256;\n\n    // Öffentlichkeitspanel Hintergrund\n    ctx.fillStyle = 'rgba(0, 255, 0, 0.15)';\n    ctx.fillRect(pubPanelX, pubPanelY, pubPanelW, pubPanelH);\n    ctx.strokeStyle = 'rgba(0, 255, 0, 0.3)';\n    ctx.strokeRect(pubPanelX + 0.5, pubPanelY + 0.5, pubPanelW - 1, pubPanelH - 1);\n\n    // Öffentlichkeitspanel Titel\n    ctx.fillStyle = 'rgba(0, 255, 0, 0.9)';\n    ctx.font = 'bold 12px sans-serif';\n    ctx.textAlign = 'center';\n    ctx.fillText('Öffentlichkeit', pubPanelX + pubPanelW / 2, pubPanelY + 16);\n\n    // Unterkategorien auflisten\n    ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\n    ctx.font = '11px sans-serif';\n    ctx.textAlign = 'left';\n    if (subcategories.length > 0) {\n      subcategories.forEach((subcategory, idx) => {\n        const displayName = subcategory.length > 12 ? subcategory.substring(0, 10) + '...' : subcategory;\n        ctx.fillText(`• ${displayName}`, pubPanelX + 8, pubPanelY + 36 + idx * 16);\n      });\n    } else {\n      ctx.fillStyle = 'rgba(255, 255, 255, 0.5)';\n      ctx.fillText('Keine aktiven', pubPanelX + 8, pubPanelY + 36);\n      ctx.fillText('Unterkategorien', pubPanelX + 8, pubPanelY + 52);\n    }\n  }, [getActiveKeywordsAndSubcategories]);\n\n  // Move diagnostics to draw callback to ensure they run after canvas is actually rendered\n  const runDiagnostics = useCallback(() => {\n    try {\n      const handZones = clickZonesRef.current.filter(z => z.data && z.data.type === 'hand_p1');\n      const uiUIDs = handZones.map(z => {\n        var _z$data$card$uid;\n        return z.data.card && ((_z$data$card$uid = z.data.card.uid) !== null && _z$data$card$uid !== void 0 ? _z$data$card$uid : z.data.card.id);\n      }).filter(Boolean);\n      const stateHand = gameState.hands && gameState.hands[1] ? gameState.hands[1] : [];\n      const stateUIDs = stateHand.map(c => {\n        var _c$uid;\n        return (_c$uid = c.uid) !== null && _c$uid !== void 0 ? _c$uid : c.id;\n      }).filter(Boolean);\n      const missingInState = uiUIDs.filter(u => !stateUIDs.includes(u));\n      const missingInUI = stateUIDs.filter(u => !uiUIDs.includes(u));\n\n      // Only warn if there are cards in UI that don't exist in state (real error)\n      // Don't warn about missing UI cards due to limited slot capacity\n      if (missingInState.length > 0) {\n        var _politicardDebug;\n        const mismatch = {\n          ts: Date.now(),\n          uiCount: uiUIDs.length,\n          stateCount: stateUIDs.length,\n          uiUIDs,\n          stateUIDs,\n          missingInState,\n          missingInUI,\n          stack: new Error('mismatch-stack').stack\n        };\n        window.__politicardDebug = {\n          ...window.__politicardDebug,\n          mismatch: [...(((_politicardDebug = window.__politicardDebug) === null || _politicardDebug === void 0 ? void 0 : _politicardDebug.mismatch) || [])].slice(-19).concat([mismatch])\n        };\n        // Clear, then log to console so user can copy/paste trace\n        console.warn('POLITICARD DIAGNOSTIC: hand mismatch detected', mismatch);\n      }\n    } catch (e) {\n      // swallow diagnostic errors to avoid breaking rendering\n      console.error('Diagnostic error', e);\n    }\n  }, [gameState.hands]);\n  const draw = useCallback(() => {\n    var _LAYOUT$background, _LAYOUT$background2;\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n\n    // Detect influence increases and start animations\n    try {\n      const currSnapshot = {};\n      const collect = c => {\n        var _c$uid2, _c$influence;\n        if (!c) return;\n        if (c.kind !== 'pol') return;\n        const uid = (_c$uid2 = c.uid) !== null && _c$uid2 !== void 0 ? _c$uid2 : c.id != null ? String(c.id) : null;\n        if (!uid) return;\n        currSnapshot[uid] = (_c$influence = c.influence) !== null && _c$influence !== void 0 ? _c$influence : 0;\n      };\n      // board rows\n      (gameState.board[1].aussen || []).forEach(collect);\n      (gameState.board[2].aussen || []).forEach(collect);\n      (gameState.board[1].innen || []).forEach(collect);\n      (gameState.board[2].innen || []).forEach(collect);\n      // permanent slots\n      collect(gameState.permanentSlots[1].government);\n      collect(gameState.permanentSlots[2].government);\n      collect(gameState.permanentSlots[1].public);\n      collect(gameState.permanentSlots[2].public);\n      const now = performance.now();\n      Object.keys(currSnapshot).forEach(uid => {\n        var _currSnapshot$uid, _prevInfluencesRef$cu;\n        const curr = (_currSnapshot$uid = currSnapshot[uid]) !== null && _currSnapshot$uid !== void 0 ? _currSnapshot$uid : 0;\n        const prev = (_prevInfluencesRef$cu = prevInfluencesRef.current[uid]) !== null && _prevInfluencesRef$cu !== void 0 ? _prevInfluencesRef$cu : curr;\n        if (curr > prev) {\n          const delta = curr - prev;\n          const list = influenceAnimRef.current.get(uid) || [];\n          list.push({\n            start: now,\n            duration: 900,\n            amount: delta\n          });\n          influenceAnimRef.current.set(uid, list);\n        }\n        prevInfluencesRef.current[uid] = curr;\n      });\n    } catch (e) {\n      // ignore\n    }\n\n    // Clear canvas\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    // Clear click zones\n    clickZonesRef.current = [];\n\n    // Background: prefer PNG if configured\n    if ((_LAYOUT$background = LAYOUT.background) !== null && _LAYOUT$background !== void 0 && _LAYOUT$background.enabled && (_LAYOUT$background2 = LAYOUT.background) !== null && _LAYOUT$background2 !== void 0 && _LAYOUT$background2.src) {\n      if (backgroundImageRef.current) {\n        ctx.drawImage(backgroundImageRef.current, 0, 0, canvas.width, canvas.height);\n      } else {\n        ctx.fillStyle = '#0c131b';\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\n      }\n    } else {\n      ctx.fillStyle = '#0c131b';\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n    }\n\n    // Apply UI transform (new signature)\n    const {\n      scale,\n      offsetX,\n      offsetY\n    } = getUiTransform(canvas.width, canvas.height);\n    ctx.save();\n    ctx.translate(offsetX, offsetY);\n    ctx.scale(scale, scale);\n\n    // Draw opponent board (top rows) - clickable im Dev Mode\n    // Draw opponent board using new layout system\n    const opponentPublicRects = getPublicRects('opponent');\n    const opponentGovRects = getGovernmentRects('opponent');\n\n    // Draw opponent public slots\n    opponentPublicRects.forEach((s, idx) => {\n      const card = gameState.board[2].innen[idx];\n      if (card) {\n        drawCardAt(ctx, card, s.x, s.y, s.w, false, false, 2);\n      } else {\n        // draw placeholder symbol for empty public slot\n        const img = slotSymbolImgsRef.current.get('public');\n        drawSlotIconWithPulse(ctx, img, s.x, s.y, s.w, s.h, 0.4);\n      }\n    });\n\n    // Draw opponent government slots\n    opponentGovRects.forEach((s, idx) => {\n      const card = gameState.board[2].aussen[idx];\n      if (card) {\n        drawCardAt(ctx, card, s.x, s.y, s.w, false, false, 2);\n      } else {\n        const img = slotSymbolImgsRef.current.get('government');\n        drawSlotIconWithPulse(ctx, img, s.x, s.y, s.w, s.h, 0.1);\n      }\n    });\n\n    // Draw opponent permanent slots (show icons even when not current)\n    try {\n      const permGovZoneOpp = getZone('slot.permanent.government.opponent');\n      if (permGovZoneOpp) {\n        const card = gameState.permanentSlots[2].government;\n        const [ox, oy, ow, oh] = permGovZoneOpp.rectPx;\n        if (card) {\n          drawSingleSlot(ctx, 'slot.permanent.government.opponent', card, 'permanent_government', 2);\n        } else {\n          const img = slotSymbolImgsRef.current.get('dauerhaft');\n          drawSlotIconWithPulse(ctx, img, ox, oy, ow, oh, 0.3);\n        }\n      }\n    } catch (e) {}\n    try {\n      const permPubZoneOpp = getZone('slot.permanent.public.opponent');\n      if (permPubZoneOpp) {\n        const card = gameState.permanentSlots[2].public;\n        const [ox2, oy2, ow2, oh2] = permPubZoneOpp.rectPx;\n        if (card) {\n          drawSingleSlot(ctx, 'slot.permanent.public.opponent', card, 'permanent_public', 2);\n        } else {\n          const img = slotSymbolImgsRef.current.get('dauerhaft');\n          drawSlotIconWithPulse(ctx, img, ox2, oy2, ow2, oh2, 0.7);\n        }\n      }\n    } catch (e) {}\n\n    // Draw player board (middle rows)\n    // Draw player board using new layout system\n    const playerPublicRects = getPublicRects('player');\n    const playerGovRects = getGovernmentRects('player');\n\n    // Draw player public slots\n    playerPublicRects.forEach((s, idx) => {\n      const card = gameState.board[1].innen[idx];\n      if (card) {\n        const clickZone = drawCardAt(ctx, card, s.x, s.y, s.w, false, false, 1);\n        clickZonesRef.current.push({\n          ...clickZone,\n          data: {\n            type: 'row_slot',\n            player: 1,\n            lane: 'innen',\n            index: idx\n          }\n        });\n      } else {\n        // Empty slot click zone and draw public symbol\n        // Draw unified pulsing icon for empty public slot\n        const img = slotSymbolImgsRef.current.get('public');\n        drawSlotIconWithPulse(ctx, img, s.x, s.y, s.w, s.h, 0.4);\n        clickZonesRef.current.push({\n          x: s.x,\n          y: s.y,\n          w: s.w,\n          h: s.h,\n          data: {\n            type: 'row_slot',\n            player: 1,\n            lane: 'innen',\n            index: idx\n          }\n        });\n      }\n    });\n\n    // Draw player government slots\n    playerGovRects.forEach((s, idx) => {\n      const card = gameState.board[1].aussen[idx];\n      if (card) {\n        const clickZone = drawCardAt(ctx, card, s.x, s.y, s.w, false, false, 1);\n        clickZonesRef.current.push({\n          ...clickZone,\n          data: {\n            type: 'row_slot',\n            player: 1,\n            lane: 'aussen',\n            index: idx\n          }\n        });\n      } else {\n        // Empty slot click zone and draw government symbol\n        const img = slotSymbolImgsRef.current.get('government');\n        drawSlotIconWithPulse(ctx, img, s.x, s.y, s.w, s.h, 0.1);\n        clickZonesRef.current.push({\n          x: s.x,\n          y: s.y,\n          w: s.w,\n          h: s.h,\n          data: {\n            type: 'row_slot',\n            player: 1,\n            lane: 'aussen',\n            index: idx\n          }\n        });\n      }\n    });\n\n    // --- GOV PLACEMENT SPRITESHEET OVERLAY (frame-based) ---\n    try {\n      const sprites = govSpritesRef.current;\n      const gif = govGifRef.current;\n      const anims = visualEffects && visualEffects.playAnimsRef && visualEffects.playAnimsRef.current || [];\n\n      // Start sprite animation when a playAnim for a gov-card is active and maps to a slot\n      const now = performance.now();\n      // handle specialized 'hit:' playAnims which indicate target-hit sprites by slot key\n      anims.forEach(a => {\n        try {\n          if (typeof a.uid === 'string' && a.uid.indexOf('hit:') === 0) {\n            const inner = a.uid.slice(4); // '1.aussen.0'\n            if (!hitSpriteStateRef.current[inner]) {\n              hitSpriteStateRef.current[inner] = {\n                started: now,\n                frameCount: 25,\n                frameDuration: 30\n              };\n            }\n            return; // don't treat as gov anim\n          }\n        } catch (e) {}\n\n        // existing gov/instant handling follows\n      });\n\n      // now run the original anims loop for gov/instant that depend on card uids\n      anims.forEach(a => {\n        var _zone$data$player, _zone$data$lane, _zone$data$index;\n        // find the zone/slot for this uid\n        const zone = clickZonesRef.current.find(z => {\n          var _z$data$card$uid2;\n          return z.data && z.data.card && ((_z$data$card$uid2 = z.data.card.uid) !== null && _z$data$card$uid2 !== void 0 ? _z$data$card$uid2 : String(z.data.card.id)) === a.uid;\n        });\n        if (!zone) return;\n        // determine if gov slot\n        let isGov = false;\n        let isInstant = false;\n        try {\n          const dt = zone.data || {};\n          if (dt.type === 'row_slot' && dt.lane === 'aussen') isGov = true;\n          if (dt.type === 'board_card' && dt.lane === 'aussen') isGov = true;\n          if (dt.slot && typeof dt.slot === 'string' && dt.slot.includes('government')) isGov = true;\n          if (dt.type === 'activate_instant' || dt.slot && typeof dt.slot === 'string' && dt.slot.includes('instant')) isInstant = true;\n        } catch (e) {}\n        if (!isGov && !isInstant) return;\n        const player = (_zone$data$player = zone.data.player) !== null && _zone$data$player !== void 0 ? _zone$data$player : 1;\n        const lane = (_zone$data$lane = zone.data.lane) !== null && _zone$data$lane !== void 0 ? _zone$data$lane : 'aussen';\n        const idx = (_zone$data$index = zone.data.index) !== null && _zone$data$index !== void 0 ? _zone$data$index : 0;\n        const key = `${player}.${lane}.${idx}`;\n\n        // initialize sprite state if not present\n        if (isGov) {\n          if (!govSpriteStateRef.current[key]) {\n            govSpriteStateRef.current[key] = {\n              started: now,\n              frameCount: 14,\n              frameDuration: 40\n            }; // 14 frames @ ~40ms -> ~560ms\n          }\n        }\n        if (isInstant) {\n          const instKey = `${player}.instant.${idx}`;\n          if (!instantSpriteStateRef.current[instKey]) {\n            instantSpriteStateRef.current[instKey] = {\n              started: now,\n              frameCount: 14,\n              frameDuration: 40\n            };\n          }\n        }\n      });\n\n      // draw running sprite animations per gov slot\n      Object.keys(govSpriteStateRef.current).forEach(k => {\n        const st = govSpriteStateRef.current[k];\n        const elapsed = now - st.started;\n        const total = st.frameCount * st.frameDuration;\n        if (elapsed > total) {\n          // animation finished; remove state\n          delete govSpriteStateRef.current[k];\n          return;\n        }\n        const frame = Math.floor(elapsed / st.frameDuration);\n\n        // parse key -> player.lane.index\n        const parts = k.split('.');\n        const player = Number(parts[0]) || 1;\n        const lane = parts[1] || 'aussen';\n        const index = Number(parts[2] || 0);\n\n        // compute slot rect for this gov slot (player or opponent board)\n        const rect = player === 1 ? playerGovRects[index] : opponentGovRects[index];\n        if (!rect) return;\n\n        // spritesheet: frame N located at x = N*256, y = 0\n        if (sprites && sprites.complete) {\n          const sx = frame * 256;\n          const sy = 0;\n          const sw = 256;\n          const sh = 256;\n          // draw exactly matching the slot rect size to avoid scaling mismatches\n          const dx = rect.x;\n          const dy = rect.y;\n          ctx.drawImage(sprites, sx, sy, sw, sh, dx, dy, rect.w, rect.h);\n        } else if (gif && gif.complete) {\n          // fallback to static gif if spritesheet missing\n          ctx.drawImage(gif, rect.x, rect.y, rect.w, rect.h);\n        }\n      });\n      // --- INSTANT INITIATIVE SPRITESHEET (draw on instant slot) ---\n      try {\n        const spritesI = instantSpritesRef.current;\n        const nowI = performance.now();\n        Object.keys(instantSpriteStateRef.current).forEach(k => {\n          const st = instantSpriteStateRef.current[k];\n          const elapsed = nowI - st.started;\n          const total = st.frameCount * st.frameDuration;\n          if (elapsed > total) {\n            delete instantSpriteStateRef.current[k];\n            return;\n          }\n          const frame = Math.floor(elapsed / st.frameDuration);\n          const parts = k.split('.');\n          const player = Number(parts[0]) || 1;\n          const index = Number(parts[2] || 0);\n          const rects = getSofortRect(player ? 'player' : 'opponent');\n          // getSofortRect returns one rect; map by player/context — fallback to zone\n          const instantRect = getZone('slot.instant.player').rectPx;\n          const [ix, iy, iw, ih] = instantRect;\n          if (spritesI && spritesI.complete) {\n            const sx = frame * 256;\n            const sy = 0;\n            const sw = 256;\n            const sh = 256;\n            ctx.drawImage(spritesI, sx, sy, sw, sh, ix, iy, iw, ih);\n          }\n        });\n      } catch (e) {}\n      // --- HIT / TARGET SPRITESHEET (draw as overlay on targeted slot) ---\n      try {\n        const spritesH = hitSpritesRef.current;\n        const nowH = performance.now();\n        Object.keys(hitSpriteStateRef.current).forEach(k => {\n          const st = hitSpriteStateRef.current[k];\n          const elapsed = nowH - st.started;\n          const total = st.frameCount * st.frameDuration;\n          if (elapsed > total) {\n            delete hitSpriteStateRef.current[k];\n            return;\n          }\n          const frame = Math.floor(elapsed / st.frameDuration);\n\n          // parse key -> player.lane.index\n          const parts = k.split('.');\n          const player = Number(parts[0]) || 1;\n          const lane = parts[1] || 'aussen';\n          const index = Number(parts[2] || 0);\n\n          // compute slot rect for this gov slot (attempt gov then public)\n          const rect = (player === 1 ? playerGovRects : opponentGovRects)[index] || (player === 1 ? playerPublicRects : opponentPublicRects)[index];\n          if (!rect) return;\n          if (spritesH && spritesH.complete) {\n            const sx = frame * 256;\n            const sy = 0;\n            const sw = 256;\n            const sh = 256;\n            const dx = rect.x;\n            const dy = rect.y;\n            ctx.drawImage(spritesH, sx, sy, sw, sh, dx, dy, rect.w, rect.h);\n          }\n        });\n      } catch (e) {}\n    } catch (e) {}\n\n    // Draw player permanent slots (draw symbols if empty)\n    // permanent government\n    const permGovZone = getZone('slot.permanent.government.player');\n    if (permGovZone) {\n      const card = gameState.permanentSlots[1].government;\n      const [x, y, w, h] = permGovZone.rectPx;\n      if (card) {\n        drawSingleSlot(ctx, 'slot.permanent.government.player', card, 'permanent_government', 1);\n      } else {\n        // Draw all slot icons using unified helper (so 'dauerhaft' used visually for empty permanent gov slot)\n        const img = slotSymbolImgsRef.current.get('dauerhaft');\n        drawSlotIconWithPulse(ctx, img, x, y, w, h, 0.2);\n      }\n    }\n    // permanent public\n    const permPubZone = getZone('slot.permanent.public.player');\n    if (permPubZone) {\n      const card = gameState.permanentSlots[1].public;\n      const [x2, y2, w2, h2] = permPubZone.rectPx;\n      if (card) {\n        drawSingleSlot(ctx, 'slot.permanent.public.player', card, 'permanent_public', 1);\n      } else {\n        // Draw all slot icons using unified helper (so 'dauerhaft' used visually for empty permanent public slot)\n        const img = slotSymbolImgsRef.current.get('dauerhaft');\n        drawSlotIconWithPulse(ctx, img, x2, y2, w2, h2, 0.9);\n      }\n    }\n\n    // Draw instant slots (both players) and placeholder if empty\n    const instantPlayerZone = getZone('slot.instant.player');\n    if (instantPlayerZone) {\n      const card = gameState.board[1].sofort[0];\n      const [x, y, w, h] = instantPlayerZone.rectPx;\n      if (card) drawSingleSlot(ctx, 'slot.instant.player', card, 'instant', 1);else {\n        // Use unified icon draw helper for instant slot\n        const img = slotSymbolImgsRef.current.get('sofort');\n        drawSlotIconWithPulse(ctx, img, x, y, w, h, 0.0);\n      }\n    }\n\n    // Draw interventions strip (player)\n    // We draw symbol if empty\n    const interventionsZone = getZone('interventions.player');\n    if (interventionsZone) {\n      const [zx, zy, zw, zh] = interventionsZone.rectPx;\n      const card = gameState.traps[1] && gameState.traps[1][0];\n      if (card) drawInterventionsP1(ctx);else {\n        const img = slotSymbolImgsRef.current.get('intervention');\n        drawSlotIconWithPulse(ctx, img, zx, zy, zw, zh, 0.6);\n      }\n    }\n\n    // Draw interventions strip (opponent) - nur im Dev Mode\n    if (devMode) {\n      drawInterventionsP2(ctx);\n    }\n\n    // Draw hand (P1)\n    drawHandP1(ctx);\n\n    // 🔧 DEV MODE: Draw hand (P2) - nur im Dev Mode\n    if (devMode) {\n      drawHandP2(ctx);\n    }\n\n    // Draw info panels\n    drawInfoPanels(ctx);\n\n    // --- VISUAL EFFECTS: Particle bursts, card pop scale, initiative ripple & AP pop ---\n    try {\n      const now = performance.now();\n      const {\n        particlesRef,\n        popsRef,\n        ripplesRef,\n        apLabelsRef,\n        reducedMotion\n      } = visualEffects || {};\n      const parts = particlesRef.current || [];\n      if (!reducedMotion) {\n        for (let i = parts.length - 1; i >= 0; i--) {\n          const p = parts[i];\n          const age = now - p.start;\n          if (age > p.life) {\n            parts.splice(i, 1);\n            continue;\n          }\n          p.vy += p.gravity || 0.09;\n          p.x += p.vx;\n          p.y += p.vy;\n          const t = 1 - age / p.life;\n          ctx.save();\n          ctx.globalAlpha = Math.max(0, Math.min(1, t));\n          ctx.fillStyle = p.color || '#ffd166';\n          ctx.beginPath();\n          ctx.arc(p.x, p.y, (p.size || 4) * t, 0, Math.PI * 2);\n          ctx.fill();\n          ctx.restore();\n        }\n        particlesRef.current = parts;\n        const pops = popsRef.current || [];\n        pops.forEach(pop => {\n          const p = Math.min(1, Math.max(0, (now - pop.started) / pop.duration));\n          const eased = 1 + 0.12 * (1 - Math.pow(1 - p, 3));\n          const zone = clickZonesRef.current.find(z => {\n            var _z$data$card$uid3;\n            return z.data && z.data.card && ((_z$data$card$uid3 = z.data.card.uid) !== null && _z$data$card$uid3 !== void 0 ? _z$data$card$uid3 : String(z.data.card.id)) === pop.uid;\n          });\n          if (!zone) return;\n          ctx.save();\n          ctx.translate(zone.x + zone.w / 2, zone.y + zone.h / 2);\n          ctx.scale(eased, eased);\n          ctx.globalAlpha = 0.12 * (1 - p);\n          ctx.fillStyle = '#ffffff';\n          ctx.fillRect(-zone.w / 2, -zone.h / 2, zone.w, zone.h);\n          ctx.restore();\n        });\n        const ripples = ripplesRef.current || [];\n        for (let i = ripples.length - 1; i >= 0; i--) {\n          const r = ripples[i];\n          const p = Math.min(1, Math.max(0, (now - r.started) / r.duration));\n          if (p >= 1) {\n            ripples.splice(i, 1);\n            continue;\n          }\n          const radius = r.radius * (0.8 + 1.8 * p);\n          ctx.save();\n          const g = ctx.createRadialGradient(r.cx, r.cy, radius * 0.1, r.cx, r.cy, radius);\n          g.addColorStop(0, `rgba(255,255,255,${0.12 * (1 - p)})`);\n          g.addColorStop(1, `rgba(255,255,255,0)`);\n          ctx.fillStyle = g;\n          ctx.beginPath();\n          ctx.arc(r.cx, r.cy, radius, 0, Math.PI * 2);\n          ctx.fill();\n          ctx.restore();\n          if (r.showAp && !r._apSpawned) {\n            apLabelsRef.current = apLabelsRef.current || [];\n            apLabelsRef.current.push({\n              x: r.apX,\n              y: r.apY,\n              started: now,\n              duration: 800,\n              text: '+1'\n            });\n            r._apSpawned = true;\n          }\n        }\n        ripplesRef.current = ripples;\n        const apl = apLabelsRef.current || [];\n        for (let i = apl.length - 1; i >= 0; i--) {\n          const l = apl[i];\n          const p = Math.min(1, Math.max(0, (now - l.started) / l.duration));\n          if (p >= 1) {\n            apl.splice(i, 1);\n            continue;\n          }\n          ctx.save();\n          ctx.globalAlpha = 1 - p;\n          ctx.fillStyle = '#ffdd57';\n          ctx.font = 'bold 22px sans-serif';\n          ctx.textAlign = 'center';\n          ctx.fillText(l.text, l.x, l.y - 20 * p);\n          ctx.restore();\n        }\n        apLabelsRef.current = apl;\n      } else {\n        const apl = apLabelsRef.current || [];\n        for (let i = apl.length - 1; i >= 0; i--) {\n          const l = apl[i];\n          const p = Math.min(1, Math.max(0, (now - l.started) / l.duration));\n          if (p >= 1) {\n            apl.splice(i, 1);\n            continue;\n          }\n          ctx.save();\n          ctx.globalAlpha = 1 - p;\n          ctx.fillStyle = '#ffdd57';\n          ctx.font = 'bold 18px sans-serif';\n          ctx.textAlign = 'center';\n          ctx.fillText(l.text, l.x, l.y - 10 * p);\n          ctx.restore();\n        }\n        apLabelsRef.current = apl;\n      }\n    } catch (e) {}\n\n    // --- Overlay pass: draw influence pulse ring and +N labels on top of all cards ---\n    try {\n      const now = performance.now();\n      // iterate over stored anims\n      influenceAnimRef.current.forEach((anims, uid) => {\n        // find card position by scanning clickZones\n        const zone = clickZonesRef.current.find(z => {\n          var _z$data$card$uid4;\n          return z.data && (z.data.card && ((_z$data$card$uid4 = z.data.card.uid) !== null && _z$data$card$uid4 !== void 0 ? _z$data$card$uid4 : String(z.data.card.id)) === uid || z.data.card && z.data.card.uid === uid);\n        });\n        if (!zone) return;\n        const cx = zone.x + zone.w / 2;\n        const cy = zone.y + zone.h / 2;\n        // calculate aggregate pulse for this uid\n        let maxPulse = 0;\n        let totalAmount = 0;\n        const remaining = [];\n        anims.forEach(a => {\n          const p = Math.min(1, Math.max(0, (now - a.start) / a.duration));\n          const pulse = Math.pow(Math.max(0, 1 - p), 2);\n          if (pulse > maxPulse) maxPulse = pulse;\n          if (p < 1) {\n            remaining.push(a);\n            totalAmount += a.amount;\n          }\n        });\n\n        // update list\n        if (remaining.length > 0) influenceAnimRef.current.set(uid, remaining);else influenceAnimRef.current.delete(uid);\n        if (maxPulse > 0.001) {\n          // draw a soft ring to the right-bottom of influence number\n          const ringRadius = Math.max(8, zone.w * 0.08) * (1 + maxPulse * 0.6);\n          const ringX = zone.x + zone.w - 28; // near bottom-right where influence text lives\n          const ringY = zone.y + zone.h - 20;\n          ctx.save();\n          ctx.beginPath();\n          ctx.strokeStyle = `rgba(46, 204, 113, ${0.9 * maxPulse})`;\n          ctx.lineWidth = Math.max(2, Math.ceil(6 * maxPulse));\n          ctx.arc(ringX, ringY, ringRadius, 0, Math.PI * 2);\n          ctx.stroke();\n          ctx.restore();\n        }\n        if (totalAmount > 0) {\n          // floating +N to the right of influence number\n          const labelX = zone.x + zone.w - 12;\n          const labelY = zone.y + zone.h - 32 - Math.random() * 6; // slight jitter\n          ctx.save();\n          ctx.fillStyle = '#2ecc71';\n          ctx.font = 'bold 16px sans-serif';\n          ctx.textAlign = 'left';\n          ctx.textBaseline = 'middle';\n          ctx.fillText(`+${totalAmount}`, labelX, labelY);\n          ctx.restore();\n        }\n      });\n    } catch (e) {\n      // ignore overlay errors\n    }\n\n    // --- Outline pass: draw a subtle, slightly pulsing 257x257 square around 256x256 slots ---\n    try {\n      const now2 = performance.now();\n      clickZonesRef.current.forEach((z, i) => {\n        if (!z) return;\n        const w = z.w || 0;\n        const h = z.h || 0;\n        // only target 256x256 slot-sized zones (covers the icons)\n        if (Math.abs(w - 256) > 0.1 || Math.abs(h - 256) > 0.1) return;\n        const x = z.x;\n        const y = z.y;\n\n        // Color palette (rgb)\n        const rgbTeal = '20,184,166';\n        const rgbBurg = '127,29,29';\n        const rgbPurple = '139,92,246';\n        const rgbYellow = '250,204,21';\n        const rgbOrange = '251,146,60';\n\n        // Determine slot semantic\n        let slotType = 'default';\n        try {\n          const dt = z.data || {};\n          if (dt.slot && typeof dt.slot === 'string') {\n            if (dt.slot.includes('government')) slotType = 'government';else if (dt.slot.includes('public')) slotType = 'public';else if (dt.slot.includes('permanent')) slotType = 'permanent';else if (dt.slot.includes('instant')) slotType = 'instant';\n          }\n          if (dt.type === 'row_slot' && dt.lane === 'aussen') slotType = 'government';\n          if (dt.type === 'row_slot' && dt.lane === 'innen') slotType = 'public';\n          if (dt.type === 'trap_p1' || dt.type === 'trap_p2' || dt.card && dt.card.kind === 'trap') slotType = 'intervention';\n          if (dt.type === 'activate_instant' || dt.slot === 'instant') slotType = 'instant';\n          if (dt.slot === 'permanent_government' || dt.slot === 'permanent_public' || dt.slot === 'permanent') slotType = 'permanent';\n        } catch (e) {}\n        const pulse = 0.5 + 0.5 * Math.sin(now2 / 350 + i);\n        const alpha = 0.06 + 0.12 * pulse; // subtle alpha\n        const lw = 1 + 2 * pulse; // line width between 1 and 3\n\n        // Create gradient based on slot type\n        let grad = null;\n        try {\n          grad = ctx.createLinearGradient(x, y, x + w, y + h);\n          if (slotType === 'government') {\n            grad.addColorStop(0, `rgba(${rgbTeal},1)`);\n            grad.addColorStop(1, `rgba(${rgbBurg},1)`);\n          } else if (slotType === 'public') {\n            grad.addColorStop(0, `rgba(${rgbBurg},1)`);\n            grad.addColorStop(1, `rgba(${rgbTeal},1)`);\n          } else if (slotType === 'permanent') {\n            grad.addColorStop(0, `rgba(${rgbPurple},1)`);\n            grad.addColorStop(1, `rgba(${rgbPurple},1)`);\n          } else if (slotType === 'instant') {\n            grad.addColorStop(0, `rgba(${rgbYellow},1)`);\n            grad.addColorStop(1, `rgba(${rgbYellow},1)`);\n          } else if (slotType === 'intervention') {\n            grad.addColorStop(0, `rgba(${rgbOrange},1)`);\n            grad.addColorStop(1, `rgba(${rgbOrange},1)`);\n          } else {\n            grad.addColorStop(0, `rgba(255,255,255,1)`);\n            grad.addColorStop(1, `rgba(255,255,255,1)`);\n          }\n        } catch (e) {\n          grad = null;\n        }\n        ctx.save();\n        if (grad) ctx.strokeStyle = grad;else ctx.strokeStyle = `rgba(255,255,255,${alpha.toFixed(3)})`;\n        ctx.globalAlpha = alpha;\n        ctx.lineWidth = lw;\n        // draw 257x257 centered so that it encloses the 256 slot\n        ctx.strokeRect(x - 0.5, y - 0.5, w + 1, h + 1);\n        ctx.restore();\n      });\n    } catch (e) {\n      // ignore outline errors\n    }\n    ctx.restore();\n\n    // expose zones for debug snapshot\n    window.__politicardDebug = {\n      uiTransform: getUiTransform(canvas.width, canvas.height),\n      canvasSize: {\n        width: canvas.width,\n        height: canvas.height\n      },\n      zones: LAYOUT.zones,\n      clickZones: clickZonesRef.current.slice(0, 1000)\n    };\n\n    // Build canonical slotPositions map for animations/debugging\n    try {\n      const map = {};\n      clickZonesRef.current.forEach(z => {\n        const d = z.data || {};\n        // support row_slot, board_card, slot_card shapes\n        if (d.type === 'row_slot' || d.type === 'board_card' || d.type === 'slot_card' || d.type === 'hand_p1' || d.type === 'hand_p2') {\n          var _d$player, _d$lane;\n          const player = (_d$player = d.player) !== null && _d$player !== void 0 ? _d$player : d.type === 'hand_p2' ? 2 : 1;\n          const lane = (_d$lane = d.lane) !== null && _d$lane !== void 0 ? _d$lane : typeof d.slot === 'string' ? d.slot : d.type === 'hand_p2' ? 'hand' : 'unknown';\n          let index;\n          if (d.index != null) {\n            index = d.index;\n          } else if (d.card) {\n            // prefer explicit slotIndex, fallback to card.index, otherwise 0\n            index = d.card.slotIndex != null ? d.card.slotIndex : d.card.index != null ? d.card.index : 0;\n          } else {\n            index = 0;\n          }\n          const key = `${player}.${lane}.${index}`;\n          map[key] = {\n            x: z.x,\n            y: z.y,\n            w: z.w,\n            h: z.h,\n            cx: z.x + z.w / 2,\n            cy: z.y + z.h / 2\n          };\n        }\n      });\n      slotPositionsRef.current = map;\n      window.__politicardDebug = {\n        ...window.__politicardDebug,\n        slotPositions: slotPositionsRef.current\n      };\n    } catch (e) {\n      // don't let debug mapping break rendering\n    }\n\n    // Run diagnostics after canvas is fully rendered\n    runDiagnostics();\n  }, [drawLane, drawHandP1, drawHandP2, drawInterventionsP1, drawInterventionsP2, drawPermanentSlotsP1, drawPermanentSlotsP2, drawInstantSlots, drawInfoPanels, devMode, runDiagnostics]);\n  const DRAW_LAYOUT_OVERLAY = false; // force off per new layout system\n\n  // Load slot symbol images once\n  useEffect(() => {\n    const load = (key, src) => {\n      const img = new Image();\n      img.onload = () => {\n        slotSymbolImgsRef.current.set(key, img);\n      };\n      img.onerror = () => {\n        console.warn('Failed to load slot icon', src);\n      };\n      img.src = src;\n    };\n    // load all slot icons\n    load('public', publicSymbolUrl);\n    load('sofort', sofortSymbolUrl);\n    load('dauerhaft', dauerhaftSymbolUrl);\n    load('government', governmentSymbolUrl);\n    load('intervention', interventionSymbolUrl);\n\n    // load test GIF for gov overlay\n    try {\n      const img = new Image();\n      img.onload = () => {\n        govGifRef.current = img;\n      };\n      img.onerror = () => {\n        console.warn('Failed to load gov overlay gif', govPlaceGifUrl);\n      };\n      img.src = govPlaceGifUrl;\n    } catch (e) {}\n    // load spritesheet for placement animation\n    try {\n      const s = new Image();\n      s.onload = () => {\n        govSpritesRef.current = s;\n      };\n      s.onerror = () => {\n        console.warn('Failed to load gov spritesheet', govPlaceSpritesheetUrl);\n      };\n      s.src = govPlaceSpritesheetUrl;\n    } catch (e) {}\n    // load spritesheet for instant initiative activation\n    try {\n      const si = new Image();\n      si.onload = () => {\n        instantSpritesRef.current = si;\n      };\n      si.onerror = () => {\n        console.warn('Failed to load instant spritesheet', instantSpritesheetUrl);\n      };\n      si.src = instantSpritesheetUrl;\n    } catch (e) {}\n\n    // load spritesheet for hit/target animation (25 frames)\n    try {\n      const h = new Image();\n      h.onload = () => {\n        hitSpritesRef.current = h;\n      };\n      h.onerror = () => {\n        console.warn('Failed to load hit spritesheet', hitSpritesheetUrl);\n      };\n      h.src = hitSpritesheetUrl;\n    } catch (e) {}\n\n    // ensure first draw\n    requestAnimationFrame(draw);\n  }, [draw]);\n\n  // Expose debug trigger to manually start gov sprite animation by slot-key or uid\n  useEffect(() => {\n    window.__pc_triggerGovAnim = id => {\n      try {\n        var _zone$data$player2, _zone$data$lane2, _zone$data$index2;\n        const now = performance.now();\n        // if id is slot key like '1.aussen.2'\n        if (typeof id === 'string' && id.indexOf('.') >= 0) {\n          govSpriteStateRef.current[id] = {\n            started: now,\n            frameCount: 14,\n            frameDuration: 40\n          };\n          return;\n        }\n\n        // otherwise try to resolve as uid/id to a clickZone\n        const uid = id;\n        const zone = clickZonesRef.current.find(z => {\n          var _z$data$card$uid5;\n          return z.data && z.data.card && (((_z$data$card$uid5 = z.data.card.uid) !== null && _z$data$card$uid5 !== void 0 ? _z$data$card$uid5 : String(z.data.card.id)) === uid || z.data.card.id === uid);\n        });\n        if (!zone) {\n          console.warn('pc_triggerGovAnim: no slot found for uid', uid);\n          return;\n        }\n        const player = (_zone$data$player2 = zone.data.player) !== null && _zone$data$player2 !== void 0 ? _zone$data$player2 : 1;\n        const lane = (_zone$data$lane2 = zone.data.lane) !== null && _zone$data$lane2 !== void 0 ? _zone$data$lane2 : zone.data.slot && typeof zone.data.slot === 'string' ? zone.data.slot : 'aussen';\n        const index = (_zone$data$index2 = zone.data.index) !== null && _zone$data$index2 !== void 0 ? _zone$data$index2 : 0;\n        const key = `${player}.${lane}.${index}`;\n        govSpriteStateRef.current[key] = {\n          started: now,\n          frameCount: 14,\n          frameDuration: 40\n        };\n      } catch (e) {\n        console.warn('pc_triggerGovAnim error', e);\n      }\n    };\n    // expose easy alias\n    try {\n      window.pc_triggerGovAnim = window.__pc_triggerGovAnim;\n    } catch (e) {}\n    return () => {\n      delete window.__pc_triggerGovAnim;\n    };\n  }, []);\n\n  // Expose debug trigger for hit animation (key: '1.aussen.0' or uid)\n  useEffect(() => {\n    window.__pc_triggerHitAnim = id => {\n      try {\n        var _zone$data$player3, _zone$data$lane3, _zone$data$index3;\n        const now = performance.now();\n        // if id is slot key like '1.aussen.2'\n        if (typeof id === 'string' && id.indexOf('.') >= 0) {\n          hitSpriteStateRef.current[id] = {\n            started: now,\n            frameCount: 25,\n            frameDuration: 30\n          };\n          return;\n        }\n\n        // otherwise try to resolve as uid/id to a clickZone\n        const uid = id;\n        const zone = clickZonesRef.current.find(z => {\n          var _z$data$card$uid6;\n          return z.data && z.data.card && (((_z$data$card$uid6 = z.data.card.uid) !== null && _z$data$card$uid6 !== void 0 ? _z$data$card$uid6 : String(z.data.card.id)) === uid || z.data.card.id === uid);\n        });\n        if (!zone) {\n          console.warn('pc_triggerHitAnim: no slot found for uid', uid);\n          return;\n        }\n        const player = (_zone$data$player3 = zone.data.player) !== null && _zone$data$player3 !== void 0 ? _zone$data$player3 : 1;\n        const lane = (_zone$data$lane3 = zone.data.lane) !== null && _zone$data$lane3 !== void 0 ? _zone$data$lane3 : zone.data.slot && typeof zone.data.slot === 'string' ? zone.data.slot : 'aussen';\n        const index = (_zone$data$index3 = zone.data.index) !== null && _zone$data$index3 !== void 0 ? _zone$data$index3 : 0;\n        const key = `${player}.${lane}.${index}`;\n        hitSpriteStateRef.current[key] = {\n          started: now,\n          frameCount: 25,\n          frameDuration: 30\n        };\n      } catch (e) {\n        console.warn('pc_triggerHitAnim error', e);\n      }\n    };\n    try {\n      window.pc_triggerHitAnim = window.__pc_triggerHitAnim;\n    } catch (e) {}\n    return () => {\n      delete window.__pc_triggerHitAnim;\n    };\n  }, []);\n\n  // Redraw when game state or selection changes\n  useEffect(() => {\n    requestAnimationFrame(draw);\n  }, [gameState, selectedHandIndex, draw]);\n\n  // Continuous render loop to keep canvas updated without relying on external state refs\n  useEffect(() => {\n    let frame;\n    const loop = () => {\n      draw();\n      frame = requestAnimationFrame(loop);\n    };\n    frame = requestAnimationFrame(loop);\n    return () => cancelAnimationFrame(frame);\n  }, [draw]);\n  const handleCardClick = useCallback(data => {\n    // Hand-Klick\n    if (data.type === 'hand_p1') {\n      var _data$card$uid, _data$card, _data$card2, _gameState$hands;\n      const uid = (_data$card$uid = (_data$card = data.card) === null || _data$card === void 0 ? void 0 : _data$card.uid) !== null && _data$card$uid !== void 0 ? _data$card$uid : (_data$card2 = data.card) === null || _data$card2 === void 0 ? void 0 : _data$card2.id;\n      const stateHand = ((_gameState$hands = gameState.hands) === null || _gameState$hands === void 0 ? void 0 : _gameState$hands[1]) || [];\n      const idxInState = stateHand.findIndex(c => {\n        var _c$uid3;\n        return ((_c$uid3 = c.uid) !== null && _c$uid3 !== void 0 ? _c$uid3 : c.id) === uid;\n      });\n      onCardClick(data);\n      return;\n    }\n\n    // Slot-Klick\n    if (data.type === 'row_slot') {\n      var _gameState$board$1$in, _gameState$board, _gameState$board$, _gameState$board$1$au, _gameState$board2, _gameState$board2$;\n      const lane = data.lane;\n      const cap = getLaneCapacity(lane);\n\n      // Hole aktuelle Row-Länge aus gameState\n      const rowCards = lane === 'public' ? (_gameState$board$1$in = (_gameState$board = gameState.board) === null || _gameState$board === void 0 ? void 0 : (_gameState$board$ = _gameState$board[1]) === null || _gameState$board$ === void 0 ? void 0 : _gameState$board$.innen) !== null && _gameState$board$1$in !== void 0 ? _gameState$board$1$in : [] : (_gameState$board$1$au = (_gameState$board2 = gameState.board) === null || _gameState$board2 === void 0 ? void 0 : (_gameState$board2$ = _gameState$board2[1]) === null || _gameState$board2$ === void 0 ? void 0 : _gameState$board2$.aussen) !== null && _gameState$board$1$au !== void 0 ? _gameState$board$1$au : [];\n      if (rowCards.length >= cap) {\n        // Optional: UI Feedback\n        console.warn(`Row ${lane} is full (${rowCards.length}/${cap})`);\n        return;\n      }\n      onCardClick(data);\n      return;\n    }\n\n    // Andere Klicks (empty_slot, board_card, etc.)\n    onCardClick(data);\n  }, [gameState, onCardClick]);\n  const handleClick = useCallback(e => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const rect = canvas.getBoundingClientRect();\n    const {\n      scale,\n      offsetX,\n      offsetY\n    } = getUiTransform(canvas.width, canvas.height);\n    const mx = (e.clientX - rect.left - offsetX) / scale;\n    const my = (e.clientY - rect.top - offsetY) / scale;\n    const hit = clickZonesRef.current.find(z => mx >= z.x && mx <= z.x + z.w && my >= z.y && my <= z.y + z.h);\n    if (hit) {\n      console.debug('[CanvasClick] mx,my,hit:', mx, my, hit.data);\n      try {\n        // If user clicked a drawn card in an instant slot, normalize to activate_instant\n        const d = hit.data || {};\n        if (d.type === 'slot_card' && d.slot === 'instant') {\n          handleCardClick({\n            type: 'activate_instant',\n            player: d.player || 1,\n            card: d.card\n          });\n          return;\n        }\n        // Fallback: if there's an explicit activate_instant zone, pass through\n        if (d.type === 'activate_instant') {\n          handleCardClick(d);\n          return;\n        }\n      } catch (err) {}\n      handleCardClick(hit.data);\n    }\n  }, [handleCardClick]);\n  const handleMouseMove = useCallback(e => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const rect = canvas.getBoundingClientRect();\n    const {\n      scale,\n      offsetX,\n      offsetY\n    } = getUiTransform(canvas.width, canvas.height);\n    const mx = (e.clientX - rect.left - offsetX) / scale;\n    const my = (e.clientY - rect.top - offsetY) / scale;\n    const hit = clickZonesRef.current.find(z => mx >= z.x && mx <= z.x + z.w && my >= z.y && my <= z.y + z.h);\n    if (hit) {\n      var _hit$data$card;\n      console.log('[hover]', hit.data.type, (_hit$data$card = hit.data.card) === null || _hit$data$card === void 0 ? void 0 : _hit$data$card.name);\n      onCardHover({\n        ...hit.data,\n        x: e.clientX,\n        y: e.clientY\n      });\n    } else {\n      onCardHover(null);\n    }\n  }, [onCardHover]);\n  const handleWheel = useCallback(e => {\n    // only enable when player1 has more slots than visible\n    const handLen = gameState.hands && gameState.hands[1] ? gameState.hands[1].length : 0;\n    const zone = getZone('hand.player');\n    if (!zone) return;\n    if (handLen <= 5) return; // nothing to scroll\n\n    // Prevent page scrolling when over canvas\n    e.preventDefault();\n\n    // accumulate target offset (invert so wheel down moves cards up)\n    // Each wheel step moves by 48px per delta unit\n    const delta = Math.sign(e.deltaY) * 48;\n    // compute slot height more robustly\n    const slots = computeSlotRects(zone);\n    const slotH = slots && slots.length > 0 ? slots[0].h : zone.rectPx[3] / 5;\n    const visible = 5;\n    const maxOffset = -(Math.max(0, handLen - visible) * slotH);\n    handScrollTargetRef.current = Math.max(Math.min(handScrollTargetRef.current - delta, 0), maxOffset);\n  }, [gameState.hands]);\n  const handleTouchStart = useCallback(e => {\n    if (!e.touches || e.touches.length === 0) return;\n    const handLen = gameState.hands && gameState.hands[1] ? gameState.hands[1].length : 0;\n    if (handLen <= 5) return;\n    isTouchingRef.current = true;\n    const y = e.touches[0].clientY;\n    touchStartYRef.current = y;\n    lastTouchYRef.current = y;\n    e.preventDefault();\n  }, [gameState.hands]);\n  const handleTouchMove = useCallback(e => {\n    var _lastTouchYRef$curren;\n    if (!isTouchingRef.current) return;\n    if (!e.touches || e.touches.length === 0) return;\n    const y = e.touches[0].clientY;\n    const last = (_lastTouchYRef$curren = lastTouchYRef.current) !== null && _lastTouchYRef$curren !== void 0 ? _lastTouchYRef$curren : y;\n    const dy = y - last; // positive when moving down\n    lastTouchYRef.current = y;\n\n    // invert so dragging up moves cards up\n    const delta = -dy;\n    const handLen = gameState.hands && gameState.hands[1] ? gameState.hands[1].length : 0;\n    const zone = getZone('hand.player');\n    if (!zone) return;\n    const slots = computeSlotRects(zone);\n    const slotH = slots && slots.length > 0 ? slots[0].h : zone.rectPx[3] / 5;\n    const visible = 5;\n    const maxOffset = -(Math.max(0, handLen - visible) * slotH);\n    handScrollTargetRef.current = Math.max(Math.min(handScrollTargetRef.current + delta, 0), maxOffset);\n    e.preventDefault();\n  }, [gameState.hands]);\n  const handleTouchEnd = useCallback(e => {\n    isTouchingRef.current = false;\n    touchStartYRef.current = null;\n    lastTouchYRef.current = null;\n  }, []);\n\n  // Expose debug trigger to manually start instant sprite animation by slot-key or uid\n  useEffect(() => {\n    window.__pc_triggerInstantAnim = key => {\n      const now = performance.now();\n      instantSpriteStateRef.current[key || '1.instant.0'] = {\n        started: now,\n        frameCount: 14,\n        frameDuration: 40\n      };\n    };\n    // alias\n    try {\n      window.pc_triggerInstantAnim = window.__pc_triggerInstantAnim;\n    } catch (e) {}\n    return () => {\n      delete window.__pc_triggerGovAnim;\n      delete window.__pc_triggerInstantAnim;\n    };\n  }, []);\n\n  // Click handler wrapper for corruption selection\n  const handleCardClickInternal = useCallback(data => {\n    const sel = gameState.pendingAbilitySelect;\n    if (sel && sel.type === 'corruption_steal') {\n      // expect data.uid and data.player and data.lane\n      if (data.player !== sel.actorPlayer && data.lane === 'aussen') {\n        try {\n          window.dispatchEvent(new CustomEvent('pc:corruption_pick_target', {\n            detail: {\n              player: sel.actorPlayer,\n              targetUid: data.uid\n            }\n          }));\n        } catch (e) {}\n        return; // consume click\n      }\n    }\n    onCardClick(data);\n  }, [gameState, onCardClick]);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    width: 1920,\n    height: 1080,\n    style: {\n      display: 'block',\n      width: '100%',\n      height: '100%',\n      imageRendering: 'auto'\n    },\n    onClick: handleClick,\n    onMouseMove: handleMouseMove,\n    onWheel: handleWheel,\n    onTouchStart: handleTouchStart,\n    onTouchMove: handleTouchMove,\n    onTouchEnd: handleTouchEnd\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 1719,\n    columnNumber: 5\n  }, this);\n};\n_s(GameCanvas, \"3lM1B4zv4y+UcOpF/ATujQDkDRg=\", false, function () {\n  return [useVisualEffectsSafe];\n});\n_c = GameCanvas;\nvar _c;\n$RefreshReg$(_c, \"GameCanvas\");","map":{"version":3,"names":["React","useRef","useEffect","useCallback","useVisualEffectsSafe","LAYOUT","getZone","computeSlotRects","getUiTransform","getLaneCapacity","getPublicRects","getGovernmentRects","getSofortRect","sortHandCards","getCardImagePath","influenceIconUrl","publicSymbolUrl","sofortSymbolUrl","dauerhaftSymbolUrl","governmentSymbolUrl","interventionSymbolUrl","govPlaceGifUrl","govPlaceSpritesheetUrl","instantSpritesheetUrl","hitSpritesheetUrl","jsxDEV","_jsxDEV","isCorruptionSelection","state","player","sel","pendingAbilitySelect","type","actorPlayer","GameCanvas","gameState","selectedHandIndex","onCardClick","onCardHover","devMode","_s","handler","ev","_ev$detail","detail","dice","document","querySelector","window","dispatchEvent","CustomEvent","e","addEventListener","removeEventListener","canvasRef","visualEffects","clickZonesRef","handScrollTargetRef","handScrollCurrentRef","handScrollEnabledRef","touchStartYRef","lastTouchYRef","isTouchingRef","backgroundImageRef","imageCacheRef","Map","influenceImgRef","influenceAnimRef","prevInfluencesRef","slotSymbolImgsRef","slotPositionsRef","govGifRef","govSpritesRef","hitSpritesRef","govSpriteStateRef","instantSpritesRef","instantSpriteStateRef","hitSpriteStateRef","drawSlotIconWithPulse","ctx","img","x","y","w","h","phase","complete","now","performance","base","pulseRange","period","pulse","Math","sin","save","globalAlpha","drawImage","grad","createLinearGradient","addColorStop","globalCompositeOperation","fillStyle","fillRect","restore","Image","src","current","drawCardAt","card","size","selected","showAPCost","_shield","extraAlpha","_uid","uid","id","list","playAnimsRef","__pc_play_anims","anim","find","a","p","min","max","started","duration","pow","dx","dy","s","floor","cached","get","naturalWidth","onload","set","kind","_influence","barH","fontSize","font","textAlign","textBaseline","fillText","influence","protected","shield","deactivated","_influence2","badgeHeight","badgeWidth","badgeX","badgeY","beginPath","roundRect","fill","strokeStyle","lineWidth","strokeRect","getSlotDisplayName","zoneId","index","slotNumber","includes","drawLane","lane","clickable","zone","slots","arr","board","forEach","idx","bgColor","isSelected","hands","clickZone","textY","name","push","data","slotName","drawHandP1","hand","target","offsetY","round","i","originalIndex","findIndex","c","isSel","sx","sy","drawHandP2","rectPx","drawInterventionsP1","traps","zx","zy","zw","zh","drawInterventionsP2","drawSingleSlot","clickType","slot","drawPermanentSlotsP1","permanentSlots","government","public","drawPermanentSlotsP2","drawInstantSlots","sofortPlayerCard","sofort","sofortOppCard","getActiveKeywordsAndSubcategories","allCards","innen","aussen","filter","keywords","Set","subcategories","tag","add","publicCard","oligarchNames","platformNames","movementNames","ngoNames","intelligenceNames","mediaNames","Array","from","drawInfoPanels","govPanelX","govPanelY","govPanelW","govPanelH","length","keyword","pubPanelX","pubPanelY","pubPanelW","pubPanelH","subcategory","displayName","substring","runDiagnostics","handZones","z","uiUIDs","map","_z$data$card$uid","Boolean","stateHand","stateUIDs","_c$uid","missingInState","u","missingInUI","_politicardDebug","mismatch","ts","Date","uiCount","stateCount","stack","Error","__politicardDebug","slice","concat","console","warn","error","draw","_LAYOUT$background","_LAYOUT$background2","canvas","getContext","currSnapshot","collect","_c$uid2","_c$influence","String","Object","keys","_currSnapshot$uid","_prevInfluencesRef$cu","curr","prev","delta","start","amount","clearRect","width","height","background","enabled","scale","offsetX","translate","opponentPublicRects","opponentGovRects","permGovZoneOpp","ox","oy","ow","oh","permPubZoneOpp","ox2","oy2","ow2","oh2","playerPublicRects","playerGovRects","sprites","gif","anims","indexOf","inner","frameCount","frameDuration","_zone$data$player","_zone$data$lane","_zone$data$index","_z$data$card$uid2","isGov","isInstant","dt","key","instKey","k","st","elapsed","total","frame","parts","split","Number","rect","sw","sh","spritesI","nowI","rects","instantRect","ix","iy","iw","ih","spritesH","nowH","permGovZone","permPubZone","x2","y2","w2","h2","instantPlayerZone","interventionsZone","particlesRef","popsRef","ripplesRef","apLabelsRef","reducedMotion","age","life","splice","vy","gravity","vx","t","color","arc","PI","pops","pop","eased","_z$data$card$uid3","ripples","r","radius","g","createRadialGradient","cx","cy","showAp","_apSpawned","apX","apY","text","apl","l","_z$data$card$uid4","maxPulse","totalAmount","remaining","delete","ringRadius","ringX","ringY","ceil","stroke","labelX","labelY","random","now2","abs","rgbTeal","rgbBurg","rgbPurple","rgbYellow","rgbOrange","slotType","alpha","lw","toFixed","uiTransform","canvasSize","zones","clickZones","d","_d$player","_d$lane","slotIndex","slotPositions","DRAW_LAYOUT_OVERLAY","load","onerror","si","requestAnimationFrame","__pc_triggerGovAnim","_zone$data$player2","_zone$data$lane2","_zone$data$index2","_z$data$card$uid5","pc_triggerGovAnim","__pc_triggerHitAnim","_zone$data$player3","_zone$data$lane3","_zone$data$index3","_z$data$card$uid6","pc_triggerHitAnim","loop","cancelAnimationFrame","handleCardClick","_data$card$uid","_data$card","_data$card2","_gameState$hands","idxInState","_c$uid3","_gameState$board$1$in","_gameState$board","_gameState$board$","_gameState$board$1$au","_gameState$board2","_gameState$board2$","cap","rowCards","handleClick","getBoundingClientRect","mx","clientX","left","my","clientY","top","hit","debug","err","handleMouseMove","_hit$data$card","log","handleWheel","handLen","preventDefault","sign","deltaY","slotH","visible","maxOffset","handleTouchStart","touches","handleTouchMove","_lastTouchYRef$curren","last","handleTouchEnd","__pc_triggerInstantAnim","pc_triggerInstantAnim","handleCardClickInternal","targetUid","ref","style","display","imageRendering","onClick","onMouseMove","onWheel","onTouchStart","onTouchMove","onTouchEnd","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/skank/Videos/Cards/Milchcards/src/components/GameCanvas.tsx"],"sourcesContent":["import React, { useRef, useEffect, useCallback } from 'react';\nimport { useVisualEffects, useVisualEffectsSafe } from '../context/VisualEffectsContext';\nimport { GameState, Card, PoliticianCard, Player, Lane } from '../types/game';\nimport { LAYOUT, getZone, computeSlotRects, getUiTransform, getLaneCapacity, getPublicRects, getGovernmentRects, getSofortRect } from '../ui/layout';\nimport { drawCardImage, sortHandCards } from '../utils/gameUtils';\nimport { getNetApCost } from '../utils/ap';\nimport { getCardImagePath } from '../data/gameData';\nimport influenceIconUrl from '../assets/icons/influence.svg';\nimport publicSymbolUrl from '../assets/icons/public_symbol.png';\nimport sofortSymbolUrl from '../assets/icons/sofort_initiative_symbol.png';\nimport dauerhaftSymbolUrl from '../assets/icons/dauerhaft_initative.png';\nimport governmentSymbolUrl from '../assets/icons/government_symbol.png';\nimport interventionSymbolUrl from '../assets/icons/intervention_symbol.png';\nimport govPlaceGifUrl from '../assets/effect_gif/place_card_gov_256x256.gif';\nimport govPlaceSpritesheetUrl from '../ui/sprites/playcard_gov_256x256_14.png';\nimport instantSpritesheetUrl from '../ui/sprites/activate_trap_hit_target_256x256_16x2.png';\nimport hitSpritesheetUrl from '../ui/sprites/activate_inititive_hit_target_256x256_16_2rows.png';\n\ninterface GameCanvasProps {\n  gameState: GameState;\n  selectedHandIndex: number | null;\n  onCardClick: (data: any) => void;\n  onCardHover: (data: any) => void;\n  devMode?: boolean; // 🔧 DEV MODE: Show P2 hand when true\n}\n\n// Helper: is corruption target selection active\nfunction isCorruptionSelection(state: GameState, player: Player) {\n  const sel: any = (state as any).pendingAbilitySelect;\n  return sel && sel.type === 'corruption_steal' && sel.actorPlayer === player;\n}\n\nexport const GameCanvas: React.FC<GameCanvasProps> = ({\n  gameState,\n  selectedHandIndex,\n  onCardClick,\n  onCardHover,\n  devMode = false,\n}) => {\n  // listen for dice roll requests from resolver and trigger Dice3D\n  useEffect(() => {\n    const handler = (ev: any) => {\n      try {\n        const player = ev.detail?.player;\n        // find Dice3D canvas on page and trigger click (it rolls on click)\n        const dice = document.querySelector('canvas') as HTMLCanvasElement | null;\n        // better: dispatch global event so App-level Dice3D component can roll programmatically\n        window.dispatchEvent(new CustomEvent('pc:ui_request_dice_roll', { detail: { player } }));\n      } catch (e) {}\n    };\n    window.addEventListener('pc:request_dice_roll', handler as EventListener);\n    return () => window.removeEventListener('pc:request_dice_roll', handler as EventListener);\n  }, []);\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const visualEffects = useVisualEffectsSafe();\n  const clickZonesRef = useRef<Array<{ x: number; y: number; w: number; h: number; data: any }>>([]);\n  // Smooth vertical scroll for P1 hand when it has more than visible slots\n  const handScrollTargetRef = useRef<number>(0);\n  const handScrollCurrentRef = useRef<number>(0);\n  const handScrollEnabledRef = useRef<boolean>(true);\n  // Touch handling refs\n  const touchStartYRef = useRef<number | null>(null);\n  const lastTouchYRef = useRef<number | null>(null);\n  const isTouchingRef = useRef<boolean>(false);\n  const backgroundImageRef = useRef<HTMLImageElement | null>(null);\n  const imageCacheRef = useRef<Map<string, HTMLImageElement>>(new Map());\n  const influenceImgRef = useRef<HTMLImageElement | null>(null);\n  // Animation state for visual influence changes: Map<uid, Array<Anim>>\n  const influenceAnimRef = useRef<Map<string, Array<{ start: number; duration: number; amount: number }>>>(new Map());\n  // Previous per-card influence snapshot to detect increases\n  const prevInfluencesRef = useRef<Record<string, number>>({});\n  // Slot symbol images\n  const slotSymbolImgsRef = useRef<Map<string, HTMLImageElement>>(new Map());\n  // Map of canonical slot positions for animations: key -> {x,y,w,h,cx,cy}\n  const slotPositionsRef = useRef<Record<string, { x: number; y: number; w: number; h: number; cx: number; cy: number }>>({});\n  // Temporary test GIF for government slots\n  const govGifRef = useRef<HTMLImageElement | null>(null);\n  const govSpritesRef = useRef<HTMLImageElement | null>(null);\n  // hit (target) spritesheet (25 frames)\n  const hitSpritesRef = useRef<HTMLImageElement | null>(null);\n  // sprite animation state keyed by slot-key (player.lane.index)\n  const govSpriteStateRef = useRef<Record<string, { started: number; frameCount: number; frameDuration: number }>>({});\n  const instantSpritesRef = useRef<HTMLImageElement | null>(null);\n  const instantSpriteStateRef = useRef<Record<string, { started: number; frameCount: number; frameDuration: number }>>({});\n\n  const hitSpriteStateRef = useRef<Record<string, { started: number; frameCount: number; frameDuration: number }>>({});\n\n  // Helper: draw slot icons with uniform pulsing opacity and a light reflection\n  const drawSlotIconWithPulse = useCallback((ctx: CanvasRenderingContext2D, img: HTMLImageElement | undefined, x: number, y: number, w: number, h: number, phase = 0) => {\n    if (!img || !img.complete) return;\n    try {\n      const now = performance.now();\n      const base = 0.10; // base opacity\n      const pulseRange = 0.08; // pulse amplitude (-> up to base + pulseRange)\n      const period = 700; // ms\n      const pulse = base + pulseRange * (0.5 + 0.5 * Math.sin(now / period + phase));\n\n      // draw icon with pulsing alpha\n      ctx.save();\n      ctx.globalAlpha = pulse;\n      ctx.drawImage(img, x, y, w, h);\n\n      // subtle reflection: gradient overlay on top half\n      const grad = ctx.createLinearGradient(x, y, x, y + h * 0.5);\n      grad.addColorStop(0, `rgba(255,255,255,${0.18 * pulse})`);\n      grad.addColorStop(1, `rgba(255,255,255,0)`);\n      ctx.globalCompositeOperation = 'lighter';\n      ctx.fillStyle = grad as any;\n      ctx.fillRect(x, y, w, h * 0.5);\n\n      ctx.restore();\n    } catch (e) {\n      // silent fallback\n    }\n  }, []);\n\n  // Load influence icon once\n  useEffect(() => {\n    const img = new Image();\n    img.src = influenceIconUrl;\n    influenceImgRef.current = img;\n  }, []);\n\n\n  const drawCardAt = useCallback((\n    ctx: CanvasRenderingContext2D,\n    card: Card,\n    x: number,\n    y: number,\n    size: number,\n    selected: boolean = false,\n    showAPCost: boolean = false,\n    player?: Player\n  ) => {\n    // Apply per-card fade-in if a play animation is active for this uid\n    let extraAlpha = 1;\n    try {\n      const uid = (card as any).uid ?? (card as any).id;\n      const list = (visualEffects && visualEffects.playAnimsRef && visualEffects.playAnimsRef.current) || (window as any).__pc_play_anims || [];\n      const anim = list.find((a: any) => a.uid === uid);\n      if (anim) {\n        const p = Math.min(1, Math.max(0, (performance.now() - anim.started) / anim.duration));\n        // ease-out\n        extraAlpha = Math.pow(p, 2);\n      }\n    } catch (e) {}\n    let dx = x, dy = y, s = size;\n    if (selected) {\n      s = Math.floor(size * 1.05);\n      dx = x - Math.floor((s - size) / 2);\n      dy = y - Math.floor((s - size) / 2);\n    }\n\n    // Note: pulse overlay is drawn at top layer after all cards are rendered\n\n    // Draw card image with caching to prevent flicker in continuous loop\n    const src = getCardImagePath(card, 'ui');\n    const cached = imageCacheRef.current.get(src);\n    ctx.save();\n    ctx.globalAlpha = extraAlpha;\n    if (cached && cached.complete && cached.naturalWidth > 0) {\n      ctx.drawImage(cached, dx, dy, s, s);\n    } else {\n      const img = new Image();\n      img.onload = () => {\n        imageCacheRef.current.set(src, img);\n        // Note: onload happens async; draw will occur on next frame\n        // don't draw here into stale ctx\n      };\n      img.src = src;\n      imageCacheRef.current.set(src, img);\n    }\n\n    ctx.restore();\n\n    // Status-Indikatoren (für alle Board-Karten)\n    // Einfluss-Wert dauerhaft anzeigen (oben links) – nur für Regierungskarten\n    if ((card as any).kind === 'pol') {\n      const barH = Math.max(20, Math.floor(s * 0.12) + 6);\n      ctx.fillStyle = 'rgba(0,0,0,0.6)';\n      ctx.fillRect(dx, dy + s - barH, s, barH);\n\n      ctx.fillStyle = '#ffffff';\n      const fontSize = Math.floor(s * 0.12);\n      ctx.font = `bold ${fontSize}px sans-serif`;\n      ctx.textAlign = 'left';\n      ctx.textBaseline = 'middle';\n      ctx.fillText(`${(card as any).influence ?? 0}`, dx + 8, dy + s - barH / 2);\n    }\n    // Schutz-Status (blauer Punkt)\n    if ((card as any).protected || ((card as any).shield ?? 0) > 0) {\n      ctx.fillStyle = '#1da1f2';\n      ctx.fillRect(dx + s - 22, dy + 6, 16, 16);\n    }\n    // Deaktiviert-Status (roter Punkt)\n    if ((card as any).deactivated) {\n      ctx.fillStyle = '#b63838';\n      ctx.fillRect(dx + s - 22, dy + 26, 16, 16);\n    }\n\n    // Einfluss-Badge für Handkarten oben rechts (nur Regierungskarten)\n    if (showAPCost && player && (card as any).kind === 'pol') {\n      const badgeHeight = Math.max(16, Math.floor(s * 0.12));\n      const badgeWidth = badgeHeight * 2;\n      const badgeX = dx + s - badgeWidth - 6;\n      const badgeY = dy + 6;\n\n      // Semi-transparent dunkler Hintergrund\n      ctx.fillStyle = 'rgba(0,0,0,0.6)';\n      ctx.beginPath();\n      ctx.roundRect(badgeX, badgeY, badgeWidth, badgeHeight, badgeHeight / 2);\n      ctx.fill();\n\n      // Influence icon (90% opacity) links im Badge\n      if (influenceImgRef.current && influenceImgRef.current.complete) {\n        ctx.globalAlpha = 0.9;\n        ctx.drawImage(influenceImgRef.current, badgeX + 2, badgeY + 2, badgeHeight - 4, badgeHeight - 4);\n        ctx.globalAlpha = 1;\n      }\n\n      // Influence number rechts im Badge\n      ctx.fillStyle = '#ffffff';\n      ctx.font = `bold ${Math.floor(badgeHeight * 0.5)}px sans-serif`;\n      ctx.textAlign = 'right';\n      ctx.textBaseline = 'middle';\n      ctx.fillText(`${(card as any).influence ?? 0}`, badgeX + badgeWidth - 4, badgeY + badgeHeight / 2);\n\n      // Reset align\n      ctx.textAlign = 'start';\n      ctx.textBaseline = 'alphabetic';\n    }\n\n    // NOTE: influence overlays (pulse + labels) are drawn in a separate pass\n\n    // Auswahl-Rahmen\n    if (selected) {\n      ctx.strokeStyle = '#61dafb';\n      ctx.lineWidth = 3;\n      ctx.strokeRect(dx + 1, dy + 1, s - 2, s - 2);\n      ctx.lineWidth = 1;\n    }\n\n    // Return exact 256x256 click zone over the card\n    // Since all cards are 256x256, the click zone should match exactly\n    return { x: dx, y: dy, w: 256, h: 256 };\n  }, [gameState]);\n\n\n\n\n\n\n\n  // Slot-Benennungs-Funktion basierend auf Glossar\n  const getSlotDisplayName = useCallback((zoneId: string, index: number, player: Player): string => {\n    const slotNumber = index + 1;\n\n    if (zoneId.includes('government')) {\n      if (zoneId.includes('player')) {\n        return `Regierungsreihe Slot ${slotNumber}`;\n      } else {\n        return `Gegner Regierung Slot ${slotNumber}`;\n      }\n    } else if (zoneId.includes('public')) {\n      if (zoneId.includes('player')) {\n        return `Öffentlichkeitsreihe Slot ${slotNumber}`;\n      } else {\n        return `Gegner Öffentlichkeit Slot ${slotNumber}`;\n      }\n    } else if (zoneId.includes('permanent.government')) {\n      if (zoneId.includes('player')) {\n        return 'Regierung Spezial-Slot';\n      } else {\n        return 'Gegner Regierung Spezial-Slot';\n      }\n    } else if (zoneId.includes('permanent.public')) {\n      if (zoneId.includes('player')) {\n        return 'Öffentlichkeit Spezial-Slot';\n      } else {\n        return 'Gegner Öffentlichkeit Spezial-Slot';\n      }\n    } else if (zoneId.includes('instant')) {\n      if (zoneId.includes('player')) {\n        return 'Sofort-Slot';\n      } else {\n        return 'Gegner Sofort-Slot';\n      }\n    } else if (zoneId.includes('hand')) {\n      return 'Hand';\n    } else if (zoneId.includes('interventions')) {\n      return 'Interventionen';\n    }\n\n    return `Slot ${slotNumber}`;\n  }, []);\n\n  const drawLane = useCallback((\n    ctx: CanvasRenderingContext2D,\n    zoneId: string,\n    player: Player,\n    lane: Lane,\n    clickable: boolean\n  ) => {\n    const zone = getZone(zoneId);\n    if (!zone) return;\n\n    const slots = computeSlotRects(zone);\n    const arr = gameState.board[player][lane];\n\n    slots.forEach((s, idx) => {\n      const card = arr[idx];\n\n      // Hintergrundfarbe nach Kategorie\n      let bgColor = 'rgba(0,0,0,0.1)'; // Standard\n      if (zoneId.includes('government')) {\n        bgColor = 'rgba(255, 197, 0, 0.15)'; // Hellgelb für Regierung\n      } else if (zoneId.includes('public')) {\n        bgColor = 'rgba(0, 255, 0, 0.15)'; // Hellgrün für Öffentlichkeit\n      }\n\n      ctx.fillStyle = bgColor;\n      ctx.fillRect(s.x, s.y, s.w, s.h);\n\n      // Slot-Rahmen\n      ctx.strokeStyle = 'rgba(255,255,255,0.06)';\n      ctx.strokeRect(s.x + 0.5, s.y + 0.5, s.w - 1, s.h - 1);\n\n      if (card) {\n        const isSelected = player === 1 && selectedHandIndex !== null && gameState.hands[1][selectedHandIndex] === card;\n        const clickZone = drawCardAt(ctx, card, s.x, s.y, s.w, isSelected, false);\n\n        // Kartenname unter dem Slot anzeigen\n        ctx.fillStyle = 'rgba(255,255,255,0.9)';\n        ctx.font = 'bold 12px sans-serif';\n        ctx.textAlign = 'center';\n        const textY = s.y + s.h + 16;\n        ctx.fillText(card.name, s.x + s.w/2, textY);\n\n        clickZonesRef.current.push({\n          ...clickZone,\n          data: { type: 'board_card', player, lane, index: idx, card }\n        });\n      } else if (clickable && gameState.current === player) {\n        // Slot-Benennung anzeigen (für den aktuellen Spieler)\n        const slotName = getSlotDisplayName(zoneId, idx, player);\n        ctx.fillStyle = 'rgba(255,255,255,0.6)';\n        ctx.font = '11px sans-serif';\n        ctx.textAlign = 'center';\n        const textY = s.y + s.h/2;\n        ctx.fillText(slotName, s.x + s.w/2, textY);\n\n        clickZonesRef.current.push({\n          x: s.x, y: s.y, w: s.w, h: s.h,\n          data: { type: 'row_slot', lane, index: idx }\n        });\n      }\n    });\n  }, [gameState, selectedHandIndex, drawCardAt, getSlotDisplayName]);\n\n  const drawHandP1 = useCallback((ctx: CanvasRenderingContext2D) => {\n    const hand = sortHandCards(gameState.hands[1]);\n    const zone = getZone('hand.player');\n    if (!zone) return;\n\n    const slots = computeSlotRects(zone);\n    // Apply smooth offset (lerp towards target)\n    const target = handScrollTargetRef.current;\n    handScrollCurrentRef.current += (target - handScrollCurrentRef.current) * 0.15; // easing\n    const offsetY = Math.round(handScrollCurrentRef.current);\n    slots.forEach((s: { x: number; y: number; w: number; h: number }, i: number) => {\n      const card = hand[i];\n      if (!card) return;\n      // Find original index in unsorted hand for click handling\n      const originalIndex = gameState.hands[1].findIndex(c => c.uid === card.uid);\n      const isSel = selectedHandIndex === originalIndex;\n      // apply vertical offset\n      const sx = s.x;\n      const sy = s.y + offsetY;\n      const clickZone = drawCardAt(ctx, card, sx, sy, s.w, isSel, true, 1); // Show AP cost for player 1 hand\n      clickZonesRef.current.push({ ...clickZone, data: { type: 'hand_p1', index: originalIndex, card } });\n    });\n  }, [gameState.hands, selectedHandIndex, drawCardAt]);\n\n      // 🔧 DEV MODE: Player 2 Hand (rechts unten, kompakter)\n  const drawHandP2 = useCallback((ctx: CanvasRenderingContext2D) => {\n    const hand = sortHandCards(gameState.hands[2]);\n    const zone = getZone('hand.opponent');\n    if (!zone) return;\n\n    const slots = computeSlotRects(zone);\n\n    // Hintergrund für P2 Hand\n    const [x, y, w, h] = zone.rectPx;\n    ctx.fillStyle = 'rgba(255, 100, 100, 0.15)'; // Rötlicher Hintergrund für P2\n    ctx.fillRect(x, y, w, h);\n    ctx.strokeStyle = 'rgba(255, 100, 100, 0.3)';\n    ctx.strokeRect(x + 0.5, y + 0.5, w - 1, h - 1);\n\n    // Label für P2 Hand\n    ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\n    ctx.font = 'bold 14px sans-serif';\n    ctx.textAlign = 'center';\n    ctx.fillText('Player 2 Hand', x + w/2, y - 8);\n\n    slots.forEach((s: { x: number; y: number; w: number; h: number }, i: number) => {\n      const card = hand[i];\n      if (!card) return;\n      // Find original index in unsorted hand for click handling\n      const originalIndex = gameState.hands[2].findIndex(c => c.uid === card.uid);\n      const isSel = gameState.current === 2 && selectedHandIndex === originalIndex;\n      const clickZone = drawCardAt(ctx, card, s.x, s.y, s.w, isSel, true, 2); // Show AP cost for player 2 hand\n      clickZonesRef.current.push({ ...clickZone, data: { type: 'hand_p2', index: originalIndex, card } });\n    });\n  }, [gameState, selectedHandIndex, drawCardAt]);\n  // Interventions strip (player traps)\n  const drawInterventionsP1 = useCallback((ctx: CanvasRenderingContext2D) => {\n    const traps = gameState.traps[1] || [];\n    const zone = getZone('interventions.player');\n    if (!zone) return;\n\n    // Single intervention slot\n    const [zx, zy, zw, zh] = zone.rectPx;\n    const card = traps[0]; // Only first trap\n\n    // Hintergrund für Interventions-Slot\n    ctx.fillStyle = 'rgba(200, 160, 255, 0.15)'; // Lavendelfarben für Interventionen\n    ctx.fillRect(zx, zy, zw, zh);\n    ctx.strokeStyle = 'rgba(200, 160, 255, 0.3)';\n    ctx.strokeRect(zx + 0.5, zy + 0.5, zw - 1, zh - 1);\n\n    // Slot-Benennung für Interventions-Slot\n    ctx.fillStyle = 'rgba(200, 160, 255, 0.8)';\n    ctx.font = '11px sans-serif';\n    ctx.textAlign = 'left';\n    ctx.fillText('Intervention', zx + 8, zy + zh - 6);\n\n    if (card) {\n      const clickZone = drawCardAt(ctx, card, zx, zy, zw, false, false);\n      clickZonesRef.current.push({ ...clickZone, data: { type: 'trap_p1', index: 0, card } });\n    }\n  }, [gameState.traps, drawCardAt]);\n\n  // Interventions strip (opponent traps)\n  const drawInterventionsP2 = useCallback((ctx: CanvasRenderingContext2D) => {\n    const traps = gameState.traps[2] || [];\n    const zone = getZone('interventions.opponent');\n    if (!zone) return;\n\n    // Single intervention slot\n    const [zx, zy, zw, zh] = zone.rectPx;\n    const card = traps[0]; // Only first trap\n\n    // Hintergrund für Interventions-Slot\n    ctx.fillStyle = 'rgba(200, 160, 255, 0.15)'; // Lavendelfarben für Interventionen\n    ctx.fillRect(zx, zy, zw, zh);\n    ctx.strokeStyle = 'rgba(200, 160, 255, 0.3)';\n    ctx.strokeRect(zx + 0.5, zy + 0.5, zw - 1, zh - 1);\n\n    // Slot-Benennung für Interventions-Slot\n    ctx.fillStyle = 'rgba(200, 160, 255, 0.8)';\n    ctx.font = '11px sans-serif';\n    ctx.textAlign = 'left';\n    ctx.fillText('Intervention', zx + 8, zy + zh - 6);\n\n    if (card) {\n      const clickZone = drawCardAt(ctx, card, zx, zy, zw, false, false);\n      clickZonesRef.current.push({ ...clickZone, data: { type: 'trap_p2', index: 0, card } });\n    }\n  }, [gameState.traps, drawCardAt]);\n\n  // Single slot drawing function\n  const drawSingleSlot = useCallback((\n    ctx: CanvasRenderingContext2D,\n    zoneId: string,\n    card: Card | null,\n    clickType: string,\n    player: Player\n  ) => {\n    const zone = getZone(zoneId);\n    if (!zone) return;\n    const [x, y, w, h] = zone.rectPx;\n\n    // Hintergrundfarbe nach Kategorie\n    let bgColor = 'rgba(0,0,0,0.1)'; // Standard\n    if (zoneId.includes('government')) {\n      bgColor = 'rgba(255, 197, 0, 0.15)'; // Hellgelb für Regierung\n    } else if (zoneId.includes('public')) {\n      bgColor = 'rgba(0, 255, 0, 0.15)'; // Hellgrün für Öffentlichkeit\n    } else if (zoneId.includes('instant')) {\n      bgColor = 'rgba(127, 116, 91, 0.15)'; // Neutral für Sofort-Slots\n    } else if (zoneId.includes('permanent')) {\n      // Unterscheide zwischen government und public permanent slots\n      if (zoneId.includes('government')) {\n        bgColor = 'rgba(255, 197, 0, 0.15)';\n      } else if (zoneId.includes('public')) {\n        bgColor = 'rgba(0, 255, 0, 0.15)';\n      }\n    }\n\n    ctx.fillStyle = bgColor;\n    ctx.fillRect(x, y, w, h);\n\n    // Draw slot border\n    ctx.strokeStyle = 'rgba(255,255,255,0.06)';\n    ctx.strokeRect(x + 0.5, y + 0.5, w - 1, h - 1);\n\n    if (card) {\n      const isSelected = player === 1 && selectedHandIndex !== null && gameState.hands[1][selectedHandIndex] === card;\n      const clickZone = drawCardAt(ctx, card, x, y, w, isSelected, false);\n\n      // Kartenname unter dem Slot anzeigen\n      ctx.fillStyle = 'rgba(255,255,255,0.9)';\n      ctx.font = 'bold 12px sans-serif';\n      ctx.textAlign = 'center';\n      const textY = y + h + 16;\n      ctx.fillText(card.name, x + w/2, textY);\n\n      clickZonesRef.current.push({ ...clickZone, data: { type: 'slot_card', slot: clickType, card } });\n\n      // 🔧 NEU: Sofort-Initiative-Slots sind immer klickbar für Aktivierung (handled by activateInstantInitiative)\n      if (clickType === 'instant') {\n        clickZonesRef.current.push({\n          x, y, w, h,\n          data: { type: 'activate_instant', player, card }\n        });\n      }\n    } else if (gameState.current === player) {\n      // Slot-Benennung für leere Slots anzeigen (für den aktuellen Spieler)\n      const slotName = getSlotDisplayName(zoneId, 0, player);\n      ctx.fillStyle = 'rgba(255,255,255,0.6)';\n      ctx.font = '11px sans-serif';\n      ctx.textAlign = 'center';\n      const textY = y + h/2;\n      ctx.fillText(slotName, x + w/2, textY);\n\n      clickZonesRef.current.push({ x, y, w, h, data: { type: 'empty_slot', slot: clickType } });\n    }\n  }, [selectedHandIndex, gameState, drawCardAt, getSlotDisplayName]);\n\n  // Draw permanent slots for player\n  const drawPermanentSlotsP1 = useCallback((ctx: CanvasRenderingContext2D) => {\n    drawSingleSlot(ctx, 'slot.permanent.government.player', gameState.permanentSlots[1].government, 'permanent_government', 1);\n    drawSingleSlot(ctx, 'slot.permanent.public.player', gameState.permanentSlots[1].public, 'permanent_public', 1);\n  }, [gameState.permanentSlots, drawSingleSlot]);\n\n  // Draw permanent slots for opponent\n  const drawPermanentSlotsP2 = useCallback((ctx: CanvasRenderingContext2D) => {\n    drawSingleSlot(ctx, 'slot.permanent.government.opponent', gameState.permanentSlots[2].government, 'permanent_government', 2);\n    drawSingleSlot(ctx, 'slot.permanent.public.opponent', gameState.permanentSlots[2].public, 'permanent_public', 2);\n  }, [gameState.permanentSlots, drawSingleSlot]);\n\n  // Draw instant slots\n  const drawInstantSlots = useCallback((ctx: CanvasRenderingContext2D) => {\n    // Sofort-Initiative-Slots aus dem Board zeichnen\n    const sofortPlayerCard = gameState.board[1].sofort[0];\n    const sofortOppCard = gameState.board[2].sofort[0];\n\n    drawSingleSlot(ctx, 'slot.instant.player', sofortPlayerCard, 'instant', 1);\n    drawSingleSlot(ctx, 'slot.instant.opponent', sofortOppCard, 'instant', 2);\n  }, [gameState.board, drawSingleSlot]);\n\n  // Aktive Schlüsselwörter und Unterkategorien ermitteln\n  const getActiveKeywordsAndSubcategories = useCallback((player: Player) => {\n    const board = gameState.board[player];\n    const permanentSlots = gameState.permanentSlots[player];\n    const allCards = [\n      ...board.innen,\n      ...board.aussen,\n      permanentSlots.government,\n      permanentSlots.public\n    ].filter(c => c && c.kind === 'pol') as PoliticianCard[];\n\n    const keywords = new Set<string>();\n    const subcategories = new Set<string>();\n\n    allCards.forEach(card => {\n      if (!card.deactivated) {\n        // Regierungskarten-Schlüsselwörter\n        if (card.tag === 'Leadership') {\n          keywords.add('Leadership');\n        }\n        if (card.tag === 'Diplomat') {\n          keywords.add('Diplomat');\n        }\n\n        // Öffentlichkeits-Unterkategorien (für Karten in Öffentlichkeitsreihe)\n        if (board.innen.includes(card)) {\n          const publicCard = card as any;\n          if (publicCard.tag) {\n            // Oligarch\n            const oligarchNames = ['Elon Musk', 'Bill Gates', 'George Soros', 'Warren Buffett', 'Mukesh Ambani', 'Jeff Bezos', 'Alisher Usmanov', 'Gautam Adani', 'Jack Ma', 'Zhang Yiming', 'Roman Abramovich'];\n            if (oligarchNames.includes(publicCard.name)) {\n              subcategories.add('Oligarch');\n            }\n\n            // Plattform\n            const platformNames = ['Mark Zuckerberg', 'Tim Cook', 'Sam Altman', 'Jack Ma'];\n            if (platformNames.includes(publicCard.name)) {\n              subcategories.add('Plattform');\n            }\n\n            // Bewegung\n            const movementNames = ['Greta Thunberg', 'Malala Yousafzai', 'Ai Weiwei', 'Alexei Navalny'];\n            if (movementNames.includes(publicCard.name)) {\n              subcategories.add('Bewegung');\n            }\n\n            // NGO/Think-Tank\n            const ngoNames = ['Bill Gates', 'George Soros', 'Jennifer Doudna', 'Noam Chomsky', 'Anthony Fauci'];\n            if (ngoNames.includes(publicCard.name)) {\n              subcategories.add('NGO/Think-Tank');\n            }\n\n            // Intelligenz\n            const intelligenceNames = ['Jennifer Doudna', 'Noam Chomsky', 'Edward Snowden', 'Julian Assange', 'Yuval Noah Harari', 'Ai Weiwei', 'Alexei Navalny', 'Anthony Fauci'];\n            if (intelligenceNames.includes(publicCard.name)) {\n              subcategories.add('Intelligenz');\n            }\n\n            // Medien\n            const mediaNames = ['Oprah Winfrey'];\n            if (mediaNames.includes(publicCard.name)) {\n              subcategories.add('Medien');\n            }\n          }\n        }\n      }\n    });\n\n    return {\n      keywords: Array.from(keywords),\n      subcategories: Array.from(subcategories)\n    };\n  }, [gameState]);\n\n  // Info-Panels zeichnen\n  const drawInfoPanels = useCallback((ctx: CanvasRenderingContext2D) => {\n    const { keywords, subcategories } = getActiveKeywordsAndSubcategories(1);\n\n    // Panel für Regierungsschlüsselwörter (rechts neben Regierungsslots)\n    const govPanelX = 1640 + 256 + 20; // Nach dem letzten permanenten Slot\n    const govPanelY = 300; // Auf Höhe der Regierungsslots\n    const govPanelW = 120;\n    const govPanelH = 256;\n\n    // Regierungspanel Hintergrund\n    ctx.fillStyle = 'rgba(255, 197, 0, 0.15)';\n    ctx.fillRect(govPanelX, govPanelY, govPanelW, govPanelH);\n    ctx.strokeStyle = 'rgba(255, 197, 0, 0.3)';\n    ctx.strokeRect(govPanelX + 0.5, govPanelY + 0.5, govPanelW - 1, govPanelH - 1);\n\n    // Regierungspanel Titel\n    ctx.fillStyle = 'rgba(255, 197, 0, 0.9)';\n    ctx.font = 'bold 12px sans-serif';\n    ctx.textAlign = 'center';\n    ctx.fillText('Regierung', govPanelX + govPanelW/2, govPanelY + 16);\n\n    // Schlüsselwörter auflisten\n    ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\n    ctx.font = '11px sans-serif';\n    ctx.textAlign = 'left';\n    if (keywords.length > 0) {\n      keywords.forEach((keyword, idx) => {\n        ctx.fillText(`• ${keyword}`, govPanelX + 8, govPanelY + 36 + idx * 16);\n      });\n    } else {\n      ctx.fillStyle = 'rgba(255, 255, 255, 0.5)';\n      ctx.fillText('Keine aktiven', govPanelX + 8, govPanelY + 36);\n      ctx.fillText('Schlüsselwörter', govPanelX + 8, govPanelY + 52);\n    }\n\n    // Panel für Öffentlichkeits-Unterkategorien (rechts neben Öffentlichkeitsslots)\n    const pubPanelX = 1640 + 256 + 20;\n    const pubPanelY = 580; // Auf Höhe der Öffentlichkeitsslots\n    const pubPanelW = 120;\n    const pubPanelH = 256;\n\n    // Öffentlichkeitspanel Hintergrund\n    ctx.fillStyle = 'rgba(0, 255, 0, 0.15)';\n    ctx.fillRect(pubPanelX, pubPanelY, pubPanelW, pubPanelH);\n    ctx.strokeStyle = 'rgba(0, 255, 0, 0.3)';\n    ctx.strokeRect(pubPanelX + 0.5, pubPanelY + 0.5, pubPanelW - 1, pubPanelH - 1);\n\n    // Öffentlichkeitspanel Titel\n    ctx.fillStyle = 'rgba(0, 255, 0, 0.9)';\n    ctx.font = 'bold 12px sans-serif';\n    ctx.textAlign = 'center';\n    ctx.fillText('Öffentlichkeit', pubPanelX + pubPanelW/2, pubPanelY + 16);\n\n    // Unterkategorien auflisten\n    ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\n    ctx.font = '11px sans-serif';\n    ctx.textAlign = 'left';\n    if (subcategories.length > 0) {\n      subcategories.forEach((subcategory, idx) => {\n        const displayName = subcategory.length > 12 ? subcategory.substring(0, 10) + '...' : subcategory;\n        ctx.fillText(`• ${displayName}`, pubPanelX + 8, pubPanelY + 36 + idx * 16);\n      });\n    } else {\n      ctx.fillStyle = 'rgba(255, 255, 255, 0.5)';\n      ctx.fillText('Keine aktiven', pubPanelX + 8, pubPanelY + 36);\n      ctx.fillText('Unterkategorien', pubPanelX + 8, pubPanelY + 52);\n    }\n  }, [getActiveKeywordsAndSubcategories]);\n\n  // Move diagnostics to draw callback to ensure they run after canvas is actually rendered\n  const runDiagnostics = useCallback(() => {\n    try {\n      const handZones = clickZonesRef.current.filter(z => z.data && z.data.type === 'hand_p1');\n      const uiUIDs = handZones.map(z => (z.data.card && (z.data.card.uid ?? z.data.card.id)) ).filter(Boolean);\n      const stateHand = gameState.hands && gameState.hands[1] ? gameState.hands[1] : [];\n      const stateUIDs = stateHand.map((c: any) => c.uid ?? c.id).filter(Boolean);\n\n      const missingInState = uiUIDs.filter((u: any) => !stateUIDs.includes(u));\n      const missingInUI = stateUIDs.filter((u: any) => !uiUIDs.includes(u));\n\n      // Only warn if there are cards in UI that don't exist in state (real error)\n      // Don't warn about missing UI cards due to limited slot capacity\n      if (missingInState.length > 0) {\n        const mismatch = {\n          ts: Date.now(),\n          uiCount: uiUIDs.length,\n          stateCount: stateUIDs.length,\n          uiUIDs,\n          stateUIDs,\n          missingInState,\n          missingInUI,\n          stack: (new Error('mismatch-stack')).stack\n        };\n        (window as any).__politicardDebug = {\n          ...(window as any).__politicardDebug,\n          mismatch: [ ...(window as any).__politicardDebug?.mismatch || [] ].slice(-19).concat([mismatch])\n        };\n        // Clear, then log to console so user can copy/paste trace\n        console.warn('POLITICARD DIAGNOSTIC: hand mismatch detected', mismatch);\n      }\n    } catch (e) {\n      // swallow diagnostic errors to avoid breaking rendering\n      console.error('Diagnostic error', e);\n    }\n  }, [gameState.hands]);\n\n  const draw = useCallback(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n\n    // Detect influence increases and start animations\n    try {\n      const currSnapshot: Record<string, number> = {};\n      const collect = (c: any) => {\n        if (!c) return;\n        if ((c as any).kind !== 'pol') return;\n        const uid = c.uid ?? (c.id != null ? String(c.id) : null);\n        if (!uid) return;\n        currSnapshot[uid] = (c.influence ?? 0) as number;\n      };\n      // board rows\n      (gameState.board[1].aussen || []).forEach(collect);\n      (gameState.board[2].aussen || []).forEach(collect);\n      (gameState.board[1].innen || []).forEach(collect);\n      (gameState.board[2].innen || []).forEach(collect);\n      // permanent slots\n      collect(gameState.permanentSlots[1].government as any);\n      collect(gameState.permanentSlots[2].government as any);\n      collect(gameState.permanentSlots[1].public as any);\n      collect(gameState.permanentSlots[2].public as any);\n\n      const now = performance.now();\n      Object.keys(currSnapshot).forEach(uid => {\n        const curr = currSnapshot[uid] ?? 0;\n        const prev = prevInfluencesRef.current[uid] ?? curr;\n        if (curr > prev) {\n          const delta = curr - prev;\n          const list = influenceAnimRef.current.get(uid) || [];\n          list.push({ start: now, duration: 900, amount: delta });\n          influenceAnimRef.current.set(uid, list);\n        }\n        prevInfluencesRef.current[uid] = curr;\n      });\n    } catch (e) {\n      // ignore\n    }\n\n    // Clear canvas\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    // Clear click zones\n    clickZonesRef.current = [];\n\n    // Background: prefer PNG if configured\n    if (LAYOUT.background?.enabled && LAYOUT.background?.src) {\n      if (backgroundImageRef.current) {\n        ctx.drawImage(backgroundImageRef.current, 0, 0, canvas.width, canvas.height);\n      } else {\n        ctx.fillStyle = '#0c131b';\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\n      }\n    } else {\n      ctx.fillStyle = '#0c131b';\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n    }\n\n    // Apply UI transform (new signature)\n    const { scale, offsetX, offsetY } = getUiTransform(canvas.width, canvas.height);\n    ctx.save();\n    ctx.translate(offsetX, offsetY);\n    ctx.scale(scale, scale);\n\n    // Draw opponent board (top rows) - clickable im Dev Mode\n    // Draw opponent board using new layout system\n    const opponentPublicRects = getPublicRects('opponent');\n    const opponentGovRects = getGovernmentRects('opponent');\n\n    // Draw opponent public slots\n    opponentPublicRects.forEach((s: { x: number; y: number; w: number; h: number }, idx: number) => {\n      const card = gameState.board[2].innen[idx];\n      if (card) {\n        drawCardAt(ctx, card, s.x, s.y, s.w, false, false, 2);\n      }\n      else {\n        // draw placeholder symbol for empty public slot\n        const img = slotSymbolImgsRef.current.get('public');\n        drawSlotIconWithPulse(ctx, img, s.x, s.y, s.w, s.h, 0.4);\n      }\n    });\n\n    // Draw opponent government slots\n    opponentGovRects.forEach((s: { x: number; y: number; w: number; h: number }, idx: number) => {\n      const card = gameState.board[2].aussen[idx];\n      if (card) {\n        drawCardAt(ctx, card, s.x, s.y, s.w, false, false, 2);\n      }\n      else {\n        const img = slotSymbolImgsRef.current.get('government');\n        drawSlotIconWithPulse(ctx, img, s.x, s.y, s.w, s.h, 0.1);\n      }\n    });\n\n    // Draw opponent permanent slots (show icons even when not current)\n    try {\n      const permGovZoneOpp = getZone('slot.permanent.government.opponent');\n      if (permGovZoneOpp) {\n        const card = gameState.permanentSlots[2].government;\n        const [ox, oy, ow, oh] = permGovZoneOpp.rectPx;\n        if (card) {\n          drawSingleSlot(ctx, 'slot.permanent.government.opponent', card, 'permanent_government', 2);\n        } else {\n          const img = slotSymbolImgsRef.current.get('dauerhaft');\n          drawSlotIconWithPulse(ctx, img, ox, oy, ow, oh, 0.3);\n        }\n      }\n    } catch (e) {}\n    try {\n      const permPubZoneOpp = getZone('slot.permanent.public.opponent');\n      if (permPubZoneOpp) {\n        const card = gameState.permanentSlots[2].public;\n        const [ox2, oy2, ow2, oh2] = permPubZoneOpp.rectPx;\n        if (card) {\n          drawSingleSlot(ctx, 'slot.permanent.public.opponent', card, 'permanent_public', 2);\n        } else {\n          const img = slotSymbolImgsRef.current.get('dauerhaft');\n          drawSlotIconWithPulse(ctx, img, ox2, oy2, ow2, oh2, 0.7);\n        }\n      }\n    } catch (e) {}\n\n    // Draw player board (middle rows)\n    // Draw player board using new layout system\n    const playerPublicRects = getPublicRects('player');\n    const playerGovRects = getGovernmentRects('player');\n\n    // Draw player public slots\n    playerPublicRects.forEach((s: { x: number; y: number; w: number; h: number }, idx: number) => {\n      const card = gameState.board[1].innen[idx];\n      if (card) {\n        const clickZone = drawCardAt(ctx, card, s.x, s.y, s.w, false, false, 1);\n        clickZonesRef.current.push({\n          ...clickZone,\n          data: { type: 'row_slot', player: 1, lane: 'innen', index: idx }\n        });\n      } else {\n        // Empty slot click zone and draw public symbol\n        // Draw unified pulsing icon for empty public slot\n        const img = slotSymbolImgsRef.current.get('public');\n        drawSlotIconWithPulse(ctx, img, s.x, s.y, s.w, s.h, 0.4);\n        clickZonesRef.current.push({\n          x: s.x, y: s.y, w: s.w, h: s.h,\n          data: { type: 'row_slot', player: 1, lane: 'innen', index: idx }\n        });\n      }\n    });\n\n    // Draw player government slots\n    playerGovRects.forEach((s: { x: number; y: number; w: number; h: number }, idx: number) => {\n      const card = gameState.board[1].aussen[idx];\n      if (card) {\n        const clickZone = drawCardAt(ctx, card, s.x, s.y, s.w, false, false, 1);\n        clickZonesRef.current.push({\n          ...clickZone,\n          data: { type: 'row_slot', player: 1, lane: 'aussen', index: idx }\n        });\n      } else {\n        // Empty slot click zone and draw government symbol\n        const img = slotSymbolImgsRef.current.get('government');\n        drawSlotIconWithPulse(ctx, img, s.x, s.y, s.w, s.h, 0.1);\n        clickZonesRef.current.push({\n          x: s.x, y: s.y, w: s.w, h: s.h,\n          data: { type: 'row_slot', player: 1, lane: 'aussen', index: idx }\n        });\n      }\n    });\n\n    // --- GOV PLACEMENT SPRITESHEET OVERLAY (frame-based) ---\n    try {\n      const sprites = govSpritesRef.current;\n      const gif = govGifRef.current;\n      const anims = (visualEffects && visualEffects.playAnimsRef && visualEffects.playAnimsRef.current) || [];\n\n      // Start sprite animation when a playAnim for a gov-card is active and maps to a slot\n      const now = performance.now();\n      // handle specialized 'hit:' playAnims which indicate target-hit sprites by slot key\n      anims.forEach((a: { uid: string | number; started: number; duration: number; lane?: string }) => {\n        try {\n          if (typeof a.uid === 'string' && a.uid.indexOf('hit:') === 0) {\n            const inner = a.uid.slice(4); // '1.aussen.0'\n            if (!hitSpriteStateRef.current[inner]) {\n              hitSpriteStateRef.current[inner] = { started: now, frameCount: 25, frameDuration: 30 };\n            }\n            return; // don't treat as gov anim\n          }\n        } catch (e) {}\n\n        // existing gov/instant handling follows\n      });\n\n      // now run the original anims loop for gov/instant that depend on card uids\n      anims.forEach((a: { uid: string | number; started: number; duration: number; lane?: string }) => {\n        // find the zone/slot for this uid\n        const zone = clickZonesRef.current.find(z => z.data && z.data.card && ((z.data.card.uid ?? String(z.data.card.id)) === a.uid));\n        if (!zone) return;\n        // determine if gov slot\n        let isGov = false;\n        let isInstant = false;\n        try {\n          const dt = zone.data || {};\n          if (dt.type === 'row_slot' && dt.lane === 'aussen') isGov = true;\n          if (dt.type === 'board_card' && dt.lane === 'aussen') isGov = true;\n          if (dt.slot && typeof dt.slot === 'string' && dt.slot.includes('government')) isGov = true;\n          if (dt.type === 'activate_instant' || (dt.slot && typeof dt.slot === 'string' && dt.slot.includes('instant'))) isInstant = true;\n        } catch (e) {}\n        if (!isGov && !isInstant) return;\n\n        const player = zone.data.player ?? 1;\n        const lane = zone.data.lane ?? 'aussen';\n        const idx = zone.data.index ?? 0;\n        const key = `${player}.${lane}.${idx}`;\n\n        // initialize sprite state if not present\n        if (isGov) {\n          if (!govSpriteStateRef.current[key]) {\n            govSpriteStateRef.current[key] = { started: now, frameCount: 14, frameDuration: 40 }; // 14 frames @ ~40ms -> ~560ms\n          }\n        }\n        if (isInstant) {\n          const instKey = `${player}.instant.${idx}`;\n          if (!instantSpriteStateRef.current[instKey]) {\n            instantSpriteStateRef.current[instKey] = { started: now, frameCount: 14, frameDuration: 40 };\n          }\n        }\n      });\n\n      // draw running sprite animations per gov slot\n      Object.keys(govSpriteStateRef.current).forEach(k => {\n        const st = govSpriteStateRef.current[k];\n        const elapsed = now - st.started;\n        const total = st.frameCount * st.frameDuration;\n        if (elapsed > total) {\n          // animation finished; remove state\n          delete govSpriteStateRef.current[k];\n          return;\n        }\n        const frame = Math.floor(elapsed / st.frameDuration);\n\n        // parse key -> player.lane.index\n        const parts = k.split('.');\n        const player = Number(parts[0]) || 1;\n        const lane = parts[1] || 'aussen';\n        const index = Number(parts[2] || 0);\n\n        // compute slot rect for this gov slot (player or opponent board)\n        const rect = player === 1 ? playerGovRects[index] : opponentGovRects[index];\n        if (!rect) return;\n\n        // spritesheet: frame N located at x = N*256, y = 0\n        if (sprites && sprites.complete) {\n          const sx = frame * 256;\n          const sy = 0;\n          const sw = 256;\n          const sh = 256;\n          // draw exactly matching the slot rect size to avoid scaling mismatches\n          const dx = rect.x;\n          const dy = rect.y;\n          ctx.drawImage(sprites, sx, sy, sw, sh, dx, dy, rect.w, rect.h);\n        } else if (gif && gif.complete) {\n          // fallback to static gif if spritesheet missing\n          ctx.drawImage(gif, rect.x, rect.y, rect.w, rect.h);\n        }\n      });\n      // --- INSTANT INITIATIVE SPRITESHEET (draw on instant slot) ---\n      try {\n        const spritesI = instantSpritesRef.current;\n        const nowI = performance.now();\n        Object.keys(instantSpriteStateRef.current).forEach(k => {\n          const st = instantSpriteStateRef.current[k];\n          const elapsed = nowI - st.started;\n          const total = st.frameCount * st.frameDuration;\n          if (elapsed > total) { delete instantSpriteStateRef.current[k]; return; }\n          const frame = Math.floor(elapsed / st.frameDuration);\n          const parts = k.split('.');\n          const player = Number(parts[0]) || 1;\n          const index = Number(parts[2] || 0);\n          const rects = getSofortRect(player ? 'player' : 'opponent');\n          // getSofortRect returns one rect; map by player/context — fallback to zone\n          const instantRect = getZone('slot.instant.player').rectPx;\n          const [ix, iy, iw, ih] = instantRect;\n          if (spritesI && spritesI.complete) {\n            const sx = frame * 256; const sy = 0; const sw = 256; const sh = 256;\n            ctx.drawImage(spritesI, sx, sy, sw, sh, ix, iy, iw, ih);\n          }\n        });\n      } catch (e) {}\n      // --- HIT / TARGET SPRITESHEET (draw as overlay on targeted slot) ---\n      try {\n        const spritesH = hitSpritesRef.current;\n        const nowH = performance.now();\n        Object.keys(hitSpriteStateRef.current).forEach(k => {\n          const st = hitSpriteStateRef.current[k];\n          const elapsed = nowH - st.started;\n          const total = st.frameCount * st.frameDuration;\n          if (elapsed > total) { delete hitSpriteStateRef.current[k]; return; }\n          const frame = Math.floor(elapsed / st.frameDuration);\n\n          // parse key -> player.lane.index\n          const parts = k.split('.');\n          const player = Number(parts[0]) || 1;\n          const lane = parts[1] || 'aussen';\n          const index = Number(parts[2] || 0);\n\n          // compute slot rect for this gov slot (attempt gov then public)\n          const rect = (player === 1 ? playerGovRects : opponentGovRects)[index] || (player === 1 ? playerPublicRects : opponentPublicRects)[index];\n          if (!rect) return;\n\n          if (spritesH && spritesH.complete) {\n            const sx = frame * 256;\n            const sy = 0;\n            const sw = 256;\n            const sh = 256;\n            const dx = rect.x;\n            const dy = rect.y;\n            ctx.drawImage(spritesH, sx, sy, sw, sh, dx, dy, rect.w, rect.h);\n          }\n        });\n      } catch (e) {}\n    } catch (e) {}\n\n    // Draw player permanent slots (draw symbols if empty)\n    // permanent government\n    const permGovZone = getZone('slot.permanent.government.player');\n    if (permGovZone) {\n      const card = gameState.permanentSlots[1].government;\n      const [x, y, w, h] = permGovZone.rectPx;\n      if (card) {\n        drawSingleSlot(ctx, 'slot.permanent.government.player', card, 'permanent_government', 1);\n      } else {\n        // Draw all slot icons using unified helper (so 'dauerhaft' used visually for empty permanent gov slot)\n        const img = slotSymbolImgsRef.current.get('dauerhaft');\n        drawSlotIconWithPulse(ctx, img, x, y, w, h, 0.2);\n      }\n    }\n    // permanent public\n    const permPubZone = getZone('slot.permanent.public.player');\n    if (permPubZone) {\n      const card = gameState.permanentSlots[1].public;\n      const [x2, y2, w2, h2] = permPubZone.rectPx;\n      if (card) {\n        drawSingleSlot(ctx, 'slot.permanent.public.player', card, 'permanent_public', 1);\n      } else {\n        // Draw all slot icons using unified helper (so 'dauerhaft' used visually for empty permanent public slot)\n        const img = slotSymbolImgsRef.current.get('dauerhaft');\n        drawSlotIconWithPulse(ctx, img, x2, y2, w2, h2, 0.9);\n      }\n    }\n\n    // Draw instant slots (both players) and placeholder if empty\n    const instantPlayerZone = getZone('slot.instant.player');\n    if (instantPlayerZone) {\n      const card = gameState.board[1].sofort[0];\n      const [x, y, w, h] = instantPlayerZone.rectPx;\n      if (card) drawSingleSlot(ctx, 'slot.instant.player', card, 'instant', 1);\n      else {\n        // Use unified icon draw helper for instant slot\n        const img = slotSymbolImgsRef.current.get('sofort');\n        drawSlotIconWithPulse(ctx, img, x, y, w, h, 0.0);\n      }\n    }\n\n    // Draw interventions strip (player)\n    // We draw symbol if empty\n    const interventionsZone = getZone('interventions.player');\n    if (interventionsZone) {\n      const [zx, zy, zw, zh] = interventionsZone.rectPx;\n      const card = gameState.traps[1] && gameState.traps[1][0];\n      if (card) drawInterventionsP1(ctx);\n      else {\n        const img = slotSymbolImgsRef.current.get('intervention');\n        drawSlotIconWithPulse(ctx, img, zx, zy, zw, zh, 0.6);\n      }\n    }\n\n    // Draw interventions strip (opponent) - nur im Dev Mode\n    if (devMode) {\n      drawInterventionsP2(ctx);\n    }\n\n    // Draw hand (P1)\n    drawHandP1(ctx);\n\n    // 🔧 DEV MODE: Draw hand (P2) - nur im Dev Mode\n    if (devMode) {\n      drawHandP2(ctx);\n    }\n\n    // Draw info panels\n    drawInfoPanels(ctx);\n\n    // --- VISUAL EFFECTS: Particle bursts, card pop scale, initiative ripple & AP pop ---\n    try {\n      const now = performance.now();\n      const { particlesRef, popsRef, ripplesRef, apLabelsRef, reducedMotion } = (visualEffects || {}) as any;\n\n      const parts: any[] = particlesRef.current || [];\n      if (!reducedMotion) {\n        for (let i = parts.length - 1; i >= 0; i--) {\n          const p = parts[i];\n          const age = now - p.start;\n          if (age > p.life) {\n            parts.splice(i, 1);\n            continue;\n          }\n          p.vy += (p.gravity || 0.09);\n          p.x += p.vx;\n          p.y += p.vy;\n          const t = 1 - age / p.life;\n          ctx.save();\n          ctx.globalAlpha = Math.max(0, Math.min(1, t));\n          ctx.fillStyle = p.color || '#ffd166';\n          ctx.beginPath();\n          ctx.arc(p.x, p.y, (p.size || 4) * t, 0, Math.PI * 2);\n          ctx.fill();\n          ctx.restore();\n        }\n        particlesRef.current = parts;\n\n        const pops: any[] = popsRef.current || [];\n        pops.forEach((pop) => {\n          const p = Math.min(1, Math.max(0, (now - pop.started) / pop.duration));\n          const eased = 1 + 0.12 * (1 - Math.pow(1 - p, 3));\n          const zone = clickZonesRef.current.find(z => z.data && z.data.card && ((z.data.card.uid ?? String(z.data.card.id)) === pop.uid));\n          if (!zone) return;\n          ctx.save();\n          ctx.translate(zone.x + zone.w / 2, zone.y + zone.h / 2);\n          ctx.scale(eased, eased);\n          ctx.globalAlpha = 0.12 * (1 - p);\n          ctx.fillStyle = '#ffffff';\n          ctx.fillRect(-zone.w / 2, -zone.h / 2, zone.w, zone.h);\n          ctx.restore();\n        });\n\n        const ripples: any[] = ripplesRef.current || [];\n        for (let i = ripples.length - 1; i >= 0; i--) {\n          const r = ripples[i];\n          const p = Math.min(1, Math.max(0, (now - r.started) / r.duration));\n          if (p >= 1) { ripples.splice(i, 1); continue; }\n          const radius = r.radius * (0.8 + 1.8 * p);\n          ctx.save();\n          const g = ctx.createRadialGradient(r.cx, r.cy, radius * 0.1, r.cx, r.cy, radius);\n          g.addColorStop(0, `rgba(255,255,255,${0.12 * (1 - p)})`);\n          g.addColorStop(1, `rgba(255,255,255,0)`);\n          ctx.fillStyle = g as any;\n          ctx.beginPath();\n          ctx.arc(r.cx, r.cy, radius, 0, Math.PI * 2);\n          ctx.fill();\n          ctx.restore();\n\n          if (r.showAp && !r._apSpawned) {\n            apLabelsRef.current = apLabelsRef.current || [];\n            apLabelsRef.current.push({ x: r.apX, y: r.apY, started: now, duration: 800, text: '+1' });\n            r._apSpawned = true;\n          }\n        }\n        ripplesRef.current = ripples;\n\n        const apl: any[] = apLabelsRef.current || [];\n        for (let i = apl.length - 1; i >= 0; i--) {\n          const l = apl[i];\n          const p = Math.min(1, Math.max(0, (now - l.started) / l.duration));\n          if (p >= 1) { apl.splice(i, 1); continue; }\n          ctx.save();\n          ctx.globalAlpha = 1 - p;\n          ctx.fillStyle = '#ffdd57';\n          ctx.font = 'bold 22px sans-serif';\n          ctx.textAlign = 'center';\n          ctx.fillText(l.text, l.x, l.y - 20 * p);\n          ctx.restore();\n        }\n        apLabelsRef.current = apl;\n      } else {\n        const apl: any[] = apLabelsRef.current || [];\n        for (let i = apl.length - 1; i >= 0; i--) {\n          const l = apl[i];\n          const p = Math.min(1, Math.max(0, (now - l.started) / l.duration));\n          if (p >= 1) { apl.splice(i, 1); continue; }\n          ctx.save();\n          ctx.globalAlpha = 1 - p;\n          ctx.fillStyle = '#ffdd57';\n          ctx.font = 'bold 18px sans-serif';\n          ctx.textAlign = 'center';\n          ctx.fillText(l.text, l.x, l.y - 10 * p);\n          ctx.restore();\n        }\n        apLabelsRef.current = apl;\n      }\n    } catch (e) {}\n\n    // --- Overlay pass: draw influence pulse ring and +N labels on top of all cards ---\n    try {\n      const now = performance.now();\n      // iterate over stored anims\n      influenceAnimRef.current.forEach((anims, uid) => {\n        // find card position by scanning clickZones\n        const zone = clickZonesRef.current.find(z => z.data && ((z.data.card && ((z.data.card.uid ?? String(z.data.card.id)) === uid)) || (z.data.card && z.data.card.uid === uid)) );\n        if (!zone) return;\n        const cx = zone.x + zone.w / 2;\n        const cy = zone.y + zone.h / 2;\n        // calculate aggregate pulse for this uid\n        let maxPulse = 0;\n        let totalAmount = 0;\n        const remaining: Array<{ start: number; duration: number; amount: number }> = [];\n        anims.forEach(a => {\n          const p = Math.min(1, Math.max(0, (now - a.start) / a.duration));\n          const pulse = Math.pow(Math.max(0, 1 - p), 2);\n          if (pulse > maxPulse) maxPulse = pulse;\n          if (p < 1) {\n            remaining.push(a);\n            totalAmount += a.amount;\n          }\n        });\n\n        // update list\n        if (remaining.length > 0) influenceAnimRef.current.set(uid, remaining);\n        else influenceAnimRef.current.delete(uid);\n\n        if (maxPulse > 0.001) {\n          // draw a soft ring to the right-bottom of influence number\n          const ringRadius = Math.max(8, zone.w * 0.08) * (1 + maxPulse * 0.6);\n          const ringX = zone.x + zone.w - 28; // near bottom-right where influence text lives\n          const ringY = zone.y + zone.h - 20;\n\n          ctx.save();\n          ctx.beginPath();\n          ctx.strokeStyle = `rgba(46, 204, 113, ${0.9 * maxPulse})`;\n          ctx.lineWidth = Math.max(2, Math.ceil(6 * maxPulse));\n          ctx.arc(ringX, ringY, ringRadius, 0, Math.PI * 2);\n          ctx.stroke();\n          ctx.restore();\n        }\n\n        if (totalAmount > 0) {\n          // floating +N to the right of influence number\n          const labelX = zone.x + zone.w - 12;\n          const labelY = zone.y + zone.h - 32 - (Math.random() * 6); // slight jitter\n          ctx.save();\n          ctx.fillStyle = '#2ecc71';\n          ctx.font = 'bold 16px sans-serif';\n          ctx.textAlign = 'left';\n          ctx.textBaseline = 'middle';\n          ctx.fillText(`+${totalAmount}`, labelX, labelY);\n          ctx.restore();\n        }\n      });\n    } catch (e) {\n      // ignore overlay errors\n    }\n\n    // --- Outline pass: draw a subtle, slightly pulsing 257x257 square around 256x256 slots ---\n    try {\n      const now2 = performance.now();\n      clickZonesRef.current.forEach((z, i) => {\n        if (!z) return;\n        const w = z.w || 0;\n        const h = z.h || 0;\n        // only target 256x256 slot-sized zones (covers the icons)\n        if (Math.abs(w - 256) > 0.1 || Math.abs(h - 256) > 0.1) return;\n        const x = z.x;\n        const y = z.y;\n\n        // Color palette (rgb)\n        const rgbTeal = '20,184,166';\n        const rgbBurg = '127,29,29';\n        const rgbPurple = '139,92,246';\n        const rgbYellow = '250,204,21';\n        const rgbOrange = '251,146,60';\n\n        // Determine slot semantic\n        let slotType: 'government' | 'public' | 'permanent' | 'instant' | 'intervention' | 'default' = 'default';\n        try {\n          const dt = z.data || {};\n          if (dt.slot && typeof dt.slot === 'string') {\n            if (dt.slot.includes('government')) slotType = 'government';\n            else if (dt.slot.includes('public')) slotType = 'public';\n            else if (dt.slot.includes('permanent')) slotType = 'permanent';\n            else if (dt.slot.includes('instant')) slotType = 'instant';\n          }\n          if (dt.type === 'row_slot' && dt.lane === 'aussen') slotType = 'government';\n          if (dt.type === 'row_slot' && dt.lane === 'innen') slotType = 'public';\n          if (dt.type === 'trap_p1' || dt.type === 'trap_p2' || (dt.card && dt.card.kind === 'trap')) slotType = 'intervention';\n          if (dt.type === 'activate_instant' || dt.slot === 'instant') slotType = 'instant';\n          if (dt.slot === 'permanent_government' || dt.slot === 'permanent_public' || dt.slot === 'permanent') slotType = 'permanent';\n        } catch (e) {}\n\n        const pulse = 0.5 + 0.5 * Math.sin(now2 / 350 + i);\n        const alpha = 0.06 + 0.12 * pulse; // subtle alpha\n        const lw = 1 + 2 * pulse; // line width between 1 and 3\n\n        // Create gradient based on slot type\n        let grad: CanvasGradient | null = null;\n        try {\n          grad = ctx.createLinearGradient(x, y, x + w, y + h);\n          if (slotType === 'government') {\n            grad.addColorStop(0, `rgba(${rgbTeal},1)`);\n            grad.addColorStop(1, `rgba(${rgbBurg},1)`);\n          } else if (slotType === 'public') {\n            grad.addColorStop(0, `rgba(${rgbBurg},1)`);\n            grad.addColorStop(1, `rgba(${rgbTeal},1)`);\n          } else if (slotType === 'permanent') {\n            grad.addColorStop(0, `rgba(${rgbPurple},1)`);\n            grad.addColorStop(1, `rgba(${rgbPurple},1)`);\n          } else if (slotType === 'instant') {\n            grad.addColorStop(0, `rgba(${rgbYellow},1)`);\n            grad.addColorStop(1, `rgba(${rgbYellow},1)`);\n          } else if (slotType === 'intervention') {\n            grad.addColorStop(0, `rgba(${rgbOrange},1)`);\n            grad.addColorStop(1, `rgba(${rgbOrange},1)`);\n          } else {\n            grad.addColorStop(0, `rgba(255,255,255,1)`);\n            grad.addColorStop(1, `rgba(255,255,255,1)`);\n          }\n        } catch (e) {\n          grad = null;\n        }\n\n        ctx.save();\n        if (grad) ctx.strokeStyle = grad as any;\n        else ctx.strokeStyle = `rgba(255,255,255,${alpha.toFixed(3)})`;\n        ctx.globalAlpha = alpha;\n        ctx.lineWidth = lw;\n        // draw 257x257 centered so that it encloses the 256 slot\n        ctx.strokeRect(x - 0.5, y - 0.5, w + 1, h + 1);\n        ctx.restore();\n      });\n    } catch (e) {\n      // ignore outline errors\n    }\n\n    ctx.restore();\n\n    // expose zones for debug snapshot\n    (window as any).__politicardDebug = {\n      uiTransform: getUiTransform(canvas.width, canvas.height),\n      canvasSize: { width: canvas.width, height: canvas.height },\n      zones: LAYOUT.zones,\n      clickZones: clickZonesRef.current.slice(0, 1000)\n    };\n\n    // Build canonical slotPositions map for animations/debugging\n    try {\n      const map: Record<string, { x: number; y: number; w: number; h: number; cx: number; cy: number }> = {};\n      clickZonesRef.current.forEach(z => {\n        const d = z.data || {};\n        // support row_slot, board_card, slot_card shapes\n        if (d.type === 'row_slot' || d.type === 'board_card' || d.type === 'slot_card' || d.type === 'hand_p1' || d.type === 'hand_p2') {\n          const player = d.player ?? (d.type === 'hand_p2' ? 2 : 1);\n          const lane = d.lane ?? (typeof d.slot === 'string' ? d.slot : (d.type === 'hand_p2' ? 'hand' : 'unknown'));\n          let index: number;\n          if (d.index != null) {\n            index = d.index;\n          } else if (d.card) {\n            // prefer explicit slotIndex, fallback to card.index, otherwise 0\n            index = (d.card.slotIndex != null) ? d.card.slotIndex : ((d.card.index != null) ? d.card.index : 0);\n          } else {\n            index = 0;\n          }\n          const key = `${player}.${lane}.${index}`;\n          map[key] = { x: z.x, y: z.y, w: z.w, h: z.h, cx: z.x + z.w / 2, cy: z.y + z.h / 2 };\n        }\n      });\n      slotPositionsRef.current = map;\n      (window as any).__politicardDebug = { ...(window as any).__politicardDebug, slotPositions: slotPositionsRef.current };\n    } catch (e) {\n      // don't let debug mapping break rendering\n    }\n\n    // Run diagnostics after canvas is fully rendered\n    runDiagnostics();\n  }, [drawLane, drawHandP1, drawHandP2, drawInterventionsP1, drawInterventionsP2, drawPermanentSlotsP1, drawPermanentSlotsP2, drawInstantSlots, drawInfoPanels, devMode, runDiagnostics]);\n\n  const DRAW_LAYOUT_OVERLAY = false; // force off per new layout system\n\n  // Load slot symbol images once\n  useEffect(() => {\n    const load = (key: string, src: string) => {\n      const img = new Image();\n      img.onload = () => { slotSymbolImgsRef.current.set(key, img); };\n      img.onerror = () => { console.warn('Failed to load slot icon', src); };\n      img.src = src;\n    };\n    // load all slot icons\n    load('public', publicSymbolUrl);\n    load('sofort', sofortSymbolUrl);\n    load('dauerhaft', dauerhaftSymbolUrl);\n    load('government', governmentSymbolUrl);\n    load('intervention', interventionSymbolUrl);\n\n    // load test GIF for gov overlay\n    try {\n      const img = new Image();\n      img.onload = () => { govGifRef.current = img; };\n      img.onerror = () => { console.warn('Failed to load gov overlay gif', govPlaceGifUrl); };\n      img.src = govPlaceGifUrl;\n    } catch (e) {}\n    // load spritesheet for placement animation\n    try {\n      const s = new Image();\n      s.onload = () => { govSpritesRef.current = s; };\n      s.onerror = () => { console.warn('Failed to load gov spritesheet', govPlaceSpritesheetUrl); };\n      s.src = govPlaceSpritesheetUrl;\n    } catch (e) {}\n    // load spritesheet for instant initiative activation\n    try {\n      const si = new Image();\n      si.onload = () => { instantSpritesRef.current = si; };\n      si.onerror = () => { console.warn('Failed to load instant spritesheet', instantSpritesheetUrl); };\n      si.src = instantSpritesheetUrl;\n    } catch (e) {}\n\n    // load spritesheet for hit/target animation (25 frames)\n    try {\n      const h = new Image();\n      h.onload = () => { hitSpritesRef.current = h; };\n      h.onerror = () => { console.warn('Failed to load hit spritesheet', hitSpritesheetUrl); };\n      h.src = hitSpritesheetUrl;\n    } catch (e) {}\n\n    // ensure first draw\n    requestAnimationFrame(draw);\n  }, [draw]);\n\n  // Expose debug trigger to manually start gov sprite animation by slot-key or uid\n  useEffect(() => {\n    (window as any).__pc_triggerGovAnim = (id: any) => {\n      try {\n        const now = performance.now();\n        // if id is slot key like '1.aussen.2'\n        if (typeof id === 'string' && id.indexOf('.') >= 0) {\n          govSpriteStateRef.current[id] = { started: now, frameCount: 14, frameDuration: 40 };\n          return;\n        }\n\n        // otherwise try to resolve as uid/id to a clickZone\n        const uid = id;\n        const zone = clickZonesRef.current.find(z => z.data && (z.data.card && ((z.data.card.uid ?? String(z.data.card.id)) === uid || (z.data.card.id === uid))));\n        if (!zone) {\n          console.warn('pc_triggerGovAnim: no slot found for uid', uid);\n          return;\n        }\n        const player = zone.data.player ?? 1;\n        const lane = zone.data.lane ?? (zone.data.slot && typeof zone.data.slot === 'string' ? zone.data.slot : 'aussen');\n        const index = zone.data.index ?? 0;\n        const key = `${player}.${lane}.${index}`;\n        govSpriteStateRef.current[key] = { started: now, frameCount: 14, frameDuration: 40 };\n      } catch (e) {\n        console.warn('pc_triggerGovAnim error', e);\n      }\n    };\n    // expose easy alias\n    try { (window as any).pc_triggerGovAnim = (window as any).__pc_triggerGovAnim; } catch (e) {}\n    return () => { delete (window as any).__pc_triggerGovAnim; };\n  }, []);\n\n  // Expose debug trigger for hit animation (key: '1.aussen.0' or uid)\n  useEffect(() => {\n    (window as any).__pc_triggerHitAnim = (id: any) => {\n      try {\n        const now = performance.now();\n        // if id is slot key like '1.aussen.2'\n        if (typeof id === 'string' && id.indexOf('.') >= 0) {\n          hitSpriteStateRef.current[id] = { started: now, frameCount: 25, frameDuration: 30 };\n          return;\n        }\n\n        // otherwise try to resolve as uid/id to a clickZone\n        const uid = id;\n        const zone = clickZonesRef.current.find(z => z.data && (z.data.card && ((z.data.card.uid ?? String(z.data.card.id)) === uid || (z.data.card.id === uid))));\n        if (!zone) {\n          console.warn('pc_triggerHitAnim: no slot found for uid', uid);\n          return;\n        }\n        const player = zone.data.player ?? 1;\n        const lane = zone.data.lane ?? (zone.data.slot && typeof zone.data.slot === 'string' ? zone.data.slot : 'aussen');\n        const index = zone.data.index ?? 0;\n        const key = `${player}.${lane}.${index}`;\n        hitSpriteStateRef.current[key] = { started: now, frameCount: 25, frameDuration: 30 };\n      } catch (e) {\n        console.warn('pc_triggerHitAnim error', e);\n      }\n    };\n    try { (window as any).pc_triggerHitAnim = (window as any).__pc_triggerHitAnim; } catch (e) {}\n    return () => { delete (window as any).__pc_triggerHitAnim; };\n  }, []);\n\n  // Redraw when game state or selection changes\n  useEffect(() => {\n    requestAnimationFrame(draw);\n  }, [gameState, selectedHandIndex, draw]);\n\n  // Continuous render loop to keep canvas updated without relying on external state refs\n  useEffect(() => {\n    let frame: number;\n    const loop = () => {\n      draw();\n      frame = requestAnimationFrame(loop);\n    };\n    frame = requestAnimationFrame(loop);\n    return () => cancelAnimationFrame(frame);\n  }, [draw]);\n\n  const handleCardClick = useCallback((data: any) => {\n    // Hand-Klick\n    if (data.type === 'hand_p1') {\n      const uid = data.card?.uid ?? data.card?.id;\n      const stateHand = gameState.hands?.[1] || [];\n      const idxInState = stateHand.findIndex((c: any) => (c.uid ?? c.id) === uid);\n      onCardClick(data);\n      return;\n    }\n\n    // Slot-Klick\n    if (data.type === 'row_slot') {\n      const lane: 'public' | 'government' = data.lane;\n      const cap = getLaneCapacity(lane);\n\n      // Hole aktuelle Row-Länge aus gameState\n      const rowCards = lane === 'public'\n        ? gameState.board?.[1]?.innen ?? []\n        : gameState.board?.[1]?.aussen ?? [];\n\n      if (rowCards.length >= cap) {\n        // Optional: UI Feedback\n        console.warn(`Row ${lane} is full (${rowCards.length}/${cap})`);\n        return;\n      }\n\n      onCardClick(data);\n      return;\n    }\n\n    // Andere Klicks (empty_slot, board_card, etc.)\n    onCardClick(data);\n  }, [gameState, onCardClick]);\n\n  const handleClick = useCallback((e: React.MouseEvent<HTMLCanvasElement>) => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const rect = canvas.getBoundingClientRect();\n    const { scale, offsetX, offsetY } = getUiTransform(canvas.width, canvas.height);\n    const mx = (e.clientX - rect.left - offsetX) / scale;\n    const my = (e.clientY - rect.top - offsetY) / scale;\n\n    const hit = clickZonesRef.current.find(z => mx >= z.x && mx <= z.x + z.w && my >= z.y && my <= z.y + z.h);\n    if (hit) {\n      console.debug('[CanvasClick] mx,my,hit:', mx, my, hit.data);\n      try {\n        // If user clicked a drawn card in an instant slot, normalize to activate_instant\n        const d = hit.data || {};\n        if (d.type === 'slot_card' && d.slot === 'instant') {\n          handleCardClick({ type: 'activate_instant', player: d.player || 1, card: d.card });\n          return;\n        }\n        // Fallback: if there's an explicit activate_instant zone, pass through\n        if (d.type === 'activate_instant') {\n          handleCardClick(d);\n          return;\n        }\n      } catch (err) {}\n      handleCardClick(hit.data);\n    }\n  }, [handleCardClick]);\n\n  const handleMouseMove = useCallback((e: React.MouseEvent<HTMLCanvasElement>) => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const rect = canvas.getBoundingClientRect();\n    const { scale, offsetX, offsetY } = getUiTransform(canvas.width, canvas.height);\n    const mx = (e.clientX - rect.left - offsetX) / scale;\n    const my = (e.clientY - rect.top - offsetY) / scale;\n\n    const hit = clickZonesRef.current.find(z => mx >= z.x && mx <= z.x + z.w && my >= z.y && my <= z.y + z.h);\n    if (hit) {\n      console.log('[hover]', hit.data.type, hit.data.card?.name);\n      onCardHover({ ...hit.data, x: e.clientX, y: e.clientY });\n    } else {\n      onCardHover(null);\n    }\n  }, [onCardHover]);\n\n  const handleWheel = useCallback((e: React.WheelEvent<HTMLCanvasElement>) => {\n    // only enable when player1 has more slots than visible\n    const handLen = (gameState.hands && gameState.hands[1]) ? gameState.hands[1].length : 0;\n    const zone = getZone('hand.player');\n    if (!zone) return;\n    if (handLen <= 5) return; // nothing to scroll\n\n    // Prevent page scrolling when over canvas\n    e.preventDefault();\n\n    // accumulate target offset (invert so wheel down moves cards up)\n    // Each wheel step moves by 48px per delta unit\n    const delta = Math.sign(e.deltaY) * 48;\n    // compute slot height more robustly\n    const slots = computeSlotRects(zone);\n    const slotH = slots && slots.length > 0 ? slots[0].h : zone.rectPx[3] / 5;\n    const visible = 5;\n    const maxOffset = -(Math.max(0, handLen - visible) * slotH);\n    handScrollTargetRef.current = Math.max(Math.min(handScrollTargetRef.current - delta, 0), maxOffset);\n  }, [gameState.hands]);\n\n  const handleTouchStart = useCallback((e: React.TouchEvent<HTMLCanvasElement>) => {\n    if (!e.touches || e.touches.length === 0) return;\n    const handLen = (gameState.hands && gameState.hands[1]) ? gameState.hands[1].length : 0;\n    if (handLen <= 5) return;\n    isTouchingRef.current = true;\n    const y = e.touches[0].clientY;\n    touchStartYRef.current = y;\n    lastTouchYRef.current = y;\n    e.preventDefault();\n  }, [gameState.hands]);\n\n  const handleTouchMove = useCallback((e: React.TouchEvent<HTMLCanvasElement>) => {\n    if (!isTouchingRef.current) return;\n    if (!e.touches || e.touches.length === 0) return;\n    const y = e.touches[0].clientY;\n    const last = lastTouchYRef.current ?? y;\n    const dy = y - last; // positive when moving down\n    lastTouchYRef.current = y;\n\n    // invert so dragging up moves cards up\n    const delta = -dy;\n    const handLen = (gameState.hands && gameState.hands[1]) ? gameState.hands[1].length : 0;\n    const zone = getZone('hand.player');\n    if (!zone) return;\n    const slots = computeSlotRects(zone);\n    const slotH = slots && slots.length > 0 ? slots[0].h : zone.rectPx[3] / 5;\n    const visible = 5;\n    const maxOffset = -(Math.max(0, handLen - visible) * slotH);\n    handScrollTargetRef.current = Math.max(Math.min(handScrollTargetRef.current + delta, 0), maxOffset);\n    e.preventDefault();\n  }, [gameState.hands]);\n\n  const handleTouchEnd = useCallback((e: React.TouchEvent<HTMLCanvasElement>) => {\n    isTouchingRef.current = false;\n    touchStartYRef.current = null;\n    lastTouchYRef.current = null;\n  }, []);\n\n\n\n  // Expose debug trigger to manually start instant sprite animation by slot-key or uid\n  useEffect(() => {\n    (window as any).__pc_triggerInstantAnim = (key: any) => {\n      const now = performance.now();\n      instantSpriteStateRef.current[key || '1.instant.0'] = { started: now, frameCount: 14, frameDuration: 40 };\n    };\n    // alias\n    try { (window as any).pc_triggerInstantAnim = (window as any).__pc_triggerInstantAnim; } catch (e) {}\n    return () => { delete (window as any).__pc_triggerGovAnim; delete (window as any).__pc_triggerInstantAnim; };\n  }, []);\n\n  // Click handler wrapper for corruption selection\n  const handleCardClickInternal = useCallback((data: any) => {\n    const sel: any = (gameState as any).pendingAbilitySelect;\n    if (sel && sel.type === 'corruption_steal') {\n      // expect data.uid and data.player and data.lane\n      if (data.player !== sel.actorPlayer && data.lane === 'aussen') {\n        try {\n          window.dispatchEvent(new CustomEvent('pc:corruption_pick_target', { detail: { player: sel.actorPlayer, targetUid: data.uid } }));\n        } catch(e) {}\n        return; // consume click\n      }\n    }\n    onCardClick(data);\n  }, [gameState, onCardClick]);\n\n  return (\n    <canvas\n      ref={canvasRef}\n      width={1920}\n      height={1080}\n      style={{\n        display: 'block',\n        width: '100%',\n        height: '100%',\n        imageRendering: 'auto',\n      }}\n      onClick={handleClick}\n      onMouseMove={handleMouseMove}\n      onWheel={handleWheel}\n      onTouchStart={handleTouchStart}\n      onTouchMove={handleTouchMove}\n      onTouchEnd={handleTouchEnd}\n    />\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}