{"ast":null,"code":"import _objectSpread from\"C:/Users/skank/Videos/Cards/Milchcards/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{getStrongestGovernment}from'./targets';import{registerTrap}from'./traps';import{logAP,logDraw,logDiscardRandom,logDeactivateRandom,logBuffStrongest,logShield,logDeactivateCard,logOpportunist}from'./logs';import{getGlobalRNG}from'../services/rng';import{logger}from'../debug/logger';// Helper to find strongest government uid for new intents\nfunction strongestGovernmentUid(state,p){var _state$board$p;const govRow=(_state$board$p=state.board[p])===null||_state$board$p===void 0?void 0:_state$board$p.aussen;if(!govRow||govRow.length===0)return null;const alive=govRow.filter(g=>!g.deactivated);if(!alive.length)return null;const sorted=alive.slice().sort((a,b)=>b.influence+(b.tempBuffs||0)-(b.tempDebuffs||0)-(a.influence+(a.tempBuffs||0)-(a.tempDebuffs||0)));return sorted[0].uid;}function other(p){return p===1?2:1;}function logPush(state,msg){state.log.push(msg);}function strongestGov(state,p){const row=state.board[p].aussen;if(!row.length)return null;const alive=row.filter(c=>!c.deactivated);if(alive.length===0)return null;return alive.slice().sort((a,b)=>b.influence+(b.tempBuffs||0)-(b.tempDebuffs||0)-(a.influence+(a.tempBuffs||0)-(a.tempDebuffs||0)))[0];}function publicNames(state,p){return state.board[p].innen.map(c=>c.name);}function hasPublic(state,p,name){return publicNames(state,p).includes(name);}function findCardByUidOnBoard(state,uid){for(const p of[1,2]){for(const lane of['innen','aussen','sofort']){const arr=state.board[p][lane];const hit=arr.find(c=>c.uid===uid);if(hit)return hit;}}return null;}export function resolveQueue(state,events){const rng=getGlobalRNG();// Single pass FIFO\nwhile(events.length){const ev=events.shift();logger.dbg(\"DQ \".concat(ev.type),ev);// Capture small snapshot for delta calc\nconst beforeAP=_objectSpread({},state.actionPoints);switch(ev.type){case'LOG':{logPush(state,ev.msg);break;}case'ADD_AP':{var _state$effectFlags$ot;const cur=state.actionPoints[ev.player];const next=Math.max(0,cur+ev.amount);state.actionPoints[ev.player]=next;logger.dbg(\"ADD_AP before=\".concat(cur,\" amount=\").concat(ev.amount,\" after=\").concat(state.actionPoints[ev.player]));// Opportunist AP-Spiegelung (falls aktiv beim Gegner)\nif((_state$effectFlags$ot=state.effectFlags[other(ev.player)])!==null&&_state$effectFlags$ot!==void 0&&_state$effectFlags$ot.opportunistActive&&ev.amount>0){const mirror={type:'ADD_AP',player:other(ev.player),amount:ev.amount};events.unshift(mirror);logPush(state,\"Opportunist: AP +\".concat(ev.amount,\" gespiegelt.\"));}logPush(state,logAP(ev.player,cur,next));break;}case'DRAW_CARDS':{const handBefore=state.hands[ev.player].length;for(let i=0;i<ev.amount;i++){const top=state.decks[ev.player].shift();if(top){state.hands[ev.player].push(top);logPush(state,logDraw(ev.player,top.name));}}const handAfter=state.hands[ev.player].length;logger.dbg(\"DRAW_CARDS player=\".concat(ev.player,\" before=\").concat(handBefore,\" after=\").concat(handAfter));break;}case'DISCARD_RANDOM_FROM_HAND':{const hand=state.hands[ev.player];for(let i=0;i<ev.amount&&hand.length>0;i++){const idx=rng.randomInt(hand.length);const[card]=hand.splice(idx,1);state.discard.push(card);logPush(state,logDiscardRandom(ev.player,card.name));}break;}case'DEACTIVATE_RANDOM_HAND':{// Deaktivieren von Handkarten (nicht entfernen)\nconst hand=state.hands[ev.player];const activeCards=hand.filter(c=>!c.deactivated);logger.dbg(\"DEACTIVATE_RANDOM_HAND: P\".concat(ev.player,\" handSize=\").concat(hand.length,\" activeCandidates=\").concat(activeCards.length));if(activeCards.length===0){logPush(state,\"Oprah: no active hand cards to deactivate for P\".concat(ev.player));break;}for(let i=0;i<ev.amount&&activeCards.length>0;i++){const card=rng.pick(activeCards);logger.dbg(\"DEACTIVATE_RANDOM_HAND: picked=\".concat(card?card.name:'undefined',\" for P\").concat(ev.player));if(card){card.deactivated=true;card._deactivatedBy='OPRAH';logPush(state,logDeactivateRandom(ev.player,card.name));// Entferne aus activeCards für nächste Iteration\nconst idx=activeCards.indexOf(card);if(idx>-1)activeCards.splice(idx,1);}}break;}// Legacy cases - removed\n// SET_DISCOUNT and REFUND_NEXT_INITIATIVE are no longer supported\n// Use ADD_AP instead\ncase'GRANT_SHIELD':{if(!state.shields)state.shields=new Set();// Wenn kein spezifischer targetUid angegeben ist, verwende Platzhalter pro Spieler (-1 oder -2)\nconst uid=ev.targetUid!==undefined?ev.targetUid:ev.player===1?-1:-2;state.shields.add(uid);logPush(state,logShield(uid));break;}case'DEACTIVATE_CARD':{const card=findCardByUidOnBoard(state,ev.targetUid);if(card){card.deactivated=true;logPush(state,logDeactivateCard(card.name));// Falls die Karte eine Shield-Aura ist, entferne Spielerschilde\nif(card.effectKey==='init.intelligence_liaison.shield_aura'){if(state.shields){const placeholder=ev.player===1?-1:-2;state.shields.delete(placeholder);}}}break;}case'REACTIVATE_CARD':{const card=findCardByUidOnBoard(state,ev.targetUid);if(card){card.deactivated=false;logPush(state,\"\\uD83D\\uDD04 \".concat(card.name,\" wurde reaktiviert\"));}break;}case'RETURN_TO_HAND':{const card=findCardByUidOnBoard(state,ev.targetUid);if(card){// Remove from board\nfor(const p of[1,2]){for(const lane of['innen','aussen','sofort']){const idx=state.board[p][lane].findIndex(c=>c.uid===ev.targetUid);if(idx!==-1){state.board[p][lane].splice(idx,1);// Add to hand\nstate.hands[ev.player].push(card);logPush(state,\"\\uD83D\\uDD04 \".concat(card.name,\" wurde zur Hand zur\\xFCckgegeben\"));break;}}}}break;}case'CANCEL_CARD':{const card=findCardByUidOnBoard(state,ev.targetUid);if(card){// Remove from board and add to discard\nfor(const p of[1,2]){for(const lane of['innen','aussen','sofort']){const idx=state.board[p][lane].findIndex(c=>c.uid===ev.targetUid);if(idx!==-1){state.board[p][lane].splice(idx,1);state.discard.push(card);logPush(state,\"\\u274C \".concat(card.name,\" wurde annulliert\"));break;}}}}break;}case'REGISTER_TRAP':{registerTrap(state,ev.player,ev.key);logPush(state,\"Trap registered: \".concat(ev.key,\" (P\").concat(ev.player,\")\"));break;}case'BUFF_STRONGEST_GOV':case'ADJUST_INFLUENCE':{// Alias auf BUFF_STRONGEST_GOV\nconst player=ev.player;let amount=ev.amount;const reason=ev.reason;// Special intent: Oprah media buff - compute amount based on media cards on own board\nif(reason==='OPRAH_MEDIA_BUFF_INTENT'){const ownBoard=[...state.board[player].innen,...state.board[player].aussen];const cd=require('../data/cardDetails');const mediaNames=['Oprah Winfrey','Mark Zuckerberg','Tim Cook','Sam Altman'];const mediaCount=ownBoard.filter(c=>{var _cd$getCardDetails,_cd$getCardDetails$ca;const sub=(_cd$getCardDetails=cd.getCardDetails)===null||_cd$getCardDetails===void 0?void 0:(_cd$getCardDetails$ca=_cd$getCardDetails.call(cd,c.name))===null||_cd$getCardDetails$ca===void 0?void 0:_cd$getCardDetails$ca.subcategories;const legacy=c.tag==='Media'||c.tag==='Medien';return Array.isArray(sub)&&sub.includes('Medien')||legacy||mediaNames.includes(c.name);}).length;amount=Math.min(mediaCount,3);if(amount>0){events.unshift({type:'LOG',msg:\"Oprah Winfrey: Media buff calculated +\".concat(amount,\" (max 3).\")});}else{events.unshift({type:'LOG',msg:\"Oprah Winfrey: No media cards on board - no buff.\"});}}const tgt=getStrongestGovernment(state,player);if(tgt&&amount!==0){var _state$effectFlags$ot2;if(amount>=0){tgt.tempBuffs=(tgt.tempBuffs||0)+amount;}else{tgt.tempDebuffs=(tgt.tempDebuffs||0)+Math.abs(amount);}logPush(state,logBuffStrongest(player,tgt.name,amount));// Opportunist-Spiegelung (falls aktiv beim Gegner)\nif((_state$effectFlags$ot2=state.effectFlags[other(player)])!==null&&_state$effectFlags$ot2!==void 0&&_state$effectFlags$ot2.opportunistActive&&amount>0){const mirror={type:'BUFF_STRONGEST_GOV',player:other(player),amount};events.unshift(mirror);logPush(state,logOpportunist(other(player),amount));}}break;}case'DEBUFF_CARD':{const card=findCardByUidOnBoard(state,ev.targetUid);if(card&&card.kind==='pol'){const tgt=card;tgt.tempDebuffs=(tgt.tempDebuffs||0)+Math.abs(ev.amount);logPush(state,\"\\uD83D\\uDD3B \".concat(tgt.name,\": -\").concat(Math.abs(ev.amount),\" Influence\"));}break;}// ===== New intent event handlers =====\ncase'DEACTIVATE_STRONGEST_ENEMY_GOV':{const opp=ev.player===1?2:1;const uid=strongestGovernmentUid(state,opp);if(uid!==null){events.unshift({type:'DEACTIVATE_CARD',player:opp,targetUid:uid});events.unshift({type:'LOG',msg:'Party Offensive: strongest enemy Government deactivated.'});}else{events.unshift({type:'LOG',msg:'Party Offensive: no enemy Government to deactivate.'});}break;}case'LOCK_OPPONENT_INITIATIVES_EOT':{const opp=ev.player===1?2:1;state.effectFlags[opp].initiativesLocked=true;events.unshift({type:'LOG',msg:'Opposition Blockade: opponent initiatives locked until end of turn.'});break;}case'SET_DOUBLE_PUBLIC_AURA':{state.effectFlags[ev.player].doublePublicAura=true;events.unshift({type:'LOG',msg:'Influencer Campaign: next Public aura will be doubled.'});break;}case'SET_OPPORTUNIST_ACTIVE':{const{player,active}=ev;state.effectFlags[player].opportunistActive=active;if(active){events.unshift({type:'LOG',msg:'Opportunist: AP effects will be mirrored until end of turn.'});}break;}case'INITIATIVE_ACTIVATED':{var _state$board$ev$playe,_state$board$ev$playe2,_state$effectFlags$ev;// Initiative activation event - trigger reactions from public cards\nlogPush(state,'Initiative activated.');// Check for public cards that react to initiative activation\nconst publicCards=((_state$board$ev$playe=state.board[ev.player])===null||_state$board$ev$playe===void 0?void 0:_state$board$ev$playe.innen)||[];// Shadow Lobbying: +1 influence per own Oligarch-tag on board (max +3)\n// Detect if the activating initiative was Shadow Lobbying by checking the last played instant in slot\nconst instantSlot=((_state$board$ev$playe2=state.board[ev.player])===null||_state$board$ev$playe2===void 0?void 0:_state$board$ev$playe2.sofort)||[];const lastInstant=instantSlot[0];if(lastInstant&&(lastInstant.effectKey==='init.shadow_lobbying.per_oligarch'||lastInstant.name==='Shadow Lobbying')){const ownBoard=[...state.board[ev.player].innen,...state.board[ev.player].aussen];const oligarchCount=ownBoard.filter(c=>{var _getCardDetails,_ref,_getCardDetails$call;const details=c.name?require('../data/cardDetails'):null;// Fallback: try BaseSpecial tag if available\nconst sub=(_getCardDetails=(_ref=require('../data/cardDetails')).getCardDetails)===null||_getCardDetails===void 0?void 0:(_getCardDetails$call=_getCardDetails.call(_ref,c.name))===null||_getCardDetails$call===void 0?void 0:_getCardDetails$call.subcategories;const hasNewTag=Array.isArray(sub)&&sub.includes('Oligarch');const legacyTag=c.tag==='Oligarch';return hasNewTag||legacyTag;}).length;const amt=Math.min(oligarchCount,3);if(amt>0){events.unshift({type:'BUFF_STRONGEST_GOV',player:ev.player,amount:amt});events.unshift({type:'LOG',msg:\"Shadow Lobbying: st\\xE4rkste Regierung +\".concat(amt,\" Einfluss (pro Oligarch, max 3).\")});}else{events.unshift({type:'LOG',msg:\"Shadow Lobbying: Keine Oligarchen \\u2013 kein Einfluss-Buff.\"});}}// Elon Musk: +1 AP on initiative activation\nconst elonMusk=publicCards.find(card=>card.kind==='spec'&&card.name==='Elon Musk');if(elonMusk){events.unshift({type:'ADD_AP',player:ev.player,amount:1});events.unshift({type:'LOG',msg:'Elon Musk: +1 AP on initiative activation.'});}// Mark Zuckerberg: +1 AP on initiative activation (once per turn)\nconst markZuckerberg=publicCards.find(card=>card.kind==='spec'&&card.name==='Mark Zuckerberg');if(markZuckerberg&&!((_state$effectFlags$ev=state.effectFlags[ev.player])!==null&&_state$effectFlags$ev!==void 0&&_state$effectFlags$ev.markZuckerbergUsed)){events.unshift({type:'ADD_AP',player:ev.player,amount:1});events.unshift({type:'LOG',msg:'Mark Zuckerberg: +1 AP on initiative activation.'});if(!state.effectFlags[ev.player]){state.effectFlags[ev.player]={markZuckerbergUsed:false};}state.effectFlags[ev.player].markZuckerbergUsed=true;}// Ai Weiwei: +1 card +1 AP on initiative activation\nconst aiWeiwei=publicCards.find(card=>card.kind==='spec'&&card.name==='Ai Weiwei');if(aiWeiwei){events.unshift({type:'DRAW_CARDS',player:ev.player,amount:1});events.unshift({type:'ADD_AP',player:ev.player,amount:1});events.unshift({type:'LOG',msg:'Ai Weiwei: +1 card +1 AP on initiative activation.'});}// Sam Altman: +1 card +1 AP on AI-related initiative activation\nconst samAltman=publicCards.find(card=>card.kind==='spec'&&card.name==='Sam Altman');if(samAltman){// Check if the activated initiative is AI-related (would need to be passed as context)\n// For now, this is handled via the initiative card's tag check in the activation flow\nevents.unshift({type:'LOG',msg:'Sam Altman: AI initiative detected - bonus ready.'});}// Digitaler Wahlkampf: draw 1 card per own Media-tag on board\nif(lastInstant&&(lastInstant.effectKey==='init.digital_campaign.per_media'||lastInstant.name==='Digitaler Wahlkampf')){const ownBoard=[...state.board[ev.player].innen,...state.board[ev.player].aussen];const mediaCount=ownBoard.filter(c=>{var _getCardDetails2,_ref2,_getCardDetails2$call;const sub=(_getCardDetails2=(_ref2=require('../data/cardDetails')).getCardDetails)===null||_getCardDetails2===void 0?void 0:(_getCardDetails2$call=_getCardDetails2.call(_ref2,c.name))===null||_getCardDetails2$call===void 0?void 0:_getCardDetails2$call.subcategories;const legacy=c.tag==='Medien'||c.tag==='Media';return Array.isArray(sub)&&sub.includes('Medien')||legacy||Array.isArray(sub)&&sub.includes('Medien')||Array.isArray(sub)&&sub.includes('Medien');}).length;if(mediaCount>0){events.unshift({type:'DRAW_CARDS',player:ev.player,amount:mediaCount});events.unshift({type:'LOG',msg:\"Digitaler Wahlkampf: ziehe \".concat(mediaCount,\" Karte(n) (pro Medien-Karte).\")});}else{events.unshift({type:'LOG',msg:\"Digitaler Wahlkampf: Keine Medien-Karten auf dem Feld.\"});}}break;}// ONCE_AP_ON_ACTIVATION removed - use standard ADD_AP events instead\n// ON_ACTIVATE_DRAW_AP removed - use standard ADD_AP and DRAW_CARDS events instead\n// Simplified AP system: No initiative-specific bonuses\n// All AP bonuses are now immediate ADD_AP events\n}// generic after snapshot diff for AP\nif(state.actionPoints[1]!==beforeAP[1]||state.actionPoints[2]!==beforeAP[2]){logger.dbg(\"AP delta P1 \".concat(beforeAP[1],\"->\").concat(state.actionPoints[1],\" | P2 \").concat(beforeAP[2],\"->\").concat(state.actionPoints[2]));}}// Ensure React viewers see mutated hand arrays by creating shallow copies\ntry{state.hands={1:state.hands[1]?[...state.hands[1]]:[],2:state.hands[2]?[...state.hands[2]]:[]};logger.dbg('resolveQueue: hand arrays shallow-copied to trigger UI updates');}catch(e){logger.dbg('resolveQueue: failed to shallow-copy hands',e);}}","map":{"version":3,"names":["getStrongestGovernment","registerTrap","logAP","logDraw","logDiscardRandom","logDeactivateRandom","logBuffStrongest","logShield","logDeactivateCard","logOpportunist","getGlobalRNG","logger","strongestGovernmentUid","state","p","_state$board$p","govRow","board","aussen","length","alive","filter","g","deactivated","sorted","slice","sort","a","b","influence","tempBuffs","tempDebuffs","uid","other","logPush","msg","log","push","strongestGov","row","c","publicNames","innen","map","name","hasPublic","includes","findCardByUidOnBoard","lane","arr","hit","find","resolveQueue","events","rng","ev","shift","dbg","concat","type","beforeAP","_objectSpread","actionPoints","_state$effectFlags$ot","cur","player","next","Math","max","amount","effectFlags","opportunistActive","mirror","unshift","handBefore","hands","i","top","decks","handAfter","hand","idx","randomInt","card","splice","discard","activeCards","pick","_deactivatedBy","indexOf","shields","Set","targetUid","undefined","add","effectKey","placeholder","delete","findIndex","key","reason","ownBoard","cd","require","mediaNames","mediaCount","_cd$getCardDetails","_cd$getCardDetails$ca","sub","getCardDetails","call","subcategories","legacy","tag","Array","isArray","min","tgt","_state$effectFlags$ot2","abs","kind","opp","initiativesLocked","doublePublicAura","active","_state$board$ev$playe","_state$board$ev$playe2","_state$effectFlags$ev","publicCards","instantSlot","sofort","lastInstant","oligarchCount","_getCardDetails","_ref","_getCardDetails$call","details","hasNewTag","legacyTag","amt","elonMusk","markZuckerberg","markZuckerbergUsed","aiWeiwei","samAltman","_getCardDetails2","_ref2","_getCardDetails2$call","e"],"sources":["C:/Users/skank/Videos/Cards/Milchcards/src/utils/queue.ts"],"sourcesContent":["import { GameState, Player, PoliticianCard, Card } from '../types/game';\nimport { EffectEvent } from '../types/effects';\nimport { getStrongestGovernment } from './targets';\nimport { AP_CAP, MAX_DISCOUNT, MAX_REFUND } from '../config/gameConstants';\nimport { registerTrap } from './traps';\nimport {\n  logAP, logDiscount, logRefund, logDraw, logDiscardRandom,\n  logDeactivateRandom, logBuffStrongest, logShield, logDeactivateCard,\n  logInitiativeAura, logAiWeiwei, logPlattformBonus, logOpportunist\n} from './logs';\nimport { getGlobalRNG } from '../services/rng';\nimport { logger } from '../debug/logger';\n// Helper to find strongest government uid for new intents\nfunction strongestGovernmentUid(state: GameState, p: Player): number | null {\n  const govRow = state.board[p]?.aussen as PoliticianCard[];\n  if (!govRow || govRow.length === 0) return null;\n  const alive = govRow.filter(g => !(g as any).deactivated);\n  if (!alive.length) return null;\n  const sorted = alive.slice().sort((a,b) => (b.influence + (b.tempBuffs||0) - (b.tempDebuffs||0)) - (a.influence + (a.tempBuffs||0) - (a.tempDebuffs||0)));\n  return sorted[0].uid;\n}\n\nfunction other(p: Player): Player { return p === 1 ? 2 : 1; }\nfunction logPush(state: GameState, msg: string) { state.log.push(msg); }\n\nfunction strongestGov(state: GameState, p: Player): PoliticianCard | null {\n  const row = state.board[p].aussen as PoliticianCard[];\n  if (!row.length) return null;\n  const alive = row.filter(c => !c.deactivated);\n  if (alive.length === 0) return null;\n  return alive.slice().sort((a,b) => (b.influence + (b.tempBuffs||0) - (b.tempDebuffs||0)) - (a.influence + (a.tempBuffs||0) - (a.tempDebuffs||0)))[0];\n}\n\nfunction publicNames(state: GameState, p: Player): string[] {\n  return state.board[p].innen.map(c => c.name);\n}\n\nfunction hasPublic(state: GameState, p: Player, name: string): boolean {\n  return publicNames(state, p).includes(name);\n}\n\nfunction findCardByUidOnBoard(state: GameState, uid: number): Card | null {\n  for (const p of [1,2] as const) {\n    for (const lane of ['innen','aussen','sofort'] as const) {\n      const arr = state.board[p][lane];\n      const hit = arr.find(c => c.uid === uid);\n      if (hit) return hit;\n    }\n  }\n  return null;\n}\n\nexport function resolveQueue(state: GameState, events: EffectEvent[]) {\n  const rng = getGlobalRNG();\n\n  // Single pass FIFO\n  while (events.length) {\n    const ev = events.shift()!;\n    logger.dbg(`DQ ${ev.type}`, ev);\n    // Capture small snapshot for delta calc\n    const beforeAP = { ...state.actionPoints };\n\n    switch (ev.type) {\n      case 'LOG': {\n        logPush(state, ev.msg);\n        break;\n      }\n\n      case 'ADD_AP': {\n        const cur = state.actionPoints[ev.player];\n        const next = Math.max(0, cur + ev.amount);\n        state.actionPoints[ev.player] = next;\n        logger.dbg(`ADD_AP before=${cur} amount=${ev.amount} after=${state.actionPoints[ev.player]}`);\n\n        // Opportunist AP-Spiegelung (falls aktiv beim Gegner)\n        if (state.effectFlags[other(ev.player)]?.opportunistActive && ev.amount > 0) {\n          const mirror = { type: 'ADD_AP', player: other(ev.player), amount: ev.amount } as EffectEvent;\n          events.unshift(mirror);\n          logPush(state, `Opportunist: AP +${ev.amount} gespiegelt.`);\n        }\n\n        logPush(state, logAP(ev.player, cur, next));\n        break;\n      }\n\n      case 'DRAW_CARDS': {\n        const handBefore = state.hands[ev.player].length;\n        for (let i = 0; i < ev.amount; i++) {\n          const top = state.decks[ev.player].shift();\n          if (top) {\n            state.hands[ev.player].push(top);\n            logPush(state, logDraw(ev.player, top.name));\n          }\n        }\n        const handAfter = state.hands[ev.player].length;\n        logger.dbg(`DRAW_CARDS player=${ev.player} before=${handBefore} after=${handAfter}`);\n        break;\n      }\n\n      case 'DISCARD_RANDOM_FROM_HAND': {\n        const hand = state.hands[ev.player];\n        for (let i = 0; i < ev.amount && hand.length > 0; i++) {\n          const idx = rng.randomInt(hand.length);\n          const [card] = hand.splice(idx, 1);\n          state.discard.push(card);\n          logPush(state, logDiscardRandom(ev.player, card.name));\n        }\n        break;\n      }\n\n      case 'DEACTIVATE_RANDOM_HAND': {\n        // Deaktivieren von Handkarten (nicht entfernen)\n        const hand = state.hands[ev.player];\n        const activeCards = hand.filter(c => !(c as any).deactivated);\n        logger.dbg(`DEACTIVATE_RANDOM_HAND: P${ev.player} handSize=${hand.length} activeCandidates=${activeCards.length}`);\n        if (activeCards.length === 0) {\n          logPush(state, `Oprah: no active hand cards to deactivate for P${ev.player}`);\n          break;\n        }\n        for (let i = 0; i < ev.amount && activeCards.length > 0; i++) {\n          const card = rng.pick(activeCards);\n          logger.dbg(`DEACTIVATE_RANDOM_HAND: picked=${card ? card.name : 'undefined'} for P${ev.player}`);\n          if (card) {\n            (card as any).deactivated = true;\n            (card as any)._deactivatedBy = 'OPRAH';\n            logPush(state, logDeactivateRandom(ev.player, card.name));\n            // Entferne aus activeCards für nächste Iteration\n            const idx = activeCards.indexOf(card);\n            if (idx > -1) activeCards.splice(idx, 1);\n          }\n        }\n        break;\n      }\n\n      // Legacy cases - removed\n      // SET_DISCOUNT and REFUND_NEXT_INITIATIVE are no longer supported\n      // Use ADD_AP instead\n\n      case 'GRANT_SHIELD': {\n        if (!state.shields) state.shields = new Set();\n        // Wenn kein spezifischer targetUid angegeben ist, verwende Platzhalter pro Spieler (-1 oder -2)\n        const uid = ev.targetUid !== undefined ? ev.targetUid : (ev.player === 1 ? -1 : -2);\n        state.shields.add(uid);\n        logPush(state, logShield(uid));\n        break;\n      }\n\n      case 'DEACTIVATE_CARD': {\n        const card = findCardByUidOnBoard(state, ev.targetUid);\n        if (card) {\n          (card as any).deactivated = true;\n          logPush(state, logDeactivateCard(card.name));\n\n          // Falls die Karte eine Shield-Aura ist, entferne Spielerschilde\n          if ((card as any).effectKey === 'init.intelligence_liaison.shield_aura') {\n            if (state.shields) {\n              const placeholder = ev.player === 1 ? -1 : -2;\n              state.shields.delete(placeholder);\n            }\n          }\n        }\n        break;\n      }\n\n      case 'REACTIVATE_CARD': {\n        const card = findCardByUidOnBoard(state, ev.targetUid);\n        if (card) {\n          (card as any).deactivated = false;\n          logPush(state, `🔄 ${card.name} wurde reaktiviert`);\n        }\n        break;\n      }\n\n      case 'RETURN_TO_HAND': {\n        const card = findCardByUidOnBoard(state, ev.targetUid);\n        if (card) {\n          // Remove from board\n          for (const p of [1, 2] as const) {\n            for (const lane of ['innen', 'aussen', 'sofort'] as const) {\n              const idx = state.board[p][lane].findIndex(c => c.uid === ev.targetUid);\n              if (idx !== -1) {\n                state.board[p][lane].splice(idx, 1);\n                // Add to hand\n                state.hands[ev.player].push(card);\n                logPush(state, `🔄 ${card.name} wurde zur Hand zurückgegeben`);\n                break;\n              }\n            }\n          }\n        }\n        break;\n      }\n\n      case 'CANCEL_CARD': {\n        const card = findCardByUidOnBoard(state, ev.targetUid);\n        if (card) {\n          // Remove from board and add to discard\n          for (const p of [1, 2] as const) {\n            for (const lane of ['innen', 'aussen', 'sofort'] as const) {\n              const idx = state.board[p][lane].findIndex(c => c.uid === ev.targetUid);\n              if (idx !== -1) {\n                state.board[p][lane].splice(idx, 1);\n                state.discard.push(card);\n                logPush(state, `❌ ${card.name} wurde annulliert`);\n                break;\n              }\n            }\n          }\n        }\n        break;\n      }\n\n      case 'REGISTER_TRAP': {\n        registerTrap(state, ev.player, (ev as any).key);\n        logPush(state, `Trap registered: ${(ev as any).key} (P${ev.player})`);\n        break;\n      }\n\n      case 'BUFF_STRONGEST_GOV':\n      case 'ADJUST_INFLUENCE': { // Alias auf BUFF_STRONGEST_GOV\n        const player = ev.player;\n        let amount = (ev as any).amount;\n        const reason = (ev as any).reason as string | undefined;\n\n        // Special intent: Oprah media buff - compute amount based on media cards on own board\n        if (reason === 'OPRAH_MEDIA_BUFF_INTENT') {\n          const ownBoard = [\n            ...state.board[player].innen,\n            ...state.board[player].aussen,\n          ];\n          const cd = require('../data/cardDetails') as any;\n          const mediaNames = ['Oprah Winfrey', 'Mark Zuckerberg', 'Tim Cook', 'Sam Altman'];\n          const mediaCount = ownBoard.filter(c => {\n            const sub = cd.getCardDetails?.(c.name)?.subcategories as string[] | undefined;\n            const legacy = (c as any).tag === 'Media' || (c as any).tag === 'Medien';\n            return (Array.isArray(sub) && sub.includes('Medien')) || legacy || mediaNames.includes(c.name);\n          }).length;\n          amount = Math.min(mediaCount, 3);\n          if (amount > 0) {\n            events.unshift({ type: 'LOG', msg: `Oprah Winfrey: Media buff calculated +${amount} (max 3).` });\n          } else {\n            events.unshift({ type: 'LOG', msg: `Oprah Winfrey: No media cards on board - no buff.` });\n          }\n        }\n\n        const tgt = getStrongestGovernment(state, player);\n        if (tgt && amount !== 0) {\n          if (amount >= 0) {\n            (tgt as PoliticianCard).tempBuffs = ((tgt as PoliticianCard).tempBuffs || 0) + amount;\n          } else {\n            (tgt as PoliticianCard).tempDebuffs = ((tgt as PoliticianCard).tempDebuffs || 0) + Math.abs(amount);\n          }\n          logPush(state, logBuffStrongest(player, tgt.name, amount));\n\n          // Opportunist-Spiegelung (falls aktiv beim Gegner)\n          if (state.effectFlags[other(player)]?.opportunistActive && amount > 0) {\n            const mirror = { type: 'BUFF_STRONGEST_GOV', player: other(player), amount } as EffectEvent;\n            events.unshift(mirror);\n            logPush(state, logOpportunist(other(player), amount));\n          }\n        }\n        break;\n      }\n\n      case 'DEBUFF_CARD': {\n        const card = findCardByUidOnBoard(state, ev.targetUid);\n        if (card && card.kind === 'pol') {\n          const tgt = card as any;\n          tgt.tempDebuffs = (tgt.tempDebuffs || 0) + Math.abs((ev as any).amount);\n          logPush(state, `🔻 ${tgt.name}: -${Math.abs((ev as any).amount)} Influence`);\n        }\n        break;\n      }\n\n      // ===== New intent event handlers =====\n\n      case 'DEACTIVATE_STRONGEST_ENEMY_GOV': {\n        const opp: Player = ev.player === 1 ? 2 : 1;\n        const uid = strongestGovernmentUid(state, opp);\n        if (uid !== null) {\n          events.unshift({ type: 'DEACTIVATE_CARD', player: opp, targetUid: uid });\n          events.unshift({ type: 'LOG', msg: 'Party Offensive: strongest enemy Government deactivated.' });\n        } else {\n          events.unshift({ type: 'LOG', msg: 'Party Offensive: no enemy Government to deactivate.' });\n        }\n        break;\n      }\n\n      case 'LOCK_OPPONENT_INITIATIVES_EOT': {\n        const opp: Player = ev.player === 1 ? 2 : 1;\n        state.effectFlags[opp].initiativesLocked = true;\n        events.unshift({ type: 'LOG', msg: 'Opposition Blockade: opponent initiatives locked until end of turn.' });\n        break;\n      }\n\n      case 'SET_DOUBLE_PUBLIC_AURA': {\n        state.effectFlags[ev.player].doublePublicAura = true;\n        events.unshift({ type: 'LOG', msg: 'Influencer Campaign: next Public aura will be doubled.' });\n        break;\n      }\n\n      case 'SET_OPPORTUNIST_ACTIVE': {\n        const { player, active } = ev as { type: 'SET_OPPORTUNIST_ACTIVE'; player: Player; active: boolean };\n        state.effectFlags[player].opportunistActive = active;\n        if (active) {\n          events.unshift({ type: 'LOG', msg: 'Opportunist: AP effects will be mirrored until end of turn.' });\n        }\n        break;\n      }\n\n      case 'INITIATIVE_ACTIVATED': {\n        // Initiative activation event - trigger reactions from public cards\n        logPush(state, 'Initiative activated.');\n\n        // Check for public cards that react to initiative activation\n        const publicCards = state.board[ev.player]?.innen || [];\n\n        // Shadow Lobbying: +1 influence per own Oligarch-tag on board (max +3)\n        // Detect if the activating initiative was Shadow Lobbying by checking the last played instant in slot\n        const instantSlot = state.board[ev.player]?.sofort || [];\n        const lastInstant = instantSlot[0] as any;\n        if (lastInstant && (lastInstant.effectKey === 'init.shadow_lobbying.per_oligarch' || lastInstant.name === 'Shadow Lobbying')) {\n          const ownBoard = [\n            ...state.board[ev.player].innen,\n            ...state.board[ev.player].aussen,\n          ];\n          const oligarchCount = ownBoard.filter(c => {\n            const details = (c as any).name ? require('../data/cardDetails') as any : null;\n            // Fallback: try BaseSpecial tag if available\n            const sub = (require('../data/cardDetails') as any).getCardDetails?.((c as any).name)?.subcategories as string[] | undefined;\n            const hasNewTag = Array.isArray(sub) && sub.includes('Oligarch');\n            const legacyTag = (c as any).tag === 'Oligarch';\n            return hasNewTag || legacyTag;\n          }).length;\n          const amt = Math.min(oligarchCount, 3);\n          if (amt > 0) {\n            events.unshift({ type: 'BUFF_STRONGEST_GOV', player: ev.player, amount: amt });\n            events.unshift({ type: 'LOG', msg: `Shadow Lobbying: stärkste Regierung +${amt} Einfluss (pro Oligarch, max 3).` });\n          } else {\n            events.unshift({ type: 'LOG', msg: `Shadow Lobbying: Keine Oligarchen – kein Einfluss-Buff.` });\n          }\n        }\n\n        // Elon Musk: +1 AP on initiative activation\n        const elonMusk = publicCards.find(card =>\n          card.kind === 'spec' && (card as any).name === 'Elon Musk'\n        );\n        if (elonMusk) {\n          events.unshift({ type: 'ADD_AP', player: ev.player, amount: 1 });\n          events.unshift({ type: 'LOG', msg: 'Elon Musk: +1 AP on initiative activation.' });\n        }\n\n        // Mark Zuckerberg: +1 AP on initiative activation (once per turn)\n        const markZuckerberg = publicCards.find(card =>\n          card.kind === 'spec' && (card as any).name === 'Mark Zuckerberg'\n        );\n        if (markZuckerberg && !state.effectFlags[ev.player]?.markZuckerbergUsed) {\n          events.unshift({ type: 'ADD_AP', player: ev.player, amount: 1 });\n          events.unshift({ type: 'LOG', msg: 'Mark Zuckerberg: +1 AP on initiative activation.' });\n          if (!state.effectFlags[ev.player]) {\n            state.effectFlags[ev.player] = { markZuckerbergUsed: false };\n          }\n          state.effectFlags[ev.player].markZuckerbergUsed = true;\n        }\n\n        // Ai Weiwei: +1 card +1 AP on initiative activation\n        const aiWeiwei = publicCards.find(card =>\n          card.kind === 'spec' && (card as any).name === 'Ai Weiwei'\n        );\n        if (aiWeiwei) {\n          events.unshift({ type: 'DRAW_CARDS', player: ev.player, amount: 1 });\n          events.unshift({ type: 'ADD_AP', player: ev.player, amount: 1 });\n          events.unshift({ type: 'LOG', msg: 'Ai Weiwei: +1 card +1 AP on initiative activation.' });\n        }\n\n        // Sam Altman: +1 card +1 AP on AI-related initiative activation\n        const samAltman = publicCards.find(card =>\n          card.kind === 'spec' && (card as any).name === 'Sam Altman'\n        );\n        if (samAltman) {\n          // Check if the activated initiative is AI-related (would need to be passed as context)\n          // For now, this is handled via the initiative card's tag check in the activation flow\n          events.unshift({ type: 'LOG', msg: 'Sam Altman: AI initiative detected - bonus ready.' });\n        }\n\n        // Digitaler Wahlkampf: draw 1 card per own Media-tag on board\n        if (lastInstant && (lastInstant.effectKey === 'init.digital_campaign.per_media' || lastInstant.name === 'Digitaler Wahlkampf')) {\n          const ownBoard = [\n            ...state.board[ev.player].innen,\n            ...state.board[ev.player].aussen,\n          ];\n          const mediaCount = ownBoard.filter(c => {\n            const sub = (require('../data/cardDetails') as any).getCardDetails?.((c as any).name)?.subcategories as string[] | undefined;\n            const legacy = (c as any).tag === 'Medien' || (c as any).tag === 'Media';\n            return (Array.isArray(sub) && sub.includes('Medien')) || legacy || (Array.isArray(sub) && sub.includes('Medien')) || (Array.isArray(sub) && sub.includes('Medien'));\n          }).length;\n          if (mediaCount > 0) {\n            events.unshift({ type: 'DRAW_CARDS', player: ev.player, amount: mediaCount });\n            events.unshift({ type: 'LOG', msg: `Digitaler Wahlkampf: ziehe ${mediaCount} Karte(n) (pro Medien-Karte).` });\n          } else {\n            events.unshift({ type: 'LOG', msg: `Digitaler Wahlkampf: Keine Medien-Karten auf dem Feld.` });\n          }\n        }\n\n        break;\n      }\n\n      // ONCE_AP_ON_ACTIVATION removed - use standard ADD_AP events instead\n\n      // ON_ACTIVATE_DRAW_AP removed - use standard ADD_AP and DRAW_CARDS events instead\n\n      // Simplified AP system: No initiative-specific bonuses\n      // All AP bonuses are now immediate ADD_AP events\n\n\n    }\n    // generic after snapshot diff for AP\n    if (state.actionPoints[1] !== beforeAP[1] || state.actionPoints[2] !== beforeAP[2]) {\n      logger.dbg(`AP delta P1 ${beforeAP[1]}->${state.actionPoints[1]} | P2 ${beforeAP[2]}->${state.actionPoints[2]}`);\n    }\n  }\n  // Ensure React viewers see mutated hand arrays by creating shallow copies\n  try {\n    state.hands = {\n      1: state.hands[1] ? [...state.hands[1]] : [],\n      2: state.hands[2] ? [...state.hands[2]] : []\n    } as any;\n    logger.dbg('resolveQueue: hand arrays shallow-copied to trigger UI updates');\n  } catch (e) {\n    logger.dbg('resolveQueue: failed to shallow-copy hands', e);\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}