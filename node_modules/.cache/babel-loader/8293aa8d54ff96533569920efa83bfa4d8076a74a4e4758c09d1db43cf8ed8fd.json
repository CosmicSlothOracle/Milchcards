{"ast":null,"code":"import { createKeyboardListener, readGamepadsUnified, P1_KEYS, P2_KEYS } from \"./input\";\nimport { buildSpriteConfig, P1_PROJECTILE_SRC, P2_PROJECTILE_SRC, P1_BLAST_SRC, P2_BLAST_SRC } from \"./assetRegistry\";\nimport { loadAtlas } from \"./atlasLoader\";\nimport { Fighter, Blast } from \"./fighter\";\nimport { getAnimationViewer } from \"./animationViewer\";\nexport function createGame(canvas) {\n  const ctx = canvas.getContext(\"2d\");\n  const WIDTH = canvas.width,\n    HEIGHT = canvas.height;\n  // Debug: log when this module is actually instantiated so we can confirm if the rebuilt module is loaded\n  // Visible in the browser console immediately after page load\n  // eslint-disable-next-line no-console\n  console.debug(\"[qte] createGame initialized\", {\n    WIDTH,\n    HEIGHT\n  });\n  function clamp(v, min, max) {\n    return v < min ? min : v > max ? max : v;\n  }\n  const input = createKeyboardListener(canvas);\n\n  // Create animation viewer button\n  const animationViewerBtn = document.createElement('button');\n  animationViewerBtn.textContent = 'ðŸŽ¬ View Animations';\n  animationViewerBtn.style.cssText = `\n    position: fixed;\n    top: 10px;\n    right: 10px;\n    z-index: 1000;\n    background: #0066cc;\n    color: white;\n    border: none;\n    border-radius: 4px;\n    padding: 8px 16px;\n    cursor: pointer;\n    font-size: 14px;\n    font-weight: bold;\n    box-shadow: 0 2px 4px rgba(0,0,0,0.3);\n  `;\n  animationViewerBtn.onclick = () => getAnimationViewer().show();\n  document.body.appendChild(animationViewerBtn);\n  const p1Sprite = buildSpriteConfig(\"ninja\");\n  const p2Sprite = buildSpriteConfig(\"cyboard\", {\n    idle: {\n      src: \"cyboard/idle_256x256_4.png\",\n      frames: 4,\n      fps: 6\n    },\n    walk: {\n      src: \"cyboard/walk_256x256_4.png\",\n      frames: 4,\n      fps: 10\n    },\n    ranged: {\n      src: \"cyboard/ranged_256x256_4.png\",\n      frames: 4,\n      fps: 12\n    },\n    parry: {\n      src: \"cyboard/parry_256x256_4.png\",\n      frames: 4,\n      fps: 10\n    },\n    blast: {\n      src: \"cyboard/blast_256x256_4.png\",\n      frames: 4,\n      fps: 12\n    }\n  });\n  const projectiles = [];\n  const blasts = [];\n  const p1 = new Fighter({\n    x: 100,\n    y: HEIGHT - 40 - 256,\n    color: \"#4aa3ff\",\n    keys: P1_KEYS,\n    name: \"P1\",\n    spriteConfig: p1Sprite,\n    ctx,\n    canvasWidth: WIDTH,\n    canvasHeight: HEIGHT,\n    muzzleOffset: {\n      x: 36,\n      y: -48\n    }\n  });\n  const p2 = new Fighter({\n    x: WIDTH - 100 - 256,\n    y: HEIGHT - 40 - 256,\n    color: \"#ff7a7a\",\n    keys: P2_KEYS,\n    name: \"P2\",\n    spriteConfig: p2Sprite,\n    ctx,\n    canvasWidth: WIDTH,\n    canvasHeight: HEIGHT,\n    muzzleOffset: {\n      x: -36,\n      y: -48\n    }\n  });\n  p2.facing = -1;\n\n  // Preload stage background\n  const stageImg = new Image();\n  stageImg.src = \"/qte/background/ninjastage0.png\";\n\n  // Store atlases globally for projectiles/blasts\n  let globalAtlas1 = null;\n  let globalAtlas2 = null;\n\n  // Asynchronously load atlases and patch animators once ready\n  (async () => {\n    try {\n      console.log(\"[qte] Starting atlas load...\");\n      console.log(\"[qte] Loading ninja atlas from /qte/ninja\");\n      console.log(\"[qte] Loading cyboard atlas from /qte/cyboard/atlas2\");\n      const [atlas1, atlas2] = await Promise.all([loadAtlas(\"/qte/ninja\"), loadAtlas(\"/qte/cyboard/atlas2\")]);\n      globalAtlas1 = atlas1;\n      globalAtlas2 = atlas2;\n      console.log(\"[qte] Atlases loaded successfully:\", {\n        ninja: !!atlas1,\n        cyboard: !!atlas2,\n        ninjaAnimations: Object.keys(atlas1.animations),\n        cyboardAnimations: Object.keys(atlas2.animations)\n      });\n\n      // helper to merge atlas into animator\n      const patchAnimator = (anim, atlas) => {\n        // ensure default fallback is atlas image\n        anim.defaultImage = atlas.image;\n        const allStates = Object.keys(anim.animations);\n        for (const state of allStates) {\n          const atlasState = atlas.animations[state];\n          if (!anim.animations[state]) anim.animations[state] = {};\n          const dest = anim.animations[state];\n          if (atlasState) {\n            var _atlas$image, _atlas$image2;\n            const a = atlasState;\n            dest.rects = a.frames;\n            dest.image = atlas.image;\n            dest.src = ((_atlas$image = atlas.image) === null || _atlas$image === void 0 ? void 0 : _atlas$image.src) || dest.src || '';\n            dest.frameW = atlas.frameW;\n            dest.frameH = atlas.frameH;\n            dest.frames = a.frames.length;\n            dest.imageLoaded = true;\n            dest.imageBroken = false;\n            console.log(`[qte] Patched ${state} with ${a.frames.length} atlas frames (image src=${(_atlas$image2 = atlas.image) === null || _atlas$image2 === void 0 ? void 0 : _atlas$image2.src})`);\n          } else {\n            var _atlas$image3;\n            // No atlas frames but still ensure image reference so it's not broken\n            dest.image = atlas.image;\n            dest.src = ((_atlas$image3 = atlas.image) === null || _atlas$image3 === void 0 ? void 0 : _atlas$image3.src) || dest.src || '';\n            dest.imageLoaded = true;\n            dest.imageBroken = false;\n            // keep existing frameW/frameH if present, otherwise use atlas values\n            dest.frameW = dest.frameW || atlas.frameW;\n            dest.frameH = dest.frameH || atlas.frameH;\n            console.log(`[qte] No atlas frames for ${state}, using atlas image fallback`);\n          }\n        }\n      };\n      patchAnimator(p1.anim, atlas1);\n      patchAnimator(p2.anim, atlas2);\n      console.log(\"[qte] atlases loaded and patched successfully\");\n    } catch (e) {\n      // eslint-disable-next-line no-console\n      console.warn(\"[qte] atlas load failed\", e);\n    }\n  })();\n\n  // Asset diagnostics: after a short delay log the loaded/broken state of important images\n  setTimeout(() => {\n    try {\n      // eslint-disable-next-line no-console\n      console.debug(\"[qte] asset diagnostics: checking sprite images\");\n      const dump = (animName, spriteConfig) => {\n        const keys = Object.keys(spriteConfig.animations || {});\n        keys.forEach(k => {\n          const a = spriteConfig.animations[k];\n          // eslint-disable-next-line no-console\n          console.debug(`[qte] sprite ${animName}.${k}`, {\n            src: a.src,\n            frames: a.frames,\n            fps: a.fps,\n            loaded: !!a.imageLoaded,\n            broken: !!a.imageBroken\n          });\n        });\n      };\n      dump(\"p1\", p1Sprite);\n      dump(\"p2\", p2Sprite);\n      // also log projectile/blast constants\n      // eslint-disable-next-line no-console\n      console.debug(\"[qte] constants\", {\n        P1_PROJECTILE_SRC,\n        P2_PROJECTILE_SRC,\n        P1_BLAST_SRC,\n        P2_BLAST_SRC\n      });\n    } catch (e) {\n      // eslint-disable-next-line no-console\n      console.warn(\"[qte] asset diagnostics failed\", e);\n    }\n  }, 500);\n  function framesFromFilename(src, fallback) {\n    try {\n      const m = /_(\\d+)\\.(png|jpg|jpeg|webp)$/i.exec(src);\n      const n = m ? parseInt(m[1], 10) : NaN;\n      return Number.isFinite(n) ? n : fallback;\n    } catch (e) {\n      return fallback;\n    }\n  }\n  let last = performance.now();\n  function loop(now) {\n    const dt = Math.min(0.05, (now - last) / 1000);\n    last = now;\n\n    // merge inputs\n    const gp = readGamepadsUnified(P1_KEYS, P2_KEYS);\n    const mergedInput = {};\n    function getKeyboard(code) {\n      return !!input[code];\n    }\n    [P1_KEYS.left, P1_KEYS.right, P1_KEYS.up, P1_KEYS.down, P1_KEYS.attack, P1_KEYS.parry, P1_KEYS.ranged].forEach(k => {\n      if (k) mergedInput[k] = !!gp[k] || getKeyboard(k);\n    });\n    [P2_KEYS.left, P2_KEYS.right, P2_KEYS.up, P2_KEYS.down, P2_KEYS.attack, P2_KEYS.parry, P2_KEYS.ranged].forEach(k => {\n      if (k) mergedInput[k] = !!gp[k] || getKeyboard(k);\n    });\n\n    // draw background\n    if (stageImg.complete && stageImg.naturalWidth > 0) {\n      ctx.drawImage(stageImg, 0, 0, WIDTH, HEIGHT);\n    } else {\n      ctx.fillStyle = \"#071428\";\n      ctx.fillRect(0, 0, WIDTH, HEIGHT);\n    }\n    ctx.fillStyle = \"#333\";\n    ctx.fillRect(0, HEIGHT - 40, WIDTH, 40);\n\n    // update\n    p1.update(dt, mergedInput, projectiles);\n    p2.update(dt, mergedInput, projectiles);\n    projectiles.forEach(pr => pr.update(dt));\n    blasts.forEach(b => b.update(dt));\n\n    // cleanup\n    for (let i = projectiles.length - 1; i >= 0; i--) if (!projectiles[i].alive) projectiles.splice(i, 1);\n    for (let i = blasts.length - 1; i >= 0; i--) if (!blasts[i].alive) blasts.splice(i, 1);\n\n    // draw\n    p1.draw();\n    p2.draw();\n    projectiles.forEach(pr => pr.draw(ctx));\n    blasts.forEach(b => b.draw(ctx));\n\n    // collisions\n    const h1 = p1.hitbox(),\n      h2 = p2.hitbox();\n    if (h1 && aabb(h1, p2.rect())) {\n      if (p2.parrying && !p2.parryConsumed && p2.parryTimer > p2.parryDurationDefault - p2.parryWindowLength) {\n        p2.parryConsumed = true;\n        p2.parryFreezeTimer = 0.12;\n        p1.stunTimer = 1.0;\n      } else {\n        p2.hp = clamp(p2.hp - 1, 0, 100);\n      }\n    }\n    if (h2 && aabb(h2, p1.rect())) {\n      if (p1.parrying && !p1.parryConsumed && p1.parryTimer > p1.parryDurationDefault - p1.parryWindowLength) {\n        p1.parryConsumed = true;\n        p1.parryFreezeTimer = 0.12;\n        p2.stunTimer = 1.0;\n      } else {\n        p1.hp = clamp(p1.hp - 1, 0, 100);\n      }\n    }\n    for (const pr of projectiles) {\n      if (!pr.alive) continue;\n      if (pr.owner !== p1 && aabb(pr.rect(), p1.rect())) {\n        var _pr$anim$animations$f;\n        p1.hp = clamp(p1.hp - 10, 0, 100);\n        pr.alive = false;\n        // Debug: log hit and blast chosen\n        // eslint-disable-next-line no-console\n        console.debug(\"[qte] projectile hit P1\", {\n          projectileSrc: (_pr$anim$animations$f = pr.anim.animations[\"fly\"]) === null || _pr$anim$animations$f === void 0 ? void 0 : _pr$anim$animations$f.src,\n          blastSrc: P2_BLAST_SRC\n        });\n        // Use atlas for blast if available\n        let blastImage = null;\n        let blastRects = null;\n        let blastFrames = 4;\n        if (globalAtlas2 && globalAtlas2.animations.blast) {\n          blastImage = globalAtlas2.image;\n          blastRects = globalAtlas2.animations.blast.frames;\n          blastFrames = globalAtlas2.animations.blast.frames.length;\n          console.log(`[qte] Blast using atlas frames from cyboard`);\n        } else {\n          console.log(`[qte] Blast: No atlas frames for 'blast' in cyboard, falling back to individual image.`);\n        }\n        blasts.push(new Blast(p1.x + p1.w * 0.5, p1.y + p1.h * 0.5, P2_BLAST_SRC, blastFrames, blastImage, blastRects));\n      }\n      if (pr.owner !== p2 && aabb(pr.rect(), p2.rect())) {\n        var _pr$anim$animations$f2;\n        p2.hp = clamp(p2.hp - 10, 0, 100);\n        pr.alive = false;\n        // Debug: log hit and blast chosen\n        // eslint-disable-next-line no-console\n        console.debug(\"[qte] projectile hit P2\", {\n          projectileSrc: (_pr$anim$animations$f2 = pr.anim.animations[\"fly\"]) === null || _pr$anim$animations$f2 === void 0 ? void 0 : _pr$anim$animations$f2.src,\n          blastSrc: P1_BLAST_SRC\n        });\n        // Use atlas for blast if available\n        let blastImage = null;\n        let blastRects = null;\n        let blastFrames = 4;\n        if (globalAtlas1 && globalAtlas1.animations.blast) {\n          blastImage = globalAtlas1.image;\n          blastRects = globalAtlas1.animations.blast.frames;\n          blastFrames = globalAtlas1.animations.blast.frames.length;\n          console.log(`[qte] Blast using atlas frames from ninja`);\n        } else {\n          console.log(`[qte] Blast: No atlas frames for 'blast' in ninja, falling back to individual image.`);\n        }\n        blasts.push(new Blast(p2.x + p2.w * 0.5, p2.y + p2.h * 0.5, P1_BLAST_SRC, blastFrames, blastImage, blastRects));\n      }\n    }\n\n    // auto-defeat\n    if (p1.hp <= 0 && p1.state !== \"defeat\") {\n      p1.state = \"defeat\";\n      p1.attacking = false;\n      p1.parrying = false;\n      p1.ranging = false;\n      p1.vx = 0;\n      p1.vy = 0;\n      p1.anim.setState(\"defeat\");\n    }\n    if (p2.hp <= 0 && p2.state !== \"defeat\") {\n      p2.state = \"defeat\";\n      p2.attacking = false;\n      p2.parrying = false;\n      p2.ranging = false;\n      p2.vx = 0;\n      p2.vy = 0;\n      p2.anim.setState(\"defeat\");\n    }\n    requestAnimationFrame(loop);\n  }\n  requestAnimationFrame(loop);\n  function aabb(a, b) {\n    return !(a.x + a.w < b.x || b.x + b.w < a.x || a.y + a.h < b.y || b.y + b.h < a.y);\n  }\n  return {\n    ctx,\n    p1,\n    p2\n  };\n}","map":{"version":3,"names":["createKeyboardListener","readGamepadsUnified","P1_KEYS","P2_KEYS","buildSpriteConfig","P1_PROJECTILE_SRC","P2_PROJECTILE_SRC","P1_BLAST_SRC","P2_BLAST_SRC","loadAtlas","Fighter","Blast","getAnimationViewer","createGame","canvas","ctx","getContext","WIDTH","width","HEIGHT","height","console","debug","clamp","v","min","max","input","animationViewerBtn","document","createElement","textContent","style","cssText","onclick","show","body","appendChild","p1Sprite","p2Sprite","idle","src","frames","fps","walk","ranged","parry","blast","projectiles","blasts","p1","x","y","color","keys","name","spriteConfig","canvasWidth","canvasHeight","muzzleOffset","p2","facing","stageImg","Image","globalAtlas1","globalAtlas2","log","atlas1","atlas2","Promise","all","ninja","cyboard","ninjaAnimations","Object","animations","cyboardAnimations","patchAnimator","anim","atlas","defaultImage","image","allStates","state","atlasState","dest","_atlas$image","_atlas$image2","a","rects","frameW","frameH","length","imageLoaded","imageBroken","_atlas$image3","e","warn","setTimeout","dump","animName","forEach","k","loaded","broken","framesFromFilename","fallback","m","exec","n","parseInt","NaN","Number","isFinite","last","performance","now","loop","dt","Math","gp","mergedInput","getKeyboard","code","left","right","up","down","attack","complete","naturalWidth","drawImage","fillStyle","fillRect","update","pr","b","i","alive","splice","draw","h1","hitbox","h2","aabb","rect","parrying","parryConsumed","parryTimer","parryDurationDefault","parryWindowLength","parryFreezeTimer","stunTimer","hp","owner","_pr$anim$animations$f","projectileSrc","blastSrc","blastImage","blastRects","blastFrames","push","w","h","_pr$anim$animations$f2","attacking","ranging","vx","vy","setState","requestAnimationFrame"],"sources":["C:/Users/skank/Videos/Cards/Milchcards/src/qte/gameLoop.ts"],"sourcesContent":["import { createKeyboardListener, readGamepadsUnified, P1_KEYS, P2_KEYS } from \"./input\";\nimport { buildSpriteConfig, P1_PROJECTILE_SRC, P2_PROJECTILE_SRC, P1_BLAST_SRC, P2_BLAST_SRC } from \"./assetRegistry\";\nimport { loadAtlas } from \"./atlasLoader\";\nimport { Fighter, Projectile, Blast } from \"./fighter\";\nimport { getAnimationViewer } from \"./animationViewer\";\n\nexport function createGame(canvas: HTMLCanvasElement) {\n  const ctx = canvas.getContext(\"2d\") as CanvasRenderingContext2D;\n  const WIDTH = canvas.width, HEIGHT = canvas.height;\n  // Debug: log when this module is actually instantiated so we can confirm if the rebuilt module is loaded\n  // Visible in the browser console immediately after page load\n  // eslint-disable-next-line no-console\n  console.debug(\"[qte] createGame initialized\", { WIDTH, HEIGHT });\n\n  function clamp(v: number, min: number, max: number) {\n    return v < min ? min : v > max ? max : v;\n  }\n\n  const input = createKeyboardListener(canvas);\n\n  // Create animation viewer button\n  const animationViewerBtn = document.createElement('button');\n  animationViewerBtn.textContent = 'ðŸŽ¬ View Animations';\n  animationViewerBtn.style.cssText = `\n    position: fixed;\n    top: 10px;\n    right: 10px;\n    z-index: 1000;\n    background: #0066cc;\n    color: white;\n    border: none;\n    border-radius: 4px;\n    padding: 8px 16px;\n    cursor: pointer;\n    font-size: 14px;\n    font-weight: bold;\n    box-shadow: 0 2px 4px rgba(0,0,0,0.3);\n  `;\n  animationViewerBtn.onclick = () => getAnimationViewer().show();\n  document.body.appendChild(animationViewerBtn);\n\n  const p1Sprite = buildSpriteConfig(\"ninja\");\n  const p2Sprite = buildSpriteConfig(\"cyboard\", {\n    idle: { src: \"cyboard/idle_256x256_4.png\", frames: 4, fps: 6 },\n    walk: { src: \"cyboard/walk_256x256_4.png\", frames: 4, fps: 10 },\n    ranged: { src: \"cyboard/ranged_256x256_4.png\", frames: 4, fps: 12 },\n    parry: { src: \"cyboard/parry_256x256_4.png\", frames: 4, fps: 10 },\n    blast: { src: \"cyboard/blast_256x256_4.png\", frames: 4, fps: 12 },\n  });\n\n  const projectiles: Projectile[] = [];\n  const blasts: Blast[] = [];\n\n  const p1 = new Fighter({ x: 100, y: HEIGHT - 40 - 256, color: \"#4aa3ff\", keys: P1_KEYS as any, name: \"P1\", spriteConfig: p1Sprite, ctx, canvasWidth: WIDTH, canvasHeight: HEIGHT, muzzleOffset: { x: 36, y: -48 } });\n  const p2 = new Fighter({ x: WIDTH - 100 - 256, y: HEIGHT - 40 - 256, color: \"#ff7a7a\", keys: P2_KEYS as any, name: \"P2\", spriteConfig: p2Sprite, ctx, canvasWidth: WIDTH, canvasHeight: HEIGHT, muzzleOffset: { x: -36, y: -48 } });\n  p2.facing = -1;\n\n  // Preload stage background\n  const stageImg = new Image();\n  stageImg.src = \"/qte/background/ninjastage0.png\";\n\n  // Store atlases globally for projectiles/blasts\n  let globalAtlas1: any = null;\n  let globalAtlas2: any = null;\n\n  // Asynchronously load atlases and patch animators once ready\n  (async () => {\n    try {\n      console.log(\"[qte] Starting atlas load...\");\n      console.log(\"[qte] Loading ninja atlas from /qte/ninja\");\n      console.log(\"[qte] Loading cyboard atlas from /qte/cyboard/atlas2\");\n      const [atlas1, atlas2] = await Promise.all([\n        loadAtlas(\"/qte/ninja\"),\n        loadAtlas(\"/qte/cyboard/atlas2\"),\n      ]);\n\n      globalAtlas1 = atlas1;\n      globalAtlas2 = atlas2;\n      console.log(\"[qte] Atlases loaded successfully:\", {\n        ninja: !!atlas1,\n        cyboard: !!atlas2,\n        ninjaAnimations: Object.keys(atlas1.animations),\n        cyboardAnimations: Object.keys(atlas2.animations)\n      });\n\n      // helper to merge atlas into animator\n      const patchAnimator = (anim: any, atlas: any) => {\n        // ensure default fallback is atlas image\n        anim.defaultImage = atlas.image;\n        const allStates = Object.keys(anim.animations);\n        for (const state of allStates) {\n          const atlasState = atlas.animations[state];\n          if (!anim.animations[state]) anim.animations[state] = {} as any;\n          const dest = anim.animations[state];\n          if (atlasState) {\n            const a = atlasState;\n            dest.rects = a.frames;\n            dest.image = atlas.image;\n            dest.src = atlas.image?.src || dest.src || '';\n            dest.frameW = atlas.frameW;\n            dest.frameH = atlas.frameH;\n            dest.frames = a.frames.length;\n            (dest as any).imageLoaded = true;\n            (dest as any).imageBroken = false;\n            console.log(`[qte] Patched ${state} with ${a.frames.length} atlas frames (image src=${atlas.image?.src})`);\n          } else {\n            // No atlas frames but still ensure image reference so it's not broken\n            dest.image = atlas.image;\n            dest.src = atlas.image?.src || dest.src || '';\n            (dest as any).imageLoaded = true;\n            (dest as any).imageBroken = false;\n            // keep existing frameW/frameH if present, otherwise use atlas values\n            dest.frameW = dest.frameW || atlas.frameW;\n            dest.frameH = dest.frameH || atlas.frameH;\n            console.log(`[qte] No atlas frames for ${state}, using atlas image fallback`);\n          }\n        }\n      };\n      patchAnimator(p1.anim, atlas1);\n      patchAnimator(p2.anim, atlas2);\n      console.log(\"[qte] atlases loaded and patched successfully\");\n    } catch (e) {\n      // eslint-disable-next-line no-console\n      console.warn(\"[qte] atlas load failed\", e);\n    }\n  })();\n\n  // Asset diagnostics: after a short delay log the loaded/broken state of important images\n  setTimeout(() => {\n    try {\n      // eslint-disable-next-line no-console\n      console.debug(\"[qte] asset diagnostics: checking sprite images\");\n      const dump = (animName: string, spriteConfig: any) => {\n        const keys = Object.keys(spriteConfig.animations || {});\n        keys.forEach((k) => {\n          const a = spriteConfig.animations[k];\n          // eslint-disable-next-line no-console\n          console.debug(`[qte] sprite ${animName}.${k}`, { src: a.src, frames: a.frames, fps: a.fps, loaded: !!a.imageLoaded, broken: !!a.imageBroken });\n        });\n      };\n      dump(\"p1\", p1Sprite);\n      dump(\"p2\", p2Sprite);\n      // also log projectile/blast constants\n      // eslint-disable-next-line no-console\n      console.debug(\"[qte] constants\", { P1_PROJECTILE_SRC, P2_PROJECTILE_SRC, P1_BLAST_SRC, P2_BLAST_SRC });\n    } catch (e) {\n      // eslint-disable-next-line no-console\n      console.warn(\"[qte] asset diagnostics failed\", e);\n    }\n  }, 500);\n\n  function framesFromFilename(src: string, fallback: number) {\n    try {\n      const m = /_(\\d+)\\.(png|jpg|jpeg|webp)$/i.exec(src);\n      const n = m ? parseInt(m[1], 10) : NaN;\n      return Number.isFinite(n) ? n : fallback;\n    } catch (e) {\n      return fallback;\n    }\n  }\n\n  let last = performance.now();\n  function loop(now: number) {\n    const dt = Math.min(0.05, (now - last) / 1000);\n    last = now;\n\n    // merge inputs\n    const gp = readGamepadsUnified(P1_KEYS as any, P2_KEYS as any);\n    const mergedInput: Record<string, boolean> = {};\n    function getKeyboard(code: string) {\n      return !!input[code];\n    }\n    [P1_KEYS.left, P1_KEYS.right, P1_KEYS.up, P1_KEYS.down, P1_KEYS.attack, P1_KEYS.parry, P1_KEYS.ranged].forEach((k) => {\n      if (k) mergedInput[k] = !!gp[k] || getKeyboard(k);\n    });\n    [P2_KEYS.left, P2_KEYS.right, P2_KEYS.up, P2_KEYS.down, P2_KEYS.attack, P2_KEYS.parry, P2_KEYS.ranged].forEach((k) => {\n      if (k) mergedInput[k] = !!gp[k] || getKeyboard(k);\n    });\n\n    // draw background\n    if (stageImg.complete && stageImg.naturalWidth > 0) {\n      ctx.drawImage(stageImg, 0, 0, WIDTH, HEIGHT);\n    } else {\n      ctx.fillStyle = \"#071428\";\n      ctx.fillRect(0, 0, WIDTH, HEIGHT);\n    }\n    ctx.fillStyle = \"#333\";\n    ctx.fillRect(0, HEIGHT - 40, WIDTH, 40);\n\n    // update\n    p1.update(dt, mergedInput, projectiles);\n    p2.update(dt, mergedInput, projectiles);\n\n    projectiles.forEach((pr) => pr.update(dt));\n    blasts.forEach((b) => b.update(dt));\n\n    // cleanup\n    for (let i = projectiles.length - 1; i >= 0; i--) if (!projectiles[i].alive) projectiles.splice(i, 1);\n    for (let i = blasts.length - 1; i >= 0; i--) if (!blasts[i].alive) blasts.splice(i, 1);\n\n    // draw\n    p1.draw();\n    p2.draw();\n    projectiles.forEach((pr) => pr.draw(ctx));\n    blasts.forEach((b) => b.draw(ctx));\n\n    // collisions\n    const h1 = p1.hitbox(), h2 = p2.hitbox();\n    if (h1 && aabb(h1, p2.rect())) {\n      if (p2.parrying && !p2.parryConsumed && p2.parryTimer > p2.parryDurationDefault - p2.parryWindowLength) {\n        p2.parryConsumed = true;\n        p2.parryFreezeTimer = 0.12;\n        p1.stunTimer = 1.0;\n      } else {\n        p2.hp = clamp(p2.hp - 1, 0, 100);\n      }\n    }\n    if (h2 && aabb(h2, p1.rect())) {\n      if (p1.parrying && !p1.parryConsumed && p1.parryTimer > p1.parryDurationDefault - p1.parryWindowLength) {\n        p1.parryConsumed = true;\n        p1.parryFreezeTimer = 0.12;\n        p2.stunTimer = 1.0;\n      } else {\n        p1.hp = clamp(p1.hp - 1, 0, 100);\n      }\n    }\n\n    for (const pr of projectiles) {\n      if (!pr.alive) continue;\n      if (pr.owner !== p1 && aabb(pr.rect(), p1.rect())) {\n        p1.hp = clamp(p1.hp - 10, 0, 100);\n        pr.alive = false;\n        // Debug: log hit and blast chosen\n        // eslint-disable-next-line no-console\n        console.debug(\"[qte] projectile hit P1\", { projectileSrc: pr.anim.animations[\"fly\"]?.src, blastSrc: P2_BLAST_SRC });\n        // Use atlas for blast if available\n        let blastImage = null;\n        let blastRects = null;\n        let blastFrames = 4;\n\n        if (globalAtlas2 && globalAtlas2.animations.blast) {\n          blastImage = globalAtlas2.image;\n          blastRects = globalAtlas2.animations.blast.frames;\n          blastFrames = globalAtlas2.animations.blast.frames.length;\n          console.log(`[qte] Blast using atlas frames from cyboard`);\n        } else {\n          console.log(`[qte] Blast: No atlas frames for 'blast' in cyboard, falling back to individual image.`);\n        }\n\n        blasts.push(new Blast(p1.x + p1.w * 0.5, p1.y + p1.h * 0.5, P2_BLAST_SRC, blastFrames, blastImage, blastRects));\n      }\n      if (pr.owner !== p2 && aabb(pr.rect(), p2.rect())) {\n        p2.hp = clamp(p2.hp - 10, 0, 100);\n        pr.alive = false;\n        // Debug: log hit and blast chosen\n        // eslint-disable-next-line no-console\n        console.debug(\"[qte] projectile hit P2\", { projectileSrc: pr.anim.animations[\"fly\"]?.src, blastSrc: P1_BLAST_SRC });\n        // Use atlas for blast if available\n        let blastImage = null;\n        let blastRects = null;\n        let blastFrames = 4;\n\n        if (globalAtlas1 && globalAtlas1.animations.blast) {\n          blastImage = globalAtlas1.image;\n          blastRects = globalAtlas1.animations.blast.frames;\n          blastFrames = globalAtlas1.animations.blast.frames.length;\n          console.log(`[qte] Blast using atlas frames from ninja`);\n        } else {\n          console.log(`[qte] Blast: No atlas frames for 'blast' in ninja, falling back to individual image.`);\n        }\n\n        blasts.push(new Blast(p2.x + p2.w * 0.5, p2.y + p2.h * 0.5, P1_BLAST_SRC, blastFrames, blastImage, blastRects));\n      }\n    }\n\n    // auto-defeat\n    if (p1.hp <= 0 && p1.state !== \"defeat\") {\n      p1.state = \"defeat\";\n      p1.attacking = false;\n      p1.parrying = false;\n      p1.ranging = false;\n      p1.vx = 0;\n      p1.vy = 0;\n      p1.anim.setState(\"defeat\");\n    }\n    if (p2.hp <= 0 && p2.state !== \"defeat\") {\n      p2.state = \"defeat\";\n      p2.attacking = false;\n      p2.parrying = false;\n      p2.ranging = false;\n      p2.vx = 0;\n      p2.vy = 0;\n      p2.anim.setState(\"defeat\");\n    }\n\n    requestAnimationFrame(loop);\n  }\n\n  requestAnimationFrame(loop);\n\n  function aabb(a: { x: number; y: number; w: number; h: number }, b: { x: number; y: number; w: number; h: number }) {\n    return !(a.x + a.w < b.x || b.x + b.w < a.x || a.y + a.h < b.y || b.y + b.h < a.y);\n  }\n\n  return { ctx, p1, p2 };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}