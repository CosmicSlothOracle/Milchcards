{"ast":null,"code":"import { createKeyboardListener, readGamepadsUnified, P1_KEYS, P2_KEYS } from \"./input\";\nimport { buildSpriteConfig, P1_PROJECTILE_SRC, P2_PROJECTILE_SRC, P1_BLAST_SRC, P2_BLAST_SRC } from \"./assetRegistry\";\nimport { loadAtlas } from \"./atlasLoader\";\nimport { Fighter, Blast } from \"./fighter\";\nexport function createGame(canvas) {\n  const ctx = canvas.getContext(\"2d\");\n  const WIDTH = canvas.width,\n    HEIGHT = canvas.height;\n  // Debug: log when this module is actually instantiated so we can confirm if the rebuilt module is loaded\n  // Visible in the browser console immediately after page load\n  // eslint-disable-next-line no-console\n  console.debug(\"[qte] createGame initialized\", {\n    WIDTH,\n    HEIGHT\n  });\n  function clamp(v, min, max) {\n    return v < min ? min : v > max ? max : v;\n  }\n  const input = createKeyboardListener(canvas);\n  const p1Sprite = buildSpriteConfig(\"ninja\");\n  const p2Sprite = buildSpriteConfig(\"cyboard\", {\n    idle: {\n      src: \"cyboard/idle_256x256_4.png\",\n      frames: 4,\n      fps: 6\n    },\n    walk: {\n      src: \"cyboard/walk_256x256_4.png\",\n      frames: 4,\n      fps: 10\n    },\n    ranged: {\n      src: \"cyboard/ranged_256x256_4.png\",\n      frames: 4,\n      fps: 12\n    },\n    parry: {\n      src: \"cyboard/parry_256x256_4.png\",\n      frames: 4,\n      fps: 10\n    },\n    blast: {\n      src: \"cyboard/blast_256x256_4.png\",\n      frames: 4,\n      fps: 12\n    }\n  });\n  const projectiles = [];\n  const blasts = [];\n  const p1 = new Fighter({\n    x: 100,\n    y: HEIGHT - 40 - 256,\n    color: \"#4aa3ff\",\n    keys: P1_KEYS,\n    name: \"P1\",\n    spriteConfig: p1Sprite,\n    ctx,\n    canvasWidth: WIDTH,\n    canvasHeight: HEIGHT,\n    muzzleOffset: {\n      x: 36,\n      y: -48\n    }\n  });\n  const p2 = new Fighter({\n    x: WIDTH - 100 - 256,\n    y: HEIGHT - 40 - 256,\n    color: \"#ff7a7a\",\n    keys: P2_KEYS,\n    name: \"P2\",\n    spriteConfig: p2Sprite,\n    ctx,\n    canvasWidth: WIDTH,\n    canvasHeight: HEIGHT,\n    muzzleOffset: {\n      x: -36,\n      y: -48\n    }\n  });\n  p2.facing = -1;\n\n  // Asynchronously load atlases and patch animators once ready\n  (async () => {\n    try {\n      const [atlas1, atlas2] = await Promise.all([loadAtlas(\"/qte/ninja\"), loadAtlas(\"/qte/cyboard\")]);\n      // helper to merge atlas into animator\n      const patchAnimator = (anim, atlas) => {\n        anim.defaultImage = atlas.image;\n        for (const state of Object.keys(atlas.animations)) {\n          const a = atlas.animations[state];\n          if (!anim.animations[state]) anim.animations[state] = {\n            frameW: atlas.frameW,\n            frameH: atlas.frameH,\n            frames: a.frames.length,\n            fps: a.fps,\n            loop: a.loop,\n            rects: a.frames,\n            image: atlas.image\n          };else {\n            anim.animations[state].rects = a.frames;\n            anim.animations[state].image = atlas.image;\n            anim.animations[state].frameW = atlas.frameW;\n            anim.animations[state].frameH = atlas.frameH;\n            anim.animations[state].frames = a.frames.length;\n          }\n        }\n      };\n      patchAnimator(p1.anim, atlas1);\n      patchAnimator(p2.anim, atlas2);\n    } catch (e) {\n      // eslint-disable-next-line no-console\n      console.warn(\"[qte] atlas load failed\", e);\n    }\n  })();\n\n  // Asset diagnostics: after a short delay log the loaded/broken state of important images\n  setTimeout(() => {\n    try {\n      // eslint-disable-next-line no-console\n      console.debug(\"[qte] asset diagnostics: checking sprite images\");\n      const dump = (animName, spriteConfig) => {\n        const keys = Object.keys(spriteConfig.animations || {});\n        keys.forEach(k => {\n          const a = spriteConfig.animations[k];\n          // eslint-disable-next-line no-console\n          console.debug(`[qte] sprite ${animName}.${k}`, {\n            src: a.src,\n            frames: a.frames,\n            fps: a.fps,\n            loaded: !!a.imageLoaded,\n            broken: !!a.imageBroken\n          });\n        });\n      };\n      dump(\"p1\", p1Sprite);\n      dump(\"p2\", p2Sprite);\n      // also log projectile/blast constants\n      // eslint-disable-next-line no-console\n      console.debug(\"[qte] constants\", {\n        P1_PROJECTILE_SRC,\n        P2_PROJECTILE_SRC,\n        P1_BLAST_SRC,\n        P2_BLAST_SRC\n      });\n    } catch (e) {\n      // eslint-disable-next-line no-console\n      console.warn(\"[qte] asset diagnostics failed\", e);\n    }\n  }, 500);\n  function framesFromFilename(src, fallback) {\n    try {\n      const m = /_(\\d+)\\.(png|jpg|jpeg|webp)$/i.exec(src);\n      const n = m ? parseInt(m[1], 10) : NaN;\n      return Number.isFinite(n) ? n : fallback;\n    } catch (e) {\n      return fallback;\n    }\n  }\n  let last = performance.now();\n  function loop(now) {\n    const dt = Math.min(0.05, (now - last) / 1000);\n    last = now;\n\n    // merge inputs\n    const gp = readGamepadsUnified(P1_KEYS, P2_KEYS);\n    const mergedInput = {};\n    function getKeyboard(code) {\n      return !!input[code];\n    }\n    [P1_KEYS.left, P1_KEYS.right, P1_KEYS.up, P1_KEYS.down, P1_KEYS.attack, P1_KEYS.parry, P1_KEYS.ranged].forEach(k => {\n      if (k) mergedInput[k] = !!gp[k] || getKeyboard(k);\n    });\n    [P2_KEYS.left, P2_KEYS.right, P2_KEYS.up, P2_KEYS.down, P2_KEYS.attack, P2_KEYS.parry, P2_KEYS.ranged].forEach(k => {\n      if (k) mergedInput[k] = !!gp[k] || getKeyboard(k);\n    });\n\n    // draw background\n    ctx.fillStyle = \"#071428\";\n    ctx.fillRect(0, 0, WIDTH, HEIGHT);\n    ctx.fillStyle = \"#333\";\n    ctx.fillRect(0, HEIGHT - 40, WIDTH, 40);\n\n    // update\n    p1.update(dt, mergedInput, projectiles);\n    p2.update(dt, mergedInput, projectiles);\n    projectiles.forEach(pr => pr.update(dt));\n    blasts.forEach(b => b.update(dt));\n\n    // cleanup\n    for (let i = projectiles.length - 1; i >= 0; i--) if (!projectiles[i].alive) projectiles.splice(i, 1);\n    for (let i = blasts.length - 1; i >= 0; i--) if (!blasts[i].alive) blasts.splice(i, 1);\n\n    // draw\n    p1.draw();\n    p2.draw();\n    projectiles.forEach(pr => pr.draw(ctx));\n    blasts.forEach(b => b.draw(ctx));\n\n    // collisions\n    const h1 = p1.hitbox(),\n      h2 = p2.hitbox();\n    if (h1 && aabb(h1, p2.rect())) {\n      if (p2.parrying && !p2.parryConsumed && p2.parryTimer > p2.parryDurationDefault - p2.parryWindowLength) {\n        p2.parryConsumed = true;\n        p2.parryFreezeTimer = 0.12;\n        p1.stunTimer = 1.0;\n      } else {\n        p2.hp = clamp(p2.hp - 1, 0, 100);\n      }\n    }\n    if (h2 && aabb(h2, p1.rect())) {\n      if (p1.parrying && !p1.parryConsumed && p1.parryTimer > p1.parryDurationDefault - p1.parryWindowLength) {\n        p1.parryConsumed = true;\n        p1.parryFreezeTimer = 0.12;\n        p2.stunTimer = 1.0;\n      } else {\n        p1.hp = clamp(p1.hp - 1, 0, 100);\n      }\n    }\n    for (const pr of projectiles) {\n      if (!pr.alive) continue;\n      if (pr.owner !== p1 && aabb(pr.rect(), p1.rect())) {\n        var _pr$anim$animations$f;\n        p1.hp = clamp(p1.hp - 10, 0, 100);\n        pr.alive = false;\n        // Debug: log hit and blast chosen\n        // eslint-disable-next-line no-console\n        console.debug(\"[qte] projectile hit P1\", {\n          projectileSrc: (_pr$anim$animations$f = pr.anim.animations[\"fly\"]) === null || _pr$anim$animations$f === void 0 ? void 0 : _pr$anim$animations$f.src,\n          blastSrc: P2_BLAST_SRC\n        });\n        blasts.push(new Blast(p1.x + p1.w * 0.5, p1.y + p1.h * 0.5, P2_BLAST_SRC, 4));\n      }\n      if (pr.owner !== p2 && aabb(pr.rect(), p2.rect())) {\n        var _pr$anim$animations$f2;\n        p2.hp = clamp(p2.hp - 10, 0, 100);\n        pr.alive = false;\n        // Debug: log hit and blast chosen\n        // eslint-disable-next-line no-console\n        console.debug(\"[qte] projectile hit P2\", {\n          projectileSrc: (_pr$anim$animations$f2 = pr.anim.animations[\"fly\"]) === null || _pr$anim$animations$f2 === void 0 ? void 0 : _pr$anim$animations$f2.src,\n          blastSrc: P1_BLAST_SRC\n        });\n        blasts.push(new Blast(p2.x + p2.w * 0.5, p2.y + p2.h * 0.5, P1_BLAST_SRC, 4));\n      }\n    }\n\n    // auto-defeat\n    if (p1.hp <= 0 && p1.state !== \"defeat\") {\n      p1.state = \"defeat\";\n      p1.attacking = false;\n      p1.parrying = false;\n      p1.ranging = false;\n      p1.vx = 0;\n      p1.vy = 0;\n      p1.anim.setState(\"defeat\");\n    }\n    if (p2.hp <= 0 && p2.state !== \"defeat\") {\n      p2.state = \"defeat\";\n      p2.attacking = false;\n      p2.parrying = false;\n      p2.ranging = false;\n      p2.vx = 0;\n      p2.vy = 0;\n      p2.anim.setState(\"defeat\");\n    }\n    requestAnimationFrame(loop);\n  }\n  requestAnimationFrame(loop);\n  function aabb(a, b) {\n    return !(a.x + a.w < b.x || b.x + b.w < a.x || a.y + a.h < b.y || b.y + b.h < a.y);\n  }\n  return {\n    ctx,\n    p1,\n    p2\n  };\n}","map":{"version":3,"names":["createKeyboardListener","readGamepadsUnified","P1_KEYS","P2_KEYS","buildSpriteConfig","P1_PROJECTILE_SRC","P2_PROJECTILE_SRC","P1_BLAST_SRC","P2_BLAST_SRC","loadAtlas","Fighter","Blast","createGame","canvas","ctx","getContext","WIDTH","width","HEIGHT","height","console","debug","clamp","v","min","max","input","p1Sprite","p2Sprite","idle","src","frames","fps","walk","ranged","parry","blast","projectiles","blasts","p1","x","y","color","keys","name","spriteConfig","canvasWidth","canvasHeight","muzzleOffset","p2","facing","atlas1","atlas2","Promise","all","patchAnimator","anim","atlas","defaultImage","image","state","Object","animations","a","frameW","frameH","length","loop","rects","e","warn","setTimeout","dump","animName","forEach","k","loaded","imageLoaded","broken","imageBroken","framesFromFilename","fallback","m","exec","n","parseInt","NaN","Number","isFinite","last","performance","now","dt","Math","gp","mergedInput","getKeyboard","code","left","right","up","down","attack","fillStyle","fillRect","update","pr","b","i","alive","splice","draw","h1","hitbox","h2","aabb","rect","parrying","parryConsumed","parryTimer","parryDurationDefault","parryWindowLength","parryFreezeTimer","stunTimer","hp","owner","_pr$anim$animations$f","projectileSrc","blastSrc","push","w","h","_pr$anim$animations$f2","attacking","ranging","vx","vy","setState","requestAnimationFrame"],"sources":["C:/Users/skank/Videos/Cards/Milchcards/src/qte/gameLoop.ts"],"sourcesContent":["import { createKeyboardListener, readGamepadsUnified, P1_KEYS, P2_KEYS } from \"./input\";\r\nimport { buildSpriteConfig, P1_PROJECTILE_SRC, P2_PROJECTILE_SRC, P1_BLAST_SRC, P2_BLAST_SRC } from \"./assetRegistry\";\r\nimport { loadAtlas } from \"./atlasLoader\";\r\nimport { Fighter, Projectile, Blast } from \"./fighter\";\r\n\r\nexport function createGame(canvas: HTMLCanvasElement) {\r\n  const ctx = canvas.getContext(\"2d\") as CanvasRenderingContext2D;\r\n  const WIDTH = canvas.width, HEIGHT = canvas.height;\r\n  // Debug: log when this module is actually instantiated so we can confirm if the rebuilt module is loaded\r\n  // Visible in the browser console immediately after page load\r\n  // eslint-disable-next-line no-console\r\n  console.debug(\"[qte] createGame initialized\", { WIDTH, HEIGHT });\r\n\r\n  function clamp(v: number, min: number, max: number) {\r\n    return v < min ? min : v > max ? max : v;\r\n  }\r\n\r\n  const input = createKeyboardListener(canvas);\r\n\r\n  const p1Sprite = buildSpriteConfig(\"ninja\");\r\n  const p2Sprite = buildSpriteConfig(\"cyboard\", {\r\n    idle: { src: \"cyboard/idle_256x256_4.png\", frames: 4, fps: 6 },\r\n    walk: { src: \"cyboard/walk_256x256_4.png\", frames: 4, fps: 10 },\r\n    ranged: { src: \"cyboard/ranged_256x256_4.png\", frames: 4, fps: 12 },\r\n    parry: { src: \"cyboard/parry_256x256_4.png\", frames: 4, fps: 10 },\r\n    blast: { src: \"cyboard/blast_256x256_4.png\", frames: 4, fps: 12 },\r\n  });\r\n\r\n  const projectiles: Projectile[] = [];\r\n  const blasts: Blast[] = [];\r\n\r\n  const p1 = new Fighter({ x: 100, y: HEIGHT - 40 - 256, color: \"#4aa3ff\", keys: P1_KEYS as any, name: \"P1\", spriteConfig: p1Sprite, ctx, canvasWidth: WIDTH, canvasHeight: HEIGHT, muzzleOffset: { x: 36, y: -48 } });\r\n  const p2 = new Fighter({ x: WIDTH - 100 - 256, y: HEIGHT - 40 - 256, color: \"#ff7a7a\", keys: P2_KEYS as any, name: \"P2\", spriteConfig: p2Sprite, ctx, canvasWidth: WIDTH, canvasHeight: HEIGHT, muzzleOffset: { x: -36, y: -48 } });\r\n  p2.facing = -1;\r\n\r\n  // Asynchronously load atlases and patch animators once ready\r\n  (async () => {\r\n    try {\r\n      const [atlas1, atlas2] = await Promise.all([\r\n        loadAtlas(\"/qte/ninja\"),\r\n        loadAtlas(\"/qte/cyboard\"),\r\n      ]);\r\n      // helper to merge atlas into animator\r\n      const patchAnimator = (anim: any, atlas: any) => {\r\n        anim.defaultImage = atlas.image;\r\n        for (const state of Object.keys(atlas.animations)) {\r\n          const a = atlas.animations[state];\r\n          if (!anim.animations[state]) anim.animations[state] = { frameW: atlas.frameW, frameH: atlas.frameH, frames: a.frames.length, fps: a.fps, loop: a.loop, rects: a.frames, image: atlas.image } as any;\r\n          else {\r\n            anim.animations[state].rects = a.frames;\r\n            anim.animations[state].image = atlas.image;\r\n            anim.animations[state].frameW = atlas.frameW;\r\n            anim.animations[state].frameH = atlas.frameH;\r\n            anim.animations[state].frames = a.frames.length;\r\n          }\r\n        }\r\n      };\r\n      patchAnimator(p1.anim, atlas1);\r\n      patchAnimator(p2.anim, atlas2);\r\n    } catch (e) {\r\n      // eslint-disable-next-line no-console\r\n      console.warn(\"[qte] atlas load failed\", e);\r\n    }\r\n  })();\r\n\r\n  // Asset diagnostics: after a short delay log the loaded/broken state of important images\r\n  setTimeout(() => {\r\n    try {\r\n      // eslint-disable-next-line no-console\r\n      console.debug(\"[qte] asset diagnostics: checking sprite images\");\r\n      const dump = (animName: string, spriteConfig: any) => {\r\n        const keys = Object.keys(spriteConfig.animations || {});\r\n        keys.forEach((k) => {\r\n          const a = spriteConfig.animations[k];\r\n          // eslint-disable-next-line no-console\r\n          console.debug(`[qte] sprite ${animName}.${k}`, { src: a.src, frames: a.frames, fps: a.fps, loaded: !!a.imageLoaded, broken: !!a.imageBroken });\r\n        });\r\n      };\r\n      dump(\"p1\", p1Sprite);\r\n      dump(\"p2\", p2Sprite);\r\n      // also log projectile/blast constants\r\n      // eslint-disable-next-line no-console\r\n      console.debug(\"[qte] constants\", { P1_PROJECTILE_SRC, P2_PROJECTILE_SRC, P1_BLAST_SRC, P2_BLAST_SRC });\r\n    } catch (e) {\r\n      // eslint-disable-next-line no-console\r\n      console.warn(\"[qte] asset diagnostics failed\", e);\r\n    }\r\n  }, 500);\r\n\r\n  function framesFromFilename(src: string, fallback: number) {\r\n    try {\r\n      const m = /_(\\d+)\\.(png|jpg|jpeg|webp)$/i.exec(src);\r\n      const n = m ? parseInt(m[1], 10) : NaN;\r\n      return Number.isFinite(n) ? n : fallback;\r\n    } catch (e) {\r\n      return fallback;\r\n    }\r\n  }\r\n\r\n  let last = performance.now();\r\n  function loop(now: number) {\r\n    const dt = Math.min(0.05, (now - last) / 1000);\r\n    last = now;\r\n\r\n    // merge inputs\r\n    const gp = readGamepadsUnified(P1_KEYS as any, P2_KEYS as any);\r\n    const mergedInput: Record<string, boolean> = {};\r\n    function getKeyboard(code: string) {\r\n      return !!input[code];\r\n    }\r\n    [P1_KEYS.left, P1_KEYS.right, P1_KEYS.up, P1_KEYS.down, P1_KEYS.attack, P1_KEYS.parry, P1_KEYS.ranged].forEach((k) => {\r\n      if (k) mergedInput[k] = !!gp[k] || getKeyboard(k);\r\n    });\r\n    [P2_KEYS.left, P2_KEYS.right, P2_KEYS.up, P2_KEYS.down, P2_KEYS.attack, P2_KEYS.parry, P2_KEYS.ranged].forEach((k) => {\r\n      if (k) mergedInput[k] = !!gp[k] || getKeyboard(k);\r\n    });\r\n\r\n    // draw background\r\n    ctx.fillStyle = \"#071428\";\r\n    ctx.fillRect(0, 0, WIDTH, HEIGHT);\r\n    ctx.fillStyle = \"#333\";\r\n    ctx.fillRect(0, HEIGHT - 40, WIDTH, 40);\r\n\r\n    // update\r\n    p1.update(dt, mergedInput, projectiles);\r\n    p2.update(dt, mergedInput, projectiles);\r\n\r\n    projectiles.forEach((pr) => pr.update(dt));\r\n    blasts.forEach((b) => b.update(dt));\r\n\r\n    // cleanup\r\n    for (let i = projectiles.length - 1; i >= 0; i--) if (!projectiles[i].alive) projectiles.splice(i, 1);\r\n    for (let i = blasts.length - 1; i >= 0; i--) if (!blasts[i].alive) blasts.splice(i, 1);\r\n\r\n    // draw\r\n    p1.draw();\r\n    p2.draw();\r\n    projectiles.forEach((pr) => pr.draw(ctx));\r\n    blasts.forEach((b) => b.draw(ctx));\r\n\r\n    // collisions\r\n    const h1 = p1.hitbox(), h2 = p2.hitbox();\r\n    if (h1 && aabb(h1, p2.rect())) {\r\n      if (p2.parrying && !p2.parryConsumed && p2.parryTimer > p2.parryDurationDefault - p2.parryWindowLength) {\r\n        p2.parryConsumed = true;\r\n        p2.parryFreezeTimer = 0.12;\r\n        p1.stunTimer = 1.0;\r\n      } else {\r\n        p2.hp = clamp(p2.hp - 1, 0, 100);\r\n      }\r\n    }\r\n    if (h2 && aabb(h2, p1.rect())) {\r\n      if (p1.parrying && !p1.parryConsumed && p1.parryTimer > p1.parryDurationDefault - p1.parryWindowLength) {\r\n        p1.parryConsumed = true;\r\n        p1.parryFreezeTimer = 0.12;\r\n        p2.stunTimer = 1.0;\r\n      } else {\r\n        p1.hp = clamp(p1.hp - 1, 0, 100);\r\n      }\r\n    }\r\n\r\n    for (const pr of projectiles) {\r\n      if (!pr.alive) continue;\r\n      if (pr.owner !== p1 && aabb(pr.rect(), p1.rect())) {\r\n        p1.hp = clamp(p1.hp - 10, 0, 100);\r\n        pr.alive = false;\r\n        // Debug: log hit and blast chosen\r\n        // eslint-disable-next-line no-console\r\n        console.debug(\"[qte] projectile hit P1\", { projectileSrc: pr.anim.animations[\"fly\"]?.src, blastSrc: P2_BLAST_SRC });\r\n        blasts.push(new Blast(p1.x + p1.w * 0.5, p1.y + p1.h * 0.5, P2_BLAST_SRC, 4));\r\n      }\r\n      if (pr.owner !== p2 && aabb(pr.rect(), p2.rect())) {\r\n        p2.hp = clamp(p2.hp - 10, 0, 100);\r\n        pr.alive = false;\r\n        // Debug: log hit and blast chosen\r\n        // eslint-disable-next-line no-console\r\n        console.debug(\"[qte] projectile hit P2\", { projectileSrc: pr.anim.animations[\"fly\"]?.src, blastSrc: P1_BLAST_SRC });\r\n        blasts.push(new Blast(p2.x + p2.w * 0.5, p2.y + p2.h * 0.5, P1_BLAST_SRC, 4));\r\n      }\r\n    }\r\n\r\n    // auto-defeat\r\n    if (p1.hp <= 0 && p1.state !== \"defeat\") {\r\n      p1.state = \"defeat\";\r\n      p1.attacking = false;\r\n      p1.parrying = false;\r\n      p1.ranging = false;\r\n      p1.vx = 0;\r\n      p1.vy = 0;\r\n      p1.anim.setState(\"defeat\");\r\n    }\r\n    if (p2.hp <= 0 && p2.state !== \"defeat\") {\r\n      p2.state = \"defeat\";\r\n      p2.attacking = false;\r\n      p2.parrying = false;\r\n      p2.ranging = false;\r\n      p2.vx = 0;\r\n      p2.vy = 0;\r\n      p2.anim.setState(\"defeat\");\r\n    }\r\n\r\n    requestAnimationFrame(loop);\r\n  }\r\n\r\n  requestAnimationFrame(loop);\r\n\r\n  function aabb(a: { x: number; y: number; w: number; h: number }, b: { x: number; y: number; w: number; h: number }) {\r\n    return !(a.x + a.w < b.x || b.x + b.w < a.x || a.y + a.h < b.y || b.y + b.h < a.y);\r\n  }\r\n\r\n  return { ctx, p1, p2 };\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}