{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\skank\\\\Videos\\\\Cards\\\\Milchcards\\\\src\\\\components\\\\Dice3D.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useImperativeHandle, forwardRef } from 'react';\nimport * as THREE from 'three';\nimport { gsap } from 'gsap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n/**\n * Dice3D â€“ simple WebGL dice rendered with three.js\n * Usage:\n *   const diceRef = useRef<Dice3DHandle>(null);\n *   <Dice3D ref={diceRef} onRoll={(f)=>console.log(f)}/>\n *   diceRef.current?.roll();\n */\nconst Dice3D = /*#__PURE__*/_s(/*#__PURE__*/forwardRef(_c = _s(({\n  size = 180,\n  duration = 1200,\n  onRoll,\n  className\n}, ref) => {\n  _s();\n  const canvasRef = useRef(null);\n  const sceneRef = useRef();\n  const cubeRef = useRef();\n  const rendererRef = useRef();\n  const cameraRef = useRef();\n  const animIdRef = useRef(0);\n\n  /** helper to create a texture with pips */\n  const createFaceTexture = face => {\n    const size = 128;\n    const cvs = document.createElement('canvas');\n    cvs.width = cvs.height = size;\n    const ctx = cvs.getContext('2d');\n    ctx.fillStyle = '#fff';\n    ctx.fillRect(0, 0, size, size);\n    ctx.fillStyle = '#111';\n    const dot = (x, y) => {\n      ctx.beginPath();\n      ctx.arc(x, y, size * 0.1, 0, Math.PI * 2);\n      ctx.fill();\n    };\n    const g = size * 0.25;\n    const centers = {\n      1: [[size / 2, size / 2]],\n      2: [[g, g], [size - g, size - g]],\n      3: [[g, g], [size / 2, size / 2], [size - g, size - g]],\n      4: [[g, g], [size - g, g], [g, size - g], [size - g, size - g]],\n      5: [[g, g], [size - g, g], [size / 2, size / 2], [g, size - g], [size - g, size - g]],\n      6: [[g, g], [size - g, g], [g, size / 2], [size - g, size / 2], [g, size - g], [size - g, size - g]]\n    };\n    centers[face].forEach(([x, y]) => dot(x, y));\n    const tex = new THREE.CanvasTexture(cvs);\n    tex.needsUpdate = true;\n    return tex;\n  };\n\n  // initialize three scene\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const scene = new THREE.Scene();\n    scene.background = new THREE.Color(0x000000);\n    const camera = new THREE.PerspectiveCamera(45, 1, 0.1, 1000);\n    camera.position.z = 4;\n    const renderer = new THREE.WebGLRenderer({\n      canvas,\n      antialias: true,\n      alpha: true\n    });\n    renderer.setSize(size, size);\n    renderer.shadowMap.enabled = true;\n    renderer.shadowMap.type = THREE.PCFSoftShadowMap;\n\n    // lights\n    const ambient = new THREE.AmbientLight(0xffffff, 0.6);\n    scene.add(ambient);\n    const dir = new THREE.DirectionalLight(0xffffff, 1.0);\n    dir.position.set(5, 10, 7);\n    dir.castShadow = true;\n    dir.shadow.mapSize.width = 1024;\n    dir.shadow.mapSize.height = 1024;\n    dir.shadow.camera.left = -5;\n    dir.shadow.camera.right = 5;\n    dir.shadow.camera.top = 5;\n    dir.shadow.camera.bottom = -5;\n    scene.add(dir);\n\n    // ground plane to receive shadow\n    const planeGeo = new THREE.PlaneGeometry(10, 10);\n    const planeMat = new THREE.ShadowMaterial({\n      opacity: 0.35\n    });\n    const plane = new THREE.Mesh(planeGeo, planeMat);\n    plane.rotation.x = -Math.PI / 2;\n    plane.position.y = -1.1;\n    plane.receiveShadow = true;\n    scene.add(plane);\n\n    // Create a simple procedural equirectangular-like texture for subtle reflections\n    let generatedEnvMap = null;\n    try {\n      const envCanvas = document.createElement('canvas');\n      envCanvas.width = envCanvas.height = 256;\n      const ectx = envCanvas.getContext('2d');\n      // simple radial gradient\n      const grad = ectx.createRadialGradient(128, 128, 20, 128, 128, 140);\n      grad.addColorStop(0, '#ffffff');\n      grad.addColorStop(0.5, '#ccccff');\n      grad.addColorStop(1, '#556688');\n      ectx.fillStyle = grad;\n      ectx.fillRect(0, 0, 256, 256);\n      const envTex = new THREE.CanvasTexture(envCanvas);\n      envTex.mapping = THREE.EquirectangularReflectionMapping;\n      const pmremGen = new THREE.PMREMGenerator(renderer);\n      pmremGen.compileEquirectangularShader();\n      generatedEnvMap = pmremGen.fromEquirectangular(envTex).texture;\n      scene.environment = generatedEnvMap;\n    } catch (e) {\n      // ignore if PMREM not supported in environment\n      generatedEnvMap = null;\n    }\n\n    // cube\n    const materials = [1, 2, 3, 4, 5, 6].map(f => new THREE.MeshStandardMaterial({\n      map: createFaceTexture(f),\n      metalness: 0.1,\n      roughness: 0.6\n    }));\n    const geometry = new THREE.BoxGeometry(2, 2, 2);\n    const cube = new THREE.Mesh(geometry, materials);\n    cube.castShadow = true;\n    cube.receiveShadow = false;\n    scene.add(cube);\n\n    // If we generated an environment map, apply it to materials for reflections\n    if (generatedEnvMap) {\n      try {\n        materials.forEach(m => {\n          m.envMap = generatedEnvMap;\n          m.envMapIntensity = 0.8;\n          m.needsUpdate = true;\n        });\n      } catch (e) {}\n    }\n    sceneRef.current = scene;\n    cubeRef.current = cube;\n    rendererRef.current = renderer;\n    cameraRef.current = camera;\n\n    // animation loop\n    const animate = () => {\n      animIdRef.current = requestAnimationFrame(animate);\n      // subtle idle rotate\n      if (cube) {\n        cube.rotation.x *= 0.995;\n        cube.rotation.y *= 0.995;\n      }\n      renderer.render(scene, camera);\n    };\n    animate();\n    return () => {\n      cancelAnimationFrame(animIdRef.current);\n      renderer.dispose();\n    };\n  }, [size]);\n\n  // roll logic (includes DOM motion)\n  const rollInternal = targetFace => {\n    if (!cubeRef.current) return;\n    const cube = cubeRef.current;\n    // pick target if not provided\n    const face = targetFace !== null && targetFace !== void 0 ? targetFace : 1 + Math.floor(Math.random() * 6);\n\n    // orientation map: face -> Euler rotation (approx)\n    const orientations = {\n      1: [0, 0, 0],\n      2: [0, Math.PI / 2, 0],\n      3: [-Math.PI / 2, 0, 0],\n      4: [Math.PI / 2, 0, 0],\n      5: [0, -Math.PI / 2, 0],\n      6: [Math.PI, 0, 0]\n    };\n    const [tx, ty, tz] = orientations[face];\n    const start = {\n      x: cube.rotation.x,\n      y: cube.rotation.y,\n      z: cube.rotation.z\n    };\n    const end = {\n      x: tx + 2 * Math.PI,\n      y: ty + 2 * Math.PI,\n      z: tz + 2 * Math.PI\n    };\n\n    // Use GSAP timeline for smooth rotation + bounces and DOM motion\n    const timeline = gsap.timeline({\n      onComplete: () => {\n        cube.rotation.set(tx, ty, tz);\n        if (onRoll) onRoll(face);\n      }\n    });\n\n    // random screen path\n    const canvasEl = canvasRef.current;\n    if (canvasEl && canvasEl.style) {\n      canvasEl.style.position = 'fixed';\n      canvasEl.style.left = '0px';\n      canvasEl.style.top = '0px';\n      canvasEl.style.willChange = 'transform, filter';\n      // pick random path and multiple bounces\n      const startX = Math.random() * (window.innerWidth - size);\n      const startY = Math.random() * (window.innerHeight - size);\n      const endX = Math.random() * (window.innerWidth - size);\n      const endY = Math.random() * (window.innerHeight - size);\n\n      // apply motion blur using CSS filter while moving\n      gsap.set(canvasEl, {\n        x: startX,\n        y: startY,\n        filter: 'blur(0px)'\n      });\n      timeline.to(canvasEl, {\n        duration: duration / 1000 * 0.65,\n        x: endX,\n        y: endY,\n        ease: 'power2.inOut'\n      }, 0);\n      // small jitter bounces near end\n      timeline.to(canvasEl, {\n        duration: 0.08,\n        x: endX + 6,\n        y: endY - 6,\n        ease: 'power1.out'\n      });\n      timeline.to(canvasEl, {\n        duration: 0.07,\n        x: endX - 4,\n        y: endY + 4,\n        ease: 'power1.in'\n      });\n      timeline.to(canvasEl, {\n        duration: 0.05,\n        x: endX,\n        y: endY,\n        ease: 'power1.out'\n      });\n      timeline.to(canvasEl, {\n        duration: 0.06,\n        filter: 'blur(0px)',\n        ease: 'power1.out'\n      }, 0);\n    }\n\n    // rotation: spin multiple revolutions then ease to final orientation\n    // we'll use a GSAP ticker to update cube.rotation\n    const totalSpins = 3 + Math.floor(Math.random() * 4);\n    const rotEnd = {\n      x: end.x,\n      y: end.y,\n      z: end.z\n    };\n    const rotStart = {\n      x: start.x,\n      y: start.y,\n      z: start.z\n    };\n\n    // animate rotation using timeline with an onUpdate that writes to cube\n    let progress = {\n      t: 0\n    };\n    timeline.to(progress, {\n      t: 1,\n      duration: duration / 1000,\n      ease: 'power3.out',\n      onUpdate: () => {\n        const k = progress.t;\n        // combine ease with extra spins\n        const spinFactor = 1 - Math.pow(1 - k, 3);\n        const currentX = rotStart.x + (rotEnd.x - rotStart.x) * k + totalSpins * Math.PI * 2 * (1 - (1 - k));\n        const currentY = rotStart.y + (rotEnd.y - rotStart.y) * k + totalSpins * Math.PI * 2 * (1 - (1 - k));\n        const currentZ = rotStart.z + (rotEnd.z - rotStart.z) * k + totalSpins * Math.PI * 2 * (1 - (1 - k));\n        cube.rotation.set(currentX, currentY, currentZ);\n      }\n    });\n\n    // small multi-bounce sequence on completion (scale + tilt)\n    timeline.to(cube.scale, {\n      x: 1.08,\n      y: 0.90,\n      z: 0.9,\n      duration: 0.07,\n      ease: 'power2.out'\n    }, '>-0.05');\n    timeline.to(cube.scale, {\n      x: 0.95,\n      y: 1.07,\n      z: 0.95,\n      duration: 0.06,\n      ease: 'power2.in'\n    });\n    timeline.to(cube.scale, {\n      x: 1.03,\n      y: 0.98,\n      z: 1.02,\n      duration: 0.05,\n      ease: 'power2.out'\n    });\n    timeline.to(cube.scale, {\n      x: 1,\n      y: 1,\n      z: 1,\n      duration: 0.04,\n      ease: 'power2.out'\n    });\n  };\n  useImperativeHandle(ref, () => ({\n    roll: () => rollInternal(),\n    rollTo: face => rollInternal(Math.max(1, Math.min(6, face)))\n  }), [duration, onRoll]);\n\n  // click to roll\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const handler = () => rollInternal();\n    canvas.addEventListener('click', handler);\n    return () => canvas.removeEventListener('click', handler);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    width: size,\n    height: size,\n    className: className,\n    style: {\n      cursor: 'pointer'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 263,\n    columnNumber: 12\n  }, this);\n}, \"ly5rQgKhkC6yoCpgKv0PQVA/swM=\")), \"ly5rQgKhkC6yoCpgKv0PQVA/swM=\");\n_c2 = Dice3D;\nexport default Dice3D;\nvar _c, _c2;\n$RefreshReg$(_c, \"Dice3D$forwardRef\");\n$RefreshReg$(_c2, \"Dice3D\");","map":{"version":3,"names":["React","useEffect","useRef","useImperativeHandle","forwardRef","THREE","gsap","jsxDEV","_jsxDEV","Dice3D","_s","_c","size","duration","onRoll","className","ref","canvasRef","sceneRef","cubeRef","rendererRef","cameraRef","animIdRef","createFaceTexture","face","cvs","document","createElement","width","height","ctx","getContext","fillStyle","fillRect","dot","x","y","beginPath","arc","Math","PI","fill","g","centers","forEach","tex","CanvasTexture","needsUpdate","canvas","current","scene","Scene","background","Color","camera","PerspectiveCamera","position","z","renderer","WebGLRenderer","antialias","alpha","setSize","shadowMap","enabled","type","PCFSoftShadowMap","ambient","AmbientLight","add","dir","DirectionalLight","set","castShadow","shadow","mapSize","left","right","top","bottom","planeGeo","PlaneGeometry","planeMat","ShadowMaterial","opacity","plane","Mesh","rotation","receiveShadow","generatedEnvMap","envCanvas","ectx","grad","createRadialGradient","addColorStop","envTex","mapping","EquirectangularReflectionMapping","pmremGen","PMREMGenerator","compileEquirectangularShader","fromEquirectangular","texture","environment","e","materials","map","f","MeshStandardMaterial","metalness","roughness","geometry","BoxGeometry","cube","m","envMap","envMapIntensity","animate","requestAnimationFrame","render","cancelAnimationFrame","dispose","rollInternal","targetFace","floor","random","orientations","tx","ty","tz","start","end","timeline","onComplete","canvasEl","style","willChange","startX","window","innerWidth","startY","innerHeight","endX","endY","filter","to","ease","totalSpins","rotEnd","rotStart","progress","t","onUpdate","k","spinFactor","pow","currentX","currentY","currentZ","scale","roll","rollTo","max","min","handler","addEventListener","removeEventListener","cursor","fileName","_jsxFileName","lineNumber","columnNumber","_c2","$RefreshReg$"],"sources":["C:/Users/skank/Videos/Cards/Milchcards/src/components/Dice3D.tsx"],"sourcesContent":["import React, { useEffect, useRef, useImperativeHandle, forwardRef } from 'react';\nimport * as THREE from 'three';\nimport { gsap } from 'gsap';\n\nexport interface Dice3DProps {\n  /** pixel size of canvas */\n  size?: number;\n  /** roll animation duration in ms */\n  duration?: number;\n  /** callback when roll ends */\n  onRoll?: (face: number) => void;\n  className?: string;\n}\n\nexport interface Dice3DHandle {\n  roll: () => void;\n  rollTo: (face: number) => void;\n}\n\n/**\n * Dice3D â€“ simple WebGL dice rendered with three.js\n * Usage:\n *   const diceRef = useRef<Dice3DHandle>(null);\n *   <Dice3D ref={diceRef} onRoll={(f)=>console.log(f)}/>\n *   diceRef.current?.roll();\n */\nconst Dice3D = forwardRef<Dice3DHandle, Dice3DProps>(\n  ({ size = 180, duration = 1200, onRoll, className }: Dice3DProps, ref) => {\n    const canvasRef = useRef<HTMLCanvasElement | null>(null);\n    const sceneRef = useRef<THREE.Scene>();\n    const cubeRef = useRef<THREE.Mesh>();\n    const rendererRef = useRef<THREE.WebGLRenderer>();\n    const cameraRef = useRef<THREE.PerspectiveCamera>();\n    const animIdRef = useRef(0);\n\n    /** helper to create a texture with pips */\n    const createFaceTexture = (face: number): THREE.Texture => {\n      const size = 128;\n      const cvs = document.createElement('canvas');\n      cvs.width = cvs.height = size;\n      const ctx = cvs.getContext('2d')!;\n      ctx.fillStyle = '#fff';\n      ctx.fillRect(0, 0, size, size);\n      ctx.fillStyle = '#111';\n\n      const dot = (x: number, y: number) => {\n        ctx.beginPath();\n        ctx.arc(x, y, size * 0.1, 0, Math.PI * 2);\n        ctx.fill();\n      };\n      const g = size * 0.25;\n      const centers: Record<number, Array<[number, number]>> = {\n        1: [[size / 2, size / 2]],\n        2: [[g, g], [size - g, size - g]],\n        3: [[g, g], [size / 2, size / 2], [size - g, size - g]],\n        4: [[g, g], [size - g, g], [g, size - g], [size - g, size - g]],\n        5: [[g, g], [size - g, g], [size / 2, size / 2], [g, size - g], [size - g, size - g]],\n        6: [[g, g], [size - g, g], [g, size / 2], [size - g, size / 2], [g, size - g], [size - g, size - g]],\n      };\n      centers[face].forEach(([x, y]) => dot(x, y));\n      const tex = new THREE.CanvasTexture(cvs);\n      tex.needsUpdate = true;\n      return tex;\n    };\n\n    // initialize three scene\n    useEffect(() => {\n      const canvas = canvasRef.current;\n      if (!canvas) return;\n      const scene = new THREE.Scene();\n      scene.background = new THREE.Color(0x000000);\n      const camera = new THREE.PerspectiveCamera(45, 1, 0.1, 1000);\n      camera.position.z = 4;\n      const renderer = new THREE.WebGLRenderer({ canvas, antialias: true, alpha: true });\n      renderer.setSize(size, size);\n      renderer.shadowMap.enabled = true;\n      renderer.shadowMap.type = THREE.PCFSoftShadowMap;\n\n      // lights\n      const ambient = new THREE.AmbientLight(0xffffff, 0.6);\n      scene.add(ambient);\n      const dir = new THREE.DirectionalLight(0xffffff, 1.0);\n      dir.position.set(5, 10, 7);\n      dir.castShadow = true;\n      dir.shadow.mapSize.width = 1024;\n      dir.shadow.mapSize.height = 1024;\n      dir.shadow.camera.left = -5;\n      dir.shadow.camera.right = 5;\n      dir.shadow.camera.top = 5;\n      dir.shadow.camera.bottom = -5;\n      scene.add(dir);\n\n      // ground plane to receive shadow\n      const planeGeo = new THREE.PlaneGeometry(10, 10);\n      const planeMat = new THREE.ShadowMaterial({ opacity: 0.35 });\n      const plane = new THREE.Mesh(planeGeo, planeMat);\n      plane.rotation.x = -Math.PI / 2;\n      plane.position.y = -1.1;\n      plane.receiveShadow = true;\n      scene.add(plane);\n\n      // Create a simple procedural equirectangular-like texture for subtle reflections\n      let generatedEnvMap: THREE.Texture | null = null;\n      try {\n        const envCanvas = document.createElement('canvas');\n        envCanvas.width = envCanvas.height = 256;\n        const ectx = envCanvas.getContext('2d')!;\n        // simple radial gradient\n        const grad = ectx.createRadialGradient(128, 128, 20, 128, 128, 140);\n        grad.addColorStop(0, '#ffffff');\n        grad.addColorStop(0.5, '#ccccff');\n        grad.addColorStop(1, '#556688');\n        ectx.fillStyle = grad;\n        ectx.fillRect(0, 0, 256, 256);\n        const envTex = new THREE.CanvasTexture(envCanvas);\n        envTex.mapping = THREE.EquirectangularReflectionMapping;\n        const pmremGen = new THREE.PMREMGenerator(renderer);\n        pmremGen.compileEquirectangularShader();\n        generatedEnvMap = pmremGen.fromEquirectangular(envTex).texture;\n        scene.environment = generatedEnvMap;\n      } catch (e) {\n        // ignore if PMREM not supported in environment\n        generatedEnvMap = null;\n      }\n\n      // cube\n      const materials = [1, 2, 3, 4, 5, 6].map(f => new THREE.MeshStandardMaterial({ map: createFaceTexture(f), metalness: 0.1, roughness: 0.6 }));\n      const geometry = new THREE.BoxGeometry(2, 2, 2);\n      const cube = new THREE.Mesh(geometry, materials);\n      cube.castShadow = true;\n      cube.receiveShadow = false;\n      scene.add(cube);\n\n      // If we generated an environment map, apply it to materials for reflections\n      if (generatedEnvMap) {\n        try {\n          materials.forEach((m: any) => {\n            m.envMap = generatedEnvMap;\n            m.envMapIntensity = 0.8;\n            m.needsUpdate = true;\n          });\n        } catch (e) {}\n      }\n\n      sceneRef.current = scene;\n      cubeRef.current = cube;\n      rendererRef.current = renderer;\n      cameraRef.current = camera;\n\n      // animation loop\n      const animate = () => {\n        animIdRef.current = requestAnimationFrame(animate);\n        // subtle idle rotate\n        if (cube) {\n          cube.rotation.x *= 0.995;\n          cube.rotation.y *= 0.995;\n        }\n        renderer.render(scene, camera);\n      };\n      animate();\n\n      return () => {\n        cancelAnimationFrame(animIdRef.current);\n        renderer.dispose();\n      };\n    }, [size]);\n\n    // roll logic (includes DOM motion)\n    const rollInternal = (targetFace?: number) => {\n      if (!cubeRef.current) return;\n      const cube = cubeRef.current;\n      // pick target if not provided\n      const face = targetFace ?? (1 + Math.floor(Math.random() * 6));\n\n      // orientation map: face -> Euler rotation (approx)\n      const orientations: Record<number, [number, number, number]> = {\n        1: [0, 0, 0],\n        2: [0, Math.PI / 2, 0],\n        3: [-Math.PI / 2, 0, 0],\n        4: [Math.PI / 2, 0, 0],\n        5: [0, -Math.PI / 2, 0],\n        6: [Math.PI, 0, 0],\n      };\n      const [tx, ty, tz] = orientations[face];\n\n      const start = { x: cube.rotation.x, y: cube.rotation.y, z: cube.rotation.z };\n      const end = { x: tx + 2 * Math.PI, y: ty + 2 * Math.PI, z: tz + 2 * Math.PI };\n\n      // Use GSAP timeline for smooth rotation + bounces and DOM motion\n      const timeline = gsap.timeline({ onComplete: () => {\n        cube.rotation.set(tx, ty, tz);\n        if (onRoll) onRoll(face);\n      }});\n\n      // random screen path\n      const canvasEl = canvasRef.current as HTMLCanvasElement | null;\n      if (canvasEl && canvasEl.style) {\n        canvasEl.style.position = 'fixed';\n        canvasEl.style.left = '0px';\n        canvasEl.style.top = '0px';\n        canvasEl.style.willChange = 'transform, filter';\n        // pick random path and multiple bounces\n        const startX = Math.random() * (window.innerWidth - size);\n        const startY = Math.random() * (window.innerHeight - size);\n        const endX = Math.random() * (window.innerWidth - size);\n        const endY = Math.random() * (window.innerHeight - size);\n\n        // apply motion blur using CSS filter while moving\n        gsap.set(canvasEl, { x: startX, y: startY, filter: 'blur(0px)' });\n\n        timeline.to(canvasEl, { duration: duration / 1000 * 0.65, x: endX, y: endY, ease: 'power2.inOut' }, 0);\n        // small jitter bounces near end\n        timeline.to(canvasEl, { duration: 0.08, x: endX + 6, y: endY - 6, ease: 'power1.out' });\n        timeline.to(canvasEl, { duration: 0.07, x: endX - 4, y: endY + 4, ease: 'power1.in' });\n        timeline.to(canvasEl, { duration: 0.05, x: endX, y: endY, ease: 'power1.out' });\n        timeline.to(canvasEl, { duration: 0.06, filter: 'blur(0px)', ease: 'power1.out' }, 0);\n      }\n\n      // rotation: spin multiple revolutions then ease to final orientation\n      // we'll use a GSAP ticker to update cube.rotation\n      const totalSpins = 3 + Math.floor(Math.random() * 4);\n      const rotEnd = { x: end.x, y: end.y, z: end.z };\n      const rotStart = { x: start.x, y: start.y, z: start.z };\n\n      // animate rotation using timeline with an onUpdate that writes to cube\n      let progress = { t: 0 };\n      timeline.to(progress, {\n        t: 1,\n        duration: duration / 1000,\n        ease: 'power3.out',\n        onUpdate: () => {\n          const k = progress.t;\n          // combine ease with extra spins\n          const spinFactor = 1 - Math.pow(1 - k, 3);\n          const currentX = rotStart.x + (rotEnd.x - rotStart.x) * k + totalSpins * Math.PI * 2 * (1 - (1 - k));\n          const currentY = rotStart.y + (rotEnd.y - rotStart.y) * k + totalSpins * Math.PI * 2 * (1 - (1 - k));\n          const currentZ = rotStart.z + (rotEnd.z - rotStart.z) * k + totalSpins * Math.PI * 2 * (1 - (1 - k));\n          cube.rotation.set(currentX, currentY, currentZ);\n        }\n      });\n\n      // small multi-bounce sequence on completion (scale + tilt)\n      timeline.to(cube.scale, { x: 1.08, y: 0.90, z: 0.9, duration: 0.07, ease: 'power2.out' }, '>-0.05');\n      timeline.to(cube.scale, { x: 0.95, y: 1.07, z: 0.95, duration: 0.06, ease: 'power2.in' });\n      timeline.to(cube.scale, { x: 1.03, y: 0.98, z: 1.02, duration: 0.05, ease: 'power2.out' });\n      timeline.to(cube.scale, { x: 1, y: 1, z: 1, duration: 0.04, ease: 'power2.out' });\n    };\n\n    useImperativeHandle(ref, () => ({\n      roll: () => rollInternal(),\n      rollTo: (face: number) => rollInternal(Math.max(1, Math.min(6, face))),\n    }), [duration, onRoll]);\n\n    // click to roll\n    useEffect(() => {\n      const canvas = canvasRef.current;\n      if (!canvas) return;\n      const handler = () => rollInternal();\n      canvas.addEventListener('click', handler);\n      return () => canvas.removeEventListener('click', handler);\n    }, []);\n\n    return <canvas ref={canvasRef} width={size} height={size} className={className} style={{ cursor: 'pointer' }} />;\n  });\n\nexport default Dice3D;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}