{"ast":null,"code":"import _objectSpread from\"C:/Users/skank/Videos/Cards/Milchcards/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{triggerCardEffects}from'../effects/cards';import{resolveQueue}from'../utils/queue';import{applyTrapsOnCardPlayed}from'../utils/traps';// Pure game engine - no React dependencies\nexport class GameEngine{constructor(initialState){this.state=void 0;this.state=_objectSpread({},initialState);}getState(){return _objectSpread({},this.state);}// Core action: Play a card\nplayCard(player,card,targetLane){// Validate AP cost\nif(this.state.actionPoints[player]<1){console.warn(\"Player \".concat(player,\" has insufficient AP: \").concat(this.state.actionPoints[player]));return false;}// Validate card is in hand\nconst handIndex=this.state.hands[player].findIndex(c=>c.uid===card.uid);if(handIndex===-1){console.warn(\"Card \".concat(card.name,\" not found in player \").concat(player,\"'s hand\"));return false;}// Remove card from hand\nconst[playedCard]=this.state.hands[player].splice(handIndex,1);// Determine target lane if not specified\nconst lane=targetLane||this.determineCardLane(playedCard);// Add card to board\nthis.state.board[player][lane].push(playedCard);// Consume AP\nthis.state.actionPoints[player]=Math.max(0,this.state.actionPoints[player]-1);// Trigger card effects\ntriggerCardEffects(this.state,player,playedCard);// Check for trap triggers from opponent\napplyTrapsOnCardPlayed(this.state,player,playedCard,event=>{if(!this.state._effectQueue)this.state._effectQueue=[];this.state._effectQueue.push(event);},msg=>{this.state.log.push(msg);});// Resolve effect queue\nif(this.state._effectQueue&&this.state._effectQueue.length>0){const events=[...this.state._effectQueue];this.state._effectQueue=[];resolveQueue(this.state,events);}console.log(\"Card played: \".concat(playedCard.name,\" by player \").concat(player,\" in \").concat(lane));return true;}// Determine which lane a card should go to based on its type\ndetermineCardLane(card){switch(card.kind){case'spec':// Check if it's a Sofort-Initiative\nconst specialCard=card;if(specialCard.type&&specialCard.type.toLowerCase().includes('sofort-initiative')){return'sofort';}return'innen';case'pol':return'aussen';default:console.warn(\"Unknown card kind: \".concat(card.kind,\", defaulting to 'innen'\"));return'innen';}}// Start turn - give player 2 AP\nstartTurn(player){this.state.actionPoints[player]=2;console.log(\"Turn started for player \".concat(player,\", AP set to 2\"));}// Draw cards\ndrawCards(player,amount){for(let i=0;i<amount;i++){const topCard=this.state.decks[player].shift();if(topCard){this.state.hands[player].push(topCard);}else{console.warn(\"No cards left in deck for player \".concat(player));break;}}}// Get current AP for player\ngetActionPoints(player){return this.state.actionPoints[player]||0;}// Check if player can play a card\ncanPlayCard(player){return this.getActionPoints(player)>=1;}// Get player's hand\ngetHand(player){return[...this.state.hands[player]];}// Get player's board state\ngetBoard(player){return{innen:[...this.state.board[player].innen],aussen:[...this.state.board[player].aussen],sofort:[...this.state.board[player].sofort]};}}","map":{"version":3,"names":["triggerCardEffects","resolveQueue","applyTrapsOnCardPlayed","GameEngine","constructor","initialState","state","_objectSpread","getState","playCard","player","card","targetLane","actionPoints","console","warn","concat","handIndex","hands","findIndex","c","uid","name","playedCard","splice","lane","determineCardLane","board","push","Math","max","event","_effectQueue","msg","log","length","events","kind","specialCard","type","toLowerCase","includes","startTurn","drawCards","amount","i","topCard","decks","shift","getActionPoints","canPlayCard","getHand","getBoard","innen","aussen","sofort"],"sources":["C:/Users/skank/Videos/Cards/Milchcards/src/engine/gameEngine.ts"],"sourcesContent":["import { GameState, Player, Card } from '../types/game';\nimport { triggerCardEffects } from '../effects/cards';\nimport { resolveQueue } from '../utils/queue';\nimport { applyTrapsOnCardPlayed } from '../utils/traps';\n\n// Pure game engine - no React dependencies\nexport class GameEngine {\n  private state: GameState;\n\n  constructor(initialState: GameState) {\n    this.state = { ...initialState };\n  }\n\n  getState(): GameState {\n    return { ...this.state };\n  }\n\n  // Core action: Play a card\n  playCard(player: Player, card: Card, targetLane?: 'innen' | 'aussen' | 'sofort'): boolean {\n    // Validate AP cost\n    if (this.state.actionPoints[player] < 1) {\n      console.warn(`Player ${player} has insufficient AP: ${this.state.actionPoints[player]}`);\n      return false;\n    }\n\n    // Validate card is in hand\n    const handIndex = this.state.hands[player].findIndex(c => c.uid === card.uid);\n    if (handIndex === -1) {\n      console.warn(`Card ${card.name} not found in player ${player}'s hand`);\n      return false;\n    }\n\n    // Remove card from hand\n    const [playedCard] = this.state.hands[player].splice(handIndex, 1);\n\n    // Determine target lane if not specified\n    const lane = targetLane || this.determineCardLane(playedCard);\n\n    // Add card to board\n    this.state.board[player][lane].push(playedCard);\n\n    // Consume AP\n    this.state.actionPoints[player] = Math.max(0, this.state.actionPoints[player] - 1);\n\n    // Trigger card effects\n    triggerCardEffects(this.state, player, playedCard);\n\n    // Check for trap triggers from opponent\n    applyTrapsOnCardPlayed(\n      this.state,\n      player,\n      playedCard,\n      (event) => {\n        if (!this.state._effectQueue) this.state._effectQueue = [];\n        this.state._effectQueue.push(event);\n      },\n      (msg) => {\n        this.state.log.push(msg);\n      }\n    );\n\n    // Resolve effect queue\n    if (this.state._effectQueue && this.state._effectQueue.length > 0) {\n      const events = [...this.state._effectQueue];\n      this.state._effectQueue = [];\n      resolveQueue(this.state, events);\n    }\n\n    console.log(`Card played: ${playedCard.name} by player ${player} in ${lane}`);\n    return true;\n  }\n\n  // Determine which lane a card should go to based on its type\n  private determineCardLane(card: Card): 'innen' | 'aussen' | 'sofort' {\n    switch (card.kind) {\n      case 'spec':\n        // Check if it's a Sofort-Initiative\n        const specialCard = card as any;\n        if (specialCard.type && specialCard.type.toLowerCase().includes('sofort-initiative')) {\n          return 'sofort';\n        }\n        return 'innen';\n      case 'pol':\n        return 'aussen';\n      default:\n        console.warn(`Unknown card kind: ${card.kind}, defaulting to 'innen'`);\n        return 'innen';\n    }\n  }\n\n  // Start turn - give player 2 AP\n  startTurn(player: Player): void {\n    this.state.actionPoints[player] = 2;\n    console.log(`Turn started for player ${player}, AP set to 2`);\n  }\n\n  // Draw cards\n  drawCards(player: Player, amount: number): void {\n    for (let i = 0; i < amount; i++) {\n      const topCard = this.state.decks[player].shift();\n      if (topCard) {\n        this.state.hands[player].push(topCard);\n      } else {\n        console.warn(`No cards left in deck for player ${player}`);\n        break;\n      }\n    }\n  }\n\n  // Get current AP for player\n  getActionPoints(player: Player): number {\n    return this.state.actionPoints[player] || 0;\n  }\n\n  // Check if player can play a card\n  canPlayCard(player: Player): boolean {\n    return this.getActionPoints(player) >= 1;\n  }\n\n  // Get player's hand\n  getHand(player: Player): Card[] {\n    return [...this.state.hands[player]];\n  }\n\n  // Get player's board state\n  getBoard(player: Player) {\n    return {\n      innen: [...this.state.board[player].innen],\n      aussen: [...this.state.board[player].aussen],\n      sofort: [...this.state.board[player].sofort]\n    };\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}