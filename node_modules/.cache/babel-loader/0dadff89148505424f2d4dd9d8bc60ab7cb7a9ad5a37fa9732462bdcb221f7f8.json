{"ast":null,"code":"import { CARD_BY_ID } from '../data/cards';\nexport function registerTrap(state, player, key) {\n  if (!state.traps) state.traps = {\n    1: [],\n    2: []\n  };\n  const list = state.traps[player];\n  if (!Array.isArray(list)) state.traps[player] = [];\n  state.traps[player].push({\n    owner: player,\n    key\n  });\n}\nexport function applyTrapsOnCardPlayed(state, playedBy, card, enqueue, log) {\n  var _state$traps, _cardDef$tags, _cardDef$tags2;\n  const opp = playedBy === 1 ? 2 : 1;\n  const traps = (_state$traps = state.traps) === null || _state$traps === void 0 ? void 0 : _state$traps[opp];\n  if (!traps || traps.length === 0) return;\n\n  // Get card definition to access type and tags\n  const cardDef = CARD_BY_ID[card.key];\n  const isInitiative = (cardDef === null || cardDef === void 0 ? void 0 : cardDef.type) === 'initiative';\n  const isPublic = (cardDef === null || cardDef === void 0 ? void 0 : cardDef.type) === 'public';\n  const isGovernment = (cardDef === null || cardDef === void 0 ? void 0 : cardDef.type) === 'government';\n  const isMediaLike = (cardDef === null || cardDef === void 0 ? void 0 : (_cardDef$tags = cardDef.tags) === null || _cardDef$tags === void 0 ? void 0 : _cardDef$tags.includes('Media')) || (cardDef === null || cardDef === void 0 ? void 0 : (_cardDef$tags2 = cardDef.tags) === null || _cardDef$tags2 === void 0 ? void 0 : _cardDef$tags2.includes('Platform'));\n  traps.forEach(t => {\n    switch (t.key) {\n      // bereits live benutzt\n      case 'trap.fake_news.deactivate_media':\n        if (isMediaLike && card.uid != null) {\n          enqueue({\n            type: 'DEACTIVATE_CARD',\n            player: opp,\n            targetUid: card.uid\n          });\n          log('Trap: Fake News – deactivated media/platform card.');\n        }\n        break;\n\n      // neu: Initiative canceln (sofort beim Ausspielen der Initiative)\n      case 'trap.legal_injunction.cancel_next_initiative':\n        if (isInitiative && card.uid != null) {\n          enqueue({\n            type: 'CANCEL_CARD',\n            player: opp,\n            targetUid: card.uid\n          });\n          log('Trap: Legal Injunction – cancelled initiative.');\n        }\n        break;\n\n      // neu: Karte zurück auf Hand (egal welcher Typ)\n      case 'trap.whistleblower.return_last_played':\n        if (card.uid != null) {\n          enqueue({\n            type: 'RETURN_TO_HAND',\n            player: playedBy,\n            targetUid: card.uid\n          });\n          log('Trap: Whistleblower – returned played card to hand.');\n        }\n        break;\n\n      // neu: Gegner discards 2 bei nächstem Play\n      case 'trap.data_breach.opp_discard2':\n        enqueue({\n          type: 'DISCARD_RANDOM_FROM_HAND',\n          player: playedBy === 1 ? 2 : 1,\n          amount: 2\n        });\n        log('Trap: Data Breach – opponent discards 2.');\n        break;\n\n      // neu: Public deaktivieren\n      case 'trap.media_blackout.deactivate_public':\n        if (isPublic && card.uid != null) {\n          enqueue({\n            type: 'DEACTIVATE_CARD',\n            player: opp,\n            targetUid: card.uid\n          });\n          log('Trap: Media Blackout – deactivated public card.');\n        }\n        break;\n\n      // neu: AP -2 für Gegner beim nächsten Play\n      case 'trap.budget_freeze.opp_ap_minus2':\n        enqueue({\n          type: 'ADD_AP',\n          player: playedBy,\n          amount: -2\n        });\n        log('Trap: Budget Freeze – opponent AP -2.');\n        break;\n\n      // neu: Government deaktivieren\n      case 'trap.sabotage.deactivate_gov':\n        if (isGovernment && card.uid != null) {\n          enqueue({\n            type: 'DEACTIVATE_CARD',\n            player: opp,\n            targetUid: card.uid\n          });\n          log('Trap: Sabotage – deactivated government card.');\n        }\n        break;\n      default:\n        break;\n    }\n  });\n\n  // OPTIONAL: one-shot Traps löschen – wenn gewünscht:\n  // (state.traps as any)[opp] = (state.traps as any)[opp].filter(t => t.key !== '...');\n  // (Kannst du später feingranular per Key entscheiden.)\n}","map":{"version":3,"names":["CARD_BY_ID","registerTrap","state","player","key","traps","list","Array","isArray","push","owner","applyTrapsOnCardPlayed","playedBy","card","enqueue","log","_state$traps","_cardDef$tags","_cardDef$tags2","opp","length","cardDef","isInitiative","type","isPublic","isGovernment","isMediaLike","tags","includes","forEach","t","uid","targetUid","amount"],"sources":["C:/Users/skank/Videos/Cards/Milchcards/src/utils/traps.ts"],"sourcesContent":["import type { GameState, Player, Card } from '../types/game';\r\nimport type { EffectEvent } from '../types/effects';\r\nimport { CARD_BY_ID } from '../data/cards';\r\n\r\nexport function registerTrap(state: GameState, player: Player, key: string) {\r\n  if (!state.traps) state.traps = { 1: [], 2: [] } as any;\r\n  const list = (state.traps as any)[player] as Array<{ owner: Player; key: string }>;\r\n  if (!Array.isArray(list)) (state.traps as any)[player] = [];\r\n  (state.traps as any)[player].push({ owner: player, key });\r\n}\r\n\r\nexport function applyTrapsOnCardPlayed(\r\n  state: GameState,\r\n  playedBy: Player,\r\n  card: Card,\r\n  enqueue: (e: EffectEvent) => void,\r\n  log: (m: string) => void\r\n) {\r\n  const opp: Player = playedBy === 1 ? 2 : 1;\r\n  const traps = (state.traps as any)?.[opp] as Array<{ owner: Player; key: string }> | undefined;\r\n  if (!traps || traps.length === 0) return;\r\n\r\n  // Get card definition to access type and tags\r\n  const cardDef = CARD_BY_ID[card.key];\r\n  const isInitiative = cardDef?.type === 'initiative';\r\n  const isPublic = cardDef?.type === 'public';\r\n  const isGovernment = cardDef?.type === 'government';\r\n  const isMediaLike = cardDef?.tags?.includes('Media') || cardDef?.tags?.includes('Platform');\r\n\r\n  traps.forEach(t => {\r\n    switch (t.key) {\r\n      // bereits live benutzt\r\n      case 'trap.fake_news.deactivate_media':\r\n        if (isMediaLike && (card as any).uid != null) {\r\n          enqueue({ type: 'DEACTIVATE_CARD', player: opp, targetUid: (card as any).uid });\r\n          log('Trap: Fake News – deactivated media/platform card.');\r\n        }\r\n        break;\r\n\r\n      // neu: Initiative canceln (sofort beim Ausspielen der Initiative)\r\n      case 'trap.legal_injunction.cancel_next_initiative':\r\n        if (isInitiative && (card as any).uid != null) {\r\n          enqueue({ type: 'CANCEL_CARD', player: opp, targetUid: (card as any).uid });\r\n          log('Trap: Legal Injunction – cancelled initiative.');\r\n        }\r\n        break;\r\n\r\n      // neu: Karte zurück auf Hand (egal welcher Typ)\r\n      case 'trap.whistleblower.return_last_played':\r\n        if ((card as any).uid != null) {\r\n          enqueue({ type: 'RETURN_TO_HAND', player: playedBy, targetUid: (card as any).uid });\r\n          log('Trap: Whistleblower – returned played card to hand.');\r\n        }\r\n        break;\r\n\r\n      // neu: Gegner discards 2 bei nächstem Play\r\n      case 'trap.data_breach.opp_discard2':\r\n        enqueue({ type: 'DISCARD_RANDOM_FROM_HAND', player: playedBy === 1 ? 2 : 1, amount: 2 });\r\n        log('Trap: Data Breach – opponent discards 2.');\r\n        break;\r\n\r\n      // neu: Public deaktivieren\r\n      case 'trap.media_blackout.deactivate_public':\r\n        if (isPublic && (card as any).uid != null) {\r\n          enqueue({ type: 'DEACTIVATE_CARD', player: opp, targetUid: (card as any).uid });\r\n          log('Trap: Media Blackout – deactivated public card.');\r\n        }\r\n        break;\r\n\r\n      // neu: AP -2 für Gegner beim nächsten Play\r\n      case 'trap.budget_freeze.opp_ap_minus2':\r\n        enqueue({ type: 'ADD_AP', player: playedBy, amount: -2 });\r\n        log('Trap: Budget Freeze – opponent AP -2.');\r\n        break;\r\n\r\n      // neu: Government deaktivieren\r\n      case 'trap.sabotage.deactivate_gov':\r\n        if (isGovernment && (card as any).uid != null) {\r\n          enqueue({ type: 'DEACTIVATE_CARD', player: opp, targetUid: (card as any).uid });\r\n          log('Trap: Sabotage – deactivated government card.');\r\n        }\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n  });\r\n\r\n  // OPTIONAL: one-shot Traps löschen – wenn gewünscht:\r\n  // (state.traps as any)[opp] = (state.traps as any)[opp].filter(t => t.key !== '...');\r\n  // (Kannst du später feingranular per Key entscheiden.)\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}