{"ast":null,"code":"import { triggerCardEffects } from '../effects/cards';\nimport { resolveQueue } from '../utils/queue';\nimport { applyTrapsOnCardPlayed } from '../utils/traps';\n\n// Pure game engine - no React dependencies\n\nexport class GameEngine {\n  constructor(initialState, hooks) {\n    this.state = void 0;\n    this.hooks = void 0;\n    this.state = {\n      ...initialState\n    };\n    this.hooks = hooks;\n  }\n  getState() {\n    return {\n      ...this.state\n    };\n  }\n\n  // Core action: Play a card\n  playCard(player, card, targetLane) {\n    // Validate AP cost\n    if (this.state.actionPoints[player] < 1) {\n      console.warn(`Player ${player} has insufficient AP: ${this.state.actionPoints[player]}`);\n      return false;\n    }\n\n    // Validate card is in hand\n    const handIndex = this.state.hands[player].findIndex(c => c.uid === card.uid);\n    if (handIndex === -1) {\n      console.warn(`Card ${card.name} not found in player ${player}'s hand`);\n      return false;\n    }\n\n    // Remove card from hand\n    const [playedCard] = this.state.hands[player].splice(handIndex, 1);\n\n    // Determine target lane if not specified\n    const lane = targetLane || this.determineCardLane(playedCard);\n\n    // Add card to board\n    this.state.board[player][lane].push(playedCard);\n\n    // Consume AP\n    this.state.actionPoints[player] = Math.max(0, this.state.actionPoints[player] - 1);\n\n    // Trigger card effects\n    triggerCardEffects(this.state, player, playedCard);\n\n    // Check for trap triggers from opponent\n    applyTrapsOnCardPlayed(this.state, player, playedCard, event => {\n      if (!this.state._effectQueue) this.state._effectQueue = [];\n      this.state._effectQueue.push(event);\n    }, msg => {\n      this.state.log.push(msg);\n    });\n\n    // Resolve effect queue\n    if (this.state._effectQueue && this.state._effectQueue.length > 0) {\n      var _this$hooks, _this$hooks2;\n      const events = [...this.state._effectQueue];\n      this.state._effectQueue = [];\n      // Forward tracing hooks from engine to resolver\n      resolveQueue(this.state, events, {\n        onEnqueue: (_this$hooks = this.hooks) === null || _this$hooks === void 0 ? void 0 : _this$hooks.onEnqueue,\n        onDequeue: (_this$hooks2 = this.hooks) === null || _this$hooks2 === void 0 ? void 0 : _this$hooks2.onDequeue\n      });\n    }\n    console.log(`Card played: ${playedCard.name} by player ${player} in ${lane}`);\n    return true;\n  }\n\n  // Determine which lane a card should go to based on its type\n  determineCardLane(card) {\n    switch (card.kind) {\n      case 'spec':\n        // Check if it's a Sofort-Initiative\n        const specialCard = card;\n        if (specialCard.type && specialCard.type.toLowerCase().includes('sofort-initiative')) {\n          return 'sofort';\n        }\n        return 'innen';\n      case 'pol':\n        return 'aussen';\n      default:\n        console.warn(`Unknown card kind: ${card.kind}, defaulting to 'innen'`);\n        return 'innen';\n    }\n  }\n\n  // Start turn - give player 2 AP\n  startTurn(player) {\n    this.state.actionPoints[player] = 2;\n    console.log(`Turn started for player ${player}, AP set to 2`);\n  }\n\n  // Draw cards\n  drawCards(player, amount) {\n    for (let i = 0; i < amount; i++) {\n      const topCard = this.state.decks[player].shift();\n      if (topCard) {\n        this.state.hands[player].push(topCard);\n      } else {\n        console.warn(`No cards left in deck for player ${player}`);\n        break;\n      }\n    }\n  }\n\n  // Get current AP for player\n  getActionPoints(player) {\n    return this.state.actionPoints[player] || 0;\n  }\n\n  // Check if player can play a card\n  canPlayCard(player) {\n    return this.getActionPoints(player) >= 1;\n  }\n\n  // Get player's hand\n  getHand(player) {\n    return [...this.state.hands[player]];\n  }\n\n  // Get player's board state\n  getBoard(player) {\n    return {\n      innen: [...this.state.board[player].innen],\n      aussen: [...this.state.board[player].aussen],\n      sofort: [...this.state.board[player].sofort]\n    };\n  }\n}","map":{"version":3,"names":["triggerCardEffects","resolveQueue","applyTrapsOnCardPlayed","GameEngine","constructor","initialState","hooks","state","getState","playCard","player","card","targetLane","actionPoints","console","warn","handIndex","hands","findIndex","c","uid","name","playedCard","splice","lane","determineCardLane","board","push","Math","max","event","_effectQueue","msg","log","length","_this$hooks","_this$hooks2","events","onEnqueue","onDequeue","kind","specialCard","type","toLowerCase","includes","startTurn","drawCards","amount","i","topCard","decks","shift","getActionPoints","canPlayCard","getHand","getBoard","innen","aussen","sofort"],"sources":["C:/Users/skank/Videos/Cards/Milchcards/src/engine/gameEngine.ts"],"sourcesContent":["import { GameState, Player, Card } from '../types/game';\r\nimport { triggerCardEffects } from '../effects/cards';\r\nimport { resolveQueue } from '../utils/queue';\r\nimport { applyTrapsOnCardPlayed } from '../utils/traps';\r\n\r\n// Pure game engine - no React dependencies\r\ntype TraceHooks = { onEnqueue?: (ev: any) => void; onDequeue?: (ev: any) => void };\r\n\r\nexport class GameEngine {\r\n  private state: GameState;\r\n  private hooks?: TraceHooks;\r\n\r\n  constructor(initialState: GameState, hooks?: TraceHooks) {\r\n    this.state = { ...initialState };\r\n    this.hooks = hooks;\r\n  }\r\n\r\n  getState(): GameState {\r\n    return { ...this.state };\r\n  }\r\n\r\n  // Core action: Play a card\r\n  playCard(player: Player, card: Card, targetLane?: 'innen' | 'aussen' | 'sofort'): boolean {\r\n    // Validate AP cost\r\n    if (this.state.actionPoints[player] < 1) {\r\n      console.warn(`Player ${player} has insufficient AP: ${this.state.actionPoints[player]}`);\r\n      return false;\r\n    }\r\n\r\n    // Validate card is in hand\r\n    const handIndex = this.state.hands[player].findIndex(c => c.uid === card.uid);\r\n    if (handIndex === -1) {\r\n      console.warn(`Card ${card.name} not found in player ${player}'s hand`);\r\n      return false;\r\n    }\r\n\r\n    // Remove card from hand\r\n    const [playedCard] = this.state.hands[player].splice(handIndex, 1);\r\n\r\n    // Determine target lane if not specified\r\n    const lane = targetLane || this.determineCardLane(playedCard);\r\n\r\n    // Add card to board\r\n    this.state.board[player][lane].push(playedCard);\r\n\r\n    // Consume AP\r\n    this.state.actionPoints[player] = Math.max(0, this.state.actionPoints[player] - 1);\r\n\r\n    // Trigger card effects\r\n    triggerCardEffects(this.state, player, playedCard);\r\n\r\n    // Check for trap triggers from opponent\r\n    applyTrapsOnCardPlayed(\r\n      this.state,\r\n      player,\r\n      playedCard,\r\n      (event) => {\r\n        if (!this.state._effectQueue) this.state._effectQueue = [];\r\n        this.state._effectQueue.push(event);\r\n      },\r\n      (msg) => {\r\n        this.state.log.push(msg);\r\n      }\r\n    );\r\n\r\n    // Resolve effect queue\r\n    if (this.state._effectQueue && this.state._effectQueue.length > 0) {\r\n      const events = [...this.state._effectQueue];\r\n      this.state._effectQueue = [];\r\n      // Forward tracing hooks from engine to resolver\r\n      resolveQueue(this.state, events, { onEnqueue: this.hooks?.onEnqueue, onDequeue: this.hooks?.onDequeue });\r\n    }\r\n\r\n    console.log(`Card played: ${playedCard.name} by player ${player} in ${lane}`);\r\n    return true;\r\n  }\r\n\r\n  // Determine which lane a card should go to based on its type\r\n  private determineCardLane(card: Card): 'innen' | 'aussen' | 'sofort' {\r\n    switch (card.kind) {\r\n      case 'spec':\r\n        // Check if it's a Sofort-Initiative\r\n        const specialCard = card as any;\r\n        if (specialCard.type && specialCard.type.toLowerCase().includes('sofort-initiative')) {\r\n          return 'sofort';\r\n        }\r\n        return 'innen';\r\n      case 'pol':\r\n        return 'aussen';\r\n      default:\r\n        console.warn(`Unknown card kind: ${card.kind}, defaulting to 'innen'`);\r\n        return 'innen';\r\n    }\r\n  }\r\n\r\n  // Start turn - give player 2 AP\r\n  startTurn(player: Player): void {\r\n    this.state.actionPoints[player] = 2;\r\n    console.log(`Turn started for player ${player}, AP set to 2`);\r\n  }\r\n\r\n  // Draw cards\r\n  drawCards(player: Player, amount: number): void {\r\n    for (let i = 0; i < amount; i++) {\r\n      const topCard = this.state.decks[player].shift();\r\n      if (topCard) {\r\n        this.state.hands[player].push(topCard);\r\n      } else {\r\n        console.warn(`No cards left in deck for player ${player}`);\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  // Get current AP for player\r\n  getActionPoints(player: Player): number {\r\n    return this.state.actionPoints[player] || 0;\r\n  }\r\n\r\n  // Check if player can play a card\r\n  canPlayCard(player: Player): boolean {\r\n    return this.getActionPoints(player) >= 1;\r\n  }\r\n\r\n  // Get player's hand\r\n  getHand(player: Player): Card[] {\r\n    return [...this.state.hands[player]];\r\n  }\r\n\r\n  // Get player's board state\r\n  getBoard(player: Player) {\r\n    return {\r\n      innen: [...this.state.board[player].innen],\r\n      aussen: [...this.state.board[player].aussen],\r\n      sofort: [...this.state.board[player].sofort]\r\n    };\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}