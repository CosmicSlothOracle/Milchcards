{"ast":null,"code":"import { getStrongestGovernment } from './targets';\nimport { logAP, logDraw, logDiscardRandom, logDeactivateRandom, logBuffStrongest, logShield, logDeactivateCard, logInitiativeAura, logAiWeiwei, logPlattformBonus, logOpportunist } from './logs';\nimport { getGlobalRNG } from '../services/rng';\nfunction other(p) {\n  return p === 1 ? 2 : 1;\n}\nfunction logPush(state, msg) {\n  state.log.push(msg);\n}\nfunction strongestGov(state, p) {\n  const row = state.board[p].aussen;\n  if (!row.length) return null;\n  const alive = row.filter(c => !c.deactivated);\n  if (alive.length === 0) return null;\n  return alive.slice().sort((a, b) => b.influence + (b.tempBuffs || 0) - (b.tempDebuffs || 0) - (a.influence + (a.tempBuffs || 0) - (a.tempDebuffs || 0)))[0];\n}\nfunction publicNames(state, p) {\n  return state.board[p].innen.map(c => c.name);\n}\nfunction hasPublic(state, p, name) {\n  return publicNames(state, p).includes(name);\n}\nfunction findCardByUidOnBoard(state, uid) {\n  for (const p of [1, 2]) {\n    for (const lane of ['innen', 'aussen', 'sofort']) {\n      const arr = state.board[p][lane];\n      const hit = arr.find(c => c.uid === uid);\n      if (hit) return hit;\n    }\n  }\n  return null;\n}\nexport function resolveQueue(state, events) {\n  const rng = getGlobalRNG();\n\n  // Single pass FIFO\n  while (events.length) {\n    const ev = events.shift();\n    switch (ev.type) {\n      case 'LOG':\n        {\n          logPush(state, ev.msg);\n          break;\n        }\n      case 'ADD_AP':\n        {\n          const cur = state.actionPoints[ev.player];\n          const next = Math.max(0, cur + ev.amount);\n          state.actionPoints[ev.player] = next;\n          logPush(state, logAP(ev.player, cur, next));\n          break;\n        }\n      case 'DRAW_CARDS':\n        {\n          for (let i = 0; i < ev.amount; i++) {\n            const top = state.decks[ev.player].shift();\n            if (top) {\n              state.hands[ev.player].push(top);\n              logPush(state, logDraw(ev.player, top.name));\n            }\n          }\n          break;\n        }\n      case 'DISCARD_RANDOM_FROM_HAND':\n        {\n          const hand = state.hands[ev.player];\n          for (let i = 0; i < ev.amount && hand.length > 0; i++) {\n            const idx = rng.randomInt(hand.length);\n            const [card] = hand.splice(idx, 1);\n            state.discard.push(card);\n            logPush(state, logDiscardRandom(ev.player, card.name));\n          }\n          break;\n        }\n      case 'DEACTIVATE_RANDOM_HAND':\n        {\n          // Deaktivieren von Handkarten (nicht entfernen)\n          const hand = state.hands[ev.player];\n          const activeCards = hand.filter(c => !c.deactivated);\n          for (let i = 0; i < ev.amount && activeCards.length > 0; i++) {\n            const card = rng.pick(activeCards);\n            if (card) {\n              card.deactivated = true;\n              logPush(state, logDeactivateRandom(ev.player, card.name));\n              // Entferne aus activeCards f√ºr n√§chste Iteration\n              const idx = activeCards.indexOf(card);\n              if (idx > -1) activeCards.splice(idx, 1);\n            }\n          }\n          break;\n        }\n\n      // Legacy cases - removed\n      // SET_DISCOUNT and REFUND_NEXT_INITIATIVE are no longer supported\n      // Use ADD_AP instead\n\n      case 'GRANT_SHIELD':\n        {\n          if (!state.shields) state.shields = new Set();\n          const targetUid = ev.targetUid || 0;\n          state.shields.add(targetUid);\n          logPush(state, logShield(targetUid));\n          break;\n        }\n      case 'DEACTIVATE_CARD':\n        {\n          const card = findCardByUidOnBoard(state, ev.targetUid);\n          if (card) {\n            card.deactivated = true;\n            logPush(state, logDeactivateCard(card.name));\n          }\n          break;\n        }\n      case 'REACTIVATE_CARD':\n        {\n          const card = findCardByUidOnBoard(state, ev.targetUid);\n          if (card) {\n            card.deactivated = false;\n            logPush(state, `üîÑ ${card.name} wurde reaktiviert`);\n          }\n          break;\n        }\n      case 'RETURN_TO_HAND':\n        {\n          const card = findCardByUidOnBoard(state, ev.targetUid);\n          if (card) {\n            // Remove from board\n            for (const p of [1, 2]) {\n              for (const lane of ['innen', 'aussen', 'sofort']) {\n                const idx = state.board[p][lane].findIndex(c => c.uid === ev.targetUid);\n                if (idx !== -1) {\n                  state.board[p][lane].splice(idx, 1);\n                  // Add to hand\n                  state.hands[ev.player].push(card);\n                  logPush(state, `üîÑ ${card.name} wurde zur Hand zur√ºckgegeben`);\n                  break;\n                }\n              }\n            }\n          }\n          break;\n        }\n      case 'CANCEL_CARD':\n        {\n          const card = findCardByUidOnBoard(state, ev.targetUid);\n          if (card) {\n            // Remove from board and add to discard\n            for (const p of [1, 2]) {\n              for (const lane of ['innen', 'aussen', 'sofort']) {\n                const idx = state.board[p][lane].findIndex(c => c.uid === ev.targetUid);\n                if (idx !== -1) {\n                  state.board[p][lane].splice(idx, 1);\n                  state.discard.push(card);\n                  logPush(state, `‚ùå ${card.name} wurde annulliert`);\n                  break;\n                }\n              }\n            }\n          }\n          break;\n        }\n      case 'REGISTER_TRAP':\n        {\n          // This would typically be handled by the trap system\n          logPush(state, `ü™§ Falle registriert: ${ev.key}`);\n          break;\n        }\n      case 'BUFF_STRONGEST_GOV':\n      case 'ADJUST_INFLUENCE':\n        {\n          // Alias auf BUFF_STRONGEST_GOV\n          const player = ev.player;\n          const amount = ev.amount;\n          const tgt = getStrongestGovernment(state, player);\n          if (tgt) {\n            var _state$effectFlags$ot;\n            if (amount >= 0) {\n              tgt.tempBuffs = (tgt.tempBuffs || 0) + amount;\n            } else {\n              tgt.tempDebuffs = (tgt.tempDebuffs || 0) + Math.abs(amount);\n            }\n            logPush(state, logBuffStrongest(player, tgt.name, amount));\n\n            // Opportunist-Spiegelung (falls aktiv beim Gegner)\n            if ((_state$effectFlags$ot = state.effectFlags[other(player)]) !== null && _state$effectFlags$ot !== void 0 && _state$effectFlags$ot.opportunistActive && amount > 0) {\n              const mirror = {\n                type: 'BUFF_STRONGEST_GOV',\n                player: other(player),\n                amount\n              };\n              events.unshift(mirror);\n              logPush(state, logOpportunist(other(player), amount));\n            }\n          }\n          break;\n        }\n      case 'INITIATIVE_ACTIVATED':\n        {\n          const p = ev.player;\n          const opp = other(p);\n\n          // Cluster-3: tempor√§re Auren f√ºr Sofort-Initiativen (namenbasiert, keine Tags)\n          let delta = 0;\n          delta += state.effectFlags[p].initiativeInfluenceBonus || 0; // z.B. +1 (Doudna/Fauci)\n          delta -= state.effectFlags[opp].initiativeInfluencePenaltyForOpponent || 0; // z.B. -1 (Chomsky)\n\n          if (delta !== 0) {\n            events.unshift({\n              type: 'BUFF_STRONGEST_GOV',\n              player: p,\n              amount: delta\n            });\n            logPush(state, logInitiativeAura(p, delta));\n          }\n          if (state.effectFlags[p].initiativeOnPlayDraw1Ap1) {\n            events.unshift({\n              type: 'ADD_AP',\n              player: p,\n              amount: 1\n            });\n            events.unshift({\n              type: 'DRAW_CARDS',\n              player: p,\n              amount: 1\n            });\n            logPush(state, logAiWeiwei());\n          }\n\n          // Plattform: Einmal pro Runde nach Initiative +1 AP, wenn Mark Zuckerberg liegt und nicht verbraucht\n          if (hasPublic(state, p, 'Mark Zuckerberg') && !state.effectFlags[p].markZuckerbergUsed) {\n            state.effectFlags[p].markZuckerbergUsed = true;\n            events.unshift({\n              type: 'ADD_AP',\n              player: p,\n              amount: 1\n            });\n            logPush(state, logPlattformBonus());\n          }\n          break;\n        }\n    }\n  }\n}","map":{"version":3,"names":["getStrongestGovernment","logAP","logDraw","logDiscardRandom","logDeactivateRandom","logBuffStrongest","logShield","logDeactivateCard","logInitiativeAura","logAiWeiwei","logPlattformBonus","logOpportunist","getGlobalRNG","other","p","logPush","state","msg","log","push","strongestGov","row","board","aussen","length","alive","filter","c","deactivated","slice","sort","a","b","influence","tempBuffs","tempDebuffs","publicNames","innen","map","name","hasPublic","includes","findCardByUidOnBoard","uid","lane","arr","hit","find","resolveQueue","events","rng","ev","shift","type","cur","actionPoints","player","next","Math","max","amount","i","top","decks","hands","hand","idx","randomInt","card","splice","discard","activeCards","pick","indexOf","shields","Set","targetUid","add","findIndex","key","tgt","_state$effectFlags$ot","abs","effectFlags","opportunistActive","mirror","unshift","opp","delta","initiativeInfluenceBonus","initiativeInfluencePenaltyForOpponent","initiativeOnPlayDraw1Ap1","markZuckerbergUsed"],"sources":["C:/Users/skank/Videos/Cards/Milchcards/src/utils/queue.ts"],"sourcesContent":["import { GameState, Player, PoliticianCard, Card } from '../types/game';\r\nimport { EffectEvent } from '../types/effects';\r\nimport { getStrongestGovernment } from './targets';\r\nimport { AP_CAP, MAX_DISCOUNT, MAX_REFUND } from '../config/gameConstants';\r\nimport {\r\n  logAP, logDiscount, logRefund, logDraw, logDiscardRandom,\r\n  logDeactivateRandom, logBuffStrongest, logShield, logDeactivateCard,\r\n  logInitiativeAura, logAiWeiwei, logPlattformBonus, logOpportunist\r\n} from './logs';\r\nimport { getGlobalRNG } from '../services/rng';\r\n\r\nfunction other(p: Player): Player { return p === 1 ? 2 : 1; }\r\nfunction logPush(state: GameState, msg: string) { state.log.push(msg); }\r\n\r\nfunction strongestGov(state: GameState, p: Player): PoliticianCard | null {\r\n  const row = state.board[p].aussen as PoliticianCard[];\r\n  if (!row.length) return null;\r\n  const alive = row.filter(c => !c.deactivated);\r\n  if (alive.length === 0) return null;\r\n  return alive.slice().sort((a,b) => (b.influence + (b.tempBuffs||0) - (b.tempDebuffs||0)) - (a.influence + (a.tempBuffs||0) - (a.tempDebuffs||0)))[0];\r\n}\r\n\r\nfunction publicNames(state: GameState, p: Player): string[] {\r\n  return state.board[p].innen.map(c => c.name);\r\n}\r\n\r\nfunction hasPublic(state: GameState, p: Player, name: string): boolean {\r\n  return publicNames(state, p).includes(name);\r\n}\r\n\r\nfunction findCardByUidOnBoard(state: GameState, uid: number): Card | null {\r\n  for (const p of [1,2] as const) {\r\n    for (const lane of ['innen','aussen','sofort'] as const) {\r\n      const arr = state.board[p][lane];\r\n      const hit = arr.find(c => c.uid === uid);\r\n      if (hit) return hit;\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\nexport function resolveQueue(state: GameState, events: EffectEvent[]) {\r\n  const rng = getGlobalRNG();\r\n\r\n  // Single pass FIFO\r\n  while (events.length) {\r\n    const ev = events.shift()!;\r\n\r\n    switch (ev.type) {\r\n      case 'LOG': {\r\n        logPush(state, ev.msg);\r\n        break;\r\n      }\r\n\r\n      case 'ADD_AP': {\r\n        const cur = state.actionPoints[ev.player];\r\n        const next = Math.max(0, cur + ev.amount);\r\n        state.actionPoints[ev.player] = next;\r\n        logPush(state, logAP(ev.player, cur, next));\r\n        break;\r\n      }\r\n\r\n      case 'DRAW_CARDS': {\r\n        for (let i = 0; i < ev.amount; i++) {\r\n          const top = state.decks[ev.player].shift();\r\n          if (top) {\r\n            state.hands[ev.player].push(top);\r\n            logPush(state, logDraw(ev.player, top.name));\r\n          }\r\n        }\r\n        break;\r\n      }\r\n\r\n      case 'DISCARD_RANDOM_FROM_HAND': {\r\n        const hand = state.hands[ev.player];\r\n        for (let i = 0; i < ev.amount && hand.length > 0; i++) {\r\n          const idx = rng.randomInt(hand.length);\r\n          const [card] = hand.splice(idx, 1);\r\n          state.discard.push(card);\r\n          logPush(state, logDiscardRandom(ev.player, card.name));\r\n        }\r\n        break;\r\n      }\r\n\r\n      case 'DEACTIVATE_RANDOM_HAND': {\r\n        // Deaktivieren von Handkarten (nicht entfernen)\r\n        const hand = state.hands[ev.player];\r\n        const activeCards = hand.filter(c => !(c as any).deactivated);\r\n        for (let i = 0; i < ev.amount && activeCards.length > 0; i++) {\r\n          const card = rng.pick(activeCards);\r\n          if (card) {\r\n            (card as any).deactivated = true;\r\n            logPush(state, logDeactivateRandom(ev.player, card.name));\r\n            // Entferne aus activeCards f√ºr n√§chste Iteration\r\n            const idx = activeCards.indexOf(card);\r\n            if (idx > -1) activeCards.splice(idx, 1);\r\n          }\r\n        }\r\n        break;\r\n      }\r\n\r\n      // Legacy cases - removed\r\n      // SET_DISCOUNT and REFUND_NEXT_INITIATIVE are no longer supported\r\n      // Use ADD_AP instead\r\n\r\n      case 'GRANT_SHIELD': {\r\n        if (!state.shields) state.shields = new Set();\r\n        const targetUid = ev.targetUid || 0;\r\n        state.shields.add(targetUid);\r\n        logPush(state, logShield(targetUid));\r\n        break;\r\n      }\r\n\r\n      case 'DEACTIVATE_CARD': {\r\n        const card = findCardByUidOnBoard(state, ev.targetUid);\r\n        if (card) {\r\n          (card as any).deactivated = true;\r\n          logPush(state, logDeactivateCard(card.name));\r\n        }\r\n        break;\r\n      }\r\n\r\n      case 'REACTIVATE_CARD': {\r\n        const card = findCardByUidOnBoard(state, ev.targetUid);\r\n        if (card) {\r\n          (card as any).deactivated = false;\r\n          logPush(state, `üîÑ ${card.name} wurde reaktiviert`);\r\n        }\r\n        break;\r\n      }\r\n\r\n      case 'RETURN_TO_HAND': {\r\n        const card = findCardByUidOnBoard(state, ev.targetUid);\r\n        if (card) {\r\n          // Remove from board\r\n          for (const p of [1, 2] as const) {\r\n            for (const lane of ['innen', 'aussen', 'sofort'] as const) {\r\n              const idx = state.board[p][lane].findIndex(c => c.uid === ev.targetUid);\r\n              if (idx !== -1) {\r\n                state.board[p][lane].splice(idx, 1);\r\n                // Add to hand\r\n                state.hands[ev.player].push(card);\r\n                logPush(state, `üîÑ ${card.name} wurde zur Hand zur√ºckgegeben`);\r\n                break;\r\n              }\r\n            }\r\n          }\r\n        }\r\n        break;\r\n      }\r\n\r\n      case 'CANCEL_CARD': {\r\n        const card = findCardByUidOnBoard(state, ev.targetUid);\r\n        if (card) {\r\n          // Remove from board and add to discard\r\n          for (const p of [1, 2] as const) {\r\n            for (const lane of ['innen', 'aussen', 'sofort'] as const) {\r\n              const idx = state.board[p][lane].findIndex(c => c.uid === ev.targetUid);\r\n              if (idx !== -1) {\r\n                state.board[p][lane].splice(idx, 1);\r\n                state.discard.push(card);\r\n                logPush(state, `‚ùå ${card.name} wurde annulliert`);\r\n                break;\r\n              }\r\n            }\r\n          }\r\n        }\r\n        break;\r\n      }\r\n\r\n      case 'REGISTER_TRAP': {\r\n        // This would typically be handled by the trap system\r\n        logPush(state, `ü™§ Falle registriert: ${ev.key}`);\r\n        break;\r\n      }\r\n\r\n      case 'BUFF_STRONGEST_GOV':\r\n      case 'ADJUST_INFLUENCE': { // Alias auf BUFF_STRONGEST_GOV\r\n        const player = ev.player;\r\n        const amount = (ev as any).amount;\r\n        const tgt = getStrongestGovernment(state, player);\r\n        if (tgt) {\r\n          if (amount >= 0) {\r\n            (tgt as PoliticianCard).tempBuffs = ((tgt as PoliticianCard).tempBuffs || 0) + amount;\r\n          } else {\r\n            (tgt as PoliticianCard).tempDebuffs = ((tgt as PoliticianCard).tempDebuffs || 0) + Math.abs(amount);\r\n          }\r\n          logPush(state, logBuffStrongest(player, tgt.name, amount));\r\n\r\n          // Opportunist-Spiegelung (falls aktiv beim Gegner)\r\n          if (state.effectFlags[other(player)]?.opportunistActive && amount > 0) {\r\n            const mirror = { type: 'BUFF_STRONGEST_GOV', player: other(player), amount } as EffectEvent;\r\n            events.unshift(mirror);\r\n            logPush(state, logOpportunist(other(player), amount));\r\n          }\r\n        }\r\n        break;\r\n      }\r\n\r\n      case 'INITIATIVE_ACTIVATED': {\r\n        const p = ev.player;\r\n        const opp = other(p);\r\n\r\n        // Cluster-3: tempor√§re Auren f√ºr Sofort-Initiativen (namenbasiert, keine Tags)\r\n        let delta = 0;\r\n        delta += state.effectFlags[p].initiativeInfluenceBonus || 0;                 // z.B. +1 (Doudna/Fauci)\r\n        delta -= state.effectFlags[opp].initiativeInfluencePenaltyForOpponent || 0;  // z.B. -1 (Chomsky)\r\n\r\n        if (delta !== 0) {\r\n          events.unshift({ type: 'BUFF_STRONGEST_GOV', player: p, amount: delta });\r\n          logPush(state, logInitiativeAura(p, delta));\r\n        }\r\n\r\n        if (state.effectFlags[p].initiativeOnPlayDraw1Ap1) {\r\n          events.unshift({ type: 'ADD_AP', player: p, amount: 1 });\r\n          events.unshift({ type: 'DRAW_CARDS', player: p, amount: 1 });\r\n          logPush(state, logAiWeiwei());\r\n        }\r\n\r\n        // Plattform: Einmal pro Runde nach Initiative +1 AP, wenn Mark Zuckerberg liegt und nicht verbraucht\r\n        if (hasPublic(state, p, 'Mark Zuckerberg') && !state.effectFlags[p].markZuckerbergUsed) {\r\n          state.effectFlags[p].markZuckerbergUsed = true;\r\n          events.unshift({ type: 'ADD_AP', player: p, amount: 1 });\r\n          logPush(state, logPlattformBonus());\r\n        }\r\n        break;\r\n      }\r\n\r\n\r\n\r\n    }\r\n  }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}