{"ast":null,"code":"import { adjustInfluence } from './cardUtils';\nexport function getStrongestGovCardUid(state, player) {\n  var _sorted$0$uid, _sorted$;\n  const row = state.board[player].aussen;\n  if (!row || row.length === 0) return null;\n  const alive = row.filter(c => !c.deactivated);\n  if (alive.length === 0) return null;\n  const sorted = [...alive].sort((a, b) => {\n    var _b$influence, _a$influence;\n    return ((_b$influence = b.influence) !== null && _b$influence !== void 0 ? _b$influence : 0) - ((_a$influence = a.influence) !== null && _a$influence !== void 0 ? _a$influence : 0);\n  });\n  return (_sorted$0$uid = (_sorted$ = sorted[0]) === null || _sorted$ === void 0 ? void 0 : _sorted$.uid) !== null && _sorted$0$uid !== void 0 ? _sorted$0$uid : null;\n}\n\n// Effect application utilities\nexport function tryApplyNegativeEffect(target, effect, currentRound, source) {\n  // Check if card is protected\n  if (target.protected) {\n    var _target$protectedUnti;\n    if (target.protectedUntil === null || ((_target$protectedUnti = target.protectedUntil) !== null && _target$protectedUnti !== void 0 ? _target$protectedUnti : 0) >= currentRound) {\n      console.log(`${target.name} ist geschützt vor negativen Effekten${source ? ` von ${source}` : ''}`);\n      return false;\n    }\n  }\n\n  // Apply the effect\n  effect();\n  console.log(`Negativer Effekt angewendet auf ${target.name}${source ? ` von ${source}` : ''}`);\n  return true;\n}\n\n// Effect Queue Management\nexport class EffectQueueManager {\n  static getPriority(type) {\n    switch (type) {\n      case 'intervention':\n        return 1;\n      // Höchste Priorität\n      case 'sofort':\n        return 2;\n      case 'passiv':\n        return 3;\n      case 'aktiv':\n        return 4;\n      // Niedrigste Priorität\n      default:\n        return 5;\n    }\n  }\n  static initializeQueue() {\n    return {\n      items: [],\n      processing: false,\n      nextId: 1\n    };\n  }\n  static addEffect(queue, type, source, effect, description, player, round, target) {\n    const item = {\n      id: `effect_${queue.nextId}`,\n      type,\n      priority: this.getPriority(type),\n      source,\n      target,\n      effect,\n      description,\n      player,\n      round\n    };\n    const newItems = [...queue.items, item].sort((a, b) => a.priority - b.priority);\n    return {\n      ...queue,\n      items: newItems,\n      nextId: queue.nextId + 1\n    };\n  }\n  static processQueue(queue, state, log) {\n    if (queue.processing || queue.items.length === 0) {\n      return [queue, state];\n    }\n    const newQueue = {\n      ...queue,\n      processing: true\n    };\n    let newState = {\n      ...state\n    };\n\n    // Process all effects in priority order\n    newQueue.items.forEach(item => {\n      try {\n        log(`Effekt ausgeführt: ${item.description}`);\n        item.effect();\n      } catch (error) {\n        console.error(`Fehler bei Effekt-Ausführung: ${item.description}`, error);\n      }\n    });\n\n    // Clear processed effects\n    const finalQueue = {\n      ...newQueue,\n      items: [],\n      processing: false\n    };\n    return [finalQueue, newState];\n  }\n}\n\n// Active Abilities Management\nexport class ActiveAbilitiesManager {\n  static getAvailableAbilities(player, state) {\n    const abilities = [];\n    const board = state.board[player];\n    const allCards = [...board.innen, ...board.aussen].filter(c => c.kind === 'pol');\n    allCards.forEach(card => {\n      if (card.deactivated || card._activeUsed) return;\n\n      // Hardliner ability (Leadership cards)\n      if (card.tag === 'Leadership' && !card._activeUsed) {\n        abilities.push({\n          id: `hardliner_${card.uid}`,\n          name: 'Hardliner',\n          description: 'Reduziere Einfluss einer gegnerischen Karte um 2',\n          cardName: card.name,\n          cooldown: 1,\n          usedThisRound: card._activeUsed,\n          type: 'hardliner',\n          cost: 1\n        });\n      }\n\n      // Oligarch influence boost\n      const oligarchNames = ['Elon Musk', 'Bill Gates', 'George Soros', 'Warren Buffett', 'Mukesh Ambani', 'Jeff Bezos'];\n      if (oligarchNames.includes(card.name) && !card._activeUsed) {\n        abilities.push({\n          id: `oligarch_${card.uid}`,\n          name: 'Oligarchen-Einfluss',\n          description: 'Erhöhe Einfluss einer eigenen Regierungskarte um 2',\n          cardName: card.name,\n          cooldown: 1,\n          usedThisRound: card._activeUsed,\n          type: 'oligarch_influence',\n          cost: 1\n        });\n      }\n\n      // Putin double intervention\n      if (card.name === 'Vladimir Putin' && !card._activeUsed) {\n        abilities.push({\n          id: `putin_double_${card.uid}`,\n          name: 'Doppelte Intervention',\n          description: 'Spiele 2 Interventionen gleichzeitig',\n          cardName: card.name,\n          cooldown: 1,\n          usedThisRound: card._activeUsed,\n          type: 'putin_double_intervention',\n          cost: 2\n        });\n      }\n\n      // Diplomat influence transfer\n      if (card.tag === 'Diplomat' && !card._activeUsed) {\n        abilities.push({\n          id: `diplomat_transfer_${card.uid}`,\n          name: 'Einfluss-Transfer',\n          description: 'Transferiere Einfluss zwischen eigenen Regierungskarten',\n          cardName: card.name,\n          cooldown: 1,\n          usedThisRound: card._activeUsed,\n          type: 'diplomat_transfer',\n          cost: 0\n        });\n      }\n    });\n    return abilities;\n  }\n  static canUseAbility(ability, player, state) {\n    // Check if player has enough AP\n    if ((ability.cost || 0) > state.actionPoints[player]) return false;\n\n    // Check if ability was already used this round\n    if (ability.usedThisRound) return false;\n\n    // Check if the source card is still available and not deactivated\n    const board = state.board[player];\n    const allCards = [...board.innen, ...board.aussen].filter(c => c.kind === 'pol');\n    const sourceCard = allCards.find(c => ability.id.includes(c.uid.toString()));\n    if (!sourceCard || sourceCard.deactivated || sourceCard._activeUsed) return false;\n    return true;\n  }\n  static executeAbility(ability, select, state) {\n    const newState = {\n      ...state\n    };\n    switch (ability.type) {\n      case 'hardliner':\n        if (select.targetCard) {\n          tryApplyNegativeEffect(select.targetCard, () => adjustInfluence(select.targetCard, -2, 'Hardliner'), state.round, 'Hardliner');\n        }\n        break;\n      case 'oligarch_influence':\n        if (select.targetCard) {\n          adjustInfluence(select.targetCard, 2, 'Oligarchen-Einfluss');\n        }\n        break;\n      case 'diplomat_transfer':\n        // Handled separately in useGameEffects\n        break;\n      case 'putin_double_intervention':\n        // Handled by executePutinDoubleIntervention\n        break;\n    }\n\n    // Mark ability as used\n    select.actorCard._activeUsed = true;\n\n    // Deduct AP cost\n    newState.actionPoints[select.actorPlayer] -= ability.cost || 0;\n    return newState;\n  }\n  static executePutinDoubleIntervention(state, player, interventionCardIds, log) {\n    const newState = {\n      ...state\n    };\n\n    // Find Putin card\n    const board = newState.board[player];\n    const allCards = [...board.innen, ...board.aussen].filter(c => c.kind === 'pol');\n    const putin = allCards.find(c => c.name === 'Vladimir Putin');\n    if (!putin || putin.deactivated || putin._activeUsed) {\n      return state;\n    }\n\n    // Find intervention cards in hand\n    const hand = [...newState.hands[player]];\n    const interventions = interventionCardIds.map(id => hand.find(c => c.uid === id && c.kind === 'spec')).filter(c => c !== undefined);\n    if (interventions.length < 2) {\n      return state;\n    }\n\n    // Play both interventions to traps\n    const newHand = hand.filter(c => !interventionCardIds.includes(c.uid));\n    const newTraps = [...newState.traps[player], ...interventions];\n    newState.hands[player] = newHand;\n    newState.traps[player] = newTraps;\n\n    // Mark Putin as used and deduct AP\n    putin._activeUsed = true;\n    newState.actionPoints[player] -= 2;\n    log(`Putin setzt doppelte Intervention: ${interventions.map(i => i.name).join(' & ')}`);\n    return newState;\n  }\n}\n\n// Effect condition checking\nexport function hasLeadershipCard(player, state) {\n  const gov = state.board[player].aussen;\n  const names = ['Justin Trudeau'];\n  return gov.some(c => c.kind === 'pol' && names.includes(c.name) && !c.deactivated);\n}\nexport function hasMovementCard(player, state) {\n  const pub = state.board[player].innen;\n  const names = ['Greta Thunberg', 'Malala Yousafzai', 'Ai Weiwei', 'Alexei Navalny'];\n  return pub.some(c => c.kind === 'pol' && names.includes(c.name) && !c.deactivated);\n}\nexport function hasPlatformCard(player, state) {\n  const pub = state.board[player].innen;\n  const names = ['Mark Zuckerberg', 'Tim Cook', 'Jack Ma', 'Zhang Yiming'];\n  return pub.some(c => c.kind === 'pol' && names.includes(c.name) && !c.deactivated);\n}\nexport function hasDiplomatCard(player, state) {\n  const gov = state.board[player].aussen;\n  const names = ['Joschka Fischer', 'Sergey Lavrov', 'Ursula von der Leyen', 'Jens Stoltenberg'];\n  return gov.some(c => c.kind === 'pol' && names.includes(c.name) && !c.deactivated);\n}\nexport function hasInfluenceTransferBlock(player, state) {\n  const govSlot = state.permanentSlots[player].government;\n  if (!govSlot || govSlot.kind !== 'spec') return false;\n  const spec = govSlot;\n  return ['Napoleon Komplex'].includes(spec.name);\n}","map":{"version":3,"names":["adjustInfluence","getStrongestGovCardUid","state","player","_sorted$0$uid","_sorted$","row","board","aussen","length","alive","filter","c","deactivated","sorted","sort","a","b","_b$influence","_a$influence","influence","uid","tryApplyNegativeEffect","target","effect","currentRound","source","protected","_target$protectedUnti","protectedUntil","console","log","name","EffectQueueManager","getPriority","type","initializeQueue","items","processing","nextId","addEffect","queue","description","round","item","id","priority","newItems","processQueue","newQueue","newState","forEach","error","finalQueue","ActiveAbilitiesManager","getAvailableAbilities","abilities","allCards","innen","kind","card","_activeUsed","tag","push","cardName","cooldown","usedThisRound","cost","oligarchNames","includes","canUseAbility","ability","actionPoints","sourceCard","find","toString","executeAbility","select","targetCard","actorCard","actorPlayer","executePutinDoubleIntervention","interventionCardIds","putin","hand","hands","interventions","map","undefined","newHand","newTraps","traps","i","join","hasLeadershipCard","gov","names","some","hasMovementCard","pub","hasPlatformCard","hasDiplomatCard","hasInfluenceTransferBlock","govSlot","permanentSlots","government","spec"],"sources":["C:/Users/skank/Videos/Cards/Milchcards/src/utils/effectUtils.ts"],"sourcesContent":["import { Card, PoliticianCard, SpecialCard, GameState, Player, Lane, EffectQueue, EffectQueueItem, ActiveAbility, AbilitySelect } from '../types/game';\nimport { adjustInfluence } from './cardUtils';\n\nexport function getStrongestGovCardUid(state: GameState, player: Player): number | null {\n  const row = state.board[player].aussen as PoliticianCard[];\n  if (!row || row.length === 0) return null;\n  const alive = row.filter(c => !c.deactivated);\n  if (alive.length === 0) return null;\n  const sorted = [...alive].sort((a, b) => (b.influence ?? 0) - (a.influence ?? 0));\n  return sorted[0]?.uid ?? null;\n}\n\n// Effect application utilities\nexport function tryApplyNegativeEffect(\n  target: PoliticianCard,\n  effect: () => void,\n  currentRound: number,\n  source?: string\n): boolean {\n  // Check if card is protected\n  if (target.protected) {\n    if (target.protectedUntil === null || (target.protectedUntil ?? 0) >= currentRound) {\n      console.log(`${target.name} ist geschützt vor negativen Effekten${source ? ` von ${source}` : ''}`);\n      return false;\n    }\n  }\n\n  // Apply the effect\n  effect();\n  console.log(`Negativer Effekt angewendet auf ${target.name}${source ? ` von ${source}` : ''}`);\n  return true;\n}\n\n// Effect Queue Management\nexport class EffectQueueManager {\n  private static getPriority(type: EffectQueueItem['type']): number {\n    switch (type) {\n      case 'intervention': return 1; // Höchste Priorität\n      case 'sofort': return 2;\n      case 'passiv': return 3;\n      case 'aktiv': return 4; // Niedrigste Priorität\n      default: return 5;\n    }\n  }\n\n  static initializeQueue(): EffectQueue {\n    return {\n      items: [],\n      processing: false,\n      nextId: 1\n    };\n  }\n\n  static addEffect(\n    queue: EffectQueue,\n    type: EffectQueueItem['type'],\n    source: Card,\n    effect: () => void,\n    description: string,\n    player: Player,\n    round: number,\n    target?: Card\n  ): EffectQueue {\n    const item: EffectQueueItem = {\n      id: `effect_${queue.nextId}`,\n      type,\n      priority: this.getPriority(type),\n      source,\n      target,\n      effect,\n      description,\n      player,\n      round\n    };\n\n    const newItems = [...queue.items, item].sort((a, b) => a.priority - b.priority);\n\n    return {\n      ...queue,\n      items: newItems,\n      nextId: queue.nextId + 1\n    };\n  }\n\n  static processQueue(\n    queue: EffectQueue,\n    state: GameState,\n    log: (msg: string) => void\n  ): [EffectQueue, GameState] {\n    if (queue.processing || queue.items.length === 0) {\n      return [queue, state];\n    }\n\n    const newQueue = { ...queue, processing: true };\n    let newState = { ...state };\n\n    // Process all effects in priority order\n    newQueue.items.forEach(item => {\n      try {\n        log(`Effekt ausgeführt: ${item.description}`);\n        item.effect();\n      } catch (error) {\n        console.error(`Fehler bei Effekt-Ausführung: ${item.description}`, error);\n      }\n    });\n\n    // Clear processed effects\n    const finalQueue = {\n      ...newQueue,\n      items: [],\n      processing: false\n    };\n\n    return [finalQueue, newState];\n  }\n}\n\n// Active Abilities Management\nexport class ActiveAbilitiesManager {\n  static getAvailableAbilities(player: Player, state: GameState): ActiveAbility[] {\n    const abilities: ActiveAbility[] = [];\n    const board = state.board[player];\n    const allCards = [...board.innen, ...board.aussen].filter(c => c.kind === 'pol') as PoliticianCard[];\n\n    allCards.forEach(card => {\n      if (card.deactivated || card._activeUsed) return;\n\n      // Hardliner ability (Leadership cards)\n      if (card.tag === 'Leadership' && !card._activeUsed) {\n        abilities.push({\n          id: `hardliner_${card.uid}`,\n          name: 'Hardliner',\n          description: 'Reduziere Einfluss einer gegnerischen Karte um 2',\n          cardName: card.name,\n          cooldown: 1,\n          usedThisRound: card._activeUsed,\n          type: 'hardliner',\n          cost: 1\n        });\n      }\n\n      // Oligarch influence boost\n      const oligarchNames = ['Elon Musk', 'Bill Gates', 'George Soros', 'Warren Buffett', 'Mukesh Ambani', 'Jeff Bezos'];\n      if (oligarchNames.includes(card.name) && !card._activeUsed) {\n        abilities.push({\n          id: `oligarch_${card.uid}`,\n          name: 'Oligarchen-Einfluss',\n          description: 'Erhöhe Einfluss einer eigenen Regierungskarte um 2',\n          cardName: card.name,\n          cooldown: 1,\n          usedThisRound: card._activeUsed,\n          type: 'oligarch_influence',\n          cost: 1\n        });\n      }\n\n      // Putin double intervention\n      if (card.name === 'Vladimir Putin' && !card._activeUsed) {\n        abilities.push({\n          id: `putin_double_${card.uid}`,\n          name: 'Doppelte Intervention',\n          description: 'Spiele 2 Interventionen gleichzeitig',\n          cardName: card.name,\n          cooldown: 1,\n          usedThisRound: card._activeUsed,\n          type: 'putin_double_intervention',\n          cost: 2\n        });\n      }\n\n      // Diplomat influence transfer\n      if (card.tag === 'Diplomat' && !card._activeUsed) {\n        abilities.push({\n          id: `diplomat_transfer_${card.uid}`,\n          name: 'Einfluss-Transfer',\n          description: 'Transferiere Einfluss zwischen eigenen Regierungskarten',\n          cardName: card.name,\n          cooldown: 1,\n          usedThisRound: card._activeUsed,\n          type: 'diplomat_transfer',\n          cost: 0\n        });\n      }\n    });\n\n    return abilities;\n  }\n\n  static canUseAbility(ability: ActiveAbility, player: Player, state: GameState): boolean {\n    // Check if player has enough AP\n    if ((ability.cost || 0) > state.actionPoints[player]) return false;\n\n    // Check if ability was already used this round\n    if (ability.usedThisRound) return false;\n\n    // Check if the source card is still available and not deactivated\n    const board = state.board[player];\n    const allCards = [...board.innen, ...board.aussen].filter(c => c.kind === 'pol') as PoliticianCard[];\n    const sourceCard = allCards.find(c => ability.id.includes(c.uid.toString()));\n\n    if (!sourceCard || sourceCard.deactivated || sourceCard._activeUsed) return false;\n\n    return true;\n  }\n\n  static executeAbility(ability: ActiveAbility, select: AbilitySelect, state: GameState): GameState {\n    const newState = { ...state };\n\n    switch (ability.type) {\n      case 'hardliner':\n        if (select.targetCard) {\n          tryApplyNegativeEffect(\n            select.targetCard,\n            () => adjustInfluence(select.targetCard!, -2, 'Hardliner'),\n            state.round,\n            'Hardliner'\n          );\n        }\n        break;\n\n      case 'oligarch_influence':\n        if (select.targetCard) {\n          adjustInfluence(select.targetCard, 2, 'Oligarchen-Einfluss');\n        }\n        break;\n\n      case 'diplomat_transfer':\n        // Handled separately in useGameEffects\n        break;\n\n      case 'putin_double_intervention':\n        // Handled by executePutinDoubleIntervention\n        break;\n    }\n\n    // Mark ability as used\n    select.actorCard._activeUsed = true;\n\n    // Deduct AP cost\n    newState.actionPoints[select.actorPlayer] -= (ability.cost || 0);\n\n    return newState;\n  }\n\n  static executePutinDoubleIntervention(\n    state: GameState,\n    player: Player,\n    interventionCardIds: number[],\n    log: (msg: string) => void\n  ): GameState {\n    const newState = { ...state };\n\n    // Find Putin card\n    const board = newState.board[player];\n    const allCards = [...board.innen, ...board.aussen].filter(c => c.kind === 'pol') as PoliticianCard[];\n    const putin = allCards.find(c => c.name === 'Vladimir Putin');\n\n    if (!putin || putin.deactivated || putin._activeUsed) {\n      return state;\n    }\n\n    // Find intervention cards in hand\n    const hand = [...newState.hands[player]];\n    const interventions = interventionCardIds.map(id =>\n      hand.find(c => c.uid === id && c.kind === 'spec')\n    ).filter(c => c !== undefined) as SpecialCard[];\n\n    if (interventions.length < 2) {\n      return state;\n    }\n\n    // Play both interventions to traps\n    const newHand = hand.filter(c => !interventionCardIds.includes(c.uid));\n    const newTraps = [...newState.traps[player], ...interventions];\n\n    newState.hands[player] = newHand;\n    newState.traps[player] = newTraps;\n\n    // Mark Putin as used and deduct AP\n    putin._activeUsed = true;\n    newState.actionPoints[player] -= 2;\n\n    log(`Putin setzt doppelte Intervention: ${interventions.map(i => i.name).join(' & ')}`);\n\n    return newState;\n  }\n}\n\n// Effect condition checking\nexport function hasLeadershipCard(player: Player, state: GameState): boolean {\n  const gov = state.board[player].aussen;\n  const names = ['Justin Trudeau'];\n  return gov.some(c => c.kind === 'pol' && names.includes(c.name) && !(c as PoliticianCard).deactivated);\n}\n\nexport function hasMovementCard(player: Player, state: GameState): boolean {\n  const pub = state.board[player].innen;\n  const names = ['Greta Thunberg', 'Malala Yousafzai', 'Ai Weiwei', 'Alexei Navalny'];\n  return pub.some(c => c.kind === 'pol' && names.includes(c.name) && !(c as PoliticianCard).deactivated);\n}\n\nexport function hasPlatformCard(player: Player, state: GameState): boolean {\n  const pub = state.board[player].innen;\n  const names = ['Mark Zuckerberg', 'Tim Cook', 'Jack Ma', 'Zhang Yiming'];\n  return pub.some(c => c.kind === 'pol' && names.includes(c.name) && !(c as PoliticianCard).deactivated);\n}\n\nexport function hasDiplomatCard(player: Player, state: GameState): boolean {\n  const gov = state.board[player].aussen;\n  const names = ['Joschka Fischer', 'Sergey Lavrov', 'Ursula von der Leyen', 'Jens Stoltenberg'];\n  return gov.some(c => c.kind === 'pol' && names.includes(c.name) && !(c as PoliticianCard).deactivated);\n}\n\nexport function hasInfluenceTransferBlock(player: Player, state: GameState): boolean {\n  const govSlot = state.permanentSlots[player].government;\n  if (!govSlot || govSlot.kind !== 'spec') return false;\n  const spec = govSlot as SpecialCard;\n  return ['Napoleon Komplex'].includes(spec.name);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}