{"ast":null,"code":"export function registerTrap(state,player,key){if(!state.traps)state.traps={1:[],2:[]};const list=state.traps[player];if(!Array.isArray(list))state.traps[player]=[];state.traps[player].push({owner:player,key});}export function applyTrapsOnCardPlayed(state,playedBy,card,enqueue,log){var _state$traps,_card$tags,_card$tags2;const opp=playedBy===1?2:1;const traps=(_state$traps=state.traps)===null||_state$traps===void 0?void 0:_state$traps[opp];if(!traps||traps.length===0)return;const isInitiative=card.type==='initiative';const isPublic=card.type==='public';const isGovernment=card.type==='government';const isMediaLike=((_card$tags=card.tags)===null||_card$tags===void 0?void 0:_card$tags.includes('Media'))||((_card$tags2=card.tags)===null||_card$tags2===void 0?void 0:_card$tags2.includes('Platform'));traps.forEach(t=>{switch(t.key){// bereits live benutzt\ncase'trap.fake_news.deactivate_media':if(isMediaLike&&card.uid!=null){enqueue({type:'DEACTIVATE_CARD',player:opp,targetUid:card.uid});log('Trap: Fake News – deactivated media/platform card.');}break;// neu: Initiative canceln (sofort beim Ausspielen der Initiative)\ncase'trap.legal_injunction.cancel_next_initiative':if(isInitiative&&card.uid!=null){enqueue({type:'CANCEL_CARD',player:opp,targetUid:card.uid});log('Trap: Legal Injunction – cancelled initiative.');}break;// neu: Karte zurück auf Hand (egal welcher Typ)\ncase'trap.whistleblower.return_last_played':if(card.uid!=null){enqueue({type:'RETURN_TO_HAND',player:playedBy,targetUid:card.uid});log('Trap: Whistleblower – returned played card to hand.');}break;// neu: Gegner discards 2 bei nächstem Play\ncase'trap.data_breach.opp_discard2':enqueue({type:'DISCARD_RANDOM_FROM_HAND',player:playedBy===1?2:1,amount:2});log('Trap: Data Breach – opponent discards 2.');break;// neu: Public deaktivieren\ncase'trap.media_blackout.deactivate_public':if(isPublic&&card.uid!=null){enqueue({type:'DEACTIVATE_CARD',player:opp,targetUid:card.uid});log('Trap: Media Blackout – deactivated public card.');}break;// neu: AP -2 für Gegner beim nächsten Play\ncase'trap.budget_freeze.opp_ap_minus2':enqueue({type:'ADD_AP',player:playedBy,amount:-2});log('Trap: Budget Freeze – opponent AP -2.');break;// neu: Government deaktivieren\ncase'trap.sabotage.deactivate_gov':if(isGovernment&&card.uid!=null){enqueue({type:'DEACTIVATE_CARD',player:opp,targetUid:card.uid});log('Trap: Sabotage – deactivated government card.');}break;default:break;}});// OPTIONAL: one-shot Traps löschen – wenn gewünscht:\n// (state.traps as any)[opp] = (state.traps as any)[opp].filter(t => t.key !== '...');\n// (Kannst du später feingranular per Key entscheiden.)\n}","map":{"version":3,"names":["registerTrap","state","player","key","traps","list","Array","isArray","push","owner","applyTrapsOnCardPlayed","playedBy","card","enqueue","log","_state$traps","_card$tags","_card$tags2","opp","length","isInitiative","type","isPublic","isGovernment","isMediaLike","tags","includes","forEach","t","uid","targetUid","amount"],"sources":["C:/Users/skank/Videos/Cards/Milchcards/src/utils/traps.ts"],"sourcesContent":["import type { GameState, Player, Card } from '../types/game';\r\nimport type { EffectEvent } from '../types/effects';\r\n\r\nexport function registerTrap(state: GameState, player: Player, key: string) {\r\n  if (!state.traps) state.traps = { 1: [], 2: [] } as any;\r\n  const list = (state.traps as any)[player] as Array<{ owner: Player; key: string }>;\r\n  if (!Array.isArray(list)) (state.traps as any)[player] = [];\r\n  (state.traps as any)[player].push({ owner: player, key });\r\n}\r\n\r\nexport function applyTrapsOnCardPlayed(\r\n  state: GameState,\r\n  playedBy: Player,\r\n  card: Card,\r\n  enqueue: (e: EffectEvent) => void,\r\n  log: (m: string) => void\r\n) {\r\n  const opp: Player = playedBy === 1 ? 2 : 1;\r\n  const traps = (state.traps as any)?.[opp] as Array<{ owner: Player; key: string }> | undefined;\r\n  if (!traps || traps.length === 0) return;\r\n\r\n  const isInitiative = card.type === 'initiative';\r\n  const isPublic = card.type === 'public';\r\n  const isGovernment = card.type === 'government';\r\n  const isMediaLike = card.tags?.includes('Media') || card.tags?.includes('Platform');\r\n\r\n  traps.forEach(t => {\r\n    switch (t.key) {\r\n      // bereits live benutzt\r\n      case 'trap.fake_news.deactivate_media':\r\n        if (isMediaLike && (card as any).uid != null) {\r\n          enqueue({ type: 'DEACTIVATE_CARD', player: opp, targetUid: (card as any).uid });\r\n          log('Trap: Fake News – deactivated media/platform card.');\r\n        }\r\n        break;\r\n\r\n      // neu: Initiative canceln (sofort beim Ausspielen der Initiative)\r\n      case 'trap.legal_injunction.cancel_next_initiative':\r\n        if (isInitiative && (card as any).uid != null) {\r\n          enqueue({ type: 'CANCEL_CARD', player: opp, targetUid: (card as any).uid });\r\n          log('Trap: Legal Injunction – cancelled initiative.');\r\n        }\r\n        break;\r\n\r\n      // neu: Karte zurück auf Hand (egal welcher Typ)\r\n      case 'trap.whistleblower.return_last_played':\r\n        if ((card as any).uid != null) {\r\n          enqueue({ type: 'RETURN_TO_HAND', player: playedBy, targetUid: (card as any).uid });\r\n          log('Trap: Whistleblower – returned played card to hand.');\r\n        }\r\n        break;\r\n\r\n      // neu: Gegner discards 2 bei nächstem Play\r\n      case 'trap.data_breach.opp_discard2':\r\n        enqueue({ type: 'DISCARD_RANDOM_FROM_HAND', player: playedBy === 1 ? 2 : 1, amount: 2 });\r\n        log('Trap: Data Breach – opponent discards 2.');\r\n        break;\r\n\r\n      // neu: Public deaktivieren\r\n      case 'trap.media_blackout.deactivate_public':\r\n        if (isPublic && (card as any).uid != null) {\r\n          enqueue({ type: 'DEACTIVATE_CARD', player: opp, targetUid: (card as any).uid });\r\n          log('Trap: Media Blackout – deactivated public card.');\r\n        }\r\n        break;\r\n\r\n      // neu: AP -2 für Gegner beim nächsten Play\r\n      case 'trap.budget_freeze.opp_ap_minus2':\r\n        enqueue({ type: 'ADD_AP', player: playedBy, amount: -2 });\r\n        log('Trap: Budget Freeze – opponent AP -2.');\r\n        break;\r\n\r\n      // neu: Government deaktivieren\r\n      case 'trap.sabotage.deactivate_gov':\r\n        if (isGovernment && (card as any).uid != null) {\r\n          enqueue({ type: 'DEACTIVATE_CARD', player: opp, targetUid: (card as any).uid });\r\n          log('Trap: Sabotage – deactivated government card.');\r\n        }\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n  });\r\n\r\n  // OPTIONAL: one-shot Traps löschen – wenn gewünscht:\r\n  // (state.traps as any)[opp] = (state.traps as any)[opp].filter(t => t.key !== '...');\r\n  // (Kannst du später feingranular per Key entscheiden.)\r\n}"],"mappings":"AAGA,MAAO,SAAS,CAAAA,YAAYA,CAACC,KAAgB,CAAEC,MAAc,CAAEC,GAAW,CAAE,CAC1E,GAAI,CAACF,KAAK,CAACG,KAAK,CAAEH,KAAK,CAACG,KAAK,CAAG,CAAE,CAAC,CAAE,EAAE,CAAE,CAAC,CAAE,EAAG,CAAQ,CACvD,KAAM,CAAAC,IAAI,CAAIJ,KAAK,CAACG,KAAK,CAASF,MAAM,CAA0C,CAClF,GAAI,CAACI,KAAK,CAACC,OAAO,CAACF,IAAI,CAAC,CAAGJ,KAAK,CAACG,KAAK,CAASF,MAAM,CAAC,CAAG,EAAE,CAC1DD,KAAK,CAACG,KAAK,CAASF,MAAM,CAAC,CAACM,IAAI,CAAC,CAAEC,KAAK,CAAEP,MAAM,CAAEC,GAAI,CAAC,CAAC,CAC3D,CAEA,MAAO,SAAS,CAAAO,sBAAsBA,CACpCT,KAAgB,CAChBU,QAAgB,CAChBC,IAAU,CACVC,OAAiC,CACjCC,GAAwB,CACxB,KAAAC,YAAA,CAAAC,UAAA,CAAAC,WAAA,CACA,KAAM,CAAAC,GAAW,CAAGP,QAAQ,GAAK,CAAC,CAAG,CAAC,CAAG,CAAC,CAC1C,KAAM,CAAAP,KAAK,EAAAW,YAAA,CAAId,KAAK,CAACG,KAAK,UAAAW,YAAA,iBAAZA,YAAA,CAAuBG,GAAG,CAAsD,CAC9F,GAAI,CAACd,KAAK,EAAIA,KAAK,CAACe,MAAM,GAAK,CAAC,CAAE,OAElC,KAAM,CAAAC,YAAY,CAAGR,IAAI,CAACS,IAAI,GAAK,YAAY,CAC/C,KAAM,CAAAC,QAAQ,CAAGV,IAAI,CAACS,IAAI,GAAK,QAAQ,CACvC,KAAM,CAAAE,YAAY,CAAGX,IAAI,CAACS,IAAI,GAAK,YAAY,CAC/C,KAAM,CAAAG,WAAW,CAAG,EAAAR,UAAA,CAAAJ,IAAI,CAACa,IAAI,UAAAT,UAAA,iBAATA,UAAA,CAAWU,QAAQ,CAAC,OAAO,CAAC,KAAAT,WAAA,CAAIL,IAAI,CAACa,IAAI,UAAAR,WAAA,iBAATA,WAAA,CAAWS,QAAQ,CAAC,UAAU,CAAC,EAEnFtB,KAAK,CAACuB,OAAO,CAACC,CAAC,EAAI,CACjB,OAAQA,CAAC,CAACzB,GAAG,EACX;AACA,IAAK,iCAAiC,CACpC,GAAIqB,WAAW,EAAKZ,IAAI,CAASiB,GAAG,EAAI,IAAI,CAAE,CAC5ChB,OAAO,CAAC,CAAEQ,IAAI,CAAE,iBAAiB,CAAEnB,MAAM,CAAEgB,GAAG,CAAEY,SAAS,CAAGlB,IAAI,CAASiB,GAAI,CAAC,CAAC,CAC/Ef,GAAG,CAAC,oDAAoD,CAAC,CAC3D,CACA,MAEF;AACA,IAAK,8CAA8C,CACjD,GAAIM,YAAY,EAAKR,IAAI,CAASiB,GAAG,EAAI,IAAI,CAAE,CAC7ChB,OAAO,CAAC,CAAEQ,IAAI,CAAE,aAAa,CAAEnB,MAAM,CAAEgB,GAAG,CAAEY,SAAS,CAAGlB,IAAI,CAASiB,GAAI,CAAC,CAAC,CAC3Ef,GAAG,CAAC,gDAAgD,CAAC,CACvD,CACA,MAEF;AACA,IAAK,uCAAuC,CAC1C,GAAKF,IAAI,CAASiB,GAAG,EAAI,IAAI,CAAE,CAC7BhB,OAAO,CAAC,CAAEQ,IAAI,CAAE,gBAAgB,CAAEnB,MAAM,CAAES,QAAQ,CAAEmB,SAAS,CAAGlB,IAAI,CAASiB,GAAI,CAAC,CAAC,CACnFf,GAAG,CAAC,qDAAqD,CAAC,CAC5D,CACA,MAEF;AACA,IAAK,+BAA+B,CAClCD,OAAO,CAAC,CAAEQ,IAAI,CAAE,0BAA0B,CAAEnB,MAAM,CAAES,QAAQ,GAAK,CAAC,CAAG,CAAC,CAAG,CAAC,CAAEoB,MAAM,CAAE,CAAE,CAAC,CAAC,CACxFjB,GAAG,CAAC,0CAA0C,CAAC,CAC/C,MAEF;AACA,IAAK,uCAAuC,CAC1C,GAAIQ,QAAQ,EAAKV,IAAI,CAASiB,GAAG,EAAI,IAAI,CAAE,CACzChB,OAAO,CAAC,CAAEQ,IAAI,CAAE,iBAAiB,CAAEnB,MAAM,CAAEgB,GAAG,CAAEY,SAAS,CAAGlB,IAAI,CAASiB,GAAI,CAAC,CAAC,CAC/Ef,GAAG,CAAC,iDAAiD,CAAC,CACxD,CACA,MAEF;AACA,IAAK,kCAAkC,CACrCD,OAAO,CAAC,CAAEQ,IAAI,CAAE,QAAQ,CAAEnB,MAAM,CAAES,QAAQ,CAAEoB,MAAM,CAAE,CAAC,CAAE,CAAC,CAAC,CACzDjB,GAAG,CAAC,uCAAuC,CAAC,CAC5C,MAEF;AACA,IAAK,8BAA8B,CACjC,GAAIS,YAAY,EAAKX,IAAI,CAASiB,GAAG,EAAI,IAAI,CAAE,CAC7ChB,OAAO,CAAC,CAAEQ,IAAI,CAAE,iBAAiB,CAAEnB,MAAM,CAAEgB,GAAG,CAAEY,SAAS,CAAGlB,IAAI,CAASiB,GAAI,CAAC,CAAC,CAC/Ef,GAAG,CAAC,+CAA+C,CAAC,CACtD,CACA,MAEF,QACE,MACJ,CACF,CAAC,CAAC,CAEF;AACA;AACA;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}