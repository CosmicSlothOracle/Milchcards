{"ast":null,"code":"function other(p){return p===1?2:1;}export function startOfTurn(state,p){var _state$board$p$innen,_state$board$p,_state$board$p$aussen,_state$board$p2;// AP reset\nstate.actionPoints[p]=2;// Flags reset\nconst f=state.effectFlags[p];// Flags reset\nconst prevZuck=f.zuckSpent;f.zuckOnceAp=false;f.zuckSpent=false;f.aiWeiweiOnActivate=false;f.elonOnceAp=false;f.elonSpent=false;f.gatesNextInitiativeAp=false;f.gretaFirstGovAp=false;f.sorosAuthoritarianAp=false;f.auraScience=0;f.auraHealth=0;f.auraMilitaryPenalty=0;// Oppositionsblockade ends at start of player's turn\nf.initiativesLocked=false;// Simplified AP system: No initiative-specific bonuses\n// Helper to consume double aura flag once\nconst consumeDouble=()=>{if(f.doublePublicAura){f.doublePublicAura=false;if(!state._effectQueue)state._effectQueue=[];state._effectQueue.push({type:'LOG',msg:'Double Public Aura consumed.'});return true;}return false;};// Determine active public cards (inner lane)\nconst pubNames=((_state$board$p$innen=(_state$board$p=state.board[p])===null||_state$board$p===void 0?void 0:_state$board$p.innen)!==null&&_state$board$p$innen!==void 0?_state$board$p$innen:[]).map(c=>c.name);// Apply auras with possible doubling (consume order defined)\nif(pubNames.includes('Jennifer Doudna')){var _f$auraScience;const doubled=consumeDouble();f.auraScience=((_f$auraScience=f.auraScience)!==null&&_f$auraScience!==void 0?_f$auraScience:0)+(doubled?2:1);}if(pubNames.includes('Anthony Fauci')){var _f$auraHealth;const doubled=consumeDouble();f.auraHealth=((_f$auraHealth=f.auraHealth)!==null&&_f$auraHealth!==void 0?_f$auraHealth:0)+(doubled?2:1);}if(pubNames.includes('Noam Chomsky')){var _f$auraMilitaryPenalt;const doubled=consumeDouble();f.auraMilitaryPenalty=((_f$auraMilitaryPenalt=f.auraMilitaryPenalty)!==null&&_f$auraMilitaryPenalt!==void 0?_f$auraMilitaryPenalt:0)+(doubled?2:1);}// einmalige Aktivierungsboni\nif(pubNames.includes('Mark Zuckerberg'))f.zuckOnceAp=true;if(pubNames.includes('Ai Weiwei'))f.aiWeiweiOnActivate=true;if(pubNames.includes('Elon Musk'))f.elonOnceAp=true;if(pubNames.includes('Bill Gates'))f.gatesNextInitiativeAp=true;if(pubNames.includes('Greta Thunberg'))f.gretaFirstGovAp=true;if(pubNames.includes('George Soros'))f.sorosAuthoritarianAp=true;// Leadership effect: +1 AP immediately\nconst govNames=((_state$board$p$aussen=(_state$board$p2=state.board[p])===null||_state$board$p2===void 0?void 0:_state$board$p2.aussen)!==null&&_state$board$p$aussen!==void 0?_state$board$p$aussen:[]).map(c=>c.name);if(govNames.some(name=>['Justin Trudeau','Volodymyr Zelenskyy','Ursula von der Leyen','Donald Trump','Mohammed bin Salman','Benjamin Netanyahu','Helmut Schmidt'].includes(name))){// Simplified AP system: Leadership gives +1 AP immediately\nstate.actionPoints[p]+=1;}}// Legacy compatibility\nexport function applyStartOfTurnFlags(state,player,log){startOfTurn(state,player);}export function applyStartOfTurnHooks(state,player,log){applyStartOfTurnFlags(state,player,log);}","map":{"version":3,"names":["other","p","startOfTurn","state","_state$board$p$innen","_state$board$p","_state$board$p$aussen","_state$board$p2","actionPoints","f","effectFlags","prevZuck","zuckSpent","zuckOnceAp","aiWeiweiOnActivate","elonOnceAp","elonSpent","gatesNextInitiativeAp","gretaFirstGovAp","sorosAuthoritarianAp","auraScience","auraHealth","auraMilitaryPenalty","initiativesLocked","consumeDouble","doublePublicAura","_effectQueue","push","type","msg","pubNames","board","innen","map","c","name","includes","_f$auraScience","doubled","_f$auraHealth","_f$auraMilitaryPenalt","govNames","aussen","some","applyStartOfTurnFlags","player","log","applyStartOfTurnHooks"],"sources":["C:/Users/skank/Videos/Cards/Milchcards/src/utils/startOfTurnHooks.ts"],"sourcesContent":["import { GameState, Player } from '../types/game';\r\n\r\nfunction other(p: Player): Player { return p === 1 ? 2 : 1; }\r\n\r\nexport function startOfTurn(state: GameState, p: Player) {\r\n  // AP reset\r\n  state.actionPoints[p] = 2;\r\n\r\n  // Flags reset\r\n  const f = state.effectFlags[p];\r\n  // Flags reset\r\n  const prevZuck = f.zuckSpent;\r\n  f.zuckOnceAp = false;\r\n  f.zuckSpent = false;\r\n  f.aiWeiweiOnActivate = false;\r\n  f.elonOnceAp = false;\r\n  f.elonSpent = false;\r\n  f.gatesNextInitiativeAp = false;\r\n  f.gretaFirstGovAp = false;\r\n  f.sorosAuthoritarianAp = false;\r\n  f.auraScience = 0;\r\n  f.auraHealth = 0;\r\n  f.auraMilitaryPenalty = 0;\r\n  // Oppositionsblockade ends at start of player's turn\r\n  f.initiativesLocked = false;\r\n  // Simplified AP system: No initiative-specific bonuses\r\n\r\n  // Helper to consume double aura flag once\r\n  const consumeDouble = (): boolean => {\r\n    if (f.doublePublicAura) {\r\n      f.doublePublicAura = false;\r\n      if (!state._effectQueue) state._effectQueue = [];\r\n      state._effectQueue.push({ type: 'LOG', msg: 'Double Public Aura consumed.' } as any);\r\n      return true;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  // Determine active public cards (inner lane)\r\n  const pubNames: string[] = (state.board[p]?.innen ?? []).map(c => c.name);\r\n\r\n  // Apply auras with possible doubling (consume order defined)\r\n  if (pubNames.includes('Jennifer Doudna')) {\r\n    const doubled = consumeDouble();\r\n    f.auraScience = (f.auraScience ?? 0) + (doubled ? 2 : 1);\r\n  }\r\n  if (pubNames.includes('Anthony Fauci')) {\r\n    const doubled = consumeDouble();\r\n    f.auraHealth = (f.auraHealth ?? 0) + (doubled ? 2 : 1);\r\n  }\r\n  if (pubNames.includes('Noam Chomsky')) {\r\n    const doubled = consumeDouble();\r\n    f.auraMilitaryPenalty = (f.auraMilitaryPenalty ?? 0) + (doubled ? 2 : 1);\r\n  }\r\n\r\n  // einmalige Aktivierungsboni\r\n  if (pubNames.includes('Mark Zuckerberg')) f.zuckOnceAp = true;\r\n  if (pubNames.includes('Ai Weiwei')) f.aiWeiweiOnActivate = true;\r\n  if (pubNames.includes('Elon Musk')) f.elonOnceAp = true;\r\n  if (pubNames.includes('Bill Gates')) f.gatesNextInitiativeAp = true;\r\n  if (pubNames.includes('Greta Thunberg')) f.gretaFirstGovAp = true;\r\n  if (pubNames.includes('George Soros')) f.sorosAuthoritarianAp = true;\r\n\r\n  // Leadership effect: +1 AP immediately\r\n  const govNames: string[] = (state.board[p]?.aussen ?? []).map((c: any) => c.name);\r\n  if (govNames.some(name => ['Justin Trudeau', 'Volodymyr Zelenskyy', 'Ursula von der Leyen', 'Donald Trump', 'Mohammed bin Salman', 'Benjamin Netanyahu', 'Helmut Schmidt'].includes(name))) {\r\n    // Simplified AP system: Leadership gives +1 AP immediately\r\n    state.actionPoints[p] += 1;\r\n  }\r\n}\r\n\r\n// Legacy compatibility\r\nexport function applyStartOfTurnFlags(state: GameState, player: Player, log: (m: string) => void) {\r\n  startOfTurn(state, player);\r\n}\r\n\r\nexport function applyStartOfTurnHooks(state: GameState, player: Player, log: (m: string) => void) {\r\n  applyStartOfTurnFlags(state, player, log);\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}