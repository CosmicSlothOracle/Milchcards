{"ast":null,"code":"import React from'react';import{Icon}from'./Icon';import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const DICT=[{re:/\\bGovernment\\b/gi,icon:'government_row'},{re:/\\bPublic\\b/gi,icon:'public_row'},{re:/\\bInitiative(s)?\\b/gi,icon:'initiative'},{re:/\\bIntervention(s)?|Trap(s)?\\b/gi,icon:'intervention_trap'},{re:/\\bAP\\b/gi,icon:'ap'},{re:/\\bInfluence\\b/gi,icon:'influence'},{re:/\\bRound(s)?\\b/gi,icon:'round_turn'},{re:/\\bBuff\\b/gi,icon:'buff_strength'},{re:/\\bDraw\\b/gi,icon:'draw_cards'},{re:/\\bDiscard\\b/gi,icon:'discard_cards'},{re:/\\bReturn to hand\\b/gi,icon:'return_to_hand'},{re:/\\bDeactivate\\b/gi,icon:'deactivate_card'},{re:/\\bCancel\\b/gi,icon:'cancel_card'},{re:/\\bShield\\b/gi,icon:'grant_shield'},{re:/\\bAura\\b/gi,icon:'aura_ongoing'},{re:/\\bScience\\b/gi,icon:'aura_science'},{re:/\\bHealth\\b/gi,icon:'aura_health'},{re:/\\bMilitary\\b/gi,icon:'aura_military_penalty'},{re:/\\bRegister Trap\\b/gi,icon:'register_trap'},{re:/\\bInitiative Activated\\b/gi,icon:'initiative_activated'},{re:/\\bStart of turn\\b/gi,icon:'start_of_turn'},{re:/\\bCopy\\b/gi,icon:'copy_log'},{re:/\\bClear\\b/gi,icon:'clear_log'},{re:/\\bSearch\\b/gi,icon:'search'},{re:/\\bBudget\\b/gi,icon:'budget_money'},{re:/\\bLog\\b/gi,icon:'game_log'},{re:/\\bMedien\\b/gi,icon:'medien'},{re:/\\bOligarch(en)?\\b/gi,icon:'oligarch'},{re:/\\bStaat(lich|en)?\\b/gi,icon:'staat'},{re:/\\bTech\\b/gi,icon:'tech'},{re:/\\bWissenschaft(ler)?\\b/gi,icon:'wissenschaft'},{re:/\\bAktivist(en)?\\b/gi,icon:'aktivist'},{re:/\\bDenker\\b/gi,icon:'denker'}];export function withIcons(text){let size=arguments.length>1&&arguments[1]!==undefined?arguments[1]:14;// Ersetzt [ICON:name]-Tokens und bekannte Begriffe durch [Icon + Text]-Spans\n// First, tokenize explicit ICON tokens like [ICON:oligarch]\nconst parts=[];const tokenRe=/\\[ICON:([a-z_]+)\\]/gi;let lastIndex=0;let m;while((m=tokenRe.exec(text))!==null){const idx=m.index;if(idx>lastIndex)parts.push(text.substring(lastIndex,idx));const token=m[1].toLowerCase();// Map token to existing icon name mapping where possible\nconst tokenToIcon={medien:'medien',oligarch:'oligarch',staat:'staat',tech:'tech',wissenschaft:'wissenschaft',aktivist:'aktivist',denker:'denker'};const iconName=tokenToIcon[token];if(iconName){parts.push(/*#__PURE__*/_jsx(Icon,{name:iconName,size:size},\"tok-\".concat(token,\"-\").concat(idx)));}else{// If unknown token, keep raw text\nparts.push(m[0]);}lastIndex=idx+m[0].length;}if(lastIndex<text.length)parts.push(text.substring(lastIndex));DICT.forEach(_ref=>{let{re,icon}=_ref;for(let i=0;i<parts.length;i++){const chunk=parts[i];if(typeof chunk!=='string')continue;const segs=chunk.split(re);if(segs.length===1)continue;const matches=chunk.match(re)||[];const rebuilt=[];segs.forEach((s,idx)=>{rebuilt.push(s);if(idx<matches.length){rebuilt.push(/*#__PURE__*/_jsxs(\"span\",{style:{display:'inline-flex',alignItems:'center',gap:4},children:[/*#__PURE__*/_jsx(Icon,{name:icon,size:size}),/*#__PURE__*/_jsx(\"span\",{children:matches[idx]})]},\"\".concat(icon,\"-\").concat(i,\"-\").concat(idx)));}});parts.splice(i,1,...rebuilt);i+=rebuilt.length-1;}});return/*#__PURE__*/_jsx(_Fragment,{children:parts});}","map":{"version":3,"names":["React","Icon","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","DICT","re","icon","withIcons","text","size","arguments","length","undefined","parts","tokenRe","lastIndex","m","exec","idx","index","push","substring","token","toLowerCase","tokenToIcon","medien","oligarch","staat","tech","wissenschaft","aktivist","denker","iconName","name","concat","forEach","_ref","i","chunk","segs","split","matches","match","rebuilt","s","style","display","alignItems","gap","children","splice"],"sources":["C:/Users/skank/Videos/Cards/Milchcards/src/ui/withIcons.tsx"],"sourcesContent":["import React from 'react';\r\nimport { Icon, IconName } from './Icon';\r\n\r\nconst DICT: Array<{ re: RegExp; icon: IconName; label?: string }> = [\r\n  { re: /\\bGovernment\\b/gi, icon: 'government_row' },\r\n  { re: /\\bPublic\\b/gi, icon: 'public_row' },\r\n  { re: /\\bInitiative(s)?\\b/gi, icon: 'initiative' },\r\n  { re: /\\bIntervention(s)?|Trap(s)?\\b/gi, icon: 'intervention_trap' },\r\n  { re: /\\bAP\\b/gi, icon: 'ap' },\r\n  { re: /\\bInfluence\\b/gi, icon: 'influence' },\r\n  { re: /\\bRound(s)?\\b/gi, icon: 'round_turn' },\r\n  { re: /\\bBuff\\b/gi, icon: 'buff_strength' },\r\n  { re: /\\bDraw\\b/gi, icon: 'draw_cards' },\r\n  { re: /\\bDiscard\\b/gi, icon: 'discard_cards' },\r\n  { re: /\\bReturn to hand\\b/gi, icon: 'return_to_hand' },\r\n  { re: /\\bDeactivate\\b/gi, icon: 'deactivate_card' },\r\n  { re: /\\bCancel\\b/gi, icon: 'cancel_card' },\r\n  { re: /\\bShield\\b/gi, icon: 'grant_shield' },\r\n  { re: /\\bAura\\b/gi, icon: 'aura_ongoing' },\r\n  { re: /\\bScience\\b/gi, icon: 'aura_science' },\r\n  { re: /\\bHealth\\b/gi, icon: 'aura_health' },\r\n  { re: /\\bMilitary\\b/gi, icon: 'aura_military_penalty' },\r\n  { re: /\\bRegister Trap\\b/gi, icon: 'register_trap' },\r\n  { re: /\\bInitiative Activated\\b/gi, icon: 'initiative_activated' },\r\n  { re: /\\bStart of turn\\b/gi, icon: 'start_of_turn' },\r\n  { re: /\\bCopy\\b/gi, icon: 'copy_log' },\r\n  { re: /\\bClear\\b/gi, icon: 'clear_log' },\r\n  { re: /\\bSearch\\b/gi, icon: 'search' },\r\n  { re: /\\bBudget\\b/gi, icon: 'budget_money' },\r\n  { re: /\\bLog\\b/gi, icon: 'game_log' },\r\n  { re: /\\bMedien\\b/gi, icon: 'medien' },\r\n  { re: /\\bOligarch(en)?\\b/gi, icon: 'oligarch' },\r\n  { re: /\\bStaat(lich|en)?\\b/gi, icon: 'staat' },\r\n  { re: /\\bTech\\b/gi, icon: 'tech' },\r\n  { re: /\\bWissenschaft(ler)?\\b/gi, icon: 'wissenschaft' },\r\n  { re: /\\bAktivist(en)?\\b/gi, icon: 'aktivist' },\r\n  { re: /\\bDenker\\b/gi, icon: 'denker' },\r\n];\r\n\r\nexport function withIcons(text: string, size = 14) {\r\n  // Ersetzt [ICON:name]-Tokens und bekannte Begriffe durch [Icon + Text]-Spans\r\n  // First, tokenize explicit ICON tokens like [ICON:oligarch]\r\n  const parts: React.ReactNode[] = [];\r\n  const tokenRe = /\\[ICON:([a-z_]+)\\]/gi;\r\n  let lastIndex = 0;\r\n  let m: RegExpExecArray | null;\r\n  while ((m = tokenRe.exec(text)) !== null) {\r\n    const idx = m.index;\r\n    if (idx > lastIndex) parts.push(text.substring(lastIndex, idx));\r\n    const token = m[1].toLowerCase();\r\n    // Map token to existing icon name mapping where possible\r\n    const tokenToIcon: Record<string, IconName> = {\r\n      medien: 'medien',\r\n      oligarch: 'oligarch',\r\n      staat: 'staat',\r\n      tech: 'tech',\r\n      wissenschaft: 'wissenschaft',\r\n      aktivist: 'aktivist',\r\n      denker: 'denker',\r\n    } as any;\r\n    const iconName = tokenToIcon[token] as IconName | undefined;\r\n    if (iconName) {\r\n      parts.push(<Icon key={`tok-${token}-${idx}`} name={iconName} size={size} />);\r\n    } else {\r\n      // If unknown token, keep raw text\r\n      parts.push(m[0]);\r\n    }\r\n    lastIndex = idx + m[0].length;\r\n  }\r\n  if (lastIndex < text.length) parts.push(text.substring(lastIndex));\r\n  DICT.forEach(({ re, icon }) => {\r\n    for (let i = 0; i < parts.length; i++) {\r\n      const chunk = parts[i];\r\n      if (typeof chunk !== 'string') continue;\r\n      const segs = chunk.split(re);\r\n      if (segs.length === 1) continue;\r\n      const matches = chunk.match(re) || [];\r\n      const rebuilt: React.ReactNode[] = [];\r\n      segs.forEach((s, idx) => {\r\n        rebuilt.push(s);\r\n        if (idx < matches.length) {\r\n          rebuilt.push(\r\n            <span key={`${icon}-${i}-${idx}`} style={{ display: 'inline-flex', alignItems: 'center', gap: 4 }}>\r\n              <Icon name={icon} size={size} />\r\n              <span>{matches[idx]}</span>\r\n            </span>\r\n          );\r\n        }\r\n      });\r\n      parts.splice(i, 1, ...rebuilt);\r\n      i += rebuilt.length - 1;\r\n    }\r\n  });\r\n  return <>{parts}</>;\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}