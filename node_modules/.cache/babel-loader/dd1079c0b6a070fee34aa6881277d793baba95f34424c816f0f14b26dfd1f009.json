{"ast":null,"code":"import _objectSpread from\"C:/Users/skank/Videos/Cards/Milchcards/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{adjustInfluence}from'./cardUtils';export function getStrongestGovCardUid(state,player){var _sorted$0$uid,_sorted$;const row=state.board[player].aussen;if(!row||row.length===0)return null;const alive=row.filter(c=>!c.deactivated);if(alive.length===0)return null;const sorted=[...alive].sort((a,b)=>{var _b$influence,_a$influence;return((_b$influence=b.influence)!==null&&_b$influence!==void 0?_b$influence:0)-((_a$influence=a.influence)!==null&&_a$influence!==void 0?_a$influence:0);});return(_sorted$0$uid=(_sorted$=sorted[0])===null||_sorted$===void 0?void 0:_sorted$.uid)!==null&&_sorted$0$uid!==void 0?_sorted$0$uid:null;}// Effect application utilities\nexport function tryApplyNegativeEffect(target,effect,currentRound,source){// Check if card is protected\nif(target.protected){var _target$protectedUnti;if(target.protectedUntil===null||((_target$protectedUnti=target.protectedUntil)!==null&&_target$protectedUnti!==void 0?_target$protectedUnti:0)>=currentRound){console.log(\"\".concat(target.name,\" ist gesch\\xFCtzt vor negativen Effekten\").concat(source?\" von \".concat(source):''));return false;}}// Apply the effect\neffect();console.log(\"Negativer Effekt angewendet auf \".concat(target.name).concat(source?\" von \".concat(source):''));return true;}// Effect Queue Management\nexport class EffectQueueManager{static getPriority(type){switch(type){case'intervention':return 1;// Höchste Priorität\ncase'sofort':return 2;case'passiv':return 3;case'aktiv':return 4;// Niedrigste Priorität\ndefault:return 5;}}static initializeQueue(){return{items:[],processing:false,nextId:1};}static addEffect(queue,type,source,effect,description,player,round,target){const item={id:\"effect_\".concat(queue.nextId),type,priority:this.getPriority(type),source,target,effect,description,player,round};const newItems=[...queue.items,item].sort((a,b)=>a.priority-b.priority);return _objectSpread(_objectSpread({},queue),{},{items:newItems,nextId:queue.nextId+1});}static processQueue(queue,state,log){if(queue.processing||queue.items.length===0){return[queue,state];}const newQueue=_objectSpread(_objectSpread({},queue),{},{processing:true});let newState=_objectSpread({},state);// Process all effects in priority order\nnewQueue.items.forEach(item=>{try{log(\"Effekt ausgef\\xFChrt: \".concat(item.description));item.effect();}catch(error){console.error(\"Fehler bei Effekt-Ausf\\xFChrung: \".concat(item.description),error);}});// Clear processed effects\nconst finalQueue=_objectSpread(_objectSpread({},newQueue),{},{items:[],processing:false});return[finalQueue,newState];}}// Active Abilities Management\nexport class ActiveAbilitiesManager{static getAvailableAbilities(player,state){const abilities=[];const board=state.board[player];const allCards=[...board.innen,...board.aussen].filter(c=>c.kind==='pol');allCards.forEach(card=>{if(card.deactivated||card._activeUsed)return;// Hardliner ability (Leadership cards)\nif(card.tag==='Leadership'&&!card._activeUsed){abilities.push({id:\"hardliner_\".concat(card.uid),name:'Hardliner',description:'Reduziere Einfluss einer gegnerischen Karte um 2',cardName:card.name,cooldown:1,usedThisRound:card._activeUsed,type:'hardliner',cost:1});}// Oligarch influence boost\nconst oligarchNames=['Elon Musk','Bill Gates','George Soros','Warren Buffett','Mukesh Ambani','Jeff Bezos'];if(oligarchNames.includes(card.name)&&!card._activeUsed){abilities.push({id:\"oligarch_\".concat(card.uid),name:'Oligarchen-Einfluss',description:'Erhöhe Einfluss einer eigenen Regierungskarte um 2',cardName:card.name,cooldown:1,usedThisRound:card._activeUsed,type:'oligarch_influence',cost:1});}// Putin double intervention\nif(card.name==='Vladimir Putin'&&!card._activeUsed){abilities.push({id:\"putin_double_\".concat(card.uid),name:'Doppelte Intervention',description:'Spiele 2 Interventionen gleichzeitig',cardName:card.name,cooldown:1,usedThisRound:card._activeUsed,type:'putin_double_intervention',cost:2});}// Diplomat influence transfer\nif(card.tag==='Diplomat'&&!card._activeUsed){abilities.push({id:\"diplomat_transfer_\".concat(card.uid),name:'Einfluss-Transfer',description:'Transferiere Einfluss zwischen eigenen Regierungskarten',cardName:card.name,cooldown:1,usedThisRound:card._activeUsed,type:'diplomat_transfer',cost:0});}});return abilities;}static canUseAbility(ability,player,state){// Check if player has enough AP\nif((ability.cost||0)>state.actionPoints[player])return false;// Check if ability was already used this round\nif(ability.usedThisRound)return false;// Check if the source card is still available and not deactivated\nconst board=state.board[player];const allCards=[...board.innen,...board.aussen].filter(c=>c.kind==='pol');const sourceCard=allCards.find(c=>ability.id.includes(c.uid.toString()));if(!sourceCard||sourceCard.deactivated||sourceCard._activeUsed)return false;return true;}static executeAbility(ability,select,state){const newState=_objectSpread({},state);switch(ability.type){case'hardliner':if(select.targetCard){tryApplyNegativeEffect(select.targetCard,()=>adjustInfluence(select.targetCard,-2,'Hardliner'),state.round,'Hardliner');}break;case'oligarch_influence':if(select.targetCard){adjustInfluence(select.targetCard,2,'Oligarchen-Einfluss');}break;case'diplomat_transfer':// Handled separately in useGameEffects\nbreak;case'putin_double_intervention':// Handled by executePutinDoubleIntervention\nbreak;}// Mark ability as used\nselect.actorCard._activeUsed=true;// Deduct AP cost\nnewState.actionPoints[select.actorPlayer]-=ability.cost||0;newState.actionsUsed[select.actorPlayer]+=1;return newState;}static executePutinDoubleIntervention(state,player,interventionCardIds,log){const newState=_objectSpread({},state);// Find Putin card\nconst board=newState.board[player];const allCards=[...board.innen,...board.aussen].filter(c=>c.kind==='pol');const putin=allCards.find(c=>c.name==='Vladimir Putin');if(!putin||putin.deactivated||putin._activeUsed){return state;}// Find intervention cards in hand\nconst hand=[...newState.hands[player]];const interventions=interventionCardIds.map(id=>hand.find(c=>c.uid===id&&c.kind==='spec')).filter(c=>c!==undefined);if(interventions.length<2){return state;}// Play both interventions to traps\nconst newHand=hand.filter(c=>!interventionCardIds.includes(c.uid));const newTraps=[...newState.traps[player],...interventions];newState.hands[player]=newHand;newState.traps[player]=newTraps;// Mark Putin as used and deduct AP\nputin._activeUsed=true;newState.actionPoints[player]-=2;newState.actionsUsed[player]+=1;log(\"Putin setzt doppelte Intervention: \".concat(interventions.map(i=>i.name).join(' & ')));return newState;}}// Effect condition checking\nexport function hasLeadershipCard(player,state){const gov=state.board[player].aussen;const names=['Justin Trudeau'];return gov.some(c=>c.kind==='pol'&&names.includes(c.name)&&!c.deactivated);}export function hasMovementCard(player,state){const pub=state.board[player].innen;const names=['Greta Thunberg','Malala Yousafzai','Ai Weiwei','Alexei Navalny'];return pub.some(c=>c.kind==='pol'&&names.includes(c.name)&&!c.deactivated);}export function hasPlatformCard(player,state){const pub=state.board[player].innen;const names=['Mark Zuckerberg','Tim Cook','Jack Ma','Zhang Yiming'];return pub.some(c=>c.kind==='pol'&&names.includes(c.name)&&!c.deactivated);}export function hasDiplomatCard(player,state){const gov=state.board[player].aussen;const names=['Joschka Fischer','Sergey Lavrov','Ursula von der Leyen','Jens Stoltenberg'];return gov.some(c=>c.kind==='pol'&&names.includes(c.name)&&!c.deactivated);}export function hasInfluenceTransferBlock(player,state){const govSlot=state.permanentSlots[player].government;if(!govSlot||govSlot.kind!=='spec')return false;const spec=govSlot;return['Koalitionszwang','Napoleon Komplex'].includes(spec.name);}","map":{"version":3,"names":["adjustInfluence","getStrongestGovCardUid","state","player","_sorted$0$uid","_sorted$","row","board","aussen","length","alive","filter","c","deactivated","sorted","sort","a","b","_b$influence","_a$influence","influence","uid","tryApplyNegativeEffect","target","effect","currentRound","source","protected","_target$protectedUnti","protectedUntil","console","log","concat","name","EffectQueueManager","getPriority","type","initializeQueue","items","processing","nextId","addEffect","queue","description","round","item","id","priority","newItems","_objectSpread","processQueue","newQueue","newState","forEach","error","finalQueue","ActiveAbilitiesManager","getAvailableAbilities","abilities","allCards","innen","kind","card","_activeUsed","tag","push","cardName","cooldown","usedThisRound","cost","oligarchNames","includes","canUseAbility","ability","actionPoints","sourceCard","find","toString","executeAbility","select","targetCard","actorCard","actorPlayer","actionsUsed","executePutinDoubleIntervention","interventionCardIds","putin","hand","hands","interventions","map","undefined","newHand","newTraps","traps","i","join","hasLeadershipCard","gov","names","some","hasMovementCard","pub","hasPlatformCard","hasDiplomatCard","hasInfluenceTransferBlock","govSlot","permanentSlots","government","spec"],"sources":["C:/Users/skank/Videos/Cards/Milchcards/src/utils/effectUtils.ts"],"sourcesContent":["import { Card, PoliticianCard, SpecialCard, GameState, Player, Lane, EffectQueue, EffectQueueItem, ActiveAbility, AbilitySelect } from '../types/game';\r\nimport { adjustInfluence } from './cardUtils';\r\n\r\nexport function getStrongestGovCardUid(state: GameState, player: Player): number | null {\r\n  const row = state.board[player].aussen as PoliticianCard[];\r\n  if (!row || row.length === 0) return null;\r\n  const alive = row.filter(c => !c.deactivated);\r\n  if (alive.length === 0) return null;\r\n  const sorted = [...alive].sort((a, b) => (b.influence ?? 0) - (a.influence ?? 0));\r\n  return sorted[0]?.uid ?? null;\r\n}\r\n\r\n// Effect application utilities\r\nexport function tryApplyNegativeEffect(\r\n  target: PoliticianCard,\r\n  effect: () => void,\r\n  currentRound: number,\r\n  source?: string\r\n): boolean {\r\n  // Check if card is protected\r\n  if (target.protected) {\r\n    if (target.protectedUntil === null || (target.protectedUntil ?? 0) >= currentRound) {\r\n      console.log(`${target.name} ist geschützt vor negativen Effekten${source ? ` von ${source}` : ''}`);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // Apply the effect\r\n  effect();\r\n  console.log(`Negativer Effekt angewendet auf ${target.name}${source ? ` von ${source}` : ''}`);\r\n  return true;\r\n}\r\n\r\n// Effect Queue Management\r\nexport class EffectQueueManager {\r\n  private static getPriority(type: EffectQueueItem['type']): number {\r\n    switch (type) {\r\n      case 'intervention': return 1; // Höchste Priorität\r\n      case 'sofort': return 2;\r\n      case 'passiv': return 3;\r\n      case 'aktiv': return 4; // Niedrigste Priorität\r\n      default: return 5;\r\n    }\r\n  }\r\n\r\n  static initializeQueue(): EffectQueue {\r\n    return {\r\n      items: [],\r\n      processing: false,\r\n      nextId: 1\r\n    };\r\n  }\r\n\r\n  static addEffect(\r\n    queue: EffectQueue,\r\n    type: EffectQueueItem['type'],\r\n    source: Card,\r\n    effect: () => void,\r\n    description: string,\r\n    player: Player,\r\n    round: number,\r\n    target?: Card\r\n  ): EffectQueue {\r\n    const item: EffectQueueItem = {\r\n      id: `effect_${queue.nextId}`,\r\n      type,\r\n      priority: this.getPriority(type),\r\n      source,\r\n      target,\r\n      effect,\r\n      description,\r\n      player,\r\n      round\r\n    };\r\n\r\n    const newItems = [...queue.items, item].sort((a, b) => a.priority - b.priority);\r\n\r\n    return {\r\n      ...queue,\r\n      items: newItems,\r\n      nextId: queue.nextId + 1\r\n    };\r\n  }\r\n\r\n  static processQueue(\r\n    queue: EffectQueue,\r\n    state: GameState,\r\n    log: (msg: string) => void\r\n  ): [EffectQueue, GameState] {\r\n    if (queue.processing || queue.items.length === 0) {\r\n      return [queue, state];\r\n    }\r\n\r\n    const newQueue = { ...queue, processing: true };\r\n    let newState = { ...state };\r\n\r\n    // Process all effects in priority order\r\n    newQueue.items.forEach(item => {\r\n      try {\r\n        log(`Effekt ausgeführt: ${item.description}`);\r\n        item.effect();\r\n      } catch (error) {\r\n        console.error(`Fehler bei Effekt-Ausführung: ${item.description}`, error);\r\n      }\r\n    });\r\n\r\n    // Clear processed effects\r\n    const finalQueue = {\r\n      ...newQueue,\r\n      items: [],\r\n      processing: false\r\n    };\r\n\r\n    return [finalQueue, newState];\r\n  }\r\n}\r\n\r\n// Active Abilities Management\r\nexport class ActiveAbilitiesManager {\r\n  static getAvailableAbilities(player: Player, state: GameState): ActiveAbility[] {\r\n    const abilities: ActiveAbility[] = [];\r\n    const board = state.board[player];\r\n    const allCards = [...board.innen, ...board.aussen].filter(c => c.kind === 'pol') as PoliticianCard[];\r\n\r\n    allCards.forEach(card => {\r\n      if (card.deactivated || card._activeUsed) return;\r\n\r\n      // Hardliner ability (Leadership cards)\r\n      if (card.tag === 'Leadership' && !card._activeUsed) {\r\n        abilities.push({\r\n          id: `hardliner_${card.uid}`,\r\n          name: 'Hardliner',\r\n          description: 'Reduziere Einfluss einer gegnerischen Karte um 2',\r\n          cardName: card.name,\r\n          cooldown: 1,\r\n          usedThisRound: card._activeUsed,\r\n          type: 'hardliner',\r\n          cost: 1\r\n        });\r\n      }\r\n\r\n      // Oligarch influence boost\r\n      const oligarchNames = ['Elon Musk', 'Bill Gates', 'George Soros', 'Warren Buffett', 'Mukesh Ambani', 'Jeff Bezos'];\r\n      if (oligarchNames.includes(card.name) && !card._activeUsed) {\r\n        abilities.push({\r\n          id: `oligarch_${card.uid}`,\r\n          name: 'Oligarchen-Einfluss',\r\n          description: 'Erhöhe Einfluss einer eigenen Regierungskarte um 2',\r\n          cardName: card.name,\r\n          cooldown: 1,\r\n          usedThisRound: card._activeUsed,\r\n          type: 'oligarch_influence',\r\n          cost: 1\r\n        });\r\n      }\r\n\r\n      // Putin double intervention\r\n      if (card.name === 'Vladimir Putin' && !card._activeUsed) {\r\n        abilities.push({\r\n          id: `putin_double_${card.uid}`,\r\n          name: 'Doppelte Intervention',\r\n          description: 'Spiele 2 Interventionen gleichzeitig',\r\n          cardName: card.name,\r\n          cooldown: 1,\r\n          usedThisRound: card._activeUsed,\r\n          type: 'putin_double_intervention',\r\n          cost: 2\r\n        });\r\n      }\r\n\r\n      // Diplomat influence transfer\r\n      if (card.tag === 'Diplomat' && !card._activeUsed) {\r\n        abilities.push({\r\n          id: `diplomat_transfer_${card.uid}`,\r\n          name: 'Einfluss-Transfer',\r\n          description: 'Transferiere Einfluss zwischen eigenen Regierungskarten',\r\n          cardName: card.name,\r\n          cooldown: 1,\r\n          usedThisRound: card._activeUsed,\r\n          type: 'diplomat_transfer',\r\n          cost: 0\r\n        });\r\n      }\r\n    });\r\n\r\n    return abilities;\r\n  }\r\n\r\n  static canUseAbility(ability: ActiveAbility, player: Player, state: GameState): boolean {\r\n    // Check if player has enough AP\r\n    if ((ability.cost || 0) > state.actionPoints[player]) return false;\r\n\r\n    // Check if ability was already used this round\r\n    if (ability.usedThisRound) return false;\r\n\r\n    // Check if the source card is still available and not deactivated\r\n    const board = state.board[player];\r\n    const allCards = [...board.innen, ...board.aussen].filter(c => c.kind === 'pol') as PoliticianCard[];\r\n    const sourceCard = allCards.find(c => ability.id.includes(c.uid.toString()));\r\n\r\n    if (!sourceCard || sourceCard.deactivated || sourceCard._activeUsed) return false;\r\n\r\n    return true;\r\n  }\r\n\r\n  static executeAbility(ability: ActiveAbility, select: AbilitySelect, state: GameState): GameState {\r\n    const newState = { ...state };\r\n\r\n    switch (ability.type) {\r\n      case 'hardliner':\r\n        if (select.targetCard) {\r\n          tryApplyNegativeEffect(\r\n            select.targetCard,\r\n            () => adjustInfluence(select.targetCard!, -2, 'Hardliner'),\r\n            state.round,\r\n            'Hardliner'\r\n          );\r\n        }\r\n        break;\r\n\r\n      case 'oligarch_influence':\r\n        if (select.targetCard) {\r\n          adjustInfluence(select.targetCard, 2, 'Oligarchen-Einfluss');\r\n        }\r\n        break;\r\n\r\n      case 'diplomat_transfer':\r\n        // Handled separately in useGameEffects\r\n        break;\r\n\r\n      case 'putin_double_intervention':\r\n        // Handled by executePutinDoubleIntervention\r\n        break;\r\n    }\r\n\r\n    // Mark ability as used\r\n    select.actorCard._activeUsed = true;\r\n\r\n    // Deduct AP cost\r\n    newState.actionPoints[select.actorPlayer] -= (ability.cost || 0);\r\n    newState.actionsUsed[select.actorPlayer] += 1;\r\n\r\n    return newState;\r\n  }\r\n\r\n  static executePutinDoubleIntervention(\r\n    state: GameState,\r\n    player: Player,\r\n    interventionCardIds: number[],\r\n    log: (msg: string) => void\r\n  ): GameState {\r\n    const newState = { ...state };\r\n\r\n    // Find Putin card\r\n    const board = newState.board[player];\r\n    const allCards = [...board.innen, ...board.aussen].filter(c => c.kind === 'pol') as PoliticianCard[];\r\n    const putin = allCards.find(c => c.name === 'Vladimir Putin');\r\n\r\n    if (!putin || putin.deactivated || putin._activeUsed) {\r\n      return state;\r\n    }\r\n\r\n    // Find intervention cards in hand\r\n    const hand = [...newState.hands[player]];\r\n    const interventions = interventionCardIds.map(id =>\r\n      hand.find(c => c.uid === id && c.kind === 'spec')\r\n    ).filter(c => c !== undefined) as SpecialCard[];\r\n\r\n    if (interventions.length < 2) {\r\n      return state;\r\n    }\r\n\r\n    // Play both interventions to traps\r\n    const newHand = hand.filter(c => !interventionCardIds.includes(c.uid));\r\n    const newTraps = [...newState.traps[player], ...interventions];\r\n\r\n    newState.hands[player] = newHand;\r\n    newState.traps[player] = newTraps;\r\n\r\n    // Mark Putin as used and deduct AP\r\n    putin._activeUsed = true;\r\n    newState.actionPoints[player] -= 2;\r\n    newState.actionsUsed[player] += 1;\r\n\r\n    log(`Putin setzt doppelte Intervention: ${interventions.map(i => i.name).join(' & ')}`);\r\n\r\n    return newState;\r\n  }\r\n}\r\n\r\n// Effect condition checking\r\nexport function hasLeadershipCard(player: Player, state: GameState): boolean {\r\n  const gov = state.board[player].aussen;\r\n  const names = ['Justin Trudeau'];\r\n  return gov.some(c => c.kind === 'pol' && names.includes(c.name) && !(c as PoliticianCard).deactivated);\r\n}\r\n\r\nexport function hasMovementCard(player: Player, state: GameState): boolean {\r\n  const pub = state.board[player].innen;\r\n  const names = ['Greta Thunberg', 'Malala Yousafzai', 'Ai Weiwei', 'Alexei Navalny'];\r\n  return pub.some(c => c.kind === 'pol' && names.includes(c.name) && !(c as PoliticianCard).deactivated);\r\n}\r\n\r\nexport function hasPlatformCard(player: Player, state: GameState): boolean {\r\n  const pub = state.board[player].innen;\r\n  const names = ['Mark Zuckerberg', 'Tim Cook', 'Jack Ma', 'Zhang Yiming'];\r\n  return pub.some(c => c.kind === 'pol' && names.includes(c.name) && !(c as PoliticianCard).deactivated);\r\n}\r\n\r\nexport function hasDiplomatCard(player: Player, state: GameState): boolean {\r\n  const gov = state.board[player].aussen;\r\n  const names = ['Joschka Fischer', 'Sergey Lavrov', 'Ursula von der Leyen', 'Jens Stoltenberg'];\r\n  return gov.some(c => c.kind === 'pol' && names.includes(c.name) && !(c as PoliticianCard).deactivated);\r\n}\r\n\r\nexport function hasInfluenceTransferBlock(player: Player, state: GameState): boolean {\r\n  const govSlot = state.permanentSlots[player].government;\r\n  if (!govSlot || govSlot.kind !== 'spec') return false;\r\n  const spec = govSlot as SpecialCard;\r\n  return ['Koalitionszwang', 'Napoleon Komplex'].includes(spec.name);\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}