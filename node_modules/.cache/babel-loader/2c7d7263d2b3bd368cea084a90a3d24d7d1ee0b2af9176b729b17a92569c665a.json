{"ast":null,"code":"/**\r\n * Einheitliches Targeting-System\r\n * Zentrale Funktionen für Zielauswahl in Karteneffekten\r\n *//**\r\n * Ermittelt die stärkste Regierungskarte eines Spielers\r\n * Sortierkriterium: influence absteigend, Tie-Break: UID absteigend (zuletzt gelegt)\r\n */export function getStrongestGovernment(state,player){var _scored$;const row=state.board[player].aussen.filter(c=>c.kind==='pol');if(!row.length)return undefined;// Nur aktive (nicht deaktivierte) Karten berücksichtigen\nconst activeCards=row.filter(c=>!c.deactivated);if(activeCards.length===0)return undefined;// Berechne tatsächlichen Einfluss (base + buffs - debuffs)\nconst scored=activeCards.map(c=>({card:c,influence:(c.influence||0)+(c.tempBuffs||0)-(c.tempDebuffs||0),uid:c.uid}));// Sortiere: Einfluss absteigend, dann UID absteigend\nscored.sort((a,b)=>{if(b.influence!==a.influence){return b.influence-a.influence;}return b.uid-a.uid;// Höhere UID = zuletzt gelegt\n});return(_scored$=scored[0])===null||_scored$===void 0?void 0:_scored$.card;}/**\r\n * Ermittelt die UID der stärksten Regierungskarte\r\n * Wrapper für getStrongestGovernment, gibt nur die UID zurück\r\n */export function getStrongestGovernmentUid(state,player){const card=getStrongestGovernment(state,player);return card?card.uid:null;}","map":{"version":3,"names":["getStrongestGovernment","state","player","_scored$","row","board","aussen","filter","c","kind","length","undefined","activeCards","deactivated","scored","map","card","influence","tempBuffs","tempDebuffs","uid","sort","a","b","getStrongestGovernmentUid"],"sources":["C:/Users/skank/Videos/Cards/Milchcards/src/utils/targets.ts"],"sourcesContent":["/**\r\n * Einheitliches Targeting-System\r\n * Zentrale Funktionen für Zielauswahl in Karteneffekten\r\n */\r\n\r\nimport { GameState, Player, Card, PoliticianCard } from '../types/game';\r\n\r\n/**\r\n * Ermittelt die stärkste Regierungskarte eines Spielers\r\n * Sortierkriterium: influence absteigend, Tie-Break: UID absteigend (zuletzt gelegt)\r\n */\r\nexport function getStrongestGovernment(state: GameState, player: Player): PoliticianCard | undefined {\r\n  const row = state.board[player].aussen.filter(c => c.kind === 'pol') as PoliticianCard[];\r\n  if (!row.length) return undefined;\r\n\r\n  // Nur aktive (nicht deaktivierte) Karten berücksichtigen\r\n  const activeCards = row.filter(c => !c.deactivated);\r\n  if (activeCards.length === 0) return undefined;\r\n\r\n  // Berechne tatsächlichen Einfluss (base + buffs - debuffs)\r\n  const scored = activeCards.map(c => ({\r\n    card: c,\r\n    influence: (c.influence || 0) + (c.tempBuffs || 0) - (c.tempDebuffs || 0),\r\n    uid: c.uid\r\n  }));\r\n\r\n  // Sortiere: Einfluss absteigend, dann UID absteigend\r\n  scored.sort((a, b) => {\r\n    if (b.influence !== a.influence) {\r\n      return b.influence - a.influence;\r\n    }\r\n    return b.uid - a.uid; // Höhere UID = zuletzt gelegt\r\n  });\r\n\r\n  return scored[0]?.card;\r\n}\r\n\r\n/**\r\n * Ermittelt die UID der stärksten Regierungskarte\r\n * Wrapper für getStrongestGovernment, gibt nur die UID zurück\r\n */\r\nexport function getStrongestGovernmentUid(state: GameState, player: Player): number | null {\r\n  const card = getStrongestGovernment(state, player);\r\n  return card ? card.uid : null;\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA,GAIA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAAA,sBAAsBA,CAACC,KAAgB,CAAEC,MAAc,CAA8B,KAAAC,QAAA,CACnG,KAAM,CAAAC,GAAG,CAAGH,KAAK,CAACI,KAAK,CAACH,MAAM,CAAC,CAACI,MAAM,CAACC,MAAM,CAACC,CAAC,EAAIA,CAAC,CAACC,IAAI,GAAK,KAAK,CAAqB,CACxF,GAAI,CAACL,GAAG,CAACM,MAAM,CAAE,MAAO,CAAAC,SAAS,CAEjC;AACA,KAAM,CAAAC,WAAW,CAAGR,GAAG,CAACG,MAAM,CAACC,CAAC,EAAI,CAACA,CAAC,CAACK,WAAW,CAAC,CACnD,GAAID,WAAW,CAACF,MAAM,GAAK,CAAC,CAAE,MAAO,CAAAC,SAAS,CAE9C;AACA,KAAM,CAAAG,MAAM,CAAGF,WAAW,CAACG,GAAG,CAACP,CAAC,GAAK,CACnCQ,IAAI,CAAER,CAAC,CACPS,SAAS,CAAE,CAACT,CAAC,CAACS,SAAS,EAAI,CAAC,GAAKT,CAAC,CAACU,SAAS,EAAI,CAAC,CAAC,EAAIV,CAAC,CAACW,WAAW,EAAI,CAAC,CAAC,CACzEC,GAAG,CAAEZ,CAAC,CAACY,GACT,CAAC,CAAC,CAAC,CAEH;AACAN,MAAM,CAACO,IAAI,CAAC,CAACC,CAAC,CAAEC,CAAC,GAAK,CACpB,GAAIA,CAAC,CAACN,SAAS,GAAKK,CAAC,CAACL,SAAS,CAAE,CAC/B,MAAO,CAAAM,CAAC,CAACN,SAAS,CAAGK,CAAC,CAACL,SAAS,CAClC,CACA,MAAO,CAAAM,CAAC,CAACH,GAAG,CAAGE,CAAC,CAACF,GAAG,CAAE;AACxB,CAAC,CAAC,CAEF,OAAAjB,QAAA,CAAOW,MAAM,CAAC,CAAC,CAAC,UAAAX,QAAA,iBAATA,QAAA,CAAWa,IAAI,CACxB,CAEA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAAQ,yBAAyBA,CAACvB,KAAgB,CAAEC,MAAc,CAAiB,CACzF,KAAM,CAAAc,IAAI,CAAGhB,sBAAsB,CAACC,KAAK,CAAEC,MAAM,CAAC,CAClD,MAAO,CAAAc,IAAI,CAAGA,IAAI,CAACI,GAAG,CAAG,IAAI,CAC/B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}