{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\skank\\\\Videos\\\\Cards\\\\Milchcards\\\\src\\\\components\\\\GameCanvas.tsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useCallback } from 'react';\nimport { LAYOUT, getZone, computeSlotRects, getUiTransform, getLaneCapacity, getPublicRects, getGovernmentRects } from '../ui/layout';\nimport { sortHandCards } from '../utils/gameUtils';\nimport { getNetApCost } from '../utils/ap';\nimport { getCardImagePath } from '../data/gameData';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const GameCanvas = ({\n  gameState,\n  selectedHandIndex,\n  onCardClick,\n  onCardHover,\n  devMode = false\n}) => {\n  _s();\n  const canvasRef = useRef(null);\n  const clickZonesRef = useRef([]);\n  const backgroundImageRef = useRef(null);\n  const imageCacheRef = useRef(new Map());\n  const drawCardAt = useCallback((ctx, card, x, y, size, selected = false, showAPCost = false, player) => {\n    var _shield;\n    let dx = x,\n      dy = y,\n      s = size;\n    if (selected) {\n      s = Math.floor(size * 1.05);\n      dx = x - Math.floor((s - size) / 2);\n      dy = y - Math.floor((s - size) / 2);\n    }\n\n    // Draw card image with caching to prevent flicker in continuous loop\n    const src = getCardImagePath(card, 'ui');\n    const cached = imageCacheRef.current.get(src);\n    if (cached && cached.complete) {\n      ctx.drawImage(cached, dx, dy, s, s);\n    } else {\n      const img = new Image();\n      img.onload = () => {\n        imageCacheRef.current.set(src, img);\n        ctx.drawImage(img, dx, dy, s, s);\n      };\n      img.src = src;\n      imageCacheRef.current.set(src, img);\n    }\n\n    // Status-Indikatoren (fÃ¼r alle Board-Karten)\n    // Einfluss-Wert dauerhaft anzeigen (oben links) â€“ nur fÃ¼r Regierungskarten\n    if (card.kind === 'pol') {\n      var _influence;\n      const barH = Math.max(20, Math.floor(s * 0.12) + 6);\n      ctx.fillStyle = 'rgba(0,0,0,0.6)';\n      ctx.fillRect(dx, dy + s - barH, s, barH);\n      ctx.fillStyle = '#ffffff';\n      const fontSize = Math.floor(s * 0.12);\n      ctx.font = `bold ${fontSize}px sans-serif`;\n      ctx.textAlign = 'left';\n      ctx.textBaseline = 'middle';\n      ctx.fillText(`${(_influence = card.influence) !== null && _influence !== void 0 ? _influence : 0}`, dx + 8, dy + s - barH / 2);\n    }\n    // Schutz-Status (blauer Punkt)\n    if (card.protected || ((_shield = card.shield) !== null && _shield !== void 0 ? _shield : 0) > 0) {\n      ctx.fillStyle = '#1da1f2';\n      ctx.fillRect(dx + s - 22, dy + 6, 16, 16);\n    }\n    // Deaktiviert-Status (roter Punkt)\n    if (card.deactivated) {\n      ctx.fillStyle = '#b63838';\n      ctx.fillRect(dx + s - 22, dy + 26, 16, 16);\n    }\n\n    // Netto-AP Badge anzeigen (modern) - nur fÃ¼r Handkarten\n    if (showAPCost && player) {\n      const apInfo = getNetApCost(gameState, player, card, 'innen'); // Default auf innen\n      const netText = `âš¡${apInfo.net}`;\n\n      // Badge-GrÃ¶ÃŸe berechnen\n      const badgeHeight = Math.max(16, Math.floor(s * 0.12));\n      const badgeWidth = badgeHeight * 2;\n      const badgeX = dx + s - badgeWidth - 6;\n      const badgeY = dy + 6;\n\n      // Badge-Hintergrund (grÃ¼n fÃ¼r 0 AP, gelb fÃ¼r > 0)\n      const bgColor = apInfo.net === 0 ? '#E7F8EF' : '#FFF7E6';\n      const borderColor = apInfo.net === 0 ? '#10b981' : '#f59e0b';\n      ctx.fillStyle = bgColor;\n      ctx.beginPath();\n      ctx.roundRect(badgeX, badgeY, badgeWidth, badgeHeight, badgeHeight / 2);\n      ctx.fill();\n\n      // Badge-Rand\n      ctx.strokeStyle = borderColor;\n      ctx.lineWidth = 1;\n      ctx.stroke();\n\n      // Text\n      ctx.fillStyle = apInfo.net === 0 ? '#065f46' : '#92400e';\n      ctx.font = `bold ${Math.floor(badgeHeight * 0.5)}px sans-serif`;\n      ctx.textAlign = 'center';\n      ctx.textBaseline = 'middle';\n      ctx.fillText(netText, badgeX + badgeWidth / 2, badgeY + badgeHeight / 2);\n\n      // Reset text align\n      ctx.textAlign = 'start';\n      ctx.textBaseline = 'alphabetic';\n    }\n\n    // Auswahl-Rahmen\n    if (selected) {\n      ctx.strokeStyle = '#61dafb';\n      ctx.lineWidth = 3;\n      ctx.strokeRect(dx + 1, dy + 1, s - 2, s - 2);\n      ctx.lineWidth = 1;\n    }\n\n    // Return exact 256x256 click zone over the card\n    // Since all cards are 256x256, the click zone should match exactly\n    return {\n      x: dx,\n      y: dy,\n      w: 256,\n      h: 256\n    };\n  }, [gameState]);\n\n  // Slot-Benennungs-Funktion basierend auf Glossar\n  const getSlotDisplayName = useCallback((zoneId, index, player) => {\n    const slotNumber = index + 1;\n    if (zoneId.includes('government')) {\n      if (zoneId.includes('player')) {\n        return `Regierungsreihe Slot ${slotNumber}`;\n      } else {\n        return `Gegner Regierung Slot ${slotNumber}`;\n      }\n    } else if (zoneId.includes('public')) {\n      if (zoneId.includes('player')) {\n        return `Ã–ffentlichkeitsreihe Slot ${slotNumber}`;\n      } else {\n        return `Gegner Ã–ffentlichkeit Slot ${slotNumber}`;\n      }\n    } else if (zoneId.includes('permanent.government')) {\n      if (zoneId.includes('player')) {\n        return 'Regierung Spezial-Slot';\n      } else {\n        return 'Gegner Regierung Spezial-Slot';\n      }\n    } else if (zoneId.includes('permanent.public')) {\n      if (zoneId.includes('player')) {\n        return 'Ã–ffentlichkeit Spezial-Slot';\n      } else {\n        return 'Gegner Ã–ffentlichkeit Spezial-Slot';\n      }\n    } else if (zoneId.includes('instant')) {\n      if (zoneId.includes('player')) {\n        return 'Sofort-Slot';\n      } else {\n        return 'Gegner Sofort-Slot';\n      }\n    } else if (zoneId.includes('hand')) {\n      return 'Hand';\n    } else if (zoneId.includes('interventions')) {\n      return 'Interventionen';\n    }\n    return `Slot ${slotNumber}`;\n  }, []);\n  const drawLane = useCallback((ctx, zoneId, player, lane, clickable) => {\n    const zone = getZone(zoneId);\n    if (!zone) return;\n    const slots = computeSlotRects(zone);\n    const arr = gameState.board[player][lane];\n    slots.forEach((s, idx) => {\n      const card = arr[idx];\n\n      // Hintergrundfarbe nach Kategorie\n      let bgColor = 'rgba(0,0,0,0.1)'; // Standard\n      if (zoneId.includes('government')) {\n        bgColor = 'rgba(255, 197, 0, 0.15)'; // Hellgelb fÃ¼r Regierung\n      } else if (zoneId.includes('public')) {\n        bgColor = 'rgba(0, 255, 0, 0.15)'; // HellgrÃ¼n fÃ¼r Ã–ffentlichkeit\n      }\n      ctx.fillStyle = bgColor;\n      ctx.fillRect(s.x, s.y, s.w, s.h);\n\n      // Slot-Rahmen\n      ctx.strokeStyle = 'rgba(255,255,255,0.06)';\n      ctx.strokeRect(s.x + 0.5, s.y + 0.5, s.w - 1, s.h - 1);\n      if (card) {\n        const isSelected = player === 1 && selectedHandIndex !== null && gameState.hands[1][selectedHandIndex] === card;\n        const clickZone = drawCardAt(ctx, card, s.x, s.y, s.w, isSelected, false);\n\n        // Kartenname unter dem Slot anzeigen\n        ctx.fillStyle = 'rgba(255,255,255,0.9)';\n        ctx.font = 'bold 12px sans-serif';\n        ctx.textAlign = 'center';\n        const textY = s.y + s.h + 16;\n        ctx.fillText(card.name, s.x + s.w / 2, textY);\n        clickZonesRef.current.push({\n          ...clickZone,\n          data: {\n            type: 'board_card',\n            player,\n            lane,\n            index: idx,\n            card\n          }\n        });\n      } else if (clickable && gameState.current === player) {\n        // Slot-Benennung anzeigen (fÃ¼r den aktuellen Spieler)\n        const slotName = getSlotDisplayName(zoneId, idx, player);\n        ctx.fillStyle = 'rgba(255,255,255,0.6)';\n        ctx.font = '11px sans-serif';\n        ctx.textAlign = 'center';\n        const textY = s.y + s.h / 2;\n        ctx.fillText(slotName, s.x + s.w / 2, textY);\n        clickZonesRef.current.push({\n          x: s.x,\n          y: s.y,\n          w: s.w,\n          h: s.h,\n          data: {\n            type: 'row_slot',\n            lane,\n            index: idx\n          }\n        });\n      }\n    });\n  }, [gameState, selectedHandIndex, drawCardAt, getSlotDisplayName]);\n  const drawHandP1 = useCallback(ctx => {\n    const hand = sortHandCards(gameState.hands[1]);\n    const zone = getZone('hand.player');\n    if (!zone) return;\n    const slots = computeSlotRects(zone);\n    slots.forEach((s, i) => {\n      const card = hand[i];\n      if (!card) return;\n      // Find original index in unsorted hand for click handling\n      const originalIndex = gameState.hands[1].findIndex(c => c.uid === card.uid);\n      const isSel = selectedHandIndex === originalIndex;\n      const clickZone = drawCardAt(ctx, card, s.x, s.y, s.w, isSel, true, 1); // Show AP cost for player 1 hand\n      clickZonesRef.current.push({\n        ...clickZone,\n        data: {\n          type: 'hand_p1',\n          index: originalIndex,\n          card\n        }\n      });\n    });\n  }, [gameState.hands, selectedHandIndex, drawCardAt]);\n\n  // ðŸ”§ DEV MODE: Player 2 Hand (rechts unten, kompakter)\n  const drawHandP2 = useCallback(ctx => {\n    const hand = sortHandCards(gameState.hands[2]);\n    const zone = getZone('hand.opponent');\n    if (!zone) return;\n    const slots = computeSlotRects(zone);\n\n    // Hintergrund fÃ¼r P2 Hand\n    const [x, y, w, h] = zone.rectPx;\n    ctx.fillStyle = 'rgba(255, 100, 100, 0.15)'; // RÃ¶tlicher Hintergrund fÃ¼r P2\n    ctx.fillRect(x, y, w, h);\n    ctx.strokeStyle = 'rgba(255, 100, 100, 0.3)';\n    ctx.strokeRect(x + 0.5, y + 0.5, w - 1, h - 1);\n\n    // Label fÃ¼r P2 Hand\n    ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\n    ctx.font = 'bold 14px sans-serif';\n    ctx.textAlign = 'center';\n    ctx.fillText('Player 2 Hand', x + w / 2, y - 8);\n    slots.forEach((s, i) => {\n      const card = hand[i];\n      if (!card) return;\n      // Find original index in unsorted hand for click handling\n      const originalIndex = gameState.hands[2].findIndex(c => c.uid === card.uid);\n      const isSel = gameState.current === 2 && selectedHandIndex === originalIndex;\n      const clickZone = drawCardAt(ctx, card, s.x, s.y, s.w, isSel, true, 2); // Show AP cost for player 2 hand\n      clickZonesRef.current.push({\n        ...clickZone,\n        data: {\n          type: 'hand_p2',\n          index: originalIndex,\n          card\n        }\n      });\n    });\n  }, [gameState, selectedHandIndex, drawCardAt]);\n  // Interventions strip (player traps)\n  const drawInterventionsP1 = useCallback(ctx => {\n    const traps = gameState.traps[1] || [];\n    const zone = getZone('interventions.player');\n    if (!zone) return;\n\n    // Single intervention slot\n    const [zx, zy, zw, zh] = zone.rectPx;\n    const card = traps[0]; // Only first trap\n\n    // Hintergrund fÃ¼r Interventions-Slot\n    ctx.fillStyle = 'rgba(200, 160, 255, 0.15)'; // Lavendelfarben fÃ¼r Interventionen\n    ctx.fillRect(zx, zy, zw, zh);\n    ctx.strokeStyle = 'rgba(200, 160, 255, 0.3)';\n    ctx.strokeRect(zx + 0.5, zy + 0.5, zw - 1, zh - 1);\n\n    // Slot-Benennung fÃ¼r Interventions-Slot\n    ctx.fillStyle = 'rgba(200, 160, 255, 0.8)';\n    ctx.font = '11px sans-serif';\n    ctx.textAlign = 'left';\n    ctx.fillText('Intervention', zx + 8, zy + zh - 6);\n    if (card) {\n      const clickZone = drawCardAt(ctx, card, zx, zy, zw, false, false);\n      clickZonesRef.current.push({\n        ...clickZone,\n        data: {\n          type: 'trap_p1',\n          index: 0,\n          card\n        }\n      });\n    }\n  }, [gameState.traps, drawCardAt]);\n\n  // Interventions strip (opponent traps)\n  const drawInterventionsP2 = useCallback(ctx => {\n    const traps = gameState.traps[2] || [];\n    const zone = getZone('interventions.opponent');\n    if (!zone) return;\n\n    // Single intervention slot\n    const [zx, zy, zw, zh] = zone.rectPx;\n    const card = traps[0]; // Only first trap\n\n    // Hintergrund fÃ¼r Interventions-Slot\n    ctx.fillStyle = 'rgba(200, 160, 255, 0.15)'; // Lavendelfarben fÃ¼r Interventionen\n    ctx.fillRect(zx, zy, zw, zh);\n    ctx.strokeStyle = 'rgba(200, 160, 255, 0.3)';\n    ctx.strokeRect(zx + 0.5, zy + 0.5, zw - 1, zh - 1);\n\n    // Slot-Benennung fÃ¼r Interventions-Slot\n    ctx.fillStyle = 'rgba(200, 160, 255, 0.8)';\n    ctx.font = '11px sans-serif';\n    ctx.textAlign = 'left';\n    ctx.fillText('Intervention', zx + 8, zy + zh - 6);\n    if (card) {\n      const clickZone = drawCardAt(ctx, card, zx, zy, zw, false, false);\n      clickZonesRef.current.push({\n        ...clickZone,\n        data: {\n          type: 'trap_p2',\n          index: 0,\n          card\n        }\n      });\n    }\n  }, [gameState.traps, drawCardAt]);\n\n  // Single slot drawing function\n  const drawSingleSlot = useCallback((ctx, zoneId, card, clickType, player) => {\n    const zone = getZone(zoneId);\n    if (!zone) return;\n    const [x, y, w, h] = zone.rectPx;\n\n    // Hintergrundfarbe nach Kategorie\n    let bgColor = 'rgba(0,0,0,0.1)'; // Standard\n    if (zoneId.includes('government')) {\n      bgColor = 'rgba(255, 197, 0, 0.15)'; // Hellgelb fÃ¼r Regierung\n    } else if (zoneId.includes('public')) {\n      bgColor = 'rgba(0, 255, 0, 0.15)'; // HellgrÃ¼n fÃ¼r Ã–ffentlichkeit\n    } else if (zoneId.includes('instant')) {\n      bgColor = 'rgba(127, 116, 91, 0.15)'; // Neutral fÃ¼r Sofort-Slots\n    } else if (zoneId.includes('permanent')) {\n      // Unterscheide zwischen government und public permanent slots\n      if (zoneId.includes('government')) {\n        bgColor = 'rgba(255, 197, 0, 0.15)';\n      } else if (zoneId.includes('public')) {\n        bgColor = 'rgba(0, 255, 0, 0.15)';\n      }\n    }\n    ctx.fillStyle = bgColor;\n    ctx.fillRect(x, y, w, h);\n\n    // Draw slot border\n    ctx.strokeStyle = 'rgba(255,255,255,0.06)';\n    ctx.strokeRect(x + 0.5, y + 0.5, w - 1, h - 1);\n    if (card) {\n      const isSelected = player === 1 && selectedHandIndex !== null && gameState.hands[1][selectedHandIndex] === card;\n      const clickZone = drawCardAt(ctx, card, x, y, w, isSelected, false);\n\n      // Kartenname unter dem Slot anzeigen\n      ctx.fillStyle = 'rgba(255,255,255,0.9)';\n      ctx.font = 'bold 12px sans-serif';\n      ctx.textAlign = 'center';\n      const textY = y + h + 16;\n      ctx.fillText(card.name, x + w / 2, textY);\n      clickZonesRef.current.push({\n        ...clickZone,\n        data: {\n          type: 'slot_card',\n          slot: clickType,\n          card\n        }\n      });\n\n      // ðŸ”§ NEU: Sofort-Initiative-Slots sind klickbar fÃ¼r Aktivierung\n      if (clickType === 'instant' && gameState.current === player) {\n        clickZonesRef.current.push({\n          x,\n          y,\n          w,\n          h,\n          data: {\n            type: 'activate_instant',\n            player,\n            card\n          }\n        });\n      }\n    } else if (gameState.current === player) {\n      // Slot-Benennung fÃ¼r leere Slots anzeigen (fÃ¼r den aktuellen Spieler)\n      const slotName = getSlotDisplayName(zoneId, 0, player);\n      ctx.fillStyle = 'rgba(255,255,255,0.6)';\n      ctx.font = '11px sans-serif';\n      ctx.textAlign = 'center';\n      const textY = y + h / 2;\n      ctx.fillText(slotName, x + w / 2, textY);\n      clickZonesRef.current.push({\n        x,\n        y,\n        w,\n        h,\n        data: {\n          type: 'empty_slot',\n          slot: clickType\n        }\n      });\n    }\n  }, [selectedHandIndex, gameState, drawCardAt, getSlotDisplayName]);\n\n  // Draw permanent slots for player\n  const drawPermanentSlotsP1 = useCallback(ctx => {\n    drawSingleSlot(ctx, 'slot.permanent.government.player', gameState.permanentSlots[1].government, 'permanent_government', 1);\n    drawSingleSlot(ctx, 'slot.permanent.public.player', gameState.permanentSlots[1].public, 'permanent_public', 1);\n  }, [gameState.permanentSlots, drawSingleSlot]);\n\n  // Draw permanent slots for opponent\n  const drawPermanentSlotsP2 = useCallback(ctx => {\n    drawSingleSlot(ctx, 'slot.permanent.government.opponent', gameState.permanentSlots[2].government, 'permanent_government', 2);\n    drawSingleSlot(ctx, 'slot.permanent.public.opponent', gameState.permanentSlots[2].public, 'permanent_public', 2);\n  }, [gameState.permanentSlots, drawSingleSlot]);\n\n  // Draw instant slots\n  const drawInstantSlots = useCallback(ctx => {\n    // Sofort-Initiative-Slots aus dem Board zeichnen\n    const sofortPlayerCard = gameState.board[1].sofort[0];\n    const sofortOppCard = gameState.board[2].sofort[0];\n    drawSingleSlot(ctx, 'slot.instant.player', sofortPlayerCard, 'instant', 1);\n    drawSingleSlot(ctx, 'slot.instant.opponent', sofortOppCard, 'instant', 2);\n  }, [gameState.board, drawSingleSlot]);\n\n  // Aktive SchlÃ¼sselwÃ¶rter und Unterkategorien ermitteln\n  const getActiveKeywordsAndSubcategories = useCallback(player => {\n    const board = gameState.board[player];\n    const permanentSlots = gameState.permanentSlots[player];\n    const allCards = [...board.innen, ...board.aussen, permanentSlots.government, permanentSlots.public].filter(c => c && c.kind === 'pol');\n    const keywords = new Set();\n    const subcategories = new Set();\n    allCards.forEach(card => {\n      if (!card.deactivated) {\n        // Regierungskarten-SchlÃ¼sselwÃ¶rter\n        if (card.tag === 'Leadership') {\n          keywords.add('Leadership');\n        }\n        if (card.tag === 'Diplomat') {\n          keywords.add('Diplomat');\n        }\n\n        // Ã–ffentlichkeits-Unterkategorien (fÃ¼r Karten in Ã–ffentlichkeitsreihe)\n        if (board.innen.includes(card)) {\n          const publicCard = card;\n          if (publicCard.tag) {\n            // Oligarch\n            const oligarchNames = ['Elon Musk', 'Bill Gates', 'George Soros', 'Warren Buffett', 'Mukesh Ambani', 'Jeff Bezos', 'Alisher Usmanov', 'Gautam Adani', 'Jack Ma', 'Zhang Yiming', 'Roman Abramovich'];\n            if (oligarchNames.includes(publicCard.name)) {\n              subcategories.add('Oligarch');\n            }\n\n            // Plattform\n            const platformNames = ['Mark Zuckerberg', 'Tim Cook', 'Sam Altman', 'Jack Ma'];\n            if (platformNames.includes(publicCard.name)) {\n              subcategories.add('Plattform');\n            }\n\n            // Bewegung\n            const movementNames = ['Greta Thunberg', 'Malala Yousafzai', 'Ai Weiwei', 'Alexei Navalny'];\n            if (movementNames.includes(publicCard.name)) {\n              subcategories.add('Bewegung');\n            }\n\n            // NGO/Think-Tank\n            const ngoNames = ['Bill Gates', 'George Soros', 'Jennifer Doudna', 'Noam Chomsky', 'Anthony Fauci'];\n            if (ngoNames.includes(publicCard.name)) {\n              subcategories.add('NGO/Think-Tank');\n            }\n\n            // Intelligenz\n            const intelligenceNames = ['Jennifer Doudna', 'Noam Chomsky', 'Edward Snowden', 'Julian Assange', 'Yuval Noah Harari', 'Ai Weiwei', 'Alexei Navalny', 'Anthony Fauci'];\n            if (intelligenceNames.includes(publicCard.name)) {\n              subcategories.add('Intelligenz');\n            }\n\n            // Medien\n            const mediaNames = ['Oprah Winfrey'];\n            if (mediaNames.includes(publicCard.name)) {\n              subcategories.add('Medien');\n            }\n          }\n        }\n      }\n    });\n    return {\n      keywords: Array.from(keywords),\n      subcategories: Array.from(subcategories)\n    };\n  }, [gameState]);\n\n  // Info-Panels zeichnen\n  const drawInfoPanels = useCallback(ctx => {\n    const {\n      keywords,\n      subcategories\n    } = getActiveKeywordsAndSubcategories(1);\n\n    // Panel fÃ¼r RegierungsschlÃ¼sselwÃ¶rter (rechts neben Regierungsslots)\n    const govPanelX = 1640 + 256 + 20; // Nach dem letzten permanenten Slot\n    const govPanelY = 300; // Auf HÃ¶he der Regierungsslots\n    const govPanelW = 120;\n    const govPanelH = 256;\n\n    // Regierungspanel Hintergrund\n    ctx.fillStyle = 'rgba(255, 197, 0, 0.15)';\n    ctx.fillRect(govPanelX, govPanelY, govPanelW, govPanelH);\n    ctx.strokeStyle = 'rgba(255, 197, 0, 0.3)';\n    ctx.strokeRect(govPanelX + 0.5, govPanelY + 0.5, govPanelW - 1, govPanelH - 1);\n\n    // Regierungspanel Titel\n    ctx.fillStyle = 'rgba(255, 197, 0, 0.9)';\n    ctx.font = 'bold 12px sans-serif';\n    ctx.textAlign = 'center';\n    ctx.fillText('Regierung', govPanelX + govPanelW / 2, govPanelY + 16);\n\n    // SchlÃ¼sselwÃ¶rter auflisten\n    ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\n    ctx.font = '11px sans-serif';\n    ctx.textAlign = 'left';\n    if (keywords.length > 0) {\n      keywords.forEach((keyword, idx) => {\n        ctx.fillText(`â€¢ ${keyword}`, govPanelX + 8, govPanelY + 36 + idx * 16);\n      });\n    } else {\n      ctx.fillStyle = 'rgba(255, 255, 255, 0.5)';\n      ctx.fillText('Keine aktiven', govPanelX + 8, govPanelY + 36);\n      ctx.fillText('SchlÃ¼sselwÃ¶rter', govPanelX + 8, govPanelY + 52);\n    }\n\n    // Panel fÃ¼r Ã–ffentlichkeits-Unterkategorien (rechts neben Ã–ffentlichkeitsslots)\n    const pubPanelX = 1640 + 256 + 20;\n    const pubPanelY = 580; // Auf HÃ¶he der Ã–ffentlichkeitsslots\n    const pubPanelW = 120;\n    const pubPanelH = 256;\n\n    // Ã–ffentlichkeitspanel Hintergrund\n    ctx.fillStyle = 'rgba(0, 255, 0, 0.15)';\n    ctx.fillRect(pubPanelX, pubPanelY, pubPanelW, pubPanelH);\n    ctx.strokeStyle = 'rgba(0, 255, 0, 0.3)';\n    ctx.strokeRect(pubPanelX + 0.5, pubPanelY + 0.5, pubPanelW - 1, pubPanelH - 1);\n\n    // Ã–ffentlichkeitspanel Titel\n    ctx.fillStyle = 'rgba(0, 255, 0, 0.9)';\n    ctx.font = 'bold 12px sans-serif';\n    ctx.textAlign = 'center';\n    ctx.fillText('Ã–ffentlichkeit', pubPanelX + pubPanelW / 2, pubPanelY + 16);\n\n    // Unterkategorien auflisten\n    ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\n    ctx.font = '11px sans-serif';\n    ctx.textAlign = 'left';\n    if (subcategories.length > 0) {\n      subcategories.forEach((subcategory, idx) => {\n        const displayName = subcategory.length > 12 ? subcategory.substring(0, 10) + '...' : subcategory;\n        ctx.fillText(`â€¢ ${displayName}`, pubPanelX + 8, pubPanelY + 36 + idx * 16);\n      });\n    } else {\n      ctx.fillStyle = 'rgba(255, 255, 255, 0.5)';\n      ctx.fillText('Keine aktiven', pubPanelX + 8, pubPanelY + 36);\n      ctx.fillText('Unterkategorien', pubPanelX + 8, pubPanelY + 52);\n    }\n  }, [getActiveKeywordsAndSubcategories]);\n\n  // Move diagnostics to draw callback to ensure they run after canvas is actually rendered\n  const runDiagnostics = useCallback(() => {\n    try {\n      const handZones = clickZonesRef.current.filter(z => z.data && z.data.type === 'hand_p1');\n      const uiUIDs = handZones.map(z => {\n        var _z$data$card$uid;\n        return z.data.card && ((_z$data$card$uid = z.data.card.uid) !== null && _z$data$card$uid !== void 0 ? _z$data$card$uid : z.data.card.id);\n      }).filter(Boolean);\n      const stateHand = gameState.hands && gameState.hands[1] ? gameState.hands[1] : [];\n      const stateUIDs = stateHand.map(c => {\n        var _c$uid;\n        return (_c$uid = c.uid) !== null && _c$uid !== void 0 ? _c$uid : c.id;\n      }).filter(Boolean);\n      const missingInState = uiUIDs.filter(u => !stateUIDs.includes(u));\n      const missingInUI = stateUIDs.filter(u => !uiUIDs.includes(u));\n\n      // Only warn if there are cards in UI that don't exist in state (real error)\n      // Don't warn about missing UI cards due to limited slot capacity\n      if (missingInState.length > 0) {\n        var _politicardDebug;\n        const mismatch = {\n          ts: Date.now(),\n          uiCount: uiUIDs.length,\n          stateCount: stateUIDs.length,\n          uiUIDs,\n          stateUIDs,\n          missingInState,\n          missingInUI,\n          stack: new Error('mismatch-stack').stack\n        };\n        window.__politicardDebug = {\n          ...window.__politicardDebug,\n          mismatch: [...(((_politicardDebug = window.__politicardDebug) === null || _politicardDebug === void 0 ? void 0 : _politicardDebug.mismatch) || [])].slice(-19).concat([mismatch])\n        };\n        // Clear, then log to console so user can copy/paste trace\n        console.warn('POLITICARD DIAGNOSTIC: hand mismatch detected', mismatch);\n      }\n    } catch (e) {\n      // swallow diagnostic errors to avoid breaking rendering\n      console.error('Diagnostic error', e);\n    }\n  }, [gameState.hands]);\n  const draw = useCallback(() => {\n    var _LAYOUT$background, _LAYOUT$background2;\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n\n    // Clear canvas\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    // Clear click zones\n    clickZonesRef.current = [];\n\n    // Background: prefer PNG if configured\n    if ((_LAYOUT$background = LAYOUT.background) !== null && _LAYOUT$background !== void 0 && _LAYOUT$background.enabled && (_LAYOUT$background2 = LAYOUT.background) !== null && _LAYOUT$background2 !== void 0 && _LAYOUT$background2.src) {\n      if (backgroundImageRef.current) {\n        ctx.drawImage(backgroundImageRef.current, 0, 0, canvas.width, canvas.height);\n      } else {\n        ctx.fillStyle = '#0c131b';\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\n      }\n    } else {\n      ctx.fillStyle = '#0c131b';\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n    }\n\n    // Apply UI transform (new signature)\n    const {\n      scale,\n      offsetX,\n      offsetY\n    } = getUiTransform(canvas.width, canvas.height);\n    ctx.save();\n    ctx.translate(offsetX, offsetY);\n    ctx.scale(scale, scale);\n\n    // Draw opponent board (top rows) - clickable im Dev Mode\n    // Draw opponent board using new layout system\n    const opponentPublicRects = getPublicRects('opponent');\n    const opponentGovRects = getGovernmentRects('opponent');\n\n    // Draw opponent public slots\n    opponentPublicRects.forEach((s, idx) => {\n      const card = gameState.board[2].innen[idx];\n      if (card) {\n        drawCardAt(ctx, card, s.x, s.y, s.w, false, false, 2);\n      }\n    });\n\n    // Draw opponent government slots\n    opponentGovRects.forEach((s, idx) => {\n      const card = gameState.board[2].aussen[idx];\n      if (card) {\n        drawCardAt(ctx, card, s.x, s.y, s.w, false, false, 2);\n      }\n    });\n\n    // Draw opponent permanent slots\n    drawPermanentSlotsP2(ctx);\n\n    // Draw player board (middle rows)\n    // Draw player board using new layout system\n    const playerPublicRects = getPublicRects('player');\n    const playerGovRects = getGovernmentRects('player');\n\n    // Draw player public slots\n    playerPublicRects.forEach((s, idx) => {\n      const card = gameState.board[1].innen[idx];\n      if (card) {\n        const clickZone = drawCardAt(ctx, card, s.x, s.y, s.w, false, false, 1);\n        clickZonesRef.current.push({\n          ...clickZone,\n          data: {\n            type: 'row_slot',\n            player: 1,\n            lane: 'innen',\n            index: idx\n          }\n        });\n      } else {\n        // Empty slot click zone\n        clickZonesRef.current.push({\n          x: s.x,\n          y: s.y,\n          w: s.w,\n          h: s.h,\n          data: {\n            type: 'row_slot',\n            player: 1,\n            lane: 'innen',\n            index: idx\n          }\n        });\n      }\n    });\n\n    // Draw player government slots\n    playerGovRects.forEach((s, idx) => {\n      const card = gameState.board[1].aussen[idx];\n      if (card) {\n        const clickZone = drawCardAt(ctx, card, s.x, s.y, s.w, false, false, 1);\n        clickZonesRef.current.push({\n          ...clickZone,\n          data: {\n            type: 'row_slot',\n            player: 1,\n            lane: 'aussen',\n            index: idx\n          }\n        });\n      } else {\n        // Empty slot click zone\n        clickZonesRef.current.push({\n          x: s.x,\n          y: s.y,\n          w: s.w,\n          h: s.h,\n          data: {\n            type: 'row_slot',\n            player: 1,\n            lane: 'aussen',\n            index: idx\n          }\n        });\n      }\n    });\n\n    // Draw player permanent slots\n    drawPermanentSlotsP1(ctx);\n\n    // Draw instant slots (both players)\n    drawInstantSlots(ctx);\n\n    // Draw interventions strip (player)\n    drawInterventionsP1(ctx);\n\n    // Draw interventions strip (opponent) - nur im Dev Mode\n    if (devMode) {\n      drawInterventionsP2(ctx);\n    }\n\n    // Draw hand (P1)\n    drawHandP1(ctx);\n\n    // ðŸ”§ DEV MODE: Draw hand (P2) - nur im Dev Mode\n    if (devMode) {\n      drawHandP2(ctx);\n    }\n\n    // Draw info panels\n    drawInfoPanels(ctx);\n    ctx.restore();\n\n    // expose zones for debug snapshot\n    window.__politicardDebug = {\n      uiTransform: getUiTransform(canvas.width, canvas.height),\n      canvasSize: {\n        width: canvas.width,\n        height: canvas.height\n      },\n      zones: LAYOUT.zones,\n      clickZones: clickZonesRef.current.slice(0, 1000)\n    };\n\n    // Run diagnostics after canvas is fully rendered\n    runDiagnostics();\n  }, [drawLane, drawHandP1, drawHandP2, drawInterventionsP1, drawInterventionsP2, drawPermanentSlotsP1, drawPermanentSlotsP2, drawInstantSlots, drawInfoPanels, devMode, runDiagnostics]);\n  const DRAW_LAYOUT_OVERLAY = false; // force off per new layout system\n\n  // Load background image if configured\n  useEffect(() => {\n    var _LAYOUT$background3, _LAYOUT$background4;\n    if ((_LAYOUT$background3 = LAYOUT.background) !== null && _LAYOUT$background3 !== void 0 && _LAYOUT$background3.enabled && (_LAYOUT$background4 = LAYOUT.background) !== null && _LAYOUT$background4 !== void 0 && _LAYOUT$background4.src) {\n      const img = new Image();\n      img.onload = () => {\n        backgroundImageRef.current = img;\n        requestAnimationFrame(draw);\n      };\n      img.onerror = () => {\n        var _LAYOUT$background5;\n        console.warn('Failed to load background image', (_LAYOUT$background5 = LAYOUT.background) === null || _LAYOUT$background5 === void 0 ? void 0 : _LAYOUT$background5.src);\n      };\n      img.src = LAYOUT.background.src;\n    } else {\n      // Fallback: ensure first draw without background\n      requestAnimationFrame(draw);\n    }\n  }, [draw]);\n\n  // Redraw when game state or selection changes\n  useEffect(() => {\n    requestAnimationFrame(draw);\n  }, [gameState, selectedHandIndex, draw]);\n\n  // Continuous render loop to keep canvas updated without relying on external state refs\n  useEffect(() => {\n    let frame;\n    const loop = () => {\n      draw();\n      frame = requestAnimationFrame(loop);\n    };\n    frame = requestAnimationFrame(loop);\n    return () => cancelAnimationFrame(frame);\n  }, [draw]);\n  const handleCardClick = useCallback(data => {\n    // Hand-Klick\n    if (data.type === 'hand_p1') {\n      var _data$card$uid, _data$card, _data$card2, _gameState$hands;\n      const uid = (_data$card$uid = (_data$card = data.card) === null || _data$card === void 0 ? void 0 : _data$card.uid) !== null && _data$card$uid !== void 0 ? _data$card$uid : (_data$card2 = data.card) === null || _data$card2 === void 0 ? void 0 : _data$card2.id;\n      const stateHand = ((_gameState$hands = gameState.hands) === null || _gameState$hands === void 0 ? void 0 : _gameState$hands[1]) || [];\n      const idxInState = stateHand.findIndex(c => {\n        var _c$uid2;\n        return ((_c$uid2 = c.uid) !== null && _c$uid2 !== void 0 ? _c$uid2 : c.id) === uid;\n      });\n      onCardClick(data);\n      return;\n    }\n\n    // Slot-Klick\n    if (data.type === 'row_slot') {\n      var _gameState$board$1$in, _gameState$board, _gameState$board$, _gameState$board$1$au, _gameState$board2, _gameState$board2$;\n      const lane = data.lane;\n      const cap = getLaneCapacity(lane);\n\n      // Hole aktuelle Row-LÃ¤nge aus gameState\n      const rowCards = lane === 'public' ? (_gameState$board$1$in = (_gameState$board = gameState.board) === null || _gameState$board === void 0 ? void 0 : (_gameState$board$ = _gameState$board[1]) === null || _gameState$board$ === void 0 ? void 0 : _gameState$board$.innen) !== null && _gameState$board$1$in !== void 0 ? _gameState$board$1$in : [] : (_gameState$board$1$au = (_gameState$board2 = gameState.board) === null || _gameState$board2 === void 0 ? void 0 : (_gameState$board2$ = _gameState$board2[1]) === null || _gameState$board2$ === void 0 ? void 0 : _gameState$board2$.aussen) !== null && _gameState$board$1$au !== void 0 ? _gameState$board$1$au : [];\n      if (rowCards.length >= cap) {\n        // Optional: UI Feedback\n        console.warn(`Row ${lane} is full (${rowCards.length}/${cap})`);\n        return;\n      }\n      onCardClick(data);\n      return;\n    }\n\n    // Andere Klicks (empty_slot, board_card, etc.)\n    onCardClick(data);\n  }, [gameState, onCardClick]);\n  const handleClick = useCallback(e => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const rect = canvas.getBoundingClientRect();\n    const {\n      scale,\n      offsetX,\n      offsetY\n    } = getUiTransform(canvas.width, canvas.height);\n    const mx = (e.clientX - rect.left - offsetX) / scale;\n    const my = (e.clientY - rect.top - offsetY) / scale;\n    const hit = clickZonesRef.current.find(z => mx >= z.x && mx <= z.x + z.w && my >= z.y && my <= z.y + z.h);\n    if (hit) handleCardClick(hit.data);\n  }, [handleCardClick]);\n  const handleMouseMove = useCallback(e => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const rect = canvas.getBoundingClientRect();\n    const {\n      scale,\n      offsetX,\n      offsetY\n    } = getUiTransform(canvas.width, canvas.height);\n    const mx = (e.clientX - rect.left - offsetX) / scale;\n    const my = (e.clientY - rect.top - offsetY) / scale;\n    const hit = clickZonesRef.current.find(z => mx >= z.x && mx <= z.x + z.w && my >= z.y && my <= z.y + z.h);\n    if (hit) {\n      var _hit$data$card;\n      console.log('[hover]', hit.data.type, (_hit$data$card = hit.data.card) === null || _hit$data$card === void 0 ? void 0 : _hit$data$card.name);\n      onCardHover({\n        ...hit.data,\n        x: e.clientX,\n        y: e.clientY\n      });\n    } else {\n      onCardHover(null);\n    }\n  }, [onCardHover]);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    width: 1920,\n    height: 1080,\n    style: {\n      display: 'block',\n      width: '100%',\n      height: '100%',\n      imageRendering: 'auto'\n    },\n    onClick: handleClick,\n    onMouseMove: handleMouseMove\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 860,\n    columnNumber: 5\n  }, this);\n};\n_s(GameCanvas, \"fcWGYAFRkJJhtgJxDpWfseUstBo=\");\n_c = GameCanvas;\nvar _c;\n$RefreshReg$(_c, \"GameCanvas\");","map":{"version":3,"names":["React","useRef","useEffect","useCallback","LAYOUT","getZone","computeSlotRects","getUiTransform","getLaneCapacity","getPublicRects","getGovernmentRects","sortHandCards","getNetApCost","getCardImagePath","jsxDEV","_jsxDEV","GameCanvas","gameState","selectedHandIndex","onCardClick","onCardHover","devMode","_s","canvasRef","clickZonesRef","backgroundImageRef","imageCacheRef","Map","drawCardAt","ctx","card","x","y","size","selected","showAPCost","player","_shield","dx","dy","s","Math","floor","src","cached","current","get","complete","drawImage","img","Image","onload","set","kind","_influence","barH","max","fillStyle","fillRect","fontSize","font","textAlign","textBaseline","fillText","influence","protected","shield","deactivated","apInfo","netText","net","badgeHeight","badgeWidth","badgeX","badgeY","bgColor","borderColor","beginPath","roundRect","fill","strokeStyle","lineWidth","stroke","strokeRect","w","h","getSlotDisplayName","zoneId","index","slotNumber","includes","drawLane","lane","clickable","zone","slots","arr","board","forEach","idx","isSelected","hands","clickZone","textY","name","push","data","type","slotName","drawHandP1","hand","i","originalIndex","findIndex","c","uid","isSel","drawHandP2","rectPx","drawInterventionsP1","traps","zx","zy","zw","zh","drawInterventionsP2","drawSingleSlot","clickType","slot","drawPermanentSlotsP1","permanentSlots","government","public","drawPermanentSlotsP2","drawInstantSlots","sofortPlayerCard","sofort","sofortOppCard","getActiveKeywordsAndSubcategories","allCards","innen","aussen","filter","keywords","Set","subcategories","tag","add","publicCard","oligarchNames","platformNames","movementNames","ngoNames","intelligenceNames","mediaNames","Array","from","drawInfoPanels","govPanelX","govPanelY","govPanelW","govPanelH","length","keyword","pubPanelX","pubPanelY","pubPanelW","pubPanelH","subcategory","displayName","substring","runDiagnostics","handZones","z","uiUIDs","map","_z$data$card$uid","id","Boolean","stateHand","stateUIDs","_c$uid","missingInState","u","missingInUI","_politicardDebug","mismatch","ts","Date","now","uiCount","stateCount","stack","Error","window","__politicardDebug","slice","concat","console","warn","e","error","draw","_LAYOUT$background","_LAYOUT$background2","canvas","getContext","clearRect","width","height","background","enabled","scale","offsetX","offsetY","save","translate","opponentPublicRects","opponentGovRects","playerPublicRects","playerGovRects","restore","uiTransform","canvasSize","zones","clickZones","DRAW_LAYOUT_OVERLAY","_LAYOUT$background3","_LAYOUT$background4","requestAnimationFrame","onerror","_LAYOUT$background5","frame","loop","cancelAnimationFrame","handleCardClick","_data$card$uid","_data$card","_data$card2","_gameState$hands","idxInState","_c$uid2","_gameState$board$1$in","_gameState$board","_gameState$board$","_gameState$board$1$au","_gameState$board2","_gameState$board2$","cap","rowCards","handleClick","rect","getBoundingClientRect","mx","clientX","left","my","clientY","top","hit","find","handleMouseMove","_hit$data$card","log","ref","style","display","imageRendering","onClick","onMouseMove","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/skank/Videos/Cards/Milchcards/src/components/GameCanvas.tsx"],"sourcesContent":["import React, { useRef, useEffect, useCallback } from 'react';\r\nimport { GameState, Card, PoliticianCard, Player, Lane } from '../types/game';\r\nimport { LAYOUT, getZone, computeSlotRects, getUiTransform, getLaneCapacity, getPublicRects, getGovernmentRects, getSofortRect } from '../ui/layout';\r\nimport { drawCardImage, sortHandCards } from '../utils/gameUtils';\r\nimport { getNetApCost } from '../utils/ap';\r\nimport { getCardImagePath } from '../data/gameData';\r\n\r\ninterface GameCanvasProps {\r\n  gameState: GameState;\r\n  selectedHandIndex: number | null;\r\n  onCardClick: (data: any) => void;\r\n  onCardHover: (data: any) => void;\r\n  devMode?: boolean; // ðŸ”§ DEV MODE: Show P2 hand when true\r\n}\r\n\r\n\r\n\r\nexport const GameCanvas: React.FC<GameCanvasProps> = ({\r\n  gameState,\r\n  selectedHandIndex,\r\n  onCardClick,\r\n  onCardHover,\r\n  devMode = false,\r\n}) => {\r\n  const canvasRef = useRef<HTMLCanvasElement>(null);\r\n  const clickZonesRef = useRef<Array<{ x: number; y: number; w: number; h: number; data: any }>>([]);\r\n  const backgroundImageRef = useRef<HTMLImageElement | null>(null);\r\n  const imageCacheRef = useRef<Map<string, HTMLImageElement>>(new Map());\r\n\r\n\r\n\r\n  const drawCardAt = useCallback((\r\n    ctx: CanvasRenderingContext2D,\r\n    card: Card,\r\n    x: number,\r\n    y: number,\r\n    size: number,\r\n    selected: boolean = false,\r\n    showAPCost: boolean = false,\r\n    player?: Player\r\n  ) => {\r\n    let dx = x, dy = y, s = size;\r\n    if (selected) {\r\n      s = Math.floor(size * 1.05);\r\n      dx = x - Math.floor((s - size) / 2);\r\n      dy = y - Math.floor((s - size) / 2);\r\n    }\r\n\r\n    // Draw card image with caching to prevent flicker in continuous loop\r\n    const src = getCardImagePath(card, 'ui');\r\n    const cached = imageCacheRef.current.get(src);\r\n    if (cached && cached.complete) {\r\n      ctx.drawImage(cached, dx, dy, s, s);\r\n    } else {\r\n      const img = new Image();\r\n      img.onload = () => {\r\n        imageCacheRef.current.set(src, img);\r\n        ctx.drawImage(img, dx, dy, s, s);\r\n      };\r\n      img.src = src;\r\n      imageCacheRef.current.set(src, img);\r\n    }\r\n\r\n    // Status-Indikatoren (fÃ¼r alle Board-Karten)\r\n    // Einfluss-Wert dauerhaft anzeigen (oben links) â€“ nur fÃ¼r Regierungskarten\r\n    if ((card as any).kind === 'pol') {\r\n      const barH = Math.max(20, Math.floor(s * 0.12) + 6);\r\n      ctx.fillStyle = 'rgba(0,0,0,0.6)';\r\n      ctx.fillRect(dx, dy + s - barH, s, barH);\r\n\r\n      ctx.fillStyle = '#ffffff';\r\n      const fontSize = Math.floor(s * 0.12);\r\n      ctx.font = `bold ${fontSize}px sans-serif`;\r\n      ctx.textAlign = 'left';\r\n      ctx.textBaseline = 'middle';\r\n      ctx.fillText(`${(card as any).influence ?? 0}`, dx + 8, dy + s - barH / 2);\r\n    }\r\n    // Schutz-Status (blauer Punkt)\r\n    if ((card as any).protected || ((card as any).shield ?? 0) > 0) {\r\n      ctx.fillStyle = '#1da1f2';\r\n      ctx.fillRect(dx + s - 22, dy + 6, 16, 16);\r\n    }\r\n    // Deaktiviert-Status (roter Punkt)\r\n    if ((card as any).deactivated) {\r\n      ctx.fillStyle = '#b63838';\r\n      ctx.fillRect(dx + s - 22, dy + 26, 16, 16);\r\n    }\r\n\r\n    // Netto-AP Badge anzeigen (modern) - nur fÃ¼r Handkarten\r\n    if (showAPCost && player) {\r\n      const apInfo = getNetApCost(gameState, player, card, 'innen'); // Default auf innen\r\n      const netText = `âš¡${apInfo.net}`;\r\n\r\n      // Badge-GrÃ¶ÃŸe berechnen\r\n      const badgeHeight = Math.max(16, Math.floor(s * 0.12));\r\n      const badgeWidth = badgeHeight * 2;\r\n      const badgeX = dx + s - badgeWidth - 6;\r\n      const badgeY = dy + 6;\r\n\r\n      // Badge-Hintergrund (grÃ¼n fÃ¼r 0 AP, gelb fÃ¼r > 0)\r\n      const bgColor = apInfo.net === 0 ? '#E7F8EF' : '#FFF7E6';\r\n      const borderColor = apInfo.net === 0 ? '#10b981' : '#f59e0b';\r\n\r\n      ctx.fillStyle = bgColor;\r\n      ctx.beginPath();\r\n      ctx.roundRect(badgeX, badgeY, badgeWidth, badgeHeight, badgeHeight / 2);\r\n      ctx.fill();\r\n\r\n      // Badge-Rand\r\n      ctx.strokeStyle = borderColor;\r\n      ctx.lineWidth = 1;\r\n      ctx.stroke();\r\n\r\n      // Text\r\n      ctx.fillStyle = apInfo.net === 0 ? '#065f46' : '#92400e';\r\n      ctx.font = `bold ${Math.floor(badgeHeight * 0.5)}px sans-serif`;\r\n      ctx.textAlign = 'center';\r\n      ctx.textBaseline = 'middle';\r\n      ctx.fillText(netText, badgeX + badgeWidth / 2, badgeY + badgeHeight / 2);\r\n\r\n      // Reset text align\r\n      ctx.textAlign = 'start';\r\n      ctx.textBaseline = 'alphabetic';\r\n    }\r\n\r\n    // Auswahl-Rahmen\r\n    if (selected) {\r\n      ctx.strokeStyle = '#61dafb';\r\n      ctx.lineWidth = 3;\r\n      ctx.strokeRect(dx + 1, dy + 1, s - 2, s - 2);\r\n      ctx.lineWidth = 1;\r\n    }\r\n\r\n    // Return exact 256x256 click zone over the card\r\n    // Since all cards are 256x256, the click zone should match exactly\r\n    return { x: dx, y: dy, w: 256, h: 256 };\r\n  }, [gameState]);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  // Slot-Benennungs-Funktion basierend auf Glossar\r\n  const getSlotDisplayName = useCallback((zoneId: string, index: number, player: Player): string => {\r\n    const slotNumber = index + 1;\r\n\r\n    if (zoneId.includes('government')) {\r\n      if (zoneId.includes('player')) {\r\n        return `Regierungsreihe Slot ${slotNumber}`;\r\n      } else {\r\n        return `Gegner Regierung Slot ${slotNumber}`;\r\n      }\r\n    } else if (zoneId.includes('public')) {\r\n      if (zoneId.includes('player')) {\r\n        return `Ã–ffentlichkeitsreihe Slot ${slotNumber}`;\r\n      } else {\r\n        return `Gegner Ã–ffentlichkeit Slot ${slotNumber}`;\r\n      }\r\n    } else if (zoneId.includes('permanent.government')) {\r\n      if (zoneId.includes('player')) {\r\n        return 'Regierung Spezial-Slot';\r\n      } else {\r\n        return 'Gegner Regierung Spezial-Slot';\r\n      }\r\n    } else if (zoneId.includes('permanent.public')) {\r\n      if (zoneId.includes('player')) {\r\n        return 'Ã–ffentlichkeit Spezial-Slot';\r\n      } else {\r\n        return 'Gegner Ã–ffentlichkeit Spezial-Slot';\r\n      }\r\n    } else if (zoneId.includes('instant')) {\r\n      if (zoneId.includes('player')) {\r\n        return 'Sofort-Slot';\r\n      } else {\r\n        return 'Gegner Sofort-Slot';\r\n      }\r\n    } else if (zoneId.includes('hand')) {\r\n      return 'Hand';\r\n    } else if (zoneId.includes('interventions')) {\r\n      return 'Interventionen';\r\n    }\r\n\r\n    return `Slot ${slotNumber}`;\r\n  }, []);\r\n\r\n  const drawLane = useCallback((\r\n    ctx: CanvasRenderingContext2D,\r\n    zoneId: string,\r\n    player: Player,\r\n    lane: Lane,\r\n    clickable: boolean\r\n  ) => {\r\n    const zone = getZone(zoneId);\r\n    if (!zone) return;\r\n\r\n    const slots = computeSlotRects(zone);\r\n    const arr = gameState.board[player][lane];\r\n\r\n    slots.forEach((s, idx) => {\r\n      const card = arr[idx];\r\n\r\n      // Hintergrundfarbe nach Kategorie\r\n      let bgColor = 'rgba(0,0,0,0.1)'; // Standard\r\n      if (zoneId.includes('government')) {\r\n        bgColor = 'rgba(255, 197, 0, 0.15)'; // Hellgelb fÃ¼r Regierung\r\n      } else if (zoneId.includes('public')) {\r\n        bgColor = 'rgba(0, 255, 0, 0.15)'; // HellgrÃ¼n fÃ¼r Ã–ffentlichkeit\r\n      }\r\n\r\n      ctx.fillStyle = bgColor;\r\n      ctx.fillRect(s.x, s.y, s.w, s.h);\r\n\r\n      // Slot-Rahmen\r\n      ctx.strokeStyle = 'rgba(255,255,255,0.06)';\r\n      ctx.strokeRect(s.x + 0.5, s.y + 0.5, s.w - 1, s.h - 1);\r\n\r\n      if (card) {\r\n        const isSelected = player === 1 && selectedHandIndex !== null && gameState.hands[1][selectedHandIndex] === card;\r\n        const clickZone = drawCardAt(ctx, card, s.x, s.y, s.w, isSelected, false);\r\n\r\n        // Kartenname unter dem Slot anzeigen\r\n        ctx.fillStyle = 'rgba(255,255,255,0.9)';\r\n        ctx.font = 'bold 12px sans-serif';\r\n        ctx.textAlign = 'center';\r\n        const textY = s.y + s.h + 16;\r\n        ctx.fillText(card.name, s.x + s.w/2, textY);\r\n\r\n        clickZonesRef.current.push({\r\n          ...clickZone,\r\n          data: { type: 'board_card', player, lane, index: idx, card }\r\n        });\r\n      } else if (clickable && gameState.current === player) {\r\n        // Slot-Benennung anzeigen (fÃ¼r den aktuellen Spieler)\r\n        const slotName = getSlotDisplayName(zoneId, idx, player);\r\n        ctx.fillStyle = 'rgba(255,255,255,0.6)';\r\n        ctx.font = '11px sans-serif';\r\n        ctx.textAlign = 'center';\r\n        const textY = s.y + s.h/2;\r\n        ctx.fillText(slotName, s.x + s.w/2, textY);\r\n\r\n        clickZonesRef.current.push({\r\n          x: s.x, y: s.y, w: s.w, h: s.h,\r\n          data: { type: 'row_slot', lane, index: idx }\r\n        });\r\n      }\r\n    });\r\n  }, [gameState, selectedHandIndex, drawCardAt, getSlotDisplayName]);\r\n\r\n  const drawHandP1 = useCallback((ctx: CanvasRenderingContext2D) => {\r\n    const hand = sortHandCards(gameState.hands[1]);\r\n    const zone = getZone('hand.player');\r\n    if (!zone) return;\r\n\r\n    const slots = computeSlotRects(zone);\r\n    slots.forEach((s: { x: number; y: number; w: number; h: number }, i: number) => {\r\n      const card = hand[i];\r\n      if (!card) return;\r\n      // Find original index in unsorted hand for click handling\r\n      const originalIndex = gameState.hands[1].findIndex(c => c.uid === card.uid);\r\n      const isSel = selectedHandIndex === originalIndex;\r\n      const clickZone = drawCardAt(ctx, card, s.x, s.y, s.w, isSel, true, 1); // Show AP cost for player 1 hand\r\n      clickZonesRef.current.push({ ...clickZone, data: { type: 'hand_p1', index: originalIndex, card } });\r\n    });\r\n  }, [gameState.hands, selectedHandIndex, drawCardAt]);\r\n\r\n      // ðŸ”§ DEV MODE: Player 2 Hand (rechts unten, kompakter)\r\n  const drawHandP2 = useCallback((ctx: CanvasRenderingContext2D) => {\r\n    const hand = sortHandCards(gameState.hands[2]);\r\n    const zone = getZone('hand.opponent');\r\n    if (!zone) return;\r\n\r\n    const slots = computeSlotRects(zone);\r\n\r\n    // Hintergrund fÃ¼r P2 Hand\r\n    const [x, y, w, h] = zone.rectPx;\r\n    ctx.fillStyle = 'rgba(255, 100, 100, 0.15)'; // RÃ¶tlicher Hintergrund fÃ¼r P2\r\n    ctx.fillRect(x, y, w, h);\r\n    ctx.strokeStyle = 'rgba(255, 100, 100, 0.3)';\r\n    ctx.strokeRect(x + 0.5, y + 0.5, w - 1, h - 1);\r\n\r\n    // Label fÃ¼r P2 Hand\r\n    ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\r\n    ctx.font = 'bold 14px sans-serif';\r\n    ctx.textAlign = 'center';\r\n    ctx.fillText('Player 2 Hand', x + w/2, y - 8);\r\n\r\n    slots.forEach((s: { x: number; y: number; w: number; h: number }, i: number) => {\r\n      const card = hand[i];\r\n      if (!card) return;\r\n      // Find original index in unsorted hand for click handling\r\n      const originalIndex = gameState.hands[2].findIndex(c => c.uid === card.uid);\r\n      const isSel = gameState.current === 2 && selectedHandIndex === originalIndex;\r\n      const clickZone = drawCardAt(ctx, card, s.x, s.y, s.w, isSel, true, 2); // Show AP cost for player 2 hand\r\n      clickZonesRef.current.push({ ...clickZone, data: { type: 'hand_p2', index: originalIndex, card } });\r\n    });\r\n  }, [gameState, selectedHandIndex, drawCardAt]);\r\n  // Interventions strip (player traps)\r\n  const drawInterventionsP1 = useCallback((ctx: CanvasRenderingContext2D) => {\r\n    const traps = gameState.traps[1] || [];\r\n    const zone = getZone('interventions.player');\r\n    if (!zone) return;\r\n\r\n    // Single intervention slot\r\n    const [zx, zy, zw, zh] = zone.rectPx;\r\n    const card = traps[0]; // Only first trap\r\n\r\n    // Hintergrund fÃ¼r Interventions-Slot\r\n    ctx.fillStyle = 'rgba(200, 160, 255, 0.15)'; // Lavendelfarben fÃ¼r Interventionen\r\n    ctx.fillRect(zx, zy, zw, zh);\r\n    ctx.strokeStyle = 'rgba(200, 160, 255, 0.3)';\r\n    ctx.strokeRect(zx + 0.5, zy + 0.5, zw - 1, zh - 1);\r\n\r\n    // Slot-Benennung fÃ¼r Interventions-Slot\r\n    ctx.fillStyle = 'rgba(200, 160, 255, 0.8)';\r\n    ctx.font = '11px sans-serif';\r\n    ctx.textAlign = 'left';\r\n    ctx.fillText('Intervention', zx + 8, zy + zh - 6);\r\n\r\n    if (card) {\r\n      const clickZone = drawCardAt(ctx, card, zx, zy, zw, false, false);\r\n      clickZonesRef.current.push({ ...clickZone, data: { type: 'trap_p1', index: 0, card } });\r\n    }\r\n  }, [gameState.traps, drawCardAt]);\r\n\r\n  // Interventions strip (opponent traps)\r\n  const drawInterventionsP2 = useCallback((ctx: CanvasRenderingContext2D) => {\r\n    const traps = gameState.traps[2] || [];\r\n    const zone = getZone('interventions.opponent');\r\n    if (!zone) return;\r\n\r\n    // Single intervention slot\r\n    const [zx, zy, zw, zh] = zone.rectPx;\r\n    const card = traps[0]; // Only first trap\r\n\r\n    // Hintergrund fÃ¼r Interventions-Slot\r\n    ctx.fillStyle = 'rgba(200, 160, 255, 0.15)'; // Lavendelfarben fÃ¼r Interventionen\r\n    ctx.fillRect(zx, zy, zw, zh);\r\n    ctx.strokeStyle = 'rgba(200, 160, 255, 0.3)';\r\n    ctx.strokeRect(zx + 0.5, zy + 0.5, zw - 1, zh - 1);\r\n\r\n    // Slot-Benennung fÃ¼r Interventions-Slot\r\n    ctx.fillStyle = 'rgba(200, 160, 255, 0.8)';\r\n    ctx.font = '11px sans-serif';\r\n    ctx.textAlign = 'left';\r\n    ctx.fillText('Intervention', zx + 8, zy + zh - 6);\r\n\r\n    if (card) {\r\n      const clickZone = drawCardAt(ctx, card, zx, zy, zw, false, false);\r\n      clickZonesRef.current.push({ ...clickZone, data: { type: 'trap_p2', index: 0, card } });\r\n    }\r\n  }, [gameState.traps, drawCardAt]);\r\n\r\n  // Single slot drawing function\r\n  const drawSingleSlot = useCallback((\r\n    ctx: CanvasRenderingContext2D,\r\n    zoneId: string,\r\n    card: Card | null,\r\n    clickType: string,\r\n    player: Player\r\n  ) => {\r\n    const zone = getZone(zoneId);\r\n    if (!zone) return;\r\n    const [x, y, w, h] = zone.rectPx;\r\n\r\n    // Hintergrundfarbe nach Kategorie\r\n    let bgColor = 'rgba(0,0,0,0.1)'; // Standard\r\n    if (zoneId.includes('government')) {\r\n      bgColor = 'rgba(255, 197, 0, 0.15)'; // Hellgelb fÃ¼r Regierung\r\n    } else if (zoneId.includes('public')) {\r\n      bgColor = 'rgba(0, 255, 0, 0.15)'; // HellgrÃ¼n fÃ¼r Ã–ffentlichkeit\r\n    } else if (zoneId.includes('instant')) {\r\n      bgColor = 'rgba(127, 116, 91, 0.15)'; // Neutral fÃ¼r Sofort-Slots\r\n    } else if (zoneId.includes('permanent')) {\r\n      // Unterscheide zwischen government und public permanent slots\r\n      if (zoneId.includes('government')) {\r\n        bgColor = 'rgba(255, 197, 0, 0.15)';\r\n      } else if (zoneId.includes('public')) {\r\n        bgColor = 'rgba(0, 255, 0, 0.15)';\r\n      }\r\n    }\r\n\r\n    ctx.fillStyle = bgColor;\r\n    ctx.fillRect(x, y, w, h);\r\n\r\n    // Draw slot border\r\n    ctx.strokeStyle = 'rgba(255,255,255,0.06)';\r\n    ctx.strokeRect(x + 0.5, y + 0.5, w - 1, h - 1);\r\n\r\n    if (card) {\r\n      const isSelected = player === 1 && selectedHandIndex !== null && gameState.hands[1][selectedHandIndex] === card;\r\n      const clickZone = drawCardAt(ctx, card, x, y, w, isSelected, false);\r\n\r\n      // Kartenname unter dem Slot anzeigen\r\n      ctx.fillStyle = 'rgba(255,255,255,0.9)';\r\n      ctx.font = 'bold 12px sans-serif';\r\n      ctx.textAlign = 'center';\r\n      const textY = y + h + 16;\r\n      ctx.fillText(card.name, x + w/2, textY);\r\n\r\n      clickZonesRef.current.push({ ...clickZone, data: { type: 'slot_card', slot: clickType, card } });\r\n\r\n      // ðŸ”§ NEU: Sofort-Initiative-Slots sind klickbar fÃ¼r Aktivierung\r\n      if (clickType === 'instant' && gameState.current === player) {\r\n        clickZonesRef.current.push({\r\n          x, y, w, h,\r\n          data: { type: 'activate_instant', player, card }\r\n        });\r\n      }\r\n    } else if (gameState.current === player) {\r\n      // Slot-Benennung fÃ¼r leere Slots anzeigen (fÃ¼r den aktuellen Spieler)\r\n      const slotName = getSlotDisplayName(zoneId, 0, player);\r\n      ctx.fillStyle = 'rgba(255,255,255,0.6)';\r\n      ctx.font = '11px sans-serif';\r\n      ctx.textAlign = 'center';\r\n      const textY = y + h/2;\r\n      ctx.fillText(slotName, x + w/2, textY);\r\n\r\n      clickZonesRef.current.push({ x, y, w, h, data: { type: 'empty_slot', slot: clickType } });\r\n    }\r\n  }, [selectedHandIndex, gameState, drawCardAt, getSlotDisplayName]);\r\n\r\n  // Draw permanent slots for player\r\n  const drawPermanentSlotsP1 = useCallback((ctx: CanvasRenderingContext2D) => {\r\n    drawSingleSlot(ctx, 'slot.permanent.government.player', gameState.permanentSlots[1].government, 'permanent_government', 1);\r\n    drawSingleSlot(ctx, 'slot.permanent.public.player', gameState.permanentSlots[1].public, 'permanent_public', 1);\r\n  }, [gameState.permanentSlots, drawSingleSlot]);\r\n\r\n  // Draw permanent slots for opponent\r\n  const drawPermanentSlotsP2 = useCallback((ctx: CanvasRenderingContext2D) => {\r\n    drawSingleSlot(ctx, 'slot.permanent.government.opponent', gameState.permanentSlots[2].government, 'permanent_government', 2);\r\n    drawSingleSlot(ctx, 'slot.permanent.public.opponent', gameState.permanentSlots[2].public, 'permanent_public', 2);\r\n  }, [gameState.permanentSlots, drawSingleSlot]);\r\n\r\n  // Draw instant slots\r\n  const drawInstantSlots = useCallback((ctx: CanvasRenderingContext2D) => {\r\n    // Sofort-Initiative-Slots aus dem Board zeichnen\r\n    const sofortPlayerCard = gameState.board[1].sofort[0];\r\n    const sofortOppCard = gameState.board[2].sofort[0];\r\n\r\n    drawSingleSlot(ctx, 'slot.instant.player', sofortPlayerCard, 'instant', 1);\r\n    drawSingleSlot(ctx, 'slot.instant.opponent', sofortOppCard, 'instant', 2);\r\n  }, [gameState.board, drawSingleSlot]);\r\n\r\n  // Aktive SchlÃ¼sselwÃ¶rter und Unterkategorien ermitteln\r\n  const getActiveKeywordsAndSubcategories = useCallback((player: Player) => {\r\n    const board = gameState.board[player];\r\n    const permanentSlots = gameState.permanentSlots[player];\r\n    const allCards = [\r\n      ...board.innen,\r\n      ...board.aussen,\r\n      permanentSlots.government,\r\n      permanentSlots.public\r\n    ].filter(c => c && c.kind === 'pol') as PoliticianCard[];\r\n\r\n    const keywords = new Set<string>();\r\n    const subcategories = new Set<string>();\r\n\r\n    allCards.forEach(card => {\r\n      if (!card.deactivated) {\r\n        // Regierungskarten-SchlÃ¼sselwÃ¶rter\r\n        if (card.tag === 'Leadership') {\r\n          keywords.add('Leadership');\r\n        }\r\n        if (card.tag === 'Diplomat') {\r\n          keywords.add('Diplomat');\r\n        }\r\n\r\n        // Ã–ffentlichkeits-Unterkategorien (fÃ¼r Karten in Ã–ffentlichkeitsreihe)\r\n        if (board.innen.includes(card)) {\r\n          const publicCard = card as any;\r\n          if (publicCard.tag) {\r\n            // Oligarch\r\n            const oligarchNames = ['Elon Musk', 'Bill Gates', 'George Soros', 'Warren Buffett', 'Mukesh Ambani', 'Jeff Bezos', 'Alisher Usmanov', 'Gautam Adani', 'Jack Ma', 'Zhang Yiming', 'Roman Abramovich'];\r\n            if (oligarchNames.includes(publicCard.name)) {\r\n              subcategories.add('Oligarch');\r\n            }\r\n\r\n            // Plattform\r\n            const platformNames = ['Mark Zuckerberg', 'Tim Cook', 'Sam Altman', 'Jack Ma'];\r\n            if (platformNames.includes(publicCard.name)) {\r\n              subcategories.add('Plattform');\r\n            }\r\n\r\n            // Bewegung\r\n            const movementNames = ['Greta Thunberg', 'Malala Yousafzai', 'Ai Weiwei', 'Alexei Navalny'];\r\n            if (movementNames.includes(publicCard.name)) {\r\n              subcategories.add('Bewegung');\r\n            }\r\n\r\n            // NGO/Think-Tank\r\n            const ngoNames = ['Bill Gates', 'George Soros', 'Jennifer Doudna', 'Noam Chomsky', 'Anthony Fauci'];\r\n            if (ngoNames.includes(publicCard.name)) {\r\n              subcategories.add('NGO/Think-Tank');\r\n            }\r\n\r\n            // Intelligenz\r\n            const intelligenceNames = ['Jennifer Doudna', 'Noam Chomsky', 'Edward Snowden', 'Julian Assange', 'Yuval Noah Harari', 'Ai Weiwei', 'Alexei Navalny', 'Anthony Fauci'];\r\n            if (intelligenceNames.includes(publicCard.name)) {\r\n              subcategories.add('Intelligenz');\r\n            }\r\n\r\n            // Medien\r\n            const mediaNames = ['Oprah Winfrey'];\r\n            if (mediaNames.includes(publicCard.name)) {\r\n              subcategories.add('Medien');\r\n            }\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    return {\r\n      keywords: Array.from(keywords),\r\n      subcategories: Array.from(subcategories)\r\n    };\r\n  }, [gameState]);\r\n\r\n  // Info-Panels zeichnen\r\n  const drawInfoPanels = useCallback((ctx: CanvasRenderingContext2D) => {\r\n    const { keywords, subcategories } = getActiveKeywordsAndSubcategories(1);\r\n\r\n    // Panel fÃ¼r RegierungsschlÃ¼sselwÃ¶rter (rechts neben Regierungsslots)\r\n    const govPanelX = 1640 + 256 + 20; // Nach dem letzten permanenten Slot\r\n    const govPanelY = 300; // Auf HÃ¶he der Regierungsslots\r\n    const govPanelW = 120;\r\n    const govPanelH = 256;\r\n\r\n    // Regierungspanel Hintergrund\r\n    ctx.fillStyle = 'rgba(255, 197, 0, 0.15)';\r\n    ctx.fillRect(govPanelX, govPanelY, govPanelW, govPanelH);\r\n    ctx.strokeStyle = 'rgba(255, 197, 0, 0.3)';\r\n    ctx.strokeRect(govPanelX + 0.5, govPanelY + 0.5, govPanelW - 1, govPanelH - 1);\r\n\r\n    // Regierungspanel Titel\r\n    ctx.fillStyle = 'rgba(255, 197, 0, 0.9)';\r\n    ctx.font = 'bold 12px sans-serif';\r\n    ctx.textAlign = 'center';\r\n    ctx.fillText('Regierung', govPanelX + govPanelW/2, govPanelY + 16);\r\n\r\n    // SchlÃ¼sselwÃ¶rter auflisten\r\n    ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\r\n    ctx.font = '11px sans-serif';\r\n    ctx.textAlign = 'left';\r\n    if (keywords.length > 0) {\r\n      keywords.forEach((keyword, idx) => {\r\n        ctx.fillText(`â€¢ ${keyword}`, govPanelX + 8, govPanelY + 36 + idx * 16);\r\n      });\r\n    } else {\r\n      ctx.fillStyle = 'rgba(255, 255, 255, 0.5)';\r\n      ctx.fillText('Keine aktiven', govPanelX + 8, govPanelY + 36);\r\n      ctx.fillText('SchlÃ¼sselwÃ¶rter', govPanelX + 8, govPanelY + 52);\r\n    }\r\n\r\n    // Panel fÃ¼r Ã–ffentlichkeits-Unterkategorien (rechts neben Ã–ffentlichkeitsslots)\r\n    const pubPanelX = 1640 + 256 + 20;\r\n    const pubPanelY = 580; // Auf HÃ¶he der Ã–ffentlichkeitsslots\r\n    const pubPanelW = 120;\r\n    const pubPanelH = 256;\r\n\r\n    // Ã–ffentlichkeitspanel Hintergrund\r\n    ctx.fillStyle = 'rgba(0, 255, 0, 0.15)';\r\n    ctx.fillRect(pubPanelX, pubPanelY, pubPanelW, pubPanelH);\r\n    ctx.strokeStyle = 'rgba(0, 255, 0, 0.3)';\r\n    ctx.strokeRect(pubPanelX + 0.5, pubPanelY + 0.5, pubPanelW - 1, pubPanelH - 1);\r\n\r\n    // Ã–ffentlichkeitspanel Titel\r\n    ctx.fillStyle = 'rgba(0, 255, 0, 0.9)';\r\n    ctx.font = 'bold 12px sans-serif';\r\n    ctx.textAlign = 'center';\r\n    ctx.fillText('Ã–ffentlichkeit', pubPanelX + pubPanelW/2, pubPanelY + 16);\r\n\r\n    // Unterkategorien auflisten\r\n    ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\r\n    ctx.font = '11px sans-serif';\r\n    ctx.textAlign = 'left';\r\n    if (subcategories.length > 0) {\r\n      subcategories.forEach((subcategory, idx) => {\r\n        const displayName = subcategory.length > 12 ? subcategory.substring(0, 10) + '...' : subcategory;\r\n        ctx.fillText(`â€¢ ${displayName}`, pubPanelX + 8, pubPanelY + 36 + idx * 16);\r\n      });\r\n    } else {\r\n      ctx.fillStyle = 'rgba(255, 255, 255, 0.5)';\r\n      ctx.fillText('Keine aktiven', pubPanelX + 8, pubPanelY + 36);\r\n      ctx.fillText('Unterkategorien', pubPanelX + 8, pubPanelY + 52);\r\n    }\r\n  }, [getActiveKeywordsAndSubcategories]);\r\n\r\n  // Move diagnostics to draw callback to ensure they run after canvas is actually rendered\r\n  const runDiagnostics = useCallback(() => {\r\n    try {\r\n      const handZones = clickZonesRef.current.filter(z => z.data && z.data.type === 'hand_p1');\r\n      const uiUIDs = handZones.map(z => (z.data.card && (z.data.card.uid ?? z.data.card.id)) ).filter(Boolean);\r\n      const stateHand = gameState.hands && gameState.hands[1] ? gameState.hands[1] : [];\r\n      const stateUIDs = stateHand.map((c: any) => c.uid ?? c.id).filter(Boolean);\r\n\r\n      const missingInState = uiUIDs.filter((u: any) => !stateUIDs.includes(u));\r\n      const missingInUI = stateUIDs.filter((u: any) => !uiUIDs.includes(u));\r\n\r\n      // Only warn if there are cards in UI that don't exist in state (real error)\r\n      // Don't warn about missing UI cards due to limited slot capacity\r\n      if (missingInState.length > 0) {\r\n        const mismatch = {\r\n          ts: Date.now(),\r\n          uiCount: uiUIDs.length,\r\n          stateCount: stateUIDs.length,\r\n          uiUIDs,\r\n          stateUIDs,\r\n          missingInState,\r\n          missingInUI,\r\n          stack: (new Error('mismatch-stack')).stack\r\n        };\r\n        (window as any).__politicardDebug = {\r\n          ...(window as any).__politicardDebug,\r\n          mismatch: [ ...(window as any).__politicardDebug?.mismatch || [] ].slice(-19).concat([mismatch])\r\n        };\r\n        // Clear, then log to console so user can copy/paste trace\r\n        console.warn('POLITICARD DIAGNOSTIC: hand mismatch detected', mismatch);\r\n      }\r\n    } catch (e) {\r\n      // swallow diagnostic errors to avoid breaking rendering\r\n      console.error('Diagnostic error', e);\r\n    }\r\n  }, [gameState.hands]);\r\n\r\n  const draw = useCallback(() => {\r\n    const canvas = canvasRef.current;\r\n    if (!canvas) return;\r\n\r\n    const ctx = canvas.getContext('2d');\r\n    if (!ctx) return;\r\n\r\n    // Clear canvas\r\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n    // Clear click zones\r\n    clickZonesRef.current = [];\r\n\r\n    // Background: prefer PNG if configured\r\n    if (LAYOUT.background?.enabled && LAYOUT.background?.src) {\r\n      if (backgroundImageRef.current) {\r\n        ctx.drawImage(backgroundImageRef.current, 0, 0, canvas.width, canvas.height);\r\n      } else {\r\n        ctx.fillStyle = '#0c131b';\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n      }\r\n    } else {\r\n      ctx.fillStyle = '#0c131b';\r\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n    }\r\n\r\n    // Apply UI transform (new signature)\r\n    const { scale, offsetX, offsetY } = getUiTransform(canvas.width, canvas.height);\r\n    ctx.save();\r\n    ctx.translate(offsetX, offsetY);\r\n    ctx.scale(scale, scale);\r\n\r\n    // Draw opponent board (top rows) - clickable im Dev Mode\r\n    // Draw opponent board using new layout system\r\n    const opponentPublicRects = getPublicRects('opponent');\r\n    const opponentGovRects = getGovernmentRects('opponent');\r\n\r\n    // Draw opponent public slots\r\n    opponentPublicRects.forEach((s: { x: number; y: number; w: number; h: number }, idx: number) => {\r\n      const card = gameState.board[2].innen[idx];\r\n      if (card) {\r\n        drawCardAt(ctx, card, s.x, s.y, s.w, false, false, 2);\r\n      }\r\n    });\r\n\r\n    // Draw opponent government slots\r\n    opponentGovRects.forEach((s: { x: number; y: number; w: number; h: number }, idx: number) => {\r\n      const card = gameState.board[2].aussen[idx];\r\n      if (card) {\r\n        drawCardAt(ctx, card, s.x, s.y, s.w, false, false, 2);\r\n      }\r\n    });\r\n\r\n    // Draw opponent permanent slots\r\n    drawPermanentSlotsP2(ctx);\r\n\r\n    // Draw player board (middle rows)\r\n    // Draw player board using new layout system\r\n    const playerPublicRects = getPublicRects('player');\r\n    const playerGovRects = getGovernmentRects('player');\r\n\r\n    // Draw player public slots\r\n    playerPublicRects.forEach((s: { x: number; y: number; w: number; h: number }, idx: number) => {\r\n      const card = gameState.board[1].innen[idx];\r\n      if (card) {\r\n        const clickZone = drawCardAt(ctx, card, s.x, s.y, s.w, false, false, 1);\r\n        clickZonesRef.current.push({\r\n          ...clickZone,\r\n          data: { type: 'row_slot', player: 1, lane: 'innen', index: idx }\r\n        });\r\n      } else {\r\n        // Empty slot click zone\r\n        clickZonesRef.current.push({\r\n          x: s.x, y: s.y, w: s.w, h: s.h,\r\n          data: { type: 'row_slot', player: 1, lane: 'innen', index: idx }\r\n        });\r\n      }\r\n    });\r\n\r\n    // Draw player government slots\r\n    playerGovRects.forEach((s: { x: number; y: number; w: number; h: number }, idx: number) => {\r\n      const card = gameState.board[1].aussen[idx];\r\n      if (card) {\r\n        const clickZone = drawCardAt(ctx, card, s.x, s.y, s.w, false, false, 1);\r\n        clickZonesRef.current.push({\r\n          ...clickZone,\r\n          data: { type: 'row_slot', player: 1, lane: 'aussen', index: idx }\r\n        });\r\n      } else {\r\n        // Empty slot click zone\r\n        clickZonesRef.current.push({\r\n          x: s.x, y: s.y, w: s.w, h: s.h,\r\n          data: { type: 'row_slot', player: 1, lane: 'aussen', index: idx }\r\n        });\r\n      }\r\n    });\r\n\r\n    // Draw player permanent slots\r\n    drawPermanentSlotsP1(ctx);\r\n\r\n    // Draw instant slots (both players)\r\n    drawInstantSlots(ctx);\r\n\r\n    // Draw interventions strip (player)\r\n    drawInterventionsP1(ctx);\r\n\r\n    // Draw interventions strip (opponent) - nur im Dev Mode\r\n    if (devMode) {\r\n      drawInterventionsP2(ctx);\r\n    }\r\n\r\n    // Draw hand (P1)\r\n    drawHandP1(ctx);\r\n\r\n    // ðŸ”§ DEV MODE: Draw hand (P2) - nur im Dev Mode\r\n    if (devMode) {\r\n      drawHandP2(ctx);\r\n    }\r\n\r\n    // Draw info panels\r\n    drawInfoPanels(ctx);\r\n\r\n    ctx.restore();\r\n\r\n    // expose zones for debug snapshot\r\n    (window as any).__politicardDebug = {\r\n      uiTransform: getUiTransform(canvas.width, canvas.height),\r\n      canvasSize: { width: canvas.width, height: canvas.height },\r\n      zones: LAYOUT.zones,\r\n      clickZones: clickZonesRef.current.slice(0, 1000)\r\n    };\r\n\r\n    // Run diagnostics after canvas is fully rendered\r\n    runDiagnostics();\r\n  }, [drawLane, drawHandP1, drawHandP2, drawInterventionsP1, drawInterventionsP2, drawPermanentSlotsP1, drawPermanentSlotsP2, drawInstantSlots, drawInfoPanels, devMode, runDiagnostics]);\r\n\r\n  const DRAW_LAYOUT_OVERLAY = false; // force off per new layout system\r\n\r\n  // Load background image if configured\r\n  useEffect(() => {\r\n    if (LAYOUT.background?.enabled && LAYOUT.background?.src) {\r\n      const img = new Image();\r\n      img.onload = () => { backgroundImageRef.current = img; requestAnimationFrame(draw); };\r\n      img.onerror = () => { console.warn('Failed to load background image', LAYOUT.background?.src); };\r\n      img.src = LAYOUT.background.src as string;\r\n    } else {\r\n      // Fallback: ensure first draw without background\r\n      requestAnimationFrame(draw);\r\n    }\r\n  }, [draw]);\r\n\r\n  // Redraw when game state or selection changes\r\n  useEffect(() => {\r\n    requestAnimationFrame(draw);\r\n  }, [gameState, selectedHandIndex, draw]);\r\n\r\n  // Continuous render loop to keep canvas updated without relying on external state refs\r\n  useEffect(() => {\r\n    let frame: number;\r\n    const loop = () => {\r\n      draw();\r\n      frame = requestAnimationFrame(loop);\r\n    };\r\n    frame = requestAnimationFrame(loop);\r\n    return () => cancelAnimationFrame(frame);\r\n  }, [draw]);\r\n\r\n  const handleCardClick = useCallback((data: any) => {\r\n    // Hand-Klick\r\n    if (data.type === 'hand_p1') {\r\n      const uid = data.card?.uid ?? data.card?.id;\r\n      const stateHand = gameState.hands?.[1] || [];\r\n      const idxInState = stateHand.findIndex((c: any) => (c.uid ?? c.id) === uid);\r\n      onCardClick(data);\r\n      return;\r\n    }\r\n\r\n    // Slot-Klick\r\n    if (data.type === 'row_slot') {\r\n      const lane: 'public' | 'government' = data.lane;\r\n      const cap = getLaneCapacity(lane);\r\n\r\n      // Hole aktuelle Row-LÃ¤nge aus gameState\r\n      const rowCards = lane === 'public'\r\n        ? gameState.board?.[1]?.innen ?? []\r\n        : gameState.board?.[1]?.aussen ?? [];\r\n\r\n      if (rowCards.length >= cap) {\r\n        // Optional: UI Feedback\r\n        console.warn(`Row ${lane} is full (${rowCards.length}/${cap})`);\r\n        return;\r\n      }\r\n\r\n      onCardClick(data);\r\n      return;\r\n    }\r\n\r\n    // Andere Klicks (empty_slot, board_card, etc.)\r\n    onCardClick(data);\r\n  }, [gameState, onCardClick]);\r\n\r\n  const handleClick = useCallback((e: React.MouseEvent<HTMLCanvasElement>) => {\r\n    const canvas = canvasRef.current;\r\n    if (!canvas) return;\r\n\r\n    const rect = canvas.getBoundingClientRect();\r\n    const { scale, offsetX, offsetY } = getUiTransform(canvas.width, canvas.height);\r\n    const mx = (e.clientX - rect.left - offsetX) / scale;\r\n    const my = (e.clientY - rect.top - offsetY) / scale;\r\n\r\n    const hit = clickZonesRef.current.find(z => mx >= z.x && mx <= z.x + z.w && my >= z.y && my <= z.y + z.h);\r\n    if (hit) handleCardClick(hit.data);\r\n  }, [handleCardClick]);\r\n\r\n  const handleMouseMove = useCallback((e: React.MouseEvent<HTMLCanvasElement>) => {\r\n    const canvas = canvasRef.current;\r\n    if (!canvas) return;\r\n\r\n    const rect = canvas.getBoundingClientRect();\r\n    const { scale, offsetX, offsetY } = getUiTransform(canvas.width, canvas.height);\r\n    const mx = (e.clientX - rect.left - offsetX) / scale;\r\n    const my = (e.clientY - rect.top - offsetY) / scale;\r\n\r\n    const hit = clickZonesRef.current.find(z => mx >= z.x && mx <= z.x + z.w && my >= z.y && my <= z.y + z.h);\r\n    if (hit) {\r\n      console.log('[hover]', hit.data.type, hit.data.card?.name);\r\n      onCardHover({ ...hit.data, x: e.clientX, y: e.clientY });\r\n    } else {\r\n      onCardHover(null);\r\n    }\r\n  }, [onCardHover]);\r\n\r\n  return (\r\n    <canvas\r\n      ref={canvasRef}\r\n      width={1920}\r\n      height={1080}\r\n      style={{\r\n        display: 'block',\r\n        width: '100%',\r\n        height: '100%',\r\n        imageRendering: 'auto',\r\n      }}\r\n      onClick={handleClick}\r\n      onMouseMove={handleMouseMove}\r\n    />\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}