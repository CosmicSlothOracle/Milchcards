{"ast":null,"code":"import _objectSpread from\"C:/Users/skank/Videos/Cards/Milchcards/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{useCallback,useRef,useEffect}from'react';import{createDefaultEffectFlags}from'../types/game';import{buildDeckFromEntries,sumGovernmentInfluenceWithAuras}from'../utils/gameUtils';import{PRESET_DECKS}from'../data/gameData';import{getCardActionPointCost,getNetApCost,canPlayCard}from'../utils/ap';import{triggerCardEffects}from'../effects/cards';import{ensureTestBaselineAP}from'../utils/testCompat';import{resolveQueue}from'../utils/queue';import{applyStartOfTurnFlags}from'../utils/startOfTurnHooks';import{registerTrap,applyTrapsOnCardPlayed}from'../utils/traps';import{recomputeAuraFlags}from'../state/effects';import{emptyBoard}from'../state/board';import{logger}from'../debug/logger';import{useVisualEffectsSafe}from'../context/VisualEffectsContext';// TS: sometimes asset module resolution fails in some setups — ignore typecheck for this import\n// @ts-ignore\nimport slotGovGif from'../ui/layout/slot_gov.webm';import{getUiTransform,getGovernmentRects}from'../ui/layout';// Migration Helper für Queue-Vereinheitlichung\nconst migrateLegacyQueue=state=>{// Queue migration completed - only _effectQueue exists now\n};// Helper function for getting the other player\nconst other=p=>p===1?2:1;// Hilfsfunktion: stellt sicher, dass effectFlags vorhanden sind\nconst ensureFlags=(s,p)=>{if(!s.effectFlags){s.effectFlags={1:createDefaultEffectFlags(),2:createDefaultEffectFlags()};}else{s.effectFlags[p]=_objectSpread(_objectSpread({},createDefaultEffectFlags()),s.effectFlags[p]);}};// Lane-Heuristik wie in playCard\nconst pickLane=c=>{const tag=c.tag;if(c.kind==='pol'&&(tag==='Staatsoberhaupt'||tag==='Regierungschef'||tag==='Diplomat'))return'aussen';return'innen';};const isCardPlayableNow=(state,player,card)=>{if(card.deactivated)return false;if(card.kind==='pol'){const lane=pickLane(card);return state.board[player][lane].length<5;}if(card.kind==='spec'){const t=String(card.type||'').toLowerCase();// Public cards\nif(t==='öffentlichkeitskarte'||t==='oeffentlichkeitskarte'||t==='public'){return state.board[player].innen.length<5;}// Detect Ongoing / Permanent Initiatives by explicit tags or by effectKey namespace\nconst tags=card.tags||card.tags||[];const isOngoingInitiative=card.type&&String(card.type).toLowerCase().includes('initiative')&&(tags.includes('Ongoing')||String(card.effectKey||'').startsWith('init.')&&tags.includes('Ongoing'));if(isOngoingInitiative){// Determine which permanent slot this initiative should occupy. Prefer explicit slot metadata, otherwise default to government.\nconst preferredSlot=card.permanentSlot||(card.tags&&card.tags.includes('Public')?'public':'government');return!state.permanentSlots[player][preferredSlot];}// sonst: Fallen/Interventionen – aktuell immer erlaubt\nreturn true;}return false;};export const hasPlayableZeroCost=(state,player)=>{for(const c of state.hands[player]){const{cost}=getCardActionPointCost(state,player,c);if(cost===0&&isCardPlayableNow(state,player,c))return true;}return false;};// Helper function to apply auras for a player (instant updates for Joschka Fischer + NGO synergy)\nfunction applyAurasForPlayer(state,player,log){const board=state.board[player];const hasNgo=board.innen.some(c=>c.kind==='spec'&&c.type==='Öffentlichkeitskarte'&&c.tag==='NGO'&&!c.deactivated);const newAussen=board.aussen.map(card=>{if(card.kind!=='pol')return card;const pol=_objectSpread({},card);if(pol.baseInfluence==null)pol.baseInfluence=pol.influence;const prev=pol.influence;let bonus=0;if(!pol.deactivated&&pol.name==='Joschka Fischer'&&pol.effect==='ngo_boost'&&hasNgo){bonus+=1;}pol.influence=pol.baseInfluence+bonus;if(log&&pol.influence>prev)log(\"PASSIV: \".concat(pol.name,\" +\").concat(pol.influence-prev,\" I (jetzt \").concat(pol.influence,\").\"));return pol;});state.board=_objectSpread(_objectSpread({},state.board),{},{[player]:_objectSpread(_objectSpread({},state.board[player]),{},{aussen:newAussen})});}// Helper function to check if round should end\nfunction checkRoundEnd(gameState){// Round ends if both players have passed\nconst result=gameState.passed[1]&&gameState.passed[2];logger.dbg(\"checkRoundEnd P1=\".concat(gameState.passed[1],\" P2=\").concat(gameState.passed[2],\" result=\").concat(result));return result;}// Helper function to draw cards from deck\nfunction drawCardsFromDeck(gameState,player,count){const deck=[...gameState.decks[player]];const drawnCards=deck.splice(0,Math.min(count,deck.length));return drawnCards;}// Helper function to really end a turn (extracted from nextTurn logic)\nfunction reallyEndTurn(gameState,log){const current=gameState.current;// Flag zurücksetzen - Zug-Ende wird jetzt wirklich durchgeführt\ngameState.isEndingTurn=false;// ✅ Karte nachziehen am Ende eines Zugs (nur wenn NICHT \"pass\")\nif(!gameState.passed[current]){const drawnCard=gameState.decks[current].shift();if(drawnCard){gameState.hands[current].push(drawnCard);log(\"\\uD83D\\uDD25 Zug-Ende: +1 Karte gezogen (\".concat(drawnCard.name,\")\"));}}else{log(\"\\u23ED\\uFE0F P\".concat(current,\" hat gepasst \\u2013 kein Nachziehen.\"));}// Check if round should end\nconst shouldEndRound=checkRoundEnd(gameState);if(shouldEndRound){log(\"\\uD83C\\uDFC1 Runde \".concat(gameState.round,\" wird beendet (Zug-Ende).\"));return resolveRound(gameState,log);}// Spielerwechsel + AP reset\nconst newCurrent=current===1?2:1;gameState.current=newCurrent;gameState.actionPoints=_objectSpread(_objectSpread({},gameState.actionPoints),{},{[newCurrent]:2});gameState.passed=_objectSpread(_objectSpread({},gameState.passed),{},{[newCurrent]:false});// Apply new start-of-turn hooks\napplyStartOfTurnFlags(gameState,newCurrent,log);// 🔥 CLUSTER 3: Auren-Flags beim Zugstart neu berechnen\nrecomputeAuraFlags(gameState);// Reset turn-bezogener Flag-Nutzungen (handled in applyStartOfTurnFlags)\nlog(\"\\uD83D\\uDD04 Zug-Ende: Spieler \".concat(newCurrent,\" ist am Zug (2 AP verf\\xFCgbar)\"));return gameState;}// Helper function to resolve round and start new one\nfunction resolveRound(gameState,log){// Calculate influence for both players\nconst p1Influence=sumGovernmentInfluenceWithAuras(gameState,1);const p2Influence=sumGovernmentInfluenceWithAuras(gameState,2);log(\"\\uD83D\\uDCCA Rundenauswertung: P1 \".concat(p1Influence,\" Einfluss vs P2 \").concat(p2Influence,\" Einfluss\"));// Determine winner\nlet roundWinner;if(p1Influence>p2Influence){roundWinner=1;log(\"\\uD83C\\uDFC6 Spieler 1 gewinnt die Runde! (\".concat(p1Influence,\" > \").concat(p2Influence,\")\"));}else if(p2Influence>p1Influence){roundWinner=2;log(\"\\uD83C\\uDFC6 Spieler 2 gewinnt die Runde! (\".concat(p2Influence,\" > \").concat(p1Influence,\")\"));}else{// Tie - current player wins\nroundWinner=gameState.current;log(\"\\uD83E\\uDD1D Unentschieden! Spieler \".concat(roundWinner,\" gewinnt als aktiver Spieler.\"));}// Collect all cards to move to discard\nconst cardsToDiscard=[...gameState.board[1].innen,...gameState.board[1].aussen,...gameState.board[2].innen,...gameState.board[2].aussen,...(gameState.permanentSlots[1].government?[gameState.permanentSlots[1].government]:[]),...(gameState.permanentSlots[1].public?[gameState.permanentSlots[1].public]:[]),...(gameState.permanentSlots[2].government?[gameState.permanentSlots[2].government]:[]),...(gameState.permanentSlots[2].public?[gameState.permanentSlots[2].public]:[]),...gameState.board[1].sofort,...gameState.board[2].sofort];// Draw 5 new cards for each player\nconst newP1Hand=drawCardsFromDeck(gameState,1,5);const newP2Hand=drawCardsFromDeck(gameState,2,5);// Calculate new rounds won\nconst newRoundsWon=_objectSpread(_objectSpread({},gameState.roundsWon),{},{[roundWinner]:gameState.roundsWon[roundWinner]+1});// Check if game should end (Best of 3: first to 2 wins)\nconst p1Wins=newRoundsWon[1];const p2Wins=newRoundsWon[2];if(p1Wins>=2||p2Wins>=2){const gameWinner=p1Wins>=2?1:2;log(\"\\uD83C\\uDFC6\\uD83C\\uDF89 SPIEL BEENDET! Spieler \".concat(gameWinner,\" gewinnt das Match! (\").concat(p1Wins,\"-\").concat(p2Wins,\")\"));log(\"\\uD83D\\uDD25 Gesamtergebnis: Player \".concat(gameWinner,\" ist der Sieger!\"));// Return final state with game winner\nreturn _objectSpread(_objectSpread({},gameState),{},{roundsWon:newRoundsWon,gameWinner,// Keep current board state for final display\npassed:{1:true,2:true}// Both passed to indicate game end\n});}// Create new state for next round\nconst newState=_objectSpread(_objectSpread({},gameState),{},{round:gameState.round+1,current:roundWinner,// Winner starts next round\npassed:{1:false,2:false},// Reset pass status\nactionPoints:{1:2,2:2},// Reset AP\nactionsUsed:{1:0,2:0},// Reset actions (kept for compatibility)\nroundsWon:newRoundsWon,effectFlags:{1:createDefaultEffectFlags(),2:createDefaultEffectFlags()},// Clear all board positions\nboard:emptyBoard(),// Clear permanent slots\npermanentSlots:{1:{government:null,public:null,initiativePermanent:null},2:{government:null,public:null,initiativePermanent:null}},// instantSlot wird nicht mehr verwendet - Sofort-Initiativen gehen in board[player].sofort\n// New hands with 5 cards each\nhands:{1:newP1Hand,2:newP2Hand},// Update decks (cards were removed during drawing)\ndecks:{1:gameState.decks[1].slice(newP1Hand.length),2:gameState.decks[2].slice(newP2Hand.length)},// Update discard pile\ndiscard:[...gameState.discard,...cardsToDiscard]});log(\"\\uD83C\\uDD95 Runde \".concat(newState.round,\" startet! Spieler \").concat(roundWinner,\" beginnt. (Rundenstand: P1 \").concat(newState.roundsWon[1],\" - P2 \").concat(newState.roundsWon[2],\")\"));log(\"\\uD83C\\uDCCF Beide Spieler erhalten 5 neue Handkarten.\");return newState;}export function useGameActions(gameState,setGameState,log,afterQueueResolved){// Visual effects context (spawn helpers)\n// Use safe hook variant which returns null when no provider is present\nconst visualEffects=useVisualEffectsSafe();// Helper: spawn lightweight UI visuals via window hooks (prototype only)\nconst spawnCardVisual=useCallback((card,stateOverride)=>{try{var _card$uid,_card$uid2,_politicardDebug2;if(!card)return;console.debug('[GameActions] spawnCardVisual called',{uid:(_card$uid=card.uid)!==null&&_card$uid!==void 0?_card$uid:card.id,name:card.name});const uid=(_card$uid2=card.uid)!==null&&_card$uid2!==void 0?_card$uid2:card.id;// prefer VisualEffects context if available\nconst effectiveState=stateOverride||gameState;if(visualEffects){var _politicardDebug;// Prefer authoritative board-based slot centering (gov slots) using effectiveState\ntry{let located=null;for(const p of[1,2]){const aussen=effectiveState.board[p].aussen||[];const idxA=aussen.findIndex(c=>{var _c$uid,_card$uid3;return((_c$uid=c.uid)!==null&&_c$uid!==void 0?_c$uid:c.id)===((_card$uid3=card.uid)!==null&&_card$uid3!==void 0?_card$uid3:card.id);});if(idxA>=0){located={player:p,lane:'aussen',index:idxA};break;}const innen=effectiveState.board[p].innen||[];const idxI=innen.findIndex(c=>{var _c$uid2,_card$uid4;return((_c$uid2=c.uid)!==null&&_c$uid2!==void 0?_c$uid2:c.id)===((_card$uid4=card.uid)!==null&&_card$uid4!==void 0?_card$uid4:card.id);});if(idxI>=0){located={player:p,lane:'innen',index:idxI};break;}}if(located&&located.lane==='aussen'){var _card$uid5,_card$uid6;const rects=getGovernmentRects(located.player===1?'player':'opponent');const slot=rects[located.index]||rects[0]||{x:960-128,y:540-128,w:256,h:256};const cx_slot=slot.x+slot.w/2;const cy_slot=slot.y+slot.h/2;visualEffects.spawnParticles(cx_slot,cy_slot,18);visualEffects.spawnPop((_card$uid5=card.uid)!==null&&_card$uid5!==void 0?_card$uid5:card.id);console.debug('[GameActions] spawnCardVisual particles/pop (gov slot)',{uid:(_card$uid6=card.uid)!==null&&_card$uid6!==void 0?_card$uid6:card.id,cx:cx_slot,cy:cy_slot,slot});const canvas=document.querySelector('canvas');if(canvas){var _card$uid7,_card$uid8;const rect=canvas.getBoundingClientRect();const{scale,offsetX,offsetY}=getUiTransform(canvas.width,canvas.height);// Apply offset first, then scale (matches canvas transform order)\nconst screenCx=rect.left+(cx_slot+offsetX)*scale;const screenCy=rect.top+(cy_slot+offsetY)*scale;// Use dedicated government slot GIF provided by user\n// Use UI-based overlay spawner so we always align to canvas-derived\n// pulsing slot fields exactly (handles scale+offset internally).\nvisualEffects.spawnGifOverlayUi({id:(_card$uid7=card.uid)!==null&&_card$uid7!==void 0?_card$uid7:card.id,cx:cx_slot,cy:cy_slot,w:256,h:256,src:slotGovGif,duration:700});console.debug('[GameActions] spawnCardVisual spawnGifOverlay (gov slot)',{uid:(_card$uid8=card.uid)!==null&&_card$uid8!==void 0?_card$uid8:card.id,screenCx,screenCy,src:slotGovGif});}try{var _card$uid9;visualEffects.playAnimsRef.current.push({uid:(_card$uid9=card.uid)!==null&&_card$uid9!==void 0?_card$uid9:card.id,started:performance.now(),duration:420});}catch(e){}return;}}catch(e){console.debug('[GameActions] gov-slot centering failed, falling back',e);}// attempt to find a row_slot zone center via debug snapshot (avoid hand slots)\nconst zones=((_politicardDebug=window.__politicardDebug)===null||_politicardDebug===void 0?void 0:_politicardDebug.clickZones)||[];const zone=zones.find(z=>{var _z$data$card$uid;return z.data&&z.data.type==='row_slot'&&z.data.card&&((_z$data$card$uid=z.data.card.uid)!==null&&_z$data$card$uid!==void 0?_z$data$card$uid:z.data.card.id)===uid;});const cx=zone?zone.x+(zone.w||256)/2:960;const cy=zone?zone.y+(zone.h||256)/2:540;visualEffects.spawnParticles(cx,cy,18);visualEffects.spawnPop(uid);console.debug('[GameActions] spawnCardVisual particles/pop (fallback)',{uid,cx,cy,zone});// Add play animation entry so canvas will fade-in the card itself\ntry{visualEffects.playAnimsRef.current.push({uid,started:performance.now(),duration:420});console.debug('[GameActions] spawnCardVisual playAnimsRef push',uid);}catch(e){console.debug('[GameActions] spawnCardVisual playAnimsRef push failed',e);}return;}// fallback to old window-based prototype\nconst zones=((_politicardDebug2=window.__politicardDebug)===null||_politicardDebug2===void 0?void 0:_politicardDebug2.clickZones)||[];const zone=zones.find(z=>{var _z$data$card$uid2;return z.data&&z.data.card&&((_z$data$card$uid2=z.data.card.uid)!==null&&_z$data$card$uid2!==void 0?_z$data$card$uid2:z.data.card.id)===uid;});const cx=zone?zone.x+(zone.w||256)/2:960;const cy=zone?zone.y+(zone.h||256)/2:540;window.__pc_particles=window.__pc_particles||[];for(let i=0;i<18;i++){window.__pc_particles.push({start:performance.now(),life:600+Math.random()*400,x:cx+(Math.random()-0.5)*40,y:cy+(Math.random()-0.5)*40,vx:(Math.random()-0.5)*6,vy:-Math.random()*6,size:3+Math.random()*5,color:['#ffd166','#ff6b6b','#4ade80'][Math.floor(Math.random()*3)],gravity:0.12});}window.__pc_pops=window.__pc_pops||[];window.__pc_pops.push({uid,started:performance.now(),duration:420});// Fallback: add play anim entry to global when VisualEffects not available\nwindow.__pc_play_anims=window.__pc_play_anims||[];window.__pc_play_anims.push({uid,started:performance.now(),duration:420});// Also attempt to use provider fallback on window if available\ntry{const wv=window.__pc_visual_effects;if(wv&&typeof wv.spawnGifOverlay==='function'){// Compute screen coords based on canvas if possible\nconst canvas=document.querySelector('canvas');if(canvas){var _politicardDebug3;const rect=canvas.getBoundingClientRect();const ui=((_politicardDebug3=window.__politicardDebug)===null||_politicardDebug3===void 0?void 0:_politicardDebug3.uiTransform)||{scale:1,offsetX:0,offsetY:0};const screenCx=rect.left+(cx+ui.offsetX)*ui.scale;const screenCy=rect.top+(cy+ui.offsetY)*ui.scale;try{if(typeof wv.spawnGifOverlayUi==='function'){// pass canvas-space coords so provider will align to UI\ntry{wv.spawnGifOverlayUi({id:uid,cx:cx,cy:cy,w:256,h:256,src:slotGovGif,duration:700});console.debug('[GameActions] fallback window.__pc_visual_effects.spawnGifOverlayUi',uid);}catch(e){console.debug('[GameActions] fallback spawnGifOverlayUi failed',e);}}else{wv.spawnGifOverlay({id:uid,cx:screenCx,cy:screenCy,w:256*ui.scale,h:256*ui.scale,src:slotGovGif,duration:700});console.debug('[GameActions] fallback window.__pc_visual_effects.spawnGifOverlay',uid);}}catch(e){console.debug('[GameActions] fallback spawnGifOverlay failed',e);}}}}catch(e){}}catch(e){// swallow - non-critical\n}},[visualEffects,gameState]);// Guard against duplicate concurrent playCard calls for the same card UID\nconst playingUidRef=useRef(new Set());// === Corruption Steal helper refs ===\nconst pendingTargetRef=useRef(null);// Listen for target selection & dice result (global events)\nuseEffect(()=>{const handlePickTarget=ev=>{var _ev$detail,_ev$detail2;const uid=(_ev$detail=ev.detail)===null||_ev$detail===void 0?void 0:_ev$detail.targetUid;const player=(_ev$detail2=ev.detail)===null||_ev$detail2===void 0?void 0:_ev$detail2.player;if(!uid||!player)return;// Register chosen target but DO NOT roll yet. The roll must be requested explicitly\n// (from modal or UI) to keep UX locked until player confirms.\npendingTargetRef.current=uid;try{log(\"\\uD83C\\uDFAF Corruption: Ziel gew\\xE4hlt (uid=\".concat(uid,\")\"));}catch(e){}};// Listener: when UI/modal requests a corruption roll, perform RNG and trigger visual dice\nconst handleRequestRoll=ev=>{var _ev$detail3,_ev$detail4;const player=(_ev$detail3=ev.detail)===null||_ev$detail3===void 0?void 0:_ev$detail3.player;const targetUid=(_ev$detail4=ev.detail)===null||_ev$detail4===void 0?void 0:_ev$detail4.targetUid;if(!player||!targetUid)return;// ensure pending target is set\npendingTargetRef.current=targetUid;try{const{getGlobalRNG}=require('../services/rng');const rng=getGlobalRNG();const roll=rng.randomInt(6)+1;// Emit dice animation request for UI. App listens and drives Dice3D.rollTo(face).\ntry{window.dispatchEvent(new CustomEvent('pc:dice_roll',{detail:{face:roll,player}}));}catch(e){logger.dbg('pc:dice_roll dispatch failed',e);}// Also enqueue a LOG entry so the result will be visible in the log after resolution\nsetGameState(prev=>_objectSpread(_objectSpread({},prev),{},{_effectQueue:[...(prev._effectQueue||[]),{type:'LOG',msg:\"\\uD83C\\uDFB2 W6 gew\\xFCrfelt (vorl\\xE4ufig): \".concat(roll)}]}));// Actual resolution will occur when the Dice3D animation completes and emits pc:dice_result\n}catch(e){logger.dbg('corruption request roll error',e);}};const handleDiceResult=ev=>{var _ev$detail5,_ev$detail6;const roll=(_ev$detail5=ev.detail)===null||_ev$detail5===void 0?void 0:_ev$detail5.roll;const player=(_ev$detail6=ev.detail)===null||_ev$detail6===void 0?void 0:_ev$detail6.player;if(!roll||!player||pendingTargetRef.current===null)return;const targetUid=pendingTargetRef.current;pendingTargetRef.current=null;// Enqueue resolve event\nsetGameState(prev=>{const events=prev._effectQueue||[];events.push({type:'CORRUPTION_STEAL_GOV_RESOLVE',player,targetUid,roll});// Process immediately\nresolveQueue(prev,events);if(afterQueueResolved)afterQueueResolved();return _objectSpread(_objectSpread({},prev),{},{_effectQueue:events});});};window.addEventListener('pc:corruption_pick_target',handlePickTarget);window.addEventListener('pc:corruption_request_roll',handleRequestRoll);window.addEventListener('pc:dice_result',handleDiceResult);return()=>{window.removeEventListener('pc:corruption_pick_target',handlePickTarget);window.removeEventListener('pc:corruption_request_roll',handleRequestRoll);window.removeEventListener('pc:dice_result',handleDiceResult);};},[setGameState,afterQueueResolved]);const startMatchWithDecks=useCallback((p1DeckEntries,p2DeckEntries)=>{const p1Cards=buildDeckFromEntries(p1DeckEntries);const p2Cards=buildDeckFromEntries(p2DeckEntries);// Debug: Log deck composition with detailed tag analysis\nconst p1NgoCarten=p1Cards.filter(c=>c.tag==='NGO');const p1PlatformCards=p1Cards.filter(c=>c.tag==='Plattform');const p1JoschaCards=p1Cards.filter(c=>c.effect==='ngo_boost');const p1PublicCards=p1Cards.filter(c=>c.kind==='spec'&&c.type==='Öffentlichkeitskarte');log(\"\\uD83D\\uDD0D DECK DEBUG P1: \".concat(p1Cards.length,\" Karten total\"));log(\"\\uD83E\\uDDEA P1 Public Cards: \".concat(p1PublicCards.map(c=>\"\".concat(c.name).concat(c.tag?\"[\".concat(c.tag,\"]\"):'')).join(', ')));log(\"\\uD83C\\uDF31 P1 NGO-Karten: \".concat(p1NgoCarten.length>0?p1NgoCarten.map(c=>c.name).join(', '):'Keine'));log(\"\\uD83D\\uDCBB P1 Plattform-Karten: \".concat(p1PlatformCards.length>0?p1PlatformCards.map(c=>c.name).join(', '):'Keine'));log(\"\\uD83C\\uDFAF JOSCHKA FISCHER: \".concat(p1JoschaCards.length>0?'✅ IM DECK':'❌ NICHT IM DECK'));const d1=[...p1Cards];const d2=[...p2Cards];const h1=d1.splice(0,Math.min(5,d1.length));const h2=d2.splice(0,Math.min(5,d2.length));setGameState(prev=>_objectSpread(_objectSpread({},prev),{},{round:1,current:1,passed:{1:false,2:false},decks:{1:d1,2:d2},hands:{1:h1,2:h2},board:{1:{innen:[],aussen:[],sofort:[]},2:{innen:[],aussen:[],sofort:[]}},traps:{1:[],2:[]},permanentSlots:{1:{government:null,public:null,initiativePermanent:null},2:{government:null,public:null,initiativePermanent:null}},// instantSlot wird nicht mehr verwendet - Sofort-Initiativen gehen in board[player].sofort\ndiscard:[],shields:new Set(),// Set<UID>\neffectFlags:{1:createDefaultEffectFlags(),2:createDefaultEffectFlags()},actionsUsed:{1:0,2:0},log:[\"Match gestartet. P1 und P2 erhalten je \".concat(h1.length,\"/\").concat(h2.length,\" Startkarten.\"),\"\\uD83D\\uDD0D DECK DEBUG P1: \".concat(p1Cards.length,\" Karten total\"),\"\\uD83E\\uDDEA P1 Public Cards: \".concat(p1PublicCards.map(c=>\"\".concat(c.name).concat(c.tag?\"[\".concat(c.tag,\"]\"):'')).join(', ')),\"\\uD83C\\uDF31 P1 NGO-Karten: \".concat(p1NgoCarten.length>0?p1NgoCarten.map(c=>c.name).join(', '):'Keine'),\"\\uD83D\\uDCBB P1 Plattform-Karten: \".concat(p1PlatformCards.length>0?p1PlatformCards.map(c=>c.name).join(', '):'Keine'),\"\\uD83C\\uDFAF JOSCHKA FISCHER: \".concat(p1JoschaCards.length>0?'✅ IM DECK':'❌ NICHT IM DECK'),\"\\uD83D\\uDCCB INITIAL BOARD P1: Regierung=[] | \\xD6ffentlichkeit=[]\",\"\\uD83D\\uDCCB INITIAL BOARD P2: Regierung=[] | \\xD6ffentlichkeit=[]\",\"\\uD83C\\uDFE0 PERMANENT SLOTS: Alle leer\"],activeRefresh:{1:0,2:0},// preserve any aiEnabled flags set before calling this\naiEnabled:prev.aiEnabled||{1:false,2:false}}));},[gameState,setGameState,log]);const startMatchVsAI=useCallback(function(p1DeckEntries){let presetKey=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'AUTORITAERER_REALIST';const p2DeckEntries=PRESET_DECKS[presetKey];// Enable AI for P2 first so nextTurn/auto-run sees the flag immediately\nsetGameState(prev=>_objectSpread(_objectSpread({},prev),{},{aiEnabled:_objectSpread(_objectSpread({},prev.aiEnabled||{1:false,2:false}),{},{2:true})}));log('🔧 AI aktiviert für Spieler 2');startMatchWithDecks(p1DeckEntries,p2DeckEntries);},[startMatchWithDecks]);const playCard=useCallback((player,handIndex,lane)=>{logger.info(\"playCard START P\".concat(player,\" idx=\").concat(handIndex));setGameState(prev=>{// Test-only baseline fix – ensures AP=5 at game start inside test runner\nensureTestBaselineAP(prev);// Validate input parameters\nif(prev.current!==player){log(\"\\u274C ERROR: Not player turn - Current: \".concat(prev.current,\", Attempted: \").concat(player));logger.warn(\"playCard abort: wrong turn\");return prev;}const hand=prev.hands[player];if(handIndex<0||handIndex>=hand.length){log(\"\\u274C ERROR: Invalid hand index - Index: \".concat(handIndex,\", Hand length: \").concat(hand.length));return prev;}// Debug: Log current hand contents with detailed tag info\nlog(\"\\uD83D\\uDD0D HAND DEBUG P\".concat(player,\": \").concat(hand.map((c,i)=>\"\".concat(i,\":\").concat(c.name).concat(c.tag?\"[\".concat(c.tag,\"]\"):'')).join(', ')));const ngoCards=hand.filter(c=>c.tag==='NGO');const platformCards=hand.filter(c=>c.tag==='Plattform');if(ngoCards.length>0){log(\"\\uD83C\\uDF31 NGO-Karten in Hand P\".concat(player,\": \").concat(ngoCards.map(c=>c.name).join(', ')));}if(platformCards.length>0){log(\"\\uD83D\\uDCBB Plattform-Karten in Hand P\".concat(player,\": \").concat(platformCards.map(c=>c.name).join(', ')));}const selectedCard=hand[handIndex];if(!canPlayCard(prev,player,selectedCard)){log('🚫 Kann Karte nicht spielen (keine AP verfügbar).');return prev;}const{cost}=getNetApCost(prev,player,selectedCard);const prevAp=prev.actionPoints[player];const newState=_objectSpread({},prev);// Simplified AP system: All cards cost exactly 1 AP\nnewState.actionPoints[player]=Math.max(0,newState.actionPoints[player]-cost);log(\"\\uD83D\\uDCB3 Kosten verbucht: AP \".concat(prevAp,\"\\u2192\").concat(newState.actionPoints[player]));// Flags KONSUMIEREN (einheitlich, NUR HIER!)\nensureFlags(newState,player);const ef=newState.effectFlags[player];// Simplified AP system: No refunds or discounts\n// All cards cost exactly 1 AP\n// Remove card from hand\nconst newHand=[...newState.hands[player]];const[playedCard]=newHand.splice(handIndex,1);newState.hands=_objectSpread(_objectSpread({},newState.hands),{},{[player]:newHand});// Prevent double-playing the same UID concurrently\nif(playedCard.uid){if(playingUidRef.current.has(playedCard.uid)){log(\"\\u26A0\\uFE0F Duplicate play prevented for UID \".concat(playedCard.uid));return prev;}playingUidRef.current.add(playedCard.uid);}// 🔧 CLUSTER 3 DEBUG: Zeige jede gespielte Karte\nlog(\"\\uD83D\\uDD27 CLUSTER 3 GLOBAL DEBUG: P\".concat(player,\" spielt \").concat(playedCard.name,\" (\").concat(playedCard.kind,\") - Type: \").concat(playedCard.type||'KEIN TYPE'));// 🔧 CLUSTER 3 DEBUG: Zeige aktuelles Board\nconst currentBoard=newState.board[player];const publicCardsOnBoard=currentBoard.innen.filter(card=>card.kind==='spec');log(\"\\uD83D\\uDD27 CLUSTER 3 GLOBAL DEBUG: \\xD6ffentlichkeitskarten auf dem Feld: \".concat(publicCardsOnBoard.map(c=>c.name).join(', ')));// Jennifer Doudna check removed - not needed for current game logic\n// Handle different card types\nif(playedCard.kind==='pol'){const polCard=playedCard;const targetLane=lane||(polCard.tag==='Staatsoberhaupt'||polCard.tag==='Regierungschef'||polCard.tag==='Diplomat'?'aussen':'innen');if(newState.board[player][targetLane].length>=5){log(\"\\u274C ERROR: Lane full - Lane: \".concat(targetLane,\", Current: \").concat(newState.board[player][targetLane].length,\"/5\"));return prev;}// Add to board (immutable clone to avoid accidental double references)\nconst laneArray=[...newState.board[player][targetLane],playedCard];const playerBoardCloned=_objectSpread(_objectSpread({},newState.board[player]),{},{[targetLane]:laneArray});newState.board=_objectSpread(_objectSpread({},newState.board),{},{[player]:playerBoardCloned});// VISUAL: spawn GIF overlay centered over the government slot icon when placing a government card\ntry{if(targetLane==='aussen'){const rects=getGovernmentRects(player===1?'player':'opponent');const slotIndex=newState.board[player].aussen.length-1;const slotRect=rects[slotIndex]||rects[0]||{x:960-128,y:540-128,w:256,h:256};const cx=slotRect.x+slotRect.w/2;const cy=slotRect.y+slotRect.h/2;// particles/pop in canvas coords\ntry{visualEffects===null||visualEffects===void 0?void 0:visualEffects.spawnParticles(cx,cy,18);}catch(e){}try{var _playedCard$uid;visualEffects===null||visualEffects===void 0?void 0:visualEffects.spawnPop((_playedCard$uid=playedCard.uid)!==null&&_playedCard$uid!==void 0?_playedCard$uid:playedCard.id);}catch(e){}// compute screen coords and spawn 300x300 overlay\nconst canvas=document.querySelector('canvas');if(canvas){// Prefer reliable canvas spritesheet animation directly on the target slot\ntry{const key=\"\".concat(player,\".\",'aussen',\".\").concat(slotIndex);const trig=window.__pc_triggerGovAnim||window.pc_triggerGovAnim;if(typeof trig==='function')trig(key);}catch(e){}// Only fade-in anim\ntry{var _visualEffects$playAn,_visualEffects$playAn2,_playedCard$uid2;visualEffects===null||visualEffects===void 0?void 0:(_visualEffects$playAn=visualEffects.playAnimsRef)===null||_visualEffects$playAn===void 0?void 0:(_visualEffects$playAn2=_visualEffects$playAn.current)===null||_visualEffects$playAn2===void 0?void 0:_visualEffects$playAn2.push({uid:(_playedCard$uid2=playedCard.uid)!==null&&_playedCard$uid2!==void 0?_playedCard$uid2:playedCard.id,started:performance.now(),duration:420});}catch(e){}}}}catch(e){console.debug('[GameActions] GOV overlay failed',e);}log(\"\\uD83C\\uDCCF Player \".concat(player,\": \").concat(playedCard.name,\" gespielt in \").concat(targetLane==='aussen'?'Regierung':'Öffentlichkeit'));// 3) Nachdem die Karte gelegt wurde: gegnerische Traps prüfen\napplyTrapsOnCardPlayed(newState,player,playedCard,event=>{if(!newState._effectQueue)newState._effectQueue=[];newState._effectQueue.push(event);},log);// 👉 Erst JETZT Auren anwenden (damit +2 Basis erhalten bleibt)\napplyAurasForPlayer(newState,player,log);// 6) Karteneffekte enqueuen + Queue auflösen\ntriggerCardEffects(newState,player,playedCard);// UI visual: particle burst + pop scale for played card (prototype hook)\ntry{spawnCardVisual(playedCard,newState);}catch(e){}// Migration Helper verwenden\nmigrateLegacyQueue(newState);// Nur noch _effectQueue verwenden\nif(newState._effectQueue&&newState._effectQueue.length>0){try{log(\"DEBUG: about to resolve queue (pol play) -> \".concat(JSON.stringify(newState._effectQueue.map(e=>({type:e.type,amount:e.amount,msg:e.msg})).slice(0,50))));}catch(e){}log(\"DEBUG AP before resolve (pol play): P1=\".concat(newState.actionPoints[1],\" P2=\").concat(newState.actionPoints[2]));resolveQueue(newState,newState._effectQueue);newState._effectQueue=[];// Nach Queue-Auflösung: Hand-Arrays immutabel neu zuweisen\nafterQueueResolved===null||afterQueueResolved===void 0?void 0:afterQueueResolved();log(\"DEBUG AP after resolve (pol play): P1=\".concat(newState.actionPoints[1],\" P2=\").concat(newState.actionPoints[2]));}// Release playing UID after queue resolved\nif(playedCard.uid)playingUidRef.current.delete(playedCard.uid);// Check for trap triggers\napplyTrapsOnCardPlayed(newState,player,playedCard,e=>{var _newState$_effectQueu;return((_newState$_effectQueu=newState._effectQueue)!==null&&_newState$_effectQueu!==void 0?_newState$_effectQueu:newState._effectQueue=[]).push(e);},m=>{var _newState$_effectQueu2;return((_newState$_effectQueu2=newState._effectQueue)!==null&&_newState$_effectQueu2!==void 0?_newState$_effectQueu2:newState._effectQueue=[]).push({type:'LOG',msg:m});});// 🔥 ROMAN ABRAMOVICH EFFEKT: Wenn Regierungskarte mit Einfluss ≤5 gespielt wird\nif(playedCard.kind==='pol'&&playedCard.influence<=5){const opponent=player===1?2:1;const opponentBoard=newState.board[opponent];const romanAbramovich=opponentBoard.innen.find(card=>card.kind==='spec'&&card.name==='Roman Abramovich');if(romanAbramovich){// Ziehe eine Karte für den Gegner\nif(newState.decks[opponent].length>0){const drawnCard=newState.decks[opponent].shift();if(drawnCard){newState.hands[opponent].push(drawnCard);log(\"\\uD83D\\uDD25 ROMAN ABRAMOVICH EFFEKT: P\".concat(opponent,\" zieht 1 Karte (\").concat(drawnCard.name,\") - Regierungskarte mit Einfluss \\u22645 gespielt\"));}}}}// 🔍 BOARD DEBUG: Zeige aktuelles Board nach dem Spielen\nconst currentBoard=newState.board[player];const regierungKarten=currentBoard.aussen.map(c=>\"\".concat(c.name,\"[\").concat(c.kind==='pol'?c.influence+'I':'S',\"]\"));const öffentlichkeitKarten=currentBoard.innen.map(c=>\"\".concat(c.name,\"[\").concat(c.kind==='spec'?c.tag||'S':'P',\"]\"));log(\"\\uD83D\\uDCCB P\".concat(player,\" BOARD: Regierung=[\").concat(regierungKarten.join(', '),\"] | \\xD6ffentlichkeit=[\").concat(öffentlichkeitKarten.join(', '),\"]\"));// 🔥 JOSCHKA FISCHER NGO-EFFEKT: Jetzt als kontinuierlicher Aura-Effekt in sumRowWithAuras implementiert\nlog(\"\\uD83D\\uDD0D DEBUG: Karte gespielt - Name: \".concat(playedCard.name,\", Tag: \").concat(playedCard.tag||'Kein Tag',\", Lane: \").concat(targetLane,\", Kind: \").concat(playedCard.kind));if(playedCard.tag==='NGO'){log(\"\\uD83D\\uDD0D NGO-Karte gespielt: \".concat(playedCard.name,\" [NGO] - Kontinuierliche Aura-Effekte werden bei Rundenauswertung berechnet\"));// 🎯 SOFORTIGE SYNERGIE-PRÜFUNG: Joschka Fischer + NGO\nconst joschaFischer=currentBoard.aussen.find(card=>card.kind==='pol'&&card.effect==='ngo_boost');if(joschaFischer){log(\"\\uD83D\\uDD25\\uD83D\\uDD25\\uD83D\\uDD25 SYNERGIE AKTIVIERT! \\uD83D\\uDD25\\uD83D\\uDD25\\uD83D\\uDD25 Joschka Fischer + \".concat(playedCard.name,\"[NGO] \\u2192 +1 Einfluss bei Rundenauswertung\"));}}}else if(playedCard.kind==='spec'){var _type,_type2;const specCard=playedCard;const typeStr=String(specCard.type||'').toLowerCase();const isInitiative=/initiative/.test(typeStr);// matcht \"Initiative\", \"Sofort-Initiative\", etc.\n// 1) Falls es eine \"Systemrelevant\" ist (sofortiger Buff auf letzte eigene Regierungskarte)\nif(playedCard.kind==='spec'&&(_type=playedCard.type)!==null&&_type!==void 0&&_type.toLowerCase().includes('systemrelevant')){const ownBoard=newState.board[player];const candidates=[...ownBoard.aussen,...ownBoard.innen].filter(c=>c.kind==='pol');const target=candidates[candidates.length-1];// letzte eigene Regierungskarte\nif(target){target.protected=true;log(\"\\uD83D\\uDEE1\\uFE0F \".concat(target.name,\" erh\\xE4lt einmaligen Schutz.\"));}else{log('🛈 Systemrelevant: Keine eigene Regierungskarte im Spiel – Effekt verpufft.');}// danach die Spezialkarte normal entsorgen\nnewState.discard.push(playedCard);return newState;}// 1) Dauerhaft-Initiative (Ongoing)\nif(typeStr.includes('dauerhaft')){// Slot-Mapping: Dauerhaft-Initiativen → map to permanentSlots.government or .public\n// Prefer explicit metadata on the card, fallback to tag-based heuristic, default to 'government'\nconst preferredSlot=specCard.permanentSlot||((specCard.tags||[]).includes('Public')?'public':'government');if(!newState.permanentSlots[player][preferredSlot]){// ensure card is stored as a shallow clone to avoid accidental shared references\nnewState.permanentSlots[player]=_objectSpread(_objectSpread({},newState.permanentSlots[player]),{},{[preferredSlot]:_objectSpread({},playedCard)});log(\"P\".concat(player,\" spielt \").concat(playedCard.name,\" als Dauerhafte Initiative (Slot: \").concat(preferredSlot,\")\"));}else{var _newState$permanentSl;log(\"\\u26A0\\uFE0F WARN: Slot occupied - Slot \".concat(preferredSlot,\" already has \").concat((_newState$permanentSl=newState.permanentSlots[player][preferredSlot])===null||_newState$permanentSl===void 0?void 0:_newState$permanentSl.name));// Return the card to hand and refund AP as graceful fallback\nnewState.hands[player]=[...newState.hands[player],playedCard];newState.actionPoints[player]+=cost;return newState;}// 6) Karteneffekte enqueuen + Queue auflösen\ntriggerCardEffects(newState,player,playedCard);// Migration Helper verwenden\nmigrateLegacyQueue(newState);// Nur noch _effectQueue verwenden\nif(newState._effectQueue&&newState._effectQueue.length>0){try{log(\"DEBUG: about to resolve queue (spec ongoing) -> \".concat(JSON.stringify(newState._effectQueue.map(e=>({type:e.type,amount:e.amount,msg:e.msg})).slice(0,50))));}catch(e){}log(\"DEBUG AP before resolve (spec ongoing): P1=\".concat(newState.actionPoints[1],\" P2=\").concat(newState.actionPoints[2]));resolveQueue(newState,newState._effectQueue);newState._effectQueue=[];// Nach Queue-Auflösung: Hand-Arrays immutabel neu zuweisen\nafterQueueResolved===null||afterQueueResolved===void 0?void 0:afterQueueResolved();log(\"DEBUG AP after resolve (spec ongoing): P1=\".concat(newState.actionPoints[1],\" P2=\").concat(newState.actionPoints[2]));}// Check for trap triggers\napplyTrapsOnCardPlayed(newState,player,playedCard,e=>{var _newState$_effectQueu3;return((_newState$_effectQueu3=newState._effectQueue)!==null&&_newState$_effectQueu3!==void 0?_newState$_effectQueu3:newState._effectQueue=[]).push(e);},m=>{var _newState$_effectQueu4;return((_newState$_effectQueu4=newState._effectQueue)!==null&&_newState$_effectQueu4!==void 0?_newState$_effectQueu4:newState._effectQueue=[]).push({type:'LOG',msg:m});});return newState;}// 2) Sofort-/Sofort-Initiativen (Instant)\nif(isInitiative){if(!specCard.effectKey){log(\"\\u274C Initiative ohne effectKey: \".concat(specCard.name));}else{log(\"\\uD83E\\uDDE9 INIT: \".concat(specCard.name,\" [\").concat(String(specCard.effectKey),\"] gespielt\"));}// 🔧 NEU: Sofort-Initiativen werden in das sofort Array gelegt statt sofort aktiviert\nif(typeStr.includes('sofort')){// Prüfe ob bereits eine Sofort-Initiative im Slot liegt\nif(newState.board[player].sofort.length>0){var _newState$board$playe;log(\"\\u274C ERROR: Sofort-Initiative-Slot bereits besetzt - \".concat((_newState$board$playe=newState.board[player].sofort[0])===null||_newState$board$playe===void 0?void 0:_newState$board$playe.name,\" muss erst aktiviert werden\"));// Karte zurück in die Hand\nnewState.hands[player]=[...newState.hands[player],playedCard];// AP zurückgeben\nnewState.actionPoints[player]+=cost;// AP zurückgegeben, keine Aktion rückgängig zu machen\nreturn newState;}// Sofort-Initiative in das sofort Array legen\nnewState.board[player].sofort=[playedCard];log(\"\\uD83C\\uDFAF P\".concat(player,\" legt \").concat(playedCard.name,\" in Sofort-Initiative-Slot (kann sp\\xE4ter aktiviert werden)\"));// Sofort-Initiativen: auf Board.sofort legen (nicht direkt entsorgen)\nif(!newState._effectQueue)newState._effectQueue=[];newState._effectQueue.push({type:'LOG',msg:\"\\uD83D\\uDD14 Sofort-Initiative bereit: \".concat(playedCard.name,\" (zum Aktivieren anklicken oder Taste 'A')\")});return newState;}// Dauerhaft-Initiativen werden weiterhin sofort aktiviert\n// Initiative in den Ablagestapel\nnewState.discard=[...newState.discard,playedCard];log(\"P\".concat(player,\" spielt Initiative: \").concat(playedCard.name));// 6) Karteneffekte enqueuen + Queue auflösen\nconsole.log('🔥 ABOUT TO TRIGGER CARD EFFECTS (INITIATIVE):',playedCard.name,'effectKey:',playedCard.effectKey);triggerCardEffects(newState,player,playedCard);// Migration Helper verwenden\nmigrateLegacyQueue(newState);// Nur noch _effectQueue verwenden\nif(newState._effectQueue&&newState._effectQueue.length>0){resolveQueue(newState,newState._effectQueue);newState._effectQueue=[];// Nach Queue-Auflösung: Hand-Arrays immutabel neu zuweisen\nafterQueueResolved===null||afterQueueResolved===void 0?void 0:afterQueueResolved();}// Check for trap triggers\napplyTrapsOnCardPlayed(newState,player,playedCard,e=>{var _newState$_effectQueu5;return((_newState$_effectQueu5=newState._effectQueue)!==null&&_newState$_effectQueu5!==void 0?_newState$_effectQueu5:newState._effectQueue=[]).push(e);},m=>{var _newState$_effectQueu6;return((_newState$_effectQueu6=newState._effectQueue)!==null&&_newState$_effectQueu6!==void 0?_newState$_effectQueu6:newState._effectQueue=[]).push({type:'LOG',msg:m});});// 🔥 CLUSTER 3: Auren-Flags neu berechnen (nach Kartenspielen)\nrecomputeAuraFlags(newState);// 🔥 CLUSTER 3: Ai Weiwei Bonus wird bei Aktivierung angewendet (nicht beim Spielen)\n// 🔥 PASSIVE EFFEKTE NACH INITIATIVE: Mark Zuckerberg & Sam Altman\n// Diese Effekte werden jetzt über INITIATIVE_ACTIVATED Event + Board-Check gehandhabt\n// Keine direkten Flag-Mutationen mehr - alles über Events\nreturn newState;}// 3) Öffentlichkeit (Public)\nif(typeStr==='öffentlichkeitskarte'||typeStr==='oeffentlichkeitskarte'||typeStr==='öffentlichkeit'||typeStr==='public'){if(newState.board[player].innen.length<5){const innenArray=[...newState.board[player].innen,playedCard];const playerBoardCloned=_objectSpread(_objectSpread({},newState.board[player]),{},{innen:innenArray});newState.board=_objectSpread(_objectSpread({},newState.board),{},{[player]:playerBoardCloned});log(\"P\".concat(player,\" spielt \").concat(playedCard.name,\" in \\xD6ffentlichkeit\"));// Sofort Auren prüfen (z.B. JF +1, wenn JF schon liegt)\napplyAurasForPlayer(newState,player,log);// 6) Karteneffekte enqueuen + Queue auflösen\ntriggerCardEffects(newState,player,playedCard);// Migration Helper verwenden\nmigrateLegacyQueue(newState);if(newState._effectQueue&&newState._effectQueue.length>0){resolveQueue(newState,newState._effectQueue);newState._effectQueue=[];// Nach Queue-Auflösung: Hand-Arrays immutabel neu zuweisen\nafterQueueResolved===null||afterQueueResolved===void 0?void 0:afterQueueResolved();}// Check for trap triggers\napplyTrapsOnCardPlayed(newState,player,playedCard,e=>{var _newState$_effectQueu7;return((_newState$_effectQueu7=newState._effectQueue)!==null&&_newState$_effectQueu7!==void 0?_newState$_effectQueu7:newState._effectQueue=[]).push(e);},m=>{var _newState$_effectQueu8;return((_newState$_effectQueu8=newState._effectQueue)!==null&&_newState$_effectQueu8!==void 0?_newState$_effectQueu8:newState._effectQueue=[]).push({type:'LOG',msg:m});});// 🔥 PUBLIC CARD EFFECTS - Passive effects when played\n// Helper function to draw a card for the player\nconst drawCardForPlayer=cardName=>{if(newState.decks[player].length>0){const drawnCard=newState.decks[player].shift();if(drawnCard){newState.hands[player].push(drawnCard);log(\"\\uD83D\\uDD25 \".concat(cardName.toUpperCase(),\" EFFEKT: +1 Karte gezogen (\").concat(drawnCard.name,\")\"));return true;}}return false;};if(specCard.name==='Elon Musk'){// Effect: \"Ziehe 1 Karte. Deine erste Initiative pro Runde kostet 1 Aktionspunkt weniger.\"\ndrawCardForPlayer('Elon Musk');// 🔥 QUEUE-SYSTEM: Erste Initiative pro Runde → Refund wird über triggerCardEffects gehandhabt\n}else if(specCard.name==='Bill Gates'){// Effect: \"Ziehe 1 Karte. Deine nächste Initiative kostet 1 Aktionspunkt weniger.\"\ndrawCardForPlayer('Bill Gates');// 🔥 QUEUE-SYSTEM: Nächste Initiative → Refund wird über triggerCardEffects gehandhabt\n}else if(specCard.name==='Jeff Bezos'){// Effect: \"Ziehe 1 Karte beim Ausspielen. Wenn eine Plattform liegt: +1 Aktionspunkt.\"\ndrawCardForPlayer('Jeff Bezos');const hasPlatform=newState.board[player].innen.some(c=>c.kind==='spec'&&c.tag==='Plattform');if(hasPlatform){newState.actionPoints[player]+=1;log(\"\\uD83D\\uDD25 JEFF BEZOS: +1 AP durch Plattform-Synergie! (\".concat(newState.actionPoints[player]-1,\" \\u2192 \").concat(newState.actionPoints[player],\")\"));}}else if(specCard.name==='Warren Buffett'){// Effect: \"Ziehe 1 Karte. Bei einer Wirtschafts-Initiative: +1 Effekt.\"\ndrawCardForPlayer('Warren Buffett');// TODO: Implement \"Wirtschafts-Initiative +1 Effect\" logic\nlog(\"\\uD83D\\uDCCA WARREN BUFFETT: Bei Wirtschafts-Initiativen +1 Effekt! (TODO: Implementierung)\");}else if(specCard.name==='Gautam Adani'){// Effect: \"Ziehe 1 Karte. Bei einer Infrastruktur-Initiative: +1 Effekt.\"\ndrawCardForPlayer('Gautam Adani');// TODO: Implement \"Infrastruktur-Initiative +1 Effect\" logic\nlog(\"\\uD83D\\uDCCA GAUTAM ADANI: Bei Infrastruktur-Initiativen +1 Effekt! (TODO: Implementierung)\");}else if(specCard.name==='Zhang Yiming'){// Effect: \"Ziehe 1 Karte. Bei Medien auf dem Feld: -1 Aktionspunkt auf deine nächste Initiative.\"\ndrawCardForPlayer('Zhang Yiming');const hasMedia=newState.board[player].innen.some(c=>c.kind==='spec'&&c.tag==='Medien');if(hasMedia){// TODO: Implement \"nächste Initiative -1 AP\" logic\nlog(\"\\uD83D\\uDD25 ZHANG YIMING: N\\xE4chste Initiative kostet 1 AP weniger durch Medien-Synergie! (TODO: Implementierung)\");}}else if(specCard.name==='George Soros'){// Effect: \"+1 Aktionspunkt wenn der Gegner eine autoritäre Regierungskarte hat.\"\nconst opponent=player===1?2:1;const hasAuthoritarianCard=newState.board[opponent].aussen.some(card=>{const polCard=card;return polCard.tag==='Staatsoberhaupt'&&polCard.influence>=8;// High influence leaders\n});if(hasAuthoritarianCard){newState.actionPoints[player]+=1;log(\"\\uD83D\\uDD25 GEORGE SOROS EFFEKT: +1 AP durch autorit\\xE4re Regierung des Gegners!\");log(\"\\uD83D\\uDCCA SOROS: Aktionspunkte \".concat(newState.actionPoints[player]-1,\" \\u2192 \").concat(newState.actionPoints[player]));}else{log(\"\\uD83D\\uDCAD George Soros: Keine autorit\\xE4ren Karten beim Gegner - Effekt nicht ausgel\\xF6st\");}}// 🔗 NGO-Synergie: Wenn eine NGO gelegt wird und Joschka Fischer liegt, erhält P${player} +1 Einfluss (Rundenauswertung)\nif(specCard.tag==='NGO'){const hasJoschka=newState.board[player].aussen.some(c=>c.kind==='pol'&&c.name==='Joschka Fischer'&&!c.deactivated);if(hasJoschka){log(\"\\uD83D\\uDD25\\uD83D\\uDD25\\uD83D\\uDD25 SYNERGIE AKTIVIERT! \\uD83D\\uDD25\\uD83D\\uDD25\\uD83D\\uDD25 Joschka Fischer + \".concat(playedCard.name,\"[NGO] \\u2192 +1 Einfluss bei Rundenauswertung\"));}}}else{log(\"\\u274C ERROR: Lane full - \\xD6ffentlichkeit ist voll (5/5)\");}// Simplified AP system: No refunds\nreturn newState;}// 4) Default: Traps/Interventions\n// Falls Trap-Karte gelegt wird\nif(playedCard.kind==='spec'&&(_type2=playedCard.type)!==null&&_type2!==void 0&&_type2.toLowerCase().includes('trap')){registerTrap(newState,player,playedCard.key||playedCard.name.toLowerCase().replace(/[- ]/g,'_'));// NICHT sofort checken – sie wartet auf den Gegner\nreturn newState;}newState.traps[player]=[...newState.traps[player],playedCard];log(\"P\".concat(player,\" spielt \").concat(playedCard.name,\" als \").concat(specCard.type));// 6) Karteneffekte enqueuen + Queue auflösen\nconsole.log('🔥 ABOUT TO TRIGGER CARD EFFECTS:',playedCard.name,'effectKey:',playedCard.effectKey);triggerCardEffects(newState,player,playedCard);// Migration Helper verwenden\nmigrateLegacyQueue(newState);// Nur noch _effectQueue verwenden\nif(newState._effectQueue&&newState._effectQueue.length>0){try{log(\"DEBUG: about to resolve queue (spec instant) -> \".concat(JSON.stringify(newState._effectQueue.map(e=>({type:e.type,amount:e.amount,msg:e.msg})).slice(0,50))));}catch(e){}log(\"DEBUG AP before resolve (spec instant): P1=\".concat(newState.actionPoints[1],\" P2=\").concat(newState.actionPoints[2]));resolveQueue(newState,newState._effectQueue);newState._effectQueue=[];// Nach Queue-Auflösung: Hand-Arrays immutabel neu zuweisen\nafterQueueResolved===null||afterQueueResolved===void 0?void 0:afterQueueResolved();log(\"DEBUG AP after resolve (spec instant): P1=\".concat(newState.actionPoints[1],\" P2=\").concat(newState.actionPoints[2]));}// Check for trap triggers\napplyTrapsOnCardPlayed(newState,player,playedCard,e=>{var _newState$_effectQueu9;return((_newState$_effectQueu9=newState._effectQueue)!==null&&_newState$_effectQueu9!==void 0?_newState$_effectQueu9:newState._effectQueue=[]).push(e);},m=>{var _newState$_effectQueu0;return((_newState$_effectQueu0=newState._effectQueue)!==null&&_newState$_effectQueu0!==void 0?_newState$_effectQueu0:newState._effectQueue=[]).push({type:'LOG',msg:m});});// Simplified AP system: No refunds\nreturn newState;}// 6) Karteneffekte enqueuen + Queue auflösen (fallback für unbekannte Kartentypen)\ntriggerCardEffects(newState,player,selectedCard);// Migration Helper verwenden\nmigrateLegacyQueue(newState);// Nur noch _effectQueue verwenden\nif(newState._effectQueue&&newState._effectQueue.length>0){try{log(\"DEBUG: about to resolve queue (spec public/default) -> \".concat(JSON.stringify(newState._effectQueue.map(e=>({type:e.type,amount:e.amount,msg:e.msg})).slice(0,50))));}catch(e){}log(\"DEBUG AP before resolve (spec public/default): P1=\".concat(newState.actionPoints[1],\" P2=\").concat(newState.actionPoints[2]));resolveQueue(newState,newState._effectQueue);newState._effectQueue=[];// Nach Queue-Auflösung: Hand-Arrays immutabel neu zuweisen\nafterQueueResolved===null||afterQueueResolved===void 0?void 0:afterQueueResolved();log(\"DEBUG AP after resolve (spec public/default): P1=\".concat(newState.actionPoints[1],\" P2=\").concat(newState.actionPoints[2]));}// Check for trap triggers\napplyTrapsOnCardPlayed(newState,player,selectedCard,e=>{var _newState$_effectQueu1;return((_newState$_effectQueu1=newState._effectQueue)!==null&&_newState$_effectQueu1!==void 0?_newState$_effectQueu1:newState._effectQueue=[]).push(e);},m=>{var _newState$_effectQueu10;return((_newState$_effectQueu10=newState._effectQueue)!==null&&_newState$_effectQueu10!==void 0?_newState$_effectQueu10:newState._effectQueue=[]).push({type:'LOG',msg:m});});// Simplified AP system: No refunds\n// Kein Aktionenlimit mehr → automatischer Turnwechsel entfällt\nreturn newState;});},[setGameState,log]);const activateInstantInitiative=useCallback(player=>{logger.info(\"activateInstantInitiative START P\".concat(player));setGameState(prev=>{if(prev.current!==player){log(\"\\u274C ERROR: Not player turn - Current: \".concat(prev.current,\", Attempted: \").concat(player));return prev;}const instantCard=prev.board[player].sofort[0];if(!instantCard){log(\"\\u274C ERROR: No Sofort-Initiative in slot for player \".concat(player));return prev;}const newState=_objectSpread({},prev);// 1) Normale Karten-Effekte der Sofort-Karte feuern\ntriggerCardEffects(newState,player,instantCard);// UI visual: initiative ripple + AP pop (prototype hook)\ntry{var _politicardDebug4;const zones=((_politicardDebug4=window.__politicardDebug)===null||_politicardDebug4===void 0?void 0:_politicardDebug4.clickZones)||[];const boardZone=zones.find(z=>z.data&&z.data.type==='row_slot');const cx=boardZone?boardZone.x+(boardZone.w||256)/2:960;const cy=boardZone?boardZone.y+(boardZone.h||256)/2:300;if(visualEffects){visualEffects.spawnRipple(cx,cy,{radius:640,showAp:true,apX:cx,apY:cy+40});try{const trigI=window.__pc_triggerInstantAnim||window.pc_triggerInstantAnim;if(typeof trigI==='function')trigI('1.instant.0');}catch(e){}}else{window.__pc_ripples=window.__pc_ripples||[];window.__pc_ripples.push({cx,cy,started:performance.now(),duration:700,radius:640,showAp:true,apX:cx,apY:cy+40});}}catch(e){}// Check for trap triggers\napplyTrapsOnCardPlayed(newState,player,instantCard,e=>{var _newState$_effectQueu11;return((_newState$_effectQueu11=newState._effectQueue)!==null&&_newState$_effectQueu11!==void 0?_newState$_effectQueu11:newState._effectQueue=[]).push(e);},m=>{var _newState$_effectQueu12;return((_newState$_effectQueu12=newState._effectQueue)!==null&&_newState$_effectQueu12!==void 0?_newState$_effectQueu12:newState._effectQueue=[]).push({type:'LOG',msg:m});});// 2) Queue auflösen (BEVOR die Karte entfernt wird)\nif(newState._effectQueue&&newState._effectQueue.length>0){resolveQueue(newState,[...newState._effectQueue]);newState._effectQueue=[];// Nach Queue-Auflösung: Hand-Arrays immutabel neu zuweisen\nafterQueueResolved===null||afterQueueResolved===void 0?void 0:afterQueueResolved();}// 3) Karte NACH Queue-Auflösung in den Ablagestapel\nconst[played]=newState.board[player].sofort.splice(0,1);newState.discard.push(played);// Visual: listen for dice roll event to animate & bind to SKANDALSPIRALE_TRIGGER if present\ntry{const diceHandler=ev=>{try{var _ev$detail7,_newState$_effectQueu13;const face=(_ev$detail7=ev.detail)===null||_ev$detail7===void 0?void 0:_ev$detail7.face;if(face==null)return;// If last enqueued event was SKANDALSPIRALE_TRIGGER, attach a LOG with the face\nconst last=((_newState$_effectQueu13=newState._effectQueue)!==null&&_newState$_effectQueu13!==void 0?_newState$_effectQueu13:[]).slice(-1)[0];// Emit a LOG event for visibility\nif(!newState._effectQueue)newState._effectQueue=[];newState._effectQueue.push({type:'LOG',msg:\"W\\xFCrfel: \".concat(face)});}catch(e){}};window.addEventListener('pc:dice_roll',diceHandler);// remove after short timeout to avoid leaking listeners\nsetTimeout(()=>window.removeEventListener('pc:dice_roll',diceHandler),2000);}catch(e){}return newState;});},[setGameState,log]);const endTurn=useCallback(function(){let reason=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'button_end_turn';logger.info(\"endTurn START reason=\".concat(reason));setGameState(prev=>{// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst current=prev.current;// 1) Schon im Abschluss? -> Nichts tun (Idempotenz)\nif(prev.isEndingTurn){log('🔁 Zugabschluss läuft bereits – warte auf Queue.');return prev;}const newState=_objectSpread(_objectSpread({},prev),{},{isEndingTurn:true});// 2) Hängen noch Effekte in der Queue? -> Auflösen lassen\nif(newState._effectQueue&&newState._effectQueue.length>0){log('⏳ Effekte werden noch aufgelöst – Zugwechsel folgt automatisch.');resolveQueue(newState,[...newState._effectQueue]);newState._effectQueue=[];// Nach Queue-Auflösung: Wenn Flag noch gesetzt, Zug beenden\nif(newState.isEndingTurn){return reallyEndTurn(newState,log);}return newState;}// 3) Keine Effekte mehr -> sofort beenden\nreturn reallyEndTurn(newState,log);});},[setGameState,log]);// Legacy: nextTurn als Alias für endTurn für Kompatibilität\nconst nextTurn=useCallback(()=>{logger.info('nextTurn alias called');endTurn('auto');},[endTurn]);// Global listener: handle visual dice results and apply Skandalspirale effects automatically\nuseEffect(()=>{const handler=ev=>{var _ev$detail8;const face=ev===null||ev===void 0?void 0:(_ev$detail8=ev.detail)===null||_ev$detail8===void 0?void 0:_ev$detail8.face;if(typeof face!=='number')return;setGameState(prev=>{try{const pending=prev._pendingSkandal;if(!pending)return prev;// only accept recent pending requests (avoid stale triggers)\nif(Date.now()-(pending.ts||0)>8000){const n=_objectSpread({},prev);delete n._pendingSkandal;return n;}const newState=_objectSpread({},prev);// clear pending marker\ndelete newState._pendingSkandal;// Prepare events based on face\nnewState._effectQueue=newState._effectQueue||[];if(face>=1&&face<=3){const loss=face;// enqueue negative buff (debuff) on disadvantaged player's strongest gov\nnewState._effectQueue.push({type:'BUFF_STRONGEST_GOV',player:pending.player,amount:-loss});newState._effectQueue.push({type:'LOG',msg:\"Skandalspirale: Spieler \".concat(pending.player,\" w\\xFCrfelt \").concat(face,\" \\u2192 st\\xE4rkste Regierung -\").concat(loss,\".\")});}else{newState._effectQueue.push({type:'LOG',msg:\"Skandalspirale: Spieler \".concat(pending.player,\" w\\xFCrfelt \").concat(face,\" \\u2192 Keine Auswirkung.\")});}// Resolve immediately so effect is visible without waiting\nif(newState._effectQueue&&newState._effectQueue.length>0){try{resolveQueue(newState,[...newState._effectQueue]);}catch(e){logger.dbg('resolveQueue failed on dice handler',e);}newState._effectQueue=[];}// Ensure React sees shallow-copied hands for UI update\ntry{newState.hands={1:[...newState.hands[1]],2:[...newState.hands[2]]};}catch(e){}// run after-queue hook if provided (best-effort)\ntry{if(window.__afterQueueResolved)window.__afterQueueResolved();}catch(e){}return newState;}catch(err){logger.dbg('dice handler setGameState error',err);return prev;}});};window.addEventListener('pc:dice_roll',handler);return()=>window.removeEventListener('pc:dice_roll',handler);},[setGameState]);const passTurn=useCallback(player=>{logger.info(\"passTurn START P\".concat(player));setGameState(prev=>{logger.dbg(\"passTurn setState current=\".concat(prev.current,\" player=\").concat(player));if(prev.current!==player){logger.dbg(\"passTurn wrong turn current=\".concat(prev.current,\" attempted=\").concat(player));return prev;}const newState=_objectSpread(_objectSpread({},prev),{},{passed:_objectSpread(_objectSpread({},prev.passed),{},{[player]:true})});logger.dbg(\"Pass status updated P1=\".concat(newState.passed[1],\" P2=\").concat(newState.passed[2]));log(\"\\uD83D\\uDEAB Spieler \".concat(player,\" passt.\"));// ❗ Kein Nachziehen bei Pass:\n// Der passierende Spieler kommt in dieser Runde nicht mehr dran.\n// Die nächste Runde startet ohnehin mit 5 neuen Handkarten.\n// Check if round should end (both players passed)\nconst shouldEndRound=checkRoundEnd(newState);logger.dbg(\"Should end round? \".concat(shouldEndRound));if(shouldEndRound){log(\"\\uD83C\\uDFC1 Runde \".concat(newState.round,\" wird beendet und ausgewertet.\"));return resolveRound(newState,log);}else{// Switch turn to other player for their final chance\nconst otherPlayer=player===1?2:1;logger.dbg(\"Switching to other player \".concat(otherPlayer,\" hasPassed=\").concat(newState.passed[otherPlayer]));// Only switch if other player hasn't passed yet\nif(!newState.passed[otherPlayer]){newState.current=otherPlayer;newState.actionPoints=_objectSpread(_objectSpread({},newState.actionPoints),{},{[otherPlayer]:2});// Apply new start-of-turn hooks\napplyStartOfTurnFlags(newState,otherPlayer,log);// 🔥 CLUSTER 3: Auren-Flags beim Zugstart neu berechnen\nrecomputeAuraFlags(newState);log(\"\\u23ED\\uFE0F Spieler \".concat(otherPlayer,\" hat noch einen letzten Zug.\"));logger.dbg(\"Turn switched to player \".concat(otherPlayer));}else{// Both players have passed now, end round\nlog(\"\\uD83C\\uDFC1 Runde \".concat(newState.round,\" wird beendet (beide Spieler haben gepasst).\"));return resolveRound(newState,log);}}return newState;});},[setGameState,log]);return{startMatchWithDecks,startMatchVsAI,playCard,activateInstantInitiative,passTurn,nextTurn,endTurn};}","map":{"version":3,"names":["useCallback","useRef","useEffect","createDefaultEffectFlags","buildDeckFromEntries","sumGovernmentInfluenceWithAuras","PRESET_DECKS","getCardActionPointCost","getNetApCost","canPlayCard","triggerCardEffects","ensureTestBaselineAP","resolveQueue","applyStartOfTurnFlags","registerTrap","applyTrapsOnCardPlayed","recomputeAuraFlags","emptyBoard","logger","useVisualEffectsSafe","slotGovGif","getUiTransform","getGovernmentRects","migrateLegacyQueue","state","other","p","ensureFlags","s","effectFlags","_objectSpread","pickLane","c","tag","kind","isCardPlayableNow","player","card","deactivated","lane","board","length","t","String","type","toLowerCase","innen","tags","isOngoingInitiative","includes","effectKey","startsWith","preferredSlot","permanentSlot","permanentSlots","hasPlayableZeroCost","hands","cost","applyAurasForPlayer","log","hasNgo","some","newAussen","aussen","map","pol","baseInfluence","influence","prev","bonus","name","effect","concat","checkRoundEnd","gameState","result","passed","dbg","drawCardsFromDeck","count","deck","decks","drawnCards","splice","Math","min","reallyEndTurn","current","isEndingTurn","drawnCard","shift","push","shouldEndRound","round","resolveRound","newCurrent","actionPoints","p1Influence","p2Influence","roundWinner","cardsToDiscard","government","public","sofort","newP1Hand","newP2Hand","newRoundsWon","roundsWon","p1Wins","p2Wins","gameWinner","newState","actionsUsed","initiativePermanent","slice","discard","useGameActions","setGameState","afterQueueResolved","visualEffects","spawnCardVisual","stateOverride","_card$uid","_card$uid2","_politicardDebug2","console","debug","uid","id","effectiveState","_politicardDebug","located","idxA","findIndex","_c$uid","_card$uid3","index","idxI","_c$uid2","_card$uid4","_card$uid5","_card$uid6","rects","slot","x","y","w","h","cx_slot","cy_slot","spawnParticles","spawnPop","cx","cy","canvas","document","querySelector","_card$uid7","_card$uid8","rect","getBoundingClientRect","scale","offsetX","offsetY","width","height","screenCx","left","screenCy","top","spawnGifOverlayUi","src","duration","_card$uid9","playAnimsRef","started","performance","now","e","zones","window","__politicardDebug","clickZones","zone","find","z","_z$data$card$uid","data","_z$data$card$uid2","__pc_particles","i","start","life","random","vx","vy","size","color","floor","gravity","__pc_pops","__pc_play_anims","wv","__pc_visual_effects","spawnGifOverlay","_politicardDebug3","ui","uiTransform","playingUidRef","Set","pendingTargetRef","handlePickTarget","ev","_ev$detail","_ev$detail2","detail","targetUid","handleRequestRoll","_ev$detail3","_ev$detail4","getGlobalRNG","require","rng","roll","randomInt","dispatchEvent","CustomEvent","face","_effectQueue","msg","handleDiceResult","_ev$detail5","_ev$detail6","events","addEventListener","removeEventListener","startMatchWithDecks","p1DeckEntries","p2DeckEntries","p1Cards","p2Cards","p1NgoCarten","filter","p1PlatformCards","p1JoschaCards","p1PublicCards","join","d1","d2","h1","h2","traps","shields","activeRefresh","aiEnabled","startMatchVsAI","presetKey","arguments","undefined","playCard","handIndex","info","warn","hand","ngoCards","platformCards","selectedCard","prevAp","max","ef","newHand","playedCard","has","add","currentBoard","publicCardsOnBoard","polCard","targetLane","laneArray","playerBoardCloned","slotIndex","slotRect","_playedCard$uid","key","trig","__pc_triggerGovAnim","pc_triggerGovAnim","_visualEffects$playAn","_visualEffects$playAn2","_playedCard$uid2","event","JSON","stringify","amount","delete","_newState$_effectQueu","m","_newState$_effectQueu2","opponent","opponentBoard","romanAbramovich","regierungKarten","öffentlichkeitKarten","joschaFischer","_type","_type2","specCard","typeStr","isInitiative","test","ownBoard","candidates","target","protected","_newState$permanentSl","_newState$_effectQueu3","_newState$_effectQueu4","_newState$board$playe","_newState$_effectQueu5","_newState$_effectQueu6","innenArray","_newState$_effectQueu7","_newState$_effectQueu8","drawCardForPlayer","cardName","toUpperCase","hasPlatform","hasMedia","hasAuthoritarianCard","hasJoschka","replace","_newState$_effectQueu9","_newState$_effectQueu0","_newState$_effectQueu1","_newState$_effectQueu10","activateInstantInitiative","instantCard","_politicardDebug4","boardZone","spawnRipple","radius","showAp","apX","apY","trigI","__pc_triggerInstantAnim","pc_triggerInstantAnim","__pc_ripples","_newState$_effectQueu11","_newState$_effectQueu12","played","diceHandler","_ev$detail7","_newState$_effectQueu13","last","setTimeout","endTurn","reason","nextTurn","handler","_ev$detail8","pending","_pendingSkandal","Date","ts","n","loss","__afterQueueResolved","err","passTurn","otherPlayer"],"sources":["C:/Users/skank/Videos/Cards/Milchcards/src/hooks/useGameActions.ts"],"sourcesContent":["import { useCallback, useRef, useEffect } from 'react';\nimport { GameState, Card, Player, BuilderEntry, PoliticianCard } from '../types/game';\nimport { createDefaultEffectFlags } from '../types/game';\nimport { buildDeckFromEntries, sumGovernmentInfluenceWithAuras } from '../utils/gameUtils';\nimport { PRESET_DECKS } from '../data/gameData';\nimport { getCardActionPointCost, getNetApCost, canPlayCard, isInitiativeCard, isGovernmentCard } from '../utils/ap';\nimport { triggerCardEffects } from '../effects/cards';\nimport { ensureTestBaselineAP } from '../utils/testCompat';\nimport { resolveQueue } from '../utils/queue';\nimport { applyStartOfTurnFlags } from '../utils/startOfTurnHooks';\nimport { registerTrap, applyTrapsOnCardPlayed } from '../utils/traps';\nimport { recomputeAuraFlags } from '../state/effects';\nimport { activateInstantInitiative as activateInstantInitiativeRuntime } from '../state/instantRuntime';\nimport { isInstantInitiative } from '../utils/initiative';\nimport { emptyBoard } from '../state/board';\nimport type { EffectEvent } from '../types/effects';\nimport { logger } from '../debug/logger';\nimport { useVisualEffects, useVisualEffectsSafe } from '../context/VisualEffectsContext';\n// TS: sometimes asset module resolution fails in some setups — ignore typecheck for this import\n// @ts-ignore\nimport slotGovGif from '../ui/layout/slot_gov.webm';\nimport { getUiTransform, getGovernmentRects } from '../ui/layout';\n\n// Migration Helper für Queue-Vereinheitlichung\nconst migrateLegacyQueue = (state: any) => {\n  // Queue migration completed - only _effectQueue exists now\n};\n\n// Helper function for getting the other player\nconst other = (p: Player): Player => (p === 1 ? 2 : 1) as Player;\n\n// Hilfsfunktion: stellt sicher, dass effectFlags vorhanden sind\nconst ensureFlags = (s: GameState, p: Player) => {\n  if (!s.effectFlags) {\n    (s as any).effectFlags = { 1: createDefaultEffectFlags(), 2: createDefaultEffectFlags() };\n  } else {\n    s.effectFlags[p] = { ...createDefaultEffectFlags(), ...s.effectFlags[p] };\n  }\n};\n\n// Lane-Heuristik wie in playCard\nconst pickLane = (c: Card): 'innen'|'aussen' => {\n  const tag = (c as any).tag;\n  if (c.kind === 'pol' && (tag === 'Staatsoberhaupt' || tag === 'Regierungschef' || tag === 'Diplomat')) return 'aussen';\n  return 'innen';\n};\n\nconst isCardPlayableNow = (state: GameState, player: Player, card: Card): boolean => {\n  if ((card as any).deactivated) return false;\n\n  if (card.kind === 'pol') {\n    const lane = pickLane(card);\n    return state.board[player][lane].length < 5;\n  }\n\n  if (card.kind === 'spec') {\n    const t = String((card as any).type || '').toLowerCase();\n    // Public cards\n    if (t === 'öffentlichkeitskarte' || t === 'oeffentlichkeitskarte' || t === 'public') {\n      return state.board[player].innen.length < 5;\n    }\n\n    // Detect Ongoing / Permanent Initiatives by explicit tags or by effectKey namespace\n    const tags: string[] = (card as any).tags || (card as any).tags || [];\n    const isOngoingInitiative = ((card as any).type && String((card as any).type).toLowerCase().includes('initiative')) && (tags.includes('Ongoing') || (String((card as any).effectKey || '').startsWith('init.') && tags.includes('Ongoing')));\n    if (isOngoingInitiative) {\n      // Determine which permanent slot this initiative should occupy. Prefer explicit slot metadata, otherwise default to government.\n      const preferredSlot = (card as any).permanentSlot || ((card as any).tags && (card as any).tags.includes('Public') ? 'public' : 'government');\n      return !state.permanentSlots[player][preferredSlot as 'government' | 'public'];\n    }\n\n    // sonst: Fallen/Interventionen – aktuell immer erlaubt\n    return true;\n  }\n\n  return false;\n};\n\nexport const hasPlayableZeroCost = (state: GameState, player: Player): boolean => {\n  for (const c of state.hands[player]) {\n    const { cost } = getCardActionPointCost(state, player, c);\n    if (cost === 0 && isCardPlayableNow(state, player, c)) return true;\n  }\n  return false;\n};\n\n// Helper function to apply auras for a player (instant updates for Joschka Fischer + NGO synergy)\nfunction applyAurasForPlayer(state: GameState, player: Player, log?: (msg: string) => void) {\n  const board = state.board[player];\n  const hasNgo = board.innen.some(c =>\n    c.kind === 'spec' &&\n    (c as any).type === 'Öffentlichkeitskarte' &&\n    (c as any).tag === 'NGO' &&\n    !(c as any).deactivated\n  );\n\n  const newAussen = board.aussen.map(card => {\n    if (card.kind !== 'pol') return card;\n    const pol: any = { ...card };\n    if (pol.baseInfluence == null) pol.baseInfluence = pol.influence;\n    const prev = pol.influence as number;\n\n    let bonus = 0;\n    if (!pol.deactivated && pol.name === 'Joschka Fischer' && pol.effect === 'ngo_boost' && hasNgo) {\n      bonus += 1;\n    }\n    pol.influence = (pol.baseInfluence as number) + bonus;\n    if (log && pol.influence > prev) log(`PASSIV: ${pol.name} +${pol.influence - prev} I (jetzt ${pol.influence}).`);\n    return pol;\n  });\n\n  state.board = {\n    ...state.board,\n    [player]: { ...state.board[player], aussen: newAussen },\n  } as any;\n}\n\n\n\n// Helper function to check if round should end\nfunction checkRoundEnd(gameState: GameState): boolean {\n  // Round ends if both players have passed\n  const result = gameState.passed[1] && gameState.passed[2];\n  logger.dbg(`checkRoundEnd P1=${gameState.passed[1]} P2=${gameState.passed[2]} result=${result}`);\n  return result;\n}\n\n// Helper function to draw cards from deck\nfunction drawCardsFromDeck(gameState: GameState, player: Player, count: number): Card[] {\n  const deck = [...gameState.decks[player]];\n  const drawnCards = deck.splice(0, Math.min(count, deck.length));\n  return drawnCards;\n}\n\n// Helper function to really end a turn (extracted from nextTurn logic)\nfunction reallyEndTurn(gameState: GameState, log: (msg: string) => void): GameState {\n  const current = gameState.current;\n\n  // Flag zurücksetzen - Zug-Ende wird jetzt wirklich durchgeführt\n  gameState.isEndingTurn = false;\n\n  // ✅ Karte nachziehen am Ende eines Zugs (nur wenn NICHT \"pass\")\n  if (!gameState.passed[current]) {\n    const drawnCard = gameState.decks[current].shift();\n    if (drawnCard) {\n      gameState.hands[current].push(drawnCard);\n      log(`🔥 Zug-Ende: +1 Karte gezogen (${drawnCard.name})`);\n    }\n  } else {\n    log(`⏭️ P${current} hat gepasst – kein Nachziehen.`);\n  }\n\n  // Check if round should end\n  const shouldEndRound = checkRoundEnd(gameState);\n  if (shouldEndRound) {\n    log(`🏁 Runde ${gameState.round} wird beendet (Zug-Ende).`);\n    return resolveRound(gameState, log);\n  }\n\n  // Spielerwechsel + AP reset\n  const newCurrent: Player = current === 1 ? 2 : 1;\n  gameState.current = newCurrent;\n  gameState.actionPoints = { ...gameState.actionPoints, [newCurrent]: 2 };\n  gameState.passed = { ...gameState.passed, [newCurrent]: false };\n\n            // Apply new start-of-turn hooks\n          applyStartOfTurnFlags(gameState, newCurrent, log);\n\n        // 🔥 CLUSTER 3: Auren-Flags beim Zugstart neu berechnen\n        recomputeAuraFlags(gameState);\n\n  // Reset turn-bezogener Flag-Nutzungen (handled in applyStartOfTurnFlags)\n\n  log(`🔄 Zug-Ende: Spieler ${newCurrent} ist am Zug (2 AP verfügbar)`);\n\n  return gameState;\n}\n\n// Helper function to resolve round and start new one\nfunction resolveRound(gameState: GameState, log: (msg: string) => void): GameState {\n  // Calculate influence for both players\n  const p1Influence = sumGovernmentInfluenceWithAuras(gameState, 1);\n  const p2Influence = sumGovernmentInfluenceWithAuras(gameState, 2);\n\n  log(`📊 Rundenauswertung: P1 ${p1Influence} Einfluss vs P2 ${p2Influence} Einfluss`);\n\n  // Determine winner\n  let roundWinner: Player;\n  if (p1Influence > p2Influence) {\n    roundWinner = 1;\n    log(`🏆 Spieler 1 gewinnt die Runde! (${p1Influence} > ${p2Influence})`);\n  } else if (p2Influence > p1Influence) {\n    roundWinner = 2;\n    log(`🏆 Spieler 2 gewinnt die Runde! (${p2Influence} > ${p1Influence})`);\n  } else {\n    // Tie - current player wins\n    roundWinner = gameState.current;\n    log(`🤝 Unentschieden! Spieler ${roundWinner} gewinnt als aktiver Spieler.`);\n  }\n\n  // Collect all cards to move to discard\n  const cardsToDiscard: Card[] = [\n    ...gameState.board[1].innen,\n    ...gameState.board[1].aussen,\n    ...gameState.board[2].innen,\n    ...gameState.board[2].aussen,\n    ...(gameState.permanentSlots[1].government ? [gameState.permanentSlots[1].government] : []),\n    ...(gameState.permanentSlots[1].public ? [gameState.permanentSlots[1].public] : []),\n    ...(gameState.permanentSlots[2].government ? [gameState.permanentSlots[2].government] : []),\n    ...(gameState.permanentSlots[2].public ? [gameState.permanentSlots[2].public] : []),\n    ...gameState.board[1].sofort,\n    ...gameState.board[2].sofort\n  ];\n\n  // Draw 5 new cards for each player\n  const newP1Hand = drawCardsFromDeck(gameState, 1, 5);\n  const newP2Hand = drawCardsFromDeck(gameState, 2, 5);\n\n  // Calculate new rounds won\n  const newRoundsWon = {\n    ...gameState.roundsWon,\n    [roundWinner]: gameState.roundsWon[roundWinner] + 1\n  };\n\n  // Check if game should end (Best of 3: first to 2 wins)\n  const p1Wins = newRoundsWon[1];\n  const p2Wins = newRoundsWon[2];\n\n  if (p1Wins >= 2 || p2Wins >= 2) {\n    const gameWinner = p1Wins >= 2 ? 1 : 2;\n    log(`🏆🎉 SPIEL BEENDET! Spieler ${gameWinner} gewinnt das Match! (${p1Wins}-${p2Wins})`);\n    log(`🔥 Gesamtergebnis: Player ${gameWinner} ist der Sieger!`);\n\n    // Return final state with game winner\n    return {\n      ...gameState,\n      roundsWon: newRoundsWon,\n      gameWinner,\n      // Keep current board state for final display\n      passed: { 1: true, 2: true }, // Both passed to indicate game end\n    };\n  }\n\n  // Create new state for next round\n  const newState: GameState = {\n    ...gameState,\n    round: gameState.round + 1,\n    current: roundWinner, // Winner starts next round\n         passed: { 1: false, 2: false }, // Reset pass status\n     actionPoints: { 1: 2, 2: 2 }, // Reset AP\n     actionsUsed: { 1: 0, 2: 0 }, // Reset actions (kept for compatibility)\n     roundsWon: newRoundsWon,\n    effectFlags: {\n      1: createDefaultEffectFlags(),\n      2: createDefaultEffectFlags()\n    },\n    // Clear all board positions\n    board: emptyBoard(),\n    // Clear permanent slots\n    permanentSlots: {\n      1: { government: null, public: null, initiativePermanent: null },\n      2: { government: null, public: null, initiativePermanent: null }\n    },\n    // instantSlot wird nicht mehr verwendet - Sofort-Initiativen gehen in board[player].sofort\n    // New hands with 5 cards each\n    hands: {\n      1: newP1Hand,\n      2: newP2Hand\n    },\n    // Update decks (cards were removed during drawing)\n    decks: {\n      1: gameState.decks[1].slice(newP1Hand.length),\n      2: gameState.decks[2].slice(newP2Hand.length)\n    },\n    // Update discard pile\n    discard: [...gameState.discard, ...cardsToDiscard]\n  };\n\n  log(`🆕 Runde ${newState.round} startet! Spieler ${roundWinner} beginnt. (Rundenstand: P1 ${newState.roundsWon[1]} - P2 ${newState.roundsWon[2]})`);\n  log(`🃏 Beide Spieler erhalten 5 neue Handkarten.`);\n\n  return newState;\n}\n\nexport function useGameActions(\n  gameState: GameState,\n  setGameState: React.Dispatch<React.SetStateAction<GameState>>,\n  log: (msg: string) => void,\n  afterQueueResolved?: () => void\n) {\n  // Visual effects context (spawn helpers)\n  // Use safe hook variant which returns null when no provider is present\n  const visualEffects = useVisualEffectsSafe();\n  // Helper: spawn lightweight UI visuals via window hooks (prototype only)\n  const spawnCardVisual = useCallback((card: any, stateOverride?: GameState) => {\n    try {\n      if (!card) return;\n      console.debug('[GameActions] spawnCardVisual called', { uid: card.uid ?? card.id, name: card.name });\n      const uid = card.uid ?? card.id;\n      // prefer VisualEffects context if available\n      const effectiveState = stateOverride || gameState;\n      if (visualEffects) {\n        // Prefer authoritative board-based slot centering (gov slots) using effectiveState\n        try {\n          let located: { player: number; lane: 'aussen' | 'innen'; index: number } | null = null;\n          for (const p of [1, 2] as const) {\n            const aussen = effectiveState.board[p].aussen || [];\n            const idxA = aussen.findIndex((c: any) => (c.uid ?? c.id) === (card.uid ?? card.id));\n            if (idxA >= 0) { located = { player: p, lane: 'aussen', index: idxA }; break; }\n            const innen = effectiveState.board[p].innen || [];\n            const idxI = innen.findIndex((c: any) => (c.uid ?? c.id) === (card.uid ?? card.id));\n            if (idxI >= 0) { located = { player: p, lane: 'innen', index: idxI }; break; }\n          }\n\n          if (located && located.lane === 'aussen') {\n            const rects = getGovernmentRects(located.player === 1 ? 'player' : 'opponent');\n            const slot = rects[located.index] || rects[0] || { x: 960 - 128, y: 540 - 128, w: 256, h: 256 };\n            const cx_slot = slot.x + slot.w / 2;\n            const cy_slot = slot.y + slot.h / 2;\n            visualEffects.spawnParticles(cx_slot, cy_slot, 18);\n            visualEffects.spawnPop(card.uid ?? card.id);\n            console.debug('[GameActions] spawnCardVisual particles/pop (gov slot)', { uid: card.uid ?? card.id, cx: cx_slot, cy: cy_slot, slot });\n\n            const canvas = document.querySelector('canvas');\n            if (canvas) {\n              const rect = canvas.getBoundingClientRect();\n              const { scale, offsetX, offsetY } = getUiTransform(canvas.width, canvas.height);\n              // Apply offset first, then scale (matches canvas transform order)\n              const screenCx = rect.left + (cx_slot + offsetX) * scale;\n              const screenCy = rect.top  + (cy_slot + offsetY) * scale;\n              // Use dedicated government slot GIF provided by user\n              // Use UI-based overlay spawner so we always align to canvas-derived\n              // pulsing slot fields exactly (handles scale+offset internally).\n              visualEffects.spawnGifOverlayUi({ id: card.uid ?? card.id, cx: cx_slot, cy: cy_slot, w: 256, h: 256, src: slotGovGif, duration: 700 });\n              console.debug('[GameActions] spawnCardVisual spawnGifOverlay (gov slot)', { uid: card.uid ?? card.id, screenCx, screenCy, src: slotGovGif });\n            }\n\n            try { visualEffects.playAnimsRef.current.push({ uid: card.uid ?? card.id, started: performance.now(), duration: 420 }); } catch (e) {}\n            return;\n          }\n        } catch (e) {\n          console.debug('[GameActions] gov-slot centering failed, falling back', e);\n        }\n        // attempt to find a row_slot zone center via debug snapshot (avoid hand slots)\n        const zones = (window as any).__politicardDebug?.clickZones || [];\n        const zone = zones.find((z: any) => z.data && z.data.type === 'row_slot' && z.data.card && ((z.data.card.uid ?? z.data.card.id) === uid));\n        const cx = zone ? zone.x + (zone.w || 256) / 2 : 960;\n        const cy = zone ? zone.y + (zone.h || 256) / 2 : 540;\n        visualEffects.spawnParticles(cx, cy, 18);\n        visualEffects.spawnPop(uid);\n        console.debug('[GameActions] spawnCardVisual particles/pop (fallback)', { uid, cx, cy, zone });\n        // Add play animation entry so canvas will fade-in the card itself\n        try {\n          visualEffects.playAnimsRef.current.push({ uid, started: performance.now(), duration: 420 });\n          console.debug('[GameActions] spawnCardVisual playAnimsRef push', uid);\n        } catch (e) { console.debug('[GameActions] spawnCardVisual playAnimsRef push failed', e); }\n        return;\n      }\n      // fallback to old window-based prototype\n      const zones = (window as any).__politicardDebug?.clickZones || [];\n      const zone = zones.find((z: any) => z.data && z.data.card && ((z.data.card.uid ?? z.data.card.id) === uid));\n      const cx = zone ? zone.x + (zone.w || 256) / 2 : 960;\n      const cy = zone ? zone.y + (zone.h || 256) / 2 : 540;\n      (window as any).__pc_particles = (window as any).__pc_particles || [];\n      for (let i = 0; i < 18; i++) {\n        (window as any).__pc_particles.push({ start: performance.now(), life: 600 + Math.random() * 400, x: cx + (Math.random() - 0.5) * 40, y: cy + (Math.random() - 0.5) * 40, vx: (Math.random() - 0.5) * 6, vy: -Math.random() * 6, size: 3 + Math.random() * 5, color: ['#ffd166', '#ff6b6b', '#4ade80'][Math.floor(Math.random() * 3)], gravity: 0.12 });\n      }\n      (window as any).__pc_pops = (window as any).__pc_pops || [];\n      (window as any).__pc_pops.push({ uid, started: performance.now(), duration: 420 });\n      // Fallback: add play anim entry to global when VisualEffects not available\n      (window as any).__pc_play_anims = (window as any).__pc_play_anims || [];\n      (window as any).__pc_play_anims.push({ uid, started: performance.now(), duration: 420 });\n      // Also attempt to use provider fallback on window if available\n      try {\n        const wv = (window as any).__pc_visual_effects;\n        if (wv && typeof wv.spawnGifOverlay === 'function') {\n          // Compute screen coords based on canvas if possible\n          const canvas = document.querySelector('canvas');\n          if (canvas) {\n            const rect = canvas.getBoundingClientRect();\n            const ui = (window as any).__politicardDebug?.uiTransform || { scale: 1, offsetX: 0, offsetY: 0 };\n            const screenCx = rect.left + (cx + ui.offsetX) * ui.scale;\n            const screenCy = rect.top  + (cy + ui.offsetY) * ui.scale;\n            try {\n              if (typeof wv.spawnGifOverlayUi === 'function') {\n                // pass canvas-space coords so provider will align to UI\n                try { wv.spawnGifOverlayUi({ id: uid, cx: cx, cy: cy, w: 256, h: 256, src: slotGovGif, duration: 700 }); console.debug('[GameActions] fallback window.__pc_visual_effects.spawnGifOverlayUi', uid); } catch (e) { console.debug('[GameActions] fallback spawnGifOverlayUi failed', e); }\n              } else {\n                wv.spawnGifOverlay({ id: uid, cx: screenCx, cy: screenCy, w: 256 * ui.scale, h: 256 * ui.scale, src: slotGovGif, duration: 700 });\n                console.debug('[GameActions] fallback window.__pc_visual_effects.spawnGifOverlay', uid);\n              }\n            } catch (e) { console.debug('[GameActions] fallback spawnGifOverlay failed', e); }\n          }\n        }\n      } catch (e) {}\n    } catch (e) {\n      // swallow - non-critical\n    }\n  }, [visualEffects, gameState]);\n  // Guard against duplicate concurrent playCard calls for the same card UID\n  const playingUidRef = useRef<Set<number>>(new Set());\n  // === Corruption Steal helper refs ===\n  const pendingTargetRef = useRef<number | null>(null);\n\n  // Listen for target selection & dice result (global events)\n  useEffect(() => {\n    const handlePickTarget = (ev: any) => {\n      const uid = ev.detail?.targetUid as number | undefined;\n      const player = ev.detail?.player as Player | undefined;\n      if (!uid || !player) return;\n      // Register chosen target but DO NOT roll yet. The roll must be requested explicitly\n      // (from modal or UI) to keep UX locked until player confirms.\n      pendingTargetRef.current = uid;\n      try { log(`🎯 Corruption: Ziel gewählt (uid=${uid})`); } catch (e) {}\n    };\n\n    // Listener: when UI/modal requests a corruption roll, perform RNG and trigger visual dice\n    const handleRequestRoll = (ev: any) => {\n      const player = ev.detail?.player as Player | undefined;\n      const targetUid = ev.detail?.targetUid as number | undefined;\n      if (!player || !targetUid) return;\n      // ensure pending target is set\n      pendingTargetRef.current = targetUid;\n      try {\n        const { getGlobalRNG } = require('../services/rng');\n        const rng = getGlobalRNG();\n        const roll = rng.randomInt(6) + 1;\n        // Emit dice animation request for UI. App listens and drives Dice3D.rollTo(face).\n        try { window.dispatchEvent(new CustomEvent('pc:dice_roll', { detail: { face: roll, player } })); } catch (e) { logger.dbg('pc:dice_roll dispatch failed', e); }\n        // Also enqueue a LOG entry so the result will be visible in the log after resolution\n        setGameState(prev => ({ ...prev, _effectQueue: [...(prev._effectQueue || []), { type: 'LOG', msg: `🎲 W6 gewürfelt (vorläufig): ${roll}` } as any] }));\n        // Actual resolution will occur when the Dice3D animation completes and emits pc:dice_result\n      } catch (e) {\n        logger.dbg('corruption request roll error', e);\n      }\n    };\n    const handleDiceResult = (ev: any) => {\n      const roll = ev.detail?.roll as number | undefined;\n      const player = ev.detail?.player as Player | undefined;\n      if (!roll || !player || pendingTargetRef.current === null) return;\n      const targetUid = pendingTargetRef.current;\n      pendingTargetRef.current = null;\n\n      // Enqueue resolve event\n      setGameState(prev => {\n        const events: EffectEvent[] = prev._effectQueue || [];\n        events.push({ type: 'CORRUPTION_STEAL_GOV_RESOLVE', player, targetUid, roll } as any);\n        // Process immediately\n        resolveQueue(prev as any, events);\n        if (afterQueueResolved) afterQueueResolved();\n        return { ...prev, _effectQueue: events } as any;\n      });\n    };\n    window.addEventListener('pc:corruption_pick_target', handlePickTarget as EventListener);\n    window.addEventListener('pc:corruption_request_roll', handleRequestRoll as EventListener);\n    window.addEventListener('pc:dice_result', handleDiceResult as EventListener);\n    return () => {\n      window.removeEventListener('pc:corruption_pick_target', handlePickTarget as EventListener);\n      window.removeEventListener('pc:corruption_request_roll', handleRequestRoll as EventListener);\n      window.removeEventListener('pc:dice_result', handleDiceResult as EventListener);\n    };\n  }, [setGameState, afterQueueResolved]);\n  const startMatchWithDecks = useCallback((p1DeckEntries: BuilderEntry[], p2DeckEntries: BuilderEntry[]) => {\n    const p1Cards = buildDeckFromEntries(p1DeckEntries);\n    const p2Cards = buildDeckFromEntries(p2DeckEntries);\n\n        // Debug: Log deck composition with detailed tag analysis\n    const p1NgoCarten = p1Cards.filter(c => (c as any).tag === 'NGO');\n    const p1PlatformCards = p1Cards.filter(c => (c as any).tag === 'Plattform');\n    const p1JoschaCards = p1Cards.filter(c => (c as any).effect === 'ngo_boost');\n    const p1PublicCards = p1Cards.filter(c => c.kind === 'spec' && (c as any).type === 'Öffentlichkeitskarte');\n\n    log(`🔍 DECK DEBUG P1: ${p1Cards.length} Karten total`);\n    log(`🧪 P1 Public Cards: ${p1PublicCards.map(c => `${c.name}${(c as any).tag ? `[${(c as any).tag}]` : ''}`).join(', ')}`);\n    log(`🌱 P1 NGO-Karten: ${p1NgoCarten.length > 0 ? p1NgoCarten.map(c => c.name).join(', ') : 'Keine'}`);\n    log(`💻 P1 Plattform-Karten: ${p1PlatformCards.length > 0 ? p1PlatformCards.map(c => c.name).join(', ') : 'Keine'}`);\n    log(`🎯 JOSCHKA FISCHER: ${p1JoschaCards.length > 0 ? '✅ IM DECK' : '❌ NICHT IM DECK'}`);\n\n    const d1 = [...p1Cards];\n    const d2 = [...p2Cards];\n    const h1 = d1.splice(0, Math.min(5, d1.length));\n    const h2 = d2.splice(0, Math.min(5, d2.length));\n\n    setGameState(prev => ({\n      ...prev,\n      round: 1,\n      current: 1,\n      passed: { 1: false, 2: false },\n      decks: { 1: d1, 2: d2 },\n      hands: { 1: h1, 2: h2 },\n      board: { 1: { innen: [], aussen: [], sofort: [] }, 2: { innen: [], aussen: [], sofort: [] } },\n      traps: { 1: [], 2: [] },\n      permanentSlots: {\n        1: { government: null, public: null, initiativePermanent: null },\n        2: { government: null, public: null, initiativePermanent: null },\n      },\n      // instantSlot wird nicht mehr verwendet - Sofort-Initiativen gehen in board[player].sofort\n      discard: [],\n      shields: new Set(), // Set<UID>\n      effectFlags: {\n        1: createDefaultEffectFlags(),\n        2: createDefaultEffectFlags()\n      },\n      actionsUsed: { 1: 0, 2: 0 },\n      log: [\n        `Match gestartet. P1 und P2 erhalten je ${h1.length}/${h2.length} Startkarten.`,\n        `🔍 DECK DEBUG P1: ${p1Cards.length} Karten total`,\n        `🧪 P1 Public Cards: ${p1PublicCards.map(c => `${c.name}${(c as any).tag ? `[${(c as any).tag}]` : ''}`).join(', ')}`,\n        `🌱 P1 NGO-Karten: ${p1NgoCarten.length > 0 ? p1NgoCarten.map(c => c.name).join(', ') : 'Keine'}`,\n        `💻 P1 Plattform-Karten: ${p1PlatformCards.length > 0 ? p1PlatformCards.map(c => c.name).join(', ') : 'Keine'}`,\n        `🎯 JOSCHKA FISCHER: ${p1JoschaCards.length > 0 ? '✅ IM DECK' : '❌ NICHT IM DECK'}`,\n        `📋 INITIAL BOARD P1: Regierung=[] | Öffentlichkeit=[]`,\n        `📋 INITIAL BOARD P2: Regierung=[] | Öffentlichkeit=[]`,\n        `🏠 PERMANENT SLOTS: Alle leer`\n      ],\n      activeRefresh: { 1: 0, 2: 0 },\n      // preserve any aiEnabled flags set before calling this\n      aiEnabled: prev.aiEnabled || { 1: false, 2: false }\n    }));\n  }, [gameState, setGameState, log]);\n\n  const startMatchVsAI = useCallback((p1DeckEntries: BuilderEntry[], presetKey: keyof typeof PRESET_DECKS = 'AUTORITAERER_REALIST') => {\n    const p2DeckEntries = PRESET_DECKS[presetKey] as BuilderEntry[];\n    // Enable AI for P2 first so nextTurn/auto-run sees the flag immediately\n    setGameState(prev => ({ ...prev, aiEnabled: { ...(prev.aiEnabled || { 1: false, 2: false }), 2: true } }));\n    log('🔧 AI aktiviert für Spieler 2');\n    startMatchWithDecks(p1DeckEntries, p2DeckEntries);\n  }, [startMatchWithDecks]);\n\n  const playCard = useCallback((player: Player, handIndex: number, lane?: 'innen' | 'aussen') => {\n    logger.info(`playCard START P${player} idx=${handIndex}`);\n    setGameState(prev => {\n      // Test-only baseline fix – ensures AP=5 at game start inside test runner\n      ensureTestBaselineAP(prev);\n\n      // Validate input parameters\n      if (prev.current !== player) {\n        log(`❌ ERROR: Not player turn - Current: ${prev.current}, Attempted: ${player}`);\n        logger.warn(`playCard abort: wrong turn`);\n        return prev;\n      }\n\n      const hand = prev.hands[player];\n      if (handIndex < 0 || handIndex >= hand.length) {\n        log(`❌ ERROR: Invalid hand index - Index: ${handIndex}, Hand length: ${hand.length}`);\n        return prev;\n      }\n\n      // Debug: Log current hand contents with detailed tag info\n      log(`🔍 HAND DEBUG P${player}: ${hand.map((c, i) => `${i}:${c.name}${(c as any).tag ? `[${(c as any).tag}]` : ''}`).join(', ')}`);\n      const ngoCards = hand.filter(c => (c as any).tag === 'NGO');\n      const platformCards = hand.filter(c => (c as any).tag === 'Plattform');\n      if (ngoCards.length > 0) {\n        log(`🌱 NGO-Karten in Hand P${player}: ${ngoCards.map(c => c.name).join(', ')}`);\n      }\n      if (platformCards.length > 0) {\n        log(`💻 Plattform-Karten in Hand P${player}: ${platformCards.map(c => c.name).join(', ')}`);\n      }\n\n      const selectedCard = hand[handIndex];\n      if (!canPlayCard(prev, player, selectedCard)) {\n        log('🚫 Kann Karte nicht spielen (keine AP verfügbar).');\n        return prev;\n      }\n\n      const { cost } = getNetApCost(prev, player, selectedCard);\n      const prevAp = prev.actionPoints[player];\n\n      const newState = { ...prev };\n\n      // Simplified AP system: All cards cost exactly 1 AP\n      newState.actionPoints[player] = Math.max(0, newState.actionPoints[player] - cost);\n      log(`💳 Kosten verbucht: AP ${prevAp}→${newState.actionPoints[player]}`);\n\n      // Flags KONSUMIEREN (einheitlich, NUR HIER!)\n      ensureFlags(newState, player);\n      const ef = newState.effectFlags[player];\n\n      // Simplified AP system: No refunds or discounts\n      // All cards cost exactly 1 AP\n\n      // Remove card from hand\n      const newHand = [...newState.hands[player]];\n      const [playedCard] = newHand.splice(handIndex, 1);\n      newState.hands = { ...newState.hands, [player]: newHand };\n\n      // Prevent double-playing the same UID concurrently\n      if ((playedCard as any).uid) {\n        if (playingUidRef.current.has((playedCard as any).uid)) {\n          log(`⚠️ Duplicate play prevented for UID ${(playedCard as any).uid}`);\n          return prev;\n        }\n        playingUidRef.current.add((playedCard as any).uid);\n      }\n\n      // 🔧 CLUSTER 3 DEBUG: Zeige jede gespielte Karte\n      log(`🔧 CLUSTER 3 GLOBAL DEBUG: P${player} spielt ${(playedCard as any).name} (${playedCard.kind}) - Type: ${(playedCard as any).type || 'KEIN TYPE'}`);\n\n      // 🔧 CLUSTER 3 DEBUG: Zeige aktuelles Board\n      const currentBoard = newState.board[player];\n      const publicCardsOnBoard = currentBoard.innen.filter(card => card.kind === 'spec');\n      log(`🔧 CLUSTER 3 GLOBAL DEBUG: Öffentlichkeitskarten auf dem Feld: ${publicCardsOnBoard.map(c => (c as any).name).join(', ')}`);\n\n      // Jennifer Doudna check removed - not needed for current game logic\n\n      // Handle different card types\n      if (playedCard.kind === 'pol') {\n        const polCard = playedCard as any;\n        const targetLane = lane || (polCard.tag === 'Staatsoberhaupt' || polCard.tag === 'Regierungschef' || polCard.tag === 'Diplomat' ? 'aussen' : 'innen');\n\n        if (newState.board[player][targetLane].length >= 5) {\n          log(`❌ ERROR: Lane full - Lane: ${targetLane}, Current: ${newState.board[player][targetLane].length}/5`);\n          return prev;\n        }\n\n        // Add to board (immutable clone to avoid accidental double references)\n        const laneArray = [...newState.board[player][targetLane], playedCard];\n        const playerBoardCloned = { ...newState.board[player], [targetLane]: laneArray } as any;\n        newState.board = { ...newState.board, [player]: playerBoardCloned } as any;\n\n        // VISUAL: spawn GIF overlay centered over the government slot icon when placing a government card\n        try {\n          if (targetLane === 'aussen') {\n            const rects = getGovernmentRects(player === 1 ? 'player' : 'opponent');\n            const slotIndex = newState.board[player].aussen.length - 1;\n            const slotRect = rects[slotIndex] || rects[0] || { x: 960 - 128, y: 540 - 128, w: 256, h: 256 };\n            const cx = slotRect.x + slotRect.w / 2;\n            const cy = slotRect.y + slotRect.h / 2;\n\n            // particles/pop in canvas coords\n            try { visualEffects?.spawnParticles(cx, cy, 18); } catch (e) {}\n            try { visualEffects?.spawnPop(playedCard.uid ?? playedCard.id); } catch (e) {}\n\n            // compute screen coords and spawn 300x300 overlay\n            const canvas = document.querySelector('canvas');\n            if (canvas) {\n              // Prefer reliable canvas spritesheet animation directly on the target slot\n              try {\n                const key = `${player}.${'aussen'}.${slotIndex}`;\n                const trig = (window as any).__pc_triggerGovAnim || (window as any).pc_triggerGovAnim;\n                if (typeof trig === 'function') trig(key);\n              } catch (e) {}\n              // Only fade-in anim\n              try { visualEffects?.playAnimsRef?.current?.push({ uid: playedCard.uid ?? playedCard.id, started: performance.now(), duration: 420 }); } catch (e) {}\n            }\n          }\n        } catch (e) {\n          console.debug('[GameActions] GOV overlay failed', e);\n        }\n        log(`🃏 Player ${player}: ${playedCard.name} gespielt in ${targetLane === 'aussen' ? 'Regierung' : 'Öffentlichkeit'}`);\n\n        // 3) Nachdem die Karte gelegt wurde: gegnerische Traps prüfen\n        applyTrapsOnCardPlayed(\n          newState,\n          player,\n          playedCard,\n          (event) => {\n            if (!newState._effectQueue) newState._effectQueue = [];\n            newState._effectQueue.push(event);\n          },\n          log\n        );\n\n        // 👉 Erst JETZT Auren anwenden (damit +2 Basis erhalten bleibt)\n        applyAurasForPlayer(newState, player, log);\n\n        // 6) Karteneffekte enqueuen + Queue auflösen\n        triggerCardEffects(newState, player, playedCard);\n        // UI visual: particle burst + pop scale for played card (prototype hook)\n        try { spawnCardVisual(playedCard, newState); } catch (e) {}\n        // Migration Helper verwenden\n        migrateLegacyQueue(newState);\n        // Nur noch _effectQueue verwenden\n        if (newState._effectQueue && newState._effectQueue.length > 0) {\n          try { log(`DEBUG: about to resolve queue (pol play) -> ${JSON.stringify((newState._effectQueue as any).map((e:any)=>({type:e.type, amount:e.amount, msg:e.msg})).slice(0,50))}`); } catch(e) {}\n          log(`DEBUG AP before resolve (pol play): P1=${newState.actionPoints[1]} P2=${newState.actionPoints[2]}`);\n          resolveQueue(newState, newState._effectQueue);\n          newState._effectQueue = [];\n          // Nach Queue-Auflösung: Hand-Arrays immutabel neu zuweisen\n          afterQueueResolved?.();\n          log(`DEBUG AP after resolve (pol play): P1=${newState.actionPoints[1]} P2=${newState.actionPoints[2]}`);\n        }\n\n        // Release playing UID after queue resolved\n        if ((playedCard as any).uid) playingUidRef.current.delete((playedCard as any).uid);\n\n        // Check for trap triggers\n        applyTrapsOnCardPlayed(\n          newState,\n          player,\n          playedCard,\n          (e) => (newState._effectQueue ??= []).push(e),\n          (m) => (newState._effectQueue ??= []).push({ type: 'LOG', msg: m })\n        );\n\n        // 🔥 ROMAN ABRAMOVICH EFFEKT: Wenn Regierungskarte mit Einfluss ≤5 gespielt wird\n        if (playedCard.kind === 'pol' && (playedCard as any).influence <= 5) {\n          const opponent = player === 1 ? 2 : 1;\n          const opponentBoard = newState.board[opponent];\n          const romanAbramovich = opponentBoard.innen.find(card =>\n            card.kind === 'spec' && (card as any).name === 'Roman Abramovich'\n          );\n\n          if (romanAbramovich) {\n            // Ziehe eine Karte für den Gegner\n            if (newState.decks[opponent].length > 0) {\n              const drawnCard = newState.decks[opponent].shift();\n              if (drawnCard) {\n                newState.hands[opponent].push(drawnCard);\n                log(`🔥 ROMAN ABRAMOVICH EFFEKT: P${opponent} zieht 1 Karte (${drawnCard.name}) - Regierungskarte mit Einfluss ≤5 gespielt`);\n              }\n            }\n          }\n        }\n\n\n\n\n\n\n\n        // 🔍 BOARD DEBUG: Zeige aktuelles Board nach dem Spielen\n        const currentBoard = newState.board[player];\n        const regierungKarten = currentBoard.aussen.map(c => `${c.name}[${c.kind === 'pol' ? (c as any).influence + 'I' : 'S'}]`);\n        const öffentlichkeitKarten = currentBoard.innen.map(c => `${c.name}[${c.kind === 'spec' ? (c as any).tag || 'S' : 'P'}]`);\n        log(`📋 P${player} BOARD: Regierung=[${regierungKarten.join(', ')}] | Öffentlichkeit=[${öffentlichkeitKarten.join(', ')}]`);\n\n                // 🔥 JOSCHKA FISCHER NGO-EFFEKT: Jetzt als kontinuierlicher Aura-Effekt in sumRowWithAuras implementiert\n        log(`🔍 DEBUG: Karte gespielt - Name: ${playedCard.name}, Tag: ${(playedCard as any).tag || 'Kein Tag'}, Lane: ${targetLane}, Kind: ${playedCard.kind}`);\n\n        if ((playedCard as any).tag === 'NGO') {\n          log(`🔍 NGO-Karte gespielt: ${playedCard.name} [NGO] - Kontinuierliche Aura-Effekte werden bei Rundenauswertung berechnet`);\n\n          // 🎯 SOFORTIGE SYNERGIE-PRÜFUNG: Joschka Fischer + NGO\n          const joschaFischer = currentBoard.aussen.find(card =>\n            card.kind === 'pol' && (card as any).effect === 'ngo_boost'\n          );\n\n          if (joschaFischer) {\n            log(`🔥🔥🔥 SYNERGIE AKTIVIERT! 🔥🔥🔥 Joschka Fischer + ${playedCard.name}[NGO] → +1 Einfluss bei Rundenauswertung`);\n          }\n        }\n\n      } else if (playedCard.kind === 'spec') {\n        const specCard = playedCard as any;\n        const typeStr = String(specCard.type || '').toLowerCase();\n        const isInitiative = /initiative/.test(typeStr); // matcht \"Initiative\", \"Sofort-Initiative\", etc.\n\n                  // 1) Falls es eine \"Systemrelevant\" ist (sofortiger Buff auf letzte eigene Regierungskarte)\n        if (playedCard.kind === 'spec' && (playedCard as any).type?.toLowerCase().includes('systemrelevant')) {\n          const ownBoard = newState.board[player];\n          const candidates = [...ownBoard.aussen, ...ownBoard.innen].filter(c => c.kind === 'pol') as PoliticianCard[];\n          const target = candidates[candidates.length - 1]; // letzte eigene Regierungskarte\n          if (target) {\n            (target as any).protected = true;\n            log(`🛡️ ${target.name} erhält einmaligen Schutz.`);\n          } else {\n            log('🛈 Systemrelevant: Keine eigene Regierungskarte im Spiel – Effekt verpufft.');\n          }\n          // danach die Spezialkarte normal entsorgen\n          newState.discard.push(playedCard);\n          return newState;\n        }\n\n        // 1) Dauerhaft-Initiative (Ongoing)\n        if (typeStr.includes('dauerhaft')) {\n          // Slot-Mapping: Dauerhaft-Initiativen → map to permanentSlots.government or .public\n          // Prefer explicit metadata on the card, fallback to tag-based heuristic, default to 'government'\n          const preferredSlot: 'government' | 'public' = (specCard.permanentSlot as 'government' | 'public') || ((specCard.tags || []).includes('Public') ? 'public' : 'government');\n          if (!newState.permanentSlots[player][preferredSlot]) {\n            // ensure card is stored as a shallow clone to avoid accidental shared references\n            newState.permanentSlots[player] = { ...newState.permanentSlots[player], [preferredSlot]: { ...playedCard } } as any;\n            log(`P${player} spielt ${playedCard.name} als Dauerhafte Initiative (Slot: ${preferredSlot})`);\n          } else {\n            log(`⚠️ WARN: Slot occupied - Slot ${preferredSlot} already has ${newState.permanentSlots[player][preferredSlot]?.name}`);\n            // Return the card to hand and refund AP as graceful fallback\n            newState.hands[player] = [...newState.hands[player], playedCard];\n            newState.actionPoints[player] += cost;\n            return newState;\n          }\n\n          // 6) Karteneffekte enqueuen + Queue auflösen\n          triggerCardEffects(newState, player, playedCard);\n          // Migration Helper verwenden\n          migrateLegacyQueue(newState);\n          // Nur noch _effectQueue verwenden\n          if (newState._effectQueue && newState._effectQueue.length > 0) {\n            try { log(`DEBUG: about to resolve queue (spec ongoing) -> ${JSON.stringify((newState._effectQueue as any).map((e:any)=>({type:e.type, amount:e.amount, msg:e.msg})).slice(0,50))}`); } catch(e) {}\n            log(`DEBUG AP before resolve (spec ongoing): P1=${newState.actionPoints[1]} P2=${newState.actionPoints[2]}`);\n            resolveQueue(newState, newState._effectQueue);\n            newState._effectQueue = [];\n            // Nach Queue-Auflösung: Hand-Arrays immutabel neu zuweisen\n            afterQueueResolved?.();\n            log(`DEBUG AP after resolve (spec ongoing): P1=${newState.actionPoints[1]} P2=${newState.actionPoints[2]}`);\n          }\n\n          // Check for trap triggers\n          applyTrapsOnCardPlayed(\n            newState,\n            player,\n            playedCard,\n            (e) => (newState._effectQueue ??= []).push(e),\n            (m) => (newState._effectQueue ??= []).push({ type: 'LOG', msg: m })\n          );\n\n          return newState;\n        }\n\n        // 2) Sofort-/Sofort-Initiativen (Instant)\n        if (isInitiative) {\n          if (!specCard.effectKey) {\n            log(`❌ Initiative ohne effectKey: ${specCard.name}`);\n          } else {\n            log(`🧩 INIT: ${specCard.name} [${String(specCard.effectKey)}] gespielt`);\n          }\n\n          // 🔧 NEU: Sofort-Initiativen werden in das sofort Array gelegt statt sofort aktiviert\n          if (typeStr.includes('sofort')) {\n            // Prüfe ob bereits eine Sofort-Initiative im Slot liegt\n            if (newState.board[player].sofort.length > 0) {\n              log(`❌ ERROR: Sofort-Initiative-Slot bereits besetzt - ${newState.board[player].sofort[0]?.name} muss erst aktiviert werden`);\n              // Karte zurück in die Hand\n              newState.hands[player] = [...newState.hands[player], playedCard];\n              // AP zurückgeben\n              newState.actionPoints[player] += cost;\n              // AP zurückgegeben, keine Aktion rückgängig zu machen\n              return newState;\n            }\n\n            // Sofort-Initiative in das sofort Array legen\n            newState.board[player].sofort = [playedCard];\n            log(`🎯 P${player} legt ${playedCard.name} in Sofort-Initiative-Slot (kann später aktiviert werden)`);\n\n            // Sofort-Initiativen: auf Board.sofort legen (nicht direkt entsorgen)\n            if (!newState._effectQueue) newState._effectQueue = [];\n            newState._effectQueue.push({ type: 'LOG', msg: `🔔 Sofort-Initiative bereit: ${playedCard.name} (zum Aktivieren anklicken oder Taste 'A')` });\n            return newState;\n          }\n\n          // Dauerhaft-Initiativen werden weiterhin sofort aktiviert\n          // Initiative in den Ablagestapel\n          newState.discard = [...newState.discard, playedCard];\n          log(`P${player} spielt Initiative: ${playedCard.name}`);\n\n                     // 6) Karteneffekte enqueuen + Queue auflösen\n          console.log('🔥 ABOUT TO TRIGGER CARD EFFECTS (INITIATIVE):', playedCard.name, 'effectKey:', (playedCard as any).effectKey);\n           triggerCardEffects(newState, player, playedCard);\n           // Migration Helper verwenden\n           migrateLegacyQueue(newState);\n           // Nur noch _effectQueue verwenden\n         if (newState._effectQueue && newState._effectQueue.length > 0) {\n           resolveQueue(newState, newState._effectQueue);\n           newState._effectQueue = [];\n           // Nach Queue-Auflösung: Hand-Arrays immutabel neu zuweisen\n           afterQueueResolved?.();\n         }\n\n           // Check for trap triggers\n           applyTrapsOnCardPlayed(\n             newState,\n             player,\n             playedCard,\n             (e) => (newState._effectQueue ??= []).push(e),\n             (m) => (newState._effectQueue ??= []).push({ type: 'LOG', msg: m })\n           );\n\n           // 🔥 CLUSTER 3: Auren-Flags neu berechnen (nach Kartenspielen)\n          recomputeAuraFlags(newState);\n\n          // 🔥 CLUSTER 3: Ai Weiwei Bonus wird bei Aktivierung angewendet (nicht beim Spielen)\n\n          // 🔥 PASSIVE EFFEKTE NACH INITIATIVE: Mark Zuckerberg & Sam Altman\n          // Diese Effekte werden jetzt über INITIATIVE_ACTIVATED Event + Board-Check gehandhabt\n          // Keine direkten Flag-Mutationen mehr - alles über Events\n\n\n          return newState;\n        }\n\n        // 3) Öffentlichkeit (Public)\n        if (\n          typeStr === 'öffentlichkeitskarte' ||\n          typeStr === 'oeffentlichkeitskarte' ||\n          typeStr === 'öffentlichkeit' ||\n          typeStr === 'public'\n        ) {\n          if (newState.board[player].innen.length < 5) {\n            const innenArray = [...newState.board[player].innen, playedCard];\n            const playerBoardCloned = { ...newState.board[player], innen: innenArray } as any;\n            newState.board = { ...newState.board, [player]: playerBoardCloned } as any;\n            log(`P${player} spielt ${playedCard.name} in Öffentlichkeit`);\n\n            // Sofort Auren prüfen (z.B. JF +1, wenn JF schon liegt)\n            applyAurasForPlayer(newState, player, log);\n\n                         // 6) Karteneffekte enqueuen + Queue auflösen\n             triggerCardEffects(newState, player, playedCard);\n             // Migration Helper verwenden\n             migrateLegacyQueue(newState);\n         if (newState._effectQueue && newState._effectQueue.length > 0) {\n           resolveQueue(newState, newState._effectQueue);\n           newState._effectQueue = [];\n           // Nach Queue-Auflösung: Hand-Arrays immutabel neu zuweisen\n           afterQueueResolved?.();\n         }\n\n             // Check for trap triggers\n             applyTrapsOnCardPlayed(\n               newState,\n               player,\n               playedCard,\n               (e) => (newState._effectQueue ??= []).push(e),\n               (m) => (newState._effectQueue ??= []).push({ type: 'LOG', msg: m })\n             );\n\n\n\n            // 🔥 PUBLIC CARD EFFECTS - Passive effects when played\n\n            // Helper function to draw a card for the player\n            const drawCardForPlayer = (cardName: string) => {\n              if (newState.decks[player].length > 0) {\n                const drawnCard = newState.decks[player].shift();\n                if (drawnCard) {\n                  newState.hands[player].push(drawnCard);\n                  log(`🔥 ${cardName.toUpperCase()} EFFEKT: +1 Karte gezogen (${drawnCard.name})`);\n                  return true;\n                }\n              }\n              return false;\n            };\n\n            if (specCard.name === 'Elon Musk') {\n              // Effect: \"Ziehe 1 Karte. Deine erste Initiative pro Runde kostet 1 Aktionspunkt weniger.\"\n              drawCardForPlayer('Elon Musk');\n              // 🔥 QUEUE-SYSTEM: Erste Initiative pro Runde → Refund wird über triggerCardEffects gehandhabt\n\n            } else if (specCard.name === 'Bill Gates') {\n              // Effect: \"Ziehe 1 Karte. Deine nächste Initiative kostet 1 Aktionspunkt weniger.\"\n              drawCardForPlayer('Bill Gates');\n              // 🔥 QUEUE-SYSTEM: Nächste Initiative → Refund wird über triggerCardEffects gehandhabt\n\n            } else if (specCard.name === 'Jeff Bezos') {\n              // Effect: \"Ziehe 1 Karte beim Ausspielen. Wenn eine Plattform liegt: +1 Aktionspunkt.\"\n              drawCardForPlayer('Jeff Bezos');\n              const hasPlatform = newState.board[player].innen.some(c =>\n                c.kind === 'spec' && (c as any).tag === 'Plattform'\n              );\n              if (hasPlatform) {\n                newState.actionPoints[player] += 1;\n                log(`🔥 JEFF BEZOS: +1 AP durch Plattform-Synergie! (${newState.actionPoints[player] - 1} → ${newState.actionPoints[player]})`);\n              }\n\n            } else if (specCard.name === 'Warren Buffett') {\n              // Effect: \"Ziehe 1 Karte. Bei einer Wirtschafts-Initiative: +1 Effekt.\"\n              drawCardForPlayer('Warren Buffett');\n              // TODO: Implement \"Wirtschafts-Initiative +1 Effect\" logic\n              log(`📊 WARREN BUFFETT: Bei Wirtschafts-Initiativen +1 Effekt! (TODO: Implementierung)`);\n\n            } else if (specCard.name === 'Gautam Adani') {\n              // Effect: \"Ziehe 1 Karte. Bei einer Infrastruktur-Initiative: +1 Effekt.\"\n              drawCardForPlayer('Gautam Adani');\n              // TODO: Implement \"Infrastruktur-Initiative +1 Effect\" logic\n              log(`📊 GAUTAM ADANI: Bei Infrastruktur-Initiativen +1 Effekt! (TODO: Implementierung)`);\n\n            } else if (specCard.name === 'Zhang Yiming') {\n              // Effect: \"Ziehe 1 Karte. Bei Medien auf dem Feld: -1 Aktionspunkt auf deine nächste Initiative.\"\n              drawCardForPlayer('Zhang Yiming');\n              const hasMedia = newState.board[player].innen.some(c =>\n                c.kind === 'spec' && (c as any).tag === 'Medien'\n              );\n              if (hasMedia) {\n                // TODO: Implement \"nächste Initiative -1 AP\" logic\n                log(`🔥 ZHANG YIMING: Nächste Initiative kostet 1 AP weniger durch Medien-Synergie! (TODO: Implementierung)`);\n              }\n\n            } else if (specCard.name === 'George Soros') {\n              // Effect: \"+1 Aktionspunkt wenn der Gegner eine autoritäre Regierungskarte hat.\"\n              const opponent = player === 1 ? 2 : 1;\n              const hasAuthoritarianCard = newState.board[opponent].aussen.some(card => {\n                const polCard = card as any;\n                return polCard.tag === 'Staatsoberhaupt' && polCard.influence >= 8; // High influence leaders\n              });\n\n              if (hasAuthoritarianCard) {\n                newState.actionPoints[player] += 1;\n                log(`🔥 GEORGE SOROS EFFEKT: +1 AP durch autoritäre Regierung des Gegners!`);\n                log(`📊 SOROS: Aktionspunkte ${newState.actionPoints[player] - 1} → ${newState.actionPoints[player]}`);\n              } else {\n                log(`💭 George Soros: Keine autoritären Karten beim Gegner - Effekt nicht ausgelöst`);\n              }\n            }\n\n            // 🔗 NGO-Synergie: Wenn eine NGO gelegt wird und Joschka Fischer liegt, erhält P${player} +1 Einfluss (Rundenauswertung)\n            if ((specCard as any).tag === 'NGO') {\n              const hasJoschka = newState.board[player].aussen.some(c => c.kind === 'pol' && (c as any).name === 'Joschka Fischer' && !(c as any).deactivated);\n              if (hasJoschka) {\n                log(`🔥🔥🔥 SYNERGIE AKTIVIERT! 🔥🔥🔥 Joschka Fischer + ${playedCard.name}[NGO] → +1 Einfluss bei Rundenauswertung`);\n              }\n            }\n          } else {\n            log(`❌ ERROR: Lane full - Öffentlichkeit ist voll (5/5)`);\n          }\n\n          // Simplified AP system: No refunds\n          return newState;\n        }\n\n                  // 4) Default: Traps/Interventions\n                  // Falls Trap-Karte gelegt wird\n          if (playedCard.kind === 'spec' && (playedCard as any).type?.toLowerCase().includes('trap')) {\n            registerTrap(newState, player, playedCard.key || playedCard.name.toLowerCase().replace(/[- ]/g, '_'));\n            // NICHT sofort checken – sie wartet auf den Gegner\n            return newState;\n          }\n\n        newState.traps[player] = [...newState.traps[player], playedCard];\n        log(`P${player} spielt ${playedCard.name} als ${specCard.type}`);\n\n        // 6) Karteneffekte enqueuen + Queue auflösen\n        console.log('🔥 ABOUT TO TRIGGER CARD EFFECTS:', playedCard.name, 'effectKey:', (playedCard as any).effectKey);\n        triggerCardEffects(newState, player, playedCard);\n        // Migration Helper verwenden\n        migrateLegacyQueue(newState);\n        // Nur noch _effectQueue verwenden\n        if (newState._effectQueue && newState._effectQueue.length > 0) {\n          try { log(`DEBUG: about to resolve queue (spec instant) -> ${JSON.stringify((newState._effectQueue as any).map((e:any)=>({type:e.type, amount:e.amount, msg:e.msg})).slice(0,50))}`); } catch(e) {}\n          log(`DEBUG AP before resolve (spec instant): P1=${newState.actionPoints[1]} P2=${newState.actionPoints[2]}`);\n          resolveQueue(newState, newState._effectQueue);\n          newState._effectQueue = [];\n          // Nach Queue-Auflösung: Hand-Arrays immutabel neu zuweisen\n          afterQueueResolved?.();\n          log(`DEBUG AP after resolve (spec instant): P1=${newState.actionPoints[1]} P2=${newState.actionPoints[2]}`);\n        }\n\n        // Check for trap triggers\n        applyTrapsOnCardPlayed(\n          newState,\n          player,\n          playedCard,\n          (e) => (newState._effectQueue ??= []).push(e),\n          (m) => (newState._effectQueue ??= []).push({ type: 'LOG', msg: m })\n        );\n\n        // Simplified AP system: No refunds\n        return newState;\n      }\n\n      // 6) Karteneffekte enqueuen + Queue auflösen (fallback für unbekannte Kartentypen)\n      triggerCardEffects(newState, player, selectedCard);\n      // Migration Helper verwenden\n      migrateLegacyQueue(newState);\n      // Nur noch _effectQueue verwenden\n        if (newState._effectQueue && newState._effectQueue.length > 0) {\n          try { log(`DEBUG: about to resolve queue (spec public/default) -> ${JSON.stringify((newState._effectQueue as any).map((e:any)=>({type:e.type, amount:e.amount, msg:e.msg})).slice(0,50))}`); } catch(e) {}\n          log(`DEBUG AP before resolve (spec public/default): P1=${newState.actionPoints[1]} P2=${newState.actionPoints[2]}`);\n          resolveQueue(newState, newState._effectQueue);\n          newState._effectQueue = [];\n          // Nach Queue-Auflösung: Hand-Arrays immutabel neu zuweisen\n          afterQueueResolved?.();\n          log(`DEBUG AP after resolve (spec public/default): P1=${newState.actionPoints[1]} P2=${newState.actionPoints[2]}`);\n        }\n\n      // Check for trap triggers\n      applyTrapsOnCardPlayed(\n        newState,\n        player,\n        selectedCard,\n        (e) => (newState._effectQueue ??= []).push(e),\n        (m) => (newState._effectQueue ??= []).push({ type: 'LOG', msg: m })\n      );\n\n      // Simplified AP system: No refunds\n\n      // Kein Aktionenlimit mehr → automatischer Turnwechsel entfällt\n\n\n      return newState;\n    });\n  }, [setGameState, log]);\n\n  const activateInstantInitiative = useCallback((player: Player) => {\n    logger.info(`activateInstantInitiative START P${player}`);\n    setGameState(prev => {\n      if (prev.current !== player) {\n        log(`❌ ERROR: Not player turn - Current: ${prev.current}, Attempted: ${player}`);\n        return prev;\n      }\n\n      const instantCard = prev.board[player].sofort[0];\n      if (!instantCard) {\n        log(`❌ ERROR: No Sofort-Initiative in slot for player ${player}`);\n        return prev;\n      }\n\n      const newState = { ...prev };\n\n      // 1) Normale Karten-Effekte der Sofort-Karte feuern\n      triggerCardEffects(newState, player, instantCard);\n\n      // UI visual: initiative ripple + AP pop (prototype hook)\n      try {\n        const zones = (window as any).__politicardDebug?.clickZones || [];\n        const boardZone = zones.find((z: any) => z.data && z.data.type === 'row_slot');\n        const cx = boardZone ? boardZone.x + (boardZone.w || 256) / 2 : 960;\n        const cy = boardZone ? boardZone.y + (boardZone.h || 256) / 2 : 300;\n        if (visualEffects) {\n          visualEffects.spawnRipple(cx, cy, { radius: 640, showAp: true, apX: cx, apY: cy + 40 });\n          try {\n            const trigI = (window as any).__pc_triggerInstantAnim || (window as any).pc_triggerInstantAnim;\n            if (typeof trigI === 'function') trigI('1.instant.0');\n          } catch (e) {}\n        } else {\n          (window as any).__pc_ripples = (window as any).__pc_ripples || [];\n          (window as any).__pc_ripples.push({ cx, cy, started: performance.now(), duration: 700, radius: 640, showAp: true, apX: cx, apY: cy + 40 });\n        }\n      } catch (e) {}\n\n      // Check for trap triggers\n      applyTrapsOnCardPlayed(\n        newState,\n        player,\n        instantCard,\n        (e) => (newState._effectQueue ??= []).push(e),\n        (m) => (newState._effectQueue ??= []).push({ type: 'LOG', msg: m })\n      );\n\n      // 2) Queue auflösen (BEVOR die Karte entfernt wird)\n      if (newState._effectQueue && newState._effectQueue.length > 0) {\n        resolveQueue(newState, [...newState._effectQueue]);\n        newState._effectQueue = [];\n        // Nach Queue-Auflösung: Hand-Arrays immutabel neu zuweisen\n        afterQueueResolved?.();\n      }\n\n      // 3) Karte NACH Queue-Auflösung in den Ablagestapel\n      const [played] = newState.board[player].sofort.splice(0, 1);\n      newState.discard.push(played);\n\n      // Visual: listen for dice roll event to animate & bind to SKANDALSPIRALE_TRIGGER if present\n      try {\n        const diceHandler = (ev: any) => {\n          try {\n            const face = ev.detail?.face;\n            if (face == null) return;\n            // If last enqueued event was SKANDALSPIRALE_TRIGGER, attach a LOG with the face\n            const last = (newState._effectQueue ?? []).slice(-1)[0];\n            // Emit a LOG event for visibility\n            if (!newState._effectQueue) newState._effectQueue = [];\n            newState._effectQueue.push({ type: 'LOG', msg: `Würfel: ${face}` } as any);\n          } catch (e) {}\n        };\n        window.addEventListener('pc:dice_roll', diceHandler as EventListener);\n        // remove after short timeout to avoid leaking listeners\n        setTimeout(() => window.removeEventListener('pc:dice_roll', diceHandler as EventListener), 2000);\n      } catch (e) {}\n\n      return newState;\n    });\n  }, [setGameState, log]);\n\n  const endTurn = useCallback((reason: 'button_end_turn' | 'auto' = 'button_end_turn') => {\n    logger.info(`endTurn START reason=${reason}`);\n    setGameState((prev): GameState => {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const current = prev.current;\n\n      // 1) Schon im Abschluss? -> Nichts tun (Idempotenz)\n      if (prev.isEndingTurn) {\n        log('🔁 Zugabschluss läuft bereits – warte auf Queue.');\n        return prev;\n      }\n\n      const newState = { ...prev, isEndingTurn: true };\n\n      // 2) Hängen noch Effekte in der Queue? -> Auflösen lassen\n      if (newState._effectQueue && newState._effectQueue.length > 0) {\n        log('⏳ Effekte werden noch aufgelöst – Zugwechsel folgt automatisch.');\n        resolveQueue(newState, [...newState._effectQueue]);\n        newState._effectQueue = [];\n        // Nach Queue-Auflösung: Wenn Flag noch gesetzt, Zug beenden\n        if (newState.isEndingTurn) {\n          return reallyEndTurn(newState, log);\n        }\n        return newState;\n      }\n\n      // 3) Keine Effekte mehr -> sofort beenden\n      return reallyEndTurn(newState, log);\n    });\n  }, [setGameState, log]);\n\n  // Legacy: nextTurn als Alias für endTurn für Kompatibilität\n  const nextTurn = useCallback(() => {\n    logger.info('nextTurn alias called');\n    endTurn('auto');\n  }, [endTurn]);\n\n  // Global listener: handle visual dice results and apply Skandalspirale effects automatically\n  useEffect(() => {\n    const handler = (ev: any) => {\n      const face = ev?.detail?.face;\n      if (typeof face !== 'number') return;\n      setGameState(prev => {\n        try {\n          const pending = (prev as any)._pendingSkandal as { player: Player; ts: number } | undefined;\n          if (!pending) return prev;\n          // only accept recent pending requests (avoid stale triggers)\n          if (Date.now() - (pending.ts || 0) > 8000) {\n            const n = { ...prev } as GameState & any;\n            delete n._pendingSkandal;\n            return n;\n          }\n\n          const newState = { ...prev } as GameState & any;\n          // clear pending marker\n          delete newState._pendingSkandal;\n\n          // Prepare events based on face\n          newState._effectQueue = newState._effectQueue || [];\n          if (face >= 1 && face <= 3) {\n            const loss = face;\n            // enqueue negative buff (debuff) on disadvantaged player's strongest gov\n            newState._effectQueue.push({ type: 'BUFF_STRONGEST_GOV', player: pending.player, amount: -loss } as any);\n            newState._effectQueue.push({ type: 'LOG', msg: `Skandalspirale: Spieler ${pending.player} würfelt ${face} → stärkste Regierung -${loss}.` } as any);\n          } else {\n            newState._effectQueue.push({ type: 'LOG', msg: `Skandalspirale: Spieler ${pending.player} würfelt ${face} → Keine Auswirkung.` } as any);\n          }\n\n          // Resolve immediately so effect is visible without waiting\n          if (newState._effectQueue && newState._effectQueue.length > 0) {\n            try { resolveQueue(newState, [...newState._effectQueue]); } catch (e) { logger.dbg('resolveQueue failed on dice handler', e); }\n            newState._effectQueue = [];\n          }\n\n          // Ensure React sees shallow-copied hands for UI update\n          try {\n            newState.hands = { 1: [...newState.hands[1]], 2: [...newState.hands[2]] };\n          } catch (e) {}\n\n          // run after-queue hook if provided (best-effort)\n          try { if ((window as any).__afterQueueResolved) (window as any).__afterQueueResolved(); } catch (e) {}\n\n          return newState;\n        } catch (err) {\n          logger.dbg('dice handler setGameState error', err);\n          return prev;\n        }\n      });\n    };\n\n    window.addEventListener('pc:dice_roll', handler as EventListener);\n    return () => window.removeEventListener('pc:dice_roll', handler as EventListener);\n  }, [setGameState]);\n\n    const passTurn = useCallback((player: Player) => {\n    logger.info(`passTurn START P${player}`);\n\n    setGameState(prev => {\n      logger.dbg(`passTurn setState current=${prev.current} player=${player}`);\n\n      if (prev.current !== player) {\n        logger.dbg(`passTurn wrong turn current=${prev.current} attempted=${player}`);\n        return prev;\n      }\n\n      const newState = { ...prev, passed: { ...prev.passed, [player]: true } };\n      logger.dbg(`Pass status updated P1=${newState.passed[1]} P2=${newState.passed[2]}`);\n      log(`🚫 Spieler ${player} passt.`);\n\n      // ❗ Kein Nachziehen bei Pass:\n      // Der passierende Spieler kommt in dieser Runde nicht mehr dran.\n      // Die nächste Runde startet ohnehin mit 5 neuen Handkarten.\n\n      // Check if round should end (both players passed)\n      const shouldEndRound = checkRoundEnd(newState);\n      logger.dbg(`Should end round? ${shouldEndRound}`);\n\n      if (shouldEndRound) {\n        log(`🏁 Runde ${newState.round} wird beendet und ausgewertet.`);\n        return resolveRound(newState, log);\n      } else {\n        // Switch turn to other player for their final chance\n        const otherPlayer: Player = player === 1 ? 2 : 1;\n        logger.dbg(`Switching to other player ${otherPlayer} hasPassed=${newState.passed[otherPlayer]}`);\n\n        // Only switch if other player hasn't passed yet\n        if (!newState.passed[otherPlayer]) {\n                     newState.current = otherPlayer;\n           newState.actionPoints = { ...newState.actionPoints, [otherPlayer]: 2 };\n\n          // Apply new start-of-turn hooks\n          applyStartOfTurnFlags(newState, otherPlayer, log);\n\n        // 🔥 CLUSTER 3: Auren-Flags beim Zugstart neu berechnen\n        recomputeAuraFlags(newState);\n\n          log(`⏭️ Spieler ${otherPlayer} hat noch einen letzten Zug.`);\n          logger.dbg(`Turn switched to player ${otherPlayer}`);\n        } else {\n          // Both players have passed now, end round\n          log(`🏁 Runde ${newState.round} wird beendet (beide Spieler haben gepasst).`);\n          return resolveRound(newState, log);\n        }\n      }\n\n      return newState;\n    });\n  }, [setGameState, log]);\n\n  return {\n    startMatchWithDecks,\n    startMatchVsAI,\n    playCard,\n    activateInstantInitiative,\n    passTurn,\n    nextTurn,\n    endTurn,\n  };\n  }\n"],"mappings":"2HAAA,OAASA,WAAW,CAAEC,MAAM,CAAEC,SAAS,KAAQ,OAAO,CAEtD,OAASC,wBAAwB,KAAQ,eAAe,CACxD,OAASC,oBAAoB,CAAEC,+BAA+B,KAAQ,oBAAoB,CAC1F,OAASC,YAAY,KAAQ,kBAAkB,CAC/C,OAASC,sBAAsB,CAAEC,YAAY,CAAEC,WAAW,KAA4C,aAAa,CACnH,OAASC,kBAAkB,KAAQ,kBAAkB,CACrD,OAASC,oBAAoB,KAAQ,qBAAqB,CAC1D,OAASC,YAAY,KAAQ,gBAAgB,CAC7C,OAASC,qBAAqB,KAAQ,2BAA2B,CACjE,OAASC,YAAY,CAAEC,sBAAsB,KAAQ,gBAAgB,CACrE,OAASC,kBAAkB,KAAQ,kBAAkB,CAGrD,OAASC,UAAU,KAAQ,gBAAgB,CAE3C,OAASC,MAAM,KAAQ,iBAAiB,CACxC,OAA2BC,oBAAoB,KAAQ,iCAAiC,CACxF;AACA;AACA,MAAO,CAAAC,UAAU,KAAM,4BAA4B,CACnD,OAASC,cAAc,CAAEC,kBAAkB,KAAQ,cAAc,CAEjE;AACA,KAAM,CAAAC,kBAAkB,CAAIC,KAAU,EAAK,CACzC;AAAA,CACD,CAED;AACA,KAAM,CAAAC,KAAK,CAAIC,CAAS,EAAcA,CAAC,GAAK,CAAC,CAAG,CAAC,CAAG,CAAY,CAEhE;AACA,KAAM,CAAAC,WAAW,CAAGA,CAACC,CAAY,CAAEF,CAAS,GAAK,CAC/C,GAAI,CAACE,CAAC,CAACC,WAAW,CAAE,CACjBD,CAAC,CAASC,WAAW,CAAG,CAAE,CAAC,CAAE1B,wBAAwB,CAAC,CAAC,CAAE,CAAC,CAAEA,wBAAwB,CAAC,CAAE,CAAC,CAC3F,CAAC,IAAM,CACLyB,CAAC,CAACC,WAAW,CAACH,CAAC,CAAC,CAAAI,aAAA,CAAAA,aAAA,IAAQ3B,wBAAwB,CAAC,CAAC,EAAKyB,CAAC,CAACC,WAAW,CAACH,CAAC,CAAC,CAAE,CAC3E,CACF,CAAC,CAED;AACA,KAAM,CAAAK,QAAQ,CAAIC,CAAO,EAAuB,CAC9C,KAAM,CAAAC,GAAG,CAAID,CAAC,CAASC,GAAG,CAC1B,GAAID,CAAC,CAACE,IAAI,GAAK,KAAK,GAAKD,GAAG,GAAK,iBAAiB,EAAIA,GAAG,GAAK,gBAAgB,EAAIA,GAAG,GAAK,UAAU,CAAC,CAAE,MAAO,QAAQ,CACtH,MAAO,OAAO,CAChB,CAAC,CAED,KAAM,CAAAE,iBAAiB,CAAGA,CAACX,KAAgB,CAAEY,MAAc,CAAEC,IAAU,GAAc,CACnF,GAAKA,IAAI,CAASC,WAAW,CAAE,MAAO,MAAK,CAE3C,GAAID,IAAI,CAACH,IAAI,GAAK,KAAK,CAAE,CACvB,KAAM,CAAAK,IAAI,CAAGR,QAAQ,CAACM,IAAI,CAAC,CAC3B,MAAO,CAAAb,KAAK,CAACgB,KAAK,CAACJ,MAAM,CAAC,CAACG,IAAI,CAAC,CAACE,MAAM,CAAG,CAAC,CAC7C,CAEA,GAAIJ,IAAI,CAACH,IAAI,GAAK,MAAM,CAAE,CACxB,KAAM,CAAAQ,CAAC,CAAGC,MAAM,CAAEN,IAAI,CAASO,IAAI,EAAI,EAAE,CAAC,CAACC,WAAW,CAAC,CAAC,CACxD;AACA,GAAIH,CAAC,GAAK,sBAAsB,EAAIA,CAAC,GAAK,uBAAuB,EAAIA,CAAC,GAAK,QAAQ,CAAE,CACnF,MAAO,CAAAlB,KAAK,CAACgB,KAAK,CAACJ,MAAM,CAAC,CAACU,KAAK,CAACL,MAAM,CAAG,CAAC,CAC7C,CAEA;AACA,KAAM,CAAAM,IAAc,CAAIV,IAAI,CAASU,IAAI,EAAKV,IAAI,CAASU,IAAI,EAAI,EAAE,CACrE,KAAM,CAAAC,mBAAmB,CAAKX,IAAI,CAASO,IAAI,EAAID,MAAM,CAAEN,IAAI,CAASO,IAAI,CAAC,CAACC,WAAW,CAAC,CAAC,CAACI,QAAQ,CAAC,YAAY,CAAC,GAAMF,IAAI,CAACE,QAAQ,CAAC,SAAS,CAAC,EAAKN,MAAM,CAAEN,IAAI,CAASa,SAAS,EAAI,EAAE,CAAC,CAACC,UAAU,CAAC,OAAO,CAAC,EAAIJ,IAAI,CAACE,QAAQ,CAAC,SAAS,CAAE,CAAC,CAC5O,GAAID,mBAAmB,CAAE,CACvB;AACA,KAAM,CAAAI,aAAa,CAAIf,IAAI,CAASgB,aAAa,GAAMhB,IAAI,CAASU,IAAI,EAAKV,IAAI,CAASU,IAAI,CAACE,QAAQ,CAAC,QAAQ,CAAC,CAAG,QAAQ,CAAG,YAAY,CAAC,CAC5I,MAAO,CAACzB,KAAK,CAAC8B,cAAc,CAAClB,MAAM,CAAC,CAACgB,aAAa,CAA4B,CAChF,CAEA;AACA,MAAO,KAAI,CACb,CAEA,MAAO,MAAK,CACd,CAAC,CAED,MAAO,MAAM,CAAAG,mBAAmB,CAAGA,CAAC/B,KAAgB,CAAEY,MAAc,GAAc,CAChF,IAAK,KAAM,CAAAJ,CAAC,GAAI,CAAAR,KAAK,CAACgC,KAAK,CAACpB,MAAM,CAAC,CAAE,CACnC,KAAM,CAAEqB,IAAK,CAAC,CAAGlD,sBAAsB,CAACiB,KAAK,CAAEY,MAAM,CAAEJ,CAAC,CAAC,CACzD,GAAIyB,IAAI,GAAK,CAAC,EAAItB,iBAAiB,CAACX,KAAK,CAAEY,MAAM,CAAEJ,CAAC,CAAC,CAAE,MAAO,KAAI,CACpE,CACA,MAAO,MAAK,CACd,CAAC,CAED;AACA,QAAS,CAAA0B,mBAAmBA,CAAClC,KAAgB,CAAEY,MAAc,CAAEuB,GAA2B,CAAE,CAC1F,KAAM,CAAAnB,KAAK,CAAGhB,KAAK,CAACgB,KAAK,CAACJ,MAAM,CAAC,CACjC,KAAM,CAAAwB,MAAM,CAAGpB,KAAK,CAACM,KAAK,CAACe,IAAI,CAAC7B,CAAC,EAC/BA,CAAC,CAACE,IAAI,GAAK,MAAM,EAChBF,CAAC,CAASY,IAAI,GAAK,sBAAsB,EACzCZ,CAAC,CAASC,GAAG,GAAK,KAAK,EACxB,CAAED,CAAC,CAASM,WACd,CAAC,CAED,KAAM,CAAAwB,SAAS,CAAGtB,KAAK,CAACuB,MAAM,CAACC,GAAG,CAAC3B,IAAI,EAAI,CACzC,GAAIA,IAAI,CAACH,IAAI,GAAK,KAAK,CAAE,MAAO,CAAAG,IAAI,CACpC,KAAM,CAAA4B,GAAQ,CAAAnC,aAAA,IAAQO,IAAI,CAAE,CAC5B,GAAI4B,GAAG,CAACC,aAAa,EAAI,IAAI,CAAED,GAAG,CAACC,aAAa,CAAGD,GAAG,CAACE,SAAS,CAChE,KAAM,CAAAC,IAAI,CAAGH,GAAG,CAACE,SAAmB,CAEpC,GAAI,CAAAE,KAAK,CAAG,CAAC,CACb,GAAI,CAACJ,GAAG,CAAC3B,WAAW,EAAI2B,GAAG,CAACK,IAAI,GAAK,iBAAiB,EAAIL,GAAG,CAACM,MAAM,GAAK,WAAW,EAAIX,MAAM,CAAE,CAC9FS,KAAK,EAAI,CAAC,CACZ,CACAJ,GAAG,CAACE,SAAS,CAAIF,GAAG,CAACC,aAAa,CAAcG,KAAK,CACrD,GAAIV,GAAG,EAAIM,GAAG,CAACE,SAAS,CAAGC,IAAI,CAAET,GAAG,YAAAa,MAAA,CAAYP,GAAG,CAACK,IAAI,OAAAE,MAAA,CAAKP,GAAG,CAACE,SAAS,CAAGC,IAAI,eAAAI,MAAA,CAAaP,GAAG,CAACE,SAAS,MAAI,CAAC,CAChH,MAAO,CAAAF,GAAG,CACZ,CAAC,CAAC,CAEFzC,KAAK,CAACgB,KAAK,CAAAV,aAAA,CAAAA,aAAA,IACNN,KAAK,CAACgB,KAAK,MACd,CAACJ,MAAM,EAAAN,aAAA,CAAAA,aAAA,IAAQN,KAAK,CAACgB,KAAK,CAACJ,MAAM,CAAC,MAAE2B,MAAM,CAAED,SAAS,EAAE,EACjD,CACV,CAIA;AACA,QAAS,CAAAW,aAAaA,CAACC,SAAoB,CAAW,CACpD;AACA,KAAM,CAAAC,MAAM,CAAGD,SAAS,CAACE,MAAM,CAAC,CAAC,CAAC,EAAIF,SAAS,CAACE,MAAM,CAAC,CAAC,CAAC,CACzD1D,MAAM,CAAC2D,GAAG,qBAAAL,MAAA,CAAqBE,SAAS,CAACE,MAAM,CAAC,CAAC,CAAC,SAAAJ,MAAA,CAAOE,SAAS,CAACE,MAAM,CAAC,CAAC,CAAC,aAAAJ,MAAA,CAAWG,MAAM,CAAE,CAAC,CAChG,MAAO,CAAAA,MAAM,CACf,CAEA;AACA,QAAS,CAAAG,iBAAiBA,CAACJ,SAAoB,CAAEtC,MAAc,CAAE2C,KAAa,CAAU,CACtF,KAAM,CAAAC,IAAI,CAAG,CAAC,GAAGN,SAAS,CAACO,KAAK,CAAC7C,MAAM,CAAC,CAAC,CACzC,KAAM,CAAA8C,UAAU,CAAGF,IAAI,CAACG,MAAM,CAAC,CAAC,CAAEC,IAAI,CAACC,GAAG,CAACN,KAAK,CAAEC,IAAI,CAACvC,MAAM,CAAC,CAAC,CAC/D,MAAO,CAAAyC,UAAU,CACnB,CAEA;AACA,QAAS,CAAAI,aAAaA,CAACZ,SAAoB,CAAEf,GAA0B,CAAa,CAClF,KAAM,CAAA4B,OAAO,CAAGb,SAAS,CAACa,OAAO,CAEjC;AACAb,SAAS,CAACc,YAAY,CAAG,KAAK,CAE9B;AACA,GAAI,CAACd,SAAS,CAACE,MAAM,CAACW,OAAO,CAAC,CAAE,CAC9B,KAAM,CAAAE,SAAS,CAAGf,SAAS,CAACO,KAAK,CAACM,OAAO,CAAC,CAACG,KAAK,CAAC,CAAC,CAClD,GAAID,SAAS,CAAE,CACbf,SAAS,CAAClB,KAAK,CAAC+B,OAAO,CAAC,CAACI,IAAI,CAACF,SAAS,CAAC,CACxC9B,GAAG,6CAAAa,MAAA,CAAmCiB,SAAS,CAACnB,IAAI,KAAG,CAAC,CAC1D,CACF,CAAC,IAAM,CACLX,GAAG,kBAAAa,MAAA,CAAQe,OAAO,wCAAiC,CAAC,CACtD,CAEA;AACA,KAAM,CAAAK,cAAc,CAAGnB,aAAa,CAACC,SAAS,CAAC,CAC/C,GAAIkB,cAAc,CAAE,CAClBjC,GAAG,uBAAAa,MAAA,CAAaE,SAAS,CAACmB,KAAK,6BAA2B,CAAC,CAC3D,MAAO,CAAAC,YAAY,CAACpB,SAAS,CAAEf,GAAG,CAAC,CACrC,CAEA;AACA,KAAM,CAAAoC,UAAkB,CAAGR,OAAO,GAAK,CAAC,CAAG,CAAC,CAAG,CAAC,CAChDb,SAAS,CAACa,OAAO,CAAGQ,UAAU,CAC9BrB,SAAS,CAACsB,YAAY,CAAAlE,aAAA,CAAAA,aAAA,IAAQ4C,SAAS,CAACsB,YAAY,MAAE,CAACD,UAAU,EAAG,CAAC,EAAE,CACvErB,SAAS,CAACE,MAAM,CAAA9C,aAAA,CAAAA,aAAA,IAAQ4C,SAAS,CAACE,MAAM,MAAE,CAACmB,UAAU,EAAG,KAAK,EAAE,CAErD;AACFlF,qBAAqB,CAAC6D,SAAS,CAAEqB,UAAU,CAAEpC,GAAG,CAAC,CAEnD;AACA3C,kBAAkB,CAAC0D,SAAS,CAAC,CAEnC;AAEAf,GAAG,mCAAAa,MAAA,CAAyBuB,UAAU,mCAA8B,CAAC,CAErE,MAAO,CAAArB,SAAS,CAClB,CAEA;AACA,QAAS,CAAAoB,YAAYA,CAACpB,SAAoB,CAAEf,GAA0B,CAAa,CACjF;AACA,KAAM,CAAAsC,WAAW,CAAG5F,+BAA+B,CAACqE,SAAS,CAAE,CAAC,CAAC,CACjE,KAAM,CAAAwB,WAAW,CAAG7F,+BAA+B,CAACqE,SAAS,CAAE,CAAC,CAAC,CAEjEf,GAAG,sCAAAa,MAAA,CAA4ByB,WAAW,qBAAAzB,MAAA,CAAmB0B,WAAW,aAAW,CAAC,CAEpF;AACA,GAAI,CAAAC,WAAmB,CACvB,GAAIF,WAAW,CAAGC,WAAW,CAAE,CAC7BC,WAAW,CAAG,CAAC,CACfxC,GAAG,+CAAAa,MAAA,CAAqCyB,WAAW,QAAAzB,MAAA,CAAM0B,WAAW,KAAG,CAAC,CAC1E,CAAC,IAAM,IAAIA,WAAW,CAAGD,WAAW,CAAE,CACpCE,WAAW,CAAG,CAAC,CACfxC,GAAG,+CAAAa,MAAA,CAAqC0B,WAAW,QAAA1B,MAAA,CAAMyB,WAAW,KAAG,CAAC,CAC1E,CAAC,IAAM,CACL;AACAE,WAAW,CAAGzB,SAAS,CAACa,OAAO,CAC/B5B,GAAG,wCAAAa,MAAA,CAA8B2B,WAAW,iCAA+B,CAAC,CAC9E,CAEA;AACA,KAAM,CAAAC,cAAsB,CAAG,CAC7B,GAAG1B,SAAS,CAAClC,KAAK,CAAC,CAAC,CAAC,CAACM,KAAK,CAC3B,GAAG4B,SAAS,CAAClC,KAAK,CAAC,CAAC,CAAC,CAACuB,MAAM,CAC5B,GAAGW,SAAS,CAAClC,KAAK,CAAC,CAAC,CAAC,CAACM,KAAK,CAC3B,GAAG4B,SAAS,CAAClC,KAAK,CAAC,CAAC,CAAC,CAACuB,MAAM,CAC5B,IAAIW,SAAS,CAACpB,cAAc,CAAC,CAAC,CAAC,CAAC+C,UAAU,CAAG,CAAC3B,SAAS,CAACpB,cAAc,CAAC,CAAC,CAAC,CAAC+C,UAAU,CAAC,CAAG,EAAE,CAAC,CAC3F,IAAI3B,SAAS,CAACpB,cAAc,CAAC,CAAC,CAAC,CAACgD,MAAM,CAAG,CAAC5B,SAAS,CAACpB,cAAc,CAAC,CAAC,CAAC,CAACgD,MAAM,CAAC,CAAG,EAAE,CAAC,CACnF,IAAI5B,SAAS,CAACpB,cAAc,CAAC,CAAC,CAAC,CAAC+C,UAAU,CAAG,CAAC3B,SAAS,CAACpB,cAAc,CAAC,CAAC,CAAC,CAAC+C,UAAU,CAAC,CAAG,EAAE,CAAC,CAC3F,IAAI3B,SAAS,CAACpB,cAAc,CAAC,CAAC,CAAC,CAACgD,MAAM,CAAG,CAAC5B,SAAS,CAACpB,cAAc,CAAC,CAAC,CAAC,CAACgD,MAAM,CAAC,CAAG,EAAE,CAAC,CACnF,GAAG5B,SAAS,CAAClC,KAAK,CAAC,CAAC,CAAC,CAAC+D,MAAM,CAC5B,GAAG7B,SAAS,CAAClC,KAAK,CAAC,CAAC,CAAC,CAAC+D,MAAM,CAC7B,CAED;AACA,KAAM,CAAAC,SAAS,CAAG1B,iBAAiB,CAACJ,SAAS,CAAE,CAAC,CAAE,CAAC,CAAC,CACpD,KAAM,CAAA+B,SAAS,CAAG3B,iBAAiB,CAACJ,SAAS,CAAE,CAAC,CAAE,CAAC,CAAC,CAEpD;AACA,KAAM,CAAAgC,YAAY,CAAA5E,aAAA,CAAAA,aAAA,IACb4C,SAAS,CAACiC,SAAS,MACtB,CAACR,WAAW,EAAGzB,SAAS,CAACiC,SAAS,CAACR,WAAW,CAAC,CAAG,CAAC,EACpD,CAED;AACA,KAAM,CAAAS,MAAM,CAAGF,YAAY,CAAC,CAAC,CAAC,CAC9B,KAAM,CAAAG,MAAM,CAAGH,YAAY,CAAC,CAAC,CAAC,CAE9B,GAAIE,MAAM,EAAI,CAAC,EAAIC,MAAM,EAAI,CAAC,CAAE,CAC9B,KAAM,CAAAC,UAAU,CAAGF,MAAM,EAAI,CAAC,CAAG,CAAC,CAAG,CAAC,CACtCjD,GAAG,oDAAAa,MAAA,CAAgCsC,UAAU,0BAAAtC,MAAA,CAAwBoC,MAAM,MAAApC,MAAA,CAAIqC,MAAM,KAAG,CAAC,CACzFlD,GAAG,wCAAAa,MAAA,CAA8BsC,UAAU,oBAAkB,CAAC,CAE9D;AACA,OAAAhF,aAAA,CAAAA,aAAA,IACK4C,SAAS,MACZiC,SAAS,CAAED,YAAY,CACvBI,UAAU,CACV;AACAlC,MAAM,CAAE,CAAE,CAAC,CAAE,IAAI,CAAE,CAAC,CAAE,IAAK,CAAG;AAAA,GAElC,CAEA;AACA,KAAM,CAAAmC,QAAmB,CAAAjF,aAAA,CAAAA,aAAA,IACpB4C,SAAS,MACZmB,KAAK,CAAEnB,SAAS,CAACmB,KAAK,CAAG,CAAC,CAC1BN,OAAO,CAAEY,WAAW,CAAE;AACjBvB,MAAM,CAAE,CAAE,CAAC,CAAE,KAAK,CAAE,CAAC,CAAE,KAAM,CAAC,CAAE;AACpCoB,YAAY,CAAE,CAAE,CAAC,CAAE,CAAC,CAAE,CAAC,CAAE,CAAE,CAAC,CAAE;AAC9BgB,WAAW,CAAE,CAAE,CAAC,CAAE,CAAC,CAAE,CAAC,CAAE,CAAE,CAAC,CAAE;AAC7BL,SAAS,CAAED,YAAY,CACxB7E,WAAW,CAAE,CACX,CAAC,CAAE1B,wBAAwB,CAAC,CAAC,CAC7B,CAAC,CAAEA,wBAAwB,CAAC,CAC9B,CAAC,CACD;AACAqC,KAAK,CAAEvB,UAAU,CAAC,CAAC,CACnB;AACAqC,cAAc,CAAE,CACd,CAAC,CAAE,CAAE+C,UAAU,CAAE,IAAI,CAAEC,MAAM,CAAE,IAAI,CAAEW,mBAAmB,CAAE,IAAK,CAAC,CAChE,CAAC,CAAE,CAAEZ,UAAU,CAAE,IAAI,CAAEC,MAAM,CAAE,IAAI,CAAEW,mBAAmB,CAAE,IAAK,CACjE,CAAC,CACD;AACA;AACAzD,KAAK,CAAE,CACL,CAAC,CAAEgD,SAAS,CACZ,CAAC,CAAEC,SACL,CAAC,CACD;AACAxB,KAAK,CAAE,CACL,CAAC,CAAEP,SAAS,CAACO,KAAK,CAAC,CAAC,CAAC,CAACiC,KAAK,CAACV,SAAS,CAAC/D,MAAM,CAAC,CAC7C,CAAC,CAAEiC,SAAS,CAACO,KAAK,CAAC,CAAC,CAAC,CAACiC,KAAK,CAACT,SAAS,CAAChE,MAAM,CAC9C,CAAC,CACD;AACA0E,OAAO,CAAE,CAAC,GAAGzC,SAAS,CAACyC,OAAO,CAAE,GAAGf,cAAc,CAAC,EACnD,CAEDzC,GAAG,uBAAAa,MAAA,CAAauC,QAAQ,CAAClB,KAAK,uBAAArB,MAAA,CAAqB2B,WAAW,gCAAA3B,MAAA,CAA8BuC,QAAQ,CAACJ,SAAS,CAAC,CAAC,CAAC,WAAAnC,MAAA,CAASuC,QAAQ,CAACJ,SAAS,CAAC,CAAC,CAAC,KAAG,CAAC,CACnJhD,GAAG,yDAA+C,CAAC,CAEnD,MAAO,CAAAoD,QAAQ,CACjB,CAEA,MAAO,SAAS,CAAAK,cAAcA,CAC5B1C,SAAoB,CACpB2C,YAA6D,CAC7D1D,GAA0B,CAC1B2D,kBAA+B,CAC/B,CACA;AACA;AACA,KAAM,CAAAC,aAAa,CAAGpG,oBAAoB,CAAC,CAAC,CAC5C;AACA,KAAM,CAAAqG,eAAe,CAAGxH,WAAW,CAAC,CAACqC,IAAS,CAAEoF,aAAyB,GAAK,CAC5E,GAAI,KAAAC,SAAA,CAAAC,UAAA,CAAAC,iBAAA,CACF,GAAI,CAACvF,IAAI,CAAE,OACXwF,OAAO,CAACC,KAAK,CAAC,sCAAsC,CAAE,CAAEC,GAAG,EAAAL,SAAA,CAAErF,IAAI,CAAC0F,GAAG,UAAAL,SAAA,UAAAA,SAAA,CAAIrF,IAAI,CAAC2F,EAAE,CAAE1D,IAAI,CAAEjC,IAAI,CAACiC,IAAK,CAAC,CAAC,CACpG,KAAM,CAAAyD,GAAG,EAAAJ,UAAA,CAAGtF,IAAI,CAAC0F,GAAG,UAAAJ,UAAA,UAAAA,UAAA,CAAItF,IAAI,CAAC2F,EAAE,CAC/B;AACA,KAAM,CAAAC,cAAc,CAAGR,aAAa,EAAI/C,SAAS,CACjD,GAAI6C,aAAa,CAAE,KAAAW,gBAAA,CACjB;AACA,GAAI,CACF,GAAI,CAAAC,OAA2E,CAAG,IAAI,CACtF,IAAK,KAAM,CAAAzG,CAAC,GAAI,CAAC,CAAC,CAAE,CAAC,CAAC,CAAW,CAC/B,KAAM,CAAAqC,MAAM,CAAGkE,cAAc,CAACzF,KAAK,CAACd,CAAC,CAAC,CAACqC,MAAM,EAAI,EAAE,CACnD,KAAM,CAAAqE,IAAI,CAAGrE,MAAM,CAACsE,SAAS,CAAErG,CAAM,OAAAsG,MAAA,CAAAC,UAAA,OAAK,EAAAD,MAAA,CAACtG,CAAC,CAAC+F,GAAG,UAAAO,MAAA,UAAAA,MAAA,CAAItG,CAAC,CAACgG,EAAE,MAAAO,UAAA,CAAOlG,IAAI,CAAC0F,GAAG,UAAAQ,UAAA,UAAAA,UAAA,CAAIlG,IAAI,CAAC2F,EAAE,CAAC,GAAC,CACpF,GAAII,IAAI,EAAI,CAAC,CAAE,CAAED,OAAO,CAAG,CAAE/F,MAAM,CAAEV,CAAC,CAAEa,IAAI,CAAE,QAAQ,CAAEiG,KAAK,CAAEJ,IAAK,CAAC,CAAE,MAAO,CAC9E,KAAM,CAAAtF,KAAK,CAAGmF,cAAc,CAACzF,KAAK,CAACd,CAAC,CAAC,CAACoB,KAAK,EAAI,EAAE,CACjD,KAAM,CAAA2F,IAAI,CAAG3F,KAAK,CAACuF,SAAS,CAAErG,CAAM,OAAA0G,OAAA,CAAAC,UAAA,OAAK,EAAAD,OAAA,CAAC1G,CAAC,CAAC+F,GAAG,UAAAW,OAAA,UAAAA,OAAA,CAAI1G,CAAC,CAACgG,EAAE,MAAAW,UAAA,CAAOtG,IAAI,CAAC0F,GAAG,UAAAY,UAAA,UAAAA,UAAA,CAAItG,IAAI,CAAC2F,EAAE,CAAC,GAAC,CACnF,GAAIS,IAAI,EAAI,CAAC,CAAE,CAAEN,OAAO,CAAG,CAAE/F,MAAM,CAAEV,CAAC,CAAEa,IAAI,CAAE,OAAO,CAAEiG,KAAK,CAAEC,IAAK,CAAC,CAAE,MAAO,CAC/E,CAEA,GAAIN,OAAO,EAAIA,OAAO,CAAC5F,IAAI,GAAK,QAAQ,CAAE,KAAAqG,UAAA,CAAAC,UAAA,CACxC,KAAM,CAAAC,KAAK,CAAGxH,kBAAkB,CAAC6G,OAAO,CAAC/F,MAAM,GAAK,CAAC,CAAG,QAAQ,CAAG,UAAU,CAAC,CAC9E,KAAM,CAAA2G,IAAI,CAAGD,KAAK,CAACX,OAAO,CAACK,KAAK,CAAC,EAAIM,KAAK,CAAC,CAAC,CAAC,EAAI,CAAEE,CAAC,CAAE,GAAG,CAAG,GAAG,CAAEC,CAAC,CAAE,GAAG,CAAG,GAAG,CAAEC,CAAC,CAAE,GAAG,CAAEC,CAAC,CAAE,GAAI,CAAC,CAC/F,KAAM,CAAAC,OAAO,CAAGL,IAAI,CAACC,CAAC,CAAGD,IAAI,CAACG,CAAC,CAAG,CAAC,CACnC,KAAM,CAAAG,OAAO,CAAGN,IAAI,CAACE,CAAC,CAAGF,IAAI,CAACI,CAAC,CAAG,CAAC,CACnC5B,aAAa,CAAC+B,cAAc,CAACF,OAAO,CAAEC,OAAO,CAAE,EAAE,CAAC,CAClD9B,aAAa,CAACgC,QAAQ,EAAAX,UAAA,CAACvG,IAAI,CAAC0F,GAAG,UAAAa,UAAA,UAAAA,UAAA,CAAIvG,IAAI,CAAC2F,EAAE,CAAC,CAC3CH,OAAO,CAACC,KAAK,CAAC,wDAAwD,CAAE,CAAEC,GAAG,EAAAc,UAAA,CAAExG,IAAI,CAAC0F,GAAG,UAAAc,UAAA,UAAAA,UAAA,CAAIxG,IAAI,CAAC2F,EAAE,CAAEwB,EAAE,CAAEJ,OAAO,CAAEK,EAAE,CAAEJ,OAAO,CAAEN,IAAK,CAAC,CAAC,CAErI,KAAM,CAAAW,MAAM,CAAGC,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC,CAC/C,GAAIF,MAAM,CAAE,KAAAG,UAAA,CAAAC,UAAA,CACV,KAAM,CAAAC,IAAI,CAAGL,MAAM,CAACM,qBAAqB,CAAC,CAAC,CAC3C,KAAM,CAAEC,KAAK,CAAEC,OAAO,CAAEC,OAAQ,CAAC,CAAG9I,cAAc,CAACqI,MAAM,CAACU,KAAK,CAAEV,MAAM,CAACW,MAAM,CAAC,CAC/E;AACA,KAAM,CAAAC,QAAQ,CAAGP,IAAI,CAACQ,IAAI,CAAG,CAACnB,OAAO,CAAGc,OAAO,EAAID,KAAK,CACxD,KAAM,CAAAO,QAAQ,CAAGT,IAAI,CAACU,GAAG,CAAI,CAACpB,OAAO,CAAGc,OAAO,EAAIF,KAAK,CACxD;AACA;AACA;AACA1C,aAAa,CAACmD,iBAAiB,CAAC,CAAE1C,EAAE,EAAA6B,UAAA,CAAExH,IAAI,CAAC0F,GAAG,UAAA8B,UAAA,UAAAA,UAAA,CAAIxH,IAAI,CAAC2F,EAAE,CAAEwB,EAAE,CAAEJ,OAAO,CAAEK,EAAE,CAAEJ,OAAO,CAAEH,CAAC,CAAE,GAAG,CAAEC,CAAC,CAAE,GAAG,CAAEwB,GAAG,CAAEvJ,UAAU,CAAEwJ,QAAQ,CAAE,GAAI,CAAC,CAAC,CACtI/C,OAAO,CAACC,KAAK,CAAC,0DAA0D,CAAE,CAAEC,GAAG,EAAA+B,UAAA,CAAEzH,IAAI,CAAC0F,GAAG,UAAA+B,UAAA,UAAAA,UAAA,CAAIzH,IAAI,CAAC2F,EAAE,CAAEsC,QAAQ,CAAEE,QAAQ,CAAEG,GAAG,CAAEvJ,UAAW,CAAC,CAAC,CAC9I,CAEA,GAAI,KAAAyJ,UAAA,CAAEtD,aAAa,CAACuD,YAAY,CAACvF,OAAO,CAACI,IAAI,CAAC,CAAEoC,GAAG,EAAA8C,UAAA,CAAExI,IAAI,CAAC0F,GAAG,UAAA8C,UAAA,UAAAA,UAAA,CAAIxI,IAAI,CAAC2F,EAAE,CAAE+C,OAAO,CAAEC,WAAW,CAACC,GAAG,CAAC,CAAC,CAAEL,QAAQ,CAAE,GAAI,CAAC,CAAC,CAAE,CAAE,MAAOM,CAAC,CAAE,CAAC,CACrI,OACF,CACF,CAAE,MAAOA,CAAC,CAAE,CACVrD,OAAO,CAACC,KAAK,CAAC,uDAAuD,CAAEoD,CAAC,CAAC,CAC3E,CACA;AACA,KAAM,CAAAC,KAAK,CAAG,EAAAjD,gBAAA,CAACkD,MAAM,CAASC,iBAAiB,UAAAnD,gBAAA,iBAAjCA,gBAAA,CAAmCoD,UAAU,GAAI,EAAE,CACjE,KAAM,CAAAC,IAAI,CAAGJ,KAAK,CAACK,IAAI,CAAEC,CAAM,OAAAC,gBAAA,OAAK,CAAAD,CAAC,CAACE,IAAI,EAAIF,CAAC,CAACE,IAAI,CAAC/I,IAAI,GAAK,UAAU,EAAI6I,CAAC,CAACE,IAAI,CAACtJ,IAAI,EAAK,EAAAqJ,gBAAA,CAACD,CAAC,CAACE,IAAI,CAACtJ,IAAI,CAAC0F,GAAG,UAAA2D,gBAAA,UAAAA,gBAAA,CAAID,CAAC,CAACE,IAAI,CAACtJ,IAAI,CAAC2F,EAAE,IAAMD,GAAI,GAAC,CACzI,KAAM,CAAAyB,EAAE,CAAG+B,IAAI,CAAGA,IAAI,CAACvC,CAAC,CAAG,CAACuC,IAAI,CAACrC,CAAC,EAAI,GAAG,EAAI,CAAC,CAAG,GAAG,CACpD,KAAM,CAAAO,EAAE,CAAG8B,IAAI,CAAGA,IAAI,CAACtC,CAAC,CAAG,CAACsC,IAAI,CAACpC,CAAC,EAAI,GAAG,EAAI,CAAC,CAAG,GAAG,CACpD5B,aAAa,CAAC+B,cAAc,CAACE,EAAE,CAAEC,EAAE,CAAE,EAAE,CAAC,CACxClC,aAAa,CAACgC,QAAQ,CAACxB,GAAG,CAAC,CAC3BF,OAAO,CAACC,KAAK,CAAC,wDAAwD,CAAE,CAAEC,GAAG,CAAEyB,EAAE,CAAEC,EAAE,CAAE8B,IAAK,CAAC,CAAC,CAC9F;AACA,GAAI,CACFhE,aAAa,CAACuD,YAAY,CAACvF,OAAO,CAACI,IAAI,CAAC,CAAEoC,GAAG,CAAEgD,OAAO,CAAEC,WAAW,CAACC,GAAG,CAAC,CAAC,CAAEL,QAAQ,CAAE,GAAI,CAAC,CAAC,CAC3F/C,OAAO,CAACC,KAAK,CAAC,iDAAiD,CAAEC,GAAG,CAAC,CACvE,CAAE,MAAOmD,CAAC,CAAE,CAAErD,OAAO,CAACC,KAAK,CAAC,wDAAwD,CAAEoD,CAAC,CAAC,CAAE,CAC1F,OACF,CACA;AACA,KAAM,CAAAC,KAAK,CAAG,EAAAvD,iBAAA,CAACwD,MAAM,CAASC,iBAAiB,UAAAzD,iBAAA,iBAAjCA,iBAAA,CAAmC0D,UAAU,GAAI,EAAE,CACjE,KAAM,CAAAC,IAAI,CAAGJ,KAAK,CAACK,IAAI,CAAEC,CAAM,OAAAG,iBAAA,OAAK,CAAAH,CAAC,CAACE,IAAI,EAAIF,CAAC,CAACE,IAAI,CAACtJ,IAAI,EAAK,EAAAuJ,iBAAA,CAACH,CAAC,CAACE,IAAI,CAACtJ,IAAI,CAAC0F,GAAG,UAAA6D,iBAAA,UAAAA,iBAAA,CAAIH,CAAC,CAACE,IAAI,CAACtJ,IAAI,CAAC2F,EAAE,IAAMD,GAAI,GAAC,CAC3G,KAAM,CAAAyB,EAAE,CAAG+B,IAAI,CAAGA,IAAI,CAACvC,CAAC,CAAG,CAACuC,IAAI,CAACrC,CAAC,EAAI,GAAG,EAAI,CAAC,CAAG,GAAG,CACpD,KAAM,CAAAO,EAAE,CAAG8B,IAAI,CAAGA,IAAI,CAACtC,CAAC,CAAG,CAACsC,IAAI,CAACpC,CAAC,EAAI,GAAG,EAAI,CAAC,CAAG,GAAG,CACnDiC,MAAM,CAASS,cAAc,CAAIT,MAAM,CAASS,cAAc,EAAI,EAAE,CACrE,IAAK,GAAI,CAAAC,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAG,EAAE,CAAEA,CAAC,EAAE,CAAE,CAC1BV,MAAM,CAASS,cAAc,CAAClG,IAAI,CAAC,CAAEoG,KAAK,CAAEf,WAAW,CAACC,GAAG,CAAC,CAAC,CAAEe,IAAI,CAAE,GAAG,CAAG5G,IAAI,CAAC6G,MAAM,CAAC,CAAC,CAAG,GAAG,CAAEjD,CAAC,CAAEQ,EAAE,CAAG,CAACpE,IAAI,CAAC6G,MAAM,CAAC,CAAC,CAAG,GAAG,EAAI,EAAE,CAAEhD,CAAC,CAAEQ,EAAE,CAAG,CAACrE,IAAI,CAAC6G,MAAM,CAAC,CAAC,CAAG,GAAG,EAAI,EAAE,CAAEC,EAAE,CAAE,CAAC9G,IAAI,CAAC6G,MAAM,CAAC,CAAC,CAAG,GAAG,EAAI,CAAC,CAAEE,EAAE,CAAE,CAAC/G,IAAI,CAAC6G,MAAM,CAAC,CAAC,CAAG,CAAC,CAAEG,IAAI,CAAE,CAAC,CAAGhH,IAAI,CAAC6G,MAAM,CAAC,CAAC,CAAG,CAAC,CAAEI,KAAK,CAAE,CAAC,SAAS,CAAE,SAAS,CAAE,SAAS,CAAC,CAACjH,IAAI,CAACkH,KAAK,CAAClH,IAAI,CAAC6G,MAAM,CAAC,CAAC,CAAG,CAAC,CAAC,CAAC,CAAEM,OAAO,CAAE,IAAK,CAAC,CAAC,CACxV,CACCnB,MAAM,CAASoB,SAAS,CAAIpB,MAAM,CAASoB,SAAS,EAAI,EAAE,CAC1DpB,MAAM,CAASoB,SAAS,CAAC7G,IAAI,CAAC,CAAEoC,GAAG,CAAEgD,OAAO,CAAEC,WAAW,CAACC,GAAG,CAAC,CAAC,CAAEL,QAAQ,CAAE,GAAI,CAAC,CAAC,CAClF;AACCQ,MAAM,CAASqB,eAAe,CAAIrB,MAAM,CAASqB,eAAe,EAAI,EAAE,CACtErB,MAAM,CAASqB,eAAe,CAAC9G,IAAI,CAAC,CAAEoC,GAAG,CAAEgD,OAAO,CAAEC,WAAW,CAACC,GAAG,CAAC,CAAC,CAAEL,QAAQ,CAAE,GAAI,CAAC,CAAC,CACxF;AACA,GAAI,CACF,KAAM,CAAA8B,EAAE,CAAItB,MAAM,CAASuB,mBAAmB,CAC9C,GAAID,EAAE,EAAI,MAAO,CAAAA,EAAE,CAACE,eAAe,GAAK,UAAU,CAAE,CAClD;AACA,KAAM,CAAAlD,MAAM,CAAGC,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC,CAC/C,GAAIF,MAAM,CAAE,KAAAmD,iBAAA,CACV,KAAM,CAAA9C,IAAI,CAAGL,MAAM,CAACM,qBAAqB,CAAC,CAAC,CAC3C,KAAM,CAAA8C,EAAE,CAAG,EAAAD,iBAAA,CAACzB,MAAM,CAASC,iBAAiB,UAAAwB,iBAAA,iBAAjCA,iBAAA,CAAmCE,WAAW,GAAI,CAAE9C,KAAK,CAAE,CAAC,CAAEC,OAAO,CAAE,CAAC,CAAEC,OAAO,CAAE,CAAE,CAAC,CACjG,KAAM,CAAAG,QAAQ,CAAGP,IAAI,CAACQ,IAAI,CAAG,CAACf,EAAE,CAAGsD,EAAE,CAAC5C,OAAO,EAAI4C,EAAE,CAAC7C,KAAK,CACzD,KAAM,CAAAO,QAAQ,CAAGT,IAAI,CAACU,GAAG,CAAI,CAAChB,EAAE,CAAGqD,EAAE,CAAC3C,OAAO,EAAI2C,EAAE,CAAC7C,KAAK,CACzD,GAAI,CACF,GAAI,MAAO,CAAAyC,EAAE,CAAChC,iBAAiB,GAAK,UAAU,CAAE,CAC9C;AACA,GAAI,CAAEgC,EAAE,CAAChC,iBAAiB,CAAC,CAAE1C,EAAE,CAAED,GAAG,CAAEyB,EAAE,CAAEA,EAAE,CAAEC,EAAE,CAAEA,EAAE,CAAEP,CAAC,CAAE,GAAG,CAAEC,CAAC,CAAE,GAAG,CAAEwB,GAAG,CAAEvJ,UAAU,CAAEwJ,QAAQ,CAAE,GAAI,CAAC,CAAC,CAAE/C,OAAO,CAACC,KAAK,CAAC,qEAAqE,CAAEC,GAAG,CAAC,CAAE,CAAE,MAAOmD,CAAC,CAAE,CAAErD,OAAO,CAACC,KAAK,CAAC,iDAAiD,CAAEoD,CAAC,CAAC,CAAE,CACzR,CAAC,IAAM,CACLwB,EAAE,CAACE,eAAe,CAAC,CAAE5E,EAAE,CAAED,GAAG,CAAEyB,EAAE,CAAEc,QAAQ,CAAEb,EAAE,CAAEe,QAAQ,CAAEtB,CAAC,CAAE,GAAG,CAAG4D,EAAE,CAAC7C,KAAK,CAAEd,CAAC,CAAE,GAAG,CAAG2D,EAAE,CAAC7C,KAAK,CAAEU,GAAG,CAAEvJ,UAAU,CAAEwJ,QAAQ,CAAE,GAAI,CAAC,CAAC,CACjI/C,OAAO,CAACC,KAAK,CAAC,mEAAmE,CAAEC,GAAG,CAAC,CACzF,CACF,CAAE,MAAOmD,CAAC,CAAE,CAAErD,OAAO,CAACC,KAAK,CAAC,+CAA+C,CAAEoD,CAAC,CAAC,CAAE,CACnF,CACF,CACF,CAAE,MAAOA,CAAC,CAAE,CAAC,CACf,CAAE,MAAOA,CAAC,CAAE,CACV;AAAA,CAEJ,CAAC,CAAE,CAAC3D,aAAa,CAAE7C,SAAS,CAAC,CAAC,CAC9B;AACA,KAAM,CAAAsI,aAAa,CAAG/M,MAAM,CAAc,GAAI,CAAAgN,GAAG,CAAC,CAAC,CAAC,CACpD;AACA,KAAM,CAAAC,gBAAgB,CAAGjN,MAAM,CAAgB,IAAI,CAAC,CAEpD;AACAC,SAAS,CAAC,IAAM,CACd,KAAM,CAAAiN,gBAAgB,CAAIC,EAAO,EAAK,KAAAC,UAAA,CAAAC,WAAA,CACpC,KAAM,CAAAvF,GAAG,EAAAsF,UAAA,CAAGD,EAAE,CAACG,MAAM,UAAAF,UAAA,iBAATA,UAAA,CAAWG,SAA+B,CACtD,KAAM,CAAApL,MAAM,EAAAkL,WAAA,CAAGF,EAAE,CAACG,MAAM,UAAAD,WAAA,iBAATA,WAAA,CAAWlL,MAA4B,CACtD,GAAI,CAAC2F,GAAG,EAAI,CAAC3F,MAAM,CAAE,OACrB;AACA;AACA8K,gBAAgB,CAAC3H,OAAO,CAAGwC,GAAG,CAC9B,GAAI,CAAEpE,GAAG,kDAAAa,MAAA,CAAqCuD,GAAG,KAAG,CAAC,CAAE,CAAE,MAAOmD,CAAC,CAAE,CAAC,CACtE,CAAC,CAED;AACA,KAAM,CAAAuC,iBAAiB,CAAIL,EAAO,EAAK,KAAAM,WAAA,CAAAC,WAAA,CACrC,KAAM,CAAAvL,MAAM,EAAAsL,WAAA,CAAGN,EAAE,CAACG,MAAM,UAAAG,WAAA,iBAATA,WAAA,CAAWtL,MAA4B,CACtD,KAAM,CAAAoL,SAAS,EAAAG,WAAA,CAAGP,EAAE,CAACG,MAAM,UAAAI,WAAA,iBAATA,WAAA,CAAWH,SAA+B,CAC5D,GAAI,CAACpL,MAAM,EAAI,CAACoL,SAAS,CAAE,OAC3B;AACAN,gBAAgB,CAAC3H,OAAO,CAAGiI,SAAS,CACpC,GAAI,CACF,KAAM,CAAEI,YAAa,CAAC,CAAGC,OAAO,CAAC,iBAAiB,CAAC,CACnD,KAAM,CAAAC,GAAG,CAAGF,YAAY,CAAC,CAAC,CAC1B,KAAM,CAAAG,IAAI,CAAGD,GAAG,CAACE,SAAS,CAAC,CAAC,CAAC,CAAG,CAAC,CACjC;AACA,GAAI,CAAE5C,MAAM,CAAC6C,aAAa,CAAC,GAAI,CAAAC,WAAW,CAAC,cAAc,CAAE,CAAEX,MAAM,CAAE,CAAEY,IAAI,CAAEJ,IAAI,CAAE3L,MAAO,CAAE,CAAC,CAAC,CAAC,CAAE,CAAE,MAAO8I,CAAC,CAAE,CAAEhK,MAAM,CAAC2D,GAAG,CAAC,8BAA8B,CAAEqG,CAAC,CAAC,CAAE,CAC9J;AACA7D,YAAY,CAACjD,IAAI,EAAAtC,aAAA,CAAAA,aAAA,IAAUsC,IAAI,MAAEgK,YAAY,CAAE,CAAC,IAAIhK,IAAI,CAACgK,YAAY,EAAI,EAAE,CAAC,CAAE,CAAExL,IAAI,CAAE,KAAK,CAAEyL,GAAG,iDAAA7J,MAAA,CAAkCuJ,IAAI,CAAG,CAAC,CAAQ,EAAG,CAAC,CACtJ;AACF,CAAE,MAAO7C,CAAC,CAAE,CACVhK,MAAM,CAAC2D,GAAG,CAAC,+BAA+B,CAAEqG,CAAC,CAAC,CAChD,CACF,CAAC,CACD,KAAM,CAAAoD,gBAAgB,CAAIlB,EAAO,EAAK,KAAAmB,WAAA,CAAAC,WAAA,CACpC,KAAM,CAAAT,IAAI,EAAAQ,WAAA,CAAGnB,EAAE,CAACG,MAAM,UAAAgB,WAAA,iBAATA,WAAA,CAAWR,IAA0B,CAClD,KAAM,CAAA3L,MAAM,EAAAoM,WAAA,CAAGpB,EAAE,CAACG,MAAM,UAAAiB,WAAA,iBAATA,WAAA,CAAWpM,MAA4B,CACtD,GAAI,CAAC2L,IAAI,EAAI,CAAC3L,MAAM,EAAI8K,gBAAgB,CAAC3H,OAAO,GAAK,IAAI,CAAE,OAC3D,KAAM,CAAAiI,SAAS,CAAGN,gBAAgB,CAAC3H,OAAO,CAC1C2H,gBAAgB,CAAC3H,OAAO,CAAG,IAAI,CAE/B;AACA8B,YAAY,CAACjD,IAAI,EAAI,CACnB,KAAM,CAAAqK,MAAqB,CAAGrK,IAAI,CAACgK,YAAY,EAAI,EAAE,CACrDK,MAAM,CAAC9I,IAAI,CAAC,CAAE/C,IAAI,CAAE,8BAA8B,CAAER,MAAM,CAAEoL,SAAS,CAAEO,IAAK,CAAQ,CAAC,CACrF;AACAnN,YAAY,CAACwD,IAAI,CAASqK,MAAM,CAAC,CACjC,GAAInH,kBAAkB,CAAEA,kBAAkB,CAAC,CAAC,CAC5C,OAAAxF,aAAA,CAAAA,aAAA,IAAYsC,IAAI,MAAEgK,YAAY,CAAEK,MAAM,GACxC,CAAC,CAAC,CACJ,CAAC,CACDrD,MAAM,CAACsD,gBAAgB,CAAC,2BAA2B,CAAEvB,gBAAiC,CAAC,CACvF/B,MAAM,CAACsD,gBAAgB,CAAC,4BAA4B,CAAEjB,iBAAkC,CAAC,CACzFrC,MAAM,CAACsD,gBAAgB,CAAC,gBAAgB,CAAEJ,gBAAiC,CAAC,CAC5E,MAAO,IAAM,CACXlD,MAAM,CAACuD,mBAAmB,CAAC,2BAA2B,CAAExB,gBAAiC,CAAC,CAC1F/B,MAAM,CAACuD,mBAAmB,CAAC,4BAA4B,CAAElB,iBAAkC,CAAC,CAC5FrC,MAAM,CAACuD,mBAAmB,CAAC,gBAAgB,CAAEL,gBAAiC,CAAC,CACjF,CAAC,CACH,CAAC,CAAE,CAACjH,YAAY,CAAEC,kBAAkB,CAAC,CAAC,CACtC,KAAM,CAAAsH,mBAAmB,CAAG5O,WAAW,CAAC,CAAC6O,aAA6B,CAAEC,aAA6B,GAAK,CACxG,KAAM,CAAAC,OAAO,CAAG3O,oBAAoB,CAACyO,aAAa,CAAC,CACnD,KAAM,CAAAG,OAAO,CAAG5O,oBAAoB,CAAC0O,aAAa,CAAC,CAE/C;AACJ,KAAM,CAAAG,WAAW,CAAGF,OAAO,CAACG,MAAM,CAAClN,CAAC,EAAKA,CAAC,CAASC,GAAG,GAAK,KAAK,CAAC,CACjE,KAAM,CAAAkN,eAAe,CAAGJ,OAAO,CAACG,MAAM,CAAClN,CAAC,EAAKA,CAAC,CAASC,GAAG,GAAK,WAAW,CAAC,CAC3E,KAAM,CAAAmN,aAAa,CAAGL,OAAO,CAACG,MAAM,CAAClN,CAAC,EAAKA,CAAC,CAASuC,MAAM,GAAK,WAAW,CAAC,CAC5E,KAAM,CAAA8K,aAAa,CAAGN,OAAO,CAACG,MAAM,CAAClN,CAAC,EAAIA,CAAC,CAACE,IAAI,GAAK,MAAM,EAAKF,CAAC,CAASY,IAAI,GAAK,sBAAsB,CAAC,CAE1Ge,GAAG,gCAAAa,MAAA,CAAsBuK,OAAO,CAACtM,MAAM,iBAAe,CAAC,CACvDkB,GAAG,kCAAAa,MAAA,CAAwB6K,aAAa,CAACrL,GAAG,CAAChC,CAAC,KAAAwC,MAAA,CAAOxC,CAAC,CAACsC,IAAI,EAAAE,MAAA,CAAIxC,CAAC,CAASC,GAAG,KAAAuC,MAAA,CAAQxC,CAAC,CAASC,GAAG,MAAM,EAAE,CAAE,CAAC,CAACqN,IAAI,CAAC,IAAI,CAAC,CAAE,CAAC,CAC1H3L,GAAG,gCAAAa,MAAA,CAAsByK,WAAW,CAACxM,MAAM,CAAG,CAAC,CAAGwM,WAAW,CAACjL,GAAG,CAAChC,CAAC,EAAIA,CAAC,CAACsC,IAAI,CAAC,CAACgL,IAAI,CAAC,IAAI,CAAC,CAAG,OAAO,CAAE,CAAC,CACtG3L,GAAG,sCAAAa,MAAA,CAA4B2K,eAAe,CAAC1M,MAAM,CAAG,CAAC,CAAG0M,eAAe,CAACnL,GAAG,CAAChC,CAAC,EAAIA,CAAC,CAACsC,IAAI,CAAC,CAACgL,IAAI,CAAC,IAAI,CAAC,CAAG,OAAO,CAAE,CAAC,CACpH3L,GAAG,kCAAAa,MAAA,CAAwB4K,aAAa,CAAC3M,MAAM,CAAG,CAAC,CAAG,WAAW,CAAG,iBAAiB,CAAE,CAAC,CAExF,KAAM,CAAA8M,EAAE,CAAG,CAAC,GAAGR,OAAO,CAAC,CACvB,KAAM,CAAAS,EAAE,CAAG,CAAC,GAAGR,OAAO,CAAC,CACvB,KAAM,CAAAS,EAAE,CAAGF,EAAE,CAACpK,MAAM,CAAC,CAAC,CAAEC,IAAI,CAACC,GAAG,CAAC,CAAC,CAAEkK,EAAE,CAAC9M,MAAM,CAAC,CAAC,CAC/C,KAAM,CAAAiN,EAAE,CAAGF,EAAE,CAACrK,MAAM,CAAC,CAAC,CAAEC,IAAI,CAACC,GAAG,CAAC,CAAC,CAAEmK,EAAE,CAAC/M,MAAM,CAAC,CAAC,CAE/C4E,YAAY,CAACjD,IAAI,EAAAtC,aAAA,CAAAA,aAAA,IACZsC,IAAI,MACPyB,KAAK,CAAE,CAAC,CACRN,OAAO,CAAE,CAAC,CACVX,MAAM,CAAE,CAAE,CAAC,CAAE,KAAK,CAAE,CAAC,CAAE,KAAM,CAAC,CAC9BK,KAAK,CAAE,CAAE,CAAC,CAAEsK,EAAE,CAAE,CAAC,CAAEC,EAAG,CAAC,CACvBhM,KAAK,CAAE,CAAE,CAAC,CAAEiM,EAAE,CAAE,CAAC,CAAEC,EAAG,CAAC,CACvBlN,KAAK,CAAE,CAAE,CAAC,CAAE,CAAEM,KAAK,CAAE,EAAE,CAAEiB,MAAM,CAAE,EAAE,CAAEwC,MAAM,CAAE,EAAG,CAAC,CAAE,CAAC,CAAE,CAAEzD,KAAK,CAAE,EAAE,CAAEiB,MAAM,CAAE,EAAE,CAAEwC,MAAM,CAAE,EAAG,CAAE,CAAC,CAC7FoJ,KAAK,CAAE,CAAE,CAAC,CAAE,EAAE,CAAE,CAAC,CAAE,EAAG,CAAC,CACvBrM,cAAc,CAAE,CACd,CAAC,CAAE,CAAE+C,UAAU,CAAE,IAAI,CAAEC,MAAM,CAAE,IAAI,CAAEW,mBAAmB,CAAE,IAAK,CAAC,CAChE,CAAC,CAAE,CAAEZ,UAAU,CAAE,IAAI,CAAEC,MAAM,CAAE,IAAI,CAAEW,mBAAmB,CAAE,IAAK,CACjE,CAAC,CACD;AACAE,OAAO,CAAE,EAAE,CACXyI,OAAO,CAAE,GAAI,CAAA3C,GAAG,CAAC,CAAC,CAAE;AACpBpL,WAAW,CAAE,CACX,CAAC,CAAE1B,wBAAwB,CAAC,CAAC,CAC7B,CAAC,CAAEA,wBAAwB,CAAC,CAC9B,CAAC,CACD6G,WAAW,CAAE,CAAE,CAAC,CAAE,CAAC,CAAE,CAAC,CAAE,CAAE,CAAC,CAC3BrD,GAAG,CAAE,2CAAAa,MAAA,CACuCiL,EAAE,CAAChN,MAAM,MAAA+B,MAAA,CAAIkL,EAAE,CAACjN,MAAM,iDAAA+B,MAAA,CAC3CuK,OAAO,CAACtM,MAAM,mDAAA+B,MAAA,CACZ6K,aAAa,CAACrL,GAAG,CAAChC,CAAC,KAAAwC,MAAA,CAAOxC,CAAC,CAACsC,IAAI,EAAAE,MAAA,CAAIxC,CAAC,CAASC,GAAG,KAAAuC,MAAA,CAAQxC,CAAC,CAASC,GAAG,MAAM,EAAE,CAAE,CAAC,CAACqN,IAAI,CAAC,IAAI,CAAC,iCAAA9K,MAAA,CAC9FyK,WAAW,CAACxM,MAAM,CAAG,CAAC,CAAGwM,WAAW,CAACjL,GAAG,CAAChC,CAAC,EAAIA,CAAC,CAACsC,IAAI,CAAC,CAACgL,IAAI,CAAC,IAAI,CAAC,CAAG,OAAO,uCAAA9K,MAAA,CACpE2K,eAAe,CAAC1M,MAAM,CAAG,CAAC,CAAG0M,eAAe,CAACnL,GAAG,CAAChC,CAAC,EAAIA,CAAC,CAACsC,IAAI,CAAC,CAACgL,IAAI,CAAC,IAAI,CAAC,CAAG,OAAO,mCAAA9K,MAAA,CACtF4K,aAAa,CAAC3M,MAAM,CAAG,CAAC,CAAG,WAAW,CAAG,iBAAiB,sLAIlF,CACDoN,aAAa,CAAE,CAAE,CAAC,CAAE,CAAC,CAAE,CAAC,CAAE,CAAE,CAAC,CAC7B;AACAC,SAAS,CAAE1L,IAAI,CAAC0L,SAAS,EAAI,CAAE,CAAC,CAAE,KAAK,CAAE,CAAC,CAAE,KAAM,CAAC,EACnD,CAAC,CACL,CAAC,CAAE,CAACpL,SAAS,CAAE2C,YAAY,CAAE1D,GAAG,CAAC,CAAC,CAElC,KAAM,CAAAoM,cAAc,CAAG/P,WAAW,CAAC,SAAC6O,aAA6B,CAAoE,IAAlE,CAAAmB,SAAoC,CAAAC,SAAA,CAAAxN,MAAA,IAAAwN,SAAA,MAAAC,SAAA,CAAAD,SAAA,IAAG,sBAAsB,CAC9H,KAAM,CAAAnB,aAAa,CAAGxO,YAAY,CAAC0P,SAAS,CAAmB,CAC/D;AACA3I,YAAY,CAACjD,IAAI,EAAAtC,aAAA,CAAAA,aAAA,IAAUsC,IAAI,MAAE0L,SAAS,CAAAhO,aAAA,CAAAA,aAAA,IAAQsC,IAAI,CAAC0L,SAAS,EAAI,CAAE,CAAC,CAAE,KAAK,CAAE,CAAC,CAAE,KAAM,CAAC,MAAG,CAAC,CAAE,IAAI,EAAE,EAAG,CAAC,CAC1GnM,GAAG,CAAC,+BAA+B,CAAC,CACpCiL,mBAAmB,CAACC,aAAa,CAAEC,aAAa,CAAC,CACnD,CAAC,CAAE,CAACF,mBAAmB,CAAC,CAAC,CAEzB,KAAM,CAAAuB,QAAQ,CAAGnQ,WAAW,CAAC,CAACoC,MAAc,CAAEgO,SAAiB,CAAE7N,IAAyB,GAAK,CAC7FrB,MAAM,CAACmP,IAAI,oBAAA7L,MAAA,CAAoBpC,MAAM,UAAAoC,MAAA,CAAQ4L,SAAS,CAAE,CAAC,CACzD/I,YAAY,CAACjD,IAAI,EAAI,CACnB;AACAzD,oBAAoB,CAACyD,IAAI,CAAC,CAE1B;AACA,GAAIA,IAAI,CAACmB,OAAO,GAAKnD,MAAM,CAAE,CAC3BuB,GAAG,6CAAAa,MAAA,CAAwCJ,IAAI,CAACmB,OAAO,kBAAAf,MAAA,CAAgBpC,MAAM,CAAE,CAAC,CAChFlB,MAAM,CAACoP,IAAI,6BAA6B,CAAC,CACzC,MAAO,CAAAlM,IAAI,CACb,CAEA,KAAM,CAAAmM,IAAI,CAAGnM,IAAI,CAACZ,KAAK,CAACpB,MAAM,CAAC,CAC/B,GAAIgO,SAAS,CAAG,CAAC,EAAIA,SAAS,EAAIG,IAAI,CAAC9N,MAAM,CAAE,CAC7CkB,GAAG,8CAAAa,MAAA,CAAyC4L,SAAS,oBAAA5L,MAAA,CAAkB+L,IAAI,CAAC9N,MAAM,CAAE,CAAC,CACrF,MAAO,CAAA2B,IAAI,CACb,CAEA;AACAT,GAAG,6BAAAa,MAAA,CAAmBpC,MAAM,OAAAoC,MAAA,CAAK+L,IAAI,CAACvM,GAAG,CAAC,CAAChC,CAAC,CAAE8J,CAAC,MAAAtH,MAAA,CAAQsH,CAAC,MAAAtH,MAAA,CAAIxC,CAAC,CAACsC,IAAI,EAAAE,MAAA,CAAIxC,CAAC,CAASC,GAAG,KAAAuC,MAAA,CAAQxC,CAAC,CAASC,GAAG,MAAM,EAAE,CAAE,CAAC,CAACqN,IAAI,CAAC,IAAI,CAAC,CAAE,CAAC,CACjI,KAAM,CAAAkB,QAAQ,CAAGD,IAAI,CAACrB,MAAM,CAAClN,CAAC,EAAKA,CAAC,CAASC,GAAG,GAAK,KAAK,CAAC,CAC3D,KAAM,CAAAwO,aAAa,CAAGF,IAAI,CAACrB,MAAM,CAAClN,CAAC,EAAKA,CAAC,CAASC,GAAG,GAAK,WAAW,CAAC,CACtE,GAAIuO,QAAQ,CAAC/N,MAAM,CAAG,CAAC,CAAE,CACvBkB,GAAG,qCAAAa,MAAA,CAA2BpC,MAAM,OAAAoC,MAAA,CAAKgM,QAAQ,CAACxM,GAAG,CAAChC,CAAC,EAAIA,CAAC,CAACsC,IAAI,CAAC,CAACgL,IAAI,CAAC,IAAI,CAAC,CAAE,CAAC,CAClF,CACA,GAAImB,aAAa,CAAChO,MAAM,CAAG,CAAC,CAAE,CAC5BkB,GAAG,2CAAAa,MAAA,CAAiCpC,MAAM,OAAAoC,MAAA,CAAKiM,aAAa,CAACzM,GAAG,CAAChC,CAAC,EAAIA,CAAC,CAACsC,IAAI,CAAC,CAACgL,IAAI,CAAC,IAAI,CAAC,CAAE,CAAC,CAC7F,CAEA,KAAM,CAAAoB,YAAY,CAAGH,IAAI,CAACH,SAAS,CAAC,CACpC,GAAI,CAAC3P,WAAW,CAAC2D,IAAI,CAAEhC,MAAM,CAAEsO,YAAY,CAAC,CAAE,CAC5C/M,GAAG,CAAC,mDAAmD,CAAC,CACxD,MAAO,CAAAS,IAAI,CACb,CAEA,KAAM,CAAEX,IAAK,CAAC,CAAGjD,YAAY,CAAC4D,IAAI,CAAEhC,MAAM,CAAEsO,YAAY,CAAC,CACzD,KAAM,CAAAC,MAAM,CAAGvM,IAAI,CAAC4B,YAAY,CAAC5D,MAAM,CAAC,CAExC,KAAM,CAAA2E,QAAQ,CAAAjF,aAAA,IAAQsC,IAAI,CAAE,CAE5B;AACA2C,QAAQ,CAACf,YAAY,CAAC5D,MAAM,CAAC,CAAGgD,IAAI,CAACwL,GAAG,CAAC,CAAC,CAAE7J,QAAQ,CAACf,YAAY,CAAC5D,MAAM,CAAC,CAAGqB,IAAI,CAAC,CACjFE,GAAG,qCAAAa,MAAA,CAA2BmM,MAAM,WAAAnM,MAAA,CAAIuC,QAAQ,CAACf,YAAY,CAAC5D,MAAM,CAAC,CAAE,CAAC,CAExE;AACAT,WAAW,CAACoF,QAAQ,CAAE3E,MAAM,CAAC,CAC7B,KAAM,CAAAyO,EAAE,CAAG9J,QAAQ,CAAClF,WAAW,CAACO,MAAM,CAAC,CAEvC;AACA;AAEA;AACA,KAAM,CAAA0O,OAAO,CAAG,CAAC,GAAG/J,QAAQ,CAACvD,KAAK,CAACpB,MAAM,CAAC,CAAC,CAC3C,KAAM,CAAC2O,UAAU,CAAC,CAAGD,OAAO,CAAC3L,MAAM,CAACiL,SAAS,CAAE,CAAC,CAAC,CACjDrJ,QAAQ,CAACvD,KAAK,CAAA1B,aAAA,CAAAA,aAAA,IAAQiF,QAAQ,CAACvD,KAAK,MAAE,CAACpB,MAAM,EAAG0O,OAAO,EAAE,CAEzD;AACA,GAAKC,UAAU,CAAShJ,GAAG,CAAE,CAC3B,GAAIiF,aAAa,CAACzH,OAAO,CAACyL,GAAG,CAAED,UAAU,CAAShJ,GAAG,CAAC,CAAE,CACtDpE,GAAG,kDAAAa,MAAA,CAAyCuM,UAAU,CAAShJ,GAAG,CAAE,CAAC,CACrE,MAAO,CAAA3D,IAAI,CACb,CACA4I,aAAa,CAACzH,OAAO,CAAC0L,GAAG,CAAEF,UAAU,CAAShJ,GAAG,CAAC,CACpD,CAEA;AACApE,GAAG,0CAAAa,MAAA,CAAgCpC,MAAM,aAAAoC,MAAA,CAAYuM,UAAU,CAASzM,IAAI,OAAAE,MAAA,CAAKuM,UAAU,CAAC7O,IAAI,eAAAsC,MAAA,CAAcuM,UAAU,CAASnO,IAAI,EAAI,WAAW,CAAE,CAAC,CAEvJ;AACA,KAAM,CAAAsO,YAAY,CAAGnK,QAAQ,CAACvE,KAAK,CAACJ,MAAM,CAAC,CAC3C,KAAM,CAAA+O,kBAAkB,CAAGD,YAAY,CAACpO,KAAK,CAACoM,MAAM,CAAC7M,IAAI,EAAIA,IAAI,CAACH,IAAI,GAAK,MAAM,CAAC,CAClFyB,GAAG,gFAAAa,MAAA,CAAmE2M,kBAAkB,CAACnN,GAAG,CAAChC,CAAC,EAAKA,CAAC,CAASsC,IAAI,CAAC,CAACgL,IAAI,CAAC,IAAI,CAAC,CAAE,CAAC,CAEhI;AAEA;AACA,GAAIyB,UAAU,CAAC7O,IAAI,GAAK,KAAK,CAAE,CAC7B,KAAM,CAAAkP,OAAO,CAAGL,UAAiB,CACjC,KAAM,CAAAM,UAAU,CAAG9O,IAAI,GAAK6O,OAAO,CAACnP,GAAG,GAAK,iBAAiB,EAAImP,OAAO,CAACnP,GAAG,GAAK,gBAAgB,EAAImP,OAAO,CAACnP,GAAG,GAAK,UAAU,CAAG,QAAQ,CAAG,OAAO,CAAC,CAErJ,GAAI8E,QAAQ,CAACvE,KAAK,CAACJ,MAAM,CAAC,CAACiP,UAAU,CAAC,CAAC5O,MAAM,EAAI,CAAC,CAAE,CAClDkB,GAAG,oCAAAa,MAAA,CAA+B6M,UAAU,gBAAA7M,MAAA,CAAcuC,QAAQ,CAACvE,KAAK,CAACJ,MAAM,CAAC,CAACiP,UAAU,CAAC,CAAC5O,MAAM,MAAI,CAAC,CACxG,MAAO,CAAA2B,IAAI,CACb,CAEA;AACA,KAAM,CAAAkN,SAAS,CAAG,CAAC,GAAGvK,QAAQ,CAACvE,KAAK,CAACJ,MAAM,CAAC,CAACiP,UAAU,CAAC,CAAEN,UAAU,CAAC,CACrE,KAAM,CAAAQ,iBAAiB,CAAAzP,aAAA,CAAAA,aAAA,IAAQiF,QAAQ,CAACvE,KAAK,CAACJ,MAAM,CAAC,MAAE,CAACiP,UAAU,EAAGC,SAAS,EAAS,CACvFvK,QAAQ,CAACvE,KAAK,CAAAV,aAAA,CAAAA,aAAA,IAAQiF,QAAQ,CAACvE,KAAK,MAAE,CAACJ,MAAM,EAAGmP,iBAAiB,EAAS,CAE1E;AACA,GAAI,CACF,GAAIF,UAAU,GAAK,QAAQ,CAAE,CAC3B,KAAM,CAAAvI,KAAK,CAAGxH,kBAAkB,CAACc,MAAM,GAAK,CAAC,CAAG,QAAQ,CAAG,UAAU,CAAC,CACtE,KAAM,CAAAoP,SAAS,CAAGzK,QAAQ,CAACvE,KAAK,CAACJ,MAAM,CAAC,CAAC2B,MAAM,CAACtB,MAAM,CAAG,CAAC,CAC1D,KAAM,CAAAgP,QAAQ,CAAG3I,KAAK,CAAC0I,SAAS,CAAC,EAAI1I,KAAK,CAAC,CAAC,CAAC,EAAI,CAAEE,CAAC,CAAE,GAAG,CAAG,GAAG,CAAEC,CAAC,CAAE,GAAG,CAAG,GAAG,CAAEC,CAAC,CAAE,GAAG,CAAEC,CAAC,CAAE,GAAI,CAAC,CAC/F,KAAM,CAAAK,EAAE,CAAGiI,QAAQ,CAACzI,CAAC,CAAGyI,QAAQ,CAACvI,CAAC,CAAG,CAAC,CACtC,KAAM,CAAAO,EAAE,CAAGgI,QAAQ,CAACxI,CAAC,CAAGwI,QAAQ,CAACtI,CAAC,CAAG,CAAC,CAEtC;AACA,GAAI,CAAE5B,aAAa,SAAbA,aAAa,iBAAbA,aAAa,CAAE+B,cAAc,CAACE,EAAE,CAAEC,EAAE,CAAE,EAAE,CAAC,CAAE,CAAE,MAAOyB,CAAC,CAAE,CAAC,CAC9D,GAAI,KAAAwG,eAAA,CAAEnK,aAAa,SAAbA,aAAa,iBAAbA,aAAa,CAAEgC,QAAQ,EAAAmI,eAAA,CAACX,UAAU,CAAChJ,GAAG,UAAA2J,eAAA,UAAAA,eAAA,CAAIX,UAAU,CAAC/I,EAAE,CAAC,CAAE,CAAE,MAAOkD,CAAC,CAAE,CAAC,CAE7E;AACA,KAAM,CAAAxB,MAAM,CAAGC,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC,CAC/C,GAAIF,MAAM,CAAE,CACV;AACA,GAAI,CACF,KAAM,CAAAiI,GAAG,IAAAnN,MAAA,CAAMpC,MAAM,KAAI,QAAQ,MAAAoC,MAAA,CAAIgN,SAAS,CAAE,CAChD,KAAM,CAAAI,IAAI,CAAIxG,MAAM,CAASyG,mBAAmB,EAAKzG,MAAM,CAAS0G,iBAAiB,CACrF,GAAI,MAAO,CAAAF,IAAI,GAAK,UAAU,CAAEA,IAAI,CAACD,GAAG,CAAC,CAC3C,CAAE,MAAOzG,CAAC,CAAE,CAAC,CACb;AACA,GAAI,KAAA6G,qBAAA,CAAAC,sBAAA,CAAAC,gBAAA,CAAE1K,aAAa,SAAbA,aAAa,kBAAAwK,qBAAA,CAAbxK,aAAa,CAAEuD,YAAY,UAAAiH,qBAAA,kBAAAC,sBAAA,CAA3BD,qBAAA,CAA6BxM,OAAO,UAAAyM,sBAAA,iBAApCA,sBAAA,CAAsCrM,IAAI,CAAC,CAAEoC,GAAG,EAAAkK,gBAAA,CAAElB,UAAU,CAAChJ,GAAG,UAAAkK,gBAAA,UAAAA,gBAAA,CAAIlB,UAAU,CAAC/I,EAAE,CAAE+C,OAAO,CAAEC,WAAW,CAACC,GAAG,CAAC,CAAC,CAAEL,QAAQ,CAAE,GAAI,CAAC,CAAC,CAAE,CAAE,MAAOM,CAAC,CAAE,CAAC,CACtJ,CACF,CACF,CAAE,MAAOA,CAAC,CAAE,CACVrD,OAAO,CAACC,KAAK,CAAC,kCAAkC,CAAEoD,CAAC,CAAC,CACtD,CACAvH,GAAG,wBAAAa,MAAA,CAAcpC,MAAM,OAAAoC,MAAA,CAAKuM,UAAU,CAACzM,IAAI,kBAAAE,MAAA,CAAgB6M,UAAU,GAAK,QAAQ,CAAG,WAAW,CAAG,gBAAgB,CAAE,CAAC,CAEtH;AACAtQ,sBAAsB,CACpBgG,QAAQ,CACR3E,MAAM,CACN2O,UAAU,CACTmB,KAAK,EAAK,CACT,GAAI,CAACnL,QAAQ,CAACqH,YAAY,CAAErH,QAAQ,CAACqH,YAAY,CAAG,EAAE,CACtDrH,QAAQ,CAACqH,YAAY,CAACzI,IAAI,CAACuM,KAAK,CAAC,CACnC,CAAC,CACDvO,GACF,CAAC,CAED;AACAD,mBAAmB,CAACqD,QAAQ,CAAE3E,MAAM,CAAEuB,GAAG,CAAC,CAE1C;AACAjD,kBAAkB,CAACqG,QAAQ,CAAE3E,MAAM,CAAE2O,UAAU,CAAC,CAChD;AACA,GAAI,CAAEvJ,eAAe,CAACuJ,UAAU,CAAEhK,QAAQ,CAAC,CAAE,CAAE,MAAOmE,CAAC,CAAE,CAAC,CAC1D;AACA3J,kBAAkB,CAACwF,QAAQ,CAAC,CAC5B;AACA,GAAIA,QAAQ,CAACqH,YAAY,EAAIrH,QAAQ,CAACqH,YAAY,CAAC3L,MAAM,CAAG,CAAC,CAAE,CAC7D,GAAI,CAAEkB,GAAG,gDAAAa,MAAA,CAAgD2N,IAAI,CAACC,SAAS,CAAErL,QAAQ,CAACqH,YAAY,CAASpK,GAAG,CAAEkH,CAAK,GAAI,CAACtI,IAAI,CAACsI,CAAC,CAACtI,IAAI,CAAEyP,MAAM,CAACnH,CAAC,CAACmH,MAAM,CAAEhE,GAAG,CAACnD,CAAC,CAACmD,GAAG,CAAC,CAAC,CAAC,CAACnH,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAE,CAAC,CAAE,CAAE,MAAMgE,CAAC,CAAE,CAAC,CAC9LvH,GAAG,2CAAAa,MAAA,CAA2CuC,QAAQ,CAACf,YAAY,CAAC,CAAC,CAAC,SAAAxB,MAAA,CAAOuC,QAAQ,CAACf,YAAY,CAAC,CAAC,CAAC,CAAE,CAAC,CACxGpF,YAAY,CAACmG,QAAQ,CAAEA,QAAQ,CAACqH,YAAY,CAAC,CAC7CrH,QAAQ,CAACqH,YAAY,CAAG,EAAE,CAC1B;AACA9G,kBAAkB,SAAlBA,kBAAkB,iBAAlBA,kBAAkB,CAAG,CAAC,CACtB3D,GAAG,0CAAAa,MAAA,CAA0CuC,QAAQ,CAACf,YAAY,CAAC,CAAC,CAAC,SAAAxB,MAAA,CAAOuC,QAAQ,CAACf,YAAY,CAAC,CAAC,CAAC,CAAE,CAAC,CACzG,CAEA;AACA,GAAK+K,UAAU,CAAShJ,GAAG,CAAEiF,aAAa,CAACzH,OAAO,CAAC+M,MAAM,CAAEvB,UAAU,CAAShJ,GAAG,CAAC,CAElF;AACAhH,sBAAsB,CACpBgG,QAAQ,CACR3E,MAAM,CACN2O,UAAU,CACT7F,CAAC,OAAAqH,qBAAA,OAAK,EAAAA,qBAAA,CAACxL,QAAQ,CAACqH,YAAY,UAAAmE,qBAAA,UAAAA,qBAAA,CAArBxL,QAAQ,CAACqH,YAAY,CAAK,EAAE,EAAEzI,IAAI,CAACuF,CAAC,CAAC,GAC5CsH,CAAC,OAAAC,sBAAA,OAAK,EAAAA,sBAAA,CAAC1L,QAAQ,CAACqH,YAAY,UAAAqE,sBAAA,UAAAA,sBAAA,CAArB1L,QAAQ,CAACqH,YAAY,CAAK,EAAE,EAAEzI,IAAI,CAAC,CAAE/C,IAAI,CAAE,KAAK,CAAEyL,GAAG,CAAEmE,CAAE,CAAC,CAAC,EACrE,CAAC,CAED;AACA,GAAIzB,UAAU,CAAC7O,IAAI,GAAK,KAAK,EAAK6O,UAAU,CAAS5M,SAAS,EAAI,CAAC,CAAE,CACnE,KAAM,CAAAuO,QAAQ,CAAGtQ,MAAM,GAAK,CAAC,CAAG,CAAC,CAAG,CAAC,CACrC,KAAM,CAAAuQ,aAAa,CAAG5L,QAAQ,CAACvE,KAAK,CAACkQ,QAAQ,CAAC,CAC9C,KAAM,CAAAE,eAAe,CAAGD,aAAa,CAAC7P,KAAK,CAAC0I,IAAI,CAACnJ,IAAI,EACnDA,IAAI,CAACH,IAAI,GAAK,MAAM,EAAKG,IAAI,CAASiC,IAAI,GAAK,kBACjD,CAAC,CAED,GAAIsO,eAAe,CAAE,CACnB;AACA,GAAI7L,QAAQ,CAAC9B,KAAK,CAACyN,QAAQ,CAAC,CAACjQ,MAAM,CAAG,CAAC,CAAE,CACvC,KAAM,CAAAgD,SAAS,CAAGsB,QAAQ,CAAC9B,KAAK,CAACyN,QAAQ,CAAC,CAAChN,KAAK,CAAC,CAAC,CAClD,GAAID,SAAS,CAAE,CACbsB,QAAQ,CAACvD,KAAK,CAACkP,QAAQ,CAAC,CAAC/M,IAAI,CAACF,SAAS,CAAC,CACxC9B,GAAG,2CAAAa,MAAA,CAAiCkO,QAAQ,qBAAAlO,MAAA,CAAmBiB,SAAS,CAACnB,IAAI,qDAA8C,CAAC,CAC9H,CACF,CACF,CACF,CAQA;AACA,KAAM,CAAA4M,YAAY,CAAGnK,QAAQ,CAACvE,KAAK,CAACJ,MAAM,CAAC,CAC3C,KAAM,CAAAyQ,eAAe,CAAG3B,YAAY,CAACnN,MAAM,CAACC,GAAG,CAAChC,CAAC,KAAAwC,MAAA,CAAOxC,CAAC,CAACsC,IAAI,MAAAE,MAAA,CAAIxC,CAAC,CAACE,IAAI,GAAK,KAAK,CAAIF,CAAC,CAASmC,SAAS,CAAG,GAAG,CAAG,GAAG,KAAG,CAAC,CACzH,KAAM,CAAA2O,oBAAoB,CAAG5B,YAAY,CAACpO,KAAK,CAACkB,GAAG,CAAChC,CAAC,KAAAwC,MAAA,CAAOxC,CAAC,CAACsC,IAAI,MAAAE,MAAA,CAAIxC,CAAC,CAACE,IAAI,GAAK,MAAM,CAAIF,CAAC,CAASC,GAAG,EAAI,GAAG,CAAG,GAAG,KAAG,CAAC,CACzH0B,GAAG,kBAAAa,MAAA,CAAQpC,MAAM,wBAAAoC,MAAA,CAAsBqO,eAAe,CAACvD,IAAI,CAAC,IAAI,CAAC,4BAAA9K,MAAA,CAAuBsO,oBAAoB,CAACxD,IAAI,CAAC,IAAI,CAAC,KAAG,CAAC,CAEnH;AACR3L,GAAG,+CAAAa,MAAA,CAAqCuM,UAAU,CAACzM,IAAI,YAAAE,MAAA,CAAWuM,UAAU,CAAS9O,GAAG,EAAI,UAAU,aAAAuC,MAAA,CAAW6M,UAAU,aAAA7M,MAAA,CAAWuM,UAAU,CAAC7O,IAAI,CAAE,CAAC,CAExJ,GAAK6O,UAAU,CAAS9O,GAAG,GAAK,KAAK,CAAE,CACrC0B,GAAG,qCAAAa,MAAA,CAA2BuM,UAAU,CAACzM,IAAI,+EAA6E,CAAC,CAE3H;AACA,KAAM,CAAAyO,aAAa,CAAG7B,YAAY,CAACnN,MAAM,CAACyH,IAAI,CAACnJ,IAAI,EACjDA,IAAI,CAACH,IAAI,GAAK,KAAK,EAAKG,IAAI,CAASkC,MAAM,GAAK,WAClD,CAAC,CAED,GAAIwO,aAAa,CAAE,CACjBpP,GAAG,oHAAAa,MAAA,CAAwDuM,UAAU,CAACzM,IAAI,iDAA0C,CAAC,CACvH,CACF,CAEF,CAAC,IAAM,IAAIyM,UAAU,CAAC7O,IAAI,GAAK,MAAM,CAAE,KAAA8Q,KAAA,CAAAC,MAAA,CACrC,KAAM,CAAAC,QAAQ,CAAGnC,UAAiB,CAClC,KAAM,CAAAoC,OAAO,CAAGxQ,MAAM,CAACuQ,QAAQ,CAACtQ,IAAI,EAAI,EAAE,CAAC,CAACC,WAAW,CAAC,CAAC,CACzD,KAAM,CAAAuQ,YAAY,CAAG,YAAY,CAACC,IAAI,CAACF,OAAO,CAAC,CAAE;AAEvC;AACV,GAAIpC,UAAU,CAAC7O,IAAI,GAAK,MAAM,GAAA8Q,KAAA,CAAKjC,UAAU,CAASnO,IAAI,UAAAoQ,KAAA,WAAxBA,KAAA,CAA0BnQ,WAAW,CAAC,CAAC,CAACI,QAAQ,CAAC,gBAAgB,CAAC,CAAE,CACpG,KAAM,CAAAqQ,QAAQ,CAAGvM,QAAQ,CAACvE,KAAK,CAACJ,MAAM,CAAC,CACvC,KAAM,CAAAmR,UAAU,CAAG,CAAC,GAAGD,QAAQ,CAACvP,MAAM,CAAE,GAAGuP,QAAQ,CAACxQ,KAAK,CAAC,CAACoM,MAAM,CAAClN,CAAC,EAAIA,CAAC,CAACE,IAAI,GAAK,KAAK,CAAqB,CAC5G,KAAM,CAAAsR,MAAM,CAAGD,UAAU,CAACA,UAAU,CAAC9Q,MAAM,CAAG,CAAC,CAAC,CAAE;AAClD,GAAI+Q,MAAM,CAAE,CACTA,MAAM,CAASC,SAAS,CAAG,IAAI,CAChC9P,GAAG,uBAAAa,MAAA,CAAQgP,MAAM,CAAClP,IAAI,iCAA4B,CAAC,CACrD,CAAC,IAAM,CACLX,GAAG,CAAC,6EAA6E,CAAC,CACpF,CACA;AACAoD,QAAQ,CAACI,OAAO,CAACxB,IAAI,CAACoL,UAAU,CAAC,CACjC,MAAO,CAAAhK,QAAQ,CACjB,CAEA;AACA,GAAIoM,OAAO,CAAClQ,QAAQ,CAAC,WAAW,CAAC,CAAE,CACjC;AACA;AACA,KAAM,CAAAG,aAAsC,CAAI8P,QAAQ,CAAC7P,aAAa,GAAiC,CAAC6P,QAAQ,CAACnQ,IAAI,EAAI,EAAE,EAAEE,QAAQ,CAAC,QAAQ,CAAC,CAAG,QAAQ,CAAG,YAAY,CAAC,CAC1K,GAAI,CAAC8D,QAAQ,CAACzD,cAAc,CAAClB,MAAM,CAAC,CAACgB,aAAa,CAAC,CAAE,CACnD;AACA2D,QAAQ,CAACzD,cAAc,CAAClB,MAAM,CAAC,CAAAN,aAAA,CAAAA,aAAA,IAAQiF,QAAQ,CAACzD,cAAc,CAAClB,MAAM,CAAC,MAAE,CAACgB,aAAa,EAAAtB,aAAA,IAAQiP,UAAU,CAAE,EAAS,CACnHpN,GAAG,KAAAa,MAAA,CAAKpC,MAAM,aAAAoC,MAAA,CAAWuM,UAAU,CAACzM,IAAI,uCAAAE,MAAA,CAAqCpB,aAAa,KAAG,CAAC,CAChG,CAAC,IAAM,KAAAsQ,qBAAA,CACL/P,GAAG,4CAAAa,MAAA,CAAkCpB,aAAa,kBAAAoB,MAAA,EAAAkP,qBAAA,CAAgB3M,QAAQ,CAACzD,cAAc,CAAClB,MAAM,CAAC,CAACgB,aAAa,CAAC,UAAAsQ,qBAAA,iBAA9CA,qBAAA,CAAgDpP,IAAI,CAAE,CAAC,CACzH;AACAyC,QAAQ,CAACvD,KAAK,CAACpB,MAAM,CAAC,CAAG,CAAC,GAAG2E,QAAQ,CAACvD,KAAK,CAACpB,MAAM,CAAC,CAAE2O,UAAU,CAAC,CAChEhK,QAAQ,CAACf,YAAY,CAAC5D,MAAM,CAAC,EAAIqB,IAAI,CACrC,MAAO,CAAAsD,QAAQ,CACjB,CAEA;AACArG,kBAAkB,CAACqG,QAAQ,CAAE3E,MAAM,CAAE2O,UAAU,CAAC,CAChD;AACAxP,kBAAkB,CAACwF,QAAQ,CAAC,CAC5B;AACA,GAAIA,QAAQ,CAACqH,YAAY,EAAIrH,QAAQ,CAACqH,YAAY,CAAC3L,MAAM,CAAG,CAAC,CAAE,CAC7D,GAAI,CAAEkB,GAAG,oDAAAa,MAAA,CAAoD2N,IAAI,CAACC,SAAS,CAAErL,QAAQ,CAACqH,YAAY,CAASpK,GAAG,CAAEkH,CAAK,GAAI,CAACtI,IAAI,CAACsI,CAAC,CAACtI,IAAI,CAAEyP,MAAM,CAACnH,CAAC,CAACmH,MAAM,CAAEhE,GAAG,CAACnD,CAAC,CAACmD,GAAG,CAAC,CAAC,CAAC,CAACnH,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAE,CAAC,CAAE,CAAE,MAAMgE,CAAC,CAAE,CAAC,CAClMvH,GAAG,+CAAAa,MAAA,CAA+CuC,QAAQ,CAACf,YAAY,CAAC,CAAC,CAAC,SAAAxB,MAAA,CAAOuC,QAAQ,CAACf,YAAY,CAAC,CAAC,CAAC,CAAE,CAAC,CAC5GpF,YAAY,CAACmG,QAAQ,CAAEA,QAAQ,CAACqH,YAAY,CAAC,CAC7CrH,QAAQ,CAACqH,YAAY,CAAG,EAAE,CAC1B;AACA9G,kBAAkB,SAAlBA,kBAAkB,iBAAlBA,kBAAkB,CAAG,CAAC,CACtB3D,GAAG,8CAAAa,MAAA,CAA8CuC,QAAQ,CAACf,YAAY,CAAC,CAAC,CAAC,SAAAxB,MAAA,CAAOuC,QAAQ,CAACf,YAAY,CAAC,CAAC,CAAC,CAAE,CAAC,CAC7G,CAEA;AACAjF,sBAAsB,CACpBgG,QAAQ,CACR3E,MAAM,CACN2O,UAAU,CACT7F,CAAC,OAAAyI,sBAAA,OAAK,EAAAA,sBAAA,CAAC5M,QAAQ,CAACqH,YAAY,UAAAuF,sBAAA,UAAAA,sBAAA,CAArB5M,QAAQ,CAACqH,YAAY,CAAK,EAAE,EAAEzI,IAAI,CAACuF,CAAC,CAAC,GAC5CsH,CAAC,OAAAoB,sBAAA,OAAK,EAAAA,sBAAA,CAAC7M,QAAQ,CAACqH,YAAY,UAAAwF,sBAAA,UAAAA,sBAAA,CAArB7M,QAAQ,CAACqH,YAAY,CAAK,EAAE,EAAEzI,IAAI,CAAC,CAAE/C,IAAI,CAAE,KAAK,CAAEyL,GAAG,CAAEmE,CAAE,CAAC,CAAC,EACrE,CAAC,CAED,MAAO,CAAAzL,QAAQ,CACjB,CAEA;AACA,GAAIqM,YAAY,CAAE,CAChB,GAAI,CAACF,QAAQ,CAAChQ,SAAS,CAAE,CACvBS,GAAG,sCAAAa,MAAA,CAAiC0O,QAAQ,CAAC5O,IAAI,CAAE,CAAC,CACtD,CAAC,IAAM,CACLX,GAAG,uBAAAa,MAAA,CAAa0O,QAAQ,CAAC5O,IAAI,OAAAE,MAAA,CAAK7B,MAAM,CAACuQ,QAAQ,CAAChQ,SAAS,CAAC,cAAY,CAAC,CAC3E,CAEA;AACA,GAAIiQ,OAAO,CAAClQ,QAAQ,CAAC,QAAQ,CAAC,CAAE,CAC9B;AACA,GAAI8D,QAAQ,CAACvE,KAAK,CAACJ,MAAM,CAAC,CAACmE,MAAM,CAAC9D,MAAM,CAAG,CAAC,CAAE,KAAAoR,qBAAA,CAC5ClQ,GAAG,2DAAAa,MAAA,EAAAqP,qBAAA,CAAsD9M,QAAQ,CAACvE,KAAK,CAACJ,MAAM,CAAC,CAACmE,MAAM,CAAC,CAAC,CAAC,UAAAsN,qBAAA,iBAAhCA,qBAAA,CAAkCvP,IAAI,+BAA6B,CAAC,CAC7H;AACAyC,QAAQ,CAACvD,KAAK,CAACpB,MAAM,CAAC,CAAG,CAAC,GAAG2E,QAAQ,CAACvD,KAAK,CAACpB,MAAM,CAAC,CAAE2O,UAAU,CAAC,CAChE;AACAhK,QAAQ,CAACf,YAAY,CAAC5D,MAAM,CAAC,EAAIqB,IAAI,CACrC;AACA,MAAO,CAAAsD,QAAQ,CACjB,CAEA;AACAA,QAAQ,CAACvE,KAAK,CAACJ,MAAM,CAAC,CAACmE,MAAM,CAAG,CAACwK,UAAU,CAAC,CAC5CpN,GAAG,kBAAAa,MAAA,CAAQpC,MAAM,WAAAoC,MAAA,CAASuM,UAAU,CAACzM,IAAI,gEAA2D,CAAC,CAErG;AACA,GAAI,CAACyC,QAAQ,CAACqH,YAAY,CAAErH,QAAQ,CAACqH,YAAY,CAAG,EAAE,CACtDrH,QAAQ,CAACqH,YAAY,CAACzI,IAAI,CAAC,CAAE/C,IAAI,CAAE,KAAK,CAAEyL,GAAG,2CAAA7J,MAAA,CAAkCuM,UAAU,CAACzM,IAAI,8CAA6C,CAAC,CAAC,CAC7I,MAAO,CAAAyC,QAAQ,CACjB,CAEA;AACA;AACAA,QAAQ,CAACI,OAAO,CAAG,CAAC,GAAGJ,QAAQ,CAACI,OAAO,CAAE4J,UAAU,CAAC,CACpDpN,GAAG,KAAAa,MAAA,CAAKpC,MAAM,yBAAAoC,MAAA,CAAuBuM,UAAU,CAACzM,IAAI,CAAE,CAAC,CAE5C;AACXuD,OAAO,CAAClE,GAAG,CAAC,gDAAgD,CAAEoN,UAAU,CAACzM,IAAI,CAAE,YAAY,CAAGyM,UAAU,CAAS7N,SAAS,CAAC,CAC1HxC,kBAAkB,CAACqG,QAAQ,CAAE3E,MAAM,CAAE2O,UAAU,CAAC,CAChD;AACAxP,kBAAkB,CAACwF,QAAQ,CAAC,CAC5B;AACF,GAAIA,QAAQ,CAACqH,YAAY,EAAIrH,QAAQ,CAACqH,YAAY,CAAC3L,MAAM,CAAG,CAAC,CAAE,CAC7D7B,YAAY,CAACmG,QAAQ,CAAEA,QAAQ,CAACqH,YAAY,CAAC,CAC7CrH,QAAQ,CAACqH,YAAY,CAAG,EAAE,CAC1B;AACA9G,kBAAkB,SAAlBA,kBAAkB,iBAAlBA,kBAAkB,CAAG,CAAC,CACxB,CAEE;AACAvG,sBAAsB,CACpBgG,QAAQ,CACR3E,MAAM,CACN2O,UAAU,CACT7F,CAAC,OAAA4I,sBAAA,OAAK,EAAAA,sBAAA,CAAC/M,QAAQ,CAACqH,YAAY,UAAA0F,sBAAA,UAAAA,sBAAA,CAArB/M,QAAQ,CAACqH,YAAY,CAAK,EAAE,EAAEzI,IAAI,CAACuF,CAAC,CAAC,GAC5CsH,CAAC,OAAAuB,sBAAA,OAAK,EAAAA,sBAAA,CAAChN,QAAQ,CAACqH,YAAY,UAAA2F,sBAAA,UAAAA,sBAAA,CAArBhN,QAAQ,CAACqH,YAAY,CAAK,EAAE,EAAEzI,IAAI,CAAC,CAAE/C,IAAI,CAAE,KAAK,CAAEyL,GAAG,CAAEmE,CAAE,CAAC,CAAC,EACrE,CAAC,CAED;AACDxR,kBAAkB,CAAC+F,QAAQ,CAAC,CAE5B;AAEA;AACA;AACA;AAGA,MAAO,CAAAA,QAAQ,CACjB,CAEA;AACA,GACEoM,OAAO,GAAK,sBAAsB,EAClCA,OAAO,GAAK,uBAAuB,EACnCA,OAAO,GAAK,gBAAgB,EAC5BA,OAAO,GAAK,QAAQ,CACpB,CACA,GAAIpM,QAAQ,CAACvE,KAAK,CAACJ,MAAM,CAAC,CAACU,KAAK,CAACL,MAAM,CAAG,CAAC,CAAE,CAC3C,KAAM,CAAAuR,UAAU,CAAG,CAAC,GAAGjN,QAAQ,CAACvE,KAAK,CAACJ,MAAM,CAAC,CAACU,KAAK,CAAEiO,UAAU,CAAC,CAChE,KAAM,CAAAQ,iBAAiB,CAAAzP,aAAA,CAAAA,aAAA,IAAQiF,QAAQ,CAACvE,KAAK,CAACJ,MAAM,CAAC,MAAEU,KAAK,CAAEkR,UAAU,EAAS,CACjFjN,QAAQ,CAACvE,KAAK,CAAAV,aAAA,CAAAA,aAAA,IAAQiF,QAAQ,CAACvE,KAAK,MAAE,CAACJ,MAAM,EAAGmP,iBAAiB,EAAS,CAC1E5N,GAAG,KAAAa,MAAA,CAAKpC,MAAM,aAAAoC,MAAA,CAAWuM,UAAU,CAACzM,IAAI,yBAAoB,CAAC,CAE7D;AACAZ,mBAAmB,CAACqD,QAAQ,CAAE3E,MAAM,CAAEuB,GAAG,CAAC,CAE7B;AACZjD,kBAAkB,CAACqG,QAAQ,CAAE3E,MAAM,CAAE2O,UAAU,CAAC,CAChD;AACAxP,kBAAkB,CAACwF,QAAQ,CAAC,CAChC,GAAIA,QAAQ,CAACqH,YAAY,EAAIrH,QAAQ,CAACqH,YAAY,CAAC3L,MAAM,CAAG,CAAC,CAAE,CAC7D7B,YAAY,CAACmG,QAAQ,CAAEA,QAAQ,CAACqH,YAAY,CAAC,CAC7CrH,QAAQ,CAACqH,YAAY,CAAG,EAAE,CAC1B;AACA9G,kBAAkB,SAAlBA,kBAAkB,iBAAlBA,kBAAkB,CAAG,CAAC,CACxB,CAEI;AACAvG,sBAAsB,CACpBgG,QAAQ,CACR3E,MAAM,CACN2O,UAAU,CACT7F,CAAC,OAAA+I,sBAAA,OAAK,EAAAA,sBAAA,CAAClN,QAAQ,CAACqH,YAAY,UAAA6F,sBAAA,UAAAA,sBAAA,CAArBlN,QAAQ,CAACqH,YAAY,CAAK,EAAE,EAAEzI,IAAI,CAACuF,CAAC,CAAC,GAC5CsH,CAAC,OAAA0B,sBAAA,OAAK,EAAAA,sBAAA,CAACnN,QAAQ,CAACqH,YAAY,UAAA8F,sBAAA,UAAAA,sBAAA,CAArBnN,QAAQ,CAACqH,YAAY,CAAK,EAAE,EAAEzI,IAAI,CAAC,CAAE/C,IAAI,CAAE,KAAK,CAAEyL,GAAG,CAAEmE,CAAE,CAAC,CAAC,EACrE,CAAC,CAIF;AAEA;AACA,KAAM,CAAA2B,iBAAiB,CAAIC,QAAgB,EAAK,CAC9C,GAAIrN,QAAQ,CAAC9B,KAAK,CAAC7C,MAAM,CAAC,CAACK,MAAM,CAAG,CAAC,CAAE,CACrC,KAAM,CAAAgD,SAAS,CAAGsB,QAAQ,CAAC9B,KAAK,CAAC7C,MAAM,CAAC,CAACsD,KAAK,CAAC,CAAC,CAChD,GAAID,SAAS,CAAE,CACbsB,QAAQ,CAACvD,KAAK,CAACpB,MAAM,CAAC,CAACuD,IAAI,CAACF,SAAS,CAAC,CACtC9B,GAAG,iBAAAa,MAAA,CAAO4P,QAAQ,CAACC,WAAW,CAAC,CAAC,gCAAA7P,MAAA,CAA8BiB,SAAS,CAACnB,IAAI,KAAG,CAAC,CAChF,MAAO,KAAI,CACb,CACF,CACA,MAAO,MAAK,CACd,CAAC,CAED,GAAI4O,QAAQ,CAAC5O,IAAI,GAAK,WAAW,CAAE,CACjC;AACA6P,iBAAiB,CAAC,WAAW,CAAC,CAC9B;AAEF,CAAC,IAAM,IAAIjB,QAAQ,CAAC5O,IAAI,GAAK,YAAY,CAAE,CACzC;AACA6P,iBAAiB,CAAC,YAAY,CAAC,CAC/B;AAEF,CAAC,IAAM,IAAIjB,QAAQ,CAAC5O,IAAI,GAAK,YAAY,CAAE,CACzC;AACA6P,iBAAiB,CAAC,YAAY,CAAC,CAC/B,KAAM,CAAAG,WAAW,CAAGvN,QAAQ,CAACvE,KAAK,CAACJ,MAAM,CAAC,CAACU,KAAK,CAACe,IAAI,CAAC7B,CAAC,EACrDA,CAAC,CAACE,IAAI,GAAK,MAAM,EAAKF,CAAC,CAASC,GAAG,GAAK,WAC1C,CAAC,CACD,GAAIqS,WAAW,CAAE,CACfvN,QAAQ,CAACf,YAAY,CAAC5D,MAAM,CAAC,EAAI,CAAC,CAClCuB,GAAG,8DAAAa,MAAA,CAAoDuC,QAAQ,CAACf,YAAY,CAAC5D,MAAM,CAAC,CAAG,CAAC,aAAAoC,MAAA,CAAMuC,QAAQ,CAACf,YAAY,CAAC5D,MAAM,CAAC,KAAG,CAAC,CACjI,CAEF,CAAC,IAAM,IAAI8Q,QAAQ,CAAC5O,IAAI,GAAK,gBAAgB,CAAE,CAC7C;AACA6P,iBAAiB,CAAC,gBAAgB,CAAC,CACnC;AACAxQ,GAAG,8FAAoF,CAAC,CAE1F,CAAC,IAAM,IAAIuP,QAAQ,CAAC5O,IAAI,GAAK,cAAc,CAAE,CAC3C;AACA6P,iBAAiB,CAAC,cAAc,CAAC,CACjC;AACAxQ,GAAG,8FAAoF,CAAC,CAE1F,CAAC,IAAM,IAAIuP,QAAQ,CAAC5O,IAAI,GAAK,cAAc,CAAE,CAC3C;AACA6P,iBAAiB,CAAC,cAAc,CAAC,CACjC,KAAM,CAAAI,QAAQ,CAAGxN,QAAQ,CAACvE,KAAK,CAACJ,MAAM,CAAC,CAACU,KAAK,CAACe,IAAI,CAAC7B,CAAC,EAClDA,CAAC,CAACE,IAAI,GAAK,MAAM,EAAKF,CAAC,CAASC,GAAG,GAAK,QAC1C,CAAC,CACD,GAAIsS,QAAQ,CAAE,CACZ;AACA5Q,GAAG,sHAAyG,CAAC,CAC/G,CAEF,CAAC,IAAM,IAAIuP,QAAQ,CAAC5O,IAAI,GAAK,cAAc,CAAE,CAC3C;AACA,KAAM,CAAAoO,QAAQ,CAAGtQ,MAAM,GAAK,CAAC,CAAG,CAAC,CAAG,CAAC,CACrC,KAAM,CAAAoS,oBAAoB,CAAGzN,QAAQ,CAACvE,KAAK,CAACkQ,QAAQ,CAAC,CAAC3O,MAAM,CAACF,IAAI,CAACxB,IAAI,EAAI,CACxE,KAAM,CAAA+O,OAAO,CAAG/O,IAAW,CAC3B,MAAO,CAAA+O,OAAO,CAACnP,GAAG,GAAK,iBAAiB,EAAImP,OAAO,CAACjN,SAAS,EAAI,CAAC,CAAE;AACtE,CAAC,CAAC,CAEF,GAAIqQ,oBAAoB,CAAE,CACxBzN,QAAQ,CAACf,YAAY,CAAC5D,MAAM,CAAC,EAAI,CAAC,CAClCuB,GAAG,qFAAwE,CAAC,CAC5EA,GAAG,sCAAAa,MAAA,CAA4BuC,QAAQ,CAACf,YAAY,CAAC5D,MAAM,CAAC,CAAG,CAAC,aAAAoC,MAAA,CAAMuC,QAAQ,CAACf,YAAY,CAAC5D,MAAM,CAAC,CAAE,CAAC,CACxG,CAAC,IAAM,CACLuB,GAAG,iGAAiF,CAAC,CACvF,CACF,CAEA;AACA,GAAKuP,QAAQ,CAASjR,GAAG,GAAK,KAAK,CAAE,CACnC,KAAM,CAAAwS,UAAU,CAAG1N,QAAQ,CAACvE,KAAK,CAACJ,MAAM,CAAC,CAAC2B,MAAM,CAACF,IAAI,CAAC7B,CAAC,EAAIA,CAAC,CAACE,IAAI,GAAK,KAAK,EAAKF,CAAC,CAASsC,IAAI,GAAK,iBAAiB,EAAI,CAAEtC,CAAC,CAASM,WAAW,CAAC,CAChJ,GAAImS,UAAU,CAAE,CACd9Q,GAAG,oHAAAa,MAAA,CAAwDuM,UAAU,CAACzM,IAAI,iDAA0C,CAAC,CACvH,CACF,CACF,CAAC,IAAM,CACLX,GAAG,6DAAqD,CAAC,CAC3D,CAEA;AACA,MAAO,CAAAoD,QAAQ,CACjB,CAEU;AACA;AACR,GAAIgK,UAAU,CAAC7O,IAAI,GAAK,MAAM,GAAA+Q,MAAA,CAAKlC,UAAU,CAASnO,IAAI,UAAAqQ,MAAA,WAAxBA,MAAA,CAA0BpQ,WAAW,CAAC,CAAC,CAACI,QAAQ,CAAC,MAAM,CAAC,CAAE,CAC1FnC,YAAY,CAACiG,QAAQ,CAAE3E,MAAM,CAAE2O,UAAU,CAACY,GAAG,EAAIZ,UAAU,CAACzM,IAAI,CAACzB,WAAW,CAAC,CAAC,CAAC6R,OAAO,CAAC,OAAO,CAAE,GAAG,CAAC,CAAC,CACrG;AACA,MAAO,CAAA3N,QAAQ,CACjB,CAEFA,QAAQ,CAAC4I,KAAK,CAACvN,MAAM,CAAC,CAAG,CAAC,GAAG2E,QAAQ,CAAC4I,KAAK,CAACvN,MAAM,CAAC,CAAE2O,UAAU,CAAC,CAChEpN,GAAG,KAAAa,MAAA,CAAKpC,MAAM,aAAAoC,MAAA,CAAWuM,UAAU,CAACzM,IAAI,UAAAE,MAAA,CAAQ0O,QAAQ,CAACtQ,IAAI,CAAE,CAAC,CAEhE;AACAiF,OAAO,CAAClE,GAAG,CAAC,mCAAmC,CAAEoN,UAAU,CAACzM,IAAI,CAAE,YAAY,CAAGyM,UAAU,CAAS7N,SAAS,CAAC,CAC9GxC,kBAAkB,CAACqG,QAAQ,CAAE3E,MAAM,CAAE2O,UAAU,CAAC,CAChD;AACAxP,kBAAkB,CAACwF,QAAQ,CAAC,CAC5B;AACA,GAAIA,QAAQ,CAACqH,YAAY,EAAIrH,QAAQ,CAACqH,YAAY,CAAC3L,MAAM,CAAG,CAAC,CAAE,CAC7D,GAAI,CAAEkB,GAAG,oDAAAa,MAAA,CAAoD2N,IAAI,CAACC,SAAS,CAAErL,QAAQ,CAACqH,YAAY,CAASpK,GAAG,CAAEkH,CAAK,GAAI,CAACtI,IAAI,CAACsI,CAAC,CAACtI,IAAI,CAAEyP,MAAM,CAACnH,CAAC,CAACmH,MAAM,CAAEhE,GAAG,CAACnD,CAAC,CAACmD,GAAG,CAAC,CAAC,CAAC,CAACnH,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAE,CAAC,CAAE,CAAE,MAAMgE,CAAC,CAAE,CAAC,CAClMvH,GAAG,+CAAAa,MAAA,CAA+CuC,QAAQ,CAACf,YAAY,CAAC,CAAC,CAAC,SAAAxB,MAAA,CAAOuC,QAAQ,CAACf,YAAY,CAAC,CAAC,CAAC,CAAE,CAAC,CAC5GpF,YAAY,CAACmG,QAAQ,CAAEA,QAAQ,CAACqH,YAAY,CAAC,CAC7CrH,QAAQ,CAACqH,YAAY,CAAG,EAAE,CAC1B;AACA9G,kBAAkB,SAAlBA,kBAAkB,iBAAlBA,kBAAkB,CAAG,CAAC,CACtB3D,GAAG,8CAAAa,MAAA,CAA8CuC,QAAQ,CAACf,YAAY,CAAC,CAAC,CAAC,SAAAxB,MAAA,CAAOuC,QAAQ,CAACf,YAAY,CAAC,CAAC,CAAC,CAAE,CAAC,CAC7G,CAEA;AACAjF,sBAAsB,CACpBgG,QAAQ,CACR3E,MAAM,CACN2O,UAAU,CACT7F,CAAC,OAAAyJ,sBAAA,OAAK,EAAAA,sBAAA,CAAC5N,QAAQ,CAACqH,YAAY,UAAAuG,sBAAA,UAAAA,sBAAA,CAArB5N,QAAQ,CAACqH,YAAY,CAAK,EAAE,EAAEzI,IAAI,CAACuF,CAAC,CAAC,GAC5CsH,CAAC,OAAAoC,sBAAA,OAAK,EAAAA,sBAAA,CAAC7N,QAAQ,CAACqH,YAAY,UAAAwG,sBAAA,UAAAA,sBAAA,CAArB7N,QAAQ,CAACqH,YAAY,CAAK,EAAE,EAAEzI,IAAI,CAAC,CAAE/C,IAAI,CAAE,KAAK,CAAEyL,GAAG,CAAEmE,CAAE,CAAC,CAAC,EACrE,CAAC,CAED;AACA,MAAO,CAAAzL,QAAQ,CACjB,CAEA;AACArG,kBAAkB,CAACqG,QAAQ,CAAE3E,MAAM,CAAEsO,YAAY,CAAC,CAClD;AACAnP,kBAAkB,CAACwF,QAAQ,CAAC,CAC5B;AACE,GAAIA,QAAQ,CAACqH,YAAY,EAAIrH,QAAQ,CAACqH,YAAY,CAAC3L,MAAM,CAAG,CAAC,CAAE,CAC7D,GAAI,CAAEkB,GAAG,2DAAAa,MAAA,CAA2D2N,IAAI,CAACC,SAAS,CAAErL,QAAQ,CAACqH,YAAY,CAASpK,GAAG,CAAEkH,CAAK,GAAI,CAACtI,IAAI,CAACsI,CAAC,CAACtI,IAAI,CAAEyP,MAAM,CAACnH,CAAC,CAACmH,MAAM,CAAEhE,GAAG,CAACnD,CAAC,CAACmD,GAAG,CAAC,CAAC,CAAC,CAACnH,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAE,CAAC,CAAE,CAAE,MAAMgE,CAAC,CAAE,CAAC,CACzMvH,GAAG,sDAAAa,MAAA,CAAsDuC,QAAQ,CAACf,YAAY,CAAC,CAAC,CAAC,SAAAxB,MAAA,CAAOuC,QAAQ,CAACf,YAAY,CAAC,CAAC,CAAC,CAAE,CAAC,CACnHpF,YAAY,CAACmG,QAAQ,CAAEA,QAAQ,CAACqH,YAAY,CAAC,CAC7CrH,QAAQ,CAACqH,YAAY,CAAG,EAAE,CAC1B;AACA9G,kBAAkB,SAAlBA,kBAAkB,iBAAlBA,kBAAkB,CAAG,CAAC,CACtB3D,GAAG,qDAAAa,MAAA,CAAqDuC,QAAQ,CAACf,YAAY,CAAC,CAAC,CAAC,SAAAxB,MAAA,CAAOuC,QAAQ,CAACf,YAAY,CAAC,CAAC,CAAC,CAAE,CAAC,CACpH,CAEF;AACAjF,sBAAsB,CACpBgG,QAAQ,CACR3E,MAAM,CACNsO,YAAY,CACXxF,CAAC,OAAA2J,sBAAA,OAAK,EAAAA,sBAAA,CAAC9N,QAAQ,CAACqH,YAAY,UAAAyG,sBAAA,UAAAA,sBAAA,CAArB9N,QAAQ,CAACqH,YAAY,CAAK,EAAE,EAAEzI,IAAI,CAACuF,CAAC,CAAC,GAC5CsH,CAAC,OAAAsC,uBAAA,OAAK,EAAAA,uBAAA,CAAC/N,QAAQ,CAACqH,YAAY,UAAA0G,uBAAA,UAAAA,uBAAA,CAArB/N,QAAQ,CAACqH,YAAY,CAAK,EAAE,EAAEzI,IAAI,CAAC,CAAE/C,IAAI,CAAE,KAAK,CAAEyL,GAAG,CAAEmE,CAAE,CAAC,CAAC,EACrE,CAAC,CAED;AAEA;AAGA,MAAO,CAAAzL,QAAQ,CACjB,CAAC,CAAC,CACJ,CAAC,CAAE,CAACM,YAAY,CAAE1D,GAAG,CAAC,CAAC,CAEvB,KAAM,CAAAoR,yBAAyB,CAAG/U,WAAW,CAAEoC,MAAc,EAAK,CAChElB,MAAM,CAACmP,IAAI,qCAAA7L,MAAA,CAAqCpC,MAAM,CAAE,CAAC,CACzDiF,YAAY,CAACjD,IAAI,EAAI,CACnB,GAAIA,IAAI,CAACmB,OAAO,GAAKnD,MAAM,CAAE,CAC3BuB,GAAG,6CAAAa,MAAA,CAAwCJ,IAAI,CAACmB,OAAO,kBAAAf,MAAA,CAAgBpC,MAAM,CAAE,CAAC,CAChF,MAAO,CAAAgC,IAAI,CACb,CAEA,KAAM,CAAA4Q,WAAW,CAAG5Q,IAAI,CAAC5B,KAAK,CAACJ,MAAM,CAAC,CAACmE,MAAM,CAAC,CAAC,CAAC,CAChD,GAAI,CAACyO,WAAW,CAAE,CAChBrR,GAAG,0DAAAa,MAAA,CAAqDpC,MAAM,CAAE,CAAC,CACjE,MAAO,CAAAgC,IAAI,CACb,CAEA,KAAM,CAAA2C,QAAQ,CAAAjF,aAAA,IAAQsC,IAAI,CAAE,CAE5B;AACA1D,kBAAkB,CAACqG,QAAQ,CAAE3E,MAAM,CAAE4S,WAAW,CAAC,CAEjD;AACA,GAAI,KAAAC,iBAAA,CACF,KAAM,CAAA9J,KAAK,CAAG,EAAA8J,iBAAA,CAAC7J,MAAM,CAASC,iBAAiB,UAAA4J,iBAAA,iBAAjCA,iBAAA,CAAmC3J,UAAU,GAAI,EAAE,CACjE,KAAM,CAAA4J,SAAS,CAAG/J,KAAK,CAACK,IAAI,CAAEC,CAAM,EAAKA,CAAC,CAACE,IAAI,EAAIF,CAAC,CAACE,IAAI,CAAC/I,IAAI,GAAK,UAAU,CAAC,CAC9E,KAAM,CAAA4G,EAAE,CAAG0L,SAAS,CAAGA,SAAS,CAAClM,CAAC,CAAG,CAACkM,SAAS,CAAChM,CAAC,EAAI,GAAG,EAAI,CAAC,CAAG,GAAG,CACnE,KAAM,CAAAO,EAAE,CAAGyL,SAAS,CAAGA,SAAS,CAACjM,CAAC,CAAG,CAACiM,SAAS,CAAC/L,CAAC,EAAI,GAAG,EAAI,CAAC,CAAG,GAAG,CACnE,GAAI5B,aAAa,CAAE,CACjBA,aAAa,CAAC4N,WAAW,CAAC3L,EAAE,CAAEC,EAAE,CAAE,CAAE2L,MAAM,CAAE,GAAG,CAAEC,MAAM,CAAE,IAAI,CAAEC,GAAG,CAAE9L,EAAE,CAAE+L,GAAG,CAAE9L,EAAE,CAAG,EAAG,CAAC,CAAC,CACvF,GAAI,CACF,KAAM,CAAA+L,KAAK,CAAIpK,MAAM,CAASqK,uBAAuB,EAAKrK,MAAM,CAASsK,qBAAqB,CAC9F,GAAI,MAAO,CAAAF,KAAK,GAAK,UAAU,CAAEA,KAAK,CAAC,aAAa,CAAC,CACvD,CAAE,MAAOtK,CAAC,CAAE,CAAC,CACf,CAAC,IAAM,CACJE,MAAM,CAASuK,YAAY,CAAIvK,MAAM,CAASuK,YAAY,EAAI,EAAE,CAChEvK,MAAM,CAASuK,YAAY,CAAChQ,IAAI,CAAC,CAAE6D,EAAE,CAAEC,EAAE,CAAEsB,OAAO,CAAEC,WAAW,CAACC,GAAG,CAAC,CAAC,CAAEL,QAAQ,CAAE,GAAG,CAAEwK,MAAM,CAAE,GAAG,CAAEC,MAAM,CAAE,IAAI,CAAEC,GAAG,CAAE9L,EAAE,CAAE+L,GAAG,CAAE9L,EAAE,CAAG,EAAG,CAAC,CAAC,CAC5I,CACF,CAAE,MAAOyB,CAAC,CAAE,CAAC,CAEb;AACAnK,sBAAsB,CACpBgG,QAAQ,CACR3E,MAAM,CACN4S,WAAW,CACV9J,CAAC,OAAA0K,uBAAA,OAAK,EAAAA,uBAAA,CAAC7O,QAAQ,CAACqH,YAAY,UAAAwH,uBAAA,UAAAA,uBAAA,CAArB7O,QAAQ,CAACqH,YAAY,CAAK,EAAE,EAAEzI,IAAI,CAACuF,CAAC,CAAC,GAC5CsH,CAAC,OAAAqD,uBAAA,OAAK,EAAAA,uBAAA,CAAC9O,QAAQ,CAACqH,YAAY,UAAAyH,uBAAA,UAAAA,uBAAA,CAArB9O,QAAQ,CAACqH,YAAY,CAAK,EAAE,EAAEzI,IAAI,CAAC,CAAE/C,IAAI,CAAE,KAAK,CAAEyL,GAAG,CAAEmE,CAAE,CAAC,CAAC,EACrE,CAAC,CAED;AACA,GAAIzL,QAAQ,CAACqH,YAAY,EAAIrH,QAAQ,CAACqH,YAAY,CAAC3L,MAAM,CAAG,CAAC,CAAE,CAC7D7B,YAAY,CAACmG,QAAQ,CAAE,CAAC,GAAGA,QAAQ,CAACqH,YAAY,CAAC,CAAC,CAClDrH,QAAQ,CAACqH,YAAY,CAAG,EAAE,CAC1B;AACA9G,kBAAkB,SAAlBA,kBAAkB,iBAAlBA,kBAAkB,CAAG,CAAC,CACxB,CAEA;AACA,KAAM,CAACwO,MAAM,CAAC,CAAG/O,QAAQ,CAACvE,KAAK,CAACJ,MAAM,CAAC,CAACmE,MAAM,CAACpB,MAAM,CAAC,CAAC,CAAE,CAAC,CAAC,CAC3D4B,QAAQ,CAACI,OAAO,CAACxB,IAAI,CAACmQ,MAAM,CAAC,CAE7B;AACA,GAAI,CACF,KAAM,CAAAC,WAAW,CAAI3I,EAAO,EAAK,CAC/B,GAAI,KAAA4I,WAAA,CAAAC,uBAAA,CACF,KAAM,CAAA9H,IAAI,EAAA6H,WAAA,CAAG5I,EAAE,CAACG,MAAM,UAAAyI,WAAA,iBAATA,WAAA,CAAW7H,IAAI,CAC5B,GAAIA,IAAI,EAAI,IAAI,CAAE,OAClB;AACA,KAAM,CAAA+H,IAAI,CAAG,EAAAD,uBAAA,CAAClP,QAAQ,CAACqH,YAAY,UAAA6H,uBAAA,UAAAA,uBAAA,CAAI,EAAE,EAAE/O,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CACvD;AACA,GAAI,CAACH,QAAQ,CAACqH,YAAY,CAAErH,QAAQ,CAACqH,YAAY,CAAG,EAAE,CACtDrH,QAAQ,CAACqH,YAAY,CAACzI,IAAI,CAAC,CAAE/C,IAAI,CAAE,KAAK,CAAEyL,GAAG,eAAA7J,MAAA,CAAa2J,IAAI,CAAG,CAAQ,CAAC,CAC5E,CAAE,MAAOjD,CAAC,CAAE,CAAC,CACf,CAAC,CACDE,MAAM,CAACsD,gBAAgB,CAAC,cAAc,CAAEqH,WAA4B,CAAC,CACrE;AACAI,UAAU,CAAC,IAAM/K,MAAM,CAACuD,mBAAmB,CAAC,cAAc,CAAEoH,WAA4B,CAAC,CAAE,IAAI,CAAC,CAClG,CAAE,MAAO7K,CAAC,CAAE,CAAC,CAEb,MAAO,CAAAnE,QAAQ,CACjB,CAAC,CAAC,CACJ,CAAC,CAAE,CAACM,YAAY,CAAE1D,GAAG,CAAC,CAAC,CAEvB,KAAM,CAAAyS,OAAO,CAAGpW,WAAW,CAAC,UAA4D,IAA3D,CAAAqW,MAAkC,CAAApG,SAAA,CAAAxN,MAAA,IAAAwN,SAAA,MAAAC,SAAA,CAAAD,SAAA,IAAG,iBAAiB,CACjF/O,MAAM,CAACmP,IAAI,yBAAA7L,MAAA,CAAyB6R,MAAM,CAAE,CAAC,CAC7ChP,YAAY,CAAEjD,IAAI,EAAgB,CAChC;AACA,KAAM,CAAAmB,OAAO,CAAGnB,IAAI,CAACmB,OAAO,CAE5B;AACA,GAAInB,IAAI,CAACoB,YAAY,CAAE,CACrB7B,GAAG,CAAC,kDAAkD,CAAC,CACvD,MAAO,CAAAS,IAAI,CACb,CAEA,KAAM,CAAA2C,QAAQ,CAAAjF,aAAA,CAAAA,aAAA,IAAQsC,IAAI,MAAEoB,YAAY,CAAE,IAAI,EAAE,CAEhD;AACA,GAAIuB,QAAQ,CAACqH,YAAY,EAAIrH,QAAQ,CAACqH,YAAY,CAAC3L,MAAM,CAAG,CAAC,CAAE,CAC7DkB,GAAG,CAAC,iEAAiE,CAAC,CACtE/C,YAAY,CAACmG,QAAQ,CAAE,CAAC,GAAGA,QAAQ,CAACqH,YAAY,CAAC,CAAC,CAClDrH,QAAQ,CAACqH,YAAY,CAAG,EAAE,CAC1B;AACA,GAAIrH,QAAQ,CAACvB,YAAY,CAAE,CACzB,MAAO,CAAAF,aAAa,CAACyB,QAAQ,CAAEpD,GAAG,CAAC,CACrC,CACA,MAAO,CAAAoD,QAAQ,CACjB,CAEA;AACA,MAAO,CAAAzB,aAAa,CAACyB,QAAQ,CAAEpD,GAAG,CAAC,CACrC,CAAC,CAAC,CACJ,CAAC,CAAE,CAAC0D,YAAY,CAAE1D,GAAG,CAAC,CAAC,CAEvB;AACA,KAAM,CAAA2S,QAAQ,CAAGtW,WAAW,CAAC,IAAM,CACjCkB,MAAM,CAACmP,IAAI,CAAC,uBAAuB,CAAC,CACpC+F,OAAO,CAAC,MAAM,CAAC,CACjB,CAAC,CAAE,CAACA,OAAO,CAAC,CAAC,CAEb;AACAlW,SAAS,CAAC,IAAM,CACd,KAAM,CAAAqW,OAAO,CAAInJ,EAAO,EAAK,KAAAoJ,WAAA,CAC3B,KAAM,CAAArI,IAAI,CAAGf,EAAE,SAAFA,EAAE,kBAAAoJ,WAAA,CAAFpJ,EAAE,CAAEG,MAAM,UAAAiJ,WAAA,iBAAVA,WAAA,CAAYrI,IAAI,CAC7B,GAAI,MAAO,CAAAA,IAAI,GAAK,QAAQ,CAAE,OAC9B9G,YAAY,CAACjD,IAAI,EAAI,CACnB,GAAI,CACF,KAAM,CAAAqS,OAAO,CAAIrS,IAAI,CAASsS,eAA6D,CAC3F,GAAI,CAACD,OAAO,CAAE,MAAO,CAAArS,IAAI,CACzB;AACA,GAAIuS,IAAI,CAAC1L,GAAG,CAAC,CAAC,EAAIwL,OAAO,CAACG,EAAE,EAAI,CAAC,CAAC,CAAG,IAAI,CAAE,CACzC,KAAM,CAAAC,CAAC,CAAA/U,aAAA,IAAQsC,IAAI,CAAqB,CACxC,MAAO,CAAAyS,CAAC,CAACH,eAAe,CACxB,MAAO,CAAAG,CAAC,CACV,CAEA,KAAM,CAAA9P,QAAQ,CAAAjF,aAAA,IAAQsC,IAAI,CAAqB,CAC/C;AACA,MAAO,CAAA2C,QAAQ,CAAC2P,eAAe,CAE/B;AACA3P,QAAQ,CAACqH,YAAY,CAAGrH,QAAQ,CAACqH,YAAY,EAAI,EAAE,CACnD,GAAID,IAAI,EAAI,CAAC,EAAIA,IAAI,EAAI,CAAC,CAAE,CAC1B,KAAM,CAAA2I,IAAI,CAAG3I,IAAI,CACjB;AACApH,QAAQ,CAACqH,YAAY,CAACzI,IAAI,CAAC,CAAE/C,IAAI,CAAE,oBAAoB,CAAER,MAAM,CAAEqU,OAAO,CAACrU,MAAM,CAAEiQ,MAAM,CAAE,CAACyE,IAAK,CAAQ,CAAC,CACxG/P,QAAQ,CAACqH,YAAY,CAACzI,IAAI,CAAC,CAAE/C,IAAI,CAAE,KAAK,CAAEyL,GAAG,4BAAA7J,MAAA,CAA6BiS,OAAO,CAACrU,MAAM,iBAAAoC,MAAA,CAAY2J,IAAI,oCAAA3J,MAAA,CAA0BsS,IAAI,KAAI,CAAQ,CAAC,CACrJ,CAAC,IAAM,CACL/P,QAAQ,CAACqH,YAAY,CAACzI,IAAI,CAAC,CAAE/C,IAAI,CAAE,KAAK,CAAEyL,GAAG,4BAAA7J,MAAA,CAA6BiS,OAAO,CAACrU,MAAM,iBAAAoC,MAAA,CAAY2J,IAAI,6BAAuB,CAAQ,CAAC,CAC1I,CAEA;AACA,GAAIpH,QAAQ,CAACqH,YAAY,EAAIrH,QAAQ,CAACqH,YAAY,CAAC3L,MAAM,CAAG,CAAC,CAAE,CAC7D,GAAI,CAAE7B,YAAY,CAACmG,QAAQ,CAAE,CAAC,GAAGA,QAAQ,CAACqH,YAAY,CAAC,CAAC,CAAE,CAAE,MAAOlD,CAAC,CAAE,CAAEhK,MAAM,CAAC2D,GAAG,CAAC,qCAAqC,CAAEqG,CAAC,CAAC,CAAE,CAC9HnE,QAAQ,CAACqH,YAAY,CAAG,EAAE,CAC5B,CAEA;AACA,GAAI,CACFrH,QAAQ,CAACvD,KAAK,CAAG,CAAE,CAAC,CAAE,CAAC,GAAGuD,QAAQ,CAACvD,KAAK,CAAC,CAAC,CAAC,CAAC,CAAE,CAAC,CAAE,CAAC,GAAGuD,QAAQ,CAACvD,KAAK,CAAC,CAAC,CAAC,CAAE,CAAC,CAC3E,CAAE,MAAO0H,CAAC,CAAE,CAAC,CAEb;AACA,GAAI,CAAE,GAAKE,MAAM,CAAS2L,oBAAoB,CAAG3L,MAAM,CAAS2L,oBAAoB,CAAC,CAAC,CAAE,CAAE,MAAO7L,CAAC,CAAE,CAAC,CAErG,MAAO,CAAAnE,QAAQ,CACjB,CAAE,MAAOiQ,GAAG,CAAE,CACZ9V,MAAM,CAAC2D,GAAG,CAAC,iCAAiC,CAAEmS,GAAG,CAAC,CAClD,MAAO,CAAA5S,IAAI,CACb,CACF,CAAC,CAAC,CACJ,CAAC,CAEDgH,MAAM,CAACsD,gBAAgB,CAAC,cAAc,CAAE6H,OAAwB,CAAC,CACjE,MAAO,IAAMnL,MAAM,CAACuD,mBAAmB,CAAC,cAAc,CAAE4H,OAAwB,CAAC,CACnF,CAAC,CAAE,CAAClP,YAAY,CAAC,CAAC,CAEhB,KAAM,CAAA4P,QAAQ,CAAGjX,WAAW,CAAEoC,MAAc,EAAK,CACjDlB,MAAM,CAACmP,IAAI,oBAAA7L,MAAA,CAAoBpC,MAAM,CAAE,CAAC,CAExCiF,YAAY,CAACjD,IAAI,EAAI,CACnBlD,MAAM,CAAC2D,GAAG,8BAAAL,MAAA,CAA8BJ,IAAI,CAACmB,OAAO,aAAAf,MAAA,CAAWpC,MAAM,CAAE,CAAC,CAExE,GAAIgC,IAAI,CAACmB,OAAO,GAAKnD,MAAM,CAAE,CAC3BlB,MAAM,CAAC2D,GAAG,gCAAAL,MAAA,CAAgCJ,IAAI,CAACmB,OAAO,gBAAAf,MAAA,CAAcpC,MAAM,CAAE,CAAC,CAC7E,MAAO,CAAAgC,IAAI,CACb,CAEA,KAAM,CAAA2C,QAAQ,CAAAjF,aAAA,CAAAA,aAAA,IAAQsC,IAAI,MAAEQ,MAAM,CAAA9C,aAAA,CAAAA,aAAA,IAAOsC,IAAI,CAACQ,MAAM,MAAE,CAACxC,MAAM,EAAG,IAAI,EAAE,EAAE,CACxElB,MAAM,CAAC2D,GAAG,2BAAAL,MAAA,CAA2BuC,QAAQ,CAACnC,MAAM,CAAC,CAAC,CAAC,SAAAJ,MAAA,CAAOuC,QAAQ,CAACnC,MAAM,CAAC,CAAC,CAAC,CAAE,CAAC,CACnFjB,GAAG,yBAAAa,MAAA,CAAepC,MAAM,WAAS,CAAC,CAElC;AACA;AACA;AAEA;AACA,KAAM,CAAAwD,cAAc,CAAGnB,aAAa,CAACsC,QAAQ,CAAC,CAC9C7F,MAAM,CAAC2D,GAAG,sBAAAL,MAAA,CAAsBoB,cAAc,CAAE,CAAC,CAEjD,GAAIA,cAAc,CAAE,CAClBjC,GAAG,uBAAAa,MAAA,CAAauC,QAAQ,CAAClB,KAAK,kCAAgC,CAAC,CAC/D,MAAO,CAAAC,YAAY,CAACiB,QAAQ,CAAEpD,GAAG,CAAC,CACpC,CAAC,IAAM,CACL;AACA,KAAM,CAAAuT,WAAmB,CAAG9U,MAAM,GAAK,CAAC,CAAG,CAAC,CAAG,CAAC,CAChDlB,MAAM,CAAC2D,GAAG,8BAAAL,MAAA,CAA8B0S,WAAW,gBAAA1S,MAAA,CAAcuC,QAAQ,CAACnC,MAAM,CAACsS,WAAW,CAAC,CAAE,CAAC,CAEhG;AACA,GAAI,CAACnQ,QAAQ,CAACnC,MAAM,CAACsS,WAAW,CAAC,CAAE,CACtBnQ,QAAQ,CAACxB,OAAO,CAAG2R,WAAW,CACxCnQ,QAAQ,CAACf,YAAY,CAAAlE,aAAA,CAAAA,aAAA,IAAQiF,QAAQ,CAACf,YAAY,MAAE,CAACkR,WAAW,EAAG,CAAC,EAAE,CAEvE;AACArW,qBAAqB,CAACkG,QAAQ,CAAEmQ,WAAW,CAAEvT,GAAG,CAAC,CAEnD;AACA3C,kBAAkB,CAAC+F,QAAQ,CAAC,CAE1BpD,GAAG,yBAAAa,MAAA,CAAe0S,WAAW,gCAA8B,CAAC,CAC5DhW,MAAM,CAAC2D,GAAG,4BAAAL,MAAA,CAA4B0S,WAAW,CAAE,CAAC,CACtD,CAAC,IAAM,CACL;AACAvT,GAAG,uBAAAa,MAAA,CAAauC,QAAQ,CAAClB,KAAK,gDAA8C,CAAC,CAC7E,MAAO,CAAAC,YAAY,CAACiB,QAAQ,CAAEpD,GAAG,CAAC,CACpC,CACF,CAEA,MAAO,CAAAoD,QAAQ,CACjB,CAAC,CAAC,CACJ,CAAC,CAAE,CAACM,YAAY,CAAE1D,GAAG,CAAC,CAAC,CAEvB,MAAO,CACLiL,mBAAmB,CACnBmB,cAAc,CACdI,QAAQ,CACR4E,yBAAyB,CACzBkC,QAAQ,CACRX,QAAQ,CACRF,OACF,CAAC,CACD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}