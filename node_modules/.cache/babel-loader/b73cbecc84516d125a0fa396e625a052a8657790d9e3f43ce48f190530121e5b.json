{"ast":null,"code":"import{CARD_BY_ID}from'../data/cards';export function registerTrap(state,player,key){if(!state.traps)state.traps={1:[],2:[]};const list=state.traps[player];if(!Array.isArray(list))state.traps[player]=[];state.traps[player].push({owner:player,key});}export function applyTrapsOnCardPlayed(state,playedBy,card,enqueue,log){var _state$traps,_state$effectFlags$pl,_cardDef$tags,_cardDef$tags2;const opp=playedBy===1?2:1;const traps=(_state$traps=state.traps)===null||_state$traps===void 0?void 0:_state$traps[opp];if(!traps||traps.length===0)return;// Diagnostics: log existing traps for opponent when a card is played\ntry{const keys=traps.map(t=>t.key).join(', ');enqueue({type:'LOG',msg:\"DEBUG: applyTrapsOnCardPlayed opp=\".concat(opp,\" traps=[\").concat(keys,\"] playedCard=\").concat(card.name||card.key||'unknown')});}catch(e){}// Hard rule: Opposition Blockade – if current player is locked, cancel initiative card immediately\nif((card===null||card===void 0?void 0:card.type)==='initiative'&&(_state$effectFlags$pl=state.effectFlags[playedBy])!==null&&_state$effectFlags$pl!==void 0&&_state$effectFlags$pl.initiativesLocked){if(card.uid!=null){enqueue({type:'CANCEL_CARD',player:playedBy,targetUid:card.uid});}enqueue({type:'LOG',msg:'Blocked: initiatives are locked (Opposition Blockade).'});return;// skip further trap processing\n}// Get card definition to access type and tags\nconst cardDef=CARD_BY_ID[card.key];const isInitiative=(cardDef===null||cardDef===void 0?void 0:cardDef.type)==='initiative';const isPublic=(cardDef===null||cardDef===void 0?void 0:cardDef.type)==='public';const isGovernment=(cardDef===null||cardDef===void 0?void 0:cardDef.type)==='government';const isMediaLike=(cardDef===null||cardDef===void 0?void 0:(_cardDef$tags=cardDef.tags)===null||_cardDef$tags===void 0?void 0:_cardDef$tags.includes('Media'))||(cardDef===null||cardDef===void 0?void 0:(_cardDef$tags2=cardDef.tags)===null||_cardDef$tags2===void 0?void 0:_cardDef$tags2.includes('Platform'))||(card===null||card===void 0?void 0:card.tag)==='Media';// Fallback für Legacy-Karten\nconst consumed=[];traps.forEach(t=>{switch(t.key){// bereits live benutzt\ncase'trap.fake_news.deactivate_media':if(isMediaLike&&card.uid!=null){enqueue({type:'DEACTIVATE_CARD',player:opp,targetUid:card.uid});log('Trap: Fake News – deactivated media/platform card.');consumed.push(t);}break;// neu: Initiative canceln (sofort beim Ausspielen der Initiative)\ncase'trap.legal_injunction.cancel_next_initiative':if(isInitiative&&card.uid!=null){enqueue({type:'CANCEL_CARD',player:opp,targetUid:card.uid});log('Trap: Legal Injunction – cancelled initiative.');consumed.push(t);}break;// neu: Karte zurück auf Hand (egal welcher Typ)\ncase'trap.whistleblower.return_last_played':if(card.uid!=null){enqueue({type:'RETURN_TO_HAND',player:playedBy,targetUid:card.uid});log('Trap: Whistleblower – returned played card to hand.');consumed.push(t);}break;// neu: Gegner discards 2 bei nächstem Play\ncase'trap.data_breach.opp_discard2':enqueue({type:'DISCARD_RANDOM_FROM_HAND',player:playedBy===1?2:1,amount:2});log('Trap: Data Breach – opponent discards 2.');consumed.push(t);break;// neu: Public deaktivieren\ncase'trap.media_blackout.deactivate_public':if(isPublic&&card.uid!=null){enqueue({type:'DEACTIVATE_CARD',player:opp,targetUid:card.uid});log('Trap: Media Blackout – deactivated public card.');consumed.push(t);}break;// neu: AP -2 für Gegner beim nächsten Play\ncase'trap.budget_freeze.opp_ap_minus2':enqueue({type:'ADD_AP',player:playedBy,amount:-2});log('Trap: Budget Freeze – opponent AP -2.');consumed.push(t);break;// neu: Government deaktivieren\ncase'trap.sabotage.deactivate_gov':if(isGovernment&&card.uid!=null){enqueue({type:'DEACTIVATE_CARD',player:opp,targetUid:card.uid});log('Trap: Sabotage – deactivated government card.');consumed.push(t);}break;// Strategic Disclosure: Government-Karte zurückgeben\ncase'trap.strategic_disclosure.return_gov':if(isGovernment&&card.uid!=null){enqueue({type:'RETURN_TO_HAND',player:playedBy,targetUid:card.uid});log('Trap: Strategic Disclosure – returned government card to hand.');consumed.push(t);}break;case'trap.whistleblower.debuff_next_gov_minus2':// Robust trigger: treat any played politician (pol) as government trigger\nconst playedIsPol=(card===null||card===void 0?void 0:card.kind)==='pol'||isGovernment;if(!playedIsPol){// not a government/pol card — skip\nenqueue({type:'LOG',msg:\"DEBUG: Whistleblower present but played card is not government/pol (\".concat(card.name||card.key,\")\")});break;}if(card.uid==null){enqueue({type:'LOG',msg:\"DEBUG: Whistleblower cannot apply - target missing uid for \".concat(card.name||card.key)});break;}// Compute number of Activist cards on both players' boards (innen + aussen)\nconst cd=require('../data/cardDetails');let activistCount=0;for(const p of[1,2]){var _state$board$p,_state$board$p2;const innen=((_state$board$p=state.board[p])===null||_state$board$p===void 0?void 0:_state$board$p.innen)||[];const aussen=((_state$board$p2=state.board[p])===null||_state$board$p2===void 0?void 0:_state$board$p2.aussen)||[];const all=[...innen,...aussen];for(const c of all){var _cd$getCardDetails,_cd$getCardDetails$ca;if(!c)continue;const subcats=(_cd$getCardDetails=cd.getCardDetails)===null||_cd$getCardDetails===void 0?void 0:(_cd$getCardDetails$ca=_cd$getCardDetails.call(cd,c.name))===null||_cd$getCardDetails$ca===void 0?void 0:_cd$getCardDetails$ca.subcategories;const legacyTag=c.tag==='Activist'||c.tag==='Aktivist'||c.tag==='Activists'||c.tag==='Movement';if(Array.isArray(subcats)&&subcats.includes('Activist')||legacyTag){// ignore deactivated public/pol cards\nif(!c.deactivated)activistCount++;}}}// Base debuff -2 plus -1 per Activist (both boards), capped at -6 total\nconst totalDebuffMagnitude=Math.min(6,2+activistCount);const amount=-totalDebuffMagnitude;enqueue({type:'DEBUFF_CARD',player:opp,targetUid:card.uid,amount});const debuffMsg=\"Trap: Whistleblower \\u2013 government card gets \".concat(amount,\" Influence (base -2 + activists \").concat(activistCount,\", capped at -6).\");enqueue({type:'LOG',msg:debuffMsg});// Immediate console log for better chronological trace before warnings\nlog(debuffMsg);log(\"\\uD83D\\uDFE2 trap.whistleblower triggered: applied \".concat(amount,\" to uid \").concat(card.uid,\" (activists=\").concat(activistCount,\")\"));consumed.push(t);break;default:break;}});if(consumed.length){// Build consumption indexes for robust removal\nconst consumedKeys=new Set(consumed.map(c=>c.key).filter(Boolean));// Also include base card keys (namespace + card) to catch visual trap card objects\n// Example: 'trap.whistleblower.return_last_played' -> add 'trap.whistleblower'\nfor(const k of Array.from(consumedKeys)){if(typeof k==='string'){const parts=k.split('.');if(parts.length>=3){const baseKey=parts.slice(0,2).join('.');consumedKeys.add(baseKey);}}}const consumedUids=new Set(consumed.map(c=>c.uid).filter(Boolean));const consumedNames=new Set(consumed.map(c=>c.name).filter(Boolean));const consumedRefs=new Set(consumed);// Remove consumed trap registrations and any visual trap card objects from both players' trap lists\nfor(const p of[1,2]){const list=state.traps[p]||[];state.traps[p]=list.filter(entry=>{if(!entry)return false;// Direct reference match\nif(consumedRefs.has(entry))return false;// registration object with key\nif(entry.key&&consumedKeys.has(entry.key))return false;// match by uid\nif(entry.uid&&consumedUids.has(entry.uid))return false;// match by name\nif(entry.name&&consumedNames.has(entry.name))return false;// If entry looks like a card object, also remove if its type explicitly indicates a trap\nif(entry&&entry.kind==='spec'){const typeStr=String(entry.type||'').toLowerCase();if(typeStr.includes('trap'))return false;}return true;});}// Ensure the visual trap card is removed from any board lanes if it was added there\ntry{var _state$board;const removeIfTrapOnBoard=arr=>{return arr.filter(c=>{if(!c)return true;const key=c.key||c.name&&String(c.name).toLowerCase().replace(/[^a-z0-9_.-]/g,'_');const typeStr=String(c.type||'').toLowerCase();if(typeStr.includes('trap'))return false;if(key&&consumedKeys.has(key))return false;return true;});};// Remove from opponent board lanes (innen, aussen, sofort)\nif((_state$board=state.board)!==null&&_state$board!==void 0&&_state$board[opp]){state.board[opp].innen=removeIfTrapOnBoard(state.board[opp].innen||[]);state.board[opp].aussen=removeIfTrapOnBoard(state.board[opp].aussen||[]);state.board[opp].sofort=removeIfTrapOnBoard(state.board[opp].sofort||[]);}// Additionally, remove any consumed trap card objects from all board lanes and move them to discard\ntry{for(const c of consumed){const cUid=c.uid;const cKey=c.key||c.name;for(const p of[1,2]){for(const lane of['innen','aussen','sofort']){const arr=state.board[p][lane];const idx=arr.findIndex(card=>card&&(card.uid&&cUid&&card.uid===cUid||card.key&&cKey&&card.key===cKey||card.name&&cKey&&card.name===cKey));if(idx!==-1){const[removed]=arr.splice(idx,1);state.discard=state.discard||[];state.discard.push(removed);enqueue({type:'LOG',msg:\"Trap consumed: removed \".concat(removed&&removed.name||cKey,\" from board and moved to discard.\")});}}}}}catch(e){}}catch(e){}}}","map":{"version":3,"names":["CARD_BY_ID","registerTrap","state","player","key","traps","list","Array","isArray","push","owner","applyTrapsOnCardPlayed","playedBy","card","enqueue","log","_state$traps","_state$effectFlags$pl","_cardDef$tags","_cardDef$tags2","opp","length","keys","map","t","join","type","msg","concat","name","e","effectFlags","initiativesLocked","uid","targetUid","cardDef","isInitiative","isPublic","isGovernment","isMediaLike","tags","includes","tag","consumed","forEach","amount","playedIsPol","kind","cd","require","activistCount","p","_state$board$p","_state$board$p2","innen","board","aussen","all","c","_cd$getCardDetails","_cd$getCardDetails$ca","subcats","getCardDetails","call","subcategories","legacyTag","deactivated","totalDebuffMagnitude","Math","min","debuffMsg","consumedKeys","Set","filter","Boolean","k","from","parts","split","baseKey","slice","add","consumedUids","consumedNames","consumedRefs","entry","has","typeStr","String","toLowerCase","_state$board","removeIfTrapOnBoard","arr","replace","sofort","cUid","cKey","lane","idx","findIndex","removed","splice","discard"],"sources":["C:/Users/skank/Videos/Cards/Milchcards/src/utils/traps.ts"],"sourcesContent":["import type { GameState, Player, Card } from '../types/game';\r\nimport type { EffectEvent } from '../types/effects';\r\nimport { CARD_BY_ID } from '../data/cards';\r\n\r\nexport function registerTrap(state: GameState, player: Player, key: string) {\r\n  if (!state.traps) state.traps = { 1: [], 2: [] } as any;\r\n  const list = (state.traps as any)[player] as Array<{ owner: Player; key: string }>;\r\n  if (!Array.isArray(list)) (state.traps as any)[player] = [];\r\n  (state.traps as any)[player].push({ owner: player, key });\r\n}\r\n\r\nexport function applyTrapsOnCardPlayed(\r\n  state: GameState,\r\n  playedBy: Player,\r\n  card: Card,\r\n  enqueue: (e: EffectEvent) => void,\r\n  log: (m: string) => void\r\n) {\r\n  const opp: Player = playedBy === 1 ? 2 : 1;\r\n  const traps = (state.traps as any)?.[opp] as Array<{ owner: Player; key: string }> | undefined;\r\n  if (!traps || traps.length === 0) return;\r\n\r\n  // Diagnostics: log existing traps for opponent when a card is played\r\n  try {\r\n    const keys = traps.map(t => t.key).join(', ');\r\n    enqueue({ type: 'LOG', msg: `DEBUG: applyTrapsOnCardPlayed opp=${opp} traps=[${keys}] playedCard=${(card as any).name || (card as any).key || 'unknown'}` });\r\n  } catch (e) {}\r\n\r\n  // Hard rule: Opposition Blockade – if current player is locked, cancel initiative card immediately\r\n  if ((card as any)?.type === 'initiative' && state.effectFlags[playedBy]?.initiativesLocked) {\r\n    if ((card as any).uid != null) {\r\n      enqueue({ type: 'CANCEL_CARD', player: playedBy, targetUid: (card as any).uid } as any);\r\n    }\r\n    enqueue({ type: 'LOG', msg: 'Blocked: initiatives are locked (Opposition Blockade).' });\r\n    return; // skip further trap processing\r\n  }\r\n\r\n  // Get card definition to access type and tags\r\n  const cardDef = CARD_BY_ID[card.key];\r\n  const isInitiative = cardDef?.type === 'initiative';\r\n  const isPublic = cardDef?.type === 'public';\r\n  const isGovernment = cardDef?.type === 'government';\r\n  const isMediaLike = cardDef?.tags?.includes('Media') ||\r\n                     cardDef?.tags?.includes('Platform') ||\r\n                     (card as any)?.tag === 'Media'; // Fallback für Legacy-Karten\r\n\r\n  const consumed: Array<{ key: string }> = [];\r\n  traps.forEach(t => {\r\n    switch (t.key) {\r\n      // bereits live benutzt\r\n      case 'trap.fake_news.deactivate_media':\r\n        if (isMediaLike && (card as any).uid != null) {\r\n          enqueue({ type: 'DEACTIVATE_CARD', player: opp, targetUid: (card as any).uid });\r\n          log('Trap: Fake News – deactivated media/platform card.');\r\n          consumed.push(t);\r\n        }\r\n        break;\r\n\r\n      // neu: Initiative canceln (sofort beim Ausspielen der Initiative)\r\n      case 'trap.legal_injunction.cancel_next_initiative':\r\n        if (isInitiative && (card as any).uid != null) {\r\n          enqueue({ type: 'CANCEL_CARD', player: opp, targetUid: (card as any).uid });\r\n          log('Trap: Legal Injunction – cancelled initiative.');\r\n          consumed.push(t);\r\n        }\r\n        break;\r\n\r\n      // neu: Karte zurück auf Hand (egal welcher Typ)\r\n      case 'trap.whistleblower.return_last_played':\r\n        if ((card as any).uid != null) {\r\n          enqueue({ type: 'RETURN_TO_HAND', player: playedBy, targetUid: (card as any).uid });\r\n          log('Trap: Whistleblower – returned played card to hand.');\r\n          consumed.push(t);\r\n        }\r\n        break;\r\n\r\n      // neu: Gegner discards 2 bei nächstem Play\r\n      case 'trap.data_breach.opp_discard2':\r\n        enqueue({ type: 'DISCARD_RANDOM_FROM_HAND', player: playedBy === 1 ? 2 : 1, amount: 2 });\r\n        log('Trap: Data Breach – opponent discards 2.');\r\n        consumed.push(t);\r\n        break;\r\n\r\n      // neu: Public deaktivieren\r\n      case 'trap.media_blackout.deactivate_public':\r\n        if (isPublic && (card as any).uid != null) {\r\n          enqueue({ type: 'DEACTIVATE_CARD', player: opp, targetUid: (card as any).uid });\r\n          log('Trap: Media Blackout – deactivated public card.');\r\n          consumed.push(t);\r\n        }\r\n        break;\r\n\r\n      // neu: AP -2 für Gegner beim nächsten Play\r\n      case 'trap.budget_freeze.opp_ap_minus2':\r\n        enqueue({ type: 'ADD_AP', player: playedBy, amount: -2 });\r\n        log('Trap: Budget Freeze – opponent AP -2.');\r\n        consumed.push(t);\r\n        break;\r\n\r\n      // neu: Government deaktivieren\r\n      case 'trap.sabotage.deactivate_gov':\r\n        if (isGovernment && (card as any).uid != null) {\r\n          enqueue({ type: 'DEACTIVATE_CARD', player: opp, targetUid: (card as any).uid });\r\n          log('Trap: Sabotage – deactivated government card.');\r\n          consumed.push(t);\r\n        }\r\n        break;\r\n\r\n      // Strategic Disclosure: Government-Karte zurückgeben\r\n      case 'trap.strategic_disclosure.return_gov':\r\n        if (isGovernment && (card as any).uid != null) {\r\n          enqueue({ type: 'RETURN_TO_HAND', player: playedBy, targetUid: (card as any).uid });\r\n          log('Trap: Strategic Disclosure – returned government card to hand.');\r\n          consumed.push(t);\r\n        }\r\n        break;\r\n\r\n      case 'trap.whistleblower.debuff_next_gov_minus2':\r\n        // Robust trigger: treat any played politician (pol) as government trigger\r\n        const playedIsPol = (card as any)?.kind === 'pol' || isGovernment;\r\n        if (!playedIsPol) {\r\n          // not a government/pol card — skip\r\n          enqueue({ type: 'LOG', msg: `DEBUG: Whistleblower present but played card is not government/pol (${(card as any).name || (card as any).key})` });\r\n          break;\r\n        }\r\n        if ((card as any).uid == null) {\r\n          enqueue({ type: 'LOG', msg: `DEBUG: Whistleblower cannot apply - target missing uid for ${(card as any).name || (card as any).key}` });\r\n          break;\r\n        }\r\n\r\n        // Compute number of Activist cards on both players' boards (innen + aussen)\r\n        const cd = require('../data/cardDetails') as any;\r\n        let activistCount = 0;\r\n        for (const p of [1, 2] as const) {\r\n          const innen = state.board[p]?.innen || [];\r\n          const aussen = state.board[p]?.aussen || [];\r\n          const all = [...innen, ...aussen];\r\n          for (const c of all) {\r\n            if (!c) continue;\r\n            const subcats = cd.getCardDetails?.((c as any).name)?.subcategories as string[] | undefined;\r\n            const legacyTag = (c as any).tag === 'Activist' || (c as any).tag === 'Aktivist' || (c as any).tag === 'Activists' || (c as any).tag === 'Movement';\r\n            if ((Array.isArray(subcats) && subcats.includes('Activist')) || legacyTag) {\r\n              // ignore deactivated public/pol cards\r\n              if (!(c as any).deactivated) activistCount++;\r\n            }\r\n          }\r\n        }\r\n\r\n        // Base debuff -2 plus -1 per Activist (both boards), capped at -6 total\r\n        const totalDebuffMagnitude = Math.min(6, 2 + activistCount);\r\n        const amount = -totalDebuffMagnitude;\r\n\r\n        enqueue({ type: 'DEBUFF_CARD', player: opp, targetUid: (card as any).uid, amount } as any);\r\n        const debuffMsg = `Trap: Whistleblower – government card gets ${amount} Influence (base -2 + activists ${activistCount}, capped at -6).`;\r\n        enqueue({ type: 'LOG', msg: debuffMsg });\r\n        // Immediate console log for better chronological trace before warnings\r\n        log(debuffMsg);\r\n        log(`🟢 trap.whistleblower triggered: applied ${amount} to uid ${(card as any).uid} (activists=${activistCount})`);\r\n        consumed.push(t);\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n  });\r\n\r\n  if (consumed.length) {\r\n    // Build consumption indexes for robust removal\r\n    const consumedKeys = new Set(consumed.map(c => (c as any).key).filter(Boolean));\r\n    // Also include base card keys (namespace + card) to catch visual trap card objects\r\n    // Example: 'trap.whistleblower.return_last_played' -> add 'trap.whistleblower'\r\n    for (const k of Array.from(consumedKeys)) {\r\n      if (typeof k === 'string') {\r\n        const parts = k.split('.');\r\n        if (parts.length >= 3) {\r\n          const baseKey = parts.slice(0, 2).join('.');\r\n          consumedKeys.add(baseKey);\r\n        }\r\n      }\r\n    }\r\n    const consumedUids = new Set(consumed.map(c => (c as any).uid).filter(Boolean));\r\n    const consumedNames = new Set(consumed.map(c => (c as any).name).filter(Boolean));\r\n    const consumedRefs = new Set(consumed);\r\n\r\n    // Remove consumed trap registrations and any visual trap card objects from both players' trap lists\r\n    for (const p of [1, 2] as const) {\r\n      const list = (state.traps as any)[p] || [];\r\n      (state.traps as any)[p] = list.filter((entry: any) => {\r\n        if (!entry) return false;\r\n        // Direct reference match\r\n        if (consumedRefs.has(entry)) return false;\r\n        // registration object with key\r\n        if (entry.key && consumedKeys.has(entry.key)) return false;\r\n        // match by uid\r\n        if ((entry as any).uid && consumedUids.has((entry as any).uid)) return false;\r\n        // match by name\r\n        if ((entry as any).name && consumedNames.has((entry as any).name)) return false;\r\n\r\n        // If entry looks like a card object, also remove if its type explicitly indicates a trap\r\n        if (entry && entry.kind === 'spec') {\r\n          const typeStr = String((entry as any).type || '').toLowerCase();\r\n          if (typeStr.includes('trap')) return false;\r\n        }\r\n\r\n        return true;\r\n      });\r\n    }\r\n\r\n    // Ensure the visual trap card is removed from any board lanes if it was added there\r\n    try {\r\n      const removeIfTrapOnBoard = (arr: any[]) => {\r\n        return arr.filter(c => {\r\n          if (!c) return true;\r\n          const key = (c as any).key || (((c as any).name) && String((c as any).name).toLowerCase().replace(/[^a-z0-9_.-]/g, '_'));\r\n          const typeStr = String((c as any).type || '').toLowerCase();\r\n          if (typeStr.includes('trap')) return false;\r\n          if (key && consumedKeys.has(key)) return false;\r\n          return true;\r\n        });\r\n      };\r\n\r\n      // Remove from opponent board lanes (innen, aussen, sofort)\r\n      if (state.board?.[opp]) {\r\n        state.board[opp].innen = removeIfTrapOnBoard(state.board[opp].innen || []);\r\n        state.board[opp].aussen = removeIfTrapOnBoard(state.board[opp].aussen || []);\r\n        state.board[opp].sofort = removeIfTrapOnBoard(state.board[opp].sofort || []);\r\n      }\r\n      // Additionally, remove any consumed trap card objects from all board lanes and move them to discard\r\n      try {\r\n        for (const c of consumed) {\r\n          const cUid = (c as any).uid;\r\n          const cKey = (c as any).key || (c as any).name;\r\n          for (const p of [1, 2] as const) {\r\n            for (const lane of ['innen', 'aussen', 'sofort'] as const) {\r\n              const arr = state.board[p][lane] as any[];\r\n              const idx = arr.findIndex(card => (card && ((card.uid && cUid && card.uid === cUid) || (card.key && cKey && card.key === cKey) || (card.name && cKey && card.name === cKey))));\r\n              if (idx !== -1) {\r\n                const [removed] = arr.splice(idx, 1);\r\n                state.discard = state.discard || [];\r\n                state.discard.push(removed);\r\n                enqueue({ type: 'LOG', msg: `Trap consumed: removed ${(removed && removed.name) || cKey} from board and moved to discard.` });\r\n              }\r\n            }\r\n          }\r\n        }\r\n      } catch (e) {}\r\n    } catch (e) {}\r\n  }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}