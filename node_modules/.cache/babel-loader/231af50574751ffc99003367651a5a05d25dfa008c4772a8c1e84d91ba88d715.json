{"ast":null,"code":"import { sumRow, getCardActionPointCost } from '../utils/gameUtils';\n// Basic AI player module with three difficulty presets.\n// takeTurn applies a state update via setGameState(prev => newState).\nexport function takeTurn(setGameState, difficulty, log) {\n  setGameState(prev => {\n    var _prev$aiEnabled$, _prev$aiEnabled;\n    const aiEnabled = (_prev$aiEnabled$ = (_prev$aiEnabled = prev.aiEnabled) === null || _prev$aiEnabled === void 0 ? void 0 : _prev$aiEnabled[2]) !== null && _prev$aiEnabled$ !== void 0 ? _prev$aiEnabled$ : false;\n    if (!aiEnabled || prev.current !== 2) return prev;\n    const hand = prev.hands[2];\n    const playerBoard = prev.board[1];\n    const aiBoard = prev.board[2];\n    const aiAP = prev.actionPoints[2];\n    log(`🤖 AI(${difficulty}) Analyse: P=${sumRow([...playerBoard.aussen])} vs AI=${sumRow([...aiBoard.aussen])}`);\n    if (aiAP <= 0) {\n      log('🤖 AI passt - keine AP mehr.');\n      return {\n        ...prev,\n        passed: {\n          ...prev.passed,\n          2: true\n        }\n      };\n    }\n    const candidates = [];\n    hand.forEach((card, idx) => {\n      const apCost = getCardActionPointCost(card, prev, 2);\n      if (apCost > aiAP) return;\n      let priority = 0;\n      let reason = '';\n      if (card.kind === 'pol') {\n        const polCard = card;\n        const lane = polCard.tag === 'Staatsoberhaupt' || polCard.tag === 'Regierungschef' || polCard.tag === 'Diplomat' ? 'aussen' : 'innen';\n        if (prev.board[2][lane].length < 5) {\n          // simple heuristics\n          priority = (polCard.influence || 0) + (lane === 'aussen' ? 50 : 20);\n          reason = lane === 'aussen' ? 'Regierungsaufbau' : 'Öffentlichkeit';\n        }\n      } else if (card.kind === 'spec') {\n        const specCard = card;\n        if (specCard.type === 'Sofort-Initiative' || specCard.type === 'Dauerhaft-Initiative') {\n          priority = specCard.bp ? 40 + specCard.bp * 5 : 50;\n          reason = 'Initiative';\n        } else if (specCard.type === 'Intervention') {\n          priority = 45;\n          reason = 'Intervention';\n        } else {\n          priority = 30;\n          reason = 'Sonstiges';\n        }\n      }\n      if (priority > 0) {\n        // difficulty adjustments\n        if (difficulty === 'medium') {\n          // small randomness\n          priority += Math.floor(Math.random() * 10) - 5;\n        } else if (difficulty === 'hard') {\n          // bias toward higher-impact plays\n          priority += 10;\n        }\n        candidates.push({\n          index: idx,\n          card,\n          priority,\n          reason,\n          apCost\n        });\n      }\n    });\n    if (candidates.length === 0) {\n      log('🤖 AI passt - keine spielbaren Karten verfügbar.');\n      return {\n        ...prev,\n        passed: {\n          ...prev.passed,\n          2: true\n        }\n      };\n    }\n    candidates.sort((a, b) => b.priority - a.priority);\n    const choice = candidates[0];\n    if (choice.card.kind === 'pol') {\n      var _influence;\n      const polChoice = choice.card;\n      const lane = polChoice.tag === 'Staatsoberhaupt' || polChoice.tag === 'Regierungschef' || polChoice.tag === 'Diplomat' ? 'aussen' : 'innen';\n      const newP2Hand = [...prev.hands[2]];\n      const [played] = newP2Hand.splice(choice.index, 1);\n      const newP2Lane = [...prev.board[2][lane], played];\n      const newP2Board = {\n        ...prev.board[2],\n        [lane]: newP2Lane\n      };\n      const newBoard = {\n        ...prev.board,\n        2: newP2Board\n      };\n      const newActionPoints = {\n        ...prev.actionPoints,\n        2: prev.actionPoints[2] - choice.apCost\n      };\n      const laneName = lane === 'aussen' ? 'Regierungsreihe' : 'Öffentlichkeitsreihe';\n      const power = (_influence = played.influence) !== null && _influence !== void 0 ? _influence : 0;\n      log(`🤖 AI spielt ${played.name} (${power} Einfluss) nach ${laneName}. (${choice.reason})`);\n      return {\n        ...prev,\n        hands: {\n          ...prev.hands,\n          2: newP2Hand\n        },\n        board: newBoard,\n        actionPoints: newActionPoints\n      };\n    }\n\n    // spec cards\n    const newP2Hand = [...prev.hands[2]];\n    const [played] = newP2Hand.splice(choice.index, 1);\n    const newActionPoints = {\n      ...prev.actionPoints,\n      2: prev.actionPoints[2] - choice.apCost\n    };\n\n    // Permanent initiatives try to occupy slots\n    if (played.type === 'Dauerhaft-Initiative') {\n      const slotType = played.slot === 'Öffentlichkeit' ? 'public' : 'government';\n      if (slotType === 'government' && !prev.permanentSlots[2].government) {\n        const newPermanentSlots = {\n          ...prev.permanentSlots,\n          2: {\n            ...prev.permanentSlots[2],\n            government: played\n          }\n        };\n        log(`🤖 AI legt ${played.name} in Regierung Spezial-Slot. (${choice.reason})`);\n        return {\n          ...prev,\n          hands: {\n            ...prev.hands,\n            2: newP2Hand\n          },\n          permanentSlots: newPermanentSlots,\n          actionPoints: newActionPoints\n        };\n      } else if (slotType === 'public' && !prev.permanentSlots[2].public) {\n        const newPermanentSlots = {\n          ...prev.permanentSlots,\n          2: {\n            ...prev.permanentSlots[2],\n            public: played\n          }\n        };\n        log(`🤖 AI legt ${played.name} in Öffentlichkeit Spezial-Slot. (${choice.reason})`);\n        return {\n          ...prev,\n          hands: {\n            ...prev.hands,\n            2: newP2Hand\n          },\n          permanentSlots: newPermanentSlots,\n          actionPoints: newActionPoints\n        };\n      }\n    }\n    log(`🤖 AI spielt Spezialkarte ${played.name}. (${choice.reason})`);\n    return {\n      ...prev,\n      hands: {\n        ...prev.hands,\n        2: newP2Hand\n      },\n      actionPoints: newActionPoints\n    };\n  });\n}\n\n// Expose a light-weight decision helper for tests\nexport function decideBestAction(state, player, difficulty = 'easy') {\n  // reuse takeTurn logic but without mutating state: produce an action suggestions\n  const hand = state.hands[player];\n  const aiAP = state.actionPoints[player];\n  if (aiAP <= 0) return {\n    type: 'pass'\n  };\n  const candidates = [];\n  hand.forEach((card, idx) => {\n    const apCost = getCardActionPointCost(card, state, player);\n    if (apCost > aiAP) return;\n    let priority = 0;\n    if (card.kind === 'pol') priority = card.influence + 50;else priority = 40;\n    if (difficulty === 'medium') priority += Math.floor(Math.random() * 10) - 5;\n    if (difficulty === 'hard') priority += 10;\n    candidates.push({\n      index: idx,\n      card,\n      priority\n    });\n  });\n  if (candidates.length === 0) return {\n    type: 'pass'\n  };\n  candidates.sort((a, b) => b.priority - a.priority);\n  return {\n    type: 'play',\n    index: candidates[0].index\n  };\n}","map":{"version":3,"names":["sumRow","getCardActionPointCost","takeTurn","setGameState","difficulty","log","prev","_prev$aiEnabled$","_prev$aiEnabled","aiEnabled","current","hand","hands","playerBoard","board","aiBoard","aiAP","actionPoints","aussen","passed","candidates","forEach","card","idx","apCost","priority","reason","kind","polCard","lane","tag","length","influence","specCard","type","bp","Math","floor","random","push","index","sort","a","b","choice","_influence","polChoice","newP2Hand","played","splice","newP2Lane","newP2Board","newBoard","newActionPoints","laneName","power","name","slotType","slot","permanentSlots","government","newPermanentSlots","public","decideBestAction","state","player"],"sources":["C:/Users/skank/Videos/Cards/Milchcards/src/ai/aiPlayer.ts"],"sourcesContent":["import { GameState, Card, Player } from '../types/game';\r\nimport { sumRow, getCardActionPointCost } from '../utils/gameUtils';\r\n\r\nexport type Difficulty = 'easy' | 'medium' | 'hard';\r\n\r\nexport type AIAction =\r\n  | { type: 'pass' }\r\n  | { type: 'play'; index: number; lane?: 'innen' | 'aussen' };\r\n\r\n// Basic AI player module with three difficulty presets.\r\n// takeTurn applies a state update via setGameState(prev => newState).\r\nexport function takeTurn(\r\n  setGameState: React.Dispatch<React.SetStateAction<GameState>>,\r\n  difficulty: Difficulty,\r\n  log: (msg: string) => void\r\n) {\r\n  setGameState(prev => {\r\n    const aiEnabled = prev.aiEnabled?.[2] ?? false;\r\n    if (!aiEnabled || prev.current !== 2) return prev;\r\n\r\n    const hand = prev.hands[2];\r\n    const playerBoard = prev.board[1];\r\n    const aiBoard = prev.board[2];\r\n    const aiAP = prev.actionPoints[2];\r\n\r\n    log(`🤖 AI(${difficulty}) Analyse: P=${sumRow([...playerBoard.aussen])} vs AI=${sumRow([...aiBoard.aussen])}`);\r\n\r\n    if (aiAP <= 0) {\r\n      log('🤖 AI passt - keine AP mehr.');\r\n      return { ...prev, passed: { ...prev.passed, 2: true } };\r\n    }\r\n\r\n    const candidates: Array<{ index: number; card: Card; priority: number; reason: string; apCost: number }> = [];\r\n\r\n    hand.forEach((card, idx) => {\r\n      const apCost = getCardActionPointCost(card, prev, 2);\r\n      if (apCost > aiAP) return;\r\n\r\n      let priority = 0;\r\n      let reason = '';\r\n\r\n      if (card.kind === 'pol') {\r\n        const polCard = card as any;\r\n        const lane = polCard.tag === 'Staatsoberhaupt' || polCard.tag === 'Regierungschef' || polCard.tag === 'Diplomat' ? 'aussen' : 'innen';\r\n        if (prev.board[2][lane].length < 5) {\r\n          // simple heuristics\r\n          priority = (polCard.influence || 0) + (lane === 'aussen' ? 50 : 20);\r\n          reason = lane === 'aussen' ? 'Regierungsaufbau' : 'Öffentlichkeit';\r\n        }\r\n      }\r\n      else if (card.kind === 'spec') {\r\n        const specCard = card as any;\r\n        if (specCard.type === 'Sofort-Initiative' || specCard.type === 'Dauerhaft-Initiative') {\r\n          priority = specCard.bp ? 40 + specCard.bp * 5 : 50;\r\n          reason = 'Initiative';\r\n        } else if (specCard.type === 'Intervention') {\r\n          priority = 45;\r\n          reason = 'Intervention';\r\n        } else {\r\n          priority = 30;\r\n          reason = 'Sonstiges';\r\n        }\r\n      }\r\n\r\n      if (priority > 0) {\r\n        // difficulty adjustments\r\n        if (difficulty === 'medium') {\r\n          // small randomness\r\n          priority += Math.floor(Math.random() * 10) - 5;\r\n        } else if (difficulty === 'hard') {\r\n          // bias toward higher-impact plays\r\n          priority += 10;\r\n        }\r\n\r\n        candidates.push({ index: idx, card, priority, reason, apCost });\r\n      }\r\n    });\r\n\r\n    if (candidates.length === 0) {\r\n      log('🤖 AI passt - keine spielbaren Karten verfügbar.');\r\n      return { ...prev, passed: { ...prev.passed, 2: true } };\r\n    }\r\n\r\n    candidates.sort((a, b) => b.priority - a.priority);\r\n    const choice = candidates[0];\r\n\r\n    if (choice.card.kind === 'pol') {\r\n      const polChoice = choice.card as any;\r\n      const lane = polChoice.tag === 'Staatsoberhaupt' || polChoice.tag === 'Regierungschef' || polChoice.tag === 'Diplomat' ? 'aussen' : 'innen';\r\n\r\n      const newP2Hand = [...prev.hands[2]];\r\n      const [played] = newP2Hand.splice(choice.index, 1);\r\n      const newP2Lane = [...prev.board[2][lane], played];\r\n      const newP2Board = { ...prev.board[2], [lane]: newP2Lane };\r\n      const newBoard = { ...prev.board, 2: newP2Board };\r\n      const newActionPoints = { ...prev.actionPoints, 2: prev.actionPoints[2] - choice.apCost };\r\n\r\n      const laneName = lane === 'aussen' ? 'Regierungsreihe' : 'Öffentlichkeitsreihe';\r\n      const power = (played as any).influence ?? 0;\r\n      log(`🤖 AI spielt ${played.name} (${power} Einfluss) nach ${laneName}. (${choice.reason})`);\r\n\r\n      return {\r\n        ...prev,\r\n        hands: { ...prev.hands, 2: newP2Hand },\r\n        board: newBoard,\r\n        actionPoints: newActionPoints\r\n      };\r\n    }\r\n\r\n    // spec cards\r\n    const newP2Hand = [...prev.hands[2]];\r\n    const [played] = newP2Hand.splice(choice.index, 1);\r\n    const newActionPoints = { ...prev.actionPoints, 2: prev.actionPoints[2] - choice.apCost };\r\n\r\n    // Permanent initiatives try to occupy slots\r\n    if ((played as any).type === 'Dauerhaft-Initiative') {\r\n      const slotType = (played as any).slot === 'Öffentlichkeit' ? 'public' : 'government';\r\n      if (slotType === 'government' && !prev.permanentSlots[2].government) {\r\n        const newPermanentSlots = { ...prev.permanentSlots, 2: { ...prev.permanentSlots[2], government: played } };\r\n        log(`🤖 AI legt ${played.name} in Regierung Spezial-Slot. (${choice.reason})`);\r\n        return { ...prev, hands: { ...prev.hands, 2: newP2Hand }, permanentSlots: newPermanentSlots, actionPoints: newActionPoints };\r\n      } else if (slotType === 'public' && !prev.permanentSlots[2].public) {\r\n        const newPermanentSlots = { ...prev.permanentSlots, 2: { ...prev.permanentSlots[2], public: played } };\r\n        log(`🤖 AI legt ${played.name} in Öffentlichkeit Spezial-Slot. (${choice.reason})`);\r\n        return { ...prev, hands: { ...prev.hands, 2: newP2Hand }, permanentSlots: newPermanentSlots, actionPoints: newActionPoints };\r\n      }\r\n    }\r\n\r\n    log(`🤖 AI spielt Spezialkarte ${played.name}. (${choice.reason})`);\r\n    return { ...prev, hands: { ...prev.hands, 2: newP2Hand }, actionPoints: newActionPoints };\r\n  });\r\n}\r\n\r\n// Expose a light-weight decision helper for tests\r\nexport function decideBestAction(state: GameState, player: Player, difficulty: Difficulty = 'easy'): AIAction {\r\n  // reuse takeTurn logic but without mutating state: produce an action suggestions\r\n  const hand = state.hands[player];\r\n  const aiAP = state.actionPoints[player];\r\n  if (aiAP <= 0) return { type: 'pass' };\r\n\r\n  const candidates: Array<{ index: number; card: Card; priority: number }> = [];\r\n  hand.forEach((card, idx) => {\r\n    const apCost = getCardActionPointCost(card, state, player);\r\n    if (apCost > aiAP) return;\r\n    let priority = 0;\r\n    if (card.kind === 'pol') priority = (card as any).influence + 50;\r\n    else priority = 40;\r\n    if (difficulty === 'medium') priority += Math.floor(Math.random() * 10) - 5;\r\n    if (difficulty === 'hard') priority += 10;\r\n    candidates.push({ index: idx, card, priority });\r\n  });\r\n  if (candidates.length === 0) return { type: 'pass' };\r\n  candidates.sort((a, b) => b.priority - a.priority);\r\n  return { type: 'play', index: candidates[0].index };\r\n}\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}