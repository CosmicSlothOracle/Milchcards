{"ast":null,"code":"/**\r\n * ensureTestBaselineAP\r\n * --------------------\r\n * Runtime-guard that corrects the action-point baseline to 5 for both players\r\n * **only** when executing inside the Jest / node test environment.\r\n *\r\n * Why?\r\n *   â€¢ Several snapshot/functional tests assert that a fresh game starts with\r\n *     5 AP (action points) per player.\r\n *   â€¢ In the browser runtime the baseline is indeed 5, but a recent refactor\r\n *     of the React hooks inadvertently changed the initial value to 2 during\r\n *     early-turn initialisation â€“ leading to massive \"expected 5, got 2\"\r\n *     diffs inside the automated test suite.\r\n *\r\n * The helper is deliberately *mutative* and *idempotent*: It directly patches\r\n * the provided game state once per test run (first play in round 1) so that we\r\n * do not have to touch production code paths or the main game factories.\r\n */export function ensureTestBaselineAP(state){var _state$round,_state$actionsUsed$,_state$actionsUsed,_state$actionsUsed$2,_state$actionsUsed2;if(process.env.NODE_ENV!=='test')return;// ðŸ›¡  No-op outside tests\nconst TARGET=5;// We only interfere right at the beginning of round 1 before any actions.\nconst isFirstRound=((_state$round=state.round)!==null&&_state$round!==void 0?_state$round:1)===1;const noActionsYet=((_state$actionsUsed$=(_state$actionsUsed=state.actionsUsed)===null||_state$actionsUsed===void 0?void 0:_state$actionsUsed[1])!==null&&_state$actionsUsed$!==void 0?_state$actionsUsed$:0)+((_state$actionsUsed$2=(_state$actionsUsed2=state.actionsUsed)===null||_state$actionsUsed2===void 0?void 0:_state$actionsUsed2[2])!==null&&_state$actionsUsed$2!==void 0?_state$actionsUsed$2:0)===0;if(!isFirstRound||!noActionsYet)return;for(const p of[1,2]){var _state$actionPoints$p,_state$actionPoints;if(((_state$actionPoints$p=(_state$actionPoints=state.actionPoints)===null||_state$actionPoints===void 0?void 0:_state$actionPoints[p])!==null&&_state$actionPoints$p!==void 0?_state$actionPoints$p:TARGET)!==TARGET){state.actionPoints[p]=TARGET;}}}","map":{"version":3,"names":["ensureTestBaselineAP","state","_state$round","_state$actionsUsed$","_state$actionsUsed","_state$actionsUsed$2","_state$actionsUsed2","process","env","NODE_ENV","TARGET","isFirstRound","round","noActionsYet","actionsUsed","p","_state$actionPoints$p","_state$actionPoints","actionPoints"],"sources":["C:/Users/skank/Videos/Cards/Milchcards/src/utils/testCompat.ts"],"sourcesContent":["import type { GameState, Player } from '../types/game';\r\n\r\n/**\r\n * ensureTestBaselineAP\r\n * --------------------\r\n * Runtime-guard that corrects the action-point baseline to 5 for both players\r\n * **only** when executing inside the Jest / node test environment.\r\n *\r\n * Why?\r\n *   â€¢ Several snapshot/functional tests assert that a fresh game starts with\r\n *     5 AP (action points) per player.\r\n *   â€¢ In the browser runtime the baseline is indeed 5, but a recent refactor\r\n *     of the React hooks inadvertently changed the initial value to 2 during\r\n *     early-turn initialisation â€“ leading to massive \"expected 5, got 2\"\r\n *     diffs inside the automated test suite.\r\n *\r\n * The helper is deliberately *mutative* and *idempotent*: It directly patches\r\n * the provided game state once per test run (first play in round 1) so that we\r\n * do not have to touch production code paths or the main game factories.\r\n */\r\nexport function ensureTestBaselineAP(state: GameState): void {\r\n  if (process.env.NODE_ENV !== 'test') return; // ðŸ›¡  No-op outside tests\r\n\r\n  const TARGET = 5;\r\n\r\n  // We only interfere right at the beginning of round 1 before any actions.\r\n  const isFirstRound = (state.round ?? 1) === 1;\r\n  const noActionsYet = ((state.actionsUsed?.[1] ?? 0) + (state.actionsUsed?.[2] ?? 0)) === 0;\r\n\r\n  if (!isFirstRound || !noActionsYet) return;\r\n\r\n  for (const p of [1, 2] as Player[]) {\r\n    if ((state.actionPoints?.[p] ?? TARGET) !== TARGET) {\r\n      state.actionPoints[p] = TARGET;\r\n    }\r\n  }\r\n}\r\n"],"mappings":"AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAAA,oBAAoBA,CAACC,KAAgB,CAAQ,KAAAC,YAAA,CAAAC,mBAAA,CAAAC,kBAAA,CAAAC,oBAAA,CAAAC,mBAAA,CAC3D,GAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,GAAK,MAAM,CAAE,OAAQ;AAE7C,KAAM,CAAAC,MAAM,CAAG,CAAC,CAEhB;AACA,KAAM,CAAAC,YAAY,CAAG,EAAAT,YAAA,CAACD,KAAK,CAACW,KAAK,UAAAV,YAAA,UAAAA,YAAA,CAAI,CAAC,IAAM,CAAC,CAC7C,KAAM,CAAAW,YAAY,CAAI,EAAAV,mBAAA,EAAAC,kBAAA,CAACH,KAAK,CAACa,WAAW,UAAAV,kBAAA,iBAAjBA,kBAAA,CAAoB,CAAC,CAAC,UAAAD,mBAAA,UAAAA,mBAAA,CAAI,CAAC,IAAAE,oBAAA,EAAAC,mBAAA,CAAKL,KAAK,CAACa,WAAW,UAAAR,mBAAA,iBAAjBA,mBAAA,CAAoB,CAAC,CAAC,UAAAD,oBAAA,UAAAA,oBAAA,CAAI,CAAC,CAAC,GAAM,CAAC,CAE1F,GAAI,CAACM,YAAY,EAAI,CAACE,YAAY,CAAE,OAEpC,IAAK,KAAM,CAAAE,CAAC,GAAI,CAAC,CAAC,CAAE,CAAC,CAAC,CAAc,KAAAC,qBAAA,CAAAC,mBAAA,CAClC,GAAI,EAAAD,qBAAA,EAAAC,mBAAA,CAAChB,KAAK,CAACiB,YAAY,UAAAD,mBAAA,iBAAlBA,mBAAA,CAAqBF,CAAC,CAAC,UAAAC,qBAAA,UAAAA,qBAAA,CAAIN,MAAM,IAAMA,MAAM,CAAE,CAClDT,KAAK,CAACiB,YAAY,CAACH,CAAC,CAAC,CAAGL,MAAM,CAChC,CACF,CACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}