{"ast":null,"code":"import { getStrongestGovernment } from './targets';\nimport { registerTrap } from './traps';\nimport { logAP, logDraw, logDiscardRandom, logDeactivateRandom, logBuffStrongest, logShield, logDeactivateCard, logOpportunist } from './logs';\nimport { getGlobalRNG } from '../services/rng';\nimport { logger } from '../debug/logger';\n// Helper to find strongest government uid for new intents\nfunction strongestGovernmentUid(state, p) {\n  var _state$board$p;\n  const govRow = (_state$board$p = state.board[p]) === null || _state$board$p === void 0 ? void 0 : _state$board$p.aussen;\n  if (!govRow || govRow.length === 0) return null;\n  const alive = govRow.filter(g => !g.deactivated);\n  if (!alive.length) return null;\n  const sorted = alive.slice().sort((a, b) => b.influence + (b.tempBuffs || 0) - (b.tempDebuffs || 0) - (a.influence + (a.tempBuffs || 0) - (a.tempDebuffs || 0)));\n  return sorted[0].uid;\n}\nfunction other(p) {\n  return p === 1 ? 2 : 1;\n}\nfunction logPush(state, msg) {\n  state.log.push(msg);\n}\nfunction strongestGov(state, p) {\n  const row = state.board[p].aussen;\n  if (!row.length) return null;\n  const alive = row.filter(c => !c.deactivated);\n  if (alive.length === 0) return null;\n  return alive.slice().sort((a, b) => b.influence + (b.tempBuffs || 0) - (b.tempDebuffs || 0) - (a.influence + (a.tempBuffs || 0) - (a.tempDebuffs || 0)))[0];\n}\nfunction publicNames(state, p) {\n  return state.board[p].innen.map(c => c.name);\n}\nfunction hasPublic(state, p, name) {\n  return publicNames(state, p).includes(name);\n}\nfunction findCardByUidOnBoard(state, uid) {\n  for (const p of [1, 2]) {\n    for (const lane of ['innen', 'aussen', 'sofort']) {\n      const arr = state.board[p][lane];\n      const hit = arr.find(c => c.uid === uid);\n      if (hit) return hit;\n    }\n  }\n  return null;\n}\nexport function resolveQueue(state, events) {\n  const rng = getGlobalRNG();\n\n  // Single pass FIFO\n  while (events.length) {\n    const ev = events.shift();\n    logger.dbg(`DQ ${ev.type}`, ev);\n    // Capture small snapshot for delta calc\n    const beforeAP = {\n      ...state.actionPoints\n    };\n    switch (ev.type) {\n      case 'LOG':\n        {\n          logPush(state, ev.msg);\n          break;\n        }\n      case 'ADD_AP':\n        {\n          var _state$effectFlags$ot;\n          const cur = state.actionPoints[ev.player];\n          const next = Math.max(0, cur + ev.amount);\n          state.actionPoints[ev.player] = next;\n          logger.dbg(`ADD_AP before=${cur} amount=${ev.amount} after=${state.actionPoints[ev.player]}`);\n\n          // Opportunist AP-Spiegelung (falls aktiv beim Gegner)\n          if ((_state$effectFlags$ot = state.effectFlags[other(ev.player)]) !== null && _state$effectFlags$ot !== void 0 && _state$effectFlags$ot.opportunistActive && ev.amount > 0) {\n            const mirror = {\n              type: 'ADD_AP',\n              player: other(ev.player),\n              amount: ev.amount\n            };\n            events.unshift(mirror);\n            logPush(state, `Opportunist: AP +${ev.amount} gespiegelt.`);\n          }\n          logPush(state, logAP(ev.player, cur, next));\n          break;\n        }\n      case 'DRAW_CARDS':\n        {\n          const handBefore = state.hands[ev.player].length;\n          for (let i = 0; i < ev.amount; i++) {\n            const top = state.decks[ev.player].shift();\n            if (top) {\n              state.hands[ev.player].push(top);\n              logPush(state, logDraw(ev.player, top.name));\n            }\n          }\n          const handAfter = state.hands[ev.player].length;\n          logger.dbg(`DRAW_CARDS player=${ev.player} before=${handBefore} after=${handAfter}`);\n          break;\n        }\n      case 'DISCARD_RANDOM_FROM_HAND':\n        {\n          const hand = state.hands[ev.player];\n          for (let i = 0; i < ev.amount && hand.length > 0; i++) {\n            const idx = rng.randomInt(hand.length);\n            const [card] = hand.splice(idx, 1);\n            state.discard.push(card);\n            logPush(state, logDiscardRandom(ev.player, card.name));\n          }\n          break;\n        }\n      case 'DEACTIVATE_RANDOM_HAND':\n        {\n          // Deaktivieren von Handkarten (nicht entfernen)\n          const hand = state.hands[ev.player];\n          const activeCards = hand.filter(c => !c.deactivated);\n          logger.dbg(`DEACTIVATE_RANDOM_HAND: P${ev.player} handSize=${hand.length} activeCandidates=${activeCards.length}`);\n          if (activeCards.length === 0) {\n            logPush(state, `Oprah: no active hand cards to deactivate for P${ev.player}`);\n            break;\n          }\n          for (let i = 0; i < ev.amount && activeCards.length > 0; i++) {\n            const card = rng.pick(activeCards);\n            logger.dbg(`DEACTIVATE_RANDOM_HAND: picked=${card ? card.name : 'undefined'} for P${ev.player}`);\n            if (card) {\n              card.deactivated = true;\n              card._deactivatedBy = 'OPRAH';\n              logPush(state, logDeactivateRandom(ev.player, card.name));\n              // Entferne aus activeCards für nächste Iteration\n              const idx = activeCards.indexOf(card);\n              if (idx > -1) activeCards.splice(idx, 1);\n            }\n          }\n          break;\n        }\n\n      // Legacy cases - removed\n      // SET_DISCOUNT and REFUND_NEXT_INITIATIVE are no longer supported\n      // Use ADD_AP instead\n\n      case 'GRANT_SHIELD':\n        {\n          if (!state.shields) state.shields = new Set();\n          // Wenn kein spezifischer targetUid angegeben ist, verwende Platzhalter pro Spieler (-1 oder -2)\n          const uid = ev.targetUid !== undefined ? ev.targetUid : ev.player === 1 ? -1 : -2;\n          state.shields.add(uid);\n          logPush(state, logShield(uid));\n          break;\n        }\n      case 'DEACTIVATE_CARD':\n        {\n          const card = findCardByUidOnBoard(state, ev.targetUid);\n          if (card) {\n            card.deactivated = true;\n            logPush(state, logDeactivateCard(card.name));\n\n            // Falls die Karte eine Shield-Aura ist, entferne Spielerschilde\n            if (card.effectKey === 'init.intelligence_liaison.shield_aura') {\n              if (state.shields) {\n                const placeholder = ev.player === 1 ? -1 : -2;\n                state.shields.delete(placeholder);\n              }\n            }\n          }\n          break;\n        }\n      case 'REACTIVATE_CARD':\n        {\n          const card = findCardByUidOnBoard(state, ev.targetUid);\n          if (card) {\n            card.deactivated = false;\n            logPush(state, `🔄 ${card.name} wurde reaktiviert`);\n          }\n          break;\n        }\n      case 'RETURN_TO_HAND':\n        {\n          const card = findCardByUidOnBoard(state, ev.targetUid);\n          if (card) {\n            // Remove from board\n            for (const p of [1, 2]) {\n              for (const lane of ['innen', 'aussen', 'sofort']) {\n                const idx = state.board[p][lane].findIndex(c => c.uid === ev.targetUid);\n                if (idx !== -1) {\n                  state.board[p][lane].splice(idx, 1);\n                  // Add to hand\n                  state.hands[ev.player].push(card);\n                  logPush(state, `🔄 ${card.name} wurde zur Hand zurückgegeben`);\n                  break;\n                }\n              }\n            }\n          }\n          break;\n        }\n      case 'CANCEL_CARD':\n        {\n          const card = findCardByUidOnBoard(state, ev.targetUid);\n          if (card) {\n            // Remove from board and add to discard\n            for (const p of [1, 2]) {\n              for (const lane of ['innen', 'aussen', 'sofort']) {\n                const idx = state.board[p][lane].findIndex(c => c.uid === ev.targetUid);\n                if (idx !== -1) {\n                  state.board[p][lane].splice(idx, 1);\n                  state.discard.push(card);\n                  logPush(state, `❌ ${card.name} wurde annulliert`);\n                  break;\n                }\n              }\n            }\n          }\n          break;\n        }\n      case 'REGISTER_TRAP':\n        {\n          registerTrap(state, ev.player, ev.key);\n          logPush(state, `Trap registered: ${ev.key} (P${ev.player})`);\n          break;\n        }\n      case 'BUFF_STRONGEST_GOV':\n      case 'ADJUST_INFLUENCE':\n        {\n          // Alias auf BUFF_STRONGEST_GOV\n          const player = ev.player;\n          const amount = ev.amount;\n          const tgt = getStrongestGovernment(state, player);\n          if (tgt) {\n            var _state$effectFlags$ot2;\n            if (amount >= 0) {\n              tgt.tempBuffs = (tgt.tempBuffs || 0) + amount;\n            } else {\n              tgt.tempDebuffs = (tgt.tempDebuffs || 0) + Math.abs(amount);\n            }\n            logPush(state, logBuffStrongest(player, tgt.name, amount));\n\n            // Opportunist-Spiegelung (falls aktiv beim Gegner)\n            if ((_state$effectFlags$ot2 = state.effectFlags[other(player)]) !== null && _state$effectFlags$ot2 !== void 0 && _state$effectFlags$ot2.opportunistActive && amount > 0) {\n              const mirror = {\n                type: 'BUFF_STRONGEST_GOV',\n                player: other(player),\n                amount\n              };\n              events.unshift(mirror);\n              logPush(state, logOpportunist(other(player), amount));\n            }\n          }\n          break;\n        }\n      case 'DEBUFF_CARD':\n        {\n          const card = findCardByUidOnBoard(state, ev.targetUid);\n          if (card && card.kind === 'pol') {\n            const tgt = card;\n            tgt.tempDebuffs = (tgt.tempDebuffs || 0) + Math.abs(ev.amount);\n            logPush(state, `🔻 ${tgt.name}: -${Math.abs(ev.amount)} Influence`);\n          }\n          break;\n        }\n\n      // ===== New intent event handlers =====\n\n      case 'DEACTIVATE_STRONGEST_ENEMY_GOV':\n        {\n          const opp = ev.player === 1 ? 2 : 1;\n          const uid = strongestGovernmentUid(state, opp);\n          if (uid !== null) {\n            events.unshift({\n              type: 'DEACTIVATE_CARD',\n              player: opp,\n              targetUid: uid\n            });\n            events.unshift({\n              type: 'LOG',\n              msg: 'Party Offensive: strongest enemy Government deactivated.'\n            });\n          } else {\n            events.unshift({\n              type: 'LOG',\n              msg: 'Party Offensive: no enemy Government to deactivate.'\n            });\n          }\n          break;\n        }\n      case 'LOCK_OPPONENT_INITIATIVES_EOT':\n        {\n          const opp = ev.player === 1 ? 2 : 1;\n          state.effectFlags[opp].initiativesLocked = true;\n          events.unshift({\n            type: 'LOG',\n            msg: 'Opposition Blockade: opponent initiatives locked until end of turn.'\n          });\n          break;\n        }\n      case 'SET_DOUBLE_PUBLIC_AURA':\n        {\n          state.effectFlags[ev.player].doublePublicAura = true;\n          events.unshift({\n            type: 'LOG',\n            msg: 'Influencer Campaign: next Public aura will be doubled.'\n          });\n          break;\n        }\n      case 'SET_OPPORTUNIST_ACTIVE':\n        {\n          const {\n            player,\n            active\n          } = ev;\n          state.effectFlags[player].opportunistActive = active;\n          if (active) {\n            events.unshift({\n              type: 'LOG',\n              msg: 'Opportunist: AP effects will be mirrored until end of turn.'\n            });\n          }\n          break;\n        }\n      case 'INITIATIVE_ACTIVATED':\n        {\n          var _state$board$ev$playe, _state$board$ev$playe2, _state$effectFlags$ev;\n          // Initiative activation event - trigger reactions from public cards\n          logPush(state, 'Initiative activated.');\n\n          // Check for public cards that react to initiative activation\n          const publicCards = ((_state$board$ev$playe = state.board[ev.player]) === null || _state$board$ev$playe === void 0 ? void 0 : _state$board$ev$playe.innen) || [];\n\n          // Shadow Lobbying: +1 influence per own Oligarch-tag on board (max +3)\n          // Detect if the activating initiative was Shadow Lobbying by checking the last played instant in slot\n          const instantSlot = ((_state$board$ev$playe2 = state.board[ev.player]) === null || _state$board$ev$playe2 === void 0 ? void 0 : _state$board$ev$playe2.sofort) || [];\n          const lastInstant = instantSlot[0];\n          if (lastInstant && (lastInstant.effectKey === 'init.shadow_lobbying.per_oligarch' || lastInstant.name === 'Shadow Lobbying')) {\n            const ownBoard = [...state.board[ev.player].innen, ...state.board[ev.player].aussen];\n            const oligarchCount = ownBoard.filter(c => {\n              var _getCardDetails, _ref, _getCardDetails$call;\n              const details = c.name ? require('../data/cardDetails') : null;\n              // Fallback: try BaseSpecial tag if available\n              const sub = (_getCardDetails = (_ref = require('../data/cardDetails')).getCardDetails) === null || _getCardDetails === void 0 ? void 0 : (_getCardDetails$call = _getCardDetails.call(_ref, c.name)) === null || _getCardDetails$call === void 0 ? void 0 : _getCardDetails$call.subcategories;\n              const hasNewTag = Array.isArray(sub) && sub.includes('Oligarch');\n              const legacyTag = c.tag === 'Oligarch';\n              return hasNewTag || legacyTag;\n            }).length;\n            const amt = Math.min(oligarchCount, 3);\n            if (amt > 0) {\n              events.unshift({\n                type: 'BUFF_STRONGEST_GOV',\n                player: ev.player,\n                amount: amt\n              });\n              events.unshift({\n                type: 'LOG',\n                msg: `Shadow Lobbying: stärkste Regierung +${amt} Einfluss (pro Oligarch, max 3).`\n              });\n            } else {\n              events.unshift({\n                type: 'LOG',\n                msg: `Shadow Lobbying: Keine Oligarchen – kein Einfluss-Buff.`\n              });\n            }\n          }\n\n          // Elon Musk: +1 AP on initiative activation\n          const elonMusk = publicCards.find(card => card.kind === 'spec' && card.name === 'Elon Musk');\n          if (elonMusk) {\n            events.unshift({\n              type: 'ADD_AP',\n              player: ev.player,\n              amount: 1\n            });\n            events.unshift({\n              type: 'LOG',\n              msg: 'Elon Musk: +1 AP on initiative activation.'\n            });\n          }\n\n          // Mark Zuckerberg: +1 AP on initiative activation (once per turn)\n          const markZuckerberg = publicCards.find(card => card.kind === 'spec' && card.name === 'Mark Zuckerberg');\n          if (markZuckerberg && !((_state$effectFlags$ev = state.effectFlags[ev.player]) !== null && _state$effectFlags$ev !== void 0 && _state$effectFlags$ev.markZuckerbergUsed)) {\n            events.unshift({\n              type: 'ADD_AP',\n              player: ev.player,\n              amount: 1\n            });\n            events.unshift({\n              type: 'LOG',\n              msg: 'Mark Zuckerberg: +1 AP on initiative activation.'\n            });\n            if (!state.effectFlags[ev.player]) {\n              state.effectFlags[ev.player] = {\n                markZuckerbergUsed: false\n              };\n            }\n            state.effectFlags[ev.player].markZuckerbergUsed = true;\n          }\n\n          // Ai Weiwei: +1 card +1 AP on initiative activation\n          const aiWeiwei = publicCards.find(card => card.kind === 'spec' && card.name === 'Ai Weiwei');\n          if (aiWeiwei) {\n            events.unshift({\n              type: 'DRAW_CARDS',\n              player: ev.player,\n              amount: 1\n            });\n            events.unshift({\n              type: 'ADD_AP',\n              player: ev.player,\n              amount: 1\n            });\n            events.unshift({\n              type: 'LOG',\n              msg: 'Ai Weiwei: +1 card +1 AP on initiative activation.'\n            });\n          }\n\n          // Sam Altman: +1 card +1 AP on AI-related initiative activation\n          const samAltman = publicCards.find(card => card.kind === 'spec' && card.name === 'Sam Altman');\n          if (samAltman) {\n            // Check if the activated initiative is AI-related (would need to be passed as context)\n            // For now, this is handled via the initiative card's tag check in the activation flow\n            events.unshift({\n              type: 'LOG',\n              msg: 'Sam Altman: AI initiative detected - bonus ready.'\n            });\n          }\n\n          // Digitaler Wahlkampf: draw 1 card per own Media-tag on board\n          if (lastInstant && (lastInstant.effectKey === 'init.digital_campaign.per_media' || lastInstant.name === 'Digitaler Wahlkampf')) {\n            const ownBoard = [...state.board[ev.player].innen, ...state.board[ev.player].aussen];\n            const mediaCount = ownBoard.filter(c => {\n              var _getCardDetails2, _ref2, _getCardDetails2$call;\n              const sub = (_getCardDetails2 = (_ref2 = require('../data/cardDetails')).getCardDetails) === null || _getCardDetails2 === void 0 ? void 0 : (_getCardDetails2$call = _getCardDetails2.call(_ref2, c.name)) === null || _getCardDetails2$call === void 0 ? void 0 : _getCardDetails2$call.subcategories;\n              const legacy = c.tag === 'Medien' || c.tag === 'Media';\n              return Array.isArray(sub) && sub.includes('Medien') || legacy || Array.isArray(sub) && sub.includes('Medien') || Array.isArray(sub) && sub.includes('Medien');\n            }).length;\n            if (mediaCount > 0) {\n              events.unshift({\n                type: 'DRAW_CARDS',\n                player: ev.player,\n                amount: mediaCount\n              });\n              events.unshift({\n                type: 'LOG',\n                msg: `Digitaler Wahlkampf: ziehe ${mediaCount} Karte(n) (pro Medien-Karte).`\n              });\n            } else {\n              events.unshift({\n                type: 'LOG',\n                msg: `Digitaler Wahlkampf: Keine Medien-Karten auf dem Feld.`\n              });\n            }\n          }\n          break;\n        }\n\n      // ONCE_AP_ON_ACTIVATION removed - use standard ADD_AP events instead\n\n      // ON_ACTIVATE_DRAW_AP removed - use standard ADD_AP and DRAW_CARDS events instead\n\n      // Simplified AP system: No initiative-specific bonuses\n      // All AP bonuses are now immediate ADD_AP events\n    }\n    // generic after snapshot diff for AP\n    if (state.actionPoints[1] !== beforeAP[1] || state.actionPoints[2] !== beforeAP[2]) {\n      logger.dbg(`AP delta P1 ${beforeAP[1]}->${state.actionPoints[1]} | P2 ${beforeAP[2]}->${state.actionPoints[2]}`);\n    }\n  }\n}","map":{"version":3,"names":["getStrongestGovernment","registerTrap","logAP","logDraw","logDiscardRandom","logDeactivateRandom","logBuffStrongest","logShield","logDeactivateCard","logOpportunist","getGlobalRNG","logger","strongestGovernmentUid","state","p","_state$board$p","govRow","board","aussen","length","alive","filter","g","deactivated","sorted","slice","sort","a","b","influence","tempBuffs","tempDebuffs","uid","other","logPush","msg","log","push","strongestGov","row","c","publicNames","innen","map","name","hasPublic","includes","findCardByUidOnBoard","lane","arr","hit","find","resolveQueue","events","rng","ev","shift","dbg","type","beforeAP","actionPoints","_state$effectFlags$ot","cur","player","next","Math","max","amount","effectFlags","opportunistActive","mirror","unshift","handBefore","hands","i","top","decks","handAfter","hand","idx","randomInt","card","splice","discard","activeCards","pick","_deactivatedBy","indexOf","shields","Set","targetUid","undefined","add","effectKey","placeholder","delete","findIndex","key","tgt","_state$effectFlags$ot2","abs","kind","opp","initiativesLocked","doublePublicAura","active","_state$board$ev$playe","_state$board$ev$playe2","_state$effectFlags$ev","publicCards","instantSlot","sofort","lastInstant","ownBoard","oligarchCount","_getCardDetails","_ref","_getCardDetails$call","details","require","sub","getCardDetails","call","subcategories","hasNewTag","Array","isArray","legacyTag","tag","amt","min","elonMusk","markZuckerberg","markZuckerbergUsed","aiWeiwei","samAltman","mediaCount","_getCardDetails2","_ref2","_getCardDetails2$call","legacy"],"sources":["C:/Users/skank/Videos/Cards/Milchcards/src/utils/queue.ts"],"sourcesContent":["import { GameState, Player, PoliticianCard, Card } from '../types/game';\nimport { EffectEvent } from '../types/effects';\nimport { getStrongestGovernment } from './targets';\nimport { AP_CAP, MAX_DISCOUNT, MAX_REFUND } from '../config/gameConstants';\nimport { registerTrap } from './traps';\nimport {\n  logAP, logDiscount, logRefund, logDraw, logDiscardRandom,\n  logDeactivateRandom, logBuffStrongest, logShield, logDeactivateCard,\n  logInitiativeAura, logAiWeiwei, logPlattformBonus, logOpportunist\n} from './logs';\nimport { getGlobalRNG } from '../services/rng';\nimport { logger } from '../debug/logger';\n// Helper to find strongest government uid for new intents\nfunction strongestGovernmentUid(state: GameState, p: Player): number | null {\n  const govRow = state.board[p]?.aussen as PoliticianCard[];\n  if (!govRow || govRow.length === 0) return null;\n  const alive = govRow.filter(g => !(g as any).deactivated);\n  if (!alive.length) return null;\n  const sorted = alive.slice().sort((a,b) => (b.influence + (b.tempBuffs||0) - (b.tempDebuffs||0)) - (a.influence + (a.tempBuffs||0) - (a.tempDebuffs||0)));\n  return sorted[0].uid;\n}\n\nfunction other(p: Player): Player { return p === 1 ? 2 : 1; }\nfunction logPush(state: GameState, msg: string) { state.log.push(msg); }\n\nfunction strongestGov(state: GameState, p: Player): PoliticianCard | null {\n  const row = state.board[p].aussen as PoliticianCard[];\n  if (!row.length) return null;\n  const alive = row.filter(c => !c.deactivated);\n  if (alive.length === 0) return null;\n  return alive.slice().sort((a,b) => (b.influence + (b.tempBuffs||0) - (b.tempDebuffs||0)) - (a.influence + (a.tempBuffs||0) - (a.tempDebuffs||0)))[0];\n}\n\nfunction publicNames(state: GameState, p: Player): string[] {\n  return state.board[p].innen.map(c => c.name);\n}\n\nfunction hasPublic(state: GameState, p: Player, name: string): boolean {\n  return publicNames(state, p).includes(name);\n}\n\nfunction findCardByUidOnBoard(state: GameState, uid: number): Card | null {\n  for (const p of [1,2] as const) {\n    for (const lane of ['innen','aussen','sofort'] as const) {\n      const arr = state.board[p][lane];\n      const hit = arr.find(c => c.uid === uid);\n      if (hit) return hit;\n    }\n  }\n  return null;\n}\n\nexport function resolveQueue(state: GameState, events: EffectEvent[]) {\n  const rng = getGlobalRNG();\n\n  // Single pass FIFO\n  while (events.length) {\n    const ev = events.shift()!;\n    logger.dbg(`DQ ${ev.type}`, ev);\n    // Capture small snapshot for delta calc\n    const beforeAP = { ...state.actionPoints };\n\n    switch (ev.type) {\n      case 'LOG': {\n        logPush(state, ev.msg);\n        break;\n      }\n\n      case 'ADD_AP': {\n        const cur = state.actionPoints[ev.player];\n        const next = Math.max(0, cur + ev.amount);\n        state.actionPoints[ev.player] = next;\n        logger.dbg(`ADD_AP before=${cur} amount=${ev.amount} after=${state.actionPoints[ev.player]}`);\n\n        // Opportunist AP-Spiegelung (falls aktiv beim Gegner)\n        if (state.effectFlags[other(ev.player)]?.opportunistActive && ev.amount > 0) {\n          const mirror = { type: 'ADD_AP', player: other(ev.player), amount: ev.amount } as EffectEvent;\n          events.unshift(mirror);\n          logPush(state, `Opportunist: AP +${ev.amount} gespiegelt.`);\n        }\n\n        logPush(state, logAP(ev.player, cur, next));\n        break;\n      }\n\n      case 'DRAW_CARDS': {\n        const handBefore = state.hands[ev.player].length;\n        for (let i = 0; i < ev.amount; i++) {\n          const top = state.decks[ev.player].shift();\n          if (top) {\n            state.hands[ev.player].push(top);\n            logPush(state, logDraw(ev.player, top.name));\n          }\n        }\n        const handAfter = state.hands[ev.player].length;\n        logger.dbg(`DRAW_CARDS player=${ev.player} before=${handBefore} after=${handAfter}`);\n        break;\n      }\n\n      case 'DISCARD_RANDOM_FROM_HAND': {\n        const hand = state.hands[ev.player];\n        for (let i = 0; i < ev.amount && hand.length > 0; i++) {\n          const idx = rng.randomInt(hand.length);\n          const [card] = hand.splice(idx, 1);\n          state.discard.push(card);\n          logPush(state, logDiscardRandom(ev.player, card.name));\n        }\n        break;\n      }\n\n      case 'DEACTIVATE_RANDOM_HAND': {\n        // Deaktivieren von Handkarten (nicht entfernen)\n        const hand = state.hands[ev.player];\n        const activeCards = hand.filter(c => !(c as any).deactivated);\n        logger.dbg(`DEACTIVATE_RANDOM_HAND: P${ev.player} handSize=${hand.length} activeCandidates=${activeCards.length}`);\n        if (activeCards.length === 0) {\n          logPush(state, `Oprah: no active hand cards to deactivate for P${ev.player}`);\n          break;\n        }\n        for (let i = 0; i < ev.amount && activeCards.length > 0; i++) {\n          const card = rng.pick(activeCards);\n          logger.dbg(`DEACTIVATE_RANDOM_HAND: picked=${card ? card.name : 'undefined'} for P${ev.player}`);\n          if (card) {\n            (card as any).deactivated = true;\n            (card as any)._deactivatedBy = 'OPRAH';\n            logPush(state, logDeactivateRandom(ev.player, card.name));\n            // Entferne aus activeCards für nächste Iteration\n            const idx = activeCards.indexOf(card);\n            if (idx > -1) activeCards.splice(idx, 1);\n          }\n        }\n        break;\n      }\n\n      // Legacy cases - removed\n      // SET_DISCOUNT and REFUND_NEXT_INITIATIVE are no longer supported\n      // Use ADD_AP instead\n\n      case 'GRANT_SHIELD': {\n        if (!state.shields) state.shields = new Set();\n        // Wenn kein spezifischer targetUid angegeben ist, verwende Platzhalter pro Spieler (-1 oder -2)\n        const uid = ev.targetUid !== undefined ? ev.targetUid : (ev.player === 1 ? -1 : -2);\n        state.shields.add(uid);\n        logPush(state, logShield(uid));\n        break;\n      }\n\n      case 'DEACTIVATE_CARD': {\n        const card = findCardByUidOnBoard(state, ev.targetUid);\n        if (card) {\n          (card as any).deactivated = true;\n          logPush(state, logDeactivateCard(card.name));\n\n          // Falls die Karte eine Shield-Aura ist, entferne Spielerschilde\n          if ((card as any).effectKey === 'init.intelligence_liaison.shield_aura') {\n            if (state.shields) {\n              const placeholder = ev.player === 1 ? -1 : -2;\n              state.shields.delete(placeholder);\n            }\n          }\n        }\n        break;\n      }\n\n      case 'REACTIVATE_CARD': {\n        const card = findCardByUidOnBoard(state, ev.targetUid);\n        if (card) {\n          (card as any).deactivated = false;\n          logPush(state, `🔄 ${card.name} wurde reaktiviert`);\n        }\n        break;\n      }\n\n      case 'RETURN_TO_HAND': {\n        const card = findCardByUidOnBoard(state, ev.targetUid);\n        if (card) {\n          // Remove from board\n          for (const p of [1, 2] as const) {\n            for (const lane of ['innen', 'aussen', 'sofort'] as const) {\n              const idx = state.board[p][lane].findIndex(c => c.uid === ev.targetUid);\n              if (idx !== -1) {\n                state.board[p][lane].splice(idx, 1);\n                // Add to hand\n                state.hands[ev.player].push(card);\n                logPush(state, `🔄 ${card.name} wurde zur Hand zurückgegeben`);\n                break;\n              }\n            }\n          }\n        }\n        break;\n      }\n\n      case 'CANCEL_CARD': {\n        const card = findCardByUidOnBoard(state, ev.targetUid);\n        if (card) {\n          // Remove from board and add to discard\n          for (const p of [1, 2] as const) {\n            for (const lane of ['innen', 'aussen', 'sofort'] as const) {\n              const idx = state.board[p][lane].findIndex(c => c.uid === ev.targetUid);\n              if (idx !== -1) {\n                state.board[p][lane].splice(idx, 1);\n                state.discard.push(card);\n                logPush(state, `❌ ${card.name} wurde annulliert`);\n                break;\n              }\n            }\n          }\n        }\n        break;\n      }\n\n      case 'REGISTER_TRAP': {\n        registerTrap(state, ev.player, (ev as any).key);\n        logPush(state, `Trap registered: ${(ev as any).key} (P${ev.player})`);\n        break;\n      }\n\n      case 'BUFF_STRONGEST_GOV':\n      case 'ADJUST_INFLUENCE': { // Alias auf BUFF_STRONGEST_GOV\n        const player = ev.player;\n        const amount = (ev as any).amount;\n        const tgt = getStrongestGovernment(state, player);\n        if (tgt) {\n          if (amount >= 0) {\n            (tgt as PoliticianCard).tempBuffs = ((tgt as PoliticianCard).tempBuffs || 0) + amount;\n          } else {\n            (tgt as PoliticianCard).tempDebuffs = ((tgt as PoliticianCard).tempDebuffs || 0) + Math.abs(amount);\n          }\n          logPush(state, logBuffStrongest(player, tgt.name, amount));\n\n          // Opportunist-Spiegelung (falls aktiv beim Gegner)\n          if (state.effectFlags[other(player)]?.opportunistActive && amount > 0) {\n            const mirror = { type: 'BUFF_STRONGEST_GOV', player: other(player), amount } as EffectEvent;\n            events.unshift(mirror);\n            logPush(state, logOpportunist(other(player), amount));\n          }\n        }\n        break;\n      }\n\n      case 'DEBUFF_CARD': {\n        const card = findCardByUidOnBoard(state, ev.targetUid);\n        if (card && card.kind === 'pol') {\n          const tgt = card as any;\n          tgt.tempDebuffs = (tgt.tempDebuffs || 0) + Math.abs((ev as any).amount);\n          logPush(state, `🔻 ${tgt.name}: -${Math.abs((ev as any).amount)} Influence`);\n        }\n        break;\n      }\n\n      // ===== New intent event handlers =====\n\n      case 'DEACTIVATE_STRONGEST_ENEMY_GOV': {\n        const opp: Player = ev.player === 1 ? 2 : 1;\n        const uid = strongestGovernmentUid(state, opp);\n        if (uid !== null) {\n          events.unshift({ type: 'DEACTIVATE_CARD', player: opp, targetUid: uid });\n          events.unshift({ type: 'LOG', msg: 'Party Offensive: strongest enemy Government deactivated.' });\n        } else {\n          events.unshift({ type: 'LOG', msg: 'Party Offensive: no enemy Government to deactivate.' });\n        }\n        break;\n      }\n\n      case 'LOCK_OPPONENT_INITIATIVES_EOT': {\n        const opp: Player = ev.player === 1 ? 2 : 1;\n        state.effectFlags[opp].initiativesLocked = true;\n        events.unshift({ type: 'LOG', msg: 'Opposition Blockade: opponent initiatives locked until end of turn.' });\n        break;\n      }\n\n      case 'SET_DOUBLE_PUBLIC_AURA': {\n        state.effectFlags[ev.player].doublePublicAura = true;\n        events.unshift({ type: 'LOG', msg: 'Influencer Campaign: next Public aura will be doubled.' });\n        break;\n      }\n\n      case 'SET_OPPORTUNIST_ACTIVE': {\n        const { player, active } = ev as { type: 'SET_OPPORTUNIST_ACTIVE'; player: Player; active: boolean };\n        state.effectFlags[player].opportunistActive = active;\n        if (active) {\n          events.unshift({ type: 'LOG', msg: 'Opportunist: AP effects will be mirrored until end of turn.' });\n        }\n        break;\n      }\n\n      case 'INITIATIVE_ACTIVATED': {\n        // Initiative activation event - trigger reactions from public cards\n        logPush(state, 'Initiative activated.');\n\n        // Check for public cards that react to initiative activation\n        const publicCards = state.board[ev.player]?.innen || [];\n\n        // Shadow Lobbying: +1 influence per own Oligarch-tag on board (max +3)\n        // Detect if the activating initiative was Shadow Lobbying by checking the last played instant in slot\n        const instantSlot = state.board[ev.player]?.sofort || [];\n        const lastInstant = instantSlot[0] as any;\n        if (lastInstant && (lastInstant.effectKey === 'init.shadow_lobbying.per_oligarch' || lastInstant.name === 'Shadow Lobbying')) {\n          const ownBoard = [\n            ...state.board[ev.player].innen,\n            ...state.board[ev.player].aussen,\n          ];\n          const oligarchCount = ownBoard.filter(c => {\n            const details = (c as any).name ? require('../data/cardDetails') as any : null;\n            // Fallback: try BaseSpecial tag if available\n            const sub = (require('../data/cardDetails') as any).getCardDetails?.((c as any).name)?.subcategories as string[] | undefined;\n            const hasNewTag = Array.isArray(sub) && sub.includes('Oligarch');\n            const legacyTag = (c as any).tag === 'Oligarch';\n            return hasNewTag || legacyTag;\n          }).length;\n          const amt = Math.min(oligarchCount, 3);\n          if (amt > 0) {\n            events.unshift({ type: 'BUFF_STRONGEST_GOV', player: ev.player, amount: amt });\n            events.unshift({ type: 'LOG', msg: `Shadow Lobbying: stärkste Regierung +${amt} Einfluss (pro Oligarch, max 3).` });\n          } else {\n            events.unshift({ type: 'LOG', msg: `Shadow Lobbying: Keine Oligarchen – kein Einfluss-Buff.` });\n          }\n        }\n\n        // Elon Musk: +1 AP on initiative activation\n        const elonMusk = publicCards.find(card =>\n          card.kind === 'spec' && (card as any).name === 'Elon Musk'\n        );\n        if (elonMusk) {\n          events.unshift({ type: 'ADD_AP', player: ev.player, amount: 1 });\n          events.unshift({ type: 'LOG', msg: 'Elon Musk: +1 AP on initiative activation.' });\n        }\n\n        // Mark Zuckerberg: +1 AP on initiative activation (once per turn)\n        const markZuckerberg = publicCards.find(card =>\n          card.kind === 'spec' && (card as any).name === 'Mark Zuckerberg'\n        );\n        if (markZuckerberg && !state.effectFlags[ev.player]?.markZuckerbergUsed) {\n          events.unshift({ type: 'ADD_AP', player: ev.player, amount: 1 });\n          events.unshift({ type: 'LOG', msg: 'Mark Zuckerberg: +1 AP on initiative activation.' });\n          if (!state.effectFlags[ev.player]) {\n            state.effectFlags[ev.player] = { markZuckerbergUsed: false };\n          }\n          state.effectFlags[ev.player].markZuckerbergUsed = true;\n        }\n\n        // Ai Weiwei: +1 card +1 AP on initiative activation\n        const aiWeiwei = publicCards.find(card =>\n          card.kind === 'spec' && (card as any).name === 'Ai Weiwei'\n        );\n        if (aiWeiwei) {\n          events.unshift({ type: 'DRAW_CARDS', player: ev.player, amount: 1 });\n          events.unshift({ type: 'ADD_AP', player: ev.player, amount: 1 });\n          events.unshift({ type: 'LOG', msg: 'Ai Weiwei: +1 card +1 AP on initiative activation.' });\n        }\n\n        // Sam Altman: +1 card +1 AP on AI-related initiative activation\n        const samAltman = publicCards.find(card =>\n          card.kind === 'spec' && (card as any).name === 'Sam Altman'\n        );\n        if (samAltman) {\n          // Check if the activated initiative is AI-related (would need to be passed as context)\n          // For now, this is handled via the initiative card's tag check in the activation flow\n          events.unshift({ type: 'LOG', msg: 'Sam Altman: AI initiative detected - bonus ready.' });\n        }\n\n        // Digitaler Wahlkampf: draw 1 card per own Media-tag on board\n        if (lastInstant && (lastInstant.effectKey === 'init.digital_campaign.per_media' || lastInstant.name === 'Digitaler Wahlkampf')) {\n          const ownBoard = [\n            ...state.board[ev.player].innen,\n            ...state.board[ev.player].aussen,\n          ];\n          const mediaCount = ownBoard.filter(c => {\n            const sub = (require('../data/cardDetails') as any).getCardDetails?.((c as any).name)?.subcategories as string[] | undefined;\n            const legacy = (c as any).tag === 'Medien' || (c as any).tag === 'Media';\n            return (Array.isArray(sub) && sub.includes('Medien')) || legacy || (Array.isArray(sub) && sub.includes('Medien')) || (Array.isArray(sub) && sub.includes('Medien'));\n          }).length;\n          if (mediaCount > 0) {\n            events.unshift({ type: 'DRAW_CARDS', player: ev.player, amount: mediaCount });\n            events.unshift({ type: 'LOG', msg: `Digitaler Wahlkampf: ziehe ${mediaCount} Karte(n) (pro Medien-Karte).` });\n          } else {\n            events.unshift({ type: 'LOG', msg: `Digitaler Wahlkampf: Keine Medien-Karten auf dem Feld.` });\n          }\n        }\n\n        break;\n      }\n\n      // ONCE_AP_ON_ACTIVATION removed - use standard ADD_AP events instead\n\n      // ON_ACTIVATE_DRAW_AP removed - use standard ADD_AP and DRAW_CARDS events instead\n\n      // Simplified AP system: No initiative-specific bonuses\n      // All AP bonuses are now immediate ADD_AP events\n\n\n    }\n    // generic after snapshot diff for AP\n    if (state.actionPoints[1] !== beforeAP[1] || state.actionPoints[2] !== beforeAP[2]) {\n      logger.dbg(`AP delta P1 ${beforeAP[1]}->${state.actionPoints[1]} | P2 ${beforeAP[2]}->${state.actionPoints[2]}`);\n    }\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}