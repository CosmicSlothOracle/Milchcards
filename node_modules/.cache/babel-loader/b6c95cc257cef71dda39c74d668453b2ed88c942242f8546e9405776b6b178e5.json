{"ast":null,"code":"import{CARD_BY_ID}from'../data/cards';export function registerTrap(state,player,key){if(!state.traps)state.traps={1:[],2:[]};const list=state.traps[player];if(!Array.isArray(list))state.traps[player]=[];state.traps[player].push({owner:player,key});}export function applyTrapsOnCardPlayed(state,playedBy,card,enqueue,log){var _state$traps,_state$effectFlags$pl,_cardDef$tags,_cardDef$tags2;const opp=playedBy===1?2:1;const traps=(_state$traps=state.traps)===null||_state$traps===void 0?void 0:_state$traps[opp];if(!traps||traps.length===0)return;// Diagnostics: log existing traps for opponent when a card is played\ntry{const keys=traps.map(t=>t.key).join(', ');enqueue({type:'LOG',msg:\"DEBUG: applyTrapsOnCardPlayed opp=\".concat(opp,\" traps=[\").concat(keys,\"] playedCard=\").concat(card.name||card.key||'unknown')});}catch(e){}// Hard rule: Opposition Blockade – if current player is locked, cancel initiative card immediately\nif((card===null||card===void 0?void 0:card.type)==='initiative'&&(_state$effectFlags$pl=state.effectFlags[playedBy])!==null&&_state$effectFlags$pl!==void 0&&_state$effectFlags$pl.initiativesLocked){if(card.uid!=null){enqueue({type:'CANCEL_CARD',player:playedBy,targetUid:card.uid});}enqueue({type:'LOG',msg:'Blocked: initiatives are locked (Opposition Blockade).'});return;// skip further trap processing\n}// Get card definition to access type and tags\nconst cardDef=CARD_BY_ID[card.key];const isInitiative=(cardDef===null||cardDef===void 0?void 0:cardDef.type)==='initiative';const isPublic=(cardDef===null||cardDef===void 0?void 0:cardDef.type)==='public';const isGovernment=(cardDef===null||cardDef===void 0?void 0:cardDef.type)==='government';const isMediaLike=(cardDef===null||cardDef===void 0?void 0:(_cardDef$tags=cardDef.tags)===null||_cardDef$tags===void 0?void 0:_cardDef$tags.includes('Media'))||(cardDef===null||cardDef===void 0?void 0:(_cardDef$tags2=cardDef.tags)===null||_cardDef$tags2===void 0?void 0:_cardDef$tags2.includes('Platform'))||(card===null||card===void 0?void 0:card.tag)==='Media';// Fallback für Legacy-Karten\nconst consumed=[];traps.forEach(t=>{switch(t.key){// bereits live benutzt\ncase'trap.fake_news.deactivate_media':if(isMediaLike&&card.uid!=null){enqueue({type:'DEACTIVATE_CARD',player:opp,targetUid:card.uid});log('Trap: Fake News – deactivated media/platform card.');consumed.push(t);}break;// neu: Initiative canceln (sofort beim Ausspielen der Initiative)\ncase'trap.legal_injunction.cancel_next_initiative':if(isInitiative&&card.uid!=null){enqueue({type:'CANCEL_CARD',player:opp,targetUid:card.uid});log('Trap: Legal Injunction – cancelled initiative.');consumed.push(t);}break;// neu: Karte zurück auf Hand (egal welcher Typ)\ncase'trap.whistleblower.return_last_played':if(card.uid!=null){enqueue({type:'RETURN_TO_HAND',player:playedBy,targetUid:card.uid});log('Trap: Whistleblower – returned played card to hand.');consumed.push(t);}break;// neu: Gegner discards 2 bei nächstem Play\ncase'trap.data_breach.opp_discard2':enqueue({type:'DISCARD_RANDOM_FROM_HAND',player:playedBy===1?2:1,amount:2});log('Trap: Data Breach – opponent discards 2.');consumed.push(t);break;// neu: Public deaktivieren\ncase'trap.media_blackout.deactivate_public':if(isPublic&&card.uid!=null){enqueue({type:'DEACTIVATE_CARD',player:opp,targetUid:card.uid});log('Trap: Media Blackout – deactivated public card.');consumed.push(t);}break;// neu: AP -2 für Gegner beim nächsten Play\ncase'trap.budget_freeze.opp_ap_minus2':enqueue({type:'ADD_AP',player:playedBy,amount:-2});log('Trap: Budget Freeze – opponent AP -2.');consumed.push(t);break;// neu: Government deaktivieren\ncase'trap.sabotage.deactivate_gov':if(isGovernment&&card.uid!=null){enqueue({type:'DEACTIVATE_CARD',player:opp,targetUid:card.uid});log('Trap: Sabotage – deactivated government card.');consumed.push(t);}break;// Strategic Disclosure: Government-Karte zurückgeben\ncase'trap.strategic_disclosure.return_gov':if(isGovernment&&card.uid!=null){enqueue({type:'RETURN_TO_HAND',player:playedBy,targetUid:card.uid});log('Trap: Strategic Disclosure – returned government card to hand.');consumed.push(t);}break;case'trap.whistleblower.debuff_next_gov_minus2':// Robust trigger: treat any played politician (pol) as government trigger\nconst playedIsPol=(card===null||card===void 0?void 0:card.kind)==='pol'||isGovernment;if(!playedIsPol){// not a government/pol card — skip\nenqueue({type:'LOG',msg:\"DEBUG: Whistleblower present but played card is not government/pol (\".concat(card.name||card.key,\")\")});break;}if(card.uid==null){enqueue({type:'LOG',msg:\"DEBUG: Whistleblower cannot apply - target missing uid for \".concat(card.name||card.key)});break;}// Compute number of Activist cards on both players' boards (innen + aussen)\nconst cd=require('../data/cardDetails');let activistCount=0;for(const p of[1,2]){var _state$board$p,_state$board$p2;const innen=((_state$board$p=state.board[p])===null||_state$board$p===void 0?void 0:_state$board$p.innen)||[];const aussen=((_state$board$p2=state.board[p])===null||_state$board$p2===void 0?void 0:_state$board$p2.aussen)||[];const all=[...innen,...aussen];for(const c of all){var _cd$getCardDetails,_cd$getCardDetails$ca;if(!c)continue;const subcats=(_cd$getCardDetails=cd.getCardDetails)===null||_cd$getCardDetails===void 0?void 0:(_cd$getCardDetails$ca=_cd$getCardDetails.call(cd,c.name))===null||_cd$getCardDetails$ca===void 0?void 0:_cd$getCardDetails$ca.subcategories;const legacyTag=c.tag==='Activist'||c.tag==='Aktivist'||c.tag==='Activists'||c.tag==='Movement';const hasActivistSubcat=Array.isArray(subcats)&&(subcats.includes('Activist')||subcats.includes('Aktivist'));if(hasActivistSubcat||legacyTag){// ignore deactivated public/pol cards\nif(!c.deactivated)activistCount++;}}}// Base debuff -2 plus -1 per Activist (both boards), capped at -6 total\nconst totalDebuffMagnitude=Math.min(6,2+activistCount);const amount=-totalDebuffMagnitude;enqueue({type:'DEBUFF_CARD',player:opp,targetUid:card.uid,amount});const debuffMsg=\"Trap: Whistleblower \\u2013 government card gets \".concat(amount,\" Influence (base -2 + activists \").concat(activistCount,\", capped at -6).\");enqueue({type:'LOG',msg:debuffMsg});// Immediate console log for better chronological trace before warnings\nlog(debuffMsg);log(\"\\uD83D\\uDFE2 trap.whistleblower triggered: applied \".concat(amount,\" to uid \").concat(card.uid,\" (activists=\").concat(activistCount,\")\"));consumed.push(t);break;default:break;}});if(consumed.length){// Build consumption indexes for robust removal\nconst consumedKeys=new Set(consumed.map(c=>c.key).filter(Boolean));// Also include base card keys (namespace + card) to catch visual trap card objects\n// Example: 'trap.whistleblower.return_last_played' -> add 'trap.whistleblower'\nfor(const k of Array.from(consumedKeys)){if(typeof k==='string'){const parts=k.split('.');if(parts.length>=3){const baseKey=parts.slice(0,2).join('.');consumedKeys.add(baseKey);}}}const consumedUids=new Set(consumed.map(c=>c.uid).filter(Boolean));const consumedNames=new Set(consumed.map(c=>c.name).filter(Boolean));const consumedRefs=new Set(consumed);// Debug logging for trap removal\nenqueue({type:'LOG',msg:\"DEBUG: Trap removal - consumedKeys=[\".concat(Array.from(consumedKeys).join(', '),\"] consumedNames=[\").concat(Array.from(consumedNames).join(', '),\"]\")});// Remove consumed trap registrations and any visual trap card objects from both players' trap lists\nfor(const p of[1,2]){const list=state.traps[p]||[];state.traps[p]=list.filter(entry=>{if(!entry)return false;// Direct reference match\nif(consumedRefs.has(entry))return false;// registration object with key\nif(entry.key&&consumedKeys.has(entry.key))return false;// match by uid\nif(entry.uid&&consumedUids.has(entry.uid))return false;// match by name\nif(entry.name&&consumedNames.has(entry.name))return false;// If entry looks like a card object (visual trap card) try permissive matches\nif(entry&&entry.kind==='spec'){const typeStr=String(entry.type||'').toLowerCase();const entryName=String(entry.name||'').toLowerCase();const entryKey=String(entry.key||'').toLowerCase();const entryEffect=String(entry.effectKey||'').toLowerCase();// Remove if its declared type includes 'trap'\nif(typeStr.includes('trap'))return false;// Remove if its name matches a consumed name or explicitly 'whistleblower'\nif(consumedNames.has(entry.name)||entryName==='whistleblower')return false;// Remove if its key/effectKey matches or starts with any consumed key (permissive)\nfor(const ck of Array.from(consumedKeys)){if(!ck)continue;const ckStr=String(ck).toLowerCase();if(entryKey&&(entryKey===ckStr||entryKey.startsWith(ckStr)))return false;if(entryEffect&&(entryEffect===ckStr||entryEffect.startsWith(ckStr)))return false;}}return true;});}// Explicit removal: if a consumed trap key was for whistleblower (or other\n// traps), also remove any visual trap card objects that are stored in\n// state.traps as `spec` objects whose name/key matches permissively.\ntry{const consumedKeyArray=Array.from(consumedKeys).map(k=>String(k).toLowerCase());const consumedNameArray=Array.from(consumedNames).map(n=>String(n).toLowerCase());for(const p of[1,2]){const arr=state.traps[p]||[];const newArr=[];for(const entry of arr){if(!entry)continue;if(entry.kind==='spec'){const entryName=String(entry.name||'').toLowerCase();const entryKey=String(entry.key||'').toLowerCase();const entryEffect=String(entry.effectKey||'').toLowerCase();let shouldRemove=false;// direct name match\nif(consumedNameArray.includes(entryName)||entryName==='whistleblower')shouldRemove=true;// match by consumed key parts (e.g. 'trap.whistleblower')\nfor(const ck of consumedKeyArray){if(!ck)continue;const parts=ck.split('.');const right=parts.slice(1).join('.');if(entryKey&&(entryKey===ck||entryKey.startsWith(ck)||entryKey.includes(right))){shouldRemove=true;break;}if(entryEffect&&(entryEffect===ck||entryEffect.startsWith(ck)||entryEffect.includes(right))){shouldRemove=true;break;}if(right&&entryName.includes(right)){shouldRemove=true;break;}}if(shouldRemove){const rmMsg=\"EXPLICIT-REMOVE: removing visual trap object from state.traps P\".concat(p,\" name=\\\"\").concat(entry.name,\"\\\" key=\\\"\").concat(entry.key,\"\\\"\");enqueue({type:'LOG',msg:rmMsg});try{log(rmMsg);}catch(e){}// move to discard for visual cleanup\nstate.discard=state.discard||[];state.discard.push(entry);continue;// skip pushing to newArr (i.e., remove)\n}}newArr.push(entry);}state.traps[p]=newArr;}}catch(e){}// Ensure the visual trap card is removed from any board lanes if it was added there\ntry{const removeIfTrapOnBoard=arr=>{return arr.filter(c=>{if(!c)return true;const key=c.key;const name=c.name;const typeStr=String(c.type||'').toLowerCase();const effectKey=c.effectKey;// Check if this is a trap card\nconst isTrapByType=typeStr.includes('trap');const isTrapByKey=key&&(key.startsWith('trap.')||consumedKeys.has(key));const isTrapByEffectKey=effectKey&&(effectKey.startsWith('trap.')||consumedKeys.has(effectKey));const isTrapByName=name&&(consumedNames.has(name)||name==='Whistleblower');if(isTrapByType||isTrapByKey||isTrapByEffectKey||isTrapByName){enqueue({type:'LOG',msg:\"DEBUG: Removing trap card from board - name=\\\"\".concat(name,\"\\\" key=\\\"\").concat(key,\"\\\" effectKey=\\\"\").concat(effectKey,\"\\\" type=\\\"\").concat(typeStr,\"\\\"\")});return false;}return true;});};// Remove from all board lanes (both players) to be safe\nfor(const p of[1,2]){var _state$board;if((_state$board=state.board)!==null&&_state$board!==void 0&&_state$board[p]){const beforeInnen=state.board[p].innen.length;const beforeAussen=state.board[p].aussen.length;const beforeSofort=state.board[p].sofort.length;state.board[p].innen=removeIfTrapOnBoard(state.board[p].innen||[]);state.board[p].aussen=removeIfTrapOnBoard(state.board[p].aussen||[]);state.board[p].sofort=removeIfTrapOnBoard(state.board[p].sofort||[]);const afterInnen=state.board[p].innen.length;const afterAussen=state.board[p].aussen.length;const afterSofort=state.board[p].sofort.length;if(beforeInnen!==afterInnen||beforeAussen!==afterAussen||beforeSofort!==afterSofort){enqueue({type:'LOG',msg:\"DEBUG: Board cleanup P\".concat(p,\" - innen:\").concat(beforeInnen,\"\\u2192\").concat(afterInnen,\", aussen:\").concat(beforeAussen,\"\\u2192\").concat(afterAussen,\", sofort:\").concat(beforeSofort,\"\\u2192\").concat(afterSofort)});}}}// Additionally, remove any consumed trap card objects from all board lanes and move them to discard\ntry{for(const c of consumed){const cUid=c.uid;const cKey=c.key||c.name;for(const p of[1,2]){for(const lane of['innen','aussen','sofort']){const arr=state.board[p][lane];const idx=arr.findIndex(card=>card&&(card.uid&&cUid&&card.uid===cUid||card.key&&cKey&&card.key===cKey||card.name&&cKey&&card.name===cKey));if(idx!==-1){const[removed]=arr.splice(idx,1);state.discard=state.discard||[];state.discard.push(removed);enqueue({type:'LOG',msg:\"Trap consumed: removed \".concat(removed&&removed.name||cKey,\" from board and moved to discard.\")});}}}}}catch(e){}}catch(e){}}// Forced removal fallback: if a consumed trap wasn't removed by the above\n// logic, attempt a more permissive board scan to remove any visual objects\n// that look like trap cards. This covers cases where visual card objects use\n// a simplified key or have no effectKey attached.\ntry{// Build permissive fallback lists directly from `consumed` (available in\n// this scope) to avoid relying on the inner-scope `consumedKeys`/`consumedNames`.\nconst fallbackKeysSet=new Set(consumed.map(c=>c.key).filter(Boolean).map(String));const fallbackNamesSet=new Set(consumed.map(c=>c.name).filter(Boolean).map(String));const fallbackKeys=Array.from(fallbackKeysSet);const fallbackNames=Array.from(fallbackNamesSet);// add generic base for whistleblower\nif(!fallbackKeys.some(k=>k.startsWith('trap.whistleblower')))fallbackKeys.push('trap.whistleblower');const removePermissive=arr=>{let removedAny=false;for(let i=arr.length-1;i>=0;i--){const c=arr[i];if(!c)continue;const key=c.key;const effectKey=c.effectKey;const name=c.name;const typeStr=String(c.type||'').toLowerCase();const matchesKey=key&&fallbackKeys.some(fk=>key===fk||key.startsWith(fk));const matchesEffect=effectKey&&fallbackKeys.some(fk=>effectKey===fk||effectKey.startsWith(fk));const matchesName=name&&fallbackNames.includes(name);const looksLikeTrap=typeStr.includes('trap')||key&&String(key).startsWith('trap.');if(matchesKey||matchesEffect||matchesName||looksLikeTrap||name==='Whistleblower'){const[removed]=arr.splice(i,1);state.discard=state.discard||[];state.discard.push(removed);removedAny=true;enqueue({type:'LOG',msg:\"FORCED-REMOVE: removed \".concat(removed&&removed.name||key||name,\" from board (permissive match)\")});}}return removedAny;};for(const p of[1,2]){var _state$board2;if(!((_state$board2=state.board)!==null&&_state$board2!==void 0&&_state$board2[p]))continue;const lanes=['innen','aussen','sofort'];for(const lane of lanes){try{const removed=removePermissive(state.board[p][lane]);if(removed)enqueue({type:'LOG',msg:\"FORCED-REMOVE: cleaned up P\".concat(p,\".\").concat(lane)});}catch(e){}}}}catch(e){}}","map":{"version":3,"names":["CARD_BY_ID","registerTrap","state","player","key","traps","list","Array","isArray","push","owner","applyTrapsOnCardPlayed","playedBy","card","enqueue","log","_state$traps","_state$effectFlags$pl","_cardDef$tags","_cardDef$tags2","opp","length","keys","map","t","join","type","msg","concat","name","e","effectFlags","initiativesLocked","uid","targetUid","cardDef","isInitiative","isPublic","isGovernment","isMediaLike","tags","includes","tag","consumed","forEach","amount","playedIsPol","kind","cd","require","activistCount","p","_state$board$p","_state$board$p2","innen","board","aussen","all","c","_cd$getCardDetails","_cd$getCardDetails$ca","subcats","getCardDetails","call","subcategories","legacyTag","hasActivistSubcat","deactivated","totalDebuffMagnitude","Math","min","debuffMsg","consumedKeys","Set","filter","Boolean","k","from","parts","split","baseKey","slice","add","consumedUids","consumedNames","consumedRefs","entry","has","typeStr","String","toLowerCase","entryName","entryKey","entryEffect","effectKey","ck","ckStr","startsWith","consumedKeyArray","consumedNameArray","n","arr","newArr","shouldRemove","right","rmMsg","discard","removeIfTrapOnBoard","isTrapByType","isTrapByKey","isTrapByEffectKey","isTrapByName","_state$board","beforeInnen","beforeAussen","beforeSofort","sofort","afterInnen","afterAussen","afterSofort","cUid","cKey","lane","idx","findIndex","removed","splice","fallbackKeysSet","fallbackNamesSet","fallbackKeys","fallbackNames","some","removePermissive","removedAny","i","matchesKey","fk","matchesEffect","matchesName","looksLikeTrap","_state$board2","lanes"],"sources":["C:/Users/skank/Videos/Cards/Milchcards/src/utils/traps.ts"],"sourcesContent":["import type { GameState, Player, Card } from '../types/game';\r\nimport type { EffectEvent } from '../types/effects';\r\nimport { CARD_BY_ID } from '../data/cards';\r\n\r\nexport function registerTrap(state: GameState, player: Player, key: string) {\r\n  if (!state.traps) state.traps = { 1: [], 2: [] } as any;\r\n  const list = (state.traps as any)[player] as Array<{ owner: Player; key: string }>;\r\n  if (!Array.isArray(list)) (state.traps as any)[player] = [];\r\n  (state.traps as any)[player].push({ owner: player, key });\r\n}\r\n\r\nexport function applyTrapsOnCardPlayed(\r\n  state: GameState,\r\n  playedBy: Player,\r\n  card: Card,\r\n  enqueue: (e: EffectEvent) => void,\r\n  log: (m: string) => void\r\n) {\r\n  const opp: Player = playedBy === 1 ? 2 : 1;\r\n  const traps = (state.traps as any)?.[opp] as Array<{ owner: Player; key: string }> | undefined;\r\n  if (!traps || traps.length === 0) return;\r\n\r\n  // Diagnostics: log existing traps for opponent when a card is played\r\n  try {\r\n    const keys = traps.map(t => t.key).join(', ');\r\n    enqueue({ type: 'LOG', msg: `DEBUG: applyTrapsOnCardPlayed opp=${opp} traps=[${keys}] playedCard=${(card as any).name || (card as any).key || 'unknown'}` });\r\n  } catch (e) {}\r\n\r\n  // Hard rule: Opposition Blockade – if current player is locked, cancel initiative card immediately\r\n  if ((card as any)?.type === 'initiative' && state.effectFlags[playedBy]?.initiativesLocked) {\r\n    if ((card as any).uid != null) {\r\n      enqueue({ type: 'CANCEL_CARD', player: playedBy, targetUid: (card as any).uid } as any);\r\n    }\r\n    enqueue({ type: 'LOG', msg: 'Blocked: initiatives are locked (Opposition Blockade).' });\r\n    return; // skip further trap processing\r\n  }\r\n\r\n  // Get card definition to access type and tags\r\n  const cardDef = CARD_BY_ID[card.key];\r\n  const isInitiative = cardDef?.type === 'initiative';\r\n  const isPublic = cardDef?.type === 'public';\r\n  const isGovernment = cardDef?.type === 'government';\r\n  const isMediaLike = cardDef?.tags?.includes('Media') ||\r\n                     cardDef?.tags?.includes('Platform') ||\r\n                     (card as any)?.tag === 'Media'; // Fallback für Legacy-Karten\r\n\r\n  const consumed: Array<{ key: string }> = [];\r\n  traps.forEach(t => {\r\n    switch (t.key) {\r\n      // bereits live benutzt\r\n      case 'trap.fake_news.deactivate_media':\r\n        if (isMediaLike && (card as any).uid != null) {\r\n          enqueue({ type: 'DEACTIVATE_CARD', player: opp, targetUid: (card as any).uid });\r\n          log('Trap: Fake News – deactivated media/platform card.');\r\n          consumed.push(t);\r\n        }\r\n        break;\r\n\r\n      // neu: Initiative canceln (sofort beim Ausspielen der Initiative)\r\n      case 'trap.legal_injunction.cancel_next_initiative':\r\n        if (isInitiative && (card as any).uid != null) {\r\n          enqueue({ type: 'CANCEL_CARD', player: opp, targetUid: (card as any).uid });\r\n          log('Trap: Legal Injunction – cancelled initiative.');\r\n          consumed.push(t);\r\n        }\r\n        break;\r\n\r\n      // neu: Karte zurück auf Hand (egal welcher Typ)\r\n      case 'trap.whistleblower.return_last_played':\r\n        if ((card as any).uid != null) {\r\n          enqueue({ type: 'RETURN_TO_HAND', player: playedBy, targetUid: (card as any).uid });\r\n          log('Trap: Whistleblower – returned played card to hand.');\r\n          consumed.push(t);\r\n        }\r\n        break;\r\n\r\n      // neu: Gegner discards 2 bei nächstem Play\r\n      case 'trap.data_breach.opp_discard2':\r\n        enqueue({ type: 'DISCARD_RANDOM_FROM_HAND', player: playedBy === 1 ? 2 : 1, amount: 2 });\r\n        log('Trap: Data Breach – opponent discards 2.');\r\n        consumed.push(t);\r\n        break;\r\n\r\n      // neu: Public deaktivieren\r\n      case 'trap.media_blackout.deactivate_public':\r\n        if (isPublic && (card as any).uid != null) {\r\n          enqueue({ type: 'DEACTIVATE_CARD', player: opp, targetUid: (card as any).uid });\r\n          log('Trap: Media Blackout – deactivated public card.');\r\n          consumed.push(t);\r\n        }\r\n        break;\r\n\r\n      // neu: AP -2 für Gegner beim nächsten Play\r\n      case 'trap.budget_freeze.opp_ap_minus2':\r\n        enqueue({ type: 'ADD_AP', player: playedBy, amount: -2 });\r\n        log('Trap: Budget Freeze – opponent AP -2.');\r\n        consumed.push(t);\r\n        break;\r\n\r\n      // neu: Government deaktivieren\r\n      case 'trap.sabotage.deactivate_gov':\r\n        if (isGovernment && (card as any).uid != null) {\r\n          enqueue({ type: 'DEACTIVATE_CARD', player: opp, targetUid: (card as any).uid });\r\n          log('Trap: Sabotage – deactivated government card.');\r\n          consumed.push(t);\r\n        }\r\n        break;\r\n\r\n      // Strategic Disclosure: Government-Karte zurückgeben\r\n      case 'trap.strategic_disclosure.return_gov':\r\n        if (isGovernment && (card as any).uid != null) {\r\n          enqueue({ type: 'RETURN_TO_HAND', player: playedBy, targetUid: (card as any).uid });\r\n          log('Trap: Strategic Disclosure – returned government card to hand.');\r\n          consumed.push(t);\r\n        }\r\n        break;\r\n\r\n      case 'trap.whistleblower.debuff_next_gov_minus2':\r\n        // Robust trigger: treat any played politician (pol) as government trigger\r\n        const playedIsPol = (card as any)?.kind === 'pol' || isGovernment;\r\n        if (!playedIsPol) {\r\n          // not a government/pol card — skip\r\n          enqueue({ type: 'LOG', msg: `DEBUG: Whistleblower present but played card is not government/pol (${(card as any).name || (card as any).key})` });\r\n          break;\r\n        }\r\n        if ((card as any).uid == null) {\r\n          enqueue({ type: 'LOG', msg: `DEBUG: Whistleblower cannot apply - target missing uid for ${(card as any).name || (card as any).key}` });\r\n          break;\r\n        }\r\n\r\n        // Compute number of Activist cards on both players' boards (innen + aussen)\r\n        const cd = require('../data/cardDetails') as any;\r\n        let activistCount = 0;\r\n        for (const p of [1, 2] as const) {\r\n          const innen = state.board[p]?.innen || [];\r\n          const aussen = state.board[p]?.aussen || [];\r\n          const all = [...innen, ...aussen];\r\n          for (const c of all) {\r\n            if (!c) continue;\r\n            const subcats = cd.getCardDetails?.((c as any).name)?.subcategories as string[] | undefined;\r\n            const legacyTag = (c as any).tag === 'Activist' || (c as any).tag === 'Aktivist' || (c as any).tag === 'Activists' || (c as any).tag === 'Movement';\r\n            const hasActivistSubcat = Array.isArray(subcats) && (subcats.includes('Activist') || subcats.includes('Aktivist'));\r\n            if (hasActivistSubcat || legacyTag) {\r\n              // ignore deactivated public/pol cards\r\n              if (!(c as any).deactivated) activistCount++;\r\n            }\r\n          }\r\n        }\r\n\r\n        // Base debuff -2 plus -1 per Activist (both boards), capped at -6 total\r\n        const totalDebuffMagnitude = Math.min(6, 2 + activistCount);\r\n        const amount = -totalDebuffMagnitude;\r\n\r\n        enqueue({ type: 'DEBUFF_CARD', player: opp, targetUid: (card as any).uid, amount } as any);\r\n        const debuffMsg = `Trap: Whistleblower – government card gets ${amount} Influence (base -2 + activists ${activistCount}, capped at -6).`;\r\n        enqueue({ type: 'LOG', msg: debuffMsg });\r\n        // Immediate console log for better chronological trace before warnings\r\n        log(debuffMsg);\r\n        log(`🟢 trap.whistleblower triggered: applied ${amount} to uid ${(card as any).uid} (activists=${activistCount})`);\r\n        consumed.push(t);\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n  });\r\n\r\n  if (consumed.length) {\r\n    // Build consumption indexes for robust removal\r\n    const consumedKeys = new Set(consumed.map(c => (c as any).key).filter(Boolean));\r\n    // Also include base card keys (namespace + card) to catch visual trap card objects\r\n    // Example: 'trap.whistleblower.return_last_played' -> add 'trap.whistleblower'\r\n    for (const k of Array.from(consumedKeys)) {\r\n      if (typeof k === 'string') {\r\n        const parts = k.split('.');\r\n        if (parts.length >= 3) {\r\n          const baseKey = parts.slice(0, 2).join('.');\r\n          consumedKeys.add(baseKey);\r\n        }\r\n      }\r\n    }\r\n    const consumedUids = new Set(consumed.map(c => (c as any).uid).filter(Boolean));\r\n    const consumedNames = new Set(consumed.map(c => (c as any).name).filter(Boolean));\r\n    const consumedRefs = new Set(consumed);\r\n\r\n    // Debug logging for trap removal\r\n    enqueue({ type: 'LOG', msg: `DEBUG: Trap removal - consumedKeys=[${Array.from(consumedKeys).join(', ')}] consumedNames=[${Array.from(consumedNames).join(', ')}]` });\r\n\r\n    // Remove consumed trap registrations and any visual trap card objects from both players' trap lists\r\n    for (const p of [1, 2] as const) {\r\n      const list = (state.traps as any)[p] || [];\r\n      (state.traps as any)[p] = list.filter((entry: any) => {\r\n        if (!entry) return false;\r\n        // Direct reference match\r\n        if (consumedRefs.has(entry)) return false;\r\n        // registration object with key\r\n        if (entry.key && consumedKeys.has(entry.key)) return false;\r\n        // match by uid\r\n        if ((entry as any).uid && consumedUids.has((entry as any).uid)) return false;\r\n        // match by name\r\n        if ((entry as any).name && consumedNames.has((entry as any).name)) return false;\r\n\r\n        // If entry looks like a card object (visual trap card) try permissive matches\r\n        if (entry && entry.kind === 'spec') {\r\n          const typeStr = String((entry as any).type || '').toLowerCase();\r\n          const entryName = String((entry as any).name || '').toLowerCase();\r\n          const entryKey = String((entry as any).key || '').toLowerCase();\r\n          const entryEffect = String((entry as any).effectKey || '').toLowerCase();\r\n\r\n          // Remove if its declared type includes 'trap'\r\n          if (typeStr.includes('trap')) return false;\r\n\r\n          // Remove if its name matches a consumed name or explicitly 'whistleblower'\r\n          if (consumedNames.has(entry.name) || entryName === 'whistleblower') return false;\r\n\r\n          // Remove if its key/effectKey matches or starts with any consumed key (permissive)\r\n          for (const ck of Array.from(consumedKeys)) {\r\n            if (!ck) continue;\r\n            const ckStr = String(ck).toLowerCase();\r\n            if (entryKey && (entryKey === ckStr || entryKey.startsWith(ckStr))) return false;\r\n            if (entryEffect && (entryEffect === ckStr || entryEffect.startsWith(ckStr))) return false;\r\n          }\r\n        }\r\n\r\n        return true;\r\n      });\r\n    }\r\n\r\n    // Explicit removal: if a consumed trap key was for whistleblower (or other\r\n    // traps), also remove any visual trap card objects that are stored in\r\n    // state.traps as `spec` objects whose name/key matches permissively.\r\n    try {\r\n      const consumedKeyArray = Array.from(consumedKeys).map(k => String(k).toLowerCase());\r\n      const consumedNameArray = Array.from(consumedNames).map(n => String(n).toLowerCase());\r\n      for (const p of [1,2] as const) {\r\n        const arr = (state.traps as any)[p] || [];\r\n        const newArr: any[] = [];\r\n        for (const entry of arr) {\r\n          if (!entry) continue;\r\n          if ((entry as any).kind === 'spec') {\r\n            const entryName = String((entry as any).name || '').toLowerCase();\r\n            const entryKey = String((entry as any).key || '').toLowerCase();\r\n            const entryEffect = String((entry as any).effectKey || '').toLowerCase();\r\n\r\n            let shouldRemove = false;\r\n            // direct name match\r\n            if (consumedNameArray.includes(entryName) || entryName === 'whistleblower') shouldRemove = true;\r\n            // match by consumed key parts (e.g. 'trap.whistleblower')\r\n            for (const ck of consumedKeyArray) {\r\n              if (!ck) continue;\r\n              const parts = ck.split('.');\r\n              const right = parts.slice(1).join('.');\r\n              if (entryKey && (entryKey === ck || entryKey.startsWith(ck) || entryKey.includes(right))) { shouldRemove = true; break; }\r\n              if (entryEffect && (entryEffect === ck || entryEffect.startsWith(ck) || entryEffect.includes(right))) { shouldRemove = true; break; }\r\n              if (right && entryName.includes(right)) { shouldRemove = true; break; }\r\n            }\r\n\r\n            if (shouldRemove) {\r\n              const rmMsg = `EXPLICIT-REMOVE: removing visual trap object from state.traps P${p} name=\"${entry.name}\" key=\"${entry.key}\"`;\r\n              enqueue({ type: 'LOG', msg: rmMsg });\r\n              try { log(rmMsg); } catch (e) {}\r\n              // move to discard for visual cleanup\r\n              state.discard = state.discard || [];\r\n              state.discard.push(entry);\r\n              continue; // skip pushing to newArr (i.e., remove)\r\n            }\r\n          }\r\n          newArr.push(entry);\r\n        }\r\n        (state.traps as any)[p] = newArr;\r\n      }\r\n    } catch (e) {}\r\n\r\n    // Ensure the visual trap card is removed from any board lanes if it was added there\r\n    try {\r\n      const removeIfTrapOnBoard = (arr: any[]) => {\r\n        return arr.filter(c => {\r\n          if (!c) return true;\r\n          const key = (c as any).key;\r\n          const name = (c as any).name;\r\n          const typeStr = String((c as any).type || '').toLowerCase();\r\n          const effectKey = (c as any).effectKey;\r\n\r\n          // Check if this is a trap card\r\n          const isTrapByType = typeStr.includes('trap');\r\n          const isTrapByKey = key && (key.startsWith('trap.') || consumedKeys.has(key));\r\n          const isTrapByEffectKey = effectKey && (effectKey.startsWith('trap.') || consumedKeys.has(effectKey));\r\n          const isTrapByName = name && (consumedNames.has(name) || name === 'Whistleblower');\r\n\r\n          if (isTrapByType || isTrapByKey || isTrapByEffectKey || isTrapByName) {\r\n            enqueue({ type: 'LOG', msg: `DEBUG: Removing trap card from board - name=\"${name}\" key=\"${key}\" effectKey=\"${effectKey}\" type=\"${typeStr}\"` });\r\n            return false;\r\n          }\r\n          return true;\r\n        });\r\n      };\r\n\r\n      // Remove from all board lanes (both players) to be safe\r\n      for (const p of [1, 2] as const) {\r\n        if (state.board?.[p]) {\r\n          const beforeInnen = state.board[p].innen.length;\r\n          const beforeAussen = state.board[p].aussen.length;\r\n          const beforeSofort = state.board[p].sofort.length;\r\n\r\n          state.board[p].innen = removeIfTrapOnBoard(state.board[p].innen || []);\r\n          state.board[p].aussen = removeIfTrapOnBoard(state.board[p].aussen || []);\r\n          state.board[p].sofort = removeIfTrapOnBoard(state.board[p].sofort || []);\r\n\r\n          const afterInnen = state.board[p].innen.length;\r\n          const afterAussen = state.board[p].aussen.length;\r\n          const afterSofort = state.board[p].sofort.length;\r\n\r\n          if (beforeInnen !== afterInnen || beforeAussen !== afterAussen || beforeSofort !== afterSofort) {\r\n            enqueue({ type: 'LOG', msg: `DEBUG: Board cleanup P${p} - innen:${beforeInnen}→${afterInnen}, aussen:${beforeAussen}→${afterAussen}, sofort:${beforeSofort}→${afterSofort}` });\r\n          }\r\n        }\r\n      }\r\n      // Additionally, remove any consumed trap card objects from all board lanes and move them to discard\r\n      try {\r\n        for (const c of consumed) {\r\n          const cUid = (c as any).uid;\r\n          const cKey = (c as any).key || (c as any).name;\r\n          for (const p of [1, 2] as const) {\r\n            for (const lane of ['innen', 'aussen', 'sofort'] as const) {\r\n              const arr = state.board[p][lane] as any[];\r\n              const idx = arr.findIndex(card => (card && ((card.uid && cUid && card.uid === cUid) || (card.key && cKey && card.key === cKey) || (card.name && cKey && card.name === cKey))));\r\n              if (idx !== -1) {\r\n                const [removed] = arr.splice(idx, 1);\r\n                state.discard = state.discard || [];\r\n                state.discard.push(removed);\r\n                enqueue({ type: 'LOG', msg: `Trap consumed: removed ${(removed && removed.name) || cKey} from board and moved to discard.` });\r\n              }\r\n            }\r\n          }\r\n        }\r\n      } catch (e) {}\r\n    } catch (e) {}\r\n  }\r\n\r\n  // Forced removal fallback: if a consumed trap wasn't removed by the above\r\n  // logic, attempt a more permissive board scan to remove any visual objects\r\n  // that look like trap cards. This covers cases where visual card objects use\r\n  // a simplified key or have no effectKey attached.\r\n  try {\r\n    // Build permissive fallback lists directly from `consumed` (available in\r\n    // this scope) to avoid relying on the inner-scope `consumedKeys`/`consumedNames`.\r\n    const fallbackKeysSet = new Set(consumed.map(c => (c as any).key).filter(Boolean).map(String));\r\n    const fallbackNamesSet = new Set(consumed.map(c => (c as any).name).filter(Boolean).map(String));\r\n    const fallbackKeys = Array.from(fallbackKeysSet) as string[];\r\n    const fallbackNames = Array.from(fallbackNamesSet) as string[];\r\n\r\n    // add generic base for whistleblower\r\n    if (!fallbackKeys.some(k => k.startsWith('trap.whistleblower'))) fallbackKeys.push('trap.whistleblower');\r\n\r\n    const removePermissive = (arr: any[]) => {\r\n      let removedAny = false;\r\n      for (let i = arr.length - 1; i >= 0; i--) {\r\n        const c = arr[i];\r\n        if (!c) continue;\r\n        const key = c.key;\r\n        const effectKey = c.effectKey;\r\n        const name = c.name;\r\n        const typeStr = String((c as any).type || '').toLowerCase();\r\n\r\n        const matchesKey = key && fallbackKeys.some(fk => key === fk || key.startsWith(fk));\r\n        const matchesEffect = effectKey && fallbackKeys.some(fk => effectKey === fk || effectKey.startsWith(fk));\r\n        const matchesName = name && fallbackNames.includes(name);\r\n        const looksLikeTrap = typeStr.includes('trap') || (key && String(key).startsWith('trap.'));\r\n\r\n        if (matchesKey || matchesEffect || matchesName || looksLikeTrap || name === 'Whistleblower') {\r\n          const [removed] = arr.splice(i, 1);\r\n          state.discard = state.discard || [];\r\n          state.discard.push(removed);\r\n          removedAny = true;\r\n          enqueue({ type: 'LOG', msg: `FORCED-REMOVE: removed ${(removed && removed.name) || key || name} from board (permissive match)` });\r\n        }\r\n      }\r\n      return removedAny;\r\n    };\r\n\r\n    for (const p of [1, 2] as const) {\r\n      if (!state.board?.[p]) continue;\r\n      const lanes = ['innen', 'aussen', 'sofort'] as const;\r\n      for (const lane of lanes) {\r\n        try {\r\n          const removed = removePermissive(state.board[p][lane]);\r\n          if (removed) enqueue({ type: 'LOG', msg: `FORCED-REMOVE: cleaned up P${p}.${lane}` });\r\n        } catch (e) {}\r\n      }\r\n    }\r\n  } catch (e) {}\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}