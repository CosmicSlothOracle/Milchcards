{"ast":null,"code":"import _objectSpread from\"C:/Users/skank/Videos/Cards/Milchcards/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{useCallback,useRef}from'react';import{createDefaultEffectFlags}from'../types/game';import{buildDeckFromEntries,sumGovernmentInfluenceWithAuras}from'../utils/gameUtils';import{PRESET_DECKS}from'../data/gameData';import{getCardActionPointCost,getNetApCost,canPlayCard}from'../utils/ap';import{triggerCardEffects}from'../effects/cards';import{ensureTestBaselineAP}from'../utils/testCompat';import{resolveQueue}from'../utils/queue';import{applyStartOfTurnFlags}from'../utils/startOfTurnHooks';import{registerTrap,applyTrapsOnCardPlayed}from'../utils/traps';import{recomputeAuraFlags}from'../state/effects';import{emptyBoard}from'../state/board';import{logger}from'../debug/logger';// Migration Helper für Queue-Vereinheitlichung\nconst migrateLegacyQueue=state=>{// Queue migration completed - only _effectQueue exists now\n};// Helper function for getting the other player\nconst other=p=>p===1?2:1;// Hilfsfunktion: stellt sicher, dass effectFlags vorhanden sind\nconst ensureFlags=(s,p)=>{if(!s.effectFlags){s.effectFlags={1:createDefaultEffectFlags(),2:createDefaultEffectFlags()};}else{s.effectFlags[p]=_objectSpread(_objectSpread({},createDefaultEffectFlags()),s.effectFlags[p]);}};// Lane-Heuristik wie in playCard\nconst pickLane=c=>{const tag=c.tag;if(c.kind==='pol'&&(tag==='Staatsoberhaupt'||tag==='Regierungschef'||tag==='Diplomat'))return'aussen';return'innen';};const isCardPlayableNow=(state,player,card)=>{if(card.deactivated)return false;if(card.kind==='pol'){const lane=pickLane(card);return state.board[player][lane].length<5;}if(card.kind==='spec'){const t=String(card.type||'').toLowerCase();if(t==='öffentlichkeitskarte'||t==='oeffentlichkeitskarte'||t==='public'){return state.board[player].innen.length<5;}if(t==='dauerhaft-initiative'){const slot='government';// wie bei dir „simplified\"\nreturn!state.permanentSlots[player][slot];}// sonst: Fallen/Interventionen – aktuell immer erlaubt\nreturn true;}return false;};export const hasPlayableZeroCost=(state,player)=>{for(const c of state.hands[player]){const{cost}=getCardActionPointCost(state,player,c);if(cost===0&&isCardPlayableNow(state,player,c))return true;}return false;};// Helper function to apply auras for a player (instant updates for Joschka Fischer + NGO synergy)\nfunction applyAurasForPlayer(state,player,log){const board=state.board[player];const hasNgo=board.innen.some(c=>c.kind==='spec'&&c.type==='Öffentlichkeitskarte'&&c.tag==='NGO'&&!c.deactivated);const newAussen=board.aussen.map(card=>{if(card.kind!=='pol')return card;const pol=_objectSpread({},card);if(pol.baseInfluence==null)pol.baseInfluence=pol.influence;const prev=pol.influence;let bonus=0;if(!pol.deactivated&&pol.name==='Joschka Fischer'&&pol.effect==='ngo_boost'&&hasNgo){bonus+=1;}pol.influence=pol.baseInfluence+bonus;if(log&&pol.influence>prev)log(\"PASSIV: \".concat(pol.name,\" +\").concat(pol.influence-prev,\" I (jetzt \").concat(pol.influence,\").\"));return pol;});state.board=_objectSpread(_objectSpread({},state.board),{},{[player]:_objectSpread(_objectSpread({},state.board[player]),{},{aussen:newAussen})});}// Helper function to check if round should end\nfunction checkRoundEnd(gameState){// Round ends if both players have passed\nconst result=gameState.passed[1]&&gameState.passed[2];logger.dbg(\"checkRoundEnd P1=\".concat(gameState.passed[1],\" P2=\").concat(gameState.passed[2],\" result=\").concat(result));return result;}// Helper function to draw cards from deck\nfunction drawCardsFromDeck(gameState,player,count){const deck=[...gameState.decks[player]];const drawnCards=deck.splice(0,Math.min(count,deck.length));return drawnCards;}// Helper function to really end a turn (extracted from nextTurn logic)\nfunction reallyEndTurn(gameState,log){const current=gameState.current;// Flag zurücksetzen - Zug-Ende wird jetzt wirklich durchgeführt\ngameState.isEndingTurn=false;// ✅ Karte nachziehen am Ende eines Zugs (nur wenn NICHT \"pass\")\nif(!gameState.passed[current]){const drawnCard=gameState.decks[current].shift();if(drawnCard){gameState.hands[current].push(drawnCard);log(\"\\uD83D\\uDD25 Zug-Ende: +1 Karte gezogen (\".concat(drawnCard.name,\")\"));}}else{log(\"\\u23ED\\uFE0F P\".concat(current,\" hat gepasst \\u2013 kein Nachziehen.\"));}// Check if round should end\nconst shouldEndRound=checkRoundEnd(gameState);if(shouldEndRound){log(\"\\uD83C\\uDFC1 Runde \".concat(gameState.round,\" wird beendet (Zug-Ende).\"));return resolveRound(gameState,log);}// Spielerwechsel + AP reset\nconst newCurrent=current===1?2:1;gameState.current=newCurrent;gameState.actionPoints=_objectSpread(_objectSpread({},gameState.actionPoints),{},{[newCurrent]:2});gameState.passed=_objectSpread(_objectSpread({},gameState.passed),{},{[newCurrent]:false});// Apply new start-of-turn hooks\napplyStartOfTurnFlags(gameState,newCurrent,log);// 🔥 CLUSTER 3: Auren-Flags beim Zugstart neu berechnen\nrecomputeAuraFlags(gameState);// Reset turn-bezogener Flag-Nutzungen (handled in applyStartOfTurnFlags)\nlog(\"\\uD83D\\uDD04 Zug-Ende: Spieler \".concat(newCurrent,\" ist am Zug (2 AP verf\\xFCgbar)\"));return gameState;}// Helper function to resolve round and start new one\nfunction resolveRound(gameState,log){// Calculate influence for both players\nconst p1Influence=sumGovernmentInfluenceWithAuras(gameState,1);const p2Influence=sumGovernmentInfluenceWithAuras(gameState,2);log(\"\\uD83D\\uDCCA Rundenauswertung: P1 \".concat(p1Influence,\" Einfluss vs P2 \").concat(p2Influence,\" Einfluss\"));// Determine winner\nlet roundWinner;if(p1Influence>p2Influence){roundWinner=1;log(\"\\uD83C\\uDFC6 Spieler 1 gewinnt die Runde! (\".concat(p1Influence,\" > \").concat(p2Influence,\")\"));}else if(p2Influence>p1Influence){roundWinner=2;log(\"\\uD83C\\uDFC6 Spieler 2 gewinnt die Runde! (\".concat(p2Influence,\" > \").concat(p1Influence,\")\"));}else{// Tie - current player wins\nroundWinner=gameState.current;log(\"\\uD83E\\uDD1D Unentschieden! Spieler \".concat(roundWinner,\" gewinnt als aktiver Spieler.\"));}// Collect all cards to move to discard\nconst cardsToDiscard=[...gameState.board[1].innen,...gameState.board[1].aussen,...gameState.board[2].innen,...gameState.board[2].aussen,...(gameState.permanentSlots[1].government?[gameState.permanentSlots[1].government]:[]),...(gameState.permanentSlots[1].public?[gameState.permanentSlots[1].public]:[]),...(gameState.permanentSlots[2].government?[gameState.permanentSlots[2].government]:[]),...(gameState.permanentSlots[2].public?[gameState.permanentSlots[2].public]:[]),...gameState.board[1].sofort,...gameState.board[2].sofort];// Draw 5 new cards for each player\nconst newP1Hand=drawCardsFromDeck(gameState,1,5);const newP2Hand=drawCardsFromDeck(gameState,2,5);// Calculate new rounds won\nconst newRoundsWon=_objectSpread(_objectSpread({},gameState.roundsWon),{},{[roundWinner]:gameState.roundsWon[roundWinner]+1});// Check if game should end (Best of 3: first to 2 wins)\nconst p1Wins=newRoundsWon[1];const p2Wins=newRoundsWon[2];if(p1Wins>=2||p2Wins>=2){const gameWinner=p1Wins>=2?1:2;log(\"\\uD83C\\uDFC6\\uD83C\\uDF89 SPIEL BEENDET! Spieler \".concat(gameWinner,\" gewinnt das Match! (\").concat(p1Wins,\"-\").concat(p2Wins,\")\"));log(\"\\uD83D\\uDD25 Gesamtergebnis: Player \".concat(gameWinner,\" ist der Sieger!\"));// Return final state with game winner\nreturn _objectSpread(_objectSpread({},gameState),{},{roundsWon:newRoundsWon,gameWinner,// Keep current board state for final display\npassed:{1:true,2:true}// Both passed to indicate game end\n});}// Create new state for next round\nconst newState=_objectSpread(_objectSpread({},gameState),{},{round:gameState.round+1,current:roundWinner,// Winner starts next round\npassed:{1:false,2:false},// Reset pass status\nactionPoints:{1:2,2:2},// Reset AP\nactionsUsed:{1:0,2:0},// Reset actions (kept for compatibility)\nroundsWon:newRoundsWon,effectFlags:{1:createDefaultEffectFlags(),2:createDefaultEffectFlags()},// Clear all board positions\nboard:emptyBoard(),// Clear permanent slots\npermanentSlots:{1:{government:null,public:null,initiativePermanent:null},2:{government:null,public:null,initiativePermanent:null}},// instantSlot wird nicht mehr verwendet - Sofort-Initiativen gehen in board[player].sofort\n// New hands with 5 cards each\nhands:{1:newP1Hand,2:newP2Hand},// Update decks (cards were removed during drawing)\ndecks:{1:gameState.decks[1].slice(newP1Hand.length),2:gameState.decks[2].slice(newP2Hand.length)},// Update discard pile\ndiscard:[...gameState.discard,...cardsToDiscard]});log(\"\\uD83C\\uDD95 Runde \".concat(newState.round,\" startet! Spieler \").concat(roundWinner,\" beginnt. (Rundenstand: P1 \").concat(newState.roundsWon[1],\" - P2 \").concat(newState.roundsWon[2],\")\"));log(\"\\uD83C\\uDCCF Beide Spieler erhalten 5 neue Handkarten.\");return newState;}export function useGameActions(gameState,setGameState,log,afterQueueResolved){// Guard against duplicate concurrent playCard calls for the same card UID\nconst playingUidRef=useRef(new Set());const startMatchWithDecks=useCallback((p1DeckEntries,p2DeckEntries)=>{const p1Cards=buildDeckFromEntries(p1DeckEntries);const p2Cards=buildDeckFromEntries(p2DeckEntries);// Debug: Log deck composition with detailed tag analysis\nconst p1NgoCarten=p1Cards.filter(c=>c.tag==='NGO');const p1PlatformCards=p1Cards.filter(c=>c.tag==='Plattform');const p1JoschaCards=p1Cards.filter(c=>c.effect==='ngo_boost');const p1PublicCards=p1Cards.filter(c=>c.kind==='spec'&&c.type==='Öffentlichkeitskarte');log(\"\\uD83D\\uDD0D DECK DEBUG P1: \".concat(p1Cards.length,\" Karten total\"));log(\"\\uD83E\\uDDEA P1 Public Cards: \".concat(p1PublicCards.map(c=>\"\".concat(c.name).concat(c.tag?\"[\".concat(c.tag,\"]\"):'')).join(', ')));log(\"\\uD83C\\uDF31 P1 NGO-Karten: \".concat(p1NgoCarten.length>0?p1NgoCarten.map(c=>c.name).join(', '):'Keine'));log(\"\\uD83D\\uDCBB P1 Plattform-Karten: \".concat(p1PlatformCards.length>0?p1PlatformCards.map(c=>c.name).join(', '):'Keine'));log(\"\\uD83C\\uDFAF JOSCHKA FISCHER: \".concat(p1JoschaCards.length>0?'✅ IM DECK':'❌ NICHT IM DECK'));const d1=[...p1Cards];const d2=[...p2Cards];const h1=d1.splice(0,Math.min(5,d1.length));const h2=d2.splice(0,Math.min(5,d2.length));setGameState(_objectSpread(_objectSpread({},gameState),{},{round:1,current:1,passed:{1:false,2:false},decks:{1:d1,2:d2},hands:{1:h1,2:h2},board:{1:{innen:[],aussen:[],sofort:[]},2:{innen:[],aussen:[],sofort:[]}},traps:{1:[],2:[]},permanentSlots:{1:{government:null,public:null,initiativePermanent:null},2:{government:null,public:null,initiativePermanent:null}},// instantSlot wird nicht mehr verwendet - Sofort-Initiativen gehen in board[player].sofort\ndiscard:[],shields:new Set(),// Set<UID>\neffectFlags:{1:createDefaultEffectFlags(),2:createDefaultEffectFlags()},actionsUsed:{1:0,2:0},log:[\"Match gestartet. P1 und P2 erhalten je \".concat(h1.length,\"/\").concat(h2.length,\" Startkarten.\"),\"\\uD83D\\uDD0D DECK DEBUG P1: \".concat(p1Cards.length,\" Karten total\"),\"\\uD83E\\uDDEA P1 Public Cards: \".concat(p1PublicCards.map(c=>\"\".concat(c.name).concat(c.tag?\"[\".concat(c.tag,\"]\"):'')).join(', ')),\"\\uD83C\\uDF31 P1 NGO-Karten: \".concat(p1NgoCarten.length>0?p1NgoCarten.map(c=>c.name).join(', '):'Keine'),\"\\uD83D\\uDCBB P1 Plattform-Karten: \".concat(p1PlatformCards.length>0?p1PlatformCards.map(c=>c.name).join(', '):'Keine'),\"\\uD83C\\uDFAF JOSCHKA FISCHER: \".concat(p1JoschaCards.length>0?'✅ IM DECK':'❌ NICHT IM DECK'),\"\\uD83D\\uDCCB INITIAL BOARD P1: Regierung=[] | \\xD6ffentlichkeit=[]\",\"\\uD83D\\uDCCB INITIAL BOARD P2: Regierung=[] | \\xD6ffentlichkeit=[]\",\"\\uD83C\\uDFE0 PERMANENT SLOTS: Alle leer\"],activeRefresh:{1:0,2:0}}));},[gameState,setGameState,log]);const startMatchVsAI=useCallback(function(p1DeckEntries){let presetKey=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'AUTORITAERER_REALIST';const p2DeckEntries=PRESET_DECKS[presetKey];startMatchWithDecks(p1DeckEntries,p2DeckEntries);},[startMatchWithDecks]);const playCard=useCallback((player,handIndex,lane)=>{logger.info(\"playCard START P\".concat(player,\" idx=\").concat(handIndex));setGameState(prev=>{// Test-only baseline fix – ensures AP=5 at game start inside test runner\nensureTestBaselineAP(prev);// Validate input parameters\nif(prev.current!==player){log(\"\\u274C ERROR: Not player turn - Current: \".concat(prev.current,\", Attempted: \").concat(player));logger.warn(\"playCard abort: wrong turn\");return prev;}const hand=prev.hands[player];if(handIndex<0||handIndex>=hand.length){log(\"\\u274C ERROR: Invalid hand index - Index: \".concat(handIndex,\", Hand length: \").concat(hand.length));return prev;}// Debug: Log current hand contents with detailed tag info\nlog(\"\\uD83D\\uDD0D HAND DEBUG P\".concat(player,\": \").concat(hand.map((c,i)=>\"\".concat(i,\":\").concat(c.name).concat(c.tag?\"[\".concat(c.tag,\"]\"):'')).join(', ')));const ngoCards=hand.filter(c=>c.tag==='NGO');const platformCards=hand.filter(c=>c.tag==='Plattform');if(ngoCards.length>0){log(\"\\uD83C\\uDF31 NGO-Karten in Hand P\".concat(player,\": \").concat(ngoCards.map(c=>c.name).join(', ')));}if(platformCards.length>0){log(\"\\uD83D\\uDCBB Plattform-Karten in Hand P\".concat(player,\": \").concat(platformCards.map(c=>c.name).join(', ')));}const selectedCard=hand[handIndex];if(!canPlayCard(prev,player,selectedCard)){log('🚫 Kann Karte nicht spielen (keine AP verfügbar).');return prev;}const{cost}=getNetApCost(prev,player,selectedCard);const prevAp=prev.actionPoints[player];const newState=_objectSpread({},prev);// Simplified AP system: All cards cost exactly 1 AP\nnewState.actionPoints[player]=Math.max(0,newState.actionPoints[player]-cost);log(\"\\uD83D\\uDCB3 Kosten verbucht: AP \".concat(prevAp,\"\\u2192\").concat(newState.actionPoints[player]));// Flags KONSUMIEREN (einheitlich, NUR HIER!)\nensureFlags(newState,player);const ef=newState.effectFlags[player];// Simplified AP system: No refunds or discounts\n// All cards cost exactly 1 AP\n// Remove card from hand\nconst newHand=[...newState.hands[player]];const[playedCard]=newHand.splice(handIndex,1);newState.hands=_objectSpread(_objectSpread({},newState.hands),{},{[player]:newHand});// Prevent double-playing the same UID concurrently\nif(playedCard.uid){if(playingUidRef.current.has(playedCard.uid)){log(\"\\u26A0\\uFE0F Duplicate play prevented for UID \".concat(playedCard.uid));return prev;}playingUidRef.current.add(playedCard.uid);}// 🔧 CLUSTER 3 DEBUG: Zeige jede gespielte Karte\nlog(\"\\uD83D\\uDD27 CLUSTER 3 GLOBAL DEBUG: P\".concat(player,\" spielt \").concat(playedCard.name,\" (\").concat(playedCard.kind,\") - Type: \").concat(playedCard.type||'KEIN TYPE'));// 🔧 CLUSTER 3 DEBUG: Zeige aktuelles Board\nconst currentBoard=newState.board[player];const publicCardsOnBoard=currentBoard.innen.filter(card=>card.kind==='spec');log(\"\\uD83D\\uDD27 CLUSTER 3 GLOBAL DEBUG: \\xD6ffentlichkeitskarten auf dem Feld: \".concat(publicCardsOnBoard.map(c=>c.name).join(', ')));// Jennifer Doudna check removed - not needed for current game logic\n// Handle different card types\nif(playedCard.kind==='pol'){const polCard=playedCard;const targetLane=lane||(polCard.tag==='Staatsoberhaupt'||polCard.tag==='Regierungschef'||polCard.tag==='Diplomat'?'aussen':'innen');if(newState.board[player][targetLane].length>=5){log(\"\\u274C ERROR: Lane full - Lane: \".concat(targetLane,\", Current: \").concat(newState.board[player][targetLane].length,\"/5\"));return prev;}// Add to board (immutable clone to avoid accidental double references)\nconst laneArray=[...newState.board[player][targetLane],playedCard];const playerBoardCloned=_objectSpread(_objectSpread({},newState.board[player]),{},{[targetLane]:laneArray});newState.board=_objectSpread(_objectSpread({},newState.board),{},{[player]:playerBoardCloned});log(\"\\uD83C\\uDCCF Player \".concat(player,\": \").concat(playedCard.name,\" gespielt in \").concat(targetLane==='aussen'?'Regierung':'Öffentlichkeit'));// 3) Nachdem die Karte gelegt wurde: gegnerische Traps prüfen\napplyTrapsOnCardPlayed(newState,player,playedCard,event=>{if(!newState._effectQueue)newState._effectQueue=[];newState._effectQueue.push(event);},log);// 👉 Erst JETZT Auren anwenden (damit +2 Basis erhalten bleibt)\napplyAurasForPlayer(newState,player,log);// 6) Karteneffekte enqueuen + Queue auflösen\ntriggerCardEffects(newState,player,playedCard);// Migration Helper verwenden\nmigrateLegacyQueue(newState);// Nur noch _effectQueue verwenden\nif(newState._effectQueue&&newState._effectQueue.length>0){resolveQueue(newState,newState._effectQueue);newState._effectQueue=[];// Nach Queue-Auflösung: Hand-Arrays immutabel neu zuweisen\nafterQueueResolved===null||afterQueueResolved===void 0?void 0:afterQueueResolved();}// Release playing UID after queue resolved\nif(playedCard.uid)playingUidRef.current.delete(playedCard.uid);// Check for trap triggers\napplyTrapsOnCardPlayed(newState,player,playedCard,e=>{var _newState$_effectQueu;return((_newState$_effectQueu=newState._effectQueue)!==null&&_newState$_effectQueu!==void 0?_newState$_effectQueu:newState._effectQueue=[]).push(e);},m=>{var _newState$_effectQueu2;return((_newState$_effectQueu2=newState._effectQueue)!==null&&_newState$_effectQueu2!==void 0?_newState$_effectQueu2:newState._effectQueue=[]).push({type:'LOG',msg:m});});// 🔥 ROMAN ABRAMOVICH EFFEKT: Wenn Regierungskarte mit Einfluss ≤5 gespielt wird\nif(playedCard.kind==='pol'&&playedCard.influence<=5){const opponent=player===1?2:1;const opponentBoard=newState.board[opponent];const romanAbramovich=opponentBoard.innen.find(card=>card.kind==='spec'&&card.name==='Roman Abramovich');if(romanAbramovich){// Ziehe eine Karte für den Gegner\nif(newState.decks[opponent].length>0){const drawnCard=newState.decks[opponent].shift();if(drawnCard){newState.hands[opponent].push(drawnCard);log(\"\\uD83D\\uDD25 ROMAN ABRAMOVICH EFFEKT: P\".concat(opponent,\" zieht 1 Karte (\").concat(drawnCard.name,\") - Regierungskarte mit Einfluss \\u22645 gespielt\"));}}}}// 🔍 BOARD DEBUG: Zeige aktuelles Board nach dem Spielen\nconst currentBoard=newState.board[player];const regierungKarten=currentBoard.aussen.map(c=>\"\".concat(c.name,\"[\").concat(c.kind==='pol'?c.influence+'I':'S',\"]\"));const öffentlichkeitKarten=currentBoard.innen.map(c=>\"\".concat(c.name,\"[\").concat(c.kind==='spec'?c.tag||'S':'P',\"]\"));log(\"\\uD83D\\uDCCB P\".concat(player,\" BOARD: Regierung=[\").concat(regierungKarten.join(', '),\"] | \\xD6ffentlichkeit=[\").concat(öffentlichkeitKarten.join(', '),\"]\"));// 🔥 JOSCHKA FISCHER NGO-EFFEKT: Jetzt als kontinuierlicher Aura-Effekt in sumRowWithAuras implementiert\nlog(\"\\uD83D\\uDD0D DEBUG: Karte gespielt - Name: \".concat(playedCard.name,\", Tag: \").concat(playedCard.tag||'Kein Tag',\", Lane: \").concat(targetLane,\", Kind: \").concat(playedCard.kind));if(playedCard.tag==='NGO'){log(\"\\uD83D\\uDD0D NGO-Karte gespielt: \".concat(playedCard.name,\" [NGO] - Kontinuierliche Aura-Effekte werden bei Rundenauswertung berechnet\"));// 🎯 SOFORTIGE SYNERGIE-PRÜFUNG: Joschka Fischer + NGO\nconst joschaFischer=currentBoard.aussen.find(card=>card.kind==='pol'&&card.effect==='ngo_boost');if(joschaFischer){log(\"\\uD83D\\uDD25\\uD83D\\uDD25\\uD83D\\uDD25 SYNERGIE AKTIVIERT! \\uD83D\\uDD25\\uD83D\\uDD25\\uD83D\\uDD25 Joschka Fischer + \".concat(playedCard.name,\"[NGO] \\u2192 +1 Einfluss bei Rundenauswertung\"));}}}else if(playedCard.kind==='spec'){var _type,_type2;const specCard=playedCard;const typeStr=String(specCard.type||'').toLowerCase();const isInitiative=/initiative/.test(typeStr);// matcht \"Initiative\", \"Sofort-Initiative\", etc.\n// 1) Falls es eine \"Systemrelevant\" ist (sofortiger Buff auf letzte eigene Regierungskarte)\nif(playedCard.kind==='spec'&&(_type=playedCard.type)!==null&&_type!==void 0&&_type.toLowerCase().includes('systemrelevant')){const ownBoard=newState.board[player];const candidates=[...ownBoard.aussen,...ownBoard.innen].filter(c=>c.kind==='pol');const target=candidates[candidates.length-1];// letzte eigene Regierungskarte\nif(target){target.protected=true;log(\"\\uD83D\\uDEE1\\uFE0F \".concat(target.name,\" erh\\xE4lt einmaligen Schutz.\"));}else{log('🛈 Systemrelevant: Keine eigene Regierungskarte im Spiel – Effekt verpufft.');}// danach die Spezialkarte normal entsorgen\nnewState.discard.push(playedCard);return newState;}// 1) Dauerhaft-Initiative (Ongoing)\nif(typeStr.includes('dauerhaft')){// Slot-Mapping: Dauerhaft-Initiativen → initiativePermanent, nicht government\nconst slotType='initiativePermanent';if(!newState.permanentSlots[player][slotType]){newState.permanentSlots[player][slotType]=playedCard;log(\"P\".concat(player,\" spielt \").concat(playedCard.name,\" als Dauerhafte Initiative (Slot: \").concat(slotType,\")\"));}else{var _newState$permanentSl;log(\"\\u26A0\\uFE0F WARN: Slot occupied - Slot \".concat(slotType,\" already has \").concat((_newState$permanentSl=newState.permanentSlots[player][slotType])===null||_newState$permanentSl===void 0?void 0:_newState$permanentSl.name));}// 6) Karteneffekte enqueuen + Queue auflösen\ntriggerCardEffects(newState,player,playedCard);// Migration Helper verwenden\nmigrateLegacyQueue(newState);// Nur noch _effectQueue verwenden\nif(newState._effectQueue&&newState._effectQueue.length>0){resolveQueue(newState,newState._effectQueue);newState._effectQueue=[];// Nach Queue-Auflösung: Hand-Arrays immutabel neu zuweisen\nafterQueueResolved===null||afterQueueResolved===void 0?void 0:afterQueueResolved();}// Check for trap triggers\napplyTrapsOnCardPlayed(newState,player,playedCard,e=>{var _newState$_effectQueu3;return((_newState$_effectQueu3=newState._effectQueue)!==null&&_newState$_effectQueu3!==void 0?_newState$_effectQueu3:newState._effectQueue=[]).push(e);},m=>{var _newState$_effectQueu4;return((_newState$_effectQueu4=newState._effectQueue)!==null&&_newState$_effectQueu4!==void 0?_newState$_effectQueu4:newState._effectQueue=[]).push({type:'LOG',msg:m});});return newState;}// 2) Sofort-/Sofort-Initiativen (Instant)\nif(isInitiative){if(!specCard.effectKey){log(\"\\u274C Initiative ohne effectKey: \".concat(specCard.name));}else{log(\"\\uD83E\\uDDE9 INIT: \".concat(specCard.name,\" [\").concat(String(specCard.effectKey),\"] gespielt\"));}// 🔧 NEU: Sofort-Initiativen werden in das sofort Array gelegt statt sofort aktiviert\nif(typeStr.includes('sofort')){// Prüfe ob bereits eine Sofort-Initiative im Slot liegt\nif(newState.board[player].sofort.length>0){var _newState$board$playe;log(\"\\u274C ERROR: Sofort-Initiative-Slot bereits besetzt - \".concat((_newState$board$playe=newState.board[player].sofort[0])===null||_newState$board$playe===void 0?void 0:_newState$board$playe.name,\" muss erst aktiviert werden\"));// Karte zurück in die Hand\nnewState.hands[player]=[...newState.hands[player],playedCard];// AP zurückgeben\nnewState.actionPoints[player]+=cost;// AP zurückgegeben, keine Aktion rückgängig zu machen\nreturn newState;}// Sofort-Initiative in das sofort Array legen\nnewState.board[player].sofort=[playedCard];log(\"\\uD83C\\uDFAF P\".concat(player,\" legt \").concat(playedCard.name,\" in Sofort-Initiative-Slot (kann sp\\xE4ter aktiviert werden)\"));// Sofort-Initiativen: auf Board.sofort legen (nicht direkt entsorgen)\nif(!newState._effectQueue)newState._effectQueue=[];newState._effectQueue.push({type:'LOG',msg:\"\\uD83D\\uDD14 Sofort-Initiative bereit: \".concat(playedCard.name,\" (zum Aktivieren anklicken oder Taste 'A')\")});return newState;}// Dauerhaft-Initiativen werden weiterhin sofort aktiviert\n// Initiative in den Ablagestapel\nnewState.discard=[...newState.discard,playedCard];log(\"P\".concat(player,\" spielt Initiative: \").concat(playedCard.name));// 6) Karteneffekte enqueuen + Queue auflösen\ntriggerCardEffects(newState,player,playedCard);// Migration Helper verwenden\nmigrateLegacyQueue(newState);// Nur noch _effectQueue verwenden\nif(newState._effectQueue&&newState._effectQueue.length>0){resolveQueue(newState,newState._effectQueue);newState._effectQueue=[];// Nach Queue-Auflösung: Hand-Arrays immutabel neu zuweisen\nafterQueueResolved===null||afterQueueResolved===void 0?void 0:afterQueueResolved();}// Check for trap triggers\napplyTrapsOnCardPlayed(newState,player,playedCard,e=>{var _newState$_effectQueu5;return((_newState$_effectQueu5=newState._effectQueue)!==null&&_newState$_effectQueu5!==void 0?_newState$_effectQueu5:newState._effectQueue=[]).push(e);},m=>{var _newState$_effectQueu6;return((_newState$_effectQueu6=newState._effectQueue)!==null&&_newState$_effectQueu6!==void 0?_newState$_effectQueu6:newState._effectQueue=[]).push({type:'LOG',msg:m});});// 🔥 CLUSTER 3: Auren-Flags neu berechnen (nach Kartenspielen)\nrecomputeAuraFlags(newState);// 🔥 CLUSTER 3: Ai Weiwei Bonus wird bei Aktivierung angewendet (nicht beim Spielen)\n// 🔥 PASSIVE EFFEKTE NACH INITIATIVE: Mark Zuckerberg & Sam Altman\n// Diese Effekte werden jetzt über INITIATIVE_ACTIVATED Event + Board-Check gehandhabt\n// Keine direkten Flag-Mutationen mehr - alles über Events\nreturn newState;}// 3) Öffentlichkeit (Public)\nif(typeStr==='öffentlichkeitskarte'||typeStr==='oeffentlichkeitskarte'||typeStr==='öffentlichkeit'||typeStr==='public'){if(newState.board[player].innen.length<5){const innenArray=[...newState.board[player].innen,playedCard];const playerBoardCloned=_objectSpread(_objectSpread({},newState.board[player]),{},{innen:innenArray});newState.board=_objectSpread(_objectSpread({},newState.board),{},{[player]:playerBoardCloned});log(\"P\".concat(player,\" spielt \").concat(playedCard.name,\" in \\xD6ffentlichkeit\"));// Sofort Auren prüfen (z.B. JF +1, wenn JF schon liegt)\napplyAurasForPlayer(newState,player,log);// 6) Karteneffekte enqueuen + Queue auflösen\ntriggerCardEffects(newState,player,playedCard);// Migration Helper verwenden\nmigrateLegacyQueue(newState);if(newState._effectQueue&&newState._effectQueue.length>0){resolveQueue(newState,newState._effectQueue);newState._effectQueue=[];// Nach Queue-Auflösung: Hand-Arrays immutabel neu zuweisen\nafterQueueResolved===null||afterQueueResolved===void 0?void 0:afterQueueResolved();}// Check for trap triggers\napplyTrapsOnCardPlayed(newState,player,playedCard,e=>{var _newState$_effectQueu7;return((_newState$_effectQueu7=newState._effectQueue)!==null&&_newState$_effectQueu7!==void 0?_newState$_effectQueu7:newState._effectQueue=[]).push(e);},m=>{var _newState$_effectQueu8;return((_newState$_effectQueu8=newState._effectQueue)!==null&&_newState$_effectQueu8!==void 0?_newState$_effectQueu8:newState._effectQueue=[]).push({type:'LOG',msg:m});});// 🔥 PUBLIC CARD EFFECTS - Passive effects when played\n// Helper function to draw a card for the player\nconst drawCardForPlayer=cardName=>{if(newState.decks[player].length>0){const drawnCard=newState.decks[player].shift();if(drawnCard){newState.hands[player].push(drawnCard);log(\"\\uD83D\\uDD25 \".concat(cardName.toUpperCase(),\" EFFEKT: +1 Karte gezogen (\").concat(drawnCard.name,\")\"));return true;}}return false;};if(specCard.name==='Elon Musk'){// Effect: \"Ziehe 1 Karte. Deine erste Initiative pro Runde kostet 1 Aktionspunkt weniger.\"\ndrawCardForPlayer('Elon Musk');// 🔥 QUEUE-SYSTEM: Erste Initiative pro Runde → Refund wird über triggerCardEffects gehandhabt\n}else if(specCard.name==='Bill Gates'){// Effect: \"Ziehe 1 Karte. Deine nächste Initiative kostet 1 Aktionspunkt weniger.\"\ndrawCardForPlayer('Bill Gates');// 🔥 QUEUE-SYSTEM: Nächste Initiative → Refund wird über triggerCardEffects gehandhabt\n}else if(specCard.name==='Jeff Bezos'){// Effect: \"Ziehe 1 Karte beim Ausspielen. Wenn eine Plattform liegt: +1 Aktionspunkt.\"\ndrawCardForPlayer('Jeff Bezos');const hasPlatform=newState.board[player].innen.some(c=>c.kind==='spec'&&c.tag==='Plattform');if(hasPlatform){newState.actionPoints[player]+=1;log(\"\\uD83D\\uDD25 JEFF BEZOS: +1 AP durch Plattform-Synergie! (\".concat(newState.actionPoints[player]-1,\" \\u2192 \").concat(newState.actionPoints[player],\")\"));}}else if(specCard.name==='Warren Buffett'){// Effect: \"Ziehe 1 Karte. Bei einer Wirtschafts-Initiative: +1 Effekt.\"\ndrawCardForPlayer('Warren Buffett');// TODO: Implement \"Wirtschafts-Initiative +1 Effect\" logic\nlog(\"\\uD83D\\uDCCA WARREN BUFFETT: Bei Wirtschafts-Initiativen +1 Effekt! (TODO: Implementierung)\");}else if(specCard.name==='Gautam Adani'){// Effect: \"Ziehe 1 Karte. Bei einer Infrastruktur-Initiative: +1 Effekt.\"\ndrawCardForPlayer('Gautam Adani');// TODO: Implement \"Infrastruktur-Initiative +1 Effect\" logic\nlog(\"\\uD83D\\uDCCA GAUTAM ADANI: Bei Infrastruktur-Initiativen +1 Effekt! (TODO: Implementierung)\");}else if(specCard.name==='Zhang Yiming'){// Effect: \"Ziehe 1 Karte. Bei Medien auf dem Feld: -1 Aktionspunkt auf deine nächste Initiative.\"\ndrawCardForPlayer('Zhang Yiming');const hasMedia=newState.board[player].innen.some(c=>c.kind==='spec'&&c.tag==='Medien');if(hasMedia){// TODO: Implement \"nächste Initiative -1 AP\" logic\nlog(\"\\uD83D\\uDD25 ZHANG YIMING: N\\xE4chste Initiative kostet 1 AP weniger durch Medien-Synergie! (TODO: Implementierung)\");}}else if(specCard.name==='George Soros'){// Effect: \"+1 Aktionspunkt wenn der Gegner eine autoritäre Regierungskarte hat.\"\nconst opponent=player===1?2:1;const hasAuthoritarianCard=newState.board[opponent].aussen.some(card=>{const polCard=card;return polCard.tag==='Staatsoberhaupt'&&polCard.influence>=8;// High influence leaders\n});if(hasAuthoritarianCard){newState.actionPoints[player]+=1;log(\"\\uD83D\\uDD25 GEORGE SOROS EFFEKT: +1 AP durch autorit\\xE4re Regierung des Gegners!\");log(\"\\uD83D\\uDCCA SOROS: Aktionspunkte \".concat(newState.actionPoints[player]-1,\" \\u2192 \").concat(newState.actionPoints[player]));}else{log(\"\\uD83D\\uDCAD George Soros: Keine autorit\\xE4ren Karten beim Gegner - Effekt nicht ausgel\\xF6st\");}}// 🔗 NGO-Synergie: Wenn eine NGO gelegt wird und Joschka Fischer liegt, erhält P${player} +1 Einfluss (Rundenauswertung)\nif(specCard.tag==='NGO'){const hasJoschka=newState.board[player].aussen.some(c=>c.kind==='pol'&&c.name==='Joschka Fischer'&&!c.deactivated);if(hasJoschka){log(\"\\uD83D\\uDD25\\uD83D\\uDD25\\uD83D\\uDD25 SYNERGIE AKTIVIERT! \\uD83D\\uDD25\\uD83D\\uDD25\\uD83D\\uDD25 Joschka Fischer + \".concat(playedCard.name,\"[NGO] \\u2192 +1 Einfluss bei Rundenauswertung\"));}}}else{log(\"\\u274C ERROR: Lane full - \\xD6ffentlichkeit ist voll (5/5)\");}// Simplified AP system: No refunds\nreturn newState;}// 4) Default: Traps/Interventions\n// Falls Trap-Karte gelegt wird\nif(playedCard.kind==='spec'&&(_type2=playedCard.type)!==null&&_type2!==void 0&&_type2.toLowerCase().includes('trap')){registerTrap(newState,player,playedCard.key||playedCard.name.toLowerCase().replace(/[- ]/g,'_'));// NICHT sofort checken – sie wartet auf den Gegner\nreturn newState;}newState.traps[player]=[...newState.traps[player],playedCard];log(\"P\".concat(player,\" spielt \").concat(playedCard.name,\" als \").concat(specCard.type));// 6) Karteneffekte enqueuen + Queue auflösen\ntriggerCardEffects(newState,player,playedCard);// Migration Helper verwenden\nmigrateLegacyQueue(newState);// Nur noch _effectQueue verwenden\nif(newState._effectQueue&&newState._effectQueue.length>0){resolveQueue(newState,newState._effectQueue);newState._effectQueue=[];// Nach Queue-Auflösung: Hand-Arrays immutabel neu zuweisen\nafterQueueResolved===null||afterQueueResolved===void 0?void 0:afterQueueResolved();}// Check for trap triggers\napplyTrapsOnCardPlayed(newState,player,playedCard,e=>{var _newState$_effectQueu9;return((_newState$_effectQueu9=newState._effectQueue)!==null&&_newState$_effectQueu9!==void 0?_newState$_effectQueu9:newState._effectQueue=[]).push(e);},m=>{var _newState$_effectQueu0;return((_newState$_effectQueu0=newState._effectQueue)!==null&&_newState$_effectQueu0!==void 0?_newState$_effectQueu0:newState._effectQueue=[]).push({type:'LOG',msg:m});});// Simplified AP system: No refunds\nreturn newState;}// 6) Karteneffekte enqueuen + Queue auflösen (fallback für unbekannte Kartentypen)\ntriggerCardEffects(newState,player,selectedCard);// Migration Helper verwenden\nmigrateLegacyQueue(newState);// Nur noch _effectQueue verwenden\nif(newState._effectQueue&&newState._effectQueue.length>0){resolveQueue(newState,newState._effectQueue);newState._effectQueue=[];// Nach Queue-Auflösung: Hand-Arrays immutabel neu zuweisen\nafterQueueResolved===null||afterQueueResolved===void 0?void 0:afterQueueResolved();}// Check for trap triggers\napplyTrapsOnCardPlayed(newState,player,selectedCard,e=>{var _newState$_effectQueu1;return((_newState$_effectQueu1=newState._effectQueue)!==null&&_newState$_effectQueu1!==void 0?_newState$_effectQueu1:newState._effectQueue=[]).push(e);},m=>{var _newState$_effectQueu10;return((_newState$_effectQueu10=newState._effectQueue)!==null&&_newState$_effectQueu10!==void 0?_newState$_effectQueu10:newState._effectQueue=[]).push({type:'LOG',msg:m});});// Simplified AP system: No refunds\n// Kein Aktionenlimit mehr → automatischer Turnwechsel entfällt\nreturn newState;});},[setGameState,log]);const activateInstantInitiative=useCallback(player=>{logger.info(\"activateInstantInitiative START P\".concat(player));setGameState(prev=>{if(prev.current!==player){log(\"\\u274C ERROR: Not player turn - Current: \".concat(prev.current,\", Attempted: \").concat(player));return prev;}const instantCard=prev.board[player].sofort[0];if(!instantCard){log(\"\\u274C ERROR: No Sofort-Initiative in slot for player \".concat(player));return prev;}const newState=_objectSpread({},prev);// 1) Normale Karten-Effekte der Sofort-Karte feuern\ntriggerCardEffects(newState,player,instantCard);// Check for trap triggers\napplyTrapsOnCardPlayed(newState,player,instantCard,e=>{var _newState$_effectQueu11;return((_newState$_effectQueu11=newState._effectQueue)!==null&&_newState$_effectQueu11!==void 0?_newState$_effectQueu11:newState._effectQueue=[]).push(e);},m=>{var _newState$_effectQueu12;return((_newState$_effectQueu12=newState._effectQueue)!==null&&_newState$_effectQueu12!==void 0?_newState$_effectQueu12:newState._effectQueue=[]).push({type:'LOG',msg:m});});// 2) Queue auflösen (BEVOR die Karte entfernt wird)\nif(newState._effectQueue&&newState._effectQueue.length>0){resolveQueue(newState,[...newState._effectQueue]);newState._effectQueue=[];// Nach Queue-Auflösung: Hand-Arrays immutabel neu zuweisen\nafterQueueResolved===null||afterQueueResolved===void 0?void 0:afterQueueResolved();}// 3) Karte NACH Queue-Auflösung in den Ablagestapel\nconst[played]=newState.board[player].sofort.splice(0,1);newState.discard.push(played);return newState;});},[setGameState,log]);const endTurn=useCallback(function(){let reason=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'button_end_turn';logger.info(\"endTurn START reason=\".concat(reason));setGameState(prev=>{// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst current=prev.current;// 1) Schon im Abschluss? -> Nichts tun (Idempotenz)\nif(prev.isEndingTurn){log('🔁 Zugabschluss läuft bereits – warte auf Queue.');return prev;}const newState=_objectSpread(_objectSpread({},prev),{},{isEndingTurn:true});// 2) Hängen noch Effekte in der Queue? -> Auflösen lassen\nif(newState._effectQueue&&newState._effectQueue.length>0){log('⏳ Effekte werden noch aufgelöst – Zugwechsel folgt automatisch.');resolveQueue(newState,[...newState._effectQueue]);newState._effectQueue=[];// Nach Queue-Auflösung: Wenn Flag noch gesetzt, Zug beenden\nif(newState.isEndingTurn){return reallyEndTurn(newState,log);}return newState;}// 3) Keine Effekte mehr -> sofort beenden\nreturn reallyEndTurn(newState,log);});},[setGameState,log]);// Legacy: nextTurn als Alias für endTurn für Kompatibilität\nconst nextTurn=useCallback(()=>{logger.info('nextTurn alias called');endTurn('auto');},[endTurn]);const passTurn=useCallback(player=>{logger.info(\"passTurn START P\".concat(player));setGameState(prev=>{logger.dbg(\"passTurn setState current=\".concat(prev.current,\" player=\").concat(player));if(prev.current!==player){logger.dbg(\"passTurn wrong turn current=\".concat(prev.current,\" attempted=\").concat(player));return prev;}const newState=_objectSpread(_objectSpread({},prev),{},{passed:_objectSpread(_objectSpread({},prev.passed),{},{[player]:true})});logger.dbg(\"Pass status updated P1=\".concat(newState.passed[1],\" P2=\").concat(newState.passed[2]));log(\"\\uD83D\\uDEAB Spieler \".concat(player,\" passt.\"));// ❗ Kein Nachziehen bei Pass:\n// Der passierende Spieler kommt in dieser Runde nicht mehr dran.\n// Die nächste Runde startet ohnehin mit 5 neuen Handkarten.\n// Check if round should end (both players passed)\nconst shouldEndRound=checkRoundEnd(newState);logger.dbg(\"Should end round? \".concat(shouldEndRound));if(shouldEndRound){log(\"\\uD83C\\uDFC1 Runde \".concat(newState.round,\" wird beendet und ausgewertet.\"));return resolveRound(newState,log);}else{// Switch turn to other player for their final chance\nconst otherPlayer=player===1?2:1;logger.dbg(\"Switching to other player \".concat(otherPlayer,\" hasPassed=\").concat(newState.passed[otherPlayer]));// Only switch if other player hasn't passed yet\nif(!newState.passed[otherPlayer]){newState.current=otherPlayer;newState.actionPoints=_objectSpread(_objectSpread({},newState.actionPoints),{},{[otherPlayer]:2});// Apply new start-of-turn hooks\napplyStartOfTurnFlags(newState,otherPlayer,log);// 🔥 CLUSTER 3: Auren-Flags beim Zugstart neu berechnen\nrecomputeAuraFlags(newState);log(\"\\u23ED\\uFE0F Spieler \".concat(otherPlayer,\" hat noch einen letzten Zug.\"));logger.dbg(\"Turn switched to player \".concat(otherPlayer));}else{// Both players have passed now, end round\nlog(\"\\uD83C\\uDFC1 Runde \".concat(newState.round,\" wird beendet (beide Spieler haben gepasst).\"));return resolveRound(newState,log);}}return newState;});},[setGameState,log]);return{startMatchWithDecks,startMatchVsAI,playCard,activateInstantInitiative,passTurn,nextTurn,endTurn};}","map":{"version":3,"names":["useCallback","useRef","createDefaultEffectFlags","buildDeckFromEntries","sumGovernmentInfluenceWithAuras","PRESET_DECKS","getCardActionPointCost","getNetApCost","canPlayCard","triggerCardEffects","ensureTestBaselineAP","resolveQueue","applyStartOfTurnFlags","registerTrap","applyTrapsOnCardPlayed","recomputeAuraFlags","emptyBoard","logger","migrateLegacyQueue","state","other","p","ensureFlags","s","effectFlags","_objectSpread","pickLane","c","tag","kind","isCardPlayableNow","player","card","deactivated","lane","board","length","t","String","type","toLowerCase","innen","slot","permanentSlots","hasPlayableZeroCost","hands","cost","applyAurasForPlayer","log","hasNgo","some","newAussen","aussen","map","pol","baseInfluence","influence","prev","bonus","name","effect","concat","checkRoundEnd","gameState","result","passed","dbg","drawCardsFromDeck","count","deck","decks","drawnCards","splice","Math","min","reallyEndTurn","current","isEndingTurn","drawnCard","shift","push","shouldEndRound","round","resolveRound","newCurrent","actionPoints","p1Influence","p2Influence","roundWinner","cardsToDiscard","government","public","sofort","newP1Hand","newP2Hand","newRoundsWon","roundsWon","p1Wins","p2Wins","gameWinner","newState","actionsUsed","initiativePermanent","slice","discard","useGameActions","setGameState","afterQueueResolved","playingUidRef","Set","startMatchWithDecks","p1DeckEntries","p2DeckEntries","p1Cards","p2Cards","p1NgoCarten","filter","p1PlatformCards","p1JoschaCards","p1PublicCards","join","d1","d2","h1","h2","traps","shields","activeRefresh","startMatchVsAI","presetKey","arguments","undefined","playCard","handIndex","info","warn","hand","i","ngoCards","platformCards","selectedCard","prevAp","max","ef","newHand","playedCard","uid","has","add","currentBoard","publicCardsOnBoard","polCard","targetLane","laneArray","playerBoardCloned","event","_effectQueue","delete","e","_newState$_effectQueu","m","_newState$_effectQueu2","msg","opponent","opponentBoard","romanAbramovich","find","regierungKarten","öffentlichkeitKarten","joschaFischer","_type","_type2","specCard","typeStr","isInitiative","test","includes","ownBoard","candidates","target","protected","slotType","_newState$permanentSl","_newState$_effectQueu3","_newState$_effectQueu4","effectKey","_newState$board$playe","_newState$_effectQueu5","_newState$_effectQueu6","innenArray","_newState$_effectQueu7","_newState$_effectQueu8","drawCardForPlayer","cardName","toUpperCase","hasPlatform","hasMedia","hasAuthoritarianCard","hasJoschka","key","replace","_newState$_effectQueu9","_newState$_effectQueu0","_newState$_effectQueu1","_newState$_effectQueu10","activateInstantInitiative","instantCard","_newState$_effectQueu11","_newState$_effectQueu12","played","endTurn","reason","nextTurn","passTurn","otherPlayer"],"sources":["C:/Users/skank/Videos/Cards/Milchcards/src/hooks/useGameActions.ts"],"sourcesContent":["import { useCallback, useRef } from 'react';\r\nimport { GameState, Card, Player, BuilderEntry, PoliticianCard } from '../types/game';\r\nimport { createDefaultEffectFlags } from '../types/game';\r\nimport { buildDeckFromEntries, sumGovernmentInfluenceWithAuras } from '../utils/gameUtils';\r\nimport { PRESET_DECKS } from '../data/gameData';\r\nimport { getCardActionPointCost, getNetApCost, canPlayCard, isInitiativeCard, isGovernmentCard } from '../utils/ap';\r\nimport { triggerCardEffects } from '../effects/cards';\r\nimport { ensureTestBaselineAP } from '../utils/testCompat';\r\nimport { resolveQueue } from '../utils/queue';\r\nimport { applyStartOfTurnFlags } from '../utils/startOfTurnHooks';\r\nimport { registerTrap, applyTrapsOnCardPlayed } from '../utils/traps';\r\nimport { recomputeAuraFlags } from '../state/effects';\r\nimport { activateInstantInitiative as activateInstantInitiativeRuntime } from '../state/instantRuntime';\r\nimport { isInstantInitiative } from '../utils/initiative';\r\nimport { emptyBoard } from '../state/board';\r\nimport type { EffectEvent } from '../types/effects';\r\nimport { logger } from '../debug/logger';\r\n\r\n// Migration Helper für Queue-Vereinheitlichung\r\nconst migrateLegacyQueue = (state: any) => {\r\n  // Queue migration completed - only _effectQueue exists now\r\n};\r\n\r\n// Helper function for getting the other player\r\nconst other = (p: Player): Player => (p === 1 ? 2 : 1) as Player;\r\n\r\n// Hilfsfunktion: stellt sicher, dass effectFlags vorhanden sind\r\nconst ensureFlags = (s: GameState, p: Player) => {\r\n  if (!s.effectFlags) {\r\n    (s as any).effectFlags = { 1: createDefaultEffectFlags(), 2: createDefaultEffectFlags() };\r\n  } else {\r\n    s.effectFlags[p] = { ...createDefaultEffectFlags(), ...s.effectFlags[p] };\r\n  }\r\n};\r\n\r\n// Lane-Heuristik wie in playCard\r\nconst pickLane = (c: Card): 'innen'|'aussen' => {\r\n  const tag = (c as any).tag;\r\n  if (c.kind === 'pol' && (tag === 'Staatsoberhaupt' || tag === 'Regierungschef' || tag === 'Diplomat')) return 'aussen';\r\n  return 'innen';\r\n};\r\n\r\nconst isCardPlayableNow = (state: GameState, player: Player, card: Card): boolean => {\r\n  if ((card as any).deactivated) return false;\r\n\r\n  if (card.kind === 'pol') {\r\n    const lane = pickLane(card);\r\n    return state.board[player][lane].length < 5;\r\n  }\r\n\r\n  if (card.kind === 'spec') {\r\n    const t = String((card as any).type || '').toLowerCase();\r\n    if (t === 'öffentlichkeitskarte' || t === 'oeffentlichkeitskarte' || t === 'public') {\r\n      return state.board[player].innen.length < 5;\r\n    }\r\n    if (t === 'dauerhaft-initiative') {\r\n      const slot = 'government'; // wie bei dir „simplified\"\r\n      return !state.permanentSlots[player][slot];\r\n    }\r\n    // sonst: Fallen/Interventionen – aktuell immer erlaubt\r\n    return true;\r\n  }\r\n\r\n  return false;\r\n};\r\n\r\nexport const hasPlayableZeroCost = (state: GameState, player: Player): boolean => {\r\n  for (const c of state.hands[player]) {\r\n    const { cost } = getCardActionPointCost(state, player, c);\r\n    if (cost === 0 && isCardPlayableNow(state, player, c)) return true;\r\n  }\r\n  return false;\r\n};\r\n\r\n// Helper function to apply auras for a player (instant updates for Joschka Fischer + NGO synergy)\r\nfunction applyAurasForPlayer(state: GameState, player: Player, log?: (msg: string) => void) {\r\n  const board = state.board[player];\r\n  const hasNgo = board.innen.some(c =>\r\n    c.kind === 'spec' &&\r\n    (c as any).type === 'Öffentlichkeitskarte' &&\r\n    (c as any).tag === 'NGO' &&\r\n    !(c as any).deactivated\r\n  );\r\n\r\n  const newAussen = board.aussen.map(card => {\r\n    if (card.kind !== 'pol') return card;\r\n    const pol: any = { ...card };\r\n    if (pol.baseInfluence == null) pol.baseInfluence = pol.influence;\r\n    const prev = pol.influence as number;\r\n\r\n    let bonus = 0;\r\n    if (!pol.deactivated && pol.name === 'Joschka Fischer' && pol.effect === 'ngo_boost' && hasNgo) {\r\n      bonus += 1;\r\n    }\r\n    pol.influence = (pol.baseInfluence as number) + bonus;\r\n    if (log && pol.influence > prev) log(`PASSIV: ${pol.name} +${pol.influence - prev} I (jetzt ${pol.influence}).`);\r\n    return pol;\r\n  });\r\n\r\n  state.board = {\r\n    ...state.board,\r\n    [player]: { ...state.board[player], aussen: newAussen },\r\n  } as any;\r\n}\r\n\r\n\r\n\r\n// Helper function to check if round should end\r\nfunction checkRoundEnd(gameState: GameState): boolean {\r\n  // Round ends if both players have passed\r\n  const result = gameState.passed[1] && gameState.passed[2];\r\n  logger.dbg(`checkRoundEnd P1=${gameState.passed[1]} P2=${gameState.passed[2]} result=${result}`);\r\n  return result;\r\n}\r\n\r\n// Helper function to draw cards from deck\r\nfunction drawCardsFromDeck(gameState: GameState, player: Player, count: number): Card[] {\r\n  const deck = [...gameState.decks[player]];\r\n  const drawnCards = deck.splice(0, Math.min(count, deck.length));\r\n  return drawnCards;\r\n}\r\n\r\n// Helper function to really end a turn (extracted from nextTurn logic)\r\nfunction reallyEndTurn(gameState: GameState, log: (msg: string) => void): GameState {\r\n  const current = gameState.current;\r\n\r\n  // Flag zurücksetzen - Zug-Ende wird jetzt wirklich durchgeführt\r\n  gameState.isEndingTurn = false;\r\n\r\n  // ✅ Karte nachziehen am Ende eines Zugs (nur wenn NICHT \"pass\")\r\n  if (!gameState.passed[current]) {\r\n    const drawnCard = gameState.decks[current].shift();\r\n    if (drawnCard) {\r\n      gameState.hands[current].push(drawnCard);\r\n      log(`🔥 Zug-Ende: +1 Karte gezogen (${drawnCard.name})`);\r\n    }\r\n  } else {\r\n    log(`⏭️ P${current} hat gepasst – kein Nachziehen.`);\r\n  }\r\n\r\n  // Check if round should end\r\n  const shouldEndRound = checkRoundEnd(gameState);\r\n  if (shouldEndRound) {\r\n    log(`🏁 Runde ${gameState.round} wird beendet (Zug-Ende).`);\r\n    return resolveRound(gameState, log);\r\n  }\r\n\r\n  // Spielerwechsel + AP reset\r\n  const newCurrent: Player = current === 1 ? 2 : 1;\r\n  gameState.current = newCurrent;\r\n  gameState.actionPoints = { ...gameState.actionPoints, [newCurrent]: 2 };\r\n  gameState.passed = { ...gameState.passed, [newCurrent]: false };\r\n\r\n            // Apply new start-of-turn hooks\r\n          applyStartOfTurnFlags(gameState, newCurrent, log);\r\n\r\n        // 🔥 CLUSTER 3: Auren-Flags beim Zugstart neu berechnen\r\n        recomputeAuraFlags(gameState);\r\n\r\n  // Reset turn-bezogener Flag-Nutzungen (handled in applyStartOfTurnFlags)\r\n\r\n  log(`🔄 Zug-Ende: Spieler ${newCurrent} ist am Zug (2 AP verfügbar)`);\r\n\r\n  return gameState;\r\n}\r\n\r\n// Helper function to resolve round and start new one\r\nfunction resolveRound(gameState: GameState, log: (msg: string) => void): GameState {\r\n  // Calculate influence for both players\r\n  const p1Influence = sumGovernmentInfluenceWithAuras(gameState, 1);\r\n  const p2Influence = sumGovernmentInfluenceWithAuras(gameState, 2);\r\n\r\n  log(`📊 Rundenauswertung: P1 ${p1Influence} Einfluss vs P2 ${p2Influence} Einfluss`);\r\n\r\n  // Determine winner\r\n  let roundWinner: Player;\r\n  if (p1Influence > p2Influence) {\r\n    roundWinner = 1;\r\n    log(`🏆 Spieler 1 gewinnt die Runde! (${p1Influence} > ${p2Influence})`);\r\n  } else if (p2Influence > p1Influence) {\r\n    roundWinner = 2;\r\n    log(`🏆 Spieler 2 gewinnt die Runde! (${p2Influence} > ${p1Influence})`);\r\n  } else {\r\n    // Tie - current player wins\r\n    roundWinner = gameState.current;\r\n    log(`🤝 Unentschieden! Spieler ${roundWinner} gewinnt als aktiver Spieler.`);\r\n  }\r\n\r\n  // Collect all cards to move to discard\r\n  const cardsToDiscard: Card[] = [\r\n    ...gameState.board[1].innen,\r\n    ...gameState.board[1].aussen,\r\n    ...gameState.board[2].innen,\r\n    ...gameState.board[2].aussen,\r\n    ...(gameState.permanentSlots[1].government ? [gameState.permanentSlots[1].government] : []),\r\n    ...(gameState.permanentSlots[1].public ? [gameState.permanentSlots[1].public] : []),\r\n    ...(gameState.permanentSlots[2].government ? [gameState.permanentSlots[2].government] : []),\r\n    ...(gameState.permanentSlots[2].public ? [gameState.permanentSlots[2].public] : []),\r\n    ...gameState.board[1].sofort,\r\n    ...gameState.board[2].sofort\r\n  ];\r\n\r\n  // Draw 5 new cards for each player\r\n  const newP1Hand = drawCardsFromDeck(gameState, 1, 5);\r\n  const newP2Hand = drawCardsFromDeck(gameState, 2, 5);\r\n\r\n  // Calculate new rounds won\r\n  const newRoundsWon = {\r\n    ...gameState.roundsWon,\r\n    [roundWinner]: gameState.roundsWon[roundWinner] + 1\r\n  };\r\n\r\n  // Check if game should end (Best of 3: first to 2 wins)\r\n  const p1Wins = newRoundsWon[1];\r\n  const p2Wins = newRoundsWon[2];\r\n\r\n  if (p1Wins >= 2 || p2Wins >= 2) {\r\n    const gameWinner = p1Wins >= 2 ? 1 : 2;\r\n    log(`🏆🎉 SPIEL BEENDET! Spieler ${gameWinner} gewinnt das Match! (${p1Wins}-${p2Wins})`);\r\n    log(`🔥 Gesamtergebnis: Player ${gameWinner} ist der Sieger!`);\r\n\r\n    // Return final state with game winner\r\n    return {\r\n      ...gameState,\r\n      roundsWon: newRoundsWon,\r\n      gameWinner,\r\n      // Keep current board state for final display\r\n      passed: { 1: true, 2: true }, // Both passed to indicate game end\r\n    };\r\n  }\r\n\r\n  // Create new state for next round\r\n  const newState: GameState = {\r\n    ...gameState,\r\n    round: gameState.round + 1,\r\n    current: roundWinner, // Winner starts next round\r\n         passed: { 1: false, 2: false }, // Reset pass status\r\n     actionPoints: { 1: 2, 2: 2 }, // Reset AP\r\n     actionsUsed: { 1: 0, 2: 0 }, // Reset actions (kept for compatibility)\r\n     roundsWon: newRoundsWon,\r\n    effectFlags: {\r\n      1: createDefaultEffectFlags(),\r\n      2: createDefaultEffectFlags()\r\n    },\r\n    // Clear all board positions\r\n    board: emptyBoard(),\r\n    // Clear permanent slots\r\n    permanentSlots: {\r\n      1: { government: null, public: null, initiativePermanent: null },\r\n      2: { government: null, public: null, initiativePermanent: null }\r\n    },\r\n    // instantSlot wird nicht mehr verwendet - Sofort-Initiativen gehen in board[player].sofort\r\n    // New hands with 5 cards each\r\n    hands: {\r\n      1: newP1Hand,\r\n      2: newP2Hand\r\n    },\r\n    // Update decks (cards were removed during drawing)\r\n    decks: {\r\n      1: gameState.decks[1].slice(newP1Hand.length),\r\n      2: gameState.decks[2].slice(newP2Hand.length)\r\n    },\r\n    // Update discard pile\r\n    discard: [...gameState.discard, ...cardsToDiscard]\r\n  };\r\n\r\n  log(`🆕 Runde ${newState.round} startet! Spieler ${roundWinner} beginnt. (Rundenstand: P1 ${newState.roundsWon[1]} - P2 ${newState.roundsWon[2]})`);\r\n  log(`🃏 Beide Spieler erhalten 5 neue Handkarten.`);\r\n\r\n  return newState;\r\n}\r\n\r\nexport function useGameActions(\r\n  gameState: GameState,\r\n  setGameState: React.Dispatch<React.SetStateAction<GameState>>,\r\n  log: (msg: string) => void,\r\n  afterQueueResolved?: () => void\r\n) {\r\n  // Guard against duplicate concurrent playCard calls for the same card UID\r\n  const playingUidRef = useRef<Set<number>>(new Set());\r\n  const startMatchWithDecks = useCallback((p1DeckEntries: BuilderEntry[], p2DeckEntries: BuilderEntry[]) => {\r\n    const p1Cards = buildDeckFromEntries(p1DeckEntries);\r\n    const p2Cards = buildDeckFromEntries(p2DeckEntries);\r\n\r\n        // Debug: Log deck composition with detailed tag analysis\r\n    const p1NgoCarten = p1Cards.filter(c => (c as any).tag === 'NGO');\r\n    const p1PlatformCards = p1Cards.filter(c => (c as any).tag === 'Plattform');\r\n    const p1JoschaCards = p1Cards.filter(c => (c as any).effect === 'ngo_boost');\r\n    const p1PublicCards = p1Cards.filter(c => c.kind === 'spec' && (c as any).type === 'Öffentlichkeitskarte');\r\n\r\n    log(`🔍 DECK DEBUG P1: ${p1Cards.length} Karten total`);\r\n    log(`🧪 P1 Public Cards: ${p1PublicCards.map(c => `${c.name}${(c as any).tag ? `[${(c as any).tag}]` : ''}`).join(', ')}`);\r\n    log(`🌱 P1 NGO-Karten: ${p1NgoCarten.length > 0 ? p1NgoCarten.map(c => c.name).join(', ') : 'Keine'}`);\r\n    log(`💻 P1 Plattform-Karten: ${p1PlatformCards.length > 0 ? p1PlatformCards.map(c => c.name).join(', ') : 'Keine'}`);\r\n    log(`🎯 JOSCHKA FISCHER: ${p1JoschaCards.length > 0 ? '✅ IM DECK' : '❌ NICHT IM DECK'}`);\r\n\r\n    const d1 = [...p1Cards];\r\n    const d2 = [...p2Cards];\r\n    const h1 = d1.splice(0, Math.min(5, d1.length));\r\n    const h2 = d2.splice(0, Math.min(5, d2.length));\r\n\r\n    setGameState({\r\n      ...gameState,\r\n      round: 1,\r\n      current: 1,\r\n      passed: { 1: false, 2: false },\r\n      decks: { 1: d1, 2: d2 },\r\n      hands: { 1: h1, 2: h2 },\r\n      board: { 1: { innen: [], aussen: [], sofort: [] }, 2: { innen: [], aussen: [], sofort: [] } },\r\n      traps: { 1: [], 2: [] },\r\n      permanentSlots: {\r\n        1: { government: null, public: null, initiativePermanent: null },\r\n        2: { government: null, public: null, initiativePermanent: null },\r\n      },\r\n      // instantSlot wird nicht mehr verwendet - Sofort-Initiativen gehen in board[player].sofort\r\n      discard: [],\r\n      shields: new Set(), // Set<UID>\r\n      effectFlags: {\r\n        1: createDefaultEffectFlags(),\r\n        2: createDefaultEffectFlags()\r\n      },\r\n      actionsUsed: { 1: 0, 2: 0 },\r\n      log: [\r\n        `Match gestartet. P1 und P2 erhalten je ${h1.length}/${h2.length} Startkarten.`,\r\n        `🔍 DECK DEBUG P1: ${p1Cards.length} Karten total`,\r\n        `🧪 P1 Public Cards: ${p1PublicCards.map(c => `${c.name}${(c as any).tag ? `[${(c as any).tag}]` : ''}`).join(', ')}`,\r\n        `🌱 P1 NGO-Karten: ${p1NgoCarten.length > 0 ? p1NgoCarten.map(c => c.name).join(', ') : 'Keine'}`,\r\n        `💻 P1 Plattform-Karten: ${p1PlatformCards.length > 0 ? p1PlatformCards.map(c => c.name).join(', ') : 'Keine'}`,\r\n        `🎯 JOSCHKA FISCHER: ${p1JoschaCards.length > 0 ? '✅ IM DECK' : '❌ NICHT IM DECK'}`,\r\n        `📋 INITIAL BOARD P1: Regierung=[] | Öffentlichkeit=[]`,\r\n        `📋 INITIAL BOARD P2: Regierung=[] | Öffentlichkeit=[]`,\r\n        `🏠 PERMANENT SLOTS: Alle leer`\r\n      ],\r\n      activeRefresh: { 1: 0, 2: 0 },\r\n    });\r\n  }, [gameState, setGameState, log]);\r\n\r\n  const startMatchVsAI = useCallback((p1DeckEntries: BuilderEntry[], presetKey: keyof typeof PRESET_DECKS = 'AUTORITAERER_REALIST') => {\r\n    const p2DeckEntries = PRESET_DECKS[presetKey] as BuilderEntry[];\r\n    startMatchWithDecks(p1DeckEntries, p2DeckEntries);\r\n  }, [startMatchWithDecks]);\r\n\r\n  const playCard = useCallback((player: Player, handIndex: number, lane?: 'innen' | 'aussen') => {\r\n    logger.info(`playCard START P${player} idx=${handIndex}`);\r\n    setGameState(prev => {\r\n      // Test-only baseline fix – ensures AP=5 at game start inside test runner\r\n      ensureTestBaselineAP(prev);\r\n\r\n      // Validate input parameters\r\n      if (prev.current !== player) {\r\n        log(`❌ ERROR: Not player turn - Current: ${prev.current}, Attempted: ${player}`);\r\n        logger.warn(`playCard abort: wrong turn`);\r\n        return prev;\r\n      }\r\n\r\n      const hand = prev.hands[player];\r\n      if (handIndex < 0 || handIndex >= hand.length) {\r\n        log(`❌ ERROR: Invalid hand index - Index: ${handIndex}, Hand length: ${hand.length}`);\r\n        return prev;\r\n      }\r\n\r\n      // Debug: Log current hand contents with detailed tag info\r\n      log(`🔍 HAND DEBUG P${player}: ${hand.map((c, i) => `${i}:${c.name}${(c as any).tag ? `[${(c as any).tag}]` : ''}`).join(', ')}`);\r\n      const ngoCards = hand.filter(c => (c as any).tag === 'NGO');\r\n      const platformCards = hand.filter(c => (c as any).tag === 'Plattform');\r\n      if (ngoCards.length > 0) {\r\n        log(`🌱 NGO-Karten in Hand P${player}: ${ngoCards.map(c => c.name).join(', ')}`);\r\n      }\r\n      if (platformCards.length > 0) {\r\n        log(`💻 Plattform-Karten in Hand P${player}: ${platformCards.map(c => c.name).join(', ')}`);\r\n      }\r\n\r\n      const selectedCard = hand[handIndex];\r\n      if (!canPlayCard(prev, player, selectedCard)) {\r\n        log('🚫 Kann Karte nicht spielen (keine AP verfügbar).');\r\n        return prev;\r\n      }\r\n\r\n      const { cost } = getNetApCost(prev, player, selectedCard);\r\n      const prevAp = prev.actionPoints[player];\r\n\r\n      const newState = { ...prev };\r\n\r\n      // Simplified AP system: All cards cost exactly 1 AP\r\n      newState.actionPoints[player] = Math.max(0, newState.actionPoints[player] - cost);\r\n      log(`💳 Kosten verbucht: AP ${prevAp}→${newState.actionPoints[player]}`);\r\n\r\n      // Flags KONSUMIEREN (einheitlich, NUR HIER!)\r\n      ensureFlags(newState, player);\r\n      const ef = newState.effectFlags[player];\r\n\r\n      // Simplified AP system: No refunds or discounts\r\n      // All cards cost exactly 1 AP\r\n\r\n      // Remove card from hand\r\n      const newHand = [...newState.hands[player]];\r\n      const [playedCard] = newHand.splice(handIndex, 1);\r\n      newState.hands = { ...newState.hands, [player]: newHand };\r\n\r\n      // Prevent double-playing the same UID concurrently\r\n      if ((playedCard as any).uid) {\r\n        if (playingUidRef.current.has((playedCard as any).uid)) {\r\n          log(`⚠️ Duplicate play prevented for UID ${(playedCard as any).uid}`);\r\n          return prev;\r\n        }\r\n        playingUidRef.current.add((playedCard as any).uid);\r\n      }\r\n\r\n      // 🔧 CLUSTER 3 DEBUG: Zeige jede gespielte Karte\r\n      log(`🔧 CLUSTER 3 GLOBAL DEBUG: P${player} spielt ${(playedCard as any).name} (${playedCard.kind}) - Type: ${(playedCard as any).type || 'KEIN TYPE'}`);\r\n\r\n      // 🔧 CLUSTER 3 DEBUG: Zeige aktuelles Board\r\n      const currentBoard = newState.board[player];\r\n      const publicCardsOnBoard = currentBoard.innen.filter(card => card.kind === 'spec');\r\n      log(`🔧 CLUSTER 3 GLOBAL DEBUG: Öffentlichkeitskarten auf dem Feld: ${publicCardsOnBoard.map(c => (c as any).name).join(', ')}`);\r\n\r\n      // Jennifer Doudna check removed - not needed for current game logic\r\n\r\n      // Handle different card types\r\n      if (playedCard.kind === 'pol') {\r\n        const polCard = playedCard as any;\r\n        const targetLane = lane || (polCard.tag === 'Staatsoberhaupt' || polCard.tag === 'Regierungschef' || polCard.tag === 'Diplomat' ? 'aussen' : 'innen');\r\n\r\n        if (newState.board[player][targetLane].length >= 5) {\r\n          log(`❌ ERROR: Lane full - Lane: ${targetLane}, Current: ${newState.board[player][targetLane].length}/5`);\r\n          return prev;\r\n        }\r\n\r\n        // Add to board (immutable clone to avoid accidental double references)\r\n        const laneArray = [...newState.board[player][targetLane], playedCard];\r\n        const playerBoardCloned = { ...newState.board[player], [targetLane]: laneArray } as any;\r\n        newState.board = { ...newState.board, [player]: playerBoardCloned } as any;\r\n        log(`🃏 Player ${player}: ${playedCard.name} gespielt in ${targetLane === 'aussen' ? 'Regierung' : 'Öffentlichkeit'}`);\r\n\r\n        // 3) Nachdem die Karte gelegt wurde: gegnerische Traps prüfen\r\n        applyTrapsOnCardPlayed(\r\n          newState,\r\n          player,\r\n          playedCard,\r\n          (event) => {\r\n            if (!newState._effectQueue) newState._effectQueue = [];\r\n            newState._effectQueue.push(event);\r\n          },\r\n          log\r\n        );\r\n\r\n        // 👉 Erst JETZT Auren anwenden (damit +2 Basis erhalten bleibt)\r\n        applyAurasForPlayer(newState, player, log);\r\n\r\n        // 6) Karteneffekte enqueuen + Queue auflösen\r\n        triggerCardEffects(newState, player, playedCard);\r\n        // Migration Helper verwenden\r\n        migrateLegacyQueue(newState);\r\n        // Nur noch _effectQueue verwenden\r\n        if (newState._effectQueue && newState._effectQueue.length > 0) {\r\n          resolveQueue(newState, newState._effectQueue);\r\n          newState._effectQueue = [];\r\n          // Nach Queue-Auflösung: Hand-Arrays immutabel neu zuweisen\r\n          afterQueueResolved?.();\r\n        }\r\n\r\n        // Release playing UID after queue resolved\r\n        if ((playedCard as any).uid) playingUidRef.current.delete((playedCard as any).uid);\r\n\r\n        // Check for trap triggers\r\n        applyTrapsOnCardPlayed(\r\n          newState,\r\n          player,\r\n          playedCard,\r\n          (e) => (newState._effectQueue ??= []).push(e),\r\n          (m) => (newState._effectQueue ??= []).push({ type: 'LOG', msg: m })\r\n        );\r\n\r\n        // 🔥 ROMAN ABRAMOVICH EFFEKT: Wenn Regierungskarte mit Einfluss ≤5 gespielt wird\r\n        if (playedCard.kind === 'pol' && (playedCard as any).influence <= 5) {\r\n          const opponent = player === 1 ? 2 : 1;\r\n          const opponentBoard = newState.board[opponent];\r\n          const romanAbramovich = opponentBoard.innen.find(card =>\r\n            card.kind === 'spec' && (card as any).name === 'Roman Abramovich'\r\n          );\r\n\r\n          if (romanAbramovich) {\r\n            // Ziehe eine Karte für den Gegner\r\n            if (newState.decks[opponent].length > 0) {\r\n              const drawnCard = newState.decks[opponent].shift();\r\n              if (drawnCard) {\r\n                newState.hands[opponent].push(drawnCard);\r\n                log(`🔥 ROMAN ABRAMOVICH EFFEKT: P${opponent} zieht 1 Karte (${drawnCard.name}) - Regierungskarte mit Einfluss ≤5 gespielt`);\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        // 🔍 BOARD DEBUG: Zeige aktuelles Board nach dem Spielen\r\n        const currentBoard = newState.board[player];\r\n        const regierungKarten = currentBoard.aussen.map(c => `${c.name}[${c.kind === 'pol' ? (c as any).influence + 'I' : 'S'}]`);\r\n        const öffentlichkeitKarten = currentBoard.innen.map(c => `${c.name}[${c.kind === 'spec' ? (c as any).tag || 'S' : 'P'}]`);\r\n        log(`📋 P${player} BOARD: Regierung=[${regierungKarten.join(', ')}] | Öffentlichkeit=[${öffentlichkeitKarten.join(', ')}]`);\r\n\r\n                // 🔥 JOSCHKA FISCHER NGO-EFFEKT: Jetzt als kontinuierlicher Aura-Effekt in sumRowWithAuras implementiert\r\n        log(`🔍 DEBUG: Karte gespielt - Name: ${playedCard.name}, Tag: ${(playedCard as any).tag || 'Kein Tag'}, Lane: ${targetLane}, Kind: ${playedCard.kind}`);\r\n\r\n        if ((playedCard as any).tag === 'NGO') {\r\n          log(`🔍 NGO-Karte gespielt: ${playedCard.name} [NGO] - Kontinuierliche Aura-Effekte werden bei Rundenauswertung berechnet`);\r\n\r\n          // 🎯 SOFORTIGE SYNERGIE-PRÜFUNG: Joschka Fischer + NGO\r\n          const joschaFischer = currentBoard.aussen.find(card =>\r\n            card.kind === 'pol' && (card as any).effect === 'ngo_boost'\r\n          );\r\n\r\n          if (joschaFischer) {\r\n            log(`🔥🔥🔥 SYNERGIE AKTIVIERT! 🔥🔥🔥 Joschka Fischer + ${playedCard.name}[NGO] → +1 Einfluss bei Rundenauswertung`);\r\n          }\r\n        }\r\n\r\n      } else if (playedCard.kind === 'spec') {\r\n        const specCard = playedCard as any;\r\n        const typeStr = String(specCard.type || '').toLowerCase();\r\n        const isInitiative = /initiative/.test(typeStr); // matcht \"Initiative\", \"Sofort-Initiative\", etc.\r\n\r\n                  // 1) Falls es eine \"Systemrelevant\" ist (sofortiger Buff auf letzte eigene Regierungskarte)\r\n        if (playedCard.kind === 'spec' && (playedCard as any).type?.toLowerCase().includes('systemrelevant')) {\r\n          const ownBoard = newState.board[player];\r\n          const candidates = [...ownBoard.aussen, ...ownBoard.innen].filter(c => c.kind === 'pol') as PoliticianCard[];\r\n          const target = candidates[candidates.length - 1]; // letzte eigene Regierungskarte\r\n          if (target) {\r\n            (target as any).protected = true;\r\n            log(`🛡️ ${target.name} erhält einmaligen Schutz.`);\r\n          } else {\r\n            log('🛈 Systemrelevant: Keine eigene Regierungskarte im Spiel – Effekt verpufft.');\r\n          }\r\n          // danach die Spezialkarte normal entsorgen\r\n          newState.discard.push(playedCard);\r\n          return newState;\r\n        }\r\n\r\n        // 1) Dauerhaft-Initiative (Ongoing)\r\n        if (typeStr.includes('dauerhaft')) {\r\n          // Slot-Mapping: Dauerhaft-Initiativen → initiativePermanent, nicht government\r\n          const slotType = 'initiativePermanent';\r\n          if (!newState.permanentSlots[player][slotType]) {\r\n            newState.permanentSlots[player][slotType] = playedCard;\r\n            log(`P${player} spielt ${playedCard.name} als Dauerhafte Initiative (Slot: ${slotType})`);\r\n          } else {\r\n            log(`⚠️ WARN: Slot occupied - Slot ${slotType} already has ${newState.permanentSlots[player][slotType]?.name}`);\r\n          }\r\n\r\n          // 6) Karteneffekte enqueuen + Queue auflösen\r\n          triggerCardEffects(newState, player, playedCard);\r\n          // Migration Helper verwenden\r\n          migrateLegacyQueue(newState);\r\n          // Nur noch _effectQueue verwenden\r\n          if (newState._effectQueue && newState._effectQueue.length > 0) {\r\n            resolveQueue(newState, newState._effectQueue);\r\n            newState._effectQueue = [];\r\n            // Nach Queue-Auflösung: Hand-Arrays immutabel neu zuweisen\r\n            afterQueueResolved?.();\r\n          }\r\n\r\n          // Check for trap triggers\r\n          applyTrapsOnCardPlayed(\r\n            newState,\r\n            player,\r\n            playedCard,\r\n            (e) => (newState._effectQueue ??= []).push(e),\r\n            (m) => (newState._effectQueue ??= []).push({ type: 'LOG', msg: m })\r\n          );\r\n\r\n          return newState;\r\n        }\r\n\r\n        // 2) Sofort-/Sofort-Initiativen (Instant)\r\n        if (isInitiative) {\r\n          if (!specCard.effectKey) {\r\n            log(`❌ Initiative ohne effectKey: ${specCard.name}`);\r\n          } else {\r\n            log(`🧩 INIT: ${specCard.name} [${String(specCard.effectKey)}] gespielt`);\r\n          }\r\n\r\n          // 🔧 NEU: Sofort-Initiativen werden in das sofort Array gelegt statt sofort aktiviert\r\n          if (typeStr.includes('sofort')) {\r\n            // Prüfe ob bereits eine Sofort-Initiative im Slot liegt\r\n            if (newState.board[player].sofort.length > 0) {\r\n              log(`❌ ERROR: Sofort-Initiative-Slot bereits besetzt - ${newState.board[player].sofort[0]?.name} muss erst aktiviert werden`);\r\n              // Karte zurück in die Hand\r\n              newState.hands[player] = [...newState.hands[player], playedCard];\r\n              // AP zurückgeben\r\n              newState.actionPoints[player] += cost;\r\n              // AP zurückgegeben, keine Aktion rückgängig zu machen\r\n              return newState;\r\n            }\r\n\r\n            // Sofort-Initiative in das sofort Array legen\r\n            newState.board[player].sofort = [playedCard];\r\n            log(`🎯 P${player} legt ${playedCard.name} in Sofort-Initiative-Slot (kann später aktiviert werden)`);\r\n\r\n            // Sofort-Initiativen: auf Board.sofort legen (nicht direkt entsorgen)\r\n            if (!newState._effectQueue) newState._effectQueue = [];\r\n            newState._effectQueue.push({ type: 'LOG', msg: `🔔 Sofort-Initiative bereit: ${playedCard.name} (zum Aktivieren anklicken oder Taste 'A')` });\r\n            return newState;\r\n          }\r\n\r\n          // Dauerhaft-Initiativen werden weiterhin sofort aktiviert\r\n          // Initiative in den Ablagestapel\r\n          newState.discard = [...newState.discard, playedCard];\r\n          log(`P${player} spielt Initiative: ${playedCard.name}`);\r\n\r\n                     // 6) Karteneffekte enqueuen + Queue auflösen\r\n           triggerCardEffects(newState, player, playedCard);\r\n           // Migration Helper verwenden\r\n           migrateLegacyQueue(newState);\r\n           // Nur noch _effectQueue verwenden\r\n         if (newState._effectQueue && newState._effectQueue.length > 0) {\r\n           resolveQueue(newState, newState._effectQueue);\r\n           newState._effectQueue = [];\r\n           // Nach Queue-Auflösung: Hand-Arrays immutabel neu zuweisen\r\n           afterQueueResolved?.();\r\n         }\r\n\r\n           // Check for trap triggers\r\n           applyTrapsOnCardPlayed(\r\n             newState,\r\n             player,\r\n             playedCard,\r\n             (e) => (newState._effectQueue ??= []).push(e),\r\n             (m) => (newState._effectQueue ??= []).push({ type: 'LOG', msg: m })\r\n           );\r\n\r\n           // 🔥 CLUSTER 3: Auren-Flags neu berechnen (nach Kartenspielen)\r\n          recomputeAuraFlags(newState);\r\n\r\n          // 🔥 CLUSTER 3: Ai Weiwei Bonus wird bei Aktivierung angewendet (nicht beim Spielen)\r\n\r\n          // 🔥 PASSIVE EFFEKTE NACH INITIATIVE: Mark Zuckerberg & Sam Altman\r\n          // Diese Effekte werden jetzt über INITIATIVE_ACTIVATED Event + Board-Check gehandhabt\r\n          // Keine direkten Flag-Mutationen mehr - alles über Events\r\n\r\n\r\n          return newState;\r\n        }\r\n\r\n        // 3) Öffentlichkeit (Public)\r\n        if (\r\n          typeStr === 'öffentlichkeitskarte' ||\r\n          typeStr === 'oeffentlichkeitskarte' ||\r\n          typeStr === 'öffentlichkeit' ||\r\n          typeStr === 'public'\r\n        ) {\r\n          if (newState.board[player].innen.length < 5) {\r\n            const innenArray = [...newState.board[player].innen, playedCard];\r\n            const playerBoardCloned = { ...newState.board[player], innen: innenArray } as any;\r\n            newState.board = { ...newState.board, [player]: playerBoardCloned } as any;\r\n            log(`P${player} spielt ${playedCard.name} in Öffentlichkeit`);\r\n\r\n            // Sofort Auren prüfen (z.B. JF +1, wenn JF schon liegt)\r\n            applyAurasForPlayer(newState, player, log);\r\n\r\n                         // 6) Karteneffekte enqueuen + Queue auflösen\r\n             triggerCardEffects(newState, player, playedCard);\r\n             // Migration Helper verwenden\r\n             migrateLegacyQueue(newState);\r\n         if (newState._effectQueue && newState._effectQueue.length > 0) {\r\n           resolveQueue(newState, newState._effectQueue);\r\n           newState._effectQueue = [];\r\n           // Nach Queue-Auflösung: Hand-Arrays immutabel neu zuweisen\r\n           afterQueueResolved?.();\r\n         }\r\n\r\n             // Check for trap triggers\r\n             applyTrapsOnCardPlayed(\r\n               newState,\r\n               player,\r\n               playedCard,\r\n               (e) => (newState._effectQueue ??= []).push(e),\r\n               (m) => (newState._effectQueue ??= []).push({ type: 'LOG', msg: m })\r\n             );\r\n\r\n\r\n\r\n            // 🔥 PUBLIC CARD EFFECTS - Passive effects when played\r\n\r\n            // Helper function to draw a card for the player\r\n            const drawCardForPlayer = (cardName: string) => {\r\n              if (newState.decks[player].length > 0) {\r\n                const drawnCard = newState.decks[player].shift();\r\n                if (drawnCard) {\r\n                  newState.hands[player].push(drawnCard);\r\n                  log(`🔥 ${cardName.toUpperCase()} EFFEKT: +1 Karte gezogen (${drawnCard.name})`);\r\n                  return true;\r\n                }\r\n              }\r\n              return false;\r\n            };\r\n\r\n            if (specCard.name === 'Elon Musk') {\r\n              // Effect: \"Ziehe 1 Karte. Deine erste Initiative pro Runde kostet 1 Aktionspunkt weniger.\"\r\n              drawCardForPlayer('Elon Musk');\r\n              // 🔥 QUEUE-SYSTEM: Erste Initiative pro Runde → Refund wird über triggerCardEffects gehandhabt\r\n\r\n            } else if (specCard.name === 'Bill Gates') {\r\n              // Effect: \"Ziehe 1 Karte. Deine nächste Initiative kostet 1 Aktionspunkt weniger.\"\r\n              drawCardForPlayer('Bill Gates');\r\n              // 🔥 QUEUE-SYSTEM: Nächste Initiative → Refund wird über triggerCardEffects gehandhabt\r\n\r\n            } else if (specCard.name === 'Jeff Bezos') {\r\n              // Effect: \"Ziehe 1 Karte beim Ausspielen. Wenn eine Plattform liegt: +1 Aktionspunkt.\"\r\n              drawCardForPlayer('Jeff Bezos');\r\n              const hasPlatform = newState.board[player].innen.some(c =>\r\n                c.kind === 'spec' && (c as any).tag === 'Plattform'\r\n              );\r\n              if (hasPlatform) {\r\n                newState.actionPoints[player] += 1;\r\n                log(`🔥 JEFF BEZOS: +1 AP durch Plattform-Synergie! (${newState.actionPoints[player] - 1} → ${newState.actionPoints[player]})`);\r\n              }\r\n\r\n            } else if (specCard.name === 'Warren Buffett') {\r\n              // Effect: \"Ziehe 1 Karte. Bei einer Wirtschafts-Initiative: +1 Effekt.\"\r\n              drawCardForPlayer('Warren Buffett');\r\n              // TODO: Implement \"Wirtschafts-Initiative +1 Effect\" logic\r\n              log(`📊 WARREN BUFFETT: Bei Wirtschafts-Initiativen +1 Effekt! (TODO: Implementierung)`);\r\n\r\n            } else if (specCard.name === 'Gautam Adani') {\r\n              // Effect: \"Ziehe 1 Karte. Bei einer Infrastruktur-Initiative: +1 Effekt.\"\r\n              drawCardForPlayer('Gautam Adani');\r\n              // TODO: Implement \"Infrastruktur-Initiative +1 Effect\" logic\r\n              log(`📊 GAUTAM ADANI: Bei Infrastruktur-Initiativen +1 Effekt! (TODO: Implementierung)`);\r\n\r\n            } else if (specCard.name === 'Zhang Yiming') {\r\n              // Effect: \"Ziehe 1 Karte. Bei Medien auf dem Feld: -1 Aktionspunkt auf deine nächste Initiative.\"\r\n              drawCardForPlayer('Zhang Yiming');\r\n              const hasMedia = newState.board[player].innen.some(c =>\r\n                c.kind === 'spec' && (c as any).tag === 'Medien'\r\n              );\r\n              if (hasMedia) {\r\n                // TODO: Implement \"nächste Initiative -1 AP\" logic\r\n                log(`🔥 ZHANG YIMING: Nächste Initiative kostet 1 AP weniger durch Medien-Synergie! (TODO: Implementierung)`);\r\n              }\r\n\r\n            } else if (specCard.name === 'George Soros') {\r\n              // Effect: \"+1 Aktionspunkt wenn der Gegner eine autoritäre Regierungskarte hat.\"\r\n              const opponent = player === 1 ? 2 : 1;\r\n              const hasAuthoritarianCard = newState.board[opponent].aussen.some(card => {\r\n                const polCard = card as any;\r\n                return polCard.tag === 'Staatsoberhaupt' && polCard.influence >= 8; // High influence leaders\r\n              });\r\n\r\n              if (hasAuthoritarianCard) {\r\n                newState.actionPoints[player] += 1;\r\n                log(`🔥 GEORGE SOROS EFFEKT: +1 AP durch autoritäre Regierung des Gegners!`);\r\n                log(`📊 SOROS: Aktionspunkte ${newState.actionPoints[player] - 1} → ${newState.actionPoints[player]}`);\r\n              } else {\r\n                log(`💭 George Soros: Keine autoritären Karten beim Gegner - Effekt nicht ausgelöst`);\r\n              }\r\n            }\r\n\r\n            // 🔗 NGO-Synergie: Wenn eine NGO gelegt wird und Joschka Fischer liegt, erhält P${player} +1 Einfluss (Rundenauswertung)\r\n            if ((specCard as any).tag === 'NGO') {\r\n              const hasJoschka = newState.board[player].aussen.some(c => c.kind === 'pol' && (c as any).name === 'Joschka Fischer' && !(c as any).deactivated);\r\n              if (hasJoschka) {\r\n                log(`🔥🔥🔥 SYNERGIE AKTIVIERT! 🔥🔥🔥 Joschka Fischer + ${playedCard.name}[NGO] → +1 Einfluss bei Rundenauswertung`);\r\n              }\r\n            }\r\n          } else {\r\n            log(`❌ ERROR: Lane full - Öffentlichkeit ist voll (5/5)`);\r\n          }\r\n\r\n          // Simplified AP system: No refunds\r\n          return newState;\r\n        }\r\n\r\n                  // 4) Default: Traps/Interventions\r\n                  // Falls Trap-Karte gelegt wird\r\n          if (playedCard.kind === 'spec' && (playedCard as any).type?.toLowerCase().includes('trap')) {\r\n            registerTrap(newState, player, playedCard.key || playedCard.name.toLowerCase().replace(/[- ]/g, '_'));\r\n            // NICHT sofort checken – sie wartet auf den Gegner\r\n            return newState;\r\n          }\r\n\r\n        newState.traps[player] = [...newState.traps[player], playedCard];\r\n        log(`P${player} spielt ${playedCard.name} als ${specCard.type}`);\r\n\r\n        // 6) Karteneffekte enqueuen + Queue auflösen\r\n        triggerCardEffects(newState, player, playedCard);\r\n        // Migration Helper verwenden\r\n        migrateLegacyQueue(newState);\r\n        // Nur noch _effectQueue verwenden\r\n        if (newState._effectQueue && newState._effectQueue.length > 0) {\r\n          resolveQueue(newState, newState._effectQueue);\r\n          newState._effectQueue = [];\r\n          // Nach Queue-Auflösung: Hand-Arrays immutabel neu zuweisen\r\n          afterQueueResolved?.();\r\n        }\r\n\r\n        // Check for trap triggers\r\n        applyTrapsOnCardPlayed(\r\n          newState,\r\n          player,\r\n          playedCard,\r\n          (e) => (newState._effectQueue ??= []).push(e),\r\n          (m) => (newState._effectQueue ??= []).push({ type: 'LOG', msg: m })\r\n        );\r\n\r\n        // Simplified AP system: No refunds\r\n        return newState;\r\n      }\r\n\r\n      // 6) Karteneffekte enqueuen + Queue auflösen (fallback für unbekannte Kartentypen)\r\n      triggerCardEffects(newState, player, selectedCard);\r\n      // Migration Helper verwenden\r\n      migrateLegacyQueue(newState);\r\n      // Nur noch _effectQueue verwenden\r\n        if (newState._effectQueue && newState._effectQueue.length > 0) {\r\n          resolveQueue(newState, newState._effectQueue);\r\n          newState._effectQueue = [];\r\n          // Nach Queue-Auflösung: Hand-Arrays immutabel neu zuweisen\r\n          afterQueueResolved?.();\r\n        }\r\n\r\n      // Check for trap triggers\r\n      applyTrapsOnCardPlayed(\r\n        newState,\r\n        player,\r\n        selectedCard,\r\n        (e) => (newState._effectQueue ??= []).push(e),\r\n        (m) => (newState._effectQueue ??= []).push({ type: 'LOG', msg: m })\r\n      );\r\n\r\n      // Simplified AP system: No refunds\r\n\r\n      // Kein Aktionenlimit mehr → automatischer Turnwechsel entfällt\r\n\r\n\r\n      return newState;\r\n    });\r\n  }, [setGameState, log]);\r\n\r\n  const activateInstantInitiative = useCallback((player: Player) => {\r\n    logger.info(`activateInstantInitiative START P${player}`);\r\n    setGameState(prev => {\r\n      if (prev.current !== player) {\r\n        log(`❌ ERROR: Not player turn - Current: ${prev.current}, Attempted: ${player}`);\r\n        return prev;\r\n      }\r\n\r\n      const instantCard = prev.board[player].sofort[0];\r\n      if (!instantCard) {\r\n        log(`❌ ERROR: No Sofort-Initiative in slot for player ${player}`);\r\n        return prev;\r\n      }\r\n\r\n      const newState = { ...prev };\r\n\r\n      // 1) Normale Karten-Effekte der Sofort-Karte feuern\r\n      triggerCardEffects(newState, player, instantCard);\r\n\r\n      // Check for trap triggers\r\n      applyTrapsOnCardPlayed(\r\n        newState,\r\n        player,\r\n        instantCard,\r\n        (e) => (newState._effectQueue ??= []).push(e),\r\n        (m) => (newState._effectQueue ??= []).push({ type: 'LOG', msg: m })\r\n      );\r\n\r\n      // 2) Queue auflösen (BEVOR die Karte entfernt wird)\r\n      if (newState._effectQueue && newState._effectQueue.length > 0) {\r\n        resolveQueue(newState, [...newState._effectQueue]);\r\n        newState._effectQueue = [];\r\n        // Nach Queue-Auflösung: Hand-Arrays immutabel neu zuweisen\r\n        afterQueueResolved?.();\r\n      }\r\n\r\n      // 3) Karte NACH Queue-Auflösung in den Ablagestapel\r\n      const [played] = newState.board[player].sofort.splice(0, 1);\r\n      newState.discard.push(played);\r\n\r\n      return newState;\r\n    });\r\n  }, [setGameState, log]);\r\n\r\n  const endTurn = useCallback((reason: 'button_end_turn' | 'auto' = 'button_end_turn') => {\r\n    logger.info(`endTurn START reason=${reason}`);\r\n    setGameState((prev): GameState => {\r\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n      const current = prev.current;\r\n\r\n      // 1) Schon im Abschluss? -> Nichts tun (Idempotenz)\r\n      if (prev.isEndingTurn) {\r\n        log('🔁 Zugabschluss läuft bereits – warte auf Queue.');\r\n        return prev;\r\n      }\r\n\r\n      const newState = { ...prev, isEndingTurn: true };\r\n\r\n      // 2) Hängen noch Effekte in der Queue? -> Auflösen lassen\r\n      if (newState._effectQueue && newState._effectQueue.length > 0) {\r\n        log('⏳ Effekte werden noch aufgelöst – Zugwechsel folgt automatisch.');\r\n        resolveQueue(newState, [...newState._effectQueue]);\r\n        newState._effectQueue = [];\r\n        // Nach Queue-Auflösung: Wenn Flag noch gesetzt, Zug beenden\r\n        if (newState.isEndingTurn) {\r\n          return reallyEndTurn(newState, log);\r\n        }\r\n        return newState;\r\n      }\r\n\r\n      // 3) Keine Effekte mehr -> sofort beenden\r\n      return reallyEndTurn(newState, log);\r\n    });\r\n  }, [setGameState, log]);\r\n\r\n  // Legacy: nextTurn als Alias für endTurn für Kompatibilität\r\n  const nextTurn = useCallback(() => {\r\n    logger.info('nextTurn alias called');\r\n    endTurn('auto');\r\n  }, [endTurn]);\r\n\r\n    const passTurn = useCallback((player: Player) => {\r\n    logger.info(`passTurn START P${player}`);\r\n\r\n    setGameState(prev => {\r\n      logger.dbg(`passTurn setState current=${prev.current} player=${player}`);\r\n\r\n      if (prev.current !== player) {\r\n        logger.dbg(`passTurn wrong turn current=${prev.current} attempted=${player}`);\r\n        return prev;\r\n      }\r\n\r\n      const newState = { ...prev, passed: { ...prev.passed, [player]: true } };\r\n      logger.dbg(`Pass status updated P1=${newState.passed[1]} P2=${newState.passed[2]}`);\r\n      log(`🚫 Spieler ${player} passt.`);\r\n\r\n      // ❗ Kein Nachziehen bei Pass:\r\n      // Der passierende Spieler kommt in dieser Runde nicht mehr dran.\r\n      // Die nächste Runde startet ohnehin mit 5 neuen Handkarten.\r\n\r\n      // Check if round should end (both players passed)\r\n      const shouldEndRound = checkRoundEnd(newState);\r\n      logger.dbg(`Should end round? ${shouldEndRound}`);\r\n\r\n      if (shouldEndRound) {\r\n        log(`🏁 Runde ${newState.round} wird beendet und ausgewertet.`);\r\n        return resolveRound(newState, log);\r\n      } else {\r\n        // Switch turn to other player for their final chance\r\n        const otherPlayer: Player = player === 1 ? 2 : 1;\r\n        logger.dbg(`Switching to other player ${otherPlayer} hasPassed=${newState.passed[otherPlayer]}`);\r\n\r\n        // Only switch if other player hasn't passed yet\r\n        if (!newState.passed[otherPlayer]) {\r\n                     newState.current = otherPlayer;\r\n           newState.actionPoints = { ...newState.actionPoints, [otherPlayer]: 2 };\r\n\r\n          // Apply new start-of-turn hooks\r\n          applyStartOfTurnFlags(newState, otherPlayer, log);\r\n\r\n        // 🔥 CLUSTER 3: Auren-Flags beim Zugstart neu berechnen\r\n        recomputeAuraFlags(newState);\r\n\r\n          log(`⏭️ Spieler ${otherPlayer} hat noch einen letzten Zug.`);\r\n          logger.dbg(`Turn switched to player ${otherPlayer}`);\r\n        } else {\r\n          // Both players have passed now, end round\r\n          log(`🏁 Runde ${newState.round} wird beendet (beide Spieler haben gepasst).`);\r\n          return resolveRound(newState, log);\r\n        }\r\n      }\r\n\r\n      return newState;\r\n    });\r\n  }, [setGameState, log]);\r\n\r\n  return {\r\n    startMatchWithDecks,\r\n    startMatchVsAI,\r\n    playCard,\r\n    activateInstantInitiative,\r\n    passTurn,\r\n    nextTurn,\r\n    endTurn,\r\n  };\r\n  }\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}