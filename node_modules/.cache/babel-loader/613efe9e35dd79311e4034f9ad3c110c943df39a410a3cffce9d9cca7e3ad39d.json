{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\skank\\\\Videos\\\\Cards\\\\Milchcards\\\\src\\\\components\\\\GameCanvas.tsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useCallback } from 'react';\nimport { LAYOUT, getZone, computeSlotRects, getUiTransform, getLaneCapacity, getPublicRects, getGovernmentRects } from '../ui/layout';\nimport { sortHandCards } from '../utils/gameUtils';\nimport { getCardImagePath } from '../data/gameData';\nimport influenceIconUrl from '../assets/icons/influence.svg';\nimport slotIconManifest from '../assets/icons/manifest.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const GameCanvas = ({\n  gameState,\n  selectedHandIndex,\n  onCardClick,\n  onCardHover,\n  devMode = false\n}) => {\n  _s();\n  const canvasRef = useRef(null);\n  const clickZonesRef = useRef([]);\n  // Smooth vertical scroll for P1 hand when it has more than visible slots\n  const handScrollTargetRef = useRef(0);\n  const handScrollCurrentRef = useRef(0);\n  const handScrollEnabledRef = useRef(true);\n  // Touch handling refs\n  const touchStartYRef = useRef(null);\n  const lastTouchYRef = useRef(null);\n  const isTouchingRef = useRef(false);\n  const backgroundImageRef = useRef(null);\n  const imageCacheRef = useRef(new Map());\n  const influenceImgRef = useRef(null);\n\n  // Load influence icon once\n  useEffect(() => {\n    const img = new Image();\n    img.src = influenceIconUrl;\n    influenceImgRef.current = img;\n  }, []);\n  const drawCardAt = useCallback((ctx, card, x, y, size, selected = false, showAPCost = false, player) => {\n    var _shield;\n    let dx = x,\n      dy = y,\n      s = size;\n    if (selected) {\n      s = Math.floor(size * 1.05);\n      dx = x - Math.floor((s - size) / 2);\n      dy = y - Math.floor((s - size) / 2);\n    }\n\n    // Draw card image with caching to prevent flicker in continuous loop\n    const src = getCardImagePath(card, 'ui');\n    const cached = imageCacheRef.current.get(src);\n    if (cached && cached.complete) {\n      ctx.drawImage(cached, dx, dy, s, s);\n    } else {\n      const img = new Image();\n      img.onload = () => {\n        imageCacheRef.current.set(src, img);\n        ctx.drawImage(img, dx, dy, s, s);\n      };\n      img.src = src;\n      imageCacheRef.current.set(src, img);\n    }\n\n    // Status-Indikatoren (für alle Board-Karten)\n    // Einfluss-Wert dauerhaft anzeigen (oben links) – nur für Regierungskarten\n    if (card.kind === 'pol') {\n      var _influence;\n      const barH = Math.max(20, Math.floor(s * 0.12) + 6);\n      ctx.fillStyle = 'rgba(0,0,0,0.6)';\n      ctx.fillRect(dx, dy + s - barH, s, barH);\n      ctx.fillStyle = '#ffffff';\n      const fontSize = Math.floor(s * 0.12);\n      ctx.font = `bold ${fontSize}px sans-serif`;\n      ctx.textAlign = 'left';\n      ctx.textBaseline = 'middle';\n      ctx.fillText(`${(_influence = card.influence) !== null && _influence !== void 0 ? _influence : 0}`, dx + 8, dy + s - barH / 2);\n    }\n    // Schutz-Status (blauer Punkt) + blue shimmer ring when active\n    if (card.protected || ((_shield = card.shield) !== null && _shield !== void 0 ? _shield : 0) > 0) {\n      ctx.fillStyle = '#1da1f2';\n      ctx.fillRect(dx + s - 22, dy + 6, 16, 16);\n      // shimmer ring\n      ctx.beginPath();\n      ctx.strokeStyle = 'rgba(29,161,242,0.18)';\n      ctx.lineWidth = 6;\n      ctx.arc(dx + s - 14, dy + 14, 18, 0, Math.PI * 2);\n      ctx.stroke();\n    }\n    // Deaktiviert-Status (roter Punkt) + desaturate image when deactivated\n    if (card.deactivated) {\n      ctx.fillStyle = '#b63838';\n      ctx.fillRect(dx + s - 22, dy + 26, 16, 16);\n      // simple grayscale overlay to indicate deactivated\n      ctx.fillStyle = 'rgba(0,0,0,0.45)';\n      ctx.fillRect(dx, dy, s, s);\n    }\n\n    // Einfluss-Badge für Handkarten oben rechts (nur Regierungskarten)\n    if (showAPCost && player && card.kind === 'pol') {\n      var _influence2;\n      const badgeHeight = Math.max(16, Math.floor(s * 0.12));\n      const badgeWidth = badgeHeight * 2;\n      const badgeX = dx + s - badgeWidth - 6;\n      const badgeY = dy + 6;\n\n      // Semi-transparent dunkler Hintergrund\n      ctx.fillStyle = 'rgba(0,0,0,0.6)';\n      ctx.beginPath();\n      ctx.roundRect(badgeX, badgeY, badgeWidth, badgeHeight, badgeHeight / 2);\n      ctx.fill();\n\n      // Influence icon (90% opacity) links im Badge\n      if (influenceImgRef.current && influenceImgRef.current.complete) {\n        ctx.globalAlpha = 0.9;\n        ctx.drawImage(influenceImgRef.current, badgeX + 2, badgeY + 2, badgeHeight - 4, badgeHeight - 4);\n        ctx.globalAlpha = 1;\n      }\n\n      // Influence number rechts im Badge\n      ctx.fillStyle = '#ffffff';\n      ctx.font = `bold ${Math.floor(badgeHeight * 0.5)}px sans-serif`;\n      ctx.textAlign = 'right';\n      ctx.textBaseline = 'middle';\n      ctx.fillText(`${(_influence2 = card.influence) !== null && _influence2 !== void 0 ? _influence2 : 0}`, badgeX + badgeWidth - 4, badgeY + badgeHeight / 2);\n\n      // Reset align\n      ctx.textAlign = 'start';\n      ctx.textBaseline = 'alphabetic';\n    }\n\n    // Auswahl-Rahmen\n    if (selected) {\n      ctx.strokeStyle = '#61dafb';\n      ctx.lineWidth = 3;\n      ctx.strokeRect(dx + 1, dy + 1, s - 2, s - 2);\n      ctx.lineWidth = 1;\n    }\n\n    // Return exact 256x256 click zone over the card\n    // Since all cards are 256x256, the click zone should match exactly\n    return {\n      x: dx,\n      y: dy,\n      w: 256,\n      h: 256\n    };\n  }, [gameState]);\n\n  // Slot-Benennungs-Funktion basierend auf Glossar\n  const getSlotDisplayName = useCallback((zoneId, index, player) => {\n    const slotNumber = index + 1;\n    if (zoneId.includes('government')) {\n      if (zoneId.includes('player')) {\n        return `Regierungsreihe Slot ${slotNumber}`;\n      } else {\n        return `Gegner Regierung Slot ${slotNumber}`;\n      }\n    } else if (zoneId.includes('public')) {\n      if (zoneId.includes('player')) {\n        return `Öffentlichkeitsreihe Slot ${slotNumber}`;\n      } else {\n        return `Gegner Öffentlichkeit Slot ${slotNumber}`;\n      }\n    } else if (zoneId.includes('permanent.government')) {\n      if (zoneId.includes('player')) {\n        return 'Regierung Spezial-Slot';\n      } else {\n        return 'Gegner Regierung Spezial-Slot';\n      }\n    } else if (zoneId.includes('permanent.public')) {\n      if (zoneId.includes('player')) {\n        return 'Öffentlichkeit Spezial-Slot';\n      } else {\n        return 'Gegner Öffentlichkeit Spezial-Slot';\n      }\n    } else if (zoneId.includes('instant')) {\n      if (zoneId.includes('player')) {\n        return 'Sofort-Slot';\n      } else {\n        return 'Gegner Sofort-Slot';\n      }\n    } else if (zoneId.includes('hand')) {\n      return 'Hand';\n    } else if (zoneId.includes('interventions')) {\n      return 'Interventionen';\n    }\n    return `Slot ${slotNumber}`;\n  }, []);\n  const drawLane = useCallback((ctx, zoneId, player, lane, clickable) => {\n    const zone = getZone(zoneId);\n    if (!zone) return;\n    const slots = computeSlotRects(zone);\n    const arr = gameState.board[player][lane];\n    slots.forEach((s, idx) => {\n      const card = arr[idx];\n\n      // Hintergrundfarbe nach Kategorie\n      let bgColor = 'rgba(0,0,0,0.1)'; // Standard\n      if (zoneId.includes('government')) {\n        bgColor = 'rgba(255, 197, 0, 0.15)'; // Hellgelb für Regierung\n      } else if (zoneId.includes('public')) {\n        bgColor = 'rgba(0, 255, 0, 0.15)'; // Hellgrün für Öffentlichkeit\n      }\n      ctx.fillStyle = bgColor;\n      ctx.fillRect(s.x, s.y, s.w, s.h);\n\n      // Slot-Rahmen\n      ctx.strokeStyle = 'rgba(255,255,255,0.06)';\n      ctx.strokeRect(s.x + 0.5, s.y + 0.5, s.w - 1, s.h - 1);\n      if (card) {\n        const isSelected = player === 1 && selectedHandIndex !== null && gameState.hands[1][selectedHandIndex] === card;\n        const clickZone = drawCardAt(ctx, card, s.x, s.y, s.w, isSelected, false);\n\n        // Kartenname unter dem Slot anzeigen\n        ctx.fillStyle = 'rgba(255,255,255,0.9)';\n        ctx.font = 'bold 12px sans-serif';\n        ctx.textAlign = 'center';\n        const textY = s.y + s.h + 16;\n        ctx.fillText(card.name, s.x + s.w / 2, textY);\n        clickZonesRef.current.push({\n          ...clickZone,\n          data: {\n            type: 'board_card',\n            player,\n            lane,\n            index: idx,\n            card\n          }\n        });\n      } else if (clickable && gameState.current === player) {\n        // Slot-Benennung anzeigen (für den aktuellen Spieler)\n        const slotName = getSlotDisplayName(zoneId, idx, player);\n        ctx.fillStyle = 'rgba(255,255,255,0.6)';\n        ctx.font = '11px sans-serif';\n        ctx.textAlign = 'center';\n        const textY = s.y + s.h / 2;\n        ctx.fillText(slotName, s.x + s.w / 2, textY);\n        clickZonesRef.current.push({\n          x: s.x,\n          y: s.y,\n          w: s.w,\n          h: s.h,\n          data: {\n            type: 'row_slot',\n            lane,\n            index: idx\n          }\n        });\n        // Draw slot icon for empty slots (use manifest mapping)\n        try {\n          const iconKey = zoneId.includes('government') ? 'government-row' : 'public-row';\n          const iconData = slotIconManifest[iconKey];\n          if (iconData && iconData.file) {\n            const iconSrc = iconData.file.startsWith('/') ? iconData.file : iconData.file;\n            // draw small ring + icon centered in slot\n            const ringColor = iconData.ring || 'rgba(255,255,255,0.06)';\n            const cx = s.x + s.w / 2;\n            const cy = s.y + s.h / 2;\n            const r = Math.min(s.w, s.h) * 0.18;\n            ctx.beginPath();\n            ctx.strokeStyle = ringColor;\n            ctx.lineWidth = 3;\n            ctx.arc(cx, cy, r + 6, 0, Math.PI * 2);\n            ctx.stroke();\n            // try to draw svg via cached image\n            const cached = imageCacheRef.current.get(iconSrc);\n            if (cached && cached.complete) {\n              ctx.globalAlpha = 0.95;\n              ctx.drawImage(cached, cx - r, cy - r, r * 2, r * 2);\n              ctx.globalAlpha = 1;\n            } else {\n              const img = new Image();\n              img.onload = () => {\n                imageCacheRef.current.set(iconSrc, img);\n                requestAnimationFrame(draw);\n              };\n              img.src = iconSrc;\n              imageCacheRef.current.set(iconSrc, img);\n            }\n          }\n        } catch (e) {}\n      }\n    });\n  }, [gameState, selectedHandIndex, drawCardAt, getSlotDisplayName]);\n  const drawHandP1 = useCallback(ctx => {\n    const hand = sortHandCards(gameState.hands[1]);\n    const zone = getZone('hand.player');\n    if (!zone) return;\n    const slots = computeSlotRects(zone);\n    // Apply smooth offset (lerp towards target)\n    const target = handScrollTargetRef.current;\n    handScrollCurrentRef.current += (target - handScrollCurrentRef.current) * 0.15; // easing\n    const offsetY = Math.round(handScrollCurrentRef.current);\n    slots.forEach((s, i) => {\n      const card = hand[i];\n      if (!card) return;\n      // Find original index in unsorted hand for click handling\n      const originalIndex = gameState.hands[1].findIndex(c => c.uid === card.uid);\n      const isSel = selectedHandIndex === originalIndex;\n      // apply vertical offset\n      const sx = s.x;\n      const sy = s.y + offsetY;\n      const clickZone = drawCardAt(ctx, card, sx, sy, s.w, isSel, true, 1); // Show AP cost for player 1 hand\n      clickZonesRef.current.push({\n        ...clickZone,\n        data: {\n          type: 'hand_p1',\n          index: originalIndex,\n          card\n        }\n      });\n    });\n  }, [gameState.hands, selectedHandIndex, drawCardAt]);\n\n  // 🔧 DEV MODE: Player 2 Hand (rechts unten, kompakter)\n  const drawHandP2 = useCallback(ctx => {\n    const hand = sortHandCards(gameState.hands[2]);\n    const zone = getZone('hand.opponent');\n    if (!zone) return;\n    const slots = computeSlotRects(zone);\n\n    // Hintergrund für P2 Hand\n    const [x, y, w, h] = zone.rectPx;\n    ctx.fillStyle = 'rgba(255, 100, 100, 0.15)'; // Rötlicher Hintergrund für P2\n    ctx.fillRect(x, y, w, h);\n    ctx.strokeStyle = 'rgba(255, 100, 100, 0.3)';\n    ctx.strokeRect(x + 0.5, y + 0.5, w - 1, h - 1);\n\n    // Label für P2 Hand\n    ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\n    ctx.font = 'bold 14px sans-serif';\n    ctx.textAlign = 'center';\n    ctx.fillText('Player 2 Hand', x + w / 2, y - 8);\n    slots.forEach((s, i) => {\n      const card = hand[i];\n      if (!card) return;\n      // Find original index in unsorted hand for click handling\n      const originalIndex = gameState.hands[2].findIndex(c => c.uid === card.uid);\n      const isSel = gameState.current === 2 && selectedHandIndex === originalIndex;\n      const clickZone = drawCardAt(ctx, card, s.x, s.y, s.w, isSel, true, 2); // Show AP cost for player 2 hand\n      clickZonesRef.current.push({\n        ...clickZone,\n        data: {\n          type: 'hand_p2',\n          index: originalIndex,\n          card\n        }\n      });\n    });\n  }, [gameState, selectedHandIndex, drawCardAt]);\n  // Interventions strip (player traps)\n  const drawInterventionsP1 = useCallback(ctx => {\n    const traps = gameState.traps[1] || [];\n    const zone = getZone('interventions.player');\n    if (!zone) return;\n\n    // Single intervention slot\n    const [zx, zy, zw, zh] = zone.rectPx;\n    const card = traps[0]; // Only first trap\n\n    // Hintergrund für Interventions-Slot\n    ctx.fillStyle = 'rgba(200, 160, 255, 0.15)'; // Lavendelfarben für Interventionen\n    ctx.fillRect(zx, zy, zw, zh);\n    ctx.strokeStyle = 'rgba(200, 160, 255, 0.3)';\n    ctx.strokeRect(zx + 0.5, zy + 0.5, zw - 1, zh - 1);\n\n    // Slot-Benennung für Interventions-Slot\n    ctx.fillStyle = 'rgba(200, 160, 255, 0.8)';\n    ctx.font = '11px sans-serif';\n    ctx.textAlign = 'left';\n    ctx.fillText('Intervention', zx + 8, zy + zh - 6);\n    if (card) {\n      const clickZone = drawCardAt(ctx, card, zx, zy, zw, false, false);\n      clickZonesRef.current.push({\n        ...clickZone,\n        data: {\n          type: 'trap_p1',\n          index: 0,\n          card\n        }\n      });\n    }\n  }, [gameState.traps, drawCardAt]);\n\n  // Interventions strip (opponent traps)\n  const drawInterventionsP2 = useCallback(ctx => {\n    const traps = gameState.traps[2] || [];\n    const zone = getZone('interventions.opponent');\n    if (!zone) return;\n\n    // Single intervention slot\n    const [zx, zy, zw, zh] = zone.rectPx;\n    const card = traps[0]; // Only first trap\n\n    // Hintergrund für Interventions-Slot\n    ctx.fillStyle = 'rgba(200, 160, 255, 0.15)'; // Lavendelfarben für Interventionen\n    ctx.fillRect(zx, zy, zw, zh);\n    ctx.strokeStyle = 'rgba(200, 160, 255, 0.3)';\n    ctx.strokeRect(zx + 0.5, zy + 0.5, zw - 1, zh - 1);\n\n    // Slot-Benennung für Interventions-Slot\n    ctx.fillStyle = 'rgba(200, 160, 255, 0.8)';\n    ctx.font = '11px sans-serif';\n    ctx.textAlign = 'left';\n    ctx.fillText('Intervention', zx + 8, zy + zh - 6);\n    if (card) {\n      const clickZone = drawCardAt(ctx, card, zx, zy, zw, false, false);\n      clickZonesRef.current.push({\n        ...clickZone,\n        data: {\n          type: 'trap_p2',\n          index: 0,\n          card\n        }\n      });\n    }\n  }, [gameState.traps, drawCardAt]);\n\n  // Single slot drawing function\n  const drawSingleSlot = useCallback((ctx, zoneId, card, clickType, player) => {\n    const zone = getZone(zoneId);\n    if (!zone) return;\n    const [x, y, w, h] = zone.rectPx;\n\n    // Hintergrundfarbe nach Kategorie\n    let bgColor = 'rgba(0,0,0,0.1)'; // Standard\n    if (zoneId.includes('government')) {\n      bgColor = 'rgba(255, 197, 0, 0.15)'; // Hellgelb für Regierung\n    } else if (zoneId.includes('public')) {\n      bgColor = 'rgba(0, 255, 0, 0.15)'; // Hellgrün für Öffentlichkeit\n    } else if (zoneId.includes('instant')) {\n      bgColor = 'rgba(127, 116, 91, 0.15)'; // Neutral für Sofort-Slots\n    } else if (zoneId.includes('permanent')) {\n      // Unterscheide zwischen government und public permanent slots\n      if (zoneId.includes('government')) {\n        bgColor = 'rgba(255, 197, 0, 0.15)';\n      } else if (zoneId.includes('public')) {\n        bgColor = 'rgba(0, 255, 0, 0.15)';\n      }\n    }\n    ctx.fillStyle = bgColor;\n    ctx.fillRect(x, y, w, h);\n\n    // Draw slot border\n    ctx.strokeStyle = 'rgba(255,255,255,0.06)';\n    ctx.strokeRect(x + 0.5, y + 0.5, w - 1, h - 1);\n    if (card) {\n      const isSelected = player === 1 && selectedHandIndex !== null && gameState.hands[1][selectedHandIndex] === card;\n      const clickZone = drawCardAt(ctx, card, x, y, w, isSelected, false);\n\n      // Kartenname unter dem Slot anzeigen\n      ctx.fillStyle = 'rgba(255,255,255,0.9)';\n      ctx.font = 'bold 12px sans-serif';\n      ctx.textAlign = 'center';\n      const textY = y + h + 16;\n      ctx.fillText(card.name, x + w / 2, textY);\n      clickZonesRef.current.push({\n        ...clickZone,\n        data: {\n          type: 'slot_card',\n          slot: clickType,\n          card\n        }\n      });\n\n      // 🔧 NEU: Sofort-Initiative-Slots sind klickbar für Aktivierung\n      if (clickType === 'instant' && gameState.current === player) {\n        clickZonesRef.current.push({\n          x,\n          y,\n          w,\n          h,\n          data: {\n            type: 'activate_instant',\n            player,\n            card\n          }\n        });\n      }\n    } else if (gameState.current === player) {\n      // Slot-Benennung für leere Slots anzeigen (für den aktuellen Spieler)\n      const slotName = getSlotDisplayName(zoneId, 0, player);\n      ctx.fillStyle = 'rgba(255,255,255,0.6)';\n      ctx.font = '11px sans-serif';\n      ctx.textAlign = 'center';\n      const textY = y + h / 2;\n      ctx.fillText(slotName, x + w / 2, textY);\n      clickZonesRef.current.push({\n        x,\n        y,\n        w,\n        h,\n        data: {\n          type: 'empty_slot',\n          slot: clickType\n        }\n      });\n    }\n  }, [selectedHandIndex, gameState, drawCardAt, getSlotDisplayName]);\n\n  // Draw permanent slots for player\n  const drawPermanentSlotsP1 = useCallback(ctx => {\n    drawSingleSlot(ctx, 'slot.permanent.government.player', gameState.permanentSlots[1].government, 'permanent_government', 1);\n    drawSingleSlot(ctx, 'slot.permanent.public.player', gameState.permanentSlots[1].public, 'permanent_public', 1);\n  }, [gameState.permanentSlots, drawSingleSlot]);\n\n  // Draw permanent slots for opponent\n  const drawPermanentSlotsP2 = useCallback(ctx => {\n    drawSingleSlot(ctx, 'slot.permanent.government.opponent', gameState.permanentSlots[2].government, 'permanent_government', 2);\n    drawSingleSlot(ctx, 'slot.permanent.public.opponent', gameState.permanentSlots[2].public, 'permanent_public', 2);\n  }, [gameState.permanentSlots, drawSingleSlot]);\n\n  // Draw instant slots\n  const drawInstantSlots = useCallback(ctx => {\n    // Sofort-Initiative-Slots aus dem Board zeichnen\n    const sofortPlayerCard = gameState.board[1].sofort[0];\n    const sofortOppCard = gameState.board[2].sofort[0];\n    drawSingleSlot(ctx, 'slot.instant.player', sofortPlayerCard, 'instant', 1);\n    drawSingleSlot(ctx, 'slot.instant.opponent', sofortOppCard, 'instant', 2);\n  }, [gameState.board, drawSingleSlot]);\n\n  // Aktive Schlüsselwörter und Unterkategorien ermitteln\n  const getActiveKeywordsAndSubcategories = useCallback(player => {\n    const board = gameState.board[player];\n    const permanentSlots = gameState.permanentSlots[player];\n    const allCards = [...board.innen, ...board.aussen, permanentSlots.government, permanentSlots.public].filter(c => c && c.kind === 'pol');\n    const keywords = new Set();\n    const subcategories = new Set();\n    allCards.forEach(card => {\n      if (!card.deactivated) {\n        // Regierungskarten-Schlüsselwörter\n        if (card.tag === 'Leadership') {\n          keywords.add('Leadership');\n        }\n        if (card.tag === 'Diplomat') {\n          keywords.add('Diplomat');\n        }\n\n        // Öffentlichkeits-Unterkategorien (für Karten in Öffentlichkeitsreihe)\n        if (board.innen.includes(card)) {\n          const publicCard = card;\n          if (publicCard.tag) {\n            // Oligarch\n            const oligarchNames = ['Elon Musk', 'Bill Gates', 'George Soros', 'Warren Buffett', 'Mukesh Ambani', 'Jeff Bezos', 'Alisher Usmanov', 'Gautam Adani', 'Jack Ma', 'Zhang Yiming', 'Roman Abramovich'];\n            if (oligarchNames.includes(publicCard.name)) {\n              subcategories.add('Oligarch');\n            }\n\n            // Plattform\n            const platformNames = ['Mark Zuckerberg', 'Tim Cook', 'Sam Altman', 'Jack Ma'];\n            if (platformNames.includes(publicCard.name)) {\n              subcategories.add('Plattform');\n            }\n\n            // Bewegung\n            const movementNames = ['Greta Thunberg', 'Malala Yousafzai', 'Ai Weiwei', 'Alexei Navalny'];\n            if (movementNames.includes(publicCard.name)) {\n              subcategories.add('Bewegung');\n            }\n\n            // NGO/Think-Tank\n            const ngoNames = ['Bill Gates', 'George Soros', 'Jennifer Doudna', 'Noam Chomsky', 'Anthony Fauci'];\n            if (ngoNames.includes(publicCard.name)) {\n              subcategories.add('NGO/Think-Tank');\n            }\n\n            // Intelligenz\n            const intelligenceNames = ['Jennifer Doudna', 'Noam Chomsky', 'Edward Snowden', 'Julian Assange', 'Yuval Noah Harari', 'Ai Weiwei', 'Alexei Navalny', 'Anthony Fauci'];\n            if (intelligenceNames.includes(publicCard.name)) {\n              subcategories.add('Intelligenz');\n            }\n\n            // Medien\n            const mediaNames = ['Oprah Winfrey'];\n            if (mediaNames.includes(publicCard.name)) {\n              subcategories.add('Medien');\n            }\n          }\n        }\n      }\n    });\n    return {\n      keywords: Array.from(keywords),\n      subcategories: Array.from(subcategories)\n    };\n  }, [gameState]);\n\n  // Info-Panels zeichnen\n  const drawInfoPanels = useCallback(ctx => {\n    const {\n      keywords,\n      subcategories\n    } = getActiveKeywordsAndSubcategories(1);\n\n    // Panel für Regierungsschlüsselwörter (rechts neben Regierungsslots)\n    const govPanelX = 1640 + 256 + 20; // Nach dem letzten permanenten Slot\n    const govPanelY = 300; // Auf Höhe der Regierungsslots\n    const govPanelW = 120;\n    const govPanelH = 256;\n\n    // Regierungspanel Hintergrund\n    ctx.fillStyle = 'rgba(255, 197, 0, 0.15)';\n    ctx.fillRect(govPanelX, govPanelY, govPanelW, govPanelH);\n    ctx.strokeStyle = 'rgba(255, 197, 0, 0.3)';\n    ctx.strokeRect(govPanelX + 0.5, govPanelY + 0.5, govPanelW - 1, govPanelH - 1);\n\n    // Regierungspanel Titel\n    ctx.fillStyle = 'rgba(255, 197, 0, 0.9)';\n    ctx.font = 'bold 12px sans-serif';\n    ctx.textAlign = 'center';\n    ctx.fillText('Regierung', govPanelX + govPanelW / 2, govPanelY + 16);\n\n    // Schlüsselwörter auflisten\n    ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\n    ctx.font = '11px sans-serif';\n    ctx.textAlign = 'left';\n    if (keywords.length > 0) {\n      keywords.forEach((keyword, idx) => {\n        ctx.fillText(`• ${keyword}`, govPanelX + 8, govPanelY + 36 + idx * 16);\n      });\n    } else {\n      ctx.fillStyle = 'rgba(255, 255, 255, 0.5)';\n      ctx.fillText('Keine aktiven', govPanelX + 8, govPanelY + 36);\n      ctx.fillText('Schlüsselwörter', govPanelX + 8, govPanelY + 52);\n    }\n\n    // Panel für Öffentlichkeits-Unterkategorien (rechts neben Öffentlichkeitsslots)\n    const pubPanelX = 1640 + 256 + 20;\n    const pubPanelY = 580; // Auf Höhe der Öffentlichkeitsslots\n    const pubPanelW = 120;\n    const pubPanelH = 256;\n\n    // Öffentlichkeitspanel Hintergrund\n    ctx.fillStyle = 'rgba(0, 255, 0, 0.15)';\n    ctx.fillRect(pubPanelX, pubPanelY, pubPanelW, pubPanelH);\n    ctx.strokeStyle = 'rgba(0, 255, 0, 0.3)';\n    ctx.strokeRect(pubPanelX + 0.5, pubPanelY + 0.5, pubPanelW - 1, pubPanelH - 1);\n\n    // Öffentlichkeitspanel Titel\n    ctx.fillStyle = 'rgba(0, 255, 0, 0.9)';\n    ctx.font = 'bold 12px sans-serif';\n    ctx.textAlign = 'center';\n    ctx.fillText('Öffentlichkeit', pubPanelX + pubPanelW / 2, pubPanelY + 16);\n\n    // Unterkategorien auflisten\n    ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\n    ctx.font = '11px sans-serif';\n    ctx.textAlign = 'left';\n    if (subcategories.length > 0) {\n      subcategories.forEach((subcategory, idx) => {\n        const displayName = subcategory.length > 12 ? subcategory.substring(0, 10) + '...' : subcategory;\n        ctx.fillText(`• ${displayName}`, pubPanelX + 8, pubPanelY + 36 + idx * 16);\n      });\n    } else {\n      ctx.fillStyle = 'rgba(255, 255, 255, 0.5)';\n      ctx.fillText('Keine aktiven', pubPanelX + 8, pubPanelY + 36);\n      ctx.fillText('Unterkategorien', pubPanelX + 8, pubPanelY + 52);\n    }\n  }, [getActiveKeywordsAndSubcategories]);\n\n  // Move diagnostics to draw callback to ensure they run after canvas is actually rendered\n  const runDiagnostics = useCallback(() => {\n    try {\n      const handZones = clickZonesRef.current.filter(z => z.data && z.data.type === 'hand_p1');\n      const uiUIDs = handZones.map(z => {\n        var _z$data$card$uid;\n        return z.data.card && ((_z$data$card$uid = z.data.card.uid) !== null && _z$data$card$uid !== void 0 ? _z$data$card$uid : z.data.card.id);\n      }).filter(Boolean);\n      const stateHand = gameState.hands && gameState.hands[1] ? gameState.hands[1] : [];\n      const stateUIDs = stateHand.map(c => {\n        var _c$uid;\n        return (_c$uid = c.uid) !== null && _c$uid !== void 0 ? _c$uid : c.id;\n      }).filter(Boolean);\n      const missingInState = uiUIDs.filter(u => !stateUIDs.includes(u));\n      const missingInUI = stateUIDs.filter(u => !uiUIDs.includes(u));\n\n      // Only warn if there are cards in UI that don't exist in state (real error)\n      // Don't warn about missing UI cards due to limited slot capacity\n      if (missingInState.length > 0) {\n        var _politicardDebug;\n        const mismatch = {\n          ts: Date.now(),\n          uiCount: uiUIDs.length,\n          stateCount: stateUIDs.length,\n          uiUIDs,\n          stateUIDs,\n          missingInState,\n          missingInUI,\n          stack: new Error('mismatch-stack').stack\n        };\n        window.__politicardDebug = {\n          ...window.__politicardDebug,\n          mismatch: [...(((_politicardDebug = window.__politicardDebug) === null || _politicardDebug === void 0 ? void 0 : _politicardDebug.mismatch) || [])].slice(-19).concat([mismatch])\n        };\n        // Clear, then log to console so user can copy/paste trace\n        console.warn('POLITICARD DIAGNOSTIC: hand mismatch detected', mismatch);\n      }\n    } catch (e) {\n      // swallow diagnostic errors to avoid breaking rendering\n      console.error('Diagnostic error', e);\n    }\n  }, [gameState.hands]);\n  const draw = useCallback(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n\n    // Clear canvas\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    // Clear click zones\n    clickZonesRef.current = [];\n\n    // Unified procedural background (remove PNG dependence) — subtle gradients + vignette\n    const grad = ctx.createLinearGradient(0, 0, 0, canvas.height);\n    grad.addColorStop(0, '#081018');\n    grad.addColorStop(0.6, '#0c131b');\n    grad.addColorStop(1, '#061018');\n    ctx.fillStyle = grad;\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n    // Vignette\n    ctx.save();\n    const vignette = ctx.createRadialGradient(canvas.width / 2, canvas.height / 2, canvas.width / 4, canvas.width / 2, canvas.height / 2, Math.max(canvas.width, canvas.height));\n    vignette.addColorStop(0, 'rgba(0,0,0,0)');\n    vignette.addColorStop(1, 'rgba(0,0,0,0.45)');\n    ctx.fillStyle = vignette;\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n    ctx.restore();\n\n    // Apply UI transform (new signature)\n    const {\n      scale,\n      offsetX,\n      offsetY\n    } = getUiTransform(canvas.width, canvas.height);\n    ctx.save();\n    ctx.translate(offsetX, offsetY);\n    ctx.scale(scale, scale);\n\n    // Draw opponent board (top rows) - clickable im Dev Mode\n    // Draw opponent board using new layout system\n    const opponentPublicRects = getPublicRects('opponent');\n    const opponentGovRects = getGovernmentRects('opponent');\n\n    // Draw opponent public slots\n    opponentPublicRects.forEach((s, idx) => {\n      const card = gameState.board[2].innen[idx];\n      if (card) {\n        drawCardAt(ctx, card, s.x, s.y, s.w, false, false, 2);\n      }\n    });\n\n    // Draw opponent government slots\n    opponentGovRects.forEach((s, idx) => {\n      const card = gameState.board[2].aussen[idx];\n      if (card) {\n        drawCardAt(ctx, card, s.x, s.y, s.w, false, false, 2);\n      }\n    });\n\n    // Draw opponent permanent slots\n    drawPermanentSlotsP2(ctx);\n\n    // Draw player board (middle rows)\n    // Draw player board using new layout system\n    const playerPublicRects = getPublicRects('player');\n    const playerGovRects = getGovernmentRects('player');\n\n    // Draw player public slots\n    playerPublicRects.forEach((s, idx) => {\n      const card = gameState.board[1].innen[idx];\n      if (card) {\n        const clickZone = drawCardAt(ctx, card, s.x, s.y, s.w, false, false, 1);\n        clickZonesRef.current.push({\n          ...clickZone,\n          data: {\n            type: 'row_slot',\n            player: 1,\n            lane: 'innen',\n            index: idx\n          }\n        });\n      } else {\n        // Empty slot click zone\n        clickZonesRef.current.push({\n          x: s.x,\n          y: s.y,\n          w: s.w,\n          h: s.h,\n          data: {\n            type: 'row_slot',\n            player: 1,\n            lane: 'innen',\n            index: idx\n          }\n        });\n      }\n    });\n\n    // Draw player government slots\n    playerGovRects.forEach((s, idx) => {\n      const card = gameState.board[1].aussen[idx];\n      if (card) {\n        const clickZone = drawCardAt(ctx, card, s.x, s.y, s.w, false, false, 1);\n        clickZonesRef.current.push({\n          ...clickZone,\n          data: {\n            type: 'row_slot',\n            player: 1,\n            lane: 'aussen',\n            index: idx\n          }\n        });\n      } else {\n        // Empty slot click zone\n        clickZonesRef.current.push({\n          x: s.x,\n          y: s.y,\n          w: s.w,\n          h: s.h,\n          data: {\n            type: 'row_slot',\n            player: 1,\n            lane: 'aussen',\n            index: idx\n          }\n        });\n      }\n    });\n\n    // Draw player permanent slots\n    drawPermanentSlotsP1(ctx);\n\n    // Draw instant slots (both players)\n    drawInstantSlots(ctx);\n\n    // Draw interventions strip (player)\n    drawInterventionsP1(ctx);\n\n    // Draw interventions strip (opponent) - nur im Dev Mode\n    if (devMode) {\n      drawInterventionsP2(ctx);\n    }\n\n    // Draw hand (P1)\n    drawHandP1(ctx);\n\n    // 🔧 DEV MODE: Draw hand (P2) - nur im Dev Mode\n    if (devMode) {\n      drawHandP2(ctx);\n    }\n\n    // Draw info panels\n    drawInfoPanels(ctx);\n    ctx.restore();\n\n    // expose zones for debug snapshot\n    window.__politicardDebug = {\n      uiTransform: getUiTransform(canvas.width, canvas.height),\n      canvasSize: {\n        width: canvas.width,\n        height: canvas.height\n      },\n      zones: LAYOUT.zones,\n      clickZones: clickZonesRef.current.slice(0, 1000)\n    };\n\n    // Run diagnostics after canvas is fully rendered\n    runDiagnostics();\n  }, [drawLane, drawHandP1, drawHandP2, drawInterventionsP1, drawInterventionsP2, drawPermanentSlotsP1, drawPermanentSlotsP2, drawInstantSlots, drawInfoPanels, devMode, runDiagnostics]);\n  const DRAW_LAYOUT_OVERLAY = false; // force off per new layout system\n\n  // Load background image if configured\n  useEffect(() => {\n    var _LAYOUT$background, _LAYOUT$background2;\n    if ((_LAYOUT$background = LAYOUT.background) !== null && _LAYOUT$background !== void 0 && _LAYOUT$background.enabled && (_LAYOUT$background2 = LAYOUT.background) !== null && _LAYOUT$background2 !== void 0 && _LAYOUT$background2.src) {\n      const img = new Image();\n      img.onload = () => {\n        backgroundImageRef.current = img;\n        requestAnimationFrame(draw);\n      };\n      img.onerror = () => {\n        var _LAYOUT$background3;\n        console.warn('Failed to load background image', (_LAYOUT$background3 = LAYOUT.background) === null || _LAYOUT$background3 === void 0 ? void 0 : _LAYOUT$background3.src);\n      };\n      img.src = LAYOUT.background.src;\n    } else {\n      // Fallback: ensure first draw without background\n      requestAnimationFrame(draw);\n    }\n  }, [draw]);\n\n  // Redraw when game state or selection changes\n  useEffect(() => {\n    requestAnimationFrame(draw);\n  }, [gameState, selectedHandIndex, draw]);\n\n  // Continuous render loop to keep canvas updated without relying on external state refs\n  useEffect(() => {\n    let frame;\n    const loop = () => {\n      draw();\n      frame = requestAnimationFrame(loop);\n    };\n    frame = requestAnimationFrame(loop);\n    return () => cancelAnimationFrame(frame);\n  }, [draw]);\n  const handleCardClick = useCallback(data => {\n    // Hand-Klick\n    if (data.type === 'hand_p1') {\n      var _data$card$uid, _data$card, _data$card2, _gameState$hands;\n      const uid = (_data$card$uid = (_data$card = data.card) === null || _data$card === void 0 ? void 0 : _data$card.uid) !== null && _data$card$uid !== void 0 ? _data$card$uid : (_data$card2 = data.card) === null || _data$card2 === void 0 ? void 0 : _data$card2.id;\n      const stateHand = ((_gameState$hands = gameState.hands) === null || _gameState$hands === void 0 ? void 0 : _gameState$hands[1]) || [];\n      const idxInState = stateHand.findIndex(c => {\n        var _c$uid2;\n        return ((_c$uid2 = c.uid) !== null && _c$uid2 !== void 0 ? _c$uid2 : c.id) === uid;\n      });\n      onCardClick(data);\n      return;\n    }\n\n    // Slot-Klick\n    if (data.type === 'row_slot') {\n      var _gameState$board$1$in, _gameState$board, _gameState$board$, _gameState$board$1$au, _gameState$board2, _gameState$board2$;\n      const lane = data.lane;\n      const cap = getLaneCapacity(lane);\n\n      // Hole aktuelle Row-Länge aus gameState\n      const rowCards = lane === 'public' ? (_gameState$board$1$in = (_gameState$board = gameState.board) === null || _gameState$board === void 0 ? void 0 : (_gameState$board$ = _gameState$board[1]) === null || _gameState$board$ === void 0 ? void 0 : _gameState$board$.innen) !== null && _gameState$board$1$in !== void 0 ? _gameState$board$1$in : [] : (_gameState$board$1$au = (_gameState$board2 = gameState.board) === null || _gameState$board2 === void 0 ? void 0 : (_gameState$board2$ = _gameState$board2[1]) === null || _gameState$board2$ === void 0 ? void 0 : _gameState$board2$.aussen) !== null && _gameState$board$1$au !== void 0 ? _gameState$board$1$au : [];\n      if (rowCards.length >= cap) {\n        // Optional: UI Feedback\n        console.warn(`Row ${lane} is full (${rowCards.length}/${cap})`);\n        return;\n      }\n      onCardClick(data);\n      return;\n    }\n\n    // Andere Klicks (empty_slot, board_card, etc.)\n    onCardClick(data);\n  }, [gameState, onCardClick]);\n  const handleClick = useCallback(e => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const rect = canvas.getBoundingClientRect();\n    const {\n      scale,\n      offsetX,\n      offsetY\n    } = getUiTransform(canvas.width, canvas.height);\n    const mx = (e.clientX - rect.left - offsetX) / scale;\n    const my = (e.clientY - rect.top - offsetY) / scale;\n    const hit = clickZonesRef.current.find(z => mx >= z.x && mx <= z.x + z.w && my >= z.y && my <= z.y + z.h);\n    if (hit) handleCardClick(hit.data);\n  }, [handleCardClick]);\n  const handleMouseMove = useCallback(e => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const rect = canvas.getBoundingClientRect();\n    const {\n      scale,\n      offsetX,\n      offsetY\n    } = getUiTransform(canvas.width, canvas.height);\n    const mx = (e.clientX - rect.left - offsetX) / scale;\n    const my = (e.clientY - rect.top - offsetY) / scale;\n    const hit = clickZonesRef.current.find(z => mx >= z.x && mx <= z.x + z.w && my >= z.y && my <= z.y + z.h);\n    if (hit) {\n      // expose hover for interactivity and visual feedback (used by CSS overlay hooks elsewhere)\n      onCardHover({\n        ...hit.data,\n        x: e.clientX,\n        y: e.clientY\n      });\n      // add a lightweight hover visual: push a transient ring event into clickZones for renderer\n      // we keep console logging minimal\n    } else {\n      onCardHover(null);\n    }\n  }, [onCardHover]);\n  const handleWheel = useCallback(e => {\n    // only enable when player1 has more slots than visible\n    const handLen = gameState.hands && gameState.hands[1] ? gameState.hands[1].length : 0;\n    const zone = getZone('hand.player');\n    if (!zone) return;\n    if (handLen <= 5) return; // nothing to scroll\n\n    // Prevent page scrolling when over canvas\n    e.preventDefault();\n\n    // accumulate target offset (invert so wheel down moves cards up)\n    // Each wheel step moves by 48px per delta unit\n    const delta = Math.sign(e.deltaY) * 48;\n    // compute slot height more robustly\n    const slots = computeSlotRects(zone);\n    const slotH = slots && slots.length > 0 ? slots[0].h : zone.rectPx[3] / 5;\n    const visible = 5;\n    const maxOffset = -(Math.max(0, handLen - visible) * slotH);\n    handScrollTargetRef.current = Math.max(Math.min(handScrollTargetRef.current - delta, 0), maxOffset);\n  }, [gameState.hands]);\n  const handleTouchStart = useCallback(e => {\n    if (!e.touches || e.touches.length === 0) return;\n    const handLen = gameState.hands && gameState.hands[1] ? gameState.hands[1].length : 0;\n    if (handLen <= 5) return;\n    isTouchingRef.current = true;\n    const y = e.touches[0].clientY;\n    touchStartYRef.current = y;\n    lastTouchYRef.current = y;\n    e.preventDefault();\n  }, [gameState.hands]);\n  const handleTouchMove = useCallback(e => {\n    var _lastTouchYRef$curren;\n    if (!isTouchingRef.current) return;\n    if (!e.touches || e.touches.length === 0) return;\n    const y = e.touches[0].clientY;\n    const last = (_lastTouchYRef$curren = lastTouchYRef.current) !== null && _lastTouchYRef$curren !== void 0 ? _lastTouchYRef$curren : y;\n    const dy = y - last; // positive when moving down\n    lastTouchYRef.current = y;\n\n    // invert so dragging up moves cards up\n    const delta = -dy;\n    const handLen = gameState.hands && gameState.hands[1] ? gameState.hands[1].length : 0;\n    const zone = getZone('hand.player');\n    if (!zone) return;\n    const slots = computeSlotRects(zone);\n    const slotH = slots && slots.length > 0 ? slots[0].h : zone.rectPx[3] / 5;\n    const visible = 5;\n    const maxOffset = -(Math.max(0, handLen - visible) * slotH);\n    handScrollTargetRef.current = Math.max(Math.min(handScrollTargetRef.current + delta, 0), maxOffset);\n    e.preventDefault();\n  }, [gameState.hands]);\n  const handleTouchEnd = useCallback(e => {\n    isTouchingRef.current = false;\n    touchStartYRef.current = null;\n    lastTouchYRef.current = null;\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    width: 1920,\n    height: 1080,\n    style: {\n      display: 'block',\n      width: '100%',\n      height: '100%',\n      imageRendering: 'auto'\n    },\n    onClick: handleClick,\n    onMouseMove: handleMouseMove,\n    onWheel: handleWheel,\n    onTouchStart: handleTouchStart,\n    onTouchMove: handleTouchMove,\n    onTouchEnd: handleTouchEnd\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 983,\n    columnNumber: 5\n  }, this);\n};\n_s(GameCanvas, \"YjCYHJzftCKTx7MBKlBFNopNY40=\");\n_c = GameCanvas;\nvar _c;\n$RefreshReg$(_c, \"GameCanvas\");","map":{"version":3,"names":["React","useRef","useEffect","useCallback","LAYOUT","getZone","computeSlotRects","getUiTransform","getLaneCapacity","getPublicRects","getGovernmentRects","sortHandCards","getCardImagePath","influenceIconUrl","slotIconManifest","jsxDEV","_jsxDEV","GameCanvas","gameState","selectedHandIndex","onCardClick","onCardHover","devMode","_s","canvasRef","clickZonesRef","handScrollTargetRef","handScrollCurrentRef","handScrollEnabledRef","touchStartYRef","lastTouchYRef","isTouchingRef","backgroundImageRef","imageCacheRef","Map","influenceImgRef","img","Image","src","current","drawCardAt","ctx","card","x","y","size","selected","showAPCost","player","_shield","dx","dy","s","Math","floor","cached","get","complete","drawImage","onload","set","kind","_influence","barH","max","fillStyle","fillRect","fontSize","font","textAlign","textBaseline","fillText","influence","protected","shield","beginPath","strokeStyle","lineWidth","arc","PI","stroke","deactivated","_influence2","badgeHeight","badgeWidth","badgeX","badgeY","roundRect","fill","globalAlpha","strokeRect","w","h","getSlotDisplayName","zoneId","index","slotNumber","includes","drawLane","lane","clickable","zone","slots","arr","board","forEach","idx","bgColor","isSelected","hands","clickZone","textY","name","push","data","type","slotName","iconKey","iconData","file","iconSrc","startsWith","ringColor","ring","cx","cy","r","min","requestAnimationFrame","draw","e","drawHandP1","hand","target","offsetY","round","i","originalIndex","findIndex","c","uid","isSel","sx","sy","drawHandP2","rectPx","drawInterventionsP1","traps","zx","zy","zw","zh","drawInterventionsP2","drawSingleSlot","clickType","slot","drawPermanentSlotsP1","permanentSlots","government","public","drawPermanentSlotsP2","drawInstantSlots","sofortPlayerCard","sofort","sofortOppCard","getActiveKeywordsAndSubcategories","allCards","innen","aussen","filter","keywords","Set","subcategories","tag","add","publicCard","oligarchNames","platformNames","movementNames","ngoNames","intelligenceNames","mediaNames","Array","from","drawInfoPanels","govPanelX","govPanelY","govPanelW","govPanelH","length","keyword","pubPanelX","pubPanelY","pubPanelW","pubPanelH","subcategory","displayName","substring","runDiagnostics","handZones","z","uiUIDs","map","_z$data$card$uid","id","Boolean","stateHand","stateUIDs","_c$uid","missingInState","u","missingInUI","_politicardDebug","mismatch","ts","Date","now","uiCount","stateCount","stack","Error","window","__politicardDebug","slice","concat","console","warn","error","canvas","getContext","clearRect","width","height","grad","createLinearGradient","addColorStop","save","vignette","createRadialGradient","restore","scale","offsetX","translate","opponentPublicRects","opponentGovRects","playerPublicRects","playerGovRects","uiTransform","canvasSize","zones","clickZones","DRAW_LAYOUT_OVERLAY","_LAYOUT$background","_LAYOUT$background2","background","enabled","onerror","_LAYOUT$background3","frame","loop","cancelAnimationFrame","handleCardClick","_data$card$uid","_data$card","_data$card2","_gameState$hands","idxInState","_c$uid2","_gameState$board$1$in","_gameState$board","_gameState$board$","_gameState$board$1$au","_gameState$board2","_gameState$board2$","cap","rowCards","handleClick","rect","getBoundingClientRect","mx","clientX","left","my","clientY","top","hit","find","handleMouseMove","handleWheel","handLen","preventDefault","delta","sign","deltaY","slotH","visible","maxOffset","handleTouchStart","touches","handleTouchMove","_lastTouchYRef$curren","last","handleTouchEnd","ref","style","display","imageRendering","onClick","onMouseMove","onWheel","onTouchStart","onTouchMove","onTouchEnd","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/skank/Videos/Cards/Milchcards/src/components/GameCanvas.tsx"],"sourcesContent":["import React, { useRef, useEffect, useCallback } from 'react';\r\nimport { GameState, Card, PoliticianCard, Player, Lane } from '../types/game';\r\nimport { LAYOUT, getZone, computeSlotRects, getUiTransform, getLaneCapacity, getPublicRects, getGovernmentRects, getSofortRect } from '../ui/layout';\r\nimport { drawCardImage, sortHandCards } from '../utils/gameUtils';\r\nimport { getNetApCost } from '../utils/ap';\r\nimport { getCardImagePath } from '../data/gameData';\r\nimport influenceIconUrl from '../assets/icons/influence.svg';\r\nimport slotIconManifest from '../assets/icons/manifest.json';\r\n\r\ninterface GameCanvasProps {\r\n  gameState: GameState;\r\n  selectedHandIndex: number | null;\r\n  onCardClick: (data: any) => void;\r\n  onCardHover: (data: any) => void;\r\n  devMode?: boolean; // 🔧 DEV MODE: Show P2 hand when true\r\n}\r\n\r\n\r\n\r\nexport const GameCanvas: React.FC<GameCanvasProps> = ({\r\n  gameState,\r\n  selectedHandIndex,\r\n  onCardClick,\r\n  onCardHover,\r\n  devMode = false,\r\n}) => {\r\n  const canvasRef = useRef<HTMLCanvasElement>(null);\r\n  const clickZonesRef = useRef<Array<{ x: number; y: number; w: number; h: number; data: any }>>([]);\r\n  // Smooth vertical scroll for P1 hand when it has more than visible slots\r\n  const handScrollTargetRef = useRef<number>(0);\r\n  const handScrollCurrentRef = useRef<number>(0);\r\n  const handScrollEnabledRef = useRef<boolean>(true);\r\n  // Touch handling refs\r\n  const touchStartYRef = useRef<number | null>(null);\r\n  const lastTouchYRef = useRef<number | null>(null);\r\n  const isTouchingRef = useRef<boolean>(false);\r\n  const backgroundImageRef = useRef<HTMLImageElement | null>(null);\r\n  const imageCacheRef = useRef<Map<string, HTMLImageElement>>(new Map());\r\n  const influenceImgRef = useRef<HTMLImageElement | null>(null);\r\n\r\n  // Load influence icon once\r\n  useEffect(() => {\r\n    const img = new Image();\r\n    img.src = influenceIconUrl;\r\n    influenceImgRef.current = img;\r\n  }, []);\r\n\r\n\r\n  const drawCardAt = useCallback((\r\n    ctx: CanvasRenderingContext2D,\r\n    card: Card,\r\n    x: number,\r\n    y: number,\r\n    size: number,\r\n    selected: boolean = false,\r\n    showAPCost: boolean = false,\r\n    player?: Player\r\n  ) => {\r\n    let dx = x, dy = y, s = size;\r\n    if (selected) {\r\n      s = Math.floor(size * 1.05);\r\n      dx = x - Math.floor((s - size) / 2);\r\n      dy = y - Math.floor((s - size) / 2);\r\n    }\r\n\r\n    // Draw card image with caching to prevent flicker in continuous loop\r\n    const src = getCardImagePath(card, 'ui');\r\n    const cached = imageCacheRef.current.get(src);\r\n    if (cached && cached.complete) {\r\n      ctx.drawImage(cached, dx, dy, s, s);\r\n    } else {\r\n      const img = new Image();\r\n      img.onload = () => {\r\n        imageCacheRef.current.set(src, img);\r\n        ctx.drawImage(img, dx, dy, s, s);\r\n      };\r\n      img.src = src;\r\n      imageCacheRef.current.set(src, img);\r\n    }\r\n\r\n    // Status-Indikatoren (für alle Board-Karten)\r\n    // Einfluss-Wert dauerhaft anzeigen (oben links) – nur für Regierungskarten\r\n    if ((card as any).kind === 'pol') {\r\n      const barH = Math.max(20, Math.floor(s * 0.12) + 6);\r\n      ctx.fillStyle = 'rgba(0,0,0,0.6)';\r\n      ctx.fillRect(dx, dy + s - barH, s, barH);\r\n\r\n      ctx.fillStyle = '#ffffff';\r\n      const fontSize = Math.floor(s * 0.12);\r\n      ctx.font = `bold ${fontSize}px sans-serif`;\r\n      ctx.textAlign = 'left';\r\n      ctx.textBaseline = 'middle';\r\n      ctx.fillText(`${(card as any).influence ?? 0}`, dx + 8, dy + s - barH / 2);\r\n    }\r\n    // Schutz-Status (blauer Punkt) + blue shimmer ring when active\r\n    if ((card as any).protected || ((card as any).shield ?? 0) > 0) {\r\n      ctx.fillStyle = '#1da1f2';\r\n      ctx.fillRect(dx + s - 22, dy + 6, 16, 16);\r\n      // shimmer ring\r\n      ctx.beginPath();\r\n      ctx.strokeStyle = 'rgba(29,161,242,0.18)';\r\n      ctx.lineWidth = 6;\r\n      ctx.arc(dx + s - 14, dy + 14, 18, 0, Math.PI * 2);\r\n      ctx.stroke();\r\n    }\r\n    // Deaktiviert-Status (roter Punkt) + desaturate image when deactivated\r\n    if ((card as any).deactivated) {\r\n      ctx.fillStyle = '#b63838';\r\n      ctx.fillRect(dx + s - 22, dy + 26, 16, 16);\r\n      // simple grayscale overlay to indicate deactivated\r\n      ctx.fillStyle = 'rgba(0,0,0,0.45)';\r\n      ctx.fillRect(dx, dy, s, s);\r\n    }\r\n\r\n    // Einfluss-Badge für Handkarten oben rechts (nur Regierungskarten)\r\n    if (showAPCost && player && (card as any).kind === 'pol') {\r\n      const badgeHeight = Math.max(16, Math.floor(s * 0.12));\r\n      const badgeWidth = badgeHeight * 2;\r\n      const badgeX = dx + s - badgeWidth - 6;\r\n      const badgeY = dy + 6;\r\n\r\n      // Semi-transparent dunkler Hintergrund\r\n      ctx.fillStyle = 'rgba(0,0,0,0.6)';\r\n      ctx.beginPath();\r\n      ctx.roundRect(badgeX, badgeY, badgeWidth, badgeHeight, badgeHeight / 2);\r\n      ctx.fill();\r\n\r\n      // Influence icon (90% opacity) links im Badge\r\n      if (influenceImgRef.current && influenceImgRef.current.complete) {\r\n        ctx.globalAlpha = 0.9;\r\n        ctx.drawImage(influenceImgRef.current, badgeX + 2, badgeY + 2, badgeHeight - 4, badgeHeight - 4);\r\n        ctx.globalAlpha = 1;\r\n      }\r\n\r\n      // Influence number rechts im Badge\r\n      ctx.fillStyle = '#ffffff';\r\n      ctx.font = `bold ${Math.floor(badgeHeight * 0.5)}px sans-serif`;\r\n      ctx.textAlign = 'right';\r\n      ctx.textBaseline = 'middle';\r\n      ctx.fillText(`${(card as any).influence ?? 0}`, badgeX + badgeWidth - 4, badgeY + badgeHeight / 2);\r\n\r\n      // Reset align\r\n      ctx.textAlign = 'start';\r\n      ctx.textBaseline = 'alphabetic';\r\n    }\r\n\r\n    // Auswahl-Rahmen\r\n    if (selected) {\r\n      ctx.strokeStyle = '#61dafb';\r\n      ctx.lineWidth = 3;\r\n      ctx.strokeRect(dx + 1, dy + 1, s - 2, s - 2);\r\n      ctx.lineWidth = 1;\r\n    }\r\n\r\n    // Return exact 256x256 click zone over the card\r\n    // Since all cards are 256x256, the click zone should match exactly\r\n    return { x: dx, y: dy, w: 256, h: 256 };\r\n  }, [gameState]);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  // Slot-Benennungs-Funktion basierend auf Glossar\r\n  const getSlotDisplayName = useCallback((zoneId: string, index: number, player: Player): string => {\r\n    const slotNumber = index + 1;\r\n\r\n    if (zoneId.includes('government')) {\r\n      if (zoneId.includes('player')) {\r\n        return `Regierungsreihe Slot ${slotNumber}`;\r\n      } else {\r\n        return `Gegner Regierung Slot ${slotNumber}`;\r\n      }\r\n    } else if (zoneId.includes('public')) {\r\n      if (zoneId.includes('player')) {\r\n        return `Öffentlichkeitsreihe Slot ${slotNumber}`;\r\n      } else {\r\n        return `Gegner Öffentlichkeit Slot ${slotNumber}`;\r\n      }\r\n    } else if (zoneId.includes('permanent.government')) {\r\n      if (zoneId.includes('player')) {\r\n        return 'Regierung Spezial-Slot';\r\n      } else {\r\n        return 'Gegner Regierung Spezial-Slot';\r\n      }\r\n    } else if (zoneId.includes('permanent.public')) {\r\n      if (zoneId.includes('player')) {\r\n        return 'Öffentlichkeit Spezial-Slot';\r\n      } else {\r\n        return 'Gegner Öffentlichkeit Spezial-Slot';\r\n      }\r\n    } else if (zoneId.includes('instant')) {\r\n      if (zoneId.includes('player')) {\r\n        return 'Sofort-Slot';\r\n      } else {\r\n        return 'Gegner Sofort-Slot';\r\n      }\r\n    } else if (zoneId.includes('hand')) {\r\n      return 'Hand';\r\n    } else if (zoneId.includes('interventions')) {\r\n      return 'Interventionen';\r\n    }\r\n\r\n    return `Slot ${slotNumber}`;\r\n  }, []);\r\n\r\n  const drawLane = useCallback((\r\n    ctx: CanvasRenderingContext2D,\r\n    zoneId: string,\r\n    player: Player,\r\n    lane: Lane,\r\n    clickable: boolean\r\n  ) => {\r\n    const zone = getZone(zoneId);\r\n    if (!zone) return;\r\n\r\n    const slots = computeSlotRects(zone);\r\n    const arr = gameState.board[player][lane];\r\n\r\n    slots.forEach((s, idx) => {\r\n      const card = arr[idx];\r\n\r\n      // Hintergrundfarbe nach Kategorie\r\n      let bgColor = 'rgba(0,0,0,0.1)'; // Standard\r\n      if (zoneId.includes('government')) {\r\n        bgColor = 'rgba(255, 197, 0, 0.15)'; // Hellgelb für Regierung\r\n      } else if (zoneId.includes('public')) {\r\n        bgColor = 'rgba(0, 255, 0, 0.15)'; // Hellgrün für Öffentlichkeit\r\n      }\r\n\r\n      ctx.fillStyle = bgColor;\r\n      ctx.fillRect(s.x, s.y, s.w, s.h);\r\n\r\n      // Slot-Rahmen\r\n      ctx.strokeStyle = 'rgba(255,255,255,0.06)';\r\n      ctx.strokeRect(s.x + 0.5, s.y + 0.5, s.w - 1, s.h - 1);\r\n\r\n      if (card) {\r\n        const isSelected = player === 1 && selectedHandIndex !== null && gameState.hands[1][selectedHandIndex] === card;\r\n        const clickZone = drawCardAt(ctx, card, s.x, s.y, s.w, isSelected, false);\r\n\r\n        // Kartenname unter dem Slot anzeigen\r\n        ctx.fillStyle = 'rgba(255,255,255,0.9)';\r\n        ctx.font = 'bold 12px sans-serif';\r\n        ctx.textAlign = 'center';\r\n        const textY = s.y + s.h + 16;\r\n        ctx.fillText(card.name, s.x + s.w/2, textY);\r\n\r\n        clickZonesRef.current.push({\r\n          ...clickZone,\r\n          data: { type: 'board_card', player, lane, index: idx, card }\r\n        });\r\n      } else if (clickable && gameState.current === player) {\r\n        // Slot-Benennung anzeigen (für den aktuellen Spieler)\r\n        const slotName = getSlotDisplayName(zoneId, idx, player);\r\n        ctx.fillStyle = 'rgba(255,255,255,0.6)';\r\n        ctx.font = '11px sans-serif';\r\n        ctx.textAlign = 'center';\r\n        const textY = s.y + s.h/2;\r\n        ctx.fillText(slotName, s.x + s.w/2, textY);\r\n\r\n        clickZonesRef.current.push({\r\n          x: s.x, y: s.y, w: s.w, h: s.h,\r\n          data: { type: 'row_slot', lane, index: idx }\r\n        });\r\n        // Draw slot icon for empty slots (use manifest mapping)\r\n        try {\r\n          const iconKey = zoneId.includes('government') ? 'government-row' : 'public-row';\r\n          const iconData = (slotIconManifest as any)[iconKey];\r\n          if (iconData && iconData.file) {\r\n            const iconSrc = iconData.file.startsWith('/') ? iconData.file : iconData.file;\r\n            // draw small ring + icon centered in slot\r\n            const ringColor = iconData.ring || 'rgba(255,255,255,0.06)';\r\n            const cx = s.x + s.w/2;\r\n            const cy = s.y + s.h/2;\r\n            const r = Math.min(s.w, s.h) * 0.18;\r\n            ctx.beginPath();\r\n            ctx.strokeStyle = ringColor;\r\n            ctx.lineWidth = 3;\r\n            ctx.arc(cx, cy, r + 6, 0, Math.PI * 2);\r\n            ctx.stroke();\r\n            // try to draw svg via cached image\r\n            const cached = imageCacheRef.current.get(iconSrc);\r\n            if (cached && cached.complete) {\r\n              ctx.globalAlpha = 0.95;\r\n              ctx.drawImage(cached, cx - r, cy - r, r*2, r*2);\r\n              ctx.globalAlpha = 1;\r\n            } else {\r\n              const img = new Image();\r\n              img.onload = () => { imageCacheRef.current.set(iconSrc, img); requestAnimationFrame(draw); };\r\n              img.src = iconSrc;\r\n              imageCacheRef.current.set(iconSrc, img);\r\n            }\r\n          }\r\n        } catch (e) {}\r\n      }\r\n    });\r\n  }, [gameState, selectedHandIndex, drawCardAt, getSlotDisplayName]);\r\n\r\n  const drawHandP1 = useCallback((ctx: CanvasRenderingContext2D) => {\r\n    const hand = sortHandCards(gameState.hands[1]);\r\n    const zone = getZone('hand.player');\r\n    if (!zone) return;\r\n\r\n    const slots = computeSlotRects(zone);\r\n    // Apply smooth offset (lerp towards target)\r\n    const target = handScrollTargetRef.current;\r\n    handScrollCurrentRef.current += (target - handScrollCurrentRef.current) * 0.15; // easing\r\n    const offsetY = Math.round(handScrollCurrentRef.current);\r\n    slots.forEach((s: { x: number; y: number; w: number; h: number }, i: number) => {\r\n      const card = hand[i];\r\n      if (!card) return;\r\n      // Find original index in unsorted hand for click handling\r\n      const originalIndex = gameState.hands[1].findIndex(c => c.uid === card.uid);\r\n      const isSel = selectedHandIndex === originalIndex;\r\n      // apply vertical offset\r\n      const sx = s.x;\r\n      const sy = s.y + offsetY;\r\n      const clickZone = drawCardAt(ctx, card, sx, sy, s.w, isSel, true, 1); // Show AP cost for player 1 hand\r\n      clickZonesRef.current.push({ ...clickZone, data: { type: 'hand_p1', index: originalIndex, card } });\r\n    });\r\n  }, [gameState.hands, selectedHandIndex, drawCardAt]);\r\n\r\n      // 🔧 DEV MODE: Player 2 Hand (rechts unten, kompakter)\r\n  const drawHandP2 = useCallback((ctx: CanvasRenderingContext2D) => {\r\n    const hand = sortHandCards(gameState.hands[2]);\r\n    const zone = getZone('hand.opponent');\r\n    if (!zone) return;\r\n\r\n    const slots = computeSlotRects(zone);\r\n\r\n    // Hintergrund für P2 Hand\r\n    const [x, y, w, h] = zone.rectPx;\r\n    ctx.fillStyle = 'rgba(255, 100, 100, 0.15)'; // Rötlicher Hintergrund für P2\r\n    ctx.fillRect(x, y, w, h);\r\n    ctx.strokeStyle = 'rgba(255, 100, 100, 0.3)';\r\n    ctx.strokeRect(x + 0.5, y + 0.5, w - 1, h - 1);\r\n\r\n    // Label für P2 Hand\r\n    ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\r\n    ctx.font = 'bold 14px sans-serif';\r\n    ctx.textAlign = 'center';\r\n    ctx.fillText('Player 2 Hand', x + w/2, y - 8);\r\n\r\n    slots.forEach((s: { x: number; y: number; w: number; h: number }, i: number) => {\r\n      const card = hand[i];\r\n      if (!card) return;\r\n      // Find original index in unsorted hand for click handling\r\n      const originalIndex = gameState.hands[2].findIndex(c => c.uid === card.uid);\r\n      const isSel = gameState.current === 2 && selectedHandIndex === originalIndex;\r\n      const clickZone = drawCardAt(ctx, card, s.x, s.y, s.w, isSel, true, 2); // Show AP cost for player 2 hand\r\n      clickZonesRef.current.push({ ...clickZone, data: { type: 'hand_p2', index: originalIndex, card } });\r\n    });\r\n  }, [gameState, selectedHandIndex, drawCardAt]);\r\n  // Interventions strip (player traps)\r\n  const drawInterventionsP1 = useCallback((ctx: CanvasRenderingContext2D) => {\r\n    const traps = gameState.traps[1] || [];\r\n    const zone = getZone('interventions.player');\r\n    if (!zone) return;\r\n\r\n    // Single intervention slot\r\n    const [zx, zy, zw, zh] = zone.rectPx;\r\n    const card = traps[0]; // Only first trap\r\n\r\n    // Hintergrund für Interventions-Slot\r\n    ctx.fillStyle = 'rgba(200, 160, 255, 0.15)'; // Lavendelfarben für Interventionen\r\n    ctx.fillRect(zx, zy, zw, zh);\r\n    ctx.strokeStyle = 'rgba(200, 160, 255, 0.3)';\r\n    ctx.strokeRect(zx + 0.5, zy + 0.5, zw - 1, zh - 1);\r\n\r\n    // Slot-Benennung für Interventions-Slot\r\n    ctx.fillStyle = 'rgba(200, 160, 255, 0.8)';\r\n    ctx.font = '11px sans-serif';\r\n    ctx.textAlign = 'left';\r\n    ctx.fillText('Intervention', zx + 8, zy + zh - 6);\r\n\r\n    if (card) {\r\n      const clickZone = drawCardAt(ctx, card, zx, zy, zw, false, false);\r\n      clickZonesRef.current.push({ ...clickZone, data: { type: 'trap_p1', index: 0, card } });\r\n    }\r\n  }, [gameState.traps, drawCardAt]);\r\n\r\n  // Interventions strip (opponent traps)\r\n  const drawInterventionsP2 = useCallback((ctx: CanvasRenderingContext2D) => {\r\n    const traps = gameState.traps[2] || [];\r\n    const zone = getZone('interventions.opponent');\r\n    if (!zone) return;\r\n\r\n    // Single intervention slot\r\n    const [zx, zy, zw, zh] = zone.rectPx;\r\n    const card = traps[0]; // Only first trap\r\n\r\n    // Hintergrund für Interventions-Slot\r\n    ctx.fillStyle = 'rgba(200, 160, 255, 0.15)'; // Lavendelfarben für Interventionen\r\n    ctx.fillRect(zx, zy, zw, zh);\r\n    ctx.strokeStyle = 'rgba(200, 160, 255, 0.3)';\r\n    ctx.strokeRect(zx + 0.5, zy + 0.5, zw - 1, zh - 1);\r\n\r\n    // Slot-Benennung für Interventions-Slot\r\n    ctx.fillStyle = 'rgba(200, 160, 255, 0.8)';\r\n    ctx.font = '11px sans-serif';\r\n    ctx.textAlign = 'left';\r\n    ctx.fillText('Intervention', zx + 8, zy + zh - 6);\r\n\r\n    if (card) {\r\n      const clickZone = drawCardAt(ctx, card, zx, zy, zw, false, false);\r\n      clickZonesRef.current.push({ ...clickZone, data: { type: 'trap_p2', index: 0, card } });\r\n    }\r\n  }, [gameState.traps, drawCardAt]);\r\n\r\n  // Single slot drawing function\r\n  const drawSingleSlot = useCallback((\r\n    ctx: CanvasRenderingContext2D,\r\n    zoneId: string,\r\n    card: Card | null,\r\n    clickType: string,\r\n    player: Player\r\n  ) => {\r\n    const zone = getZone(zoneId);\r\n    if (!zone) return;\r\n    const [x, y, w, h] = zone.rectPx;\r\n\r\n    // Hintergrundfarbe nach Kategorie\r\n    let bgColor = 'rgba(0,0,0,0.1)'; // Standard\r\n    if (zoneId.includes('government')) {\r\n      bgColor = 'rgba(255, 197, 0, 0.15)'; // Hellgelb für Regierung\r\n    } else if (zoneId.includes('public')) {\r\n      bgColor = 'rgba(0, 255, 0, 0.15)'; // Hellgrün für Öffentlichkeit\r\n    } else if (zoneId.includes('instant')) {\r\n      bgColor = 'rgba(127, 116, 91, 0.15)'; // Neutral für Sofort-Slots\r\n    } else if (zoneId.includes('permanent')) {\r\n      // Unterscheide zwischen government und public permanent slots\r\n      if (zoneId.includes('government')) {\r\n        bgColor = 'rgba(255, 197, 0, 0.15)';\r\n      } else if (zoneId.includes('public')) {\r\n        bgColor = 'rgba(0, 255, 0, 0.15)';\r\n      }\r\n    }\r\n\r\n    ctx.fillStyle = bgColor;\r\n    ctx.fillRect(x, y, w, h);\r\n\r\n    // Draw slot border\r\n    ctx.strokeStyle = 'rgba(255,255,255,0.06)';\r\n    ctx.strokeRect(x + 0.5, y + 0.5, w - 1, h - 1);\r\n\r\n    if (card) {\r\n      const isSelected = player === 1 && selectedHandIndex !== null && gameState.hands[1][selectedHandIndex] === card;\r\n      const clickZone = drawCardAt(ctx, card, x, y, w, isSelected, false);\r\n\r\n      // Kartenname unter dem Slot anzeigen\r\n      ctx.fillStyle = 'rgba(255,255,255,0.9)';\r\n      ctx.font = 'bold 12px sans-serif';\r\n      ctx.textAlign = 'center';\r\n      const textY = y + h + 16;\r\n      ctx.fillText(card.name, x + w/2, textY);\r\n\r\n      clickZonesRef.current.push({ ...clickZone, data: { type: 'slot_card', slot: clickType, card } });\r\n\r\n      // 🔧 NEU: Sofort-Initiative-Slots sind klickbar für Aktivierung\r\n      if (clickType === 'instant' && gameState.current === player) {\r\n        clickZonesRef.current.push({\r\n          x, y, w, h,\r\n          data: { type: 'activate_instant', player, card }\r\n        });\r\n      }\r\n    } else if (gameState.current === player) {\r\n      // Slot-Benennung für leere Slots anzeigen (für den aktuellen Spieler)\r\n      const slotName = getSlotDisplayName(zoneId, 0, player);\r\n      ctx.fillStyle = 'rgba(255,255,255,0.6)';\r\n      ctx.font = '11px sans-serif';\r\n      ctx.textAlign = 'center';\r\n      const textY = y + h/2;\r\n      ctx.fillText(slotName, x + w/2, textY);\r\n\r\n      clickZonesRef.current.push({ x, y, w, h, data: { type: 'empty_slot', slot: clickType } });\r\n    }\r\n  }, [selectedHandIndex, gameState, drawCardAt, getSlotDisplayName]);\r\n\r\n  // Draw permanent slots for player\r\n  const drawPermanentSlotsP1 = useCallback((ctx: CanvasRenderingContext2D) => {\r\n    drawSingleSlot(ctx, 'slot.permanent.government.player', gameState.permanentSlots[1].government, 'permanent_government', 1);\r\n    drawSingleSlot(ctx, 'slot.permanent.public.player', gameState.permanentSlots[1].public, 'permanent_public', 1);\r\n  }, [gameState.permanentSlots, drawSingleSlot]);\r\n\r\n  // Draw permanent slots for opponent\r\n  const drawPermanentSlotsP2 = useCallback((ctx: CanvasRenderingContext2D) => {\r\n    drawSingleSlot(ctx, 'slot.permanent.government.opponent', gameState.permanentSlots[2].government, 'permanent_government', 2);\r\n    drawSingleSlot(ctx, 'slot.permanent.public.opponent', gameState.permanentSlots[2].public, 'permanent_public', 2);\r\n  }, [gameState.permanentSlots, drawSingleSlot]);\r\n\r\n  // Draw instant slots\r\n  const drawInstantSlots = useCallback((ctx: CanvasRenderingContext2D) => {\r\n    // Sofort-Initiative-Slots aus dem Board zeichnen\r\n    const sofortPlayerCard = gameState.board[1].sofort[0];\r\n    const sofortOppCard = gameState.board[2].sofort[0];\r\n\r\n    drawSingleSlot(ctx, 'slot.instant.player', sofortPlayerCard, 'instant', 1);\r\n    drawSingleSlot(ctx, 'slot.instant.opponent', sofortOppCard, 'instant', 2);\r\n  }, [gameState.board, drawSingleSlot]);\r\n\r\n  // Aktive Schlüsselwörter und Unterkategorien ermitteln\r\n  const getActiveKeywordsAndSubcategories = useCallback((player: Player) => {\r\n    const board = gameState.board[player];\r\n    const permanentSlots = gameState.permanentSlots[player];\r\n    const allCards = [\r\n      ...board.innen,\r\n      ...board.aussen,\r\n      permanentSlots.government,\r\n      permanentSlots.public\r\n    ].filter(c => c && c.kind === 'pol') as PoliticianCard[];\r\n\r\n    const keywords = new Set<string>();\r\n    const subcategories = new Set<string>();\r\n\r\n    allCards.forEach(card => {\r\n      if (!card.deactivated) {\r\n        // Regierungskarten-Schlüsselwörter\r\n        if (card.tag === 'Leadership') {\r\n          keywords.add('Leadership');\r\n        }\r\n        if (card.tag === 'Diplomat') {\r\n          keywords.add('Diplomat');\r\n        }\r\n\r\n        // Öffentlichkeits-Unterkategorien (für Karten in Öffentlichkeitsreihe)\r\n        if (board.innen.includes(card)) {\r\n          const publicCard = card as any;\r\n          if (publicCard.tag) {\r\n            // Oligarch\r\n            const oligarchNames = ['Elon Musk', 'Bill Gates', 'George Soros', 'Warren Buffett', 'Mukesh Ambani', 'Jeff Bezos', 'Alisher Usmanov', 'Gautam Adani', 'Jack Ma', 'Zhang Yiming', 'Roman Abramovich'];\r\n            if (oligarchNames.includes(publicCard.name)) {\r\n              subcategories.add('Oligarch');\r\n            }\r\n\r\n            // Plattform\r\n            const platformNames = ['Mark Zuckerberg', 'Tim Cook', 'Sam Altman', 'Jack Ma'];\r\n            if (platformNames.includes(publicCard.name)) {\r\n              subcategories.add('Plattform');\r\n            }\r\n\r\n            // Bewegung\r\n            const movementNames = ['Greta Thunberg', 'Malala Yousafzai', 'Ai Weiwei', 'Alexei Navalny'];\r\n            if (movementNames.includes(publicCard.name)) {\r\n              subcategories.add('Bewegung');\r\n            }\r\n\r\n            // NGO/Think-Tank\r\n            const ngoNames = ['Bill Gates', 'George Soros', 'Jennifer Doudna', 'Noam Chomsky', 'Anthony Fauci'];\r\n            if (ngoNames.includes(publicCard.name)) {\r\n              subcategories.add('NGO/Think-Tank');\r\n            }\r\n\r\n            // Intelligenz\r\n            const intelligenceNames = ['Jennifer Doudna', 'Noam Chomsky', 'Edward Snowden', 'Julian Assange', 'Yuval Noah Harari', 'Ai Weiwei', 'Alexei Navalny', 'Anthony Fauci'];\r\n            if (intelligenceNames.includes(publicCard.name)) {\r\n              subcategories.add('Intelligenz');\r\n            }\r\n\r\n            // Medien\r\n            const mediaNames = ['Oprah Winfrey'];\r\n            if (mediaNames.includes(publicCard.name)) {\r\n              subcategories.add('Medien');\r\n            }\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    return {\r\n      keywords: Array.from(keywords),\r\n      subcategories: Array.from(subcategories)\r\n    };\r\n  }, [gameState]);\r\n\r\n  // Info-Panels zeichnen\r\n  const drawInfoPanels = useCallback((ctx: CanvasRenderingContext2D) => {\r\n    const { keywords, subcategories } = getActiveKeywordsAndSubcategories(1);\r\n\r\n    // Panel für Regierungsschlüsselwörter (rechts neben Regierungsslots)\r\n    const govPanelX = 1640 + 256 + 20; // Nach dem letzten permanenten Slot\r\n    const govPanelY = 300; // Auf Höhe der Regierungsslots\r\n    const govPanelW = 120;\r\n    const govPanelH = 256;\r\n\r\n    // Regierungspanel Hintergrund\r\n    ctx.fillStyle = 'rgba(255, 197, 0, 0.15)';\r\n    ctx.fillRect(govPanelX, govPanelY, govPanelW, govPanelH);\r\n    ctx.strokeStyle = 'rgba(255, 197, 0, 0.3)';\r\n    ctx.strokeRect(govPanelX + 0.5, govPanelY + 0.5, govPanelW - 1, govPanelH - 1);\r\n\r\n    // Regierungspanel Titel\r\n    ctx.fillStyle = 'rgba(255, 197, 0, 0.9)';\r\n    ctx.font = 'bold 12px sans-serif';\r\n    ctx.textAlign = 'center';\r\n    ctx.fillText('Regierung', govPanelX + govPanelW/2, govPanelY + 16);\r\n\r\n    // Schlüsselwörter auflisten\r\n    ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\r\n    ctx.font = '11px sans-serif';\r\n    ctx.textAlign = 'left';\r\n    if (keywords.length > 0) {\r\n      keywords.forEach((keyword, idx) => {\r\n        ctx.fillText(`• ${keyword}`, govPanelX + 8, govPanelY + 36 + idx * 16);\r\n      });\r\n    } else {\r\n      ctx.fillStyle = 'rgba(255, 255, 255, 0.5)';\r\n      ctx.fillText('Keine aktiven', govPanelX + 8, govPanelY + 36);\r\n      ctx.fillText('Schlüsselwörter', govPanelX + 8, govPanelY + 52);\r\n    }\r\n\r\n    // Panel für Öffentlichkeits-Unterkategorien (rechts neben Öffentlichkeitsslots)\r\n    const pubPanelX = 1640 + 256 + 20;\r\n    const pubPanelY = 580; // Auf Höhe der Öffentlichkeitsslots\r\n    const pubPanelW = 120;\r\n    const pubPanelH = 256;\r\n\r\n    // Öffentlichkeitspanel Hintergrund\r\n    ctx.fillStyle = 'rgba(0, 255, 0, 0.15)';\r\n    ctx.fillRect(pubPanelX, pubPanelY, pubPanelW, pubPanelH);\r\n    ctx.strokeStyle = 'rgba(0, 255, 0, 0.3)';\r\n    ctx.strokeRect(pubPanelX + 0.5, pubPanelY + 0.5, pubPanelW - 1, pubPanelH - 1);\r\n\r\n    // Öffentlichkeitspanel Titel\r\n    ctx.fillStyle = 'rgba(0, 255, 0, 0.9)';\r\n    ctx.font = 'bold 12px sans-serif';\r\n    ctx.textAlign = 'center';\r\n    ctx.fillText('Öffentlichkeit', pubPanelX + pubPanelW/2, pubPanelY + 16);\r\n\r\n    // Unterkategorien auflisten\r\n    ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\r\n    ctx.font = '11px sans-serif';\r\n    ctx.textAlign = 'left';\r\n    if (subcategories.length > 0) {\r\n      subcategories.forEach((subcategory, idx) => {\r\n        const displayName = subcategory.length > 12 ? subcategory.substring(0, 10) + '...' : subcategory;\r\n        ctx.fillText(`• ${displayName}`, pubPanelX + 8, pubPanelY + 36 + idx * 16);\r\n      });\r\n    } else {\r\n      ctx.fillStyle = 'rgba(255, 255, 255, 0.5)';\r\n      ctx.fillText('Keine aktiven', pubPanelX + 8, pubPanelY + 36);\r\n      ctx.fillText('Unterkategorien', pubPanelX + 8, pubPanelY + 52);\r\n    }\r\n  }, [getActiveKeywordsAndSubcategories]);\r\n\r\n  // Move diagnostics to draw callback to ensure they run after canvas is actually rendered\r\n  const runDiagnostics = useCallback(() => {\r\n    try {\r\n      const handZones = clickZonesRef.current.filter(z => z.data && z.data.type === 'hand_p1');\r\n      const uiUIDs = handZones.map(z => (z.data.card && (z.data.card.uid ?? z.data.card.id)) ).filter(Boolean);\r\n      const stateHand = gameState.hands && gameState.hands[1] ? gameState.hands[1] : [];\r\n      const stateUIDs = stateHand.map((c: any) => c.uid ?? c.id).filter(Boolean);\r\n\r\n      const missingInState = uiUIDs.filter((u: any) => !stateUIDs.includes(u));\r\n      const missingInUI = stateUIDs.filter((u: any) => !uiUIDs.includes(u));\r\n\r\n      // Only warn if there are cards in UI that don't exist in state (real error)\r\n      // Don't warn about missing UI cards due to limited slot capacity\r\n      if (missingInState.length > 0) {\r\n        const mismatch = {\r\n          ts: Date.now(),\r\n          uiCount: uiUIDs.length,\r\n          stateCount: stateUIDs.length,\r\n          uiUIDs,\r\n          stateUIDs,\r\n          missingInState,\r\n          missingInUI,\r\n          stack: (new Error('mismatch-stack')).stack\r\n        };\r\n        (window as any).__politicardDebug = {\r\n          ...(window as any).__politicardDebug,\r\n          mismatch: [ ...(window as any).__politicardDebug?.mismatch || [] ].slice(-19).concat([mismatch])\r\n        };\r\n        // Clear, then log to console so user can copy/paste trace\r\n        console.warn('POLITICARD DIAGNOSTIC: hand mismatch detected', mismatch);\r\n      }\r\n    } catch (e) {\r\n      // swallow diagnostic errors to avoid breaking rendering\r\n      console.error('Diagnostic error', e);\r\n    }\r\n  }, [gameState.hands]);\r\n\r\n  const draw = useCallback(() => {\r\n    const canvas = canvasRef.current;\r\n    if (!canvas) return;\r\n\r\n    const ctx = canvas.getContext('2d');\r\n    if (!ctx) return;\r\n\r\n    // Clear canvas\r\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n    // Clear click zones\r\n    clickZonesRef.current = [];\r\n\r\n    // Unified procedural background (remove PNG dependence) — subtle gradients + vignette\r\n    const grad = ctx.createLinearGradient(0, 0, 0, canvas.height);\r\n    grad.addColorStop(0, '#081018');\r\n    grad.addColorStop(0.6, '#0c131b');\r\n    grad.addColorStop(1, '#061018');\r\n    ctx.fillStyle = grad;\r\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n    // Vignette\r\n    ctx.save();\r\n    const vignette = ctx.createRadialGradient(canvas.width/2, canvas.height/2, canvas.width/4, canvas.width/2, canvas.height/2, Math.max(canvas.width, canvas.height));\r\n    vignette.addColorStop(0, 'rgba(0,0,0,0)');\r\n    vignette.addColorStop(1, 'rgba(0,0,0,0.45)');\r\n    ctx.fillStyle = vignette;\r\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n    ctx.restore();\r\n\r\n    // Apply UI transform (new signature)\r\n    const { scale, offsetX, offsetY } = getUiTransform(canvas.width, canvas.height);\r\n    ctx.save();\r\n    ctx.translate(offsetX, offsetY);\r\n    ctx.scale(scale, scale);\r\n\r\n    // Draw opponent board (top rows) - clickable im Dev Mode\r\n    // Draw opponent board using new layout system\r\n    const opponentPublicRects = getPublicRects('opponent');\r\n    const opponentGovRects = getGovernmentRects('opponent');\r\n\r\n    // Draw opponent public slots\r\n    opponentPublicRects.forEach((s: { x: number; y: number; w: number; h: number }, idx: number) => {\r\n      const card = gameState.board[2].innen[idx];\r\n      if (card) {\r\n        drawCardAt(ctx, card, s.x, s.y, s.w, false, false, 2);\r\n      }\r\n    });\r\n\r\n    // Draw opponent government slots\r\n    opponentGovRects.forEach((s: { x: number; y: number; w: number; h: number }, idx: number) => {\r\n      const card = gameState.board[2].aussen[idx];\r\n      if (card) {\r\n        drawCardAt(ctx, card, s.x, s.y, s.w, false, false, 2);\r\n      }\r\n    });\r\n\r\n    // Draw opponent permanent slots\r\n    drawPermanentSlotsP2(ctx);\r\n\r\n    // Draw player board (middle rows)\r\n    // Draw player board using new layout system\r\n    const playerPublicRects = getPublicRects('player');\r\n    const playerGovRects = getGovernmentRects('player');\r\n\r\n    // Draw player public slots\r\n    playerPublicRects.forEach((s: { x: number; y: number; w: number; h: number }, idx: number) => {\r\n      const card = gameState.board[1].innen[idx];\r\n      if (card) {\r\n        const clickZone = drawCardAt(ctx, card, s.x, s.y, s.w, false, false, 1);\r\n        clickZonesRef.current.push({\r\n          ...clickZone,\r\n          data: { type: 'row_slot', player: 1, lane: 'innen', index: idx }\r\n        });\r\n      } else {\r\n        // Empty slot click zone\r\n        clickZonesRef.current.push({\r\n          x: s.x, y: s.y, w: s.w, h: s.h,\r\n          data: { type: 'row_slot', player: 1, lane: 'innen', index: idx }\r\n        });\r\n      }\r\n    });\r\n\r\n    // Draw player government slots\r\n    playerGovRects.forEach((s: { x: number; y: number; w: number; h: number }, idx: number) => {\r\n      const card = gameState.board[1].aussen[idx];\r\n      if (card) {\r\n        const clickZone = drawCardAt(ctx, card, s.x, s.y, s.w, false, false, 1);\r\n        clickZonesRef.current.push({\r\n          ...clickZone,\r\n          data: { type: 'row_slot', player: 1, lane: 'aussen', index: idx }\r\n        });\r\n      } else {\r\n        // Empty slot click zone\r\n        clickZonesRef.current.push({\r\n          x: s.x, y: s.y, w: s.w, h: s.h,\r\n          data: { type: 'row_slot', player: 1, lane: 'aussen', index: idx }\r\n        });\r\n      }\r\n    });\r\n\r\n    // Draw player permanent slots\r\n    drawPermanentSlotsP1(ctx);\r\n\r\n    // Draw instant slots (both players)\r\n    drawInstantSlots(ctx);\r\n\r\n    // Draw interventions strip (player)\r\n    drawInterventionsP1(ctx);\r\n\r\n    // Draw interventions strip (opponent) - nur im Dev Mode\r\n    if (devMode) {\r\n      drawInterventionsP2(ctx);\r\n    }\r\n\r\n    // Draw hand (P1)\r\n    drawHandP1(ctx);\r\n\r\n    // 🔧 DEV MODE: Draw hand (P2) - nur im Dev Mode\r\n    if (devMode) {\r\n      drawHandP2(ctx);\r\n    }\r\n\r\n    // Draw info panels\r\n    drawInfoPanels(ctx);\r\n\r\n    ctx.restore();\r\n\r\n    // expose zones for debug snapshot\r\n    (window as any).__politicardDebug = {\r\n      uiTransform: getUiTransform(canvas.width, canvas.height),\r\n      canvasSize: { width: canvas.width, height: canvas.height },\r\n      zones: LAYOUT.zones,\r\n      clickZones: clickZonesRef.current.slice(0, 1000)\r\n    };\r\n\r\n    // Run diagnostics after canvas is fully rendered\r\n    runDiagnostics();\r\n  }, [drawLane, drawHandP1, drawHandP2, drawInterventionsP1, drawInterventionsP2, drawPermanentSlotsP1, drawPermanentSlotsP2, drawInstantSlots, drawInfoPanels, devMode, runDiagnostics]);\r\n\r\n  const DRAW_LAYOUT_OVERLAY = false; // force off per new layout system\r\n\r\n  // Load background image if configured\r\n  useEffect(() => {\r\n    if (LAYOUT.background?.enabled && LAYOUT.background?.src) {\r\n      const img = new Image();\r\n      img.onload = () => { backgroundImageRef.current = img; requestAnimationFrame(draw); };\r\n      img.onerror = () => { console.warn('Failed to load background image', LAYOUT.background?.src); };\r\n      img.src = LAYOUT.background.src as string;\r\n    } else {\r\n      // Fallback: ensure first draw without background\r\n      requestAnimationFrame(draw);\r\n    }\r\n  }, [draw]);\r\n\r\n  // Redraw when game state or selection changes\r\n  useEffect(() => {\r\n    requestAnimationFrame(draw);\r\n  }, [gameState, selectedHandIndex, draw]);\r\n\r\n  // Continuous render loop to keep canvas updated without relying on external state refs\r\n  useEffect(() => {\r\n    let frame: number;\r\n    const loop = () => {\r\n      draw();\r\n      frame = requestAnimationFrame(loop);\r\n    };\r\n    frame = requestAnimationFrame(loop);\r\n    return () => cancelAnimationFrame(frame);\r\n  }, [draw]);\r\n\r\n  const handleCardClick = useCallback((data: any) => {\r\n    // Hand-Klick\r\n    if (data.type === 'hand_p1') {\r\n      const uid = data.card?.uid ?? data.card?.id;\r\n      const stateHand = gameState.hands?.[1] || [];\r\n      const idxInState = stateHand.findIndex((c: any) => (c.uid ?? c.id) === uid);\r\n      onCardClick(data);\r\n      return;\r\n    }\r\n\r\n    // Slot-Klick\r\n    if (data.type === 'row_slot') {\r\n      const lane: 'public' | 'government' = data.lane;\r\n      const cap = getLaneCapacity(lane);\r\n\r\n      // Hole aktuelle Row-Länge aus gameState\r\n      const rowCards = lane === 'public'\r\n        ? gameState.board?.[1]?.innen ?? []\r\n        : gameState.board?.[1]?.aussen ?? [];\r\n\r\n      if (rowCards.length >= cap) {\r\n        // Optional: UI Feedback\r\n        console.warn(`Row ${lane} is full (${rowCards.length}/${cap})`);\r\n        return;\r\n      }\r\n\r\n      onCardClick(data);\r\n      return;\r\n    }\r\n\r\n    // Andere Klicks (empty_slot, board_card, etc.)\r\n    onCardClick(data);\r\n  }, [gameState, onCardClick]);\r\n\r\n  const handleClick = useCallback((e: React.MouseEvent<HTMLCanvasElement>) => {\r\n    const canvas = canvasRef.current;\r\n    if (!canvas) return;\r\n\r\n    const rect = canvas.getBoundingClientRect();\r\n    const { scale, offsetX, offsetY } = getUiTransform(canvas.width, canvas.height);\r\n    const mx = (e.clientX - rect.left - offsetX) / scale;\r\n    const my = (e.clientY - rect.top - offsetY) / scale;\r\n\r\n    const hit = clickZonesRef.current.find(z => mx >= z.x && mx <= z.x + z.w && my >= z.y && my <= z.y + z.h);\r\n    if (hit) handleCardClick(hit.data);\r\n  }, [handleCardClick]);\r\n\r\n  const handleMouseMove = useCallback((e: React.MouseEvent<HTMLCanvasElement>) => {\r\n    const canvas = canvasRef.current;\r\n    if (!canvas) return;\r\n\r\n    const rect = canvas.getBoundingClientRect();\r\n    const { scale, offsetX, offsetY } = getUiTransform(canvas.width, canvas.height);\r\n    const mx = (e.clientX - rect.left - offsetX) / scale;\r\n    const my = (e.clientY - rect.top - offsetY) / scale;\r\n\r\n    const hit = clickZonesRef.current.find(z => mx >= z.x && mx <= z.x + z.w && my >= z.y && my <= z.y + z.h);\r\n    if (hit) {\r\n      // expose hover for interactivity and visual feedback (used by CSS overlay hooks elsewhere)\r\n      onCardHover({ ...hit.data, x: e.clientX, y: e.clientY });\r\n      // add a lightweight hover visual: push a transient ring event into clickZones for renderer\r\n      // we keep console logging minimal\r\n    } else {\r\n      onCardHover(null);\r\n    }\r\n  }, [onCardHover]);\r\n\r\n  const handleWheel = useCallback((e: React.WheelEvent<HTMLCanvasElement>) => {\r\n    // only enable when player1 has more slots than visible\r\n    const handLen = (gameState.hands && gameState.hands[1]) ? gameState.hands[1].length : 0;\r\n    const zone = getZone('hand.player');\r\n    if (!zone) return;\r\n    if (handLen <= 5) return; // nothing to scroll\r\n\r\n    // Prevent page scrolling when over canvas\r\n    e.preventDefault();\r\n\r\n    // accumulate target offset (invert so wheel down moves cards up)\r\n    // Each wheel step moves by 48px per delta unit\r\n    const delta = Math.sign(e.deltaY) * 48;\r\n    // compute slot height more robustly\r\n    const slots = computeSlotRects(zone);\r\n    const slotH = slots && slots.length > 0 ? slots[0].h : zone.rectPx[3] / 5;\r\n    const visible = 5;\r\n    const maxOffset = -(Math.max(0, handLen - visible) * slotH);\r\n    handScrollTargetRef.current = Math.max(Math.min(handScrollTargetRef.current - delta, 0), maxOffset);\r\n  }, [gameState.hands]);\r\n\r\n  const handleTouchStart = useCallback((e: React.TouchEvent<HTMLCanvasElement>) => {\r\n    if (!e.touches || e.touches.length === 0) return;\r\n    const handLen = (gameState.hands && gameState.hands[1]) ? gameState.hands[1].length : 0;\r\n    if (handLen <= 5) return;\r\n    isTouchingRef.current = true;\r\n    const y = e.touches[0].clientY;\r\n    touchStartYRef.current = y;\r\n    lastTouchYRef.current = y;\r\n    e.preventDefault();\r\n  }, [gameState.hands]);\r\n\r\n  const handleTouchMove = useCallback((e: React.TouchEvent<HTMLCanvasElement>) => {\r\n    if (!isTouchingRef.current) return;\r\n    if (!e.touches || e.touches.length === 0) return;\r\n    const y = e.touches[0].clientY;\r\n    const last = lastTouchYRef.current ?? y;\r\n    const dy = y - last; // positive when moving down\r\n    lastTouchYRef.current = y;\r\n\r\n    // invert so dragging up moves cards up\r\n    const delta = -dy;\r\n    const handLen = (gameState.hands && gameState.hands[1]) ? gameState.hands[1].length : 0;\r\n    const zone = getZone('hand.player');\r\n    if (!zone) return;\r\n    const slots = computeSlotRects(zone);\r\n    const slotH = slots && slots.length > 0 ? slots[0].h : zone.rectPx[3] / 5;\r\n    const visible = 5;\r\n    const maxOffset = -(Math.max(0, handLen - visible) * slotH);\r\n    handScrollTargetRef.current = Math.max(Math.min(handScrollTargetRef.current + delta, 0), maxOffset);\r\n    e.preventDefault();\r\n  }, [gameState.hands]);\r\n\r\n  const handleTouchEnd = useCallback((e: React.TouchEvent<HTMLCanvasElement>) => {\r\n    isTouchingRef.current = false;\r\n    touchStartYRef.current = null;\r\n    lastTouchYRef.current = null;\r\n  }, []);\r\n\r\n  return (\r\n    <canvas\r\n      ref={canvasRef}\r\n      width={1920}\r\n      height={1080}\r\n      style={{\r\n        display: 'block',\r\n        width: '100%',\r\n        height: '100%',\r\n        imageRendering: 'auto',\r\n      }}\r\n      onClick={handleClick}\r\n      onMouseMove={handleMouseMove}\r\n      onWheel={handleWheel}\r\n      onTouchStart={handleTouchStart}\r\n      onTouchMove={handleTouchMove}\r\n      onTouchEnd={handleTouchEnd}\r\n    />\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}