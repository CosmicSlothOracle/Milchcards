{"ast":null,"code":"import React,{useEffect,useRef,useImperativeHandle,forwardRef}from'react';import*as THREE from'three';import{gsap}from'gsap';import{Howl}from'howler';import{jsx as _jsx}from\"react/jsx-runtime\";/**\r\n * Dice3D – simple WebGL dice rendered with three.js\r\n * Usage:\r\n *   const diceRef = useRef<Dice3DHandle>(null);\r\n *   <Dice3D ref={diceRef} onRoll={(f)=>console.log(f)}/>\r\n *   diceRef.current?.roll();\r\n */const Dice3D=/*#__PURE__*/forwardRef((_ref,ref)=>{let{size=180,duration=1200,onRoll,className}=_ref;const canvasRef=useRef(null);const sceneRef=useRef();const cubeRef=useRef();const rendererRef=useRef();const cameraRef=useRef();const animIdRef=useRef(0);/** helper to create a texture with pips */const createFaceTexture=face=>{const size=128;const cvs=document.createElement('canvas');cvs.width=cvs.height=size;const ctx=cvs.getContext('2d');ctx.fillStyle='#fff';ctx.fillRect(0,0,size,size);ctx.fillStyle='#111';const dot=(x,y)=>{ctx.beginPath();ctx.arc(x,y,size*0.1,0,Math.PI*2);ctx.fill();};const g=size*0.25;const centers={1:[[size/2,size/2]],2:[[g,g],[size-g,size-g]],3:[[g,g],[size/2,size/2],[size-g,size-g]],4:[[g,g],[size-g,g],[g,size-g],[size-g,size-g]],5:[[g,g],[size-g,g],[size/2,size/2],[g,size-g],[size-g,size-g]],6:[[g,g],[size-g,g],[g,size/2],[size-g,size/2],[g,size-g],[size-g,size-g]]};centers[face].forEach(_ref2=>{let[x,y]=_ref2;return dot(x,y);});const tex=new THREE.CanvasTexture(cvs);tex.needsUpdate=true;return tex;};// initialize three scene\nuseEffect(()=>{const canvas=canvasRef.current;if(!canvas)return;const scene=new THREE.Scene();scene.background=new THREE.Color(0x000000);const camera=new THREE.PerspectiveCamera(45,1,0.1,1000);camera.position.z=4;const renderer=new THREE.WebGLRenderer({canvas,antialias:true,alpha:true});renderer.setSize(size,size);renderer.shadowMap.enabled=true;renderer.shadowMap.type=THREE.PCFSoftShadowMap;// lights\nconst ambient=new THREE.AmbientLight(0xffffff,0.6);scene.add(ambient);const dir=new THREE.DirectionalLight(0xffffff,1.0);dir.position.set(5,10,7);dir.castShadow=true;dir.shadow.mapSize.width=1024;dir.shadow.mapSize.height=1024;dir.shadow.camera.left=-5;dir.shadow.camera.right=5;dir.shadow.camera.top=5;dir.shadow.camera.bottom=-5;scene.add(dir);// ground plane to receive shadow\nconst planeGeo=new THREE.PlaneGeometry(10,10);const planeMat=new THREE.ShadowMaterial({opacity:0.35});const plane=new THREE.Mesh(planeGeo,planeMat);plane.rotation.x=-Math.PI/2;plane.position.y=-1.1;plane.receiveShadow=true;scene.add(plane);// cube\nconst materials=[1,2,3,4,5,6].map(f=>new THREE.MeshStandardMaterial({map:createFaceTexture(f),metalness:0.1,roughness:0.6}));const geometry=new THREE.BoxGeometry(2,2,2);const cube=new THREE.Mesh(geometry,materials);cube.castShadow=true;cube.receiveShadow=false;scene.add(cube);sceneRef.current=scene;cubeRef.current=cube;rendererRef.current=renderer;cameraRef.current=camera;// animation loop\nconst animate=()=>{animIdRef.current=requestAnimationFrame(animate);// subtle idle rotate\nif(cube){cube.rotation.x*=0.995;cube.rotation.y*=0.995;}renderer.render(scene,camera);};animate();return()=>{cancelAnimationFrame(animIdRef.current);renderer.dispose();};},[size]);// roll logic (includes DOM motion)\nconst rollInternal=targetFace=>{if(!cubeRef.current)return;const cube=cubeRef.current;// pick target if not provided\nconst face=targetFace!==null&&targetFace!==void 0?targetFace:1+Math.floor(Math.random()*6);// orientation map: face -> Euler rotation (approx)\nconst orientations={1:[0,0,0],2:[0,Math.PI/2,0],3:[-Math.PI/2,0,0],4:[Math.PI/2,0,0],5:[0,-Math.PI/2,0],6:[Math.PI,0,0]};const[tx,ty,tz]=orientations[face];const start={x:cube.rotation.x,y:cube.rotation.y,z:cube.rotation.z};const end={x:tx+2*Math.PI,y:ty+2*Math.PI,z:tz+2*Math.PI};// prepare sounds (roll + bounce)\nconst rollSound=new Howl({src:['/assets/sounds/roll.mp3'],volume:0.6});const bounceSound=new Howl({src:['/assets/sounds/roll.mp3'],volume:0.8});// Use GSAP timeline for smooth rotation + bounces and DOM motion\nconst timeline=gsap.timeline({onComplete:()=>{cube.rotation.set(tx,ty,tz);if(onRoll)onRoll(face);}});// random screen path\nconst canvasEl=canvasRef.current;if(canvasEl&&canvasEl.style){canvasEl.style.position='fixed';canvasEl.style.left='0px';canvasEl.style.top='0px';canvasEl.style.willChange='transform';// pick random path points\nconst startX=Math.random()*(window.innerWidth-size);const startY=Math.random()*(window.innerHeight-size);const midX=Math.random()*(window.innerWidth-size);const midY=Math.random()*(window.innerHeight-size);const endX=Math.random()*(window.innerWidth-size);const endY=Math.random()*(window.innerHeight-size);timeline.to({},{duration:0.01});// tiny offset\ntimeline.call(()=>rollSound.play(),null,0);timeline.to(canvasEl,{duration:duration/1000,x:endX,y:endY,ease:'power2.inOut'},0);}// rotation: spin multiple revolutions then ease to final orientation\n// we'll use a GSAP ticker to update cube.rotation\nconst totalSpins=3+Math.floor(Math.random()*4);const rotEnd={x:end.x,y:end.y,z:end.z};const rotStart={x:start.x,y:start.y,z:start.z};// animate rotation using timeline with an onUpdate that writes to cube\nlet progress={t:0};timeline.to(progress,{t:1,duration:duration/1000,ease:'power3.out',onUpdate:()=>{const k=progress.t;// combine ease with extra spins\nconst spinFactor=1-Math.pow(1-k,3);const currentX=rotStart.x+(rotEnd.x-rotStart.x)*k+totalSpins*Math.PI*2*(1-(1-k));const currentY=rotStart.y+(rotEnd.y-rotStart.y)*k+totalSpins*Math.PI*2*(1-(1-k));const currentZ=rotStart.z+(rotEnd.z-rotStart.z)*k+totalSpins*Math.PI*2*(1-(1-k));cube.rotation.set(currentX,currentY,currentZ);}});// small bounce sequence on completion (scale + tilt)\ntimeline.to(cube.scale,{x:1.06,y:0.94,z:0.94,duration:0.08,yoyo:true,repeat:1,ease:'power2.out'},'>-0.1');timeline.call(()=>bounceSound.play(),null,'>-0.1');timeline.to(cube.scale,{x:0.97,y:1.03,z:0.97,duration:0.06,yoyo:true,repeat:1,ease:'power2.out'});timeline.to(cube.scale,{x:1,y:1,z:1,duration:0.05,ease:'power2.out'});};useImperativeHandle(ref,()=>({roll:()=>rollInternal(),rollTo:face=>rollInternal(Math.max(1,Math.min(6,face)))}),[duration,onRoll]);// click to roll\nuseEffect(()=>{const canvas=canvasRef.current;if(!canvas)return;const handler=()=>rollInternal();canvas.addEventListener('click',handler);return()=>canvas.removeEventListener('click',handler);},[]);return/*#__PURE__*/_jsx(\"canvas\",{ref:canvasRef,width:size,height:size,className:className,style:{cursor:'pointer'}});});export default Dice3D;","map":{"version":3,"names":["React","useEffect","useRef","useImperativeHandle","forwardRef","THREE","gsap","Howl","jsx","_jsx","Dice3D","_ref","ref","size","duration","onRoll","className","canvasRef","sceneRef","cubeRef","rendererRef","cameraRef","animIdRef","createFaceTexture","face","cvs","document","createElement","width","height","ctx","getContext","fillStyle","fillRect","dot","x","y","beginPath","arc","Math","PI","fill","g","centers","forEach","_ref2","tex","CanvasTexture","needsUpdate","canvas","current","scene","Scene","background","Color","camera","PerspectiveCamera","position","z","renderer","WebGLRenderer","antialias","alpha","setSize","shadowMap","enabled","type","PCFSoftShadowMap","ambient","AmbientLight","add","dir","DirectionalLight","set","castShadow","shadow","mapSize","left","right","top","bottom","planeGeo","PlaneGeometry","planeMat","ShadowMaterial","opacity","plane","Mesh","rotation","receiveShadow","materials","map","f","MeshStandardMaterial","metalness","roughness","geometry","BoxGeometry","cube","animate","requestAnimationFrame","render","cancelAnimationFrame","dispose","rollInternal","targetFace","floor","random","orientations","tx","ty","tz","start","end","rollSound","src","volume","bounceSound","timeline","onComplete","canvasEl","style","willChange","startX","window","innerWidth","startY","innerHeight","midX","midY","endX","endY","to","call","play","ease","totalSpins","rotEnd","rotStart","progress","t","onUpdate","k","spinFactor","pow","currentX","currentY","currentZ","scale","yoyo","repeat","roll","rollTo","max","min","handler","addEventListener","removeEventListener","cursor"],"sources":["C:/Users/skank/Videos/Cards/Milchcards/src/components/Dice3D.tsx"],"sourcesContent":["import React, { useEffect, useRef, useImperativeHandle, forwardRef } from 'react';\r\nimport * as THREE from 'three';\r\nimport { gsap } from 'gsap';\r\nimport { Howl } from 'howler';\r\n\r\nexport interface Dice3DProps {\r\n  /** pixel size of canvas */\r\n  size?: number;\r\n  /** roll animation duration in ms */\r\n  duration?: number;\r\n  /** callback when roll ends */\r\n  onRoll?: (face: number) => void;\r\n  className?: string;\r\n}\r\n\r\nexport interface Dice3DHandle {\r\n  roll: () => void;\r\n  rollTo: (face: number) => void;\r\n}\r\n\r\n/**\r\n * Dice3D – simple WebGL dice rendered with three.js\r\n * Usage:\r\n *   const diceRef = useRef<Dice3DHandle>(null);\r\n *   <Dice3D ref={diceRef} onRoll={(f)=>console.log(f)}/>\r\n *   diceRef.current?.roll();\r\n */\r\nconst Dice3D = forwardRef<Dice3DHandle, Dice3DProps>(\r\n  ({ size = 180, duration = 1200, onRoll, className }: Dice3DProps, ref) => {\r\n    const canvasRef = useRef<HTMLCanvasElement | null>(null);\r\n    const sceneRef = useRef<THREE.Scene>();\r\n    const cubeRef = useRef<THREE.Mesh>();\r\n    const rendererRef = useRef<THREE.WebGLRenderer>();\r\n    const cameraRef = useRef<THREE.PerspectiveCamera>();\r\n    const animIdRef = useRef(0);\r\n\r\n    /** helper to create a texture with pips */\r\n    const createFaceTexture = (face: number): THREE.Texture => {\r\n      const size = 128;\r\n      const cvs = document.createElement('canvas');\r\n      cvs.width = cvs.height = size;\r\n      const ctx = cvs.getContext('2d')!;\r\n      ctx.fillStyle = '#fff';\r\n      ctx.fillRect(0, 0, size, size);\r\n      ctx.fillStyle = '#111';\r\n\r\n      const dot = (x: number, y: number) => {\r\n        ctx.beginPath();\r\n        ctx.arc(x, y, size * 0.1, 0, Math.PI * 2);\r\n        ctx.fill();\r\n      };\r\n      const g = size * 0.25;\r\n      const centers: Record<number, Array<[number, number]>> = {\r\n        1: [[size / 2, size / 2]],\r\n        2: [[g, g], [size - g, size - g]],\r\n        3: [[g, g], [size / 2, size / 2], [size - g, size - g]],\r\n        4: [[g, g], [size - g, g], [g, size - g], [size - g, size - g]],\r\n        5: [[g, g], [size - g, g], [size / 2, size / 2], [g, size - g], [size - g, size - g]],\r\n        6: [[g, g], [size - g, g], [g, size / 2], [size - g, size / 2], [g, size - g], [size - g, size - g]],\r\n      };\r\n      centers[face].forEach(([x, y]) => dot(x, y));\r\n      const tex = new THREE.CanvasTexture(cvs);\r\n      tex.needsUpdate = true;\r\n      return tex;\r\n    };\r\n\r\n    // initialize three scene\r\n    useEffect(() => {\r\n      const canvas = canvasRef.current;\r\n      if (!canvas) return;\r\n      const scene = new THREE.Scene();\r\n      scene.background = new THREE.Color(0x000000);\r\n      const camera = new THREE.PerspectiveCamera(45, 1, 0.1, 1000);\r\n      camera.position.z = 4;\r\n      const renderer = new THREE.WebGLRenderer({ canvas, antialias: true, alpha: true });\r\n      renderer.setSize(size, size);\r\n      renderer.shadowMap.enabled = true;\r\n      renderer.shadowMap.type = THREE.PCFSoftShadowMap;\r\n\r\n      // lights\r\n      const ambient = new THREE.AmbientLight(0xffffff, 0.6);\r\n      scene.add(ambient);\r\n      const dir = new THREE.DirectionalLight(0xffffff, 1.0);\r\n      dir.position.set(5, 10, 7);\r\n      dir.castShadow = true;\r\n      dir.shadow.mapSize.width = 1024;\r\n      dir.shadow.mapSize.height = 1024;\r\n      dir.shadow.camera.left = -5;\r\n      dir.shadow.camera.right = 5;\r\n      dir.shadow.camera.top = 5;\r\n      dir.shadow.camera.bottom = -5;\r\n      scene.add(dir);\r\n\r\n      // ground plane to receive shadow\r\n      const planeGeo = new THREE.PlaneGeometry(10, 10);\r\n      const planeMat = new THREE.ShadowMaterial({ opacity: 0.35 });\r\n      const plane = new THREE.Mesh(planeGeo, planeMat);\r\n      plane.rotation.x = -Math.PI / 2;\r\n      plane.position.y = -1.1;\r\n      plane.receiveShadow = true;\r\n      scene.add(plane);\r\n\r\n      // cube\r\n      const materials = [1, 2, 3, 4, 5, 6].map(f => new THREE.MeshStandardMaterial({ map: createFaceTexture(f), metalness: 0.1, roughness: 0.6 }));\r\n      const geometry = new THREE.BoxGeometry(2, 2, 2);\r\n      const cube = new THREE.Mesh(geometry, materials);\r\n      cube.castShadow = true;\r\n      cube.receiveShadow = false;\r\n      scene.add(cube);\r\n\r\n      sceneRef.current = scene;\r\n      cubeRef.current = cube;\r\n      rendererRef.current = renderer;\r\n      cameraRef.current = camera;\r\n\r\n      // animation loop\r\n      const animate = () => {\r\n        animIdRef.current = requestAnimationFrame(animate);\r\n        // subtle idle rotate\r\n        if (cube) {\r\n          cube.rotation.x *= 0.995;\r\n          cube.rotation.y *= 0.995;\r\n        }\r\n        renderer.render(scene, camera);\r\n      };\r\n      animate();\r\n\r\n      return () => {\r\n        cancelAnimationFrame(animIdRef.current);\r\n        renderer.dispose();\r\n      };\r\n    }, [size]);\r\n\r\n    // roll logic (includes DOM motion)\r\n    const rollInternal = (targetFace?: number) => {\r\n      if (!cubeRef.current) return;\r\n      const cube = cubeRef.current;\r\n      // pick target if not provided\r\n      const face = targetFace ?? (1 + Math.floor(Math.random() * 6));\r\n\r\n      // orientation map: face -> Euler rotation (approx)\r\n      const orientations: Record<number, [number, number, number]> = {\r\n        1: [0, 0, 0],\r\n        2: [0, Math.PI / 2, 0],\r\n        3: [-Math.PI / 2, 0, 0],\r\n        4: [Math.PI / 2, 0, 0],\r\n        5: [0, -Math.PI / 2, 0],\r\n        6: [Math.PI, 0, 0],\r\n      };\r\n      const [tx, ty, tz] = orientations[face];\r\n\r\n      const start = { x: cube.rotation.x, y: cube.rotation.y, z: cube.rotation.z };\r\n      const end = { x: tx + 2 * Math.PI, y: ty + 2 * Math.PI, z: tz + 2 * Math.PI };\r\n\r\n      // prepare sounds (roll + bounce)\r\n      const rollSound = new Howl({ src: ['/assets/sounds/roll.mp3'], volume: 0.6 });\r\n      const bounceSound = new Howl({ src: ['/assets/sounds/roll.mp3'], volume: 0.8 });\r\n\r\n      // Use GSAP timeline for smooth rotation + bounces and DOM motion\r\n      const timeline = gsap.timeline({ onComplete: () => {\r\n        cube.rotation.set(tx, ty, tz);\r\n        if (onRoll) onRoll(face);\r\n      }});\r\n\r\n      // random screen path\r\n      const canvasEl = canvasRef.current as HTMLCanvasElement | null;\r\n      if (canvasEl && canvasEl.style) {\r\n        canvasEl.style.position = 'fixed';\r\n        canvasEl.style.left = '0px';\r\n        canvasEl.style.top = '0px';\r\n        canvasEl.style.willChange = 'transform';\r\n        // pick random path points\r\n        const startX = Math.random() * (window.innerWidth - size);\r\n        const startY = Math.random() * (window.innerHeight - size);\r\n        const midX = Math.random() * (window.innerWidth - size);\r\n        const midY = Math.random() * (window.innerHeight - size);\r\n        const endX = Math.random() * (window.innerWidth - size);\r\n        const endY = Math.random() * (window.innerHeight - size);\r\n\r\n        timeline.to({}, { duration: 0.01 }); // tiny offset\r\n        timeline.call(() => rollSound.play(), null, 0);\r\n        timeline.to(canvasEl, { duration: duration / 1000, x: endX, y: endY, ease: 'power2.inOut' }, 0);\r\n      }\r\n\r\n      // rotation: spin multiple revolutions then ease to final orientation\r\n      // we'll use a GSAP ticker to update cube.rotation\r\n      const totalSpins = 3 + Math.floor(Math.random() * 4);\r\n      const rotEnd = { x: end.x, y: end.y, z: end.z };\r\n      const rotStart = { x: start.x, y: start.y, z: start.z };\r\n\r\n      // animate rotation using timeline with an onUpdate that writes to cube\r\n      let progress = { t: 0 };\r\n      timeline.to(progress, {\r\n        t: 1,\r\n        duration: duration / 1000,\r\n        ease: 'power3.out',\r\n        onUpdate: () => {\r\n          const k = progress.t;\r\n          // combine ease with extra spins\r\n          const spinFactor = 1 - Math.pow(1 - k, 3);\r\n          const currentX = rotStart.x + (rotEnd.x - rotStart.x) * k + totalSpins * Math.PI * 2 * (1 - (1 - k));\r\n          const currentY = rotStart.y + (rotEnd.y - rotStart.y) * k + totalSpins * Math.PI * 2 * (1 - (1 - k));\r\n          const currentZ = rotStart.z + (rotEnd.z - rotStart.z) * k + totalSpins * Math.PI * 2 * (1 - (1 - k));\r\n          cube.rotation.set(currentX, currentY, currentZ);\r\n        }\r\n      });\r\n\r\n      // small bounce sequence on completion (scale + tilt)\r\n      timeline.to(cube.scale, { x: 1.06, y: 0.94, z: 0.94, duration: 0.08, yoyo: true, repeat: 1, ease: 'power2.out' }, '>-0.1');\r\n      timeline.call(() => bounceSound.play(), null, '>-0.1');\r\n      timeline.to(cube.scale, { x: 0.97, y: 1.03, z: 0.97, duration: 0.06, yoyo: true, repeat: 1, ease: 'power2.out' });\r\n      timeline.to(cube.scale, { x: 1, y: 1, z: 1, duration: 0.05, ease: 'power2.out' });\r\n    };\r\n\r\n    useImperativeHandle(ref, () => ({\r\n      roll: () => rollInternal(),\r\n      rollTo: (face: number) => rollInternal(Math.max(1, Math.min(6, face))),\r\n    }), [duration, onRoll]);\r\n\r\n    // click to roll\r\n    useEffect(() => {\r\n      const canvas = canvasRef.current;\r\n      if (!canvas) return;\r\n      const handler = () => rollInternal();\r\n      canvas.addEventListener('click', handler);\r\n      return () => canvas.removeEventListener('click', handler);\r\n    }, []);\r\n\r\n    return <canvas ref={canvasRef} width={size} height={size} className={className} style={{ cursor: 'pointer' }} />;\r\n  });\r\n\r\nexport default Dice3D;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}