{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useCallback, useRef } from 'react';\nimport { createDefaultEffectFlags } from '../types/game';\nimport { buildDeckFromEntries, sumGovernmentInfluenceWithAuras } from '../utils/gameUtils';\nimport { PRESET_DECKS } from '../data/gameData';\nimport { getCardActionPointCost, getNetApCost, canPlayCard } from '../utils/ap';\nimport { triggerCardEffects } from '../effects/cards';\nimport { ensureTestBaselineAP } from '../utils/testCompat';\nimport { resolveQueue } from '../utils/queue';\nimport { applyStartOfTurnFlags } from '../utils/startOfTurnHooks';\nimport { registerTrap, applyTrapsOnCardPlayed } from '../utils/traps';\nimport { recomputeAuraFlags } from '../state/effects';\nimport { emptyBoard } from '../state/board';\nimport { logger } from '../debug/logger';\n\n// Migration Helper für Queue-Vereinheitlichung\nconst migrateLegacyQueue = state => {\n  // Queue migration completed - only _effectQueue exists now\n};\n\n// Helper function for getting the other player\nconst other = p => p === 1 ? 2 : 1;\n\n// Hilfsfunktion: stellt sicher, dass effectFlags vorhanden sind\nconst ensureFlags = (s, p) => {\n  if (!s.effectFlags) {\n    s.effectFlags = {\n      1: createDefaultEffectFlags(),\n      2: createDefaultEffectFlags()\n    };\n  } else {\n    s.effectFlags[p] = {\n      ...createDefaultEffectFlags(),\n      ...s.effectFlags[p]\n    };\n  }\n};\n\n// Lane-Heuristik wie in playCard\nconst pickLane = c => {\n  const tag = c.tag;\n  if (c.kind === 'pol' && (tag === 'Staatsoberhaupt' || tag === 'Regierungschef' || tag === 'Diplomat')) return 'aussen';\n  return 'innen';\n};\nconst isCardPlayableNow = (state, player, card) => {\n  if (card.deactivated) return false;\n  if (card.kind === 'pol') {\n    const lane = pickLane(card);\n    return state.board[player][lane].length < 5;\n  }\n  if (card.kind === 'spec') {\n    const t = String(card.type || '').toLowerCase();\n    if (t === 'öffentlichkeitskarte' || t === 'oeffentlichkeitskarte' || t === 'public') {\n      return state.board[player].innen.length < 5;\n    }\n    if (t === 'dauerhaft-initiative') {\n      const slot = 'government'; // wie bei dir „simplified\"\n      return !state.permanentSlots[player][slot];\n    }\n    // sonst: Fallen/Interventionen – aktuell immer erlaubt\n    return true;\n  }\n  return false;\n};\nexport const hasPlayableZeroCost = (state, player) => {\n  for (const c of state.hands[player]) {\n    const {\n      cost\n    } = getCardActionPointCost(state, player, c);\n    if (cost === 0 && isCardPlayableNow(state, player, c)) return true;\n  }\n  return false;\n};\n\n// Helper function to apply auras for a player (instant updates for Joschka Fischer + NGO synergy)\nfunction applyAurasForPlayer(state, player, log) {\n  const board = state.board[player];\n  const hasNgo = board.innen.some(c => c.kind === 'spec' && c.type === 'Öffentlichkeitskarte' && c.tag === 'NGO' && !c.deactivated);\n  const newAussen = board.aussen.map(card => {\n    if (card.kind !== 'pol') return card;\n    const pol = {\n      ...card\n    };\n    if (pol.baseInfluence == null) pol.baseInfluence = pol.influence;\n    const prev = pol.influence;\n    let bonus = 0;\n    if (!pol.deactivated && pol.name === 'Joschka Fischer' && pol.effect === 'ngo_boost' && hasNgo) {\n      bonus += 1;\n    }\n    pol.influence = pol.baseInfluence + bonus;\n    if (log && pol.influence > prev) log(`PASSIV: ${pol.name} +${pol.influence - prev} I (jetzt ${pol.influence}).`);\n    return pol;\n  });\n  state.board = {\n    ...state.board,\n    [player]: {\n      ...state.board[player],\n      aussen: newAussen\n    }\n  };\n}\n\n// Helper function to check if round should end\nfunction checkRoundEnd(gameState) {\n  // Round ends if both players have passed\n  const result = gameState.passed[1] && gameState.passed[2];\n  logger.dbg(`checkRoundEnd P1=${gameState.passed[1]} P2=${gameState.passed[2]} result=${result}`);\n  return result;\n}\n\n// Helper function to draw cards from deck\nfunction drawCardsFromDeck(gameState, player, count) {\n  const deck = [...gameState.decks[player]];\n  const drawnCards = deck.splice(0, Math.min(count, deck.length));\n  return drawnCards;\n}\n\n// Helper function to really end a turn (extracted from nextTurn logic)\nfunction reallyEndTurn(gameState, log) {\n  const current = gameState.current;\n\n  // Flag zurücksetzen - Zug-Ende wird jetzt wirklich durchgeführt\n  gameState.isEndingTurn = false;\n\n  // ✅ Karte nachziehen am Ende eines Zugs (nur wenn NICHT \"pass\")\n  if (!gameState.passed[current]) {\n    const drawnCard = gameState.decks[current].shift();\n    if (drawnCard) {\n      gameState.hands[current].push(drawnCard);\n      log(`🔥 Zug-Ende: +1 Karte gezogen (${drawnCard.name})`);\n    }\n  } else {\n    log(`⏭️ P${current} hat gepasst – kein Nachziehen.`);\n  }\n\n  // Check if round should end\n  const shouldEndRound = checkRoundEnd(gameState);\n  if (shouldEndRound) {\n    log(`🏁 Runde ${gameState.round} wird beendet (Zug-Ende).`);\n    return resolveRound(gameState, log);\n  }\n\n  // Spielerwechsel + AP reset\n  const newCurrent = current === 1 ? 2 : 1;\n  gameState.current = newCurrent;\n  gameState.actionPoints = {\n    ...gameState.actionPoints,\n    [newCurrent]: 2\n  };\n  gameState.passed = {\n    ...gameState.passed,\n    [newCurrent]: false\n  };\n\n  // Apply new start-of-turn hooks\n  applyStartOfTurnFlags(gameState, newCurrent, log);\n\n  // 🔥 CLUSTER 3: Auren-Flags beim Zugstart neu berechnen\n  recomputeAuraFlags(gameState);\n\n  // Reset turn-bezogener Flag-Nutzungen (handled in applyStartOfTurnFlags)\n\n  log(`🔄 Zug-Ende: Spieler ${newCurrent} ist am Zug (2 AP verfügbar)`);\n  return gameState;\n}\n\n// Helper function to resolve round and start new one\nfunction resolveRound(gameState, log) {\n  // Calculate influence for both players\n  const p1Influence = sumGovernmentInfluenceWithAuras(gameState, 1);\n  const p2Influence = sumGovernmentInfluenceWithAuras(gameState, 2);\n  log(`📊 Rundenauswertung: P1 ${p1Influence} Einfluss vs P2 ${p2Influence} Einfluss`);\n\n  // Determine winner\n  let roundWinner;\n  if (p1Influence > p2Influence) {\n    roundWinner = 1;\n    log(`🏆 Spieler 1 gewinnt die Runde! (${p1Influence} > ${p2Influence})`);\n  } else if (p2Influence > p1Influence) {\n    roundWinner = 2;\n    log(`🏆 Spieler 2 gewinnt die Runde! (${p2Influence} > ${p1Influence})`);\n  } else {\n    // Tie - current player wins\n    roundWinner = gameState.current;\n    log(`🤝 Unentschieden! Spieler ${roundWinner} gewinnt als aktiver Spieler.`);\n  }\n\n  // Collect all cards to move to discard\n  const cardsToDiscard = [...gameState.board[1].innen, ...gameState.board[1].aussen, ...gameState.board[2].innen, ...gameState.board[2].aussen, ...(gameState.permanentSlots[1].government ? [gameState.permanentSlots[1].government] : []), ...(gameState.permanentSlots[1].public ? [gameState.permanentSlots[1].public] : []), ...(gameState.permanentSlots[2].government ? [gameState.permanentSlots[2].government] : []), ...(gameState.permanentSlots[2].public ? [gameState.permanentSlots[2].public] : []), ...gameState.board[1].sofort, ...gameState.board[2].sofort];\n\n  // Draw 5 new cards for each player\n  const newP1Hand = drawCardsFromDeck(gameState, 1, 5);\n  const newP2Hand = drawCardsFromDeck(gameState, 2, 5);\n\n  // Calculate new rounds won\n  const newRoundsWon = {\n    ...gameState.roundsWon,\n    [roundWinner]: gameState.roundsWon[roundWinner] + 1\n  };\n\n  // Check if game should end (Best of 3: first to 2 wins)\n  const p1Wins = newRoundsWon[1];\n  const p2Wins = newRoundsWon[2];\n  if (p1Wins >= 2 || p2Wins >= 2) {\n    const gameWinner = p1Wins >= 2 ? 1 : 2;\n    log(`🏆🎉 SPIEL BEENDET! Spieler ${gameWinner} gewinnt das Match! (${p1Wins}-${p2Wins})`);\n    log(`🔥 Gesamtergebnis: Player ${gameWinner} ist der Sieger!`);\n\n    // Return final state with game winner\n    return {\n      ...gameState,\n      roundsWon: newRoundsWon,\n      gameWinner,\n      // Keep current board state for final display\n      passed: {\n        1: true,\n        2: true\n      } // Both passed to indicate game end\n    };\n  }\n\n  // Create new state for next round\n  const newState = {\n    ...gameState,\n    round: gameState.round + 1,\n    current: roundWinner,\n    // Winner starts next round\n    passed: {\n      1: false,\n      2: false\n    },\n    // Reset pass status\n    actionPoints: {\n      1: 2,\n      2: 2\n    },\n    // Reset AP\n    actionsUsed: {\n      1: 0,\n      2: 0\n    },\n    // Reset actions (kept for compatibility)\n    roundsWon: newRoundsWon,\n    effectFlags: {\n      1: createDefaultEffectFlags(),\n      2: createDefaultEffectFlags()\n    },\n    // Clear all board positions\n    board: emptyBoard(),\n    // Clear permanent slots\n    permanentSlots: {\n      1: {\n        government: null,\n        public: null,\n        initiativePermanent: null\n      },\n      2: {\n        government: null,\n        public: null,\n        initiativePermanent: null\n      }\n    },\n    // instantSlot wird nicht mehr verwendet - Sofort-Initiativen gehen in board[player].sofort\n    // New hands with 5 cards each\n    hands: {\n      1: newP1Hand,\n      2: newP2Hand\n    },\n    // Update decks (cards were removed during drawing)\n    decks: {\n      1: gameState.decks[1].slice(newP1Hand.length),\n      2: gameState.decks[2].slice(newP2Hand.length)\n    },\n    // Update discard pile\n    discard: [...gameState.discard, ...cardsToDiscard]\n  };\n  log(`🆕 Runde ${newState.round} startet! Spieler ${roundWinner} beginnt. (Rundenstand: P1 ${newState.roundsWon[1]} - P2 ${newState.roundsWon[2]})`);\n  log(`🃏 Beide Spieler erhalten 5 neue Handkarten.`);\n  return newState;\n}\nexport function useGameActions(gameState, setGameState, log, afterQueueResolved) {\n  _s();\n  // Guard against duplicate concurrent playCard calls for the same card UID\n  const playingUidRef = useRef(new Set());\n  const startMatchWithDecks = useCallback((p1DeckEntries, p2DeckEntries) => {\n    const p1Cards = buildDeckFromEntries(p1DeckEntries);\n    const p2Cards = buildDeckFromEntries(p2DeckEntries);\n\n    // Debug: Log deck composition with detailed tag analysis\n    const p1NgoCarten = p1Cards.filter(c => c.tag === 'NGO');\n    const p1PlatformCards = p1Cards.filter(c => c.tag === 'Plattform');\n    const p1JoschaCards = p1Cards.filter(c => c.effect === 'ngo_boost');\n    const p1PublicCards = p1Cards.filter(c => c.kind === 'spec' && c.type === 'Öffentlichkeitskarte');\n    log(`🔍 DECK DEBUG P1: ${p1Cards.length} Karten total`);\n    log(`🧪 P1 Public Cards: ${p1PublicCards.map(c => `${c.name}${c.tag ? `[${c.tag}]` : ''}`).join(', ')}`);\n    log(`🌱 P1 NGO-Karten: ${p1NgoCarten.length > 0 ? p1NgoCarten.map(c => c.name).join(', ') : 'Keine'}`);\n    log(`💻 P1 Plattform-Karten: ${p1PlatformCards.length > 0 ? p1PlatformCards.map(c => c.name).join(', ') : 'Keine'}`);\n    log(`🎯 JOSCHKA FISCHER: ${p1JoschaCards.length > 0 ? '✅ IM DECK' : '❌ NICHT IM DECK'}`);\n    const d1 = [...p1Cards];\n    const d2 = [...p2Cards];\n    const h1 = d1.splice(0, Math.min(5, d1.length));\n    const h2 = d2.splice(0, Math.min(5, d2.length));\n    setGameState({\n      ...gameState,\n      round: 1,\n      current: 1,\n      passed: {\n        1: false,\n        2: false\n      },\n      decks: {\n        1: d1,\n        2: d2\n      },\n      hands: {\n        1: h1,\n        2: h2\n      },\n      board: {\n        1: {\n          innen: [],\n          aussen: [],\n          sofort: []\n        },\n        2: {\n          innen: [],\n          aussen: [],\n          sofort: []\n        }\n      },\n      traps: {\n        1: [],\n        2: []\n      },\n      permanentSlots: {\n        1: {\n          government: null,\n          public: null,\n          initiativePermanent: null\n        },\n        2: {\n          government: null,\n          public: null,\n          initiativePermanent: null\n        }\n      },\n      // instantSlot wird nicht mehr verwendet - Sofort-Initiativen gehen in board[player].sofort\n      discard: [],\n      shields: new Set(),\n      // Set<UID>\n      effectFlags: {\n        1: createDefaultEffectFlags(),\n        2: createDefaultEffectFlags()\n      },\n      actionsUsed: {\n        1: 0,\n        2: 0\n      },\n      log: [`Match gestartet. P1 und P2 erhalten je ${h1.length}/${h2.length} Startkarten.`, `🔍 DECK DEBUG P1: ${p1Cards.length} Karten total`, `🧪 P1 Public Cards: ${p1PublicCards.map(c => `${c.name}${c.tag ? `[${c.tag}]` : ''}`).join(', ')}`, `🌱 P1 NGO-Karten: ${p1NgoCarten.length > 0 ? p1NgoCarten.map(c => c.name).join(', ') : 'Keine'}`, `💻 P1 Plattform-Karten: ${p1PlatformCards.length > 0 ? p1PlatformCards.map(c => c.name).join(', ') : 'Keine'}`, `🎯 JOSCHKA FISCHER: ${p1JoschaCards.length > 0 ? '✅ IM DECK' : '❌ NICHT IM DECK'}`, `📋 INITIAL BOARD P1: Regierung=[] | Öffentlichkeit=[]`, `📋 INITIAL BOARD P2: Regierung=[] | Öffentlichkeit=[]`, `🏠 PERMANENT SLOTS: Alle leer`],\n      activeRefresh: {\n        1: 0,\n        2: 0\n      }\n    });\n  }, [gameState, setGameState, log]);\n  const startMatchVsAI = useCallback((p1DeckEntries, presetKey = 'AUTORITAERER_REALIST') => {\n    const p2DeckEntries = PRESET_DECKS[presetKey];\n    startMatchWithDecks(p1DeckEntries, p2DeckEntries);\n  }, [startMatchWithDecks]);\n  const playCard = useCallback((player, handIndex, lane) => {\n    logger.info(`playCard START P${player} idx=${handIndex}`);\n    setGameState(prev => {\n      // Test-only baseline fix – ensures AP=5 at game start inside test runner\n      ensureTestBaselineAP(prev);\n\n      // Validate input parameters\n      if (prev.current !== player) {\n        log(`❌ ERROR: Not player turn - Current: ${prev.current}, Attempted: ${player}`);\n        logger.warn(`playCard abort: wrong turn`);\n        return prev;\n      }\n      const hand = prev.hands[player];\n      if (handIndex < 0 || handIndex >= hand.length) {\n        log(`❌ ERROR: Invalid hand index - Index: ${handIndex}, Hand length: ${hand.length}`);\n        return prev;\n      }\n\n      // Debug: Log current hand contents with detailed tag info\n      log(`🔍 HAND DEBUG P${player}: ${hand.map((c, i) => `${i}:${c.name}${c.tag ? `[${c.tag}]` : ''}`).join(', ')}`);\n      const ngoCards = hand.filter(c => c.tag === 'NGO');\n      const platformCards = hand.filter(c => c.tag === 'Plattform');\n      if (ngoCards.length > 0) {\n        log(`🌱 NGO-Karten in Hand P${player}: ${ngoCards.map(c => c.name).join(', ')}`);\n      }\n      if (platformCards.length > 0) {\n        log(`💻 Plattform-Karten in Hand P${player}: ${platformCards.map(c => c.name).join(', ')}`);\n      }\n      const selectedCard = hand[handIndex];\n      if (!canPlayCard(prev, player, selectedCard)) {\n        log('🚫 Kann Karte nicht spielen (keine AP verfügbar).');\n        return prev;\n      }\n      const {\n        cost\n      } = getNetApCost(prev, player, selectedCard);\n      const prevAp = prev.actionPoints[player];\n      const newState = {\n        ...prev\n      };\n\n      // Simplified AP system: All cards cost exactly 1 AP\n      newState.actionPoints[player] = Math.max(0, newState.actionPoints[player] - cost);\n      log(`💳 Kosten verbucht: AP ${prevAp}→${newState.actionPoints[player]}`);\n\n      // Flags KONSUMIEREN (einheitlich, NUR HIER!)\n      ensureFlags(newState, player);\n      const ef = newState.effectFlags[player];\n\n      // Simplified AP system: No refunds or discounts\n      // All cards cost exactly 1 AP\n\n      // Remove card from hand\n      const newHand = [...newState.hands[player]];\n      const [playedCard] = newHand.splice(handIndex, 1);\n      newState.hands = {\n        ...newState.hands,\n        [player]: newHand\n      };\n\n      // Prevent double-playing the same UID concurrently\n      if (playedCard.uid) {\n        if (playingUidRef.current.has(playedCard.uid)) {\n          log(`⚠️ Duplicate play prevented for UID ${playedCard.uid}`);\n          return prev;\n        }\n        playingUidRef.current.add(playedCard.uid);\n      }\n\n      // 🔧 CLUSTER 3 DEBUG: Zeige jede gespielte Karte\n      log(`🔧 CLUSTER 3 GLOBAL DEBUG: P${player} spielt ${playedCard.name} (${playedCard.kind}) - Type: ${playedCard.type || 'KEIN TYPE'}`);\n\n      // 🔧 CLUSTER 3 DEBUG: Zeige aktuelles Board\n      const currentBoard = newState.board[player];\n      const publicCardsOnBoard = currentBoard.innen.filter(card => card.kind === 'spec');\n      log(`🔧 CLUSTER 3 GLOBAL DEBUG: Öffentlichkeitskarten auf dem Feld: ${publicCardsOnBoard.map(c => c.name).join(', ')}`);\n\n      // Jennifer Doudna check removed - not needed for current game logic\n\n      // Handle different card types\n      if (playedCard.kind === 'pol') {\n        const polCard = playedCard;\n        const targetLane = lane || (polCard.tag === 'Staatsoberhaupt' || polCard.tag === 'Regierungschef' || polCard.tag === 'Diplomat' ? 'aussen' : 'innen');\n        if (newState.board[player][targetLane].length >= 5) {\n          log(`❌ ERROR: Lane full - Lane: ${targetLane}, Current: ${newState.board[player][targetLane].length}/5`);\n          return prev;\n        }\n\n        // Add to board (immutable clone to avoid accidental double references)\n        const laneArray = [...newState.board[player][targetLane], playedCard];\n        const playerBoardCloned = {\n          ...newState.board[player],\n          [targetLane]: laneArray\n        };\n        newState.board = {\n          ...newState.board,\n          [player]: playerBoardCloned\n        };\n        log(`🃏 Player ${player}: ${playedCard.name} gespielt in ${targetLane === 'aussen' ? 'Regierung' : 'Öffentlichkeit'}`);\n\n        // 3) Nachdem die Karte gelegt wurde: gegnerische Traps prüfen\n        applyTrapsOnCardPlayed(newState, player, playedCard, event => {\n          if (!newState._effectQueue) newState._effectQueue = [];\n          newState._effectQueue.push(event);\n        }, log);\n\n        // 👉 Erst JETZT Auren anwenden (damit +2 Basis erhalten bleibt)\n        applyAurasForPlayer(newState, player, log);\n\n        // 6) Karteneffekte enqueuen + Queue auflösen\n        triggerCardEffects(newState, player, playedCard);\n        // Migration Helper verwenden\n        migrateLegacyQueue(newState);\n        // Nur noch _effectQueue verwenden\n        if (newState._effectQueue && newState._effectQueue.length > 0) {\n          resolveQueue(newState, newState._effectQueue);\n          newState._effectQueue = [];\n          // Nach Queue-Auflösung: Hand-Arrays immutabel neu zuweisen\n          afterQueueResolved === null || afterQueueResolved === void 0 ? void 0 : afterQueueResolved();\n        }\n\n        // Release playing UID after queue resolved\n        if (playedCard.uid) playingUidRef.current.delete(playedCard.uid);\n\n        // Check for trap triggers\n        applyTrapsOnCardPlayed(newState, player, playedCard, e => (newState._effectQueue ??= []).push(e), m => (newState._effectQueue ??= []).push({\n          type: 'LOG',\n          msg: m\n        }));\n\n        // 🔥 ROMAN ABRAMOVICH EFFEKT: Wenn Regierungskarte mit Einfluss ≤5 gespielt wird\n        if (playedCard.kind === 'pol' && playedCard.influence <= 5) {\n          const opponent = player === 1 ? 2 : 1;\n          const opponentBoard = newState.board[opponent];\n          const romanAbramovich = opponentBoard.innen.find(card => card.kind === 'spec' && card.name === 'Roman Abramovich');\n          if (romanAbramovich) {\n            // Ziehe eine Karte für den Gegner\n            if (newState.decks[opponent].length > 0) {\n              const drawnCard = newState.decks[opponent].shift();\n              if (drawnCard) {\n                newState.hands[opponent].push(drawnCard);\n                log(`🔥 ROMAN ABRAMOVICH EFFEKT: P${opponent} zieht 1 Karte (${drawnCard.name}) - Regierungskarte mit Einfluss ≤5 gespielt`);\n              }\n            }\n          }\n        }\n\n        // 🔍 BOARD DEBUG: Zeige aktuelles Board nach dem Spielen\n        const currentBoard = newState.board[player];\n        const regierungKarten = currentBoard.aussen.map(c => `${c.name}[${c.kind === 'pol' ? c.influence + 'I' : 'S'}]`);\n        const öffentlichkeitKarten = currentBoard.innen.map(c => `${c.name}[${c.kind === 'spec' ? c.tag || 'S' : 'P'}]`);\n        log(`📋 P${player} BOARD: Regierung=[${regierungKarten.join(', ')}] | Öffentlichkeit=[${öffentlichkeitKarten.join(', ')}]`);\n\n        // 🔥 JOSCHKA FISCHER NGO-EFFEKT: Jetzt als kontinuierlicher Aura-Effekt in sumRowWithAuras implementiert\n        log(`🔍 DEBUG: Karte gespielt - Name: ${playedCard.name}, Tag: ${playedCard.tag || 'Kein Tag'}, Lane: ${targetLane}, Kind: ${playedCard.kind}`);\n        if (playedCard.tag === 'NGO') {\n          log(`🔍 NGO-Karte gespielt: ${playedCard.name} [NGO] - Kontinuierliche Aura-Effekte werden bei Rundenauswertung berechnet`);\n\n          // 🎯 SOFORTIGE SYNERGIE-PRÜFUNG: Joschka Fischer + NGO\n          const joschaFischer = currentBoard.aussen.find(card => card.kind === 'pol' && card.effect === 'ngo_boost');\n          if (joschaFischer) {\n            log(`🔥🔥🔥 SYNERGIE AKTIVIERT! 🔥🔥🔥 Joschka Fischer + ${playedCard.name}[NGO] → +1 Einfluss bei Rundenauswertung`);\n          }\n        }\n      } else if (playedCard.kind === 'spec') {\n        var _type, _type2;\n        const specCard = playedCard;\n        const typeStr = String(specCard.type || '').toLowerCase();\n        const isInitiative = /initiative/.test(typeStr); // matcht \"Initiative\", \"Sofort-Initiative\", etc.\n\n        // 1) Falls es eine \"Systemrelevant\" ist (sofortiger Buff auf letzte eigene Regierungskarte)\n        if (playedCard.kind === 'spec' && (_type = playedCard.type) !== null && _type !== void 0 && _type.toLowerCase().includes('systemrelevant')) {\n          const ownBoard = newState.board[player];\n          const candidates = [...ownBoard.aussen, ...ownBoard.innen].filter(c => c.kind === 'pol');\n          const target = candidates[candidates.length - 1]; // letzte eigene Regierungskarte\n          if (target) {\n            target.protected = true;\n            log(`🛡️ ${target.name} erhält einmaligen Schutz.`);\n          } else {\n            log('🛈 Systemrelevant: Keine eigene Regierungskarte im Spiel – Effekt verpufft.');\n          }\n          // danach die Spezialkarte normal entsorgen\n          newState.discard.push(playedCard);\n          return newState;\n        }\n\n        // 1) Dauerhaft-Initiative (Ongoing)\n        if (typeStr.includes('dauerhaft')) {\n          // Slot-Mapping: Dauerhaft-Initiativen → initiativePermanent, nicht government\n          const slotType = 'initiativePermanent';\n          if (!newState.permanentSlots[player][slotType]) {\n            newState.permanentSlots[player][slotType] = playedCard;\n            log(`P${player} spielt ${playedCard.name} als Dauerhafte Initiative (Slot: ${slotType})`);\n          } else {\n            var _newState$permanentSl;\n            log(`⚠️ WARN: Slot occupied - Slot ${slotType} already has ${(_newState$permanentSl = newState.permanentSlots[player][slotType]) === null || _newState$permanentSl === void 0 ? void 0 : _newState$permanentSl.name}`);\n          }\n\n          // 6) Karteneffekte enqueuen + Queue auflösen\n          triggerCardEffects(newState, player, playedCard);\n          // Migration Helper verwenden\n          migrateLegacyQueue(newState);\n          // Nur noch _effectQueue verwenden\n          if (newState._effectQueue && newState._effectQueue.length > 0) {\n            resolveQueue(newState, newState._effectQueue);\n            newState._effectQueue = [];\n            // Nach Queue-Auflösung: Hand-Arrays immutabel neu zuweisen\n            afterQueueResolved === null || afterQueueResolved === void 0 ? void 0 : afterQueueResolved();\n          }\n\n          // Check for trap triggers\n          applyTrapsOnCardPlayed(newState, player, playedCard, e => (newState._effectQueue ??= []).push(e), m => (newState._effectQueue ??= []).push({\n            type: 'LOG',\n            msg: m\n          }));\n          return newState;\n        }\n\n        // 2) Sofort-/Sofort-Initiativen (Instant)\n        if (isInitiative) {\n          if (!specCard.effectKey) {\n            log(`❌ Initiative ohne effectKey: ${specCard.name}`);\n          } else {\n            log(`🧩 INIT: ${specCard.name} [${String(specCard.effectKey)}] gespielt`);\n          }\n\n          // 🔧 NEU: Sofort-Initiativen werden in das sofort Array gelegt statt sofort aktiviert\n          if (typeStr.includes('sofort')) {\n            // Prüfe ob bereits eine Sofort-Initiative im Slot liegt\n            if (newState.board[player].sofort.length > 0) {\n              var _newState$board$playe;\n              log(`❌ ERROR: Sofort-Initiative-Slot bereits besetzt - ${(_newState$board$playe = newState.board[player].sofort[0]) === null || _newState$board$playe === void 0 ? void 0 : _newState$board$playe.name} muss erst aktiviert werden`);\n              // Karte zurück in die Hand\n              newState.hands[player] = [...newState.hands[player], playedCard];\n              // AP zurückgeben\n              newState.actionPoints[player] += cost;\n              // AP zurückgegeben, keine Aktion rückgängig zu machen\n              return newState;\n            }\n\n            // Sofort-Initiative in das sofort Array legen\n            newState.board[player].sofort = [playedCard];\n            log(`🎯 P${player} legt ${playedCard.name} in Sofort-Initiative-Slot (kann später aktiviert werden)`);\n\n            // Sofort-Initiativen: auf Board.sofort legen (nicht direkt entsorgen)\n            if (!newState._effectQueue) newState._effectQueue = [];\n            newState._effectQueue.push({\n              type: 'LOG',\n              msg: `🔔 Sofort-Initiative bereit: ${playedCard.name} (zum Aktivieren anklicken oder Taste 'A')`\n            });\n            return newState;\n          }\n\n          // Dauerhaft-Initiativen werden weiterhin sofort aktiviert\n          // Initiative in den Ablagestapel\n          newState.discard = [...newState.discard, playedCard];\n          log(`P${player} spielt Initiative: ${playedCard.name}`);\n\n          // 6) Karteneffekte enqueuen + Queue auflösen\n          triggerCardEffects(newState, player, playedCard);\n          // Migration Helper verwenden\n          migrateLegacyQueue(newState);\n          // Nur noch _effectQueue verwenden\n          if (newState._effectQueue && newState._effectQueue.length > 0) {\n            resolveQueue(newState, newState._effectQueue);\n            newState._effectQueue = [];\n            // Nach Queue-Auflösung: Hand-Arrays immutabel neu zuweisen\n            afterQueueResolved === null || afterQueueResolved === void 0 ? void 0 : afterQueueResolved();\n          }\n\n          // Check for trap triggers\n          applyTrapsOnCardPlayed(newState, player, playedCard, e => (newState._effectQueue ??= []).push(e), m => (newState._effectQueue ??= []).push({\n            type: 'LOG',\n            msg: m\n          }));\n\n          // 🔥 CLUSTER 3: Auren-Flags neu berechnen (nach Kartenspielen)\n          recomputeAuraFlags(newState);\n\n          // 🔥 CLUSTER 3: Ai Weiwei Bonus wird bei Aktivierung angewendet (nicht beim Spielen)\n\n          // 🔥 PASSIVE EFFEKTE NACH INITIATIVE: Mark Zuckerberg & Sam Altman\n          // Diese Effekte werden jetzt über INITIATIVE_ACTIVATED Event + Board-Check gehandhabt\n          // Keine direkten Flag-Mutationen mehr - alles über Events\n\n          return newState;\n        }\n\n        // 3) Öffentlichkeit (Public)\n        if (typeStr === 'öffentlichkeitskarte' || typeStr === 'oeffentlichkeitskarte' || typeStr === 'öffentlichkeit' || typeStr === 'public') {\n          if (newState.board[player].innen.length < 5) {\n            const innenArray = [...newState.board[player].innen, playedCard];\n            const playerBoardCloned = {\n              ...newState.board[player],\n              innen: innenArray\n            };\n            newState.board = {\n              ...newState.board,\n              [player]: playerBoardCloned\n            };\n            log(`P${player} spielt ${playedCard.name} in Öffentlichkeit`);\n\n            // Sofort Auren prüfen (z.B. JF +1, wenn JF schon liegt)\n            applyAurasForPlayer(newState, player, log);\n\n            // 6) Karteneffekte enqueuen + Queue auflösen\n            triggerCardEffects(newState, player, playedCard);\n            // Migration Helper verwenden\n            migrateLegacyQueue(newState);\n            if (newState._effectQueue && newState._effectQueue.length > 0) {\n              resolveQueue(newState, newState._effectQueue);\n              newState._effectQueue = [];\n              // Nach Queue-Auflösung: Hand-Arrays immutabel neu zuweisen\n              afterQueueResolved === null || afterQueueResolved === void 0 ? void 0 : afterQueueResolved();\n            }\n\n            // Check for trap triggers\n            applyTrapsOnCardPlayed(newState, player, playedCard, e => (newState._effectQueue ??= []).push(e), m => (newState._effectQueue ??= []).push({\n              type: 'LOG',\n              msg: m\n            }));\n\n            // 🔥 PUBLIC CARD EFFECTS - Passive effects when played\n\n            // Helper function to draw a card for the player\n            const drawCardForPlayer = cardName => {\n              if (newState.decks[player].length > 0) {\n                const drawnCard = newState.decks[player].shift();\n                if (drawnCard) {\n                  newState.hands[player].push(drawnCard);\n                  log(`🔥 ${cardName.toUpperCase()} EFFEKT: +1 Karte gezogen (${drawnCard.name})`);\n                  return true;\n                }\n              }\n              return false;\n            };\n            if (specCard.name === 'Elon Musk') {\n              // Effect: \"Ziehe 1 Karte. Deine erste Initiative pro Runde kostet 1 Aktionspunkt weniger.\"\n              drawCardForPlayer('Elon Musk');\n              // 🔥 QUEUE-SYSTEM: Erste Initiative pro Runde → Refund wird über triggerCardEffects gehandhabt\n            } else if (specCard.name === 'Bill Gates') {\n              // Effect: \"Ziehe 1 Karte. Deine nächste Initiative kostet 1 Aktionspunkt weniger.\"\n              drawCardForPlayer('Bill Gates');\n              // 🔥 QUEUE-SYSTEM: Nächste Initiative → Refund wird über triggerCardEffects gehandhabt\n            } else if (specCard.name === 'Jeff Bezos') {\n              // Effect: \"Ziehe 1 Karte beim Ausspielen. Wenn eine Plattform liegt: +1 Aktionspunkt.\"\n              drawCardForPlayer('Jeff Bezos');\n              const hasPlatform = newState.board[player].innen.some(c => c.kind === 'spec' && c.tag === 'Plattform');\n              if (hasPlatform) {\n                newState.actionPoints[player] += 1;\n                log(`🔥 JEFF BEZOS: +1 AP durch Plattform-Synergie! (${newState.actionPoints[player] - 1} → ${newState.actionPoints[player]})`);\n              }\n            } else if (specCard.name === 'Warren Buffett') {\n              // Effect: \"Ziehe 1 Karte. Bei einer Wirtschafts-Initiative: +1 Effekt.\"\n              drawCardForPlayer('Warren Buffett');\n              // TODO: Implement \"Wirtschafts-Initiative +1 Effect\" logic\n              log(`📊 WARREN BUFFETT: Bei Wirtschafts-Initiativen +1 Effekt! (TODO: Implementierung)`);\n            } else if (specCard.name === 'Gautam Adani') {\n              // Effect: \"Ziehe 1 Karte. Bei einer Infrastruktur-Initiative: +1 Effekt.\"\n              drawCardForPlayer('Gautam Adani');\n              // TODO: Implement \"Infrastruktur-Initiative +1 Effect\" logic\n              log(`📊 GAUTAM ADANI: Bei Infrastruktur-Initiativen +1 Effekt! (TODO: Implementierung)`);\n            } else if (specCard.name === 'Zhang Yiming') {\n              // Effect: \"Ziehe 1 Karte. Bei Medien auf dem Feld: -1 Aktionspunkt auf deine nächste Initiative.\"\n              drawCardForPlayer('Zhang Yiming');\n              const hasMedia = newState.board[player].innen.some(c => c.kind === 'spec' && c.tag === 'Medien');\n              if (hasMedia) {\n                // TODO: Implement \"nächste Initiative -1 AP\" logic\n                log(`🔥 ZHANG YIMING: Nächste Initiative kostet 1 AP weniger durch Medien-Synergie! (TODO: Implementierung)`);\n              }\n            } else if (specCard.name === 'George Soros') {\n              // Effect: \"+1 Aktionspunkt wenn der Gegner eine autoritäre Regierungskarte hat.\"\n              const opponent = player === 1 ? 2 : 1;\n              const hasAuthoritarianCard = newState.board[opponent].aussen.some(card => {\n                const polCard = card;\n                return polCard.tag === 'Staatsoberhaupt' && polCard.influence >= 8; // High influence leaders\n              });\n              if (hasAuthoritarianCard) {\n                newState.actionPoints[player] += 1;\n                log(`🔥 GEORGE SOROS EFFEKT: +1 AP durch autoritäre Regierung des Gegners!`);\n                log(`📊 SOROS: Aktionspunkte ${newState.actionPoints[player] - 1} → ${newState.actionPoints[player]}`);\n              } else {\n                log(`💭 George Soros: Keine autoritären Karten beim Gegner - Effekt nicht ausgelöst`);\n              }\n            }\n\n            // 🔗 NGO-Synergie: Wenn eine NGO gelegt wird und Joschka Fischer liegt, erhält P${player} +1 Einfluss (Rundenauswertung)\n            if (specCard.tag === 'NGO') {\n              const hasJoschka = newState.board[player].aussen.some(c => c.kind === 'pol' && c.name === 'Joschka Fischer' && !c.deactivated);\n              if (hasJoschka) {\n                log(`🔥🔥🔥 SYNERGIE AKTIVIERT! 🔥🔥🔥 Joschka Fischer + ${playedCard.name}[NGO] → +1 Einfluss bei Rundenauswertung`);\n              }\n            }\n          } else {\n            log(`❌ ERROR: Lane full - Öffentlichkeit ist voll (5/5)`);\n          }\n\n          // Simplified AP system: No refunds\n          return newState;\n        }\n\n        // 4) Default: Traps/Interventions\n        // Falls Trap-Karte gelegt wird\n        if (playedCard.kind === 'spec' && (_type2 = playedCard.type) !== null && _type2 !== void 0 && _type2.toLowerCase().includes('trap')) {\n          registerTrap(newState, player, playedCard.key || playedCard.name.toLowerCase().replace(/[- ]/g, '_'));\n          // NICHT sofort checken – sie wartet auf den Gegner\n          return newState;\n        }\n        newState.traps[player] = [...newState.traps[player], playedCard];\n        log(`P${player} spielt ${playedCard.name} als ${specCard.type}`);\n\n        // 6) Karteneffekte enqueuen + Queue auflösen\n        triggerCardEffects(newState, player, playedCard);\n        // Migration Helper verwenden\n        migrateLegacyQueue(newState);\n        // Nur noch _effectQueue verwenden\n        if (newState._effectQueue && newState._effectQueue.length > 0) {\n          resolveQueue(newState, newState._effectQueue);\n          newState._effectQueue = [];\n          // Nach Queue-Auflösung: Hand-Arrays immutabel neu zuweisen\n          afterQueueResolved === null || afterQueueResolved === void 0 ? void 0 : afterQueueResolved();\n        }\n\n        // Check for trap triggers\n        applyTrapsOnCardPlayed(newState, player, playedCard, e => (newState._effectQueue ??= []).push(e), m => (newState._effectQueue ??= []).push({\n          type: 'LOG',\n          msg: m\n        }));\n\n        // Simplified AP system: No refunds\n        return newState;\n      }\n\n      // 6) Karteneffekte enqueuen + Queue auflösen (fallback für unbekannte Kartentypen)\n      triggerCardEffects(newState, player, selectedCard);\n      // Migration Helper verwenden\n      migrateLegacyQueue(newState);\n      // Nur noch _effectQueue verwenden\n      if (newState._effectQueue && newState._effectQueue.length > 0) {\n        resolveQueue(newState, newState._effectQueue);\n        newState._effectQueue = [];\n        // Nach Queue-Auflösung: Hand-Arrays immutabel neu zuweisen\n        afterQueueResolved === null || afterQueueResolved === void 0 ? void 0 : afterQueueResolved();\n      }\n\n      // Check for trap triggers\n      applyTrapsOnCardPlayed(newState, player, selectedCard, e => (newState._effectQueue ??= []).push(e), m => (newState._effectQueue ??= []).push({\n        type: 'LOG',\n        msg: m\n      }));\n\n      // Simplified AP system: No refunds\n\n      // Kein Aktionenlimit mehr → automatischer Turnwechsel entfällt\n\n      return newState;\n    });\n  }, [setGameState, log]);\n  const activateInstantInitiative = useCallback(player => {\n    logger.info(`activateInstantInitiative START P${player}`);\n    setGameState(prev => {\n      if (prev.current !== player) {\n        log(`❌ ERROR: Not player turn - Current: ${prev.current}, Attempted: ${player}`);\n        return prev;\n      }\n      const instantCard = prev.board[player].sofort[0];\n      if (!instantCard) {\n        log(`❌ ERROR: No Sofort-Initiative in slot for player ${player}`);\n        return prev;\n      }\n      const newState = {\n        ...prev\n      };\n\n      // 1) Normale Karten-Effekte der Sofort-Karte feuern\n      triggerCardEffects(newState, player, instantCard);\n\n      // Check for trap triggers\n      applyTrapsOnCardPlayed(newState, player, instantCard, e => (newState._effectQueue ??= []).push(e), m => (newState._effectQueue ??= []).push({\n        type: 'LOG',\n        msg: m\n      }));\n\n      // 2) Queue auflösen (BEVOR die Karte entfernt wird)\n      if (newState._effectQueue && newState._effectQueue.length > 0) {\n        resolveQueue(newState, [...newState._effectQueue]);\n        newState._effectQueue = [];\n        // Nach Queue-Auflösung: Hand-Arrays immutabel neu zuweisen\n        afterQueueResolved === null || afterQueueResolved === void 0 ? void 0 : afterQueueResolved();\n      }\n\n      // 3) Karte NACH Queue-Auflösung in den Ablagestapel\n      const [played] = newState.board[player].sofort.splice(0, 1);\n      newState.discard.push(played);\n      return newState;\n    });\n  }, [setGameState, log]);\n  const endTurn = useCallback((reason = 'button_end_turn') => {\n    logger.info(`endTurn START reason=${reason}`);\n    setGameState(prev => {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const current = prev.current;\n\n      // 1) Schon im Abschluss? -> Nichts tun (Idempotenz)\n      if (prev.isEndingTurn) {\n        log('🔁 Zugabschluss läuft bereits – warte auf Queue.');\n        return prev;\n      }\n      const newState = {\n        ...prev,\n        isEndingTurn: true\n      };\n\n      // 2) Hängen noch Effekte in der Queue? -> Auflösen lassen\n      if (newState._effectQueue && newState._effectQueue.length > 0) {\n        log('⏳ Effekte werden noch aufgelöst – Zugwechsel folgt automatisch.');\n        resolveQueue(newState, [...newState._effectQueue]);\n        newState._effectQueue = [];\n        // Nach Queue-Auflösung: Wenn Flag noch gesetzt, Zug beenden\n        if (newState.isEndingTurn) {\n          return reallyEndTurn(newState, log);\n        }\n        return newState;\n      }\n\n      // 3) Keine Effekte mehr -> sofort beenden\n      return reallyEndTurn(newState, log);\n    });\n  }, [setGameState, log]);\n\n  // Legacy: nextTurn als Alias für endTurn für Kompatibilität\n  const nextTurn = useCallback(() => {\n    logger.info('nextTurn alias called');\n    endTurn('auto');\n  }, [endTurn]);\n  const passTurn = useCallback(player => {\n    logger.info(`passTurn START P${player}`);\n    setGameState(prev => {\n      logger.dbg(`passTurn setState current=${prev.current} player=${player}`);\n      if (prev.current !== player) {\n        logger.dbg(`passTurn wrong turn current=${prev.current} attempted=${player}`);\n        return prev;\n      }\n      const newState = {\n        ...prev,\n        passed: {\n          ...prev.passed,\n          [player]: true\n        }\n      };\n      logger.dbg(`Pass status updated P1=${newState.passed[1]} P2=${newState.passed[2]}`);\n      log(`🚫 Spieler ${player} passt.`);\n\n      // ❗ Kein Nachziehen bei Pass:\n      // Der passierende Spieler kommt in dieser Runde nicht mehr dran.\n      // Die nächste Runde startet ohnehin mit 5 neuen Handkarten.\n\n      // Check if round should end (both players passed)\n      const shouldEndRound = checkRoundEnd(newState);\n      logger.dbg(`Should end round? ${shouldEndRound}`);\n      if (shouldEndRound) {\n        log(`🏁 Runde ${newState.round} wird beendet und ausgewertet.`);\n        return resolveRound(newState, log);\n      } else {\n        // Switch turn to other player for their final chance\n        const otherPlayer = player === 1 ? 2 : 1;\n        logger.dbg(`Switching to other player ${otherPlayer} hasPassed=${newState.passed[otherPlayer]}`);\n\n        // Only switch if other player hasn't passed yet\n        if (!newState.passed[otherPlayer]) {\n          newState.current = otherPlayer;\n          newState.actionPoints = {\n            ...newState.actionPoints,\n            [otherPlayer]: 2\n          };\n\n          // Apply new start-of-turn hooks\n          applyStartOfTurnFlags(newState, otherPlayer, log);\n\n          // 🔥 CLUSTER 3: Auren-Flags beim Zugstart neu berechnen\n          recomputeAuraFlags(newState);\n          log(`⏭️ Spieler ${otherPlayer} hat noch einen letzten Zug.`);\n          logger.dbg(`Turn switched to player ${otherPlayer}`);\n        } else {\n          // Both players have passed now, end round\n          log(`🏁 Runde ${newState.round} wird beendet (beide Spieler haben gepasst).`);\n          return resolveRound(newState, log);\n        }\n      }\n      return newState;\n    });\n  }, [setGameState, log]);\n  return {\n    startMatchWithDecks,\n    startMatchVsAI,\n    playCard,\n    activateInstantInitiative,\n    passTurn,\n    nextTurn,\n    endTurn\n  };\n}\n_s(useGameActions, \"jzb8z14yzxI/liNZJ2ku8sm6pbk=\");","map":{"version":3,"names":["useCallback","useRef","createDefaultEffectFlags","buildDeckFromEntries","sumGovernmentInfluenceWithAuras","PRESET_DECKS","getCardActionPointCost","getNetApCost","canPlayCard","triggerCardEffects","ensureTestBaselineAP","resolveQueue","applyStartOfTurnFlags","registerTrap","applyTrapsOnCardPlayed","recomputeAuraFlags","emptyBoard","logger","migrateLegacyQueue","state","other","p","ensureFlags","s","effectFlags","pickLane","c","tag","kind","isCardPlayableNow","player","card","deactivated","lane","board","length","t","String","type","toLowerCase","innen","slot","permanentSlots","hasPlayableZeroCost","hands","cost","applyAurasForPlayer","log","hasNgo","some","newAussen","aussen","map","pol","baseInfluence","influence","prev","bonus","name","effect","checkRoundEnd","gameState","result","passed","dbg","drawCardsFromDeck","count","deck","decks","drawnCards","splice","Math","min","reallyEndTurn","current","isEndingTurn","drawnCard","shift","push","shouldEndRound","round","resolveRound","newCurrent","actionPoints","p1Influence","p2Influence","roundWinner","cardsToDiscard","government","public","sofort","newP1Hand","newP2Hand","newRoundsWon","roundsWon","p1Wins","p2Wins","gameWinner","newState","actionsUsed","initiativePermanent","slice","discard","useGameActions","setGameState","afterQueueResolved","_s","playingUidRef","Set","startMatchWithDecks","p1DeckEntries","p2DeckEntries","p1Cards","p2Cards","p1NgoCarten","filter","p1PlatformCards","p1JoschaCards","p1PublicCards","join","d1","d2","h1","h2","traps","shields","activeRefresh","startMatchVsAI","presetKey","playCard","handIndex","info","warn","hand","i","ngoCards","platformCards","selectedCard","prevAp","max","ef","newHand","playedCard","uid","has","add","currentBoard","publicCardsOnBoard","polCard","targetLane","laneArray","playerBoardCloned","event","_effectQueue","delete","e","m","msg","opponent","opponentBoard","romanAbramovich","find","regierungKarten","öffentlichkeitKarten","joschaFischer","_type","_type2","specCard","typeStr","isInitiative","test","includes","ownBoard","candidates","target","protected","slotType","_newState$permanentSl","effectKey","_newState$board$playe","innenArray","drawCardForPlayer","cardName","toUpperCase","hasPlatform","hasMedia","hasAuthoritarianCard","hasJoschka","key","replace","activateInstantInitiative","instantCard","played","endTurn","reason","nextTurn","passTurn","otherPlayer"],"sources":["C:/Users/skank/Videos/Cards/Milchcards/src/hooks/useGameActions.ts"],"sourcesContent":["import { useCallback, useRef } from 'react';\r\nimport { GameState, Card, Player, BuilderEntry, PoliticianCard } from '../types/game';\r\nimport { createDefaultEffectFlags } from '../types/game';\r\nimport { buildDeckFromEntries, sumGovernmentInfluenceWithAuras } from '../utils/gameUtils';\r\nimport { PRESET_DECKS } from '../data/gameData';\r\nimport { getCardActionPointCost, getNetApCost, canPlayCard, isInitiativeCard, isGovernmentCard } from '../utils/ap';\r\nimport { triggerCardEffects } from '../effects/cards';\r\nimport { ensureTestBaselineAP } from '../utils/testCompat';\r\nimport { resolveQueue } from '../utils/queue';\r\nimport { applyStartOfTurnFlags } from '../utils/startOfTurnHooks';\r\nimport { registerTrap, applyTrapsOnCardPlayed } from '../utils/traps';\r\nimport { recomputeAuraFlags } from '../state/effects';\r\nimport { activateInstantInitiative as activateInstantInitiativeRuntime } from '../state/instantRuntime';\r\nimport { isInstantInitiative } from '../utils/initiative';\r\nimport { emptyBoard } from '../state/board';\r\nimport type { EffectEvent } from '../types/effects';\r\nimport { logger } from '../debug/logger';\r\n\r\n// Migration Helper für Queue-Vereinheitlichung\r\nconst migrateLegacyQueue = (state: any) => {\r\n  // Queue migration completed - only _effectQueue exists now\r\n};\r\n\r\n// Helper function for getting the other player\r\nconst other = (p: Player): Player => (p === 1 ? 2 : 1) as Player;\r\n\r\n// Hilfsfunktion: stellt sicher, dass effectFlags vorhanden sind\r\nconst ensureFlags = (s: GameState, p: Player) => {\r\n  if (!s.effectFlags) {\r\n    (s as any).effectFlags = { 1: createDefaultEffectFlags(), 2: createDefaultEffectFlags() };\r\n  } else {\r\n    s.effectFlags[p] = { ...createDefaultEffectFlags(), ...s.effectFlags[p] };\r\n  }\r\n};\r\n\r\n// Lane-Heuristik wie in playCard\r\nconst pickLane = (c: Card): 'innen'|'aussen' => {\r\n  const tag = (c as any).tag;\r\n  if (c.kind === 'pol' && (tag === 'Staatsoberhaupt' || tag === 'Regierungschef' || tag === 'Diplomat')) return 'aussen';\r\n  return 'innen';\r\n};\r\n\r\nconst isCardPlayableNow = (state: GameState, player: Player, card: Card): boolean => {\r\n  if ((card as any).deactivated) return false;\r\n\r\n  if (card.kind === 'pol') {\r\n    const lane = pickLane(card);\r\n    return state.board[player][lane].length < 5;\r\n  }\r\n\r\n  if (card.kind === 'spec') {\r\n    const t = String((card as any).type || '').toLowerCase();\r\n    if (t === 'öffentlichkeitskarte' || t === 'oeffentlichkeitskarte' || t === 'public') {\r\n      return state.board[player].innen.length < 5;\r\n    }\r\n    if (t === 'dauerhaft-initiative') {\r\n      const slot = 'government'; // wie bei dir „simplified\"\r\n      return !state.permanentSlots[player][slot];\r\n    }\r\n    // sonst: Fallen/Interventionen – aktuell immer erlaubt\r\n    return true;\r\n  }\r\n\r\n  return false;\r\n};\r\n\r\nexport const hasPlayableZeroCost = (state: GameState, player: Player): boolean => {\r\n  for (const c of state.hands[player]) {\r\n    const { cost } = getCardActionPointCost(state, player, c);\r\n    if (cost === 0 && isCardPlayableNow(state, player, c)) return true;\r\n  }\r\n  return false;\r\n};\r\n\r\n// Helper function to apply auras for a player (instant updates for Joschka Fischer + NGO synergy)\r\nfunction applyAurasForPlayer(state: GameState, player: Player, log?: (msg: string) => void) {\r\n  const board = state.board[player];\r\n  const hasNgo = board.innen.some(c =>\r\n    c.kind === 'spec' &&\r\n    (c as any).type === 'Öffentlichkeitskarte' &&\r\n    (c as any).tag === 'NGO' &&\r\n    !(c as any).deactivated\r\n  );\r\n\r\n  const newAussen = board.aussen.map(card => {\r\n    if (card.kind !== 'pol') return card;\r\n    const pol: any = { ...card };\r\n    if (pol.baseInfluence == null) pol.baseInfluence = pol.influence;\r\n    const prev = pol.influence as number;\r\n\r\n    let bonus = 0;\r\n    if (!pol.deactivated && pol.name === 'Joschka Fischer' && pol.effect === 'ngo_boost' && hasNgo) {\r\n      bonus += 1;\r\n    }\r\n    pol.influence = (pol.baseInfluence as number) + bonus;\r\n    if (log && pol.influence > prev) log(`PASSIV: ${pol.name} +${pol.influence - prev} I (jetzt ${pol.influence}).`);\r\n    return pol;\r\n  });\r\n\r\n  state.board = {\r\n    ...state.board,\r\n    [player]: { ...state.board[player], aussen: newAussen },\r\n  } as any;\r\n}\r\n\r\n\r\n\r\n// Helper function to check if round should end\r\nfunction checkRoundEnd(gameState: GameState): boolean {\r\n  // Round ends if both players have passed\r\n  const result = gameState.passed[1] && gameState.passed[2];\r\n  logger.dbg(`checkRoundEnd P1=${gameState.passed[1]} P2=${gameState.passed[2]} result=${result}`);\r\n  return result;\r\n}\r\n\r\n// Helper function to draw cards from deck\r\nfunction drawCardsFromDeck(gameState: GameState, player: Player, count: number): Card[] {\r\n  const deck = [...gameState.decks[player]];\r\n  const drawnCards = deck.splice(0, Math.min(count, deck.length));\r\n  return drawnCards;\r\n}\r\n\r\n// Helper function to really end a turn (extracted from nextTurn logic)\r\nfunction reallyEndTurn(gameState: GameState, log: (msg: string) => void): GameState {\r\n  const current = gameState.current;\r\n\r\n  // Flag zurücksetzen - Zug-Ende wird jetzt wirklich durchgeführt\r\n  gameState.isEndingTurn = false;\r\n\r\n  // ✅ Karte nachziehen am Ende eines Zugs (nur wenn NICHT \"pass\")\r\n  if (!gameState.passed[current]) {\r\n    const drawnCard = gameState.decks[current].shift();\r\n    if (drawnCard) {\r\n      gameState.hands[current].push(drawnCard);\r\n      log(`🔥 Zug-Ende: +1 Karte gezogen (${drawnCard.name})`);\r\n    }\r\n  } else {\r\n    log(`⏭️ P${current} hat gepasst – kein Nachziehen.`);\r\n  }\r\n\r\n  // Check if round should end\r\n  const shouldEndRound = checkRoundEnd(gameState);\r\n  if (shouldEndRound) {\r\n    log(`🏁 Runde ${gameState.round} wird beendet (Zug-Ende).`);\r\n    return resolveRound(gameState, log);\r\n  }\r\n\r\n  // Spielerwechsel + AP reset\r\n  const newCurrent: Player = current === 1 ? 2 : 1;\r\n  gameState.current = newCurrent;\r\n  gameState.actionPoints = { ...gameState.actionPoints, [newCurrent]: 2 };\r\n  gameState.passed = { ...gameState.passed, [newCurrent]: false };\r\n\r\n            // Apply new start-of-turn hooks\r\n          applyStartOfTurnFlags(gameState, newCurrent, log);\r\n\r\n        // 🔥 CLUSTER 3: Auren-Flags beim Zugstart neu berechnen\r\n        recomputeAuraFlags(gameState);\r\n\r\n  // Reset turn-bezogener Flag-Nutzungen (handled in applyStartOfTurnFlags)\r\n\r\n  log(`🔄 Zug-Ende: Spieler ${newCurrent} ist am Zug (2 AP verfügbar)`);\r\n\r\n  return gameState;\r\n}\r\n\r\n// Helper function to resolve round and start new one\r\nfunction resolveRound(gameState: GameState, log: (msg: string) => void): GameState {\r\n  // Calculate influence for both players\r\n  const p1Influence = sumGovernmentInfluenceWithAuras(gameState, 1);\r\n  const p2Influence = sumGovernmentInfluenceWithAuras(gameState, 2);\r\n\r\n  log(`📊 Rundenauswertung: P1 ${p1Influence} Einfluss vs P2 ${p2Influence} Einfluss`);\r\n\r\n  // Determine winner\r\n  let roundWinner: Player;\r\n  if (p1Influence > p2Influence) {\r\n    roundWinner = 1;\r\n    log(`🏆 Spieler 1 gewinnt die Runde! (${p1Influence} > ${p2Influence})`);\r\n  } else if (p2Influence > p1Influence) {\r\n    roundWinner = 2;\r\n    log(`🏆 Spieler 2 gewinnt die Runde! (${p2Influence} > ${p1Influence})`);\r\n  } else {\r\n    // Tie - current player wins\r\n    roundWinner = gameState.current;\r\n    log(`🤝 Unentschieden! Spieler ${roundWinner} gewinnt als aktiver Spieler.`);\r\n  }\r\n\r\n  // Collect all cards to move to discard\r\n  const cardsToDiscard: Card[] = [\r\n    ...gameState.board[1].innen,\r\n    ...gameState.board[1].aussen,\r\n    ...gameState.board[2].innen,\r\n    ...gameState.board[2].aussen,\r\n    ...(gameState.permanentSlots[1].government ? [gameState.permanentSlots[1].government] : []),\r\n    ...(gameState.permanentSlots[1].public ? [gameState.permanentSlots[1].public] : []),\r\n    ...(gameState.permanentSlots[2].government ? [gameState.permanentSlots[2].government] : []),\r\n    ...(gameState.permanentSlots[2].public ? [gameState.permanentSlots[2].public] : []),\r\n    ...gameState.board[1].sofort,\r\n    ...gameState.board[2].sofort\r\n  ];\r\n\r\n  // Draw 5 new cards for each player\r\n  const newP1Hand = drawCardsFromDeck(gameState, 1, 5);\r\n  const newP2Hand = drawCardsFromDeck(gameState, 2, 5);\r\n\r\n  // Calculate new rounds won\r\n  const newRoundsWon = {\r\n    ...gameState.roundsWon,\r\n    [roundWinner]: gameState.roundsWon[roundWinner] + 1\r\n  };\r\n\r\n  // Check if game should end (Best of 3: first to 2 wins)\r\n  const p1Wins = newRoundsWon[1];\r\n  const p2Wins = newRoundsWon[2];\r\n\r\n  if (p1Wins >= 2 || p2Wins >= 2) {\r\n    const gameWinner = p1Wins >= 2 ? 1 : 2;\r\n    log(`🏆🎉 SPIEL BEENDET! Spieler ${gameWinner} gewinnt das Match! (${p1Wins}-${p2Wins})`);\r\n    log(`🔥 Gesamtergebnis: Player ${gameWinner} ist der Sieger!`);\r\n\r\n    // Return final state with game winner\r\n    return {\r\n      ...gameState,\r\n      roundsWon: newRoundsWon,\r\n      gameWinner,\r\n      // Keep current board state for final display\r\n      passed: { 1: true, 2: true }, // Both passed to indicate game end\r\n    };\r\n  }\r\n\r\n  // Create new state for next round\r\n  const newState: GameState = {\r\n    ...gameState,\r\n    round: gameState.round + 1,\r\n    current: roundWinner, // Winner starts next round\r\n         passed: { 1: false, 2: false }, // Reset pass status\r\n     actionPoints: { 1: 2, 2: 2 }, // Reset AP\r\n     actionsUsed: { 1: 0, 2: 0 }, // Reset actions (kept for compatibility)\r\n     roundsWon: newRoundsWon,\r\n    effectFlags: {\r\n      1: createDefaultEffectFlags(),\r\n      2: createDefaultEffectFlags()\r\n    },\r\n    // Clear all board positions\r\n    board: emptyBoard(),\r\n    // Clear permanent slots\r\n    permanentSlots: {\r\n      1: { government: null, public: null, initiativePermanent: null },\r\n      2: { government: null, public: null, initiativePermanent: null }\r\n    },\r\n    // instantSlot wird nicht mehr verwendet - Sofort-Initiativen gehen in board[player].sofort\r\n    // New hands with 5 cards each\r\n    hands: {\r\n      1: newP1Hand,\r\n      2: newP2Hand\r\n    },\r\n    // Update decks (cards were removed during drawing)\r\n    decks: {\r\n      1: gameState.decks[1].slice(newP1Hand.length),\r\n      2: gameState.decks[2].slice(newP2Hand.length)\r\n    },\r\n    // Update discard pile\r\n    discard: [...gameState.discard, ...cardsToDiscard]\r\n  };\r\n\r\n  log(`🆕 Runde ${newState.round} startet! Spieler ${roundWinner} beginnt. (Rundenstand: P1 ${newState.roundsWon[1]} - P2 ${newState.roundsWon[2]})`);\r\n  log(`🃏 Beide Spieler erhalten 5 neue Handkarten.`);\r\n\r\n  return newState;\r\n}\r\n\r\nexport function useGameActions(\r\n  gameState: GameState,\r\n  setGameState: React.Dispatch<React.SetStateAction<GameState>>,\r\n  log: (msg: string) => void,\r\n  afterQueueResolved?: () => void\r\n) {\r\n  // Guard against duplicate concurrent playCard calls for the same card UID\r\n  const playingUidRef = useRef<Set<number>>(new Set());\r\n  const startMatchWithDecks = useCallback((p1DeckEntries: BuilderEntry[], p2DeckEntries: BuilderEntry[]) => {\r\n    const p1Cards = buildDeckFromEntries(p1DeckEntries);\r\n    const p2Cards = buildDeckFromEntries(p2DeckEntries);\r\n\r\n        // Debug: Log deck composition with detailed tag analysis\r\n    const p1NgoCarten = p1Cards.filter(c => (c as any).tag === 'NGO');\r\n    const p1PlatformCards = p1Cards.filter(c => (c as any).tag === 'Plattform');\r\n    const p1JoschaCards = p1Cards.filter(c => (c as any).effect === 'ngo_boost');\r\n    const p1PublicCards = p1Cards.filter(c => c.kind === 'spec' && (c as any).type === 'Öffentlichkeitskarte');\r\n\r\n    log(`🔍 DECK DEBUG P1: ${p1Cards.length} Karten total`);\r\n    log(`🧪 P1 Public Cards: ${p1PublicCards.map(c => `${c.name}${(c as any).tag ? `[${(c as any).tag}]` : ''}`).join(', ')}`);\r\n    log(`🌱 P1 NGO-Karten: ${p1NgoCarten.length > 0 ? p1NgoCarten.map(c => c.name).join(', ') : 'Keine'}`);\r\n    log(`💻 P1 Plattform-Karten: ${p1PlatformCards.length > 0 ? p1PlatformCards.map(c => c.name).join(', ') : 'Keine'}`);\r\n    log(`🎯 JOSCHKA FISCHER: ${p1JoschaCards.length > 0 ? '✅ IM DECK' : '❌ NICHT IM DECK'}`);\r\n\r\n    const d1 = [...p1Cards];\r\n    const d2 = [...p2Cards];\r\n    const h1 = d1.splice(0, Math.min(5, d1.length));\r\n    const h2 = d2.splice(0, Math.min(5, d2.length));\r\n\r\n    setGameState({\r\n      ...gameState,\r\n      round: 1,\r\n      current: 1,\r\n      passed: { 1: false, 2: false },\r\n      decks: { 1: d1, 2: d2 },\r\n      hands: { 1: h1, 2: h2 },\r\n      board: { 1: { innen: [], aussen: [], sofort: [] }, 2: { innen: [], aussen: [], sofort: [] } },\r\n      traps: { 1: [], 2: [] },\r\n      permanentSlots: {\r\n        1: { government: null, public: null, initiativePermanent: null },\r\n        2: { government: null, public: null, initiativePermanent: null },\r\n      },\r\n      // instantSlot wird nicht mehr verwendet - Sofort-Initiativen gehen in board[player].sofort\r\n      discard: [],\r\n      shields: new Set(), // Set<UID>\r\n      effectFlags: {\r\n        1: createDefaultEffectFlags(),\r\n        2: createDefaultEffectFlags()\r\n      },\r\n      actionsUsed: { 1: 0, 2: 0 },\r\n      log: [\r\n        `Match gestartet. P1 und P2 erhalten je ${h1.length}/${h2.length} Startkarten.`,\r\n        `🔍 DECK DEBUG P1: ${p1Cards.length} Karten total`,\r\n        `🧪 P1 Public Cards: ${p1PublicCards.map(c => `${c.name}${(c as any).tag ? `[${(c as any).tag}]` : ''}`).join(', ')}`,\r\n        `🌱 P1 NGO-Karten: ${p1NgoCarten.length > 0 ? p1NgoCarten.map(c => c.name).join(', ') : 'Keine'}`,\r\n        `💻 P1 Plattform-Karten: ${p1PlatformCards.length > 0 ? p1PlatformCards.map(c => c.name).join(', ') : 'Keine'}`,\r\n        `🎯 JOSCHKA FISCHER: ${p1JoschaCards.length > 0 ? '✅ IM DECK' : '❌ NICHT IM DECK'}`,\r\n        `📋 INITIAL BOARD P1: Regierung=[] | Öffentlichkeit=[]`,\r\n        `📋 INITIAL BOARD P2: Regierung=[] | Öffentlichkeit=[]`,\r\n        `🏠 PERMANENT SLOTS: Alle leer`\r\n      ],\r\n      activeRefresh: { 1: 0, 2: 0 },\r\n    });\r\n  }, [gameState, setGameState, log]);\r\n\r\n  const startMatchVsAI = useCallback((p1DeckEntries: BuilderEntry[], presetKey: keyof typeof PRESET_DECKS = 'AUTORITAERER_REALIST') => {\r\n    const p2DeckEntries = PRESET_DECKS[presetKey] as BuilderEntry[];\r\n    startMatchWithDecks(p1DeckEntries, p2DeckEntries);\r\n  }, [startMatchWithDecks]);\r\n\r\n  const playCard = useCallback((player: Player, handIndex: number, lane?: 'innen' | 'aussen') => {\r\n    logger.info(`playCard START P${player} idx=${handIndex}`);\r\n    setGameState(prev => {\r\n      // Test-only baseline fix – ensures AP=5 at game start inside test runner\r\n      ensureTestBaselineAP(prev);\r\n\r\n      // Validate input parameters\r\n      if (prev.current !== player) {\r\n        log(`❌ ERROR: Not player turn - Current: ${prev.current}, Attempted: ${player}`);\r\n        logger.warn(`playCard abort: wrong turn`);\r\n        return prev;\r\n      }\r\n\r\n      const hand = prev.hands[player];\r\n      if (handIndex < 0 || handIndex >= hand.length) {\r\n        log(`❌ ERROR: Invalid hand index - Index: ${handIndex}, Hand length: ${hand.length}`);\r\n        return prev;\r\n      }\r\n\r\n      // Debug: Log current hand contents with detailed tag info\r\n      log(`🔍 HAND DEBUG P${player}: ${hand.map((c, i) => `${i}:${c.name}${(c as any).tag ? `[${(c as any).tag}]` : ''}`).join(', ')}`);\r\n      const ngoCards = hand.filter(c => (c as any).tag === 'NGO');\r\n      const platformCards = hand.filter(c => (c as any).tag === 'Plattform');\r\n      if (ngoCards.length > 0) {\r\n        log(`🌱 NGO-Karten in Hand P${player}: ${ngoCards.map(c => c.name).join(', ')}`);\r\n      }\r\n      if (platformCards.length > 0) {\r\n        log(`💻 Plattform-Karten in Hand P${player}: ${platformCards.map(c => c.name).join(', ')}`);\r\n      }\r\n\r\n      const selectedCard = hand[handIndex];\r\n      if (!canPlayCard(prev, player, selectedCard)) {\r\n        log('🚫 Kann Karte nicht spielen (keine AP verfügbar).');\r\n        return prev;\r\n      }\r\n\r\n      const { cost } = getNetApCost(prev, player, selectedCard);\r\n      const prevAp = prev.actionPoints[player];\r\n\r\n      const newState = { ...prev };\r\n\r\n      // Simplified AP system: All cards cost exactly 1 AP\r\n      newState.actionPoints[player] = Math.max(0, newState.actionPoints[player] - cost);\r\n      log(`💳 Kosten verbucht: AP ${prevAp}→${newState.actionPoints[player]}`);\r\n\r\n      // Flags KONSUMIEREN (einheitlich, NUR HIER!)\r\n      ensureFlags(newState, player);\r\n      const ef = newState.effectFlags[player];\r\n\r\n      // Simplified AP system: No refunds or discounts\r\n      // All cards cost exactly 1 AP\r\n\r\n      // Remove card from hand\r\n      const newHand = [...newState.hands[player]];\r\n      const [playedCard] = newHand.splice(handIndex, 1);\r\n      newState.hands = { ...newState.hands, [player]: newHand };\r\n\r\n      // Prevent double-playing the same UID concurrently\r\n      if ((playedCard as any).uid) {\r\n        if (playingUidRef.current.has((playedCard as any).uid)) {\r\n          log(`⚠️ Duplicate play prevented for UID ${(playedCard as any).uid}`);\r\n          return prev;\r\n        }\r\n        playingUidRef.current.add((playedCard as any).uid);\r\n      }\r\n\r\n      // 🔧 CLUSTER 3 DEBUG: Zeige jede gespielte Karte\r\n      log(`🔧 CLUSTER 3 GLOBAL DEBUG: P${player} spielt ${(playedCard as any).name} (${playedCard.kind}) - Type: ${(playedCard as any).type || 'KEIN TYPE'}`);\r\n\r\n      // 🔧 CLUSTER 3 DEBUG: Zeige aktuelles Board\r\n      const currentBoard = newState.board[player];\r\n      const publicCardsOnBoard = currentBoard.innen.filter(card => card.kind === 'spec');\r\n      log(`🔧 CLUSTER 3 GLOBAL DEBUG: Öffentlichkeitskarten auf dem Feld: ${publicCardsOnBoard.map(c => (c as any).name).join(', ')}`);\r\n\r\n      // Jennifer Doudna check removed - not needed for current game logic\r\n\r\n      // Handle different card types\r\n      if (playedCard.kind === 'pol') {\r\n        const polCard = playedCard as any;\r\n        const targetLane = lane || (polCard.tag === 'Staatsoberhaupt' || polCard.tag === 'Regierungschef' || polCard.tag === 'Diplomat' ? 'aussen' : 'innen');\r\n\r\n        if (newState.board[player][targetLane].length >= 5) {\r\n          log(`❌ ERROR: Lane full - Lane: ${targetLane}, Current: ${newState.board[player][targetLane].length}/5`);\r\n          return prev;\r\n        }\r\n\r\n        // Add to board (immutable clone to avoid accidental double references)\r\n        const laneArray = [...newState.board[player][targetLane], playedCard];\r\n        const playerBoardCloned = { ...newState.board[player], [targetLane]: laneArray } as any;\r\n        newState.board = { ...newState.board, [player]: playerBoardCloned } as any;\r\n        log(`🃏 Player ${player}: ${playedCard.name} gespielt in ${targetLane === 'aussen' ? 'Regierung' : 'Öffentlichkeit'}`);\r\n\r\n        // 3) Nachdem die Karte gelegt wurde: gegnerische Traps prüfen\r\n        applyTrapsOnCardPlayed(\r\n          newState,\r\n          player,\r\n          playedCard,\r\n          (event) => {\r\n            if (!newState._effectQueue) newState._effectQueue = [];\r\n            newState._effectQueue.push(event);\r\n          },\r\n          log\r\n        );\r\n\r\n        // 👉 Erst JETZT Auren anwenden (damit +2 Basis erhalten bleibt)\r\n        applyAurasForPlayer(newState, player, log);\r\n\r\n        // 6) Karteneffekte enqueuen + Queue auflösen\r\n        triggerCardEffects(newState, player, playedCard);\r\n        // Migration Helper verwenden\r\n        migrateLegacyQueue(newState);\r\n        // Nur noch _effectQueue verwenden\r\n        if (newState._effectQueue && newState._effectQueue.length > 0) {\r\n          resolveQueue(newState, newState._effectQueue);\r\n          newState._effectQueue = [];\r\n          // Nach Queue-Auflösung: Hand-Arrays immutabel neu zuweisen\r\n          afterQueueResolved?.();\r\n        }\r\n\r\n        // Release playing UID after queue resolved\r\n        if ((playedCard as any).uid) playingUidRef.current.delete((playedCard as any).uid);\r\n\r\n        // Check for trap triggers\r\n        applyTrapsOnCardPlayed(\r\n          newState,\r\n          player,\r\n          playedCard,\r\n          (e) => (newState._effectQueue ??= []).push(e),\r\n          (m) => (newState._effectQueue ??= []).push({ type: 'LOG', msg: m })\r\n        );\r\n\r\n        // 🔥 ROMAN ABRAMOVICH EFFEKT: Wenn Regierungskarte mit Einfluss ≤5 gespielt wird\r\n        if (playedCard.kind === 'pol' && (playedCard as any).influence <= 5) {\r\n          const opponent = player === 1 ? 2 : 1;\r\n          const opponentBoard = newState.board[opponent];\r\n          const romanAbramovich = opponentBoard.innen.find(card =>\r\n            card.kind === 'spec' && (card as any).name === 'Roman Abramovich'\r\n          );\r\n\r\n          if (romanAbramovich) {\r\n            // Ziehe eine Karte für den Gegner\r\n            if (newState.decks[opponent].length > 0) {\r\n              const drawnCard = newState.decks[opponent].shift();\r\n              if (drawnCard) {\r\n                newState.hands[opponent].push(drawnCard);\r\n                log(`🔥 ROMAN ABRAMOVICH EFFEKT: P${opponent} zieht 1 Karte (${drawnCard.name}) - Regierungskarte mit Einfluss ≤5 gespielt`);\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        // 🔍 BOARD DEBUG: Zeige aktuelles Board nach dem Spielen\r\n        const currentBoard = newState.board[player];\r\n        const regierungKarten = currentBoard.aussen.map(c => `${c.name}[${c.kind === 'pol' ? (c as any).influence + 'I' : 'S'}]`);\r\n        const öffentlichkeitKarten = currentBoard.innen.map(c => `${c.name}[${c.kind === 'spec' ? (c as any).tag || 'S' : 'P'}]`);\r\n        log(`📋 P${player} BOARD: Regierung=[${regierungKarten.join(', ')}] | Öffentlichkeit=[${öffentlichkeitKarten.join(', ')}]`);\r\n\r\n                // 🔥 JOSCHKA FISCHER NGO-EFFEKT: Jetzt als kontinuierlicher Aura-Effekt in sumRowWithAuras implementiert\r\n        log(`🔍 DEBUG: Karte gespielt - Name: ${playedCard.name}, Tag: ${(playedCard as any).tag || 'Kein Tag'}, Lane: ${targetLane}, Kind: ${playedCard.kind}`);\r\n\r\n        if ((playedCard as any).tag === 'NGO') {\r\n          log(`🔍 NGO-Karte gespielt: ${playedCard.name} [NGO] - Kontinuierliche Aura-Effekte werden bei Rundenauswertung berechnet`);\r\n\r\n          // 🎯 SOFORTIGE SYNERGIE-PRÜFUNG: Joschka Fischer + NGO\r\n          const joschaFischer = currentBoard.aussen.find(card =>\r\n            card.kind === 'pol' && (card as any).effect === 'ngo_boost'\r\n          );\r\n\r\n          if (joschaFischer) {\r\n            log(`🔥🔥🔥 SYNERGIE AKTIVIERT! 🔥🔥🔥 Joschka Fischer + ${playedCard.name}[NGO] → +1 Einfluss bei Rundenauswertung`);\r\n          }\r\n        }\r\n\r\n      } else if (playedCard.kind === 'spec') {\r\n        const specCard = playedCard as any;\r\n        const typeStr = String(specCard.type || '').toLowerCase();\r\n        const isInitiative = /initiative/.test(typeStr); // matcht \"Initiative\", \"Sofort-Initiative\", etc.\r\n\r\n                  // 1) Falls es eine \"Systemrelevant\" ist (sofortiger Buff auf letzte eigene Regierungskarte)\r\n        if (playedCard.kind === 'spec' && (playedCard as any).type?.toLowerCase().includes('systemrelevant')) {\r\n          const ownBoard = newState.board[player];\r\n          const candidates = [...ownBoard.aussen, ...ownBoard.innen].filter(c => c.kind === 'pol') as PoliticianCard[];\r\n          const target = candidates[candidates.length - 1]; // letzte eigene Regierungskarte\r\n          if (target) {\r\n            (target as any).protected = true;\r\n            log(`🛡️ ${target.name} erhält einmaligen Schutz.`);\r\n          } else {\r\n            log('🛈 Systemrelevant: Keine eigene Regierungskarte im Spiel – Effekt verpufft.');\r\n          }\r\n          // danach die Spezialkarte normal entsorgen\r\n          newState.discard.push(playedCard);\r\n          return newState;\r\n        }\r\n\r\n        // 1) Dauerhaft-Initiative (Ongoing)\r\n        if (typeStr.includes('dauerhaft')) {\r\n          // Slot-Mapping: Dauerhaft-Initiativen → initiativePermanent, nicht government\r\n          const slotType = 'initiativePermanent';\r\n          if (!newState.permanentSlots[player][slotType]) {\r\n            newState.permanentSlots[player][slotType] = playedCard;\r\n            log(`P${player} spielt ${playedCard.name} als Dauerhafte Initiative (Slot: ${slotType})`);\r\n          } else {\r\n            log(`⚠️ WARN: Slot occupied - Slot ${slotType} already has ${newState.permanentSlots[player][slotType]?.name}`);\r\n          }\r\n\r\n          // 6) Karteneffekte enqueuen + Queue auflösen\r\n          triggerCardEffects(newState, player, playedCard);\r\n          // Migration Helper verwenden\r\n          migrateLegacyQueue(newState);\r\n          // Nur noch _effectQueue verwenden\r\n          if (newState._effectQueue && newState._effectQueue.length > 0) {\r\n            resolveQueue(newState, newState._effectQueue);\r\n            newState._effectQueue = [];\r\n            // Nach Queue-Auflösung: Hand-Arrays immutabel neu zuweisen\r\n            afterQueueResolved?.();\r\n          }\r\n\r\n          // Check for trap triggers\r\n          applyTrapsOnCardPlayed(\r\n            newState,\r\n            player,\r\n            playedCard,\r\n            (e) => (newState._effectQueue ??= []).push(e),\r\n            (m) => (newState._effectQueue ??= []).push({ type: 'LOG', msg: m })\r\n          );\r\n\r\n          return newState;\r\n        }\r\n\r\n        // 2) Sofort-/Sofort-Initiativen (Instant)\r\n        if (isInitiative) {\r\n          if (!specCard.effectKey) {\r\n            log(`❌ Initiative ohne effectKey: ${specCard.name}`);\r\n          } else {\r\n            log(`🧩 INIT: ${specCard.name} [${String(specCard.effectKey)}] gespielt`);\r\n          }\r\n\r\n          // 🔧 NEU: Sofort-Initiativen werden in das sofort Array gelegt statt sofort aktiviert\r\n          if (typeStr.includes('sofort')) {\r\n            // Prüfe ob bereits eine Sofort-Initiative im Slot liegt\r\n            if (newState.board[player].sofort.length > 0) {\r\n              log(`❌ ERROR: Sofort-Initiative-Slot bereits besetzt - ${newState.board[player].sofort[0]?.name} muss erst aktiviert werden`);\r\n              // Karte zurück in die Hand\r\n              newState.hands[player] = [...newState.hands[player], playedCard];\r\n              // AP zurückgeben\r\n              newState.actionPoints[player] += cost;\r\n              // AP zurückgegeben, keine Aktion rückgängig zu machen\r\n              return newState;\r\n            }\r\n\r\n            // Sofort-Initiative in das sofort Array legen\r\n            newState.board[player].sofort = [playedCard];\r\n            log(`🎯 P${player} legt ${playedCard.name} in Sofort-Initiative-Slot (kann später aktiviert werden)`);\r\n\r\n            // Sofort-Initiativen: auf Board.sofort legen (nicht direkt entsorgen)\r\n            if (!newState._effectQueue) newState._effectQueue = [];\r\n            newState._effectQueue.push({ type: 'LOG', msg: `🔔 Sofort-Initiative bereit: ${playedCard.name} (zum Aktivieren anklicken oder Taste 'A')` });\r\n            return newState;\r\n          }\r\n\r\n          // Dauerhaft-Initiativen werden weiterhin sofort aktiviert\r\n          // Initiative in den Ablagestapel\r\n          newState.discard = [...newState.discard, playedCard];\r\n          log(`P${player} spielt Initiative: ${playedCard.name}`);\r\n\r\n                     // 6) Karteneffekte enqueuen + Queue auflösen\r\n           triggerCardEffects(newState, player, playedCard);\r\n           // Migration Helper verwenden\r\n           migrateLegacyQueue(newState);\r\n           // Nur noch _effectQueue verwenden\r\n         if (newState._effectQueue && newState._effectQueue.length > 0) {\r\n           resolveQueue(newState, newState._effectQueue);\r\n           newState._effectQueue = [];\r\n           // Nach Queue-Auflösung: Hand-Arrays immutabel neu zuweisen\r\n           afterQueueResolved?.();\r\n         }\r\n\r\n           // Check for trap triggers\r\n           applyTrapsOnCardPlayed(\r\n             newState,\r\n             player,\r\n             playedCard,\r\n             (e) => (newState._effectQueue ??= []).push(e),\r\n             (m) => (newState._effectQueue ??= []).push({ type: 'LOG', msg: m })\r\n           );\r\n\r\n           // 🔥 CLUSTER 3: Auren-Flags neu berechnen (nach Kartenspielen)\r\n          recomputeAuraFlags(newState);\r\n\r\n          // 🔥 CLUSTER 3: Ai Weiwei Bonus wird bei Aktivierung angewendet (nicht beim Spielen)\r\n\r\n          // 🔥 PASSIVE EFFEKTE NACH INITIATIVE: Mark Zuckerberg & Sam Altman\r\n          // Diese Effekte werden jetzt über INITIATIVE_ACTIVATED Event + Board-Check gehandhabt\r\n          // Keine direkten Flag-Mutationen mehr - alles über Events\r\n\r\n\r\n          return newState;\r\n        }\r\n\r\n        // 3) Öffentlichkeit (Public)\r\n        if (\r\n          typeStr === 'öffentlichkeitskarte' ||\r\n          typeStr === 'oeffentlichkeitskarte' ||\r\n          typeStr === 'öffentlichkeit' ||\r\n          typeStr === 'public'\r\n        ) {\r\n          if (newState.board[player].innen.length < 5) {\r\n            const innenArray = [...newState.board[player].innen, playedCard];\r\n            const playerBoardCloned = { ...newState.board[player], innen: innenArray } as any;\r\n            newState.board = { ...newState.board, [player]: playerBoardCloned } as any;\r\n            log(`P${player} spielt ${playedCard.name} in Öffentlichkeit`);\r\n\r\n            // Sofort Auren prüfen (z.B. JF +1, wenn JF schon liegt)\r\n            applyAurasForPlayer(newState, player, log);\r\n\r\n                         // 6) Karteneffekte enqueuen + Queue auflösen\r\n             triggerCardEffects(newState, player, playedCard);\r\n             // Migration Helper verwenden\r\n             migrateLegacyQueue(newState);\r\n         if (newState._effectQueue && newState._effectQueue.length > 0) {\r\n           resolveQueue(newState, newState._effectQueue);\r\n           newState._effectQueue = [];\r\n           // Nach Queue-Auflösung: Hand-Arrays immutabel neu zuweisen\r\n           afterQueueResolved?.();\r\n         }\r\n\r\n             // Check for trap triggers\r\n             applyTrapsOnCardPlayed(\r\n               newState,\r\n               player,\r\n               playedCard,\r\n               (e) => (newState._effectQueue ??= []).push(e),\r\n               (m) => (newState._effectQueue ??= []).push({ type: 'LOG', msg: m })\r\n             );\r\n\r\n\r\n\r\n            // 🔥 PUBLIC CARD EFFECTS - Passive effects when played\r\n\r\n            // Helper function to draw a card for the player\r\n            const drawCardForPlayer = (cardName: string) => {\r\n              if (newState.decks[player].length > 0) {\r\n                const drawnCard = newState.decks[player].shift();\r\n                if (drawnCard) {\r\n                  newState.hands[player].push(drawnCard);\r\n                  log(`🔥 ${cardName.toUpperCase()} EFFEKT: +1 Karte gezogen (${drawnCard.name})`);\r\n                  return true;\r\n                }\r\n              }\r\n              return false;\r\n            };\r\n\r\n            if (specCard.name === 'Elon Musk') {\r\n              // Effect: \"Ziehe 1 Karte. Deine erste Initiative pro Runde kostet 1 Aktionspunkt weniger.\"\r\n              drawCardForPlayer('Elon Musk');\r\n              // 🔥 QUEUE-SYSTEM: Erste Initiative pro Runde → Refund wird über triggerCardEffects gehandhabt\r\n\r\n            } else if (specCard.name === 'Bill Gates') {\r\n              // Effect: \"Ziehe 1 Karte. Deine nächste Initiative kostet 1 Aktionspunkt weniger.\"\r\n              drawCardForPlayer('Bill Gates');\r\n              // 🔥 QUEUE-SYSTEM: Nächste Initiative → Refund wird über triggerCardEffects gehandhabt\r\n\r\n            } else if (specCard.name === 'Jeff Bezos') {\r\n              // Effect: \"Ziehe 1 Karte beim Ausspielen. Wenn eine Plattform liegt: +1 Aktionspunkt.\"\r\n              drawCardForPlayer('Jeff Bezos');\r\n              const hasPlatform = newState.board[player].innen.some(c =>\r\n                c.kind === 'spec' && (c as any).tag === 'Plattform'\r\n              );\r\n              if (hasPlatform) {\r\n                newState.actionPoints[player] += 1;\r\n                log(`🔥 JEFF BEZOS: +1 AP durch Plattform-Synergie! (${newState.actionPoints[player] - 1} → ${newState.actionPoints[player]})`);\r\n              }\r\n\r\n            } else if (specCard.name === 'Warren Buffett') {\r\n              // Effect: \"Ziehe 1 Karte. Bei einer Wirtschafts-Initiative: +1 Effekt.\"\r\n              drawCardForPlayer('Warren Buffett');\r\n              // TODO: Implement \"Wirtschafts-Initiative +1 Effect\" logic\r\n              log(`📊 WARREN BUFFETT: Bei Wirtschafts-Initiativen +1 Effekt! (TODO: Implementierung)`);\r\n\r\n            } else if (specCard.name === 'Gautam Adani') {\r\n              // Effect: \"Ziehe 1 Karte. Bei einer Infrastruktur-Initiative: +1 Effekt.\"\r\n              drawCardForPlayer('Gautam Adani');\r\n              // TODO: Implement \"Infrastruktur-Initiative +1 Effect\" logic\r\n              log(`📊 GAUTAM ADANI: Bei Infrastruktur-Initiativen +1 Effekt! (TODO: Implementierung)`);\r\n\r\n            } else if (specCard.name === 'Zhang Yiming') {\r\n              // Effect: \"Ziehe 1 Karte. Bei Medien auf dem Feld: -1 Aktionspunkt auf deine nächste Initiative.\"\r\n              drawCardForPlayer('Zhang Yiming');\r\n              const hasMedia = newState.board[player].innen.some(c =>\r\n                c.kind === 'spec' && (c as any).tag === 'Medien'\r\n              );\r\n              if (hasMedia) {\r\n                // TODO: Implement \"nächste Initiative -1 AP\" logic\r\n                log(`🔥 ZHANG YIMING: Nächste Initiative kostet 1 AP weniger durch Medien-Synergie! (TODO: Implementierung)`);\r\n              }\r\n\r\n            } else if (specCard.name === 'George Soros') {\r\n              // Effect: \"+1 Aktionspunkt wenn der Gegner eine autoritäre Regierungskarte hat.\"\r\n              const opponent = player === 1 ? 2 : 1;\r\n              const hasAuthoritarianCard = newState.board[opponent].aussen.some(card => {\r\n                const polCard = card as any;\r\n                return polCard.tag === 'Staatsoberhaupt' && polCard.influence >= 8; // High influence leaders\r\n              });\r\n\r\n              if (hasAuthoritarianCard) {\r\n                newState.actionPoints[player] += 1;\r\n                log(`🔥 GEORGE SOROS EFFEKT: +1 AP durch autoritäre Regierung des Gegners!`);\r\n                log(`📊 SOROS: Aktionspunkte ${newState.actionPoints[player] - 1} → ${newState.actionPoints[player]}`);\r\n              } else {\r\n                log(`💭 George Soros: Keine autoritären Karten beim Gegner - Effekt nicht ausgelöst`);\r\n              }\r\n            }\r\n\r\n            // 🔗 NGO-Synergie: Wenn eine NGO gelegt wird und Joschka Fischer liegt, erhält P${player} +1 Einfluss (Rundenauswertung)\r\n            if ((specCard as any).tag === 'NGO') {\r\n              const hasJoschka = newState.board[player].aussen.some(c => c.kind === 'pol' && (c as any).name === 'Joschka Fischer' && !(c as any).deactivated);\r\n              if (hasJoschka) {\r\n                log(`🔥🔥🔥 SYNERGIE AKTIVIERT! 🔥🔥🔥 Joschka Fischer + ${playedCard.name}[NGO] → +1 Einfluss bei Rundenauswertung`);\r\n              }\r\n            }\r\n          } else {\r\n            log(`❌ ERROR: Lane full - Öffentlichkeit ist voll (5/5)`);\r\n          }\r\n\r\n          // Simplified AP system: No refunds\r\n          return newState;\r\n        }\r\n\r\n                  // 4) Default: Traps/Interventions\r\n                  // Falls Trap-Karte gelegt wird\r\n          if (playedCard.kind === 'spec' && (playedCard as any).type?.toLowerCase().includes('trap')) {\r\n            registerTrap(newState, player, playedCard.key || playedCard.name.toLowerCase().replace(/[- ]/g, '_'));\r\n            // NICHT sofort checken – sie wartet auf den Gegner\r\n            return newState;\r\n          }\r\n\r\n        newState.traps[player] = [...newState.traps[player], playedCard];\r\n        log(`P${player} spielt ${playedCard.name} als ${specCard.type}`);\r\n\r\n        // 6) Karteneffekte enqueuen + Queue auflösen\r\n        triggerCardEffects(newState, player, playedCard);\r\n        // Migration Helper verwenden\r\n        migrateLegacyQueue(newState);\r\n        // Nur noch _effectQueue verwenden\r\n        if (newState._effectQueue && newState._effectQueue.length > 0) {\r\n          resolveQueue(newState, newState._effectQueue);\r\n          newState._effectQueue = [];\r\n          // Nach Queue-Auflösung: Hand-Arrays immutabel neu zuweisen\r\n          afterQueueResolved?.();\r\n        }\r\n\r\n        // Check for trap triggers\r\n        applyTrapsOnCardPlayed(\r\n          newState,\r\n          player,\r\n          playedCard,\r\n          (e) => (newState._effectQueue ??= []).push(e),\r\n          (m) => (newState._effectQueue ??= []).push({ type: 'LOG', msg: m })\r\n        );\r\n\r\n        // Simplified AP system: No refunds\r\n        return newState;\r\n      }\r\n\r\n      // 6) Karteneffekte enqueuen + Queue auflösen (fallback für unbekannte Kartentypen)\r\n      triggerCardEffects(newState, player, selectedCard);\r\n      // Migration Helper verwenden\r\n      migrateLegacyQueue(newState);\r\n      // Nur noch _effectQueue verwenden\r\n        if (newState._effectQueue && newState._effectQueue.length > 0) {\r\n          resolveQueue(newState, newState._effectQueue);\r\n          newState._effectQueue = [];\r\n          // Nach Queue-Auflösung: Hand-Arrays immutabel neu zuweisen\r\n          afterQueueResolved?.();\r\n        }\r\n\r\n      // Check for trap triggers\r\n      applyTrapsOnCardPlayed(\r\n        newState,\r\n        player,\r\n        selectedCard,\r\n        (e) => (newState._effectQueue ??= []).push(e),\r\n        (m) => (newState._effectQueue ??= []).push({ type: 'LOG', msg: m })\r\n      );\r\n\r\n      // Simplified AP system: No refunds\r\n\r\n      // Kein Aktionenlimit mehr → automatischer Turnwechsel entfällt\r\n\r\n\r\n      return newState;\r\n    });\r\n  }, [setGameState, log]);\r\n\r\n  const activateInstantInitiative = useCallback((player: Player) => {\r\n    logger.info(`activateInstantInitiative START P${player}`);\r\n    setGameState(prev => {\r\n      if (prev.current !== player) {\r\n        log(`❌ ERROR: Not player turn - Current: ${prev.current}, Attempted: ${player}`);\r\n        return prev;\r\n      }\r\n\r\n      const instantCard = prev.board[player].sofort[0];\r\n      if (!instantCard) {\r\n        log(`❌ ERROR: No Sofort-Initiative in slot for player ${player}`);\r\n        return prev;\r\n      }\r\n\r\n      const newState = { ...prev };\r\n\r\n      // 1) Normale Karten-Effekte der Sofort-Karte feuern\r\n      triggerCardEffects(newState, player, instantCard);\r\n\r\n      // Check for trap triggers\r\n      applyTrapsOnCardPlayed(\r\n        newState,\r\n        player,\r\n        instantCard,\r\n        (e) => (newState._effectQueue ??= []).push(e),\r\n        (m) => (newState._effectQueue ??= []).push({ type: 'LOG', msg: m })\r\n      );\r\n\r\n      // 2) Queue auflösen (BEVOR die Karte entfernt wird)\r\n      if (newState._effectQueue && newState._effectQueue.length > 0) {\r\n        resolveQueue(newState, [...newState._effectQueue]);\r\n        newState._effectQueue = [];\r\n        // Nach Queue-Auflösung: Hand-Arrays immutabel neu zuweisen\r\n        afterQueueResolved?.();\r\n      }\r\n\r\n      // 3) Karte NACH Queue-Auflösung in den Ablagestapel\r\n      const [played] = newState.board[player].sofort.splice(0, 1);\r\n      newState.discard.push(played);\r\n\r\n      return newState;\r\n    });\r\n  }, [setGameState, log]);\r\n\r\n  const endTurn = useCallback((reason: 'button_end_turn' | 'auto' = 'button_end_turn') => {\r\n    logger.info(`endTurn START reason=${reason}`);\r\n    setGameState((prev): GameState => {\r\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n      const current = prev.current;\r\n\r\n      // 1) Schon im Abschluss? -> Nichts tun (Idempotenz)\r\n      if (prev.isEndingTurn) {\r\n        log('🔁 Zugabschluss läuft bereits – warte auf Queue.');\r\n        return prev;\r\n      }\r\n\r\n      const newState = { ...prev, isEndingTurn: true };\r\n\r\n      // 2) Hängen noch Effekte in der Queue? -> Auflösen lassen\r\n      if (newState._effectQueue && newState._effectQueue.length > 0) {\r\n        log('⏳ Effekte werden noch aufgelöst – Zugwechsel folgt automatisch.');\r\n        resolveQueue(newState, [...newState._effectQueue]);\r\n        newState._effectQueue = [];\r\n        // Nach Queue-Auflösung: Wenn Flag noch gesetzt, Zug beenden\r\n        if (newState.isEndingTurn) {\r\n          return reallyEndTurn(newState, log);\r\n        }\r\n        return newState;\r\n      }\r\n\r\n      // 3) Keine Effekte mehr -> sofort beenden\r\n      return reallyEndTurn(newState, log);\r\n    });\r\n  }, [setGameState, log]);\r\n\r\n  // Legacy: nextTurn als Alias für endTurn für Kompatibilität\r\n  const nextTurn = useCallback(() => {\r\n    logger.info('nextTurn alias called');\r\n    endTurn('auto');\r\n  }, [endTurn]);\r\n\r\n    const passTurn = useCallback((player: Player) => {\r\n    logger.info(`passTurn START P${player}`);\r\n\r\n    setGameState(prev => {\r\n      logger.dbg(`passTurn setState current=${prev.current} player=${player}`);\r\n\r\n      if (prev.current !== player) {\r\n        logger.dbg(`passTurn wrong turn current=${prev.current} attempted=${player}`);\r\n        return prev;\r\n      }\r\n\r\n      const newState = { ...prev, passed: { ...prev.passed, [player]: true } };\r\n      logger.dbg(`Pass status updated P1=${newState.passed[1]} P2=${newState.passed[2]}`);\r\n      log(`🚫 Spieler ${player} passt.`);\r\n\r\n      // ❗ Kein Nachziehen bei Pass:\r\n      // Der passierende Spieler kommt in dieser Runde nicht mehr dran.\r\n      // Die nächste Runde startet ohnehin mit 5 neuen Handkarten.\r\n\r\n      // Check if round should end (both players passed)\r\n      const shouldEndRound = checkRoundEnd(newState);\r\n      logger.dbg(`Should end round? ${shouldEndRound}`);\r\n\r\n      if (shouldEndRound) {\r\n        log(`🏁 Runde ${newState.round} wird beendet und ausgewertet.`);\r\n        return resolveRound(newState, log);\r\n      } else {\r\n        // Switch turn to other player for their final chance\r\n        const otherPlayer: Player = player === 1 ? 2 : 1;\r\n        logger.dbg(`Switching to other player ${otherPlayer} hasPassed=${newState.passed[otherPlayer]}`);\r\n\r\n        // Only switch if other player hasn't passed yet\r\n        if (!newState.passed[otherPlayer]) {\r\n                     newState.current = otherPlayer;\r\n           newState.actionPoints = { ...newState.actionPoints, [otherPlayer]: 2 };\r\n\r\n          // Apply new start-of-turn hooks\r\n          applyStartOfTurnFlags(newState, otherPlayer, log);\r\n\r\n        // 🔥 CLUSTER 3: Auren-Flags beim Zugstart neu berechnen\r\n        recomputeAuraFlags(newState);\r\n\r\n          log(`⏭️ Spieler ${otherPlayer} hat noch einen letzten Zug.`);\r\n          logger.dbg(`Turn switched to player ${otherPlayer}`);\r\n        } else {\r\n          // Both players have passed now, end round\r\n          log(`🏁 Runde ${newState.round} wird beendet (beide Spieler haben gepasst).`);\r\n          return resolveRound(newState, log);\r\n        }\r\n      }\r\n\r\n      return newState;\r\n    });\r\n  }, [setGameState, log]);\r\n\r\n  return {\r\n    startMatchWithDecks,\r\n    startMatchVsAI,\r\n    playCard,\r\n    activateInstantInitiative,\r\n    passTurn,\r\n    nextTurn,\r\n    endTurn,\r\n  };\r\n  }\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}