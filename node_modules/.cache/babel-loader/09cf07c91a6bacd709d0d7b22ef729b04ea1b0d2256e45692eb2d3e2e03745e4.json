{"ast":null,"code":"import _objectSpread from\"C:/Users/skank/Videos/Cards/Milchcards/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{useRef,useEffect,useCallback}from'react';import{LAYOUT,getZone,computeSlotRects,getUiTransform,getLaneCapacity,getPublicRects,getGovernmentRects}from'../ui/layout';import{drawCardImage,sortHandCards}from'../utils/gameUtils';import{getNetApCost}from'../utils/ap';import{jsx as _jsx}from\"react/jsx-runtime\";export const GameCanvas=_ref=>{let{gameState,selectedHandIndex,onCardClick,onCardHover,devMode=false}=_ref;const canvasRef=useRef(null);const clickZonesRef=useRef([]);const backgroundImageRef=useRef(null);const drawCardAt=useCallback(function(ctx,card,x,y,size){var _shield;let selected=arguments.length>5&&arguments[5]!==undefined?arguments[5]:false;let showAPCost=arguments.length>6&&arguments[6]!==undefined?arguments[6]:false;let player=arguments.length>7?arguments[7]:undefined;let dx=x,dy=y,s=size;if(selected){s=Math.floor(size*1.05);dx=x-Math.floor((s-size)/2);dy=y-Math.floor((s-size)/2);}drawCardImage(ctx,card,dx,dy,s,'ui');// Status-Indikatoren (f√ºr alle Board-Karten)\n// Einfluss-Wert dauerhaft anzeigen (oben links) ‚Äì nur f√ºr Regierungskarten\nif(card.kind==='pol'){var _influence;const barH=Math.max(20,Math.floor(s*0.12)+6);ctx.fillStyle='rgba(0,0,0,0.6)';ctx.fillRect(dx,dy+s-barH,s,barH);ctx.fillStyle='#ffffff';const fontSize=Math.floor(s*0.12);ctx.font=\"bold \".concat(fontSize,\"px sans-serif\");ctx.textAlign='left';ctx.textBaseline='middle';ctx.fillText(\"\".concat((_influence=card.influence)!==null&&_influence!==void 0?_influence:0),dx+8,dy+s-barH/2);}// Schutz-Status (blauer Punkt)\nif(card.protected||((_shield=card.shield)!==null&&_shield!==void 0?_shield:0)>0){ctx.fillStyle='#1da1f2';ctx.fillRect(dx+s-22,dy+6,16,16);}// Deaktiviert-Status (roter Punkt)\nif(card.deactivated){ctx.fillStyle='#b63838';ctx.fillRect(dx+s-22,dy+26,16,16);}// Netto-AP Badge anzeigen (modern) - nur f√ºr Handkarten\nif(showAPCost&&player){const apInfo=getNetApCost(gameState,player,card,'innen');// Default auf innen\nconst netText=\"\\u26A1\".concat(apInfo.net);// Badge-Gr√∂√üe berechnen\nconst badgeHeight=Math.max(16,Math.floor(s*0.12));const badgeWidth=badgeHeight*2;const badgeX=dx+s-badgeWidth-6;const badgeY=dy+6;// Badge-Hintergrund (gr√ºn f√ºr 0 AP, gelb f√ºr > 0)\nconst bgColor=apInfo.net===0?'#E7F8EF':'#FFF7E6';const borderColor=apInfo.net===0?'#10b981':'#f59e0b';ctx.fillStyle=bgColor;ctx.beginPath();ctx.roundRect(badgeX,badgeY,badgeWidth,badgeHeight,badgeHeight/2);ctx.fill();// Badge-Rand\nctx.strokeStyle=borderColor;ctx.lineWidth=1;ctx.stroke();// Text\nctx.fillStyle=apInfo.net===0?'#065f46':'#92400e';ctx.font=\"bold \".concat(Math.floor(badgeHeight*0.5),\"px sans-serif\");ctx.textAlign='center';ctx.textBaseline='middle';ctx.fillText(netText,badgeX+badgeWidth/2,badgeY+badgeHeight/2);// Reset text align\nctx.textAlign='start';ctx.textBaseline='alphabetic';}// Auswahl-Rahmen\nif(selected){ctx.strokeStyle='#61dafb';ctx.lineWidth=3;ctx.strokeRect(dx+1,dy+1,s-2,s-2);ctx.lineWidth=1;}// Return exact 256x256 click zone over the card\n// Since all cards are 256x256, the click zone should match exactly\nreturn{x:dx,y:dy,w:256,h:256};},[gameState]);// Slot-Benennungs-Funktion basierend auf Glossar\nconst getSlotDisplayName=useCallback((zoneId,index,player)=>{const slotNumber=index+1;if(zoneId.includes('government')){if(zoneId.includes('player')){return\"Regierungsreihe Slot \".concat(slotNumber);}else{return\"Gegner Regierung Slot \".concat(slotNumber);}}else if(zoneId.includes('public')){if(zoneId.includes('player')){return\"\\xD6ffentlichkeitsreihe Slot \".concat(slotNumber);}else{return\"Gegner \\xD6ffentlichkeit Slot \".concat(slotNumber);}}else if(zoneId.includes('permanent.government')){if(zoneId.includes('player')){return'Regierung Spezial-Slot';}else{return'Gegner Regierung Spezial-Slot';}}else if(zoneId.includes('permanent.public')){if(zoneId.includes('player')){return'√ñffentlichkeit Spezial-Slot';}else{return'Gegner √ñffentlichkeit Spezial-Slot';}}else if(zoneId.includes('instant')){if(zoneId.includes('player')){return'Sofort-Slot';}else{return'Gegner Sofort-Slot';}}else if(zoneId.includes('hand')){return'Hand';}else if(zoneId.includes('interventions')){return'Interventionen';}return\"Slot \".concat(slotNumber);},[]);const drawLane=useCallback((ctx,zoneId,player,lane,clickable)=>{const zone=getZone(zoneId);if(!zone)return;const slots=computeSlotRects(zone);const arr=gameState.board[player][lane];slots.forEach((s,idx)=>{const card=arr[idx];// Hintergrundfarbe nach Kategorie\nlet bgColor='rgba(0,0,0,0.1)';// Standard\nif(zoneId.includes('government')){bgColor='rgba(255, 197, 0, 0.15)';// Hellgelb f√ºr Regierung\n}else if(zoneId.includes('public')){bgColor='rgba(0, 255, 0, 0.15)';// Hellgr√ºn f√ºr √ñffentlichkeit\n}ctx.fillStyle=bgColor;ctx.fillRect(s.x,s.y,s.w,s.h);// Slot-Rahmen\nctx.strokeStyle='rgba(255,255,255,0.06)';ctx.strokeRect(s.x+0.5,s.y+0.5,s.w-1,s.h-1);if(card){const isSelected=player===1&&selectedHandIndex!==null&&gameState.hands[1][selectedHandIndex]===card;const clickZone=drawCardAt(ctx,card,s.x,s.y,s.w,isSelected,false);// Kartenname unter dem Slot anzeigen\nctx.fillStyle='rgba(255,255,255,0.9)';ctx.font='bold 12px sans-serif';ctx.textAlign='center';const textY=s.y+s.h+16;ctx.fillText(card.name,s.x+s.w/2,textY);clickZonesRef.current.push(_objectSpread(_objectSpread({},clickZone),{},{data:{type:'board_card',player,lane,index:idx,card}}));}else if(clickable&&gameState.current===player){// Slot-Benennung anzeigen (f√ºr den aktuellen Spieler)\nconst slotName=getSlotDisplayName(zoneId,idx,player);ctx.fillStyle='rgba(255,255,255,0.6)';ctx.font='11px sans-serif';ctx.textAlign='center';const textY=s.y+s.h/2;ctx.fillText(slotName,s.x+s.w/2,textY);clickZonesRef.current.push({x:s.x,y:s.y,w:s.w,h:s.h,data:{type:'row_slot',lane,index:idx}});}});},[gameState,selectedHandIndex,drawCardAt,getSlotDisplayName]);const drawHandP1=useCallback(ctx=>{const hand=sortHandCards(gameState.hands[1]);const zone=getZone('hand.player');if(!zone)return;const slots=computeSlotRects(zone);slots.forEach((s,i)=>{const card=hand[i];if(!card)return;// Find original index in unsorted hand for click handling\nconst originalIndex=gameState.hands[1].findIndex(c=>c.uid===card.uid);const isSel=selectedHandIndex===originalIndex;const clickZone=drawCardAt(ctx,card,s.x,s.y,s.w,isSel,true,1);// Show AP cost for player 1 hand\nclickZonesRef.current.push(_objectSpread(_objectSpread({},clickZone),{},{data:{type:'hand_p1',index:originalIndex,card}}));});},[gameState.hands,selectedHandIndex,drawCardAt]);// üîß DEV MODE: Player 2 Hand (rechts unten, kompakter)\nconst drawHandP2=useCallback(ctx=>{const hand=sortHandCards(gameState.hands[2]);const zone=getZone('hand.opponent');if(!zone)return;const slots=computeSlotRects(zone);// Hintergrund f√ºr P2 Hand\nconst[x,y,w,h]=zone.rectPx;ctx.fillStyle='rgba(255, 100, 100, 0.15)';// R√∂tlicher Hintergrund f√ºr P2\nctx.fillRect(x,y,w,h);ctx.strokeStyle='rgba(255, 100, 100, 0.3)';ctx.strokeRect(x+0.5,y+0.5,w-1,h-1);// Label f√ºr P2 Hand\nctx.fillStyle='rgba(255, 255, 255, 0.9)';ctx.font='bold 14px sans-serif';ctx.textAlign='center';ctx.fillText('Player 2 Hand',x+w/2,y-8);slots.forEach((s,i)=>{const card=hand[i];if(!card)return;// Find original index in unsorted hand for click handling\nconst originalIndex=gameState.hands[2].findIndex(c=>c.uid===card.uid);const isSel=gameState.current===2&&selectedHandIndex===originalIndex;const clickZone=drawCardAt(ctx,card,s.x,s.y,s.w,isSel,true,2);// Show AP cost for player 2 hand\nclickZonesRef.current.push(_objectSpread(_objectSpread({},clickZone),{},{data:{type:'hand_p2',index:originalIndex,card}}));});},[gameState,selectedHandIndex,drawCardAt]);// Interventions strip (player traps)\nconst drawInterventionsP1=useCallback(ctx=>{const traps=gameState.traps[1]||[];const zone=getZone('interventions.player');if(!zone)return;// Single intervention slot\nconst[zx,zy,zw,zh]=zone.rectPx;const card=traps[0];// Only first trap\n// Hintergrund f√ºr Interventions-Slot\nctx.fillStyle='rgba(200, 160, 255, 0.15)';// Lavendelfarben f√ºr Interventionen\nctx.fillRect(zx,zy,zw,zh);ctx.strokeStyle='rgba(200, 160, 255, 0.3)';ctx.strokeRect(zx+0.5,zy+0.5,zw-1,zh-1);// Slot-Benennung f√ºr Interventions-Slot\nctx.fillStyle='rgba(200, 160, 255, 0.8)';ctx.font='11px sans-serif';ctx.textAlign='left';ctx.fillText('Intervention',zx+8,zy+zh-6);if(card){const clickZone=drawCardAt(ctx,card,zx,zy,zw,false,false);clickZonesRef.current.push(_objectSpread(_objectSpread({},clickZone),{},{data:{type:'trap_p1',index:0,card}}));}},[gameState.traps,drawCardAt]);// Interventions strip (opponent traps)\nconst drawInterventionsP2=useCallback(ctx=>{const traps=gameState.traps[2]||[];const zone=getZone('interventions.opponent');if(!zone)return;// Single intervention slot\nconst[zx,zy,zw,zh]=zone.rectPx;const card=traps[0];// Only first trap\n// Hintergrund f√ºr Interventions-Slot\nctx.fillStyle='rgba(200, 160, 255, 0.15)';// Lavendelfarben f√ºr Interventionen\nctx.fillRect(zx,zy,zw,zh);ctx.strokeStyle='rgba(200, 160, 255, 0.3)';ctx.strokeRect(zx+0.5,zy+0.5,zw-1,zh-1);// Slot-Benennung f√ºr Interventions-Slot\nctx.fillStyle='rgba(200, 160, 255, 0.8)';ctx.font='11px sans-serif';ctx.textAlign='left';ctx.fillText('Intervention',zx+8,zy+zh-6);if(card){const clickZone=drawCardAt(ctx,card,zx,zy,zw,false,false);clickZonesRef.current.push(_objectSpread(_objectSpread({},clickZone),{},{data:{type:'trap_p2',index:0,card}}));}},[gameState.traps,drawCardAt]);// Single slot drawing function\nconst drawSingleSlot=useCallback((ctx,zoneId,card,clickType,player)=>{const zone=getZone(zoneId);if(!zone)return;const[x,y,w,h]=zone.rectPx;// Hintergrundfarbe nach Kategorie\nlet bgColor='rgba(0,0,0,0.1)';// Standard\nif(zoneId.includes('government')){bgColor='rgba(255, 197, 0, 0.15)';// Hellgelb f√ºr Regierung\n}else if(zoneId.includes('public')){bgColor='rgba(0, 255, 0, 0.15)';// Hellgr√ºn f√ºr √ñffentlichkeit\n}else if(zoneId.includes('instant')){bgColor='rgba(127, 116, 91, 0.15)';// Neutral f√ºr Sofort-Slots\n}else if(zoneId.includes('permanent')){// Unterscheide zwischen government und public permanent slots\nif(zoneId.includes('government')){bgColor='rgba(255, 197, 0, 0.15)';}else if(zoneId.includes('public')){bgColor='rgba(0, 255, 0, 0.15)';}}ctx.fillStyle=bgColor;ctx.fillRect(x,y,w,h);// Draw slot border\nctx.strokeStyle='rgba(255,255,255,0.06)';ctx.strokeRect(x+0.5,y+0.5,w-1,h-1);if(card){const isSelected=player===1&&selectedHandIndex!==null&&gameState.hands[1][selectedHandIndex]===card;const clickZone=drawCardAt(ctx,card,x,y,w,isSelected,false);// Kartenname unter dem Slot anzeigen\nctx.fillStyle='rgba(255,255,255,0.9)';ctx.font='bold 12px sans-serif';ctx.textAlign='center';const textY=y+h+16;ctx.fillText(card.name,x+w/2,textY);clickZonesRef.current.push(_objectSpread(_objectSpread({},clickZone),{},{data:{type:'slot_card',slot:clickType,card}}));// üîß NEU: Sofort-Initiative-Slots sind klickbar f√ºr Aktivierung\nif(clickType==='instant'&&gameState.current===player){clickZonesRef.current.push({x,y,w,h,data:{type:'activate_instant',player,card}});}}else if(gameState.current===player){// Slot-Benennung f√ºr leere Slots anzeigen (f√ºr den aktuellen Spieler)\nconst slotName=getSlotDisplayName(zoneId,0,player);ctx.fillStyle='rgba(255,255,255,0.6)';ctx.font='11px sans-serif';ctx.textAlign='center';const textY=y+h/2;ctx.fillText(slotName,x+w/2,textY);clickZonesRef.current.push({x,y,w,h,data:{type:'empty_slot',slot:clickType}});}},[selectedHandIndex,gameState,drawCardAt,getSlotDisplayName]);// Draw permanent slots for player\nconst drawPermanentSlotsP1=useCallback(ctx=>{drawSingleSlot(ctx,'slot.permanent.government.player',gameState.permanentSlots[1].government,'permanent_government',1);drawSingleSlot(ctx,'slot.permanent.public.player',gameState.permanentSlots[1].public,'permanent_public',1);},[gameState.permanentSlots,drawSingleSlot]);// Draw permanent slots for opponent\nconst drawPermanentSlotsP2=useCallback(ctx=>{drawSingleSlot(ctx,'slot.permanent.government.opponent',gameState.permanentSlots[2].government,'permanent_government',2);drawSingleSlot(ctx,'slot.permanent.public.opponent',gameState.permanentSlots[2].public,'permanent_public',2);},[gameState.permanentSlots,drawSingleSlot]);// Draw instant slots\nconst drawInstantSlots=useCallback(ctx=>{// Sofort-Initiative-Slots aus dem Board zeichnen\nconst sofortPlayerCard=gameState.board[1].sofort[0];const sofortOppCard=gameState.board[2].sofort[0];drawSingleSlot(ctx,'slot.instant.player',sofortPlayerCard,'instant',1);drawSingleSlot(ctx,'slot.instant.opponent',sofortOppCard,'instant',2);},[gameState.board,drawSingleSlot]);// Aktive Schl√ºsselw√∂rter und Unterkategorien ermitteln\nconst getActiveKeywordsAndSubcategories=useCallback(player=>{const board=gameState.board[player];const permanentSlots=gameState.permanentSlots[player];const allCards=[...board.innen,...board.aussen,permanentSlots.government,permanentSlots.public].filter(c=>c&&c.kind==='pol');const keywords=new Set();const subcategories=new Set();allCards.forEach(card=>{if(!card.deactivated){// Regierungskarten-Schl√ºsselw√∂rter\nif(card.tag==='Leadership'){keywords.add('Leadership');}if(card.tag==='Diplomat'){keywords.add('Diplomat');}// √ñffentlichkeits-Unterkategorien (f√ºr Karten in √ñffentlichkeitsreihe)\nif(board.innen.includes(card)){const publicCard=card;if(publicCard.tag){// Oligarch\nconst oligarchNames=['Elon Musk','Bill Gates','George Soros','Warren Buffett','Mukesh Ambani','Jeff Bezos','Alisher Usmanov','Gautam Adani','Jack Ma','Zhang Yiming','Roman Abramovich'];if(oligarchNames.includes(publicCard.name)){subcategories.add('Oligarch');}// Plattform\nconst platformNames=['Mark Zuckerberg','Tim Cook','Sam Altman','Jack Ma'];if(platformNames.includes(publicCard.name)){subcategories.add('Plattform');}// Bewegung\nconst movementNames=['Greta Thunberg','Malala Yousafzai','Ai Weiwei','Alexei Navalny'];if(movementNames.includes(publicCard.name)){subcategories.add('Bewegung');}// NGO/Think-Tank\nconst ngoNames=['Bill Gates','George Soros','Jennifer Doudna','Noam Chomsky','Anthony Fauci'];if(ngoNames.includes(publicCard.name)){subcategories.add('NGO/Think-Tank');}// Intelligenz\nconst intelligenceNames=['Jennifer Doudna','Noam Chomsky','Edward Snowden','Julian Assange','Yuval Noah Harari','Ai Weiwei','Alexei Navalny','Anthony Fauci'];if(intelligenceNames.includes(publicCard.name)){subcategories.add('Intelligenz');}// Medien\nconst mediaNames=['Oprah Winfrey'];if(mediaNames.includes(publicCard.name)){subcategories.add('Medien');}}}}});return{keywords:Array.from(keywords),subcategories:Array.from(subcategories)};},[gameState]);// Info-Panels zeichnen\nconst drawInfoPanels=useCallback(ctx=>{const{keywords,subcategories}=getActiveKeywordsAndSubcategories(1);// Panel f√ºr Regierungsschl√ºsselw√∂rter (rechts neben Regierungsslots)\nconst govPanelX=1640+256+20;// Nach dem letzten permanenten Slot\nconst govPanelY=300;// Auf H√∂he der Regierungsslots\nconst govPanelW=120;const govPanelH=256;// Regierungspanel Hintergrund\nctx.fillStyle='rgba(255, 197, 0, 0.15)';ctx.fillRect(govPanelX,govPanelY,govPanelW,govPanelH);ctx.strokeStyle='rgba(255, 197, 0, 0.3)';ctx.strokeRect(govPanelX+0.5,govPanelY+0.5,govPanelW-1,govPanelH-1);// Regierungspanel Titel\nctx.fillStyle='rgba(255, 197, 0, 0.9)';ctx.font='bold 12px sans-serif';ctx.textAlign='center';ctx.fillText('Regierung',govPanelX+govPanelW/2,govPanelY+16);// Schl√ºsselw√∂rter auflisten\nctx.fillStyle='rgba(255, 255, 255, 0.9)';ctx.font='11px sans-serif';ctx.textAlign='left';if(keywords.length>0){keywords.forEach((keyword,idx)=>{ctx.fillText(\"\\u2022 \".concat(keyword),govPanelX+8,govPanelY+36+idx*16);});}else{ctx.fillStyle='rgba(255, 255, 255, 0.5)';ctx.fillText('Keine aktiven',govPanelX+8,govPanelY+36);ctx.fillText('Schl√ºsselw√∂rter',govPanelX+8,govPanelY+52);}// Panel f√ºr √ñffentlichkeits-Unterkategorien (rechts neben √ñffentlichkeitsslots)\nconst pubPanelX=1640+256+20;const pubPanelY=580;// Auf H√∂he der √ñffentlichkeitsslots\nconst pubPanelW=120;const pubPanelH=256;// √ñffentlichkeitspanel Hintergrund\nctx.fillStyle='rgba(0, 255, 0, 0.15)';ctx.fillRect(pubPanelX,pubPanelY,pubPanelW,pubPanelH);ctx.strokeStyle='rgba(0, 255, 0, 0.3)';ctx.strokeRect(pubPanelX+0.5,pubPanelY+0.5,pubPanelW-1,pubPanelH-1);// √ñffentlichkeitspanel Titel\nctx.fillStyle='rgba(0, 255, 0, 0.9)';ctx.font='bold 12px sans-serif';ctx.textAlign='center';ctx.fillText('√ñffentlichkeit',pubPanelX+pubPanelW/2,pubPanelY+16);// Unterkategorien auflisten\nctx.fillStyle='rgba(255, 255, 255, 0.9)';ctx.font='11px sans-serif';ctx.textAlign='left';if(subcategories.length>0){subcategories.forEach((subcategory,idx)=>{const displayName=subcategory.length>12?subcategory.substring(0,10)+'...':subcategory;ctx.fillText(\"\\u2022 \".concat(displayName),pubPanelX+8,pubPanelY+36+idx*16);});}else{ctx.fillStyle='rgba(255, 255, 255, 0.5)';ctx.fillText('Keine aktiven',pubPanelX+8,pubPanelY+36);ctx.fillText('Unterkategorien',pubPanelX+8,pubPanelY+52);}},[getActiveKeywordsAndSubcategories]);// Move diagnostics to draw callback to ensure they run after canvas is actually rendered\nconst runDiagnostics=useCallback(()=>{try{const handZones=clickZonesRef.current.filter(z=>z.data&&z.data.type==='hand_p1');const uiUIDs=handZones.map(z=>{var _z$data$card$uid;return z.data.card&&((_z$data$card$uid=z.data.card.uid)!==null&&_z$data$card$uid!==void 0?_z$data$card$uid:z.data.card.id);}).filter(Boolean);const stateHand=gameState.hands&&gameState.hands[1]?gameState.hands[1]:[];const stateUIDs=stateHand.map(c=>{var _c$uid;return(_c$uid=c.uid)!==null&&_c$uid!==void 0?_c$uid:c.id;}).filter(Boolean);const missingInState=uiUIDs.filter(u=>!stateUIDs.includes(u));const missingInUI=stateUIDs.filter(u=>!uiUIDs.includes(u));// Only warn if there are cards in UI that don't exist in state (real error)\n// Don't warn about missing UI cards due to limited slot capacity\nif(missingInState.length>0){var _politicardDebug;const mismatch={ts:Date.now(),uiCount:uiUIDs.length,stateCount:stateUIDs.length,uiUIDs,stateUIDs,missingInState,missingInUI,stack:new Error('mismatch-stack').stack};window.__politicardDebug=_objectSpread(_objectSpread({},window.__politicardDebug),{},{mismatch:[...(((_politicardDebug=window.__politicardDebug)===null||_politicardDebug===void 0?void 0:_politicardDebug.mismatch)||[])].slice(-19).concat([mismatch])});// Clear, then log to console so user can copy/paste trace\nconsole.warn('POLITICARD DIAGNOSTIC: hand mismatch detected',mismatch);}}catch(e){// swallow diagnostic errors to avoid breaking rendering\nconsole.error('Diagnostic error',e);}},[gameState.hands]);const draw=useCallback(()=>{var _LAYOUT$background,_LAYOUT$background2;const canvas=canvasRef.current;if(!canvas)return;const ctx=canvas.getContext('2d');if(!ctx)return;// Clear canvas\nctx.clearRect(0,0,canvas.width,canvas.height);// Clear click zones\nclickZonesRef.current=[];// Background: prefer PNG if configured\nif((_LAYOUT$background=LAYOUT.background)!==null&&_LAYOUT$background!==void 0&&_LAYOUT$background.enabled&&(_LAYOUT$background2=LAYOUT.background)!==null&&_LAYOUT$background2!==void 0&&_LAYOUT$background2.src){if(backgroundImageRef.current){ctx.drawImage(backgroundImageRef.current,0,0,canvas.width,canvas.height);}else{ctx.fillStyle='#0c131b';ctx.fillRect(0,0,canvas.width,canvas.height);}}else{ctx.fillStyle='#0c131b';ctx.fillRect(0,0,canvas.width,canvas.height);}// Apply UI transform (new signature)\nconst{scale,offsetX,offsetY}=getUiTransform(canvas.width,canvas.height);ctx.save();ctx.translate(offsetX,offsetY);ctx.scale(scale,scale);// Draw opponent board (top rows) - clickable im Dev Mode\n// Draw opponent board using new layout system\nconst opponentPublicRects=getPublicRects('opponent');const opponentGovRects=getGovernmentRects('opponent');// Draw opponent public slots\nopponentPublicRects.forEach((s,idx)=>{const card=gameState.board[2].innen[idx];if(card){drawCardAt(ctx,card,s.x,s.y,s.w,false,false,2);}});// Draw opponent government slots\nopponentGovRects.forEach((s,idx)=>{const card=gameState.board[2].aussen[idx];if(card){drawCardAt(ctx,card,s.x,s.y,s.w,false,false,2);}});// Draw opponent permanent slots\ndrawPermanentSlotsP2(ctx);// Draw player board (middle rows)\n// Draw player board using new layout system\nconst playerPublicRects=getPublicRects('player');const playerGovRects=getGovernmentRects('player');// Draw player public slots\nplayerPublicRects.forEach((s,idx)=>{const card=gameState.board[1].innen[idx];if(card){const clickZone=drawCardAt(ctx,card,s.x,s.y,s.w,false,false,1);clickZonesRef.current.push(_objectSpread(_objectSpread({},clickZone),{},{data:{type:'row_slot',player:1,lane:'innen',index:idx}}));}else{// Empty slot click zone\nclickZonesRef.current.push({x:s.x,y:s.y,w:s.w,h:s.h,data:{type:'row_slot',player:1,lane:'innen',index:idx}});}});// Draw player government slots\nplayerGovRects.forEach((s,idx)=>{const card=gameState.board[1].aussen[idx];if(card){const clickZone=drawCardAt(ctx,card,s.x,s.y,s.w,false,false,1);clickZonesRef.current.push(_objectSpread(_objectSpread({},clickZone),{},{data:{type:'row_slot',player:1,lane:'aussen',index:idx}}));}else{// Empty slot click zone\nclickZonesRef.current.push({x:s.x,y:s.y,w:s.w,h:s.h,data:{type:'row_slot',player:1,lane:'aussen',index:idx}});}});// Draw player permanent slots\ndrawPermanentSlotsP1(ctx);// Draw instant slots (both players)\ndrawInstantSlots(ctx);// Draw interventions strip (player)\ndrawInterventionsP1(ctx);// Draw interventions strip (opponent) - nur im Dev Mode\nif(devMode){drawInterventionsP2(ctx);}// Draw hand (P1)\ndrawHandP1(ctx);// üîß DEV MODE: Draw hand (P2) - nur im Dev Mode\nif(devMode){drawHandP2(ctx);}// Draw info panels\ndrawInfoPanels(ctx);ctx.restore();// expose zones for debug snapshot\nwindow.__politicardDebug={uiTransform:getUiTransform(canvas.width,canvas.height),canvasSize:{width:canvas.width,height:canvas.height},zones:LAYOUT.zones,clickZones:clickZonesRef.current.slice(0,1000)};// Run diagnostics after canvas is fully rendered\nrunDiagnostics();},[drawLane,drawHandP1,drawHandP2,drawInterventionsP1,drawInterventionsP2,drawPermanentSlotsP1,drawPermanentSlotsP2,drawInstantSlots,drawInfoPanels,devMode,runDiagnostics]);const DRAW_LAYOUT_OVERLAY=false;// force off per new layout system\n// Load background image if configured\nuseEffect(()=>{var _LAYOUT$background3,_LAYOUT$background4;if((_LAYOUT$background3=LAYOUT.background)!==null&&_LAYOUT$background3!==void 0&&_LAYOUT$background3.enabled&&(_LAYOUT$background4=LAYOUT.background)!==null&&_LAYOUT$background4!==void 0&&_LAYOUT$background4.src){const img=new Image();img.onload=()=>{backgroundImageRef.current=img;requestAnimationFrame(draw);};img.onerror=()=>{var _LAYOUT$background5;console.warn('Failed to load background image',(_LAYOUT$background5=LAYOUT.background)===null||_LAYOUT$background5===void 0?void 0:_LAYOUT$background5.src);};img.src=LAYOUT.background.src;}else{// Fallback: ensure first draw without background\nrequestAnimationFrame(draw);}},[draw]);// Redraw when game state or selection changes\nuseEffect(()=>{requestAnimationFrame(draw);},[gameState,selectedHandIndex,draw]);const handleCardClick=useCallback(data=>{// Hand-Klick\nif(data.type==='hand_p1'){var _data$card$uid,_data$card,_data$card2,_gameState$hands;const uid=(_data$card$uid=(_data$card=data.card)===null||_data$card===void 0?void 0:_data$card.uid)!==null&&_data$card$uid!==void 0?_data$card$uid:(_data$card2=data.card)===null||_data$card2===void 0?void 0:_data$card2.id;const stateHand=((_gameState$hands=gameState.hands)===null||_gameState$hands===void 0?void 0:_gameState$hands[1])||[];const idxInState=stateHand.findIndex(c=>{var _c$uid2;return((_c$uid2=c.uid)!==null&&_c$uid2!==void 0?_c$uid2:c.id)===uid;});onCardClick(data);return;}// Slot-Klick\nif(data.type==='row_slot'){var _gameState$board$1$in,_gameState$board,_gameState$board$,_gameState$board$1$au,_gameState$board2,_gameState$board2$;const lane=data.lane;const cap=getLaneCapacity(lane);// Hole aktuelle Row-L√§nge aus gameState\nconst rowCards=lane==='public'?(_gameState$board$1$in=(_gameState$board=gameState.board)===null||_gameState$board===void 0?void 0:(_gameState$board$=_gameState$board[1])===null||_gameState$board$===void 0?void 0:_gameState$board$.innen)!==null&&_gameState$board$1$in!==void 0?_gameState$board$1$in:[]:(_gameState$board$1$au=(_gameState$board2=gameState.board)===null||_gameState$board2===void 0?void 0:(_gameState$board2$=_gameState$board2[1])===null||_gameState$board2$===void 0?void 0:_gameState$board2$.aussen)!==null&&_gameState$board$1$au!==void 0?_gameState$board$1$au:[];if(rowCards.length>=cap){// Optional: UI Feedback\nconsole.warn(\"Row \".concat(lane,\" is full (\").concat(rowCards.length,\"/\").concat(cap,\")\"));return;}onCardClick(data);return;}// Andere Klicks (empty_slot, board_card, etc.)\nonCardClick(data);},[gameState,onCardClick]);const handleClick=useCallback(e=>{const canvas=canvasRef.current;if(!canvas)return;const rect=canvas.getBoundingClientRect();const{scale,offsetX,offsetY}=getUiTransform(canvas.width,canvas.height);const mx=(e.clientX-rect.left-offsetX)/scale;const my=(e.clientY-rect.top-offsetY)/scale;const hit=clickZonesRef.current.find(z=>mx>=z.x&&mx<=z.x+z.w&&my>=z.y&&my<=z.y+z.h);if(hit)handleCardClick(hit.data);},[handleCardClick]);const handleMouseMove=useCallback(e=>{const canvas=canvasRef.current;if(!canvas)return;const rect=canvas.getBoundingClientRect();const{scale,offsetX,offsetY}=getUiTransform(canvas.width,canvas.height);const mx=(e.clientX-rect.left-offsetX)/scale;const my=(e.clientY-rect.top-offsetY)/scale;const hit=clickZonesRef.current.find(z=>mx>=z.x&&mx<=z.x+z.w&&my>=z.y&&my<=z.y+z.h);if(hit){var _hit$data$card;console.log('[hover]',hit.data.type,(_hit$data$card=hit.data.card)===null||_hit$data$card===void 0?void 0:_hit$data$card.name);onCardHover(_objectSpread(_objectSpread({},hit.data),{},{x:e.clientX,y:e.clientY}));}else{onCardHover(null);}},[onCardHover]);return/*#__PURE__*/_jsx(\"canvas\",{ref:canvasRef,width:1920,height:1080,style:{display:'block',width:'100%',height:'100%',imageRendering:'auto'},onClick:handleClick,onMouseMove:handleMouseMove});};","map":{"version":3,"names":["React","useRef","useEffect","useCallback","LAYOUT","getZone","computeSlotRects","getUiTransform","getLaneCapacity","getPublicRects","getGovernmentRects","drawCardImage","sortHandCards","getNetApCost","jsx","_jsx","GameCanvas","_ref","gameState","selectedHandIndex","onCardClick","onCardHover","devMode","canvasRef","clickZonesRef","backgroundImageRef","drawCardAt","ctx","card","x","y","size","_shield","selected","arguments","length","undefined","showAPCost","player","dx","dy","s","Math","floor","kind","_influence","barH","max","fillStyle","fillRect","fontSize","font","concat","textAlign","textBaseline","fillText","influence","protected","shield","deactivated","apInfo","netText","net","badgeHeight","badgeWidth","badgeX","badgeY","bgColor","borderColor","beginPath","roundRect","fill","strokeStyle","lineWidth","stroke","strokeRect","w","h","getSlotDisplayName","zoneId","index","slotNumber","includes","drawLane","lane","clickable","zone","slots","arr","board","forEach","idx","isSelected","hands","clickZone","textY","name","current","push","_objectSpread","data","type","slotName","drawHandP1","hand","i","originalIndex","findIndex","c","uid","isSel","drawHandP2","rectPx","drawInterventionsP1","traps","zx","zy","zw","zh","drawInterventionsP2","drawSingleSlot","clickType","slot","drawPermanentSlotsP1","permanentSlots","government","public","drawPermanentSlotsP2","drawInstantSlots","sofortPlayerCard","sofort","sofortOppCard","getActiveKeywordsAndSubcategories","allCards","innen","aussen","filter","keywords","Set","subcategories","tag","add","publicCard","oligarchNames","platformNames","movementNames","ngoNames","intelligenceNames","mediaNames","Array","from","drawInfoPanels","govPanelX","govPanelY","govPanelW","govPanelH","keyword","pubPanelX","pubPanelY","pubPanelW","pubPanelH","subcategory","displayName","substring","runDiagnostics","handZones","z","uiUIDs","map","_z$data$card$uid","id","Boolean","stateHand","stateUIDs","_c$uid","missingInState","u","missingInUI","_politicardDebug","mismatch","ts","Date","now","uiCount","stateCount","stack","Error","window","__politicardDebug","slice","console","warn","e","error","draw","_LAYOUT$background","_LAYOUT$background2","canvas","getContext","clearRect","width","height","background","enabled","src","drawImage","scale","offsetX","offsetY","save","translate","opponentPublicRects","opponentGovRects","playerPublicRects","playerGovRects","restore","uiTransform","canvasSize","zones","clickZones","DRAW_LAYOUT_OVERLAY","_LAYOUT$background3","_LAYOUT$background4","img","Image","onload","requestAnimationFrame","onerror","_LAYOUT$background5","handleCardClick","_data$card$uid","_data$card","_data$card2","_gameState$hands","idxInState","_c$uid2","_gameState$board$1$in","_gameState$board","_gameState$board$","_gameState$board$1$au","_gameState$board2","_gameState$board2$","cap","rowCards","handleClick","rect","getBoundingClientRect","mx","clientX","left","my","clientY","top","hit","find","handleMouseMove","_hit$data$card","log","ref","style","display","imageRendering","onClick","onMouseMove"],"sources":["C:/Users/skank/Videos/Cards/Milchcards/src/components/GameCanvas.tsx"],"sourcesContent":["import React, { useRef, useEffect, useCallback } from 'react';\r\nimport { GameState, Card, PoliticianCard, Player, Lane } from '../types/game';\r\nimport { LAYOUT, getZone, computeSlotRects, getUiTransform, getLaneCapacity, getPublicRects, getGovernmentRects, getSofortRect } from '../ui/layout';\r\nimport { drawCardImage, sortHandCards } from '../utils/gameUtils';\r\nimport { getNetApCost } from '../utils/ap';\r\n\r\ninterface GameCanvasProps {\r\n  gameState: GameState;\r\n  selectedHandIndex: number | null;\r\n  onCardClick: (data: any) => void;\r\n  onCardHover: (data: any) => void;\r\n  devMode?: boolean; // üîß DEV MODE: Show P2 hand when true\r\n}\r\n\r\n\r\n\r\nexport const GameCanvas: React.FC<GameCanvasProps> = ({\r\n  gameState,\r\n  selectedHandIndex,\r\n  onCardClick,\r\n  onCardHover,\r\n  devMode = false,\r\n}) => {\r\n  const canvasRef = useRef<HTMLCanvasElement>(null);\r\n  const clickZonesRef = useRef<Array<{ x: number; y: number; w: number; h: number; data: any }>>([]);\r\n  const backgroundImageRef = useRef<HTMLImageElement | null>(null);\r\n\r\n\r\n\r\n  const drawCardAt = useCallback((\r\n    ctx: CanvasRenderingContext2D,\r\n    card: Card,\r\n    x: number,\r\n    y: number,\r\n    size: number,\r\n    selected: boolean = false,\r\n    showAPCost: boolean = false,\r\n    player?: Player\r\n  ) => {\r\n    let dx = x, dy = y, s = size;\r\n    if (selected) {\r\n      s = Math.floor(size * 1.05);\r\n      dx = x - Math.floor((s - size) / 2);\r\n      dy = y - Math.floor((s - size) / 2);\r\n    }\r\n\r\n    drawCardImage(ctx, card, dx, dy, s, 'ui');\r\n\r\n    // Status-Indikatoren (f√ºr alle Board-Karten)\r\n    // Einfluss-Wert dauerhaft anzeigen (oben links) ‚Äì nur f√ºr Regierungskarten\r\n    if ((card as any).kind === 'pol') {\r\n      const barH = Math.max(20, Math.floor(s * 0.12) + 6);\r\n      ctx.fillStyle = 'rgba(0,0,0,0.6)';\r\n      ctx.fillRect(dx, dy + s - barH, s, barH);\r\n\r\n      ctx.fillStyle = '#ffffff';\r\n      const fontSize = Math.floor(s * 0.12);\r\n      ctx.font = `bold ${fontSize}px sans-serif`;\r\n      ctx.textAlign = 'left';\r\n      ctx.textBaseline = 'middle';\r\n      ctx.fillText(`${(card as any).influence ?? 0}`, dx + 8, dy + s - barH / 2);\r\n    }\r\n    // Schutz-Status (blauer Punkt)\r\n    if ((card as any).protected || ((card as any).shield ?? 0) > 0) {\r\n      ctx.fillStyle = '#1da1f2';\r\n      ctx.fillRect(dx + s - 22, dy + 6, 16, 16);\r\n    }\r\n    // Deaktiviert-Status (roter Punkt)\r\n    if ((card as any).deactivated) {\r\n      ctx.fillStyle = '#b63838';\r\n      ctx.fillRect(dx + s - 22, dy + 26, 16, 16);\r\n    }\r\n\r\n    // Netto-AP Badge anzeigen (modern) - nur f√ºr Handkarten\r\n    if (showAPCost && player) {\r\n      const apInfo = getNetApCost(gameState, player, card, 'innen'); // Default auf innen\r\n      const netText = `‚ö°${apInfo.net}`;\r\n\r\n      // Badge-Gr√∂√üe berechnen\r\n      const badgeHeight = Math.max(16, Math.floor(s * 0.12));\r\n      const badgeWidth = badgeHeight * 2;\r\n      const badgeX = dx + s - badgeWidth - 6;\r\n      const badgeY = dy + 6;\r\n\r\n      // Badge-Hintergrund (gr√ºn f√ºr 0 AP, gelb f√ºr > 0)\r\n      const bgColor = apInfo.net === 0 ? '#E7F8EF' : '#FFF7E6';\r\n      const borderColor = apInfo.net === 0 ? '#10b981' : '#f59e0b';\r\n\r\n      ctx.fillStyle = bgColor;\r\n      ctx.beginPath();\r\n      ctx.roundRect(badgeX, badgeY, badgeWidth, badgeHeight, badgeHeight / 2);\r\n      ctx.fill();\r\n\r\n      // Badge-Rand\r\n      ctx.strokeStyle = borderColor;\r\n      ctx.lineWidth = 1;\r\n      ctx.stroke();\r\n\r\n      // Text\r\n      ctx.fillStyle = apInfo.net === 0 ? '#065f46' : '#92400e';\r\n      ctx.font = `bold ${Math.floor(badgeHeight * 0.5)}px sans-serif`;\r\n      ctx.textAlign = 'center';\r\n      ctx.textBaseline = 'middle';\r\n      ctx.fillText(netText, badgeX + badgeWidth / 2, badgeY + badgeHeight / 2);\r\n\r\n      // Reset text align\r\n      ctx.textAlign = 'start';\r\n      ctx.textBaseline = 'alphabetic';\r\n    }\r\n\r\n    // Auswahl-Rahmen\r\n    if (selected) {\r\n      ctx.strokeStyle = '#61dafb';\r\n      ctx.lineWidth = 3;\r\n      ctx.strokeRect(dx + 1, dy + 1, s - 2, s - 2);\r\n      ctx.lineWidth = 1;\r\n    }\r\n\r\n    // Return exact 256x256 click zone over the card\r\n    // Since all cards are 256x256, the click zone should match exactly\r\n    return { x: dx, y: dy, w: 256, h: 256 };\r\n  }, [gameState]);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  // Slot-Benennungs-Funktion basierend auf Glossar\r\n  const getSlotDisplayName = useCallback((zoneId: string, index: number, player: Player): string => {\r\n    const slotNumber = index + 1;\r\n\r\n    if (zoneId.includes('government')) {\r\n      if (zoneId.includes('player')) {\r\n        return `Regierungsreihe Slot ${slotNumber}`;\r\n      } else {\r\n        return `Gegner Regierung Slot ${slotNumber}`;\r\n      }\r\n    } else if (zoneId.includes('public')) {\r\n      if (zoneId.includes('player')) {\r\n        return `√ñffentlichkeitsreihe Slot ${slotNumber}`;\r\n      } else {\r\n        return `Gegner √ñffentlichkeit Slot ${slotNumber}`;\r\n      }\r\n    } else if (zoneId.includes('permanent.government')) {\r\n      if (zoneId.includes('player')) {\r\n        return 'Regierung Spezial-Slot';\r\n      } else {\r\n        return 'Gegner Regierung Spezial-Slot';\r\n      }\r\n    } else if (zoneId.includes('permanent.public')) {\r\n      if (zoneId.includes('player')) {\r\n        return '√ñffentlichkeit Spezial-Slot';\r\n      } else {\r\n        return 'Gegner √ñffentlichkeit Spezial-Slot';\r\n      }\r\n    } else if (zoneId.includes('instant')) {\r\n      if (zoneId.includes('player')) {\r\n        return 'Sofort-Slot';\r\n      } else {\r\n        return 'Gegner Sofort-Slot';\r\n      }\r\n    } else if (zoneId.includes('hand')) {\r\n      return 'Hand';\r\n    } else if (zoneId.includes('interventions')) {\r\n      return 'Interventionen';\r\n    }\r\n\r\n    return `Slot ${slotNumber}`;\r\n  }, []);\r\n\r\n  const drawLane = useCallback((\r\n    ctx: CanvasRenderingContext2D,\r\n    zoneId: string,\r\n    player: Player,\r\n    lane: Lane,\r\n    clickable: boolean\r\n  ) => {\r\n    const zone = getZone(zoneId);\r\n    if (!zone) return;\r\n\r\n    const slots = computeSlotRects(zone);\r\n    const arr = gameState.board[player][lane];\r\n\r\n    slots.forEach((s, idx) => {\r\n      const card = arr[idx];\r\n\r\n      // Hintergrundfarbe nach Kategorie\r\n      let bgColor = 'rgba(0,0,0,0.1)'; // Standard\r\n      if (zoneId.includes('government')) {\r\n        bgColor = 'rgba(255, 197, 0, 0.15)'; // Hellgelb f√ºr Regierung\r\n      } else if (zoneId.includes('public')) {\r\n        bgColor = 'rgba(0, 255, 0, 0.15)'; // Hellgr√ºn f√ºr √ñffentlichkeit\r\n      }\r\n\r\n      ctx.fillStyle = bgColor;\r\n      ctx.fillRect(s.x, s.y, s.w, s.h);\r\n\r\n      // Slot-Rahmen\r\n      ctx.strokeStyle = 'rgba(255,255,255,0.06)';\r\n      ctx.strokeRect(s.x + 0.5, s.y + 0.5, s.w - 1, s.h - 1);\r\n\r\n      if (card) {\r\n        const isSelected = player === 1 && selectedHandIndex !== null && gameState.hands[1][selectedHandIndex] === card;\r\n        const clickZone = drawCardAt(ctx, card, s.x, s.y, s.w, isSelected, false);\r\n\r\n        // Kartenname unter dem Slot anzeigen\r\n        ctx.fillStyle = 'rgba(255,255,255,0.9)';\r\n        ctx.font = 'bold 12px sans-serif';\r\n        ctx.textAlign = 'center';\r\n        const textY = s.y + s.h + 16;\r\n        ctx.fillText(card.name, s.x + s.w/2, textY);\r\n\r\n        clickZonesRef.current.push({\r\n          ...clickZone,\r\n          data: { type: 'board_card', player, lane, index: idx, card }\r\n        });\r\n      } else if (clickable && gameState.current === player) {\r\n        // Slot-Benennung anzeigen (f√ºr den aktuellen Spieler)\r\n        const slotName = getSlotDisplayName(zoneId, idx, player);\r\n        ctx.fillStyle = 'rgba(255,255,255,0.6)';\r\n        ctx.font = '11px sans-serif';\r\n        ctx.textAlign = 'center';\r\n        const textY = s.y + s.h/2;\r\n        ctx.fillText(slotName, s.x + s.w/2, textY);\r\n\r\n        clickZonesRef.current.push({\r\n          x: s.x, y: s.y, w: s.w, h: s.h,\r\n          data: { type: 'row_slot', lane, index: idx }\r\n        });\r\n      }\r\n    });\r\n  }, [gameState, selectedHandIndex, drawCardAt, getSlotDisplayName]);\r\n\r\n  const drawHandP1 = useCallback((ctx: CanvasRenderingContext2D) => {\r\n    const hand = sortHandCards(gameState.hands[1]);\r\n    const zone = getZone('hand.player');\r\n    if (!zone) return;\r\n\r\n    const slots = computeSlotRects(zone);\r\n    slots.forEach((s: { x: number; y: number; w: number; h: number }, i: number) => {\r\n      const card = hand[i];\r\n      if (!card) return;\r\n      // Find original index in unsorted hand for click handling\r\n      const originalIndex = gameState.hands[1].findIndex(c => c.uid === card.uid);\r\n      const isSel = selectedHandIndex === originalIndex;\r\n      const clickZone = drawCardAt(ctx, card, s.x, s.y, s.w, isSel, true, 1); // Show AP cost for player 1 hand\r\n      clickZonesRef.current.push({ ...clickZone, data: { type: 'hand_p1', index: originalIndex, card } });\r\n    });\r\n  }, [gameState.hands, selectedHandIndex, drawCardAt]);\r\n\r\n      // üîß DEV MODE: Player 2 Hand (rechts unten, kompakter)\r\n  const drawHandP2 = useCallback((ctx: CanvasRenderingContext2D) => {\r\n    const hand = sortHandCards(gameState.hands[2]);\r\n    const zone = getZone('hand.opponent');\r\n    if (!zone) return;\r\n\r\n    const slots = computeSlotRects(zone);\r\n\r\n    // Hintergrund f√ºr P2 Hand\r\n    const [x, y, w, h] = zone.rectPx;\r\n    ctx.fillStyle = 'rgba(255, 100, 100, 0.15)'; // R√∂tlicher Hintergrund f√ºr P2\r\n    ctx.fillRect(x, y, w, h);\r\n    ctx.strokeStyle = 'rgba(255, 100, 100, 0.3)';\r\n    ctx.strokeRect(x + 0.5, y + 0.5, w - 1, h - 1);\r\n\r\n    // Label f√ºr P2 Hand\r\n    ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\r\n    ctx.font = 'bold 14px sans-serif';\r\n    ctx.textAlign = 'center';\r\n    ctx.fillText('Player 2 Hand', x + w/2, y - 8);\r\n\r\n    slots.forEach((s: { x: number; y: number; w: number; h: number }, i: number) => {\r\n      const card = hand[i];\r\n      if (!card) return;\r\n      // Find original index in unsorted hand for click handling\r\n      const originalIndex = gameState.hands[2].findIndex(c => c.uid === card.uid);\r\n      const isSel = gameState.current === 2 && selectedHandIndex === originalIndex;\r\n      const clickZone = drawCardAt(ctx, card, s.x, s.y, s.w, isSel, true, 2); // Show AP cost for player 2 hand\r\n      clickZonesRef.current.push({ ...clickZone, data: { type: 'hand_p2', index: originalIndex, card } });\r\n    });\r\n  }, [gameState, selectedHandIndex, drawCardAt]);\r\n  // Interventions strip (player traps)\r\n  const drawInterventionsP1 = useCallback((ctx: CanvasRenderingContext2D) => {\r\n    const traps = gameState.traps[1] || [];\r\n    const zone = getZone('interventions.player');\r\n    if (!zone) return;\r\n\r\n    // Single intervention slot\r\n    const [zx, zy, zw, zh] = zone.rectPx;\r\n    const card = traps[0]; // Only first trap\r\n\r\n    // Hintergrund f√ºr Interventions-Slot\r\n    ctx.fillStyle = 'rgba(200, 160, 255, 0.15)'; // Lavendelfarben f√ºr Interventionen\r\n    ctx.fillRect(zx, zy, zw, zh);\r\n    ctx.strokeStyle = 'rgba(200, 160, 255, 0.3)';\r\n    ctx.strokeRect(zx + 0.5, zy + 0.5, zw - 1, zh - 1);\r\n\r\n    // Slot-Benennung f√ºr Interventions-Slot\r\n    ctx.fillStyle = 'rgba(200, 160, 255, 0.8)';\r\n    ctx.font = '11px sans-serif';\r\n    ctx.textAlign = 'left';\r\n    ctx.fillText('Intervention', zx + 8, zy + zh - 6);\r\n\r\n    if (card) {\r\n      const clickZone = drawCardAt(ctx, card, zx, zy, zw, false, false);\r\n      clickZonesRef.current.push({ ...clickZone, data: { type: 'trap_p1', index: 0, card } });\r\n    }\r\n  }, [gameState.traps, drawCardAt]);\r\n\r\n  // Interventions strip (opponent traps)\r\n  const drawInterventionsP2 = useCallback((ctx: CanvasRenderingContext2D) => {\r\n    const traps = gameState.traps[2] || [];\r\n    const zone = getZone('interventions.opponent');\r\n    if (!zone) return;\r\n\r\n    // Single intervention slot\r\n    const [zx, zy, zw, zh] = zone.rectPx;\r\n    const card = traps[0]; // Only first trap\r\n\r\n    // Hintergrund f√ºr Interventions-Slot\r\n    ctx.fillStyle = 'rgba(200, 160, 255, 0.15)'; // Lavendelfarben f√ºr Interventionen\r\n    ctx.fillRect(zx, zy, zw, zh);\r\n    ctx.strokeStyle = 'rgba(200, 160, 255, 0.3)';\r\n    ctx.strokeRect(zx + 0.5, zy + 0.5, zw - 1, zh - 1);\r\n\r\n    // Slot-Benennung f√ºr Interventions-Slot\r\n    ctx.fillStyle = 'rgba(200, 160, 255, 0.8)';\r\n    ctx.font = '11px sans-serif';\r\n    ctx.textAlign = 'left';\r\n    ctx.fillText('Intervention', zx + 8, zy + zh - 6);\r\n\r\n    if (card) {\r\n      const clickZone = drawCardAt(ctx, card, zx, zy, zw, false, false);\r\n      clickZonesRef.current.push({ ...clickZone, data: { type: 'trap_p2', index: 0, card } });\r\n    }\r\n  }, [gameState.traps, drawCardAt]);\r\n\r\n  // Single slot drawing function\r\n  const drawSingleSlot = useCallback((\r\n    ctx: CanvasRenderingContext2D,\r\n    zoneId: string,\r\n    card: Card | null,\r\n    clickType: string,\r\n    player: Player\r\n  ) => {\r\n    const zone = getZone(zoneId);\r\n    if (!zone) return;\r\n    const [x, y, w, h] = zone.rectPx;\r\n\r\n    // Hintergrundfarbe nach Kategorie\r\n    let bgColor = 'rgba(0,0,0,0.1)'; // Standard\r\n    if (zoneId.includes('government')) {\r\n      bgColor = 'rgba(255, 197, 0, 0.15)'; // Hellgelb f√ºr Regierung\r\n    } else if (zoneId.includes('public')) {\r\n      bgColor = 'rgba(0, 255, 0, 0.15)'; // Hellgr√ºn f√ºr √ñffentlichkeit\r\n    } else if (zoneId.includes('instant')) {\r\n      bgColor = 'rgba(127, 116, 91, 0.15)'; // Neutral f√ºr Sofort-Slots\r\n    } else if (zoneId.includes('permanent')) {\r\n      // Unterscheide zwischen government und public permanent slots\r\n      if (zoneId.includes('government')) {\r\n        bgColor = 'rgba(255, 197, 0, 0.15)';\r\n      } else if (zoneId.includes('public')) {\r\n        bgColor = 'rgba(0, 255, 0, 0.15)';\r\n      }\r\n    }\r\n\r\n    ctx.fillStyle = bgColor;\r\n    ctx.fillRect(x, y, w, h);\r\n\r\n    // Draw slot border\r\n    ctx.strokeStyle = 'rgba(255,255,255,0.06)';\r\n    ctx.strokeRect(x + 0.5, y + 0.5, w - 1, h - 1);\r\n\r\n    if (card) {\r\n      const isSelected = player === 1 && selectedHandIndex !== null && gameState.hands[1][selectedHandIndex] === card;\r\n      const clickZone = drawCardAt(ctx, card, x, y, w, isSelected, false);\r\n\r\n      // Kartenname unter dem Slot anzeigen\r\n      ctx.fillStyle = 'rgba(255,255,255,0.9)';\r\n      ctx.font = 'bold 12px sans-serif';\r\n      ctx.textAlign = 'center';\r\n      const textY = y + h + 16;\r\n      ctx.fillText(card.name, x + w/2, textY);\r\n\r\n      clickZonesRef.current.push({ ...clickZone, data: { type: 'slot_card', slot: clickType, card } });\r\n\r\n      // üîß NEU: Sofort-Initiative-Slots sind klickbar f√ºr Aktivierung\r\n      if (clickType === 'instant' && gameState.current === player) {\r\n        clickZonesRef.current.push({\r\n          x, y, w, h,\r\n          data: { type: 'activate_instant', player, card }\r\n        });\r\n      }\r\n    } else if (gameState.current === player) {\r\n      // Slot-Benennung f√ºr leere Slots anzeigen (f√ºr den aktuellen Spieler)\r\n      const slotName = getSlotDisplayName(zoneId, 0, player);\r\n      ctx.fillStyle = 'rgba(255,255,255,0.6)';\r\n      ctx.font = '11px sans-serif';\r\n      ctx.textAlign = 'center';\r\n      const textY = y + h/2;\r\n      ctx.fillText(slotName, x + w/2, textY);\r\n\r\n      clickZonesRef.current.push({ x, y, w, h, data: { type: 'empty_slot', slot: clickType } });\r\n    }\r\n  }, [selectedHandIndex, gameState, drawCardAt, getSlotDisplayName]);\r\n\r\n  // Draw permanent slots for player\r\n  const drawPermanentSlotsP1 = useCallback((ctx: CanvasRenderingContext2D) => {\r\n    drawSingleSlot(ctx, 'slot.permanent.government.player', gameState.permanentSlots[1].government, 'permanent_government', 1);\r\n    drawSingleSlot(ctx, 'slot.permanent.public.player', gameState.permanentSlots[1].public, 'permanent_public', 1);\r\n  }, [gameState.permanentSlots, drawSingleSlot]);\r\n\r\n  // Draw permanent slots for opponent\r\n  const drawPermanentSlotsP2 = useCallback((ctx: CanvasRenderingContext2D) => {\r\n    drawSingleSlot(ctx, 'slot.permanent.government.opponent', gameState.permanentSlots[2].government, 'permanent_government', 2);\r\n    drawSingleSlot(ctx, 'slot.permanent.public.opponent', gameState.permanentSlots[2].public, 'permanent_public', 2);\r\n  }, [gameState.permanentSlots, drawSingleSlot]);\r\n\r\n  // Draw instant slots\r\n  const drawInstantSlots = useCallback((ctx: CanvasRenderingContext2D) => {\r\n    // Sofort-Initiative-Slots aus dem Board zeichnen\r\n    const sofortPlayerCard = gameState.board[1].sofort[0];\r\n    const sofortOppCard = gameState.board[2].sofort[0];\r\n\r\n    drawSingleSlot(ctx, 'slot.instant.player', sofortPlayerCard, 'instant', 1);\r\n    drawSingleSlot(ctx, 'slot.instant.opponent', sofortOppCard, 'instant', 2);\r\n  }, [gameState.board, drawSingleSlot]);\r\n\r\n  // Aktive Schl√ºsselw√∂rter und Unterkategorien ermitteln\r\n  const getActiveKeywordsAndSubcategories = useCallback((player: Player) => {\r\n    const board = gameState.board[player];\r\n    const permanentSlots = gameState.permanentSlots[player];\r\n    const allCards = [\r\n      ...board.innen,\r\n      ...board.aussen,\r\n      permanentSlots.government,\r\n      permanentSlots.public\r\n    ].filter(c => c && c.kind === 'pol') as PoliticianCard[];\r\n\r\n    const keywords = new Set<string>();\r\n    const subcategories = new Set<string>();\r\n\r\n    allCards.forEach(card => {\r\n      if (!card.deactivated) {\r\n        // Regierungskarten-Schl√ºsselw√∂rter\r\n        if (card.tag === 'Leadership') {\r\n          keywords.add('Leadership');\r\n        }\r\n        if (card.tag === 'Diplomat') {\r\n          keywords.add('Diplomat');\r\n        }\r\n\r\n        // √ñffentlichkeits-Unterkategorien (f√ºr Karten in √ñffentlichkeitsreihe)\r\n        if (board.innen.includes(card)) {\r\n          const publicCard = card as any;\r\n          if (publicCard.tag) {\r\n            // Oligarch\r\n            const oligarchNames = ['Elon Musk', 'Bill Gates', 'George Soros', 'Warren Buffett', 'Mukesh Ambani', 'Jeff Bezos', 'Alisher Usmanov', 'Gautam Adani', 'Jack Ma', 'Zhang Yiming', 'Roman Abramovich'];\r\n            if (oligarchNames.includes(publicCard.name)) {\r\n              subcategories.add('Oligarch');\r\n            }\r\n\r\n            // Plattform\r\n            const platformNames = ['Mark Zuckerberg', 'Tim Cook', 'Sam Altman', 'Jack Ma'];\r\n            if (platformNames.includes(publicCard.name)) {\r\n              subcategories.add('Plattform');\r\n            }\r\n\r\n            // Bewegung\r\n            const movementNames = ['Greta Thunberg', 'Malala Yousafzai', 'Ai Weiwei', 'Alexei Navalny'];\r\n            if (movementNames.includes(publicCard.name)) {\r\n              subcategories.add('Bewegung');\r\n            }\r\n\r\n            // NGO/Think-Tank\r\n            const ngoNames = ['Bill Gates', 'George Soros', 'Jennifer Doudna', 'Noam Chomsky', 'Anthony Fauci'];\r\n            if (ngoNames.includes(publicCard.name)) {\r\n              subcategories.add('NGO/Think-Tank');\r\n            }\r\n\r\n            // Intelligenz\r\n            const intelligenceNames = ['Jennifer Doudna', 'Noam Chomsky', 'Edward Snowden', 'Julian Assange', 'Yuval Noah Harari', 'Ai Weiwei', 'Alexei Navalny', 'Anthony Fauci'];\r\n            if (intelligenceNames.includes(publicCard.name)) {\r\n              subcategories.add('Intelligenz');\r\n            }\r\n\r\n            // Medien\r\n            const mediaNames = ['Oprah Winfrey'];\r\n            if (mediaNames.includes(publicCard.name)) {\r\n              subcategories.add('Medien');\r\n            }\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    return {\r\n      keywords: Array.from(keywords),\r\n      subcategories: Array.from(subcategories)\r\n    };\r\n  }, [gameState]);\r\n\r\n  // Info-Panels zeichnen\r\n  const drawInfoPanels = useCallback((ctx: CanvasRenderingContext2D) => {\r\n    const { keywords, subcategories } = getActiveKeywordsAndSubcategories(1);\r\n\r\n    // Panel f√ºr Regierungsschl√ºsselw√∂rter (rechts neben Regierungsslots)\r\n    const govPanelX = 1640 + 256 + 20; // Nach dem letzten permanenten Slot\r\n    const govPanelY = 300; // Auf H√∂he der Regierungsslots\r\n    const govPanelW = 120;\r\n    const govPanelH = 256;\r\n\r\n    // Regierungspanel Hintergrund\r\n    ctx.fillStyle = 'rgba(255, 197, 0, 0.15)';\r\n    ctx.fillRect(govPanelX, govPanelY, govPanelW, govPanelH);\r\n    ctx.strokeStyle = 'rgba(255, 197, 0, 0.3)';\r\n    ctx.strokeRect(govPanelX + 0.5, govPanelY + 0.5, govPanelW - 1, govPanelH - 1);\r\n\r\n    // Regierungspanel Titel\r\n    ctx.fillStyle = 'rgba(255, 197, 0, 0.9)';\r\n    ctx.font = 'bold 12px sans-serif';\r\n    ctx.textAlign = 'center';\r\n    ctx.fillText('Regierung', govPanelX + govPanelW/2, govPanelY + 16);\r\n\r\n    // Schl√ºsselw√∂rter auflisten\r\n    ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\r\n    ctx.font = '11px sans-serif';\r\n    ctx.textAlign = 'left';\r\n    if (keywords.length > 0) {\r\n      keywords.forEach((keyword, idx) => {\r\n        ctx.fillText(`‚Ä¢ ${keyword}`, govPanelX + 8, govPanelY + 36 + idx * 16);\r\n      });\r\n    } else {\r\n      ctx.fillStyle = 'rgba(255, 255, 255, 0.5)';\r\n      ctx.fillText('Keine aktiven', govPanelX + 8, govPanelY + 36);\r\n      ctx.fillText('Schl√ºsselw√∂rter', govPanelX + 8, govPanelY + 52);\r\n    }\r\n\r\n    // Panel f√ºr √ñffentlichkeits-Unterkategorien (rechts neben √ñffentlichkeitsslots)\r\n    const pubPanelX = 1640 + 256 + 20;\r\n    const pubPanelY = 580; // Auf H√∂he der √ñffentlichkeitsslots\r\n    const pubPanelW = 120;\r\n    const pubPanelH = 256;\r\n\r\n    // √ñffentlichkeitspanel Hintergrund\r\n    ctx.fillStyle = 'rgba(0, 255, 0, 0.15)';\r\n    ctx.fillRect(pubPanelX, pubPanelY, pubPanelW, pubPanelH);\r\n    ctx.strokeStyle = 'rgba(0, 255, 0, 0.3)';\r\n    ctx.strokeRect(pubPanelX + 0.5, pubPanelY + 0.5, pubPanelW - 1, pubPanelH - 1);\r\n\r\n    // √ñffentlichkeitspanel Titel\r\n    ctx.fillStyle = 'rgba(0, 255, 0, 0.9)';\r\n    ctx.font = 'bold 12px sans-serif';\r\n    ctx.textAlign = 'center';\r\n    ctx.fillText('√ñffentlichkeit', pubPanelX + pubPanelW/2, pubPanelY + 16);\r\n\r\n    // Unterkategorien auflisten\r\n    ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\r\n    ctx.font = '11px sans-serif';\r\n    ctx.textAlign = 'left';\r\n    if (subcategories.length > 0) {\r\n      subcategories.forEach((subcategory, idx) => {\r\n        const displayName = subcategory.length > 12 ? subcategory.substring(0, 10) + '...' : subcategory;\r\n        ctx.fillText(`‚Ä¢ ${displayName}`, pubPanelX + 8, pubPanelY + 36 + idx * 16);\r\n      });\r\n    } else {\r\n      ctx.fillStyle = 'rgba(255, 255, 255, 0.5)';\r\n      ctx.fillText('Keine aktiven', pubPanelX + 8, pubPanelY + 36);\r\n      ctx.fillText('Unterkategorien', pubPanelX + 8, pubPanelY + 52);\r\n    }\r\n  }, [getActiveKeywordsAndSubcategories]);\r\n\r\n  // Move diagnostics to draw callback to ensure they run after canvas is actually rendered\r\n  const runDiagnostics = useCallback(() => {\r\n    try {\r\n      const handZones = clickZonesRef.current.filter(z => z.data && z.data.type === 'hand_p1');\r\n      const uiUIDs = handZones.map(z => (z.data.card && (z.data.card.uid ?? z.data.card.id)) ).filter(Boolean);\r\n      const stateHand = gameState.hands && gameState.hands[1] ? gameState.hands[1] : [];\r\n      const stateUIDs = stateHand.map((c: any) => c.uid ?? c.id).filter(Boolean);\r\n\r\n      const missingInState = uiUIDs.filter((u: any) => !stateUIDs.includes(u));\r\n      const missingInUI = stateUIDs.filter((u: any) => !uiUIDs.includes(u));\r\n\r\n      // Only warn if there are cards in UI that don't exist in state (real error)\r\n      // Don't warn about missing UI cards due to limited slot capacity\r\n      if (missingInState.length > 0) {\r\n        const mismatch = {\r\n          ts: Date.now(),\r\n          uiCount: uiUIDs.length,\r\n          stateCount: stateUIDs.length,\r\n          uiUIDs,\r\n          stateUIDs,\r\n          missingInState,\r\n          missingInUI,\r\n          stack: (new Error('mismatch-stack')).stack\r\n        };\r\n        (window as any).__politicardDebug = {\r\n          ...(window as any).__politicardDebug,\r\n          mismatch: [ ...(window as any).__politicardDebug?.mismatch || [] ].slice(-19).concat([mismatch])\r\n        };\r\n        // Clear, then log to console so user can copy/paste trace\r\n        console.warn('POLITICARD DIAGNOSTIC: hand mismatch detected', mismatch);\r\n      }\r\n    } catch (e) {\r\n      // swallow diagnostic errors to avoid breaking rendering\r\n      console.error('Diagnostic error', e);\r\n    }\r\n  }, [gameState.hands]);\r\n\r\n  const draw = useCallback(() => {\r\n    const canvas = canvasRef.current;\r\n    if (!canvas) return;\r\n\r\n    const ctx = canvas.getContext('2d');\r\n    if (!ctx) return;\r\n\r\n    // Clear canvas\r\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n    // Clear click zones\r\n    clickZonesRef.current = [];\r\n\r\n    // Background: prefer PNG if configured\r\n    if (LAYOUT.background?.enabled && LAYOUT.background?.src) {\r\n      if (backgroundImageRef.current) {\r\n        ctx.drawImage(backgroundImageRef.current, 0, 0, canvas.width, canvas.height);\r\n      } else {\r\n        ctx.fillStyle = '#0c131b';\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n      }\r\n    } else {\r\n      ctx.fillStyle = '#0c131b';\r\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n    }\r\n\r\n    // Apply UI transform (new signature)\r\n    const { scale, offsetX, offsetY } = getUiTransform(canvas.width, canvas.height);\r\n    ctx.save();\r\n    ctx.translate(offsetX, offsetY);\r\n    ctx.scale(scale, scale);\r\n\r\n    // Draw opponent board (top rows) - clickable im Dev Mode\r\n    // Draw opponent board using new layout system\r\n    const opponentPublicRects = getPublicRects('opponent');\r\n    const opponentGovRects = getGovernmentRects('opponent');\r\n\r\n    // Draw opponent public slots\r\n    opponentPublicRects.forEach((s: { x: number; y: number; w: number; h: number }, idx: number) => {\r\n      const card = gameState.board[2].innen[idx];\r\n      if (card) {\r\n        drawCardAt(ctx, card, s.x, s.y, s.w, false, false, 2);\r\n      }\r\n    });\r\n\r\n    // Draw opponent government slots\r\n    opponentGovRects.forEach((s: { x: number; y: number; w: number; h: number }, idx: number) => {\r\n      const card = gameState.board[2].aussen[idx];\r\n      if (card) {\r\n        drawCardAt(ctx, card, s.x, s.y, s.w, false, false, 2);\r\n      }\r\n    });\r\n\r\n    // Draw opponent permanent slots\r\n    drawPermanentSlotsP2(ctx);\r\n\r\n    // Draw player board (middle rows)\r\n    // Draw player board using new layout system\r\n    const playerPublicRects = getPublicRects('player');\r\n    const playerGovRects = getGovernmentRects('player');\r\n\r\n    // Draw player public slots\r\n    playerPublicRects.forEach((s: { x: number; y: number; w: number; h: number }, idx: number) => {\r\n      const card = gameState.board[1].innen[idx];\r\n      if (card) {\r\n        const clickZone = drawCardAt(ctx, card, s.x, s.y, s.w, false, false, 1);\r\n        clickZonesRef.current.push({\r\n          ...clickZone,\r\n          data: { type: 'row_slot', player: 1, lane: 'innen', index: idx }\r\n        });\r\n      } else {\r\n        // Empty slot click zone\r\n        clickZonesRef.current.push({\r\n          x: s.x, y: s.y, w: s.w, h: s.h,\r\n          data: { type: 'row_slot', player: 1, lane: 'innen', index: idx }\r\n        });\r\n      }\r\n    });\r\n\r\n    // Draw player government slots\r\n    playerGovRects.forEach((s: { x: number; y: number; w: number; h: number }, idx: number) => {\r\n      const card = gameState.board[1].aussen[idx];\r\n      if (card) {\r\n        const clickZone = drawCardAt(ctx, card, s.x, s.y, s.w, false, false, 1);\r\n        clickZonesRef.current.push({\r\n          ...clickZone,\r\n          data: { type: 'row_slot', player: 1, lane: 'aussen', index: idx }\r\n        });\r\n      } else {\r\n        // Empty slot click zone\r\n        clickZonesRef.current.push({\r\n          x: s.x, y: s.y, w: s.w, h: s.h,\r\n          data: { type: 'row_slot', player: 1, lane: 'aussen', index: idx }\r\n        });\r\n      }\r\n    });\r\n\r\n    // Draw player permanent slots\r\n    drawPermanentSlotsP1(ctx);\r\n\r\n    // Draw instant slots (both players)\r\n    drawInstantSlots(ctx);\r\n\r\n    // Draw interventions strip (player)\r\n    drawInterventionsP1(ctx);\r\n\r\n    // Draw interventions strip (opponent) - nur im Dev Mode\r\n    if (devMode) {\r\n      drawInterventionsP2(ctx);\r\n    }\r\n\r\n    // Draw hand (P1)\r\n    drawHandP1(ctx);\r\n\r\n    // üîß DEV MODE: Draw hand (P2) - nur im Dev Mode\r\n    if (devMode) {\r\n      drawHandP2(ctx);\r\n    }\r\n\r\n    // Draw info panels\r\n    drawInfoPanels(ctx);\r\n\r\n    ctx.restore();\r\n\r\n    // expose zones for debug snapshot\r\n    (window as any).__politicardDebug = {\r\n      uiTransform: getUiTransform(canvas.width, canvas.height),\r\n      canvasSize: { width: canvas.width, height: canvas.height },\r\n      zones: LAYOUT.zones,\r\n      clickZones: clickZonesRef.current.slice(0, 1000)\r\n    };\r\n\r\n    // Run diagnostics after canvas is fully rendered\r\n    runDiagnostics();\r\n  }, [drawLane, drawHandP1, drawHandP2, drawInterventionsP1, drawInterventionsP2, drawPermanentSlotsP1, drawPermanentSlotsP2, drawInstantSlots, drawInfoPanels, devMode, runDiagnostics]);\r\n\r\n  const DRAW_LAYOUT_OVERLAY = false; // force off per new layout system\r\n\r\n  // Load background image if configured\r\n  useEffect(() => {\r\n    if (LAYOUT.background?.enabled && LAYOUT.background?.src) {\r\n      const img = new Image();\r\n      img.onload = () => { backgroundImageRef.current = img; requestAnimationFrame(draw); };\r\n      img.onerror = () => { console.warn('Failed to load background image', LAYOUT.background?.src); };\r\n      img.src = LAYOUT.background.src as string;\r\n    } else {\r\n      // Fallback: ensure first draw without background\r\n      requestAnimationFrame(draw);\r\n    }\r\n  }, [draw]);\r\n\r\n  // Redraw when game state or selection changes\r\n  useEffect(() => {\r\n    requestAnimationFrame(draw);\r\n  }, [gameState, selectedHandIndex, draw]);\r\n\r\n  const handleCardClick = useCallback((data: any) => {\r\n    // Hand-Klick\r\n    if (data.type === 'hand_p1') {\r\n      const uid = data.card?.uid ?? data.card?.id;\r\n      const stateHand = gameState.hands?.[1] || [];\r\n      const idxInState = stateHand.findIndex((c: any) => (c.uid ?? c.id) === uid);\r\n      onCardClick(data);\r\n      return;\r\n    }\r\n\r\n    // Slot-Klick\r\n    if (data.type === 'row_slot') {\r\n      const lane: 'public' | 'government' = data.lane;\r\n      const cap = getLaneCapacity(lane);\r\n\r\n      // Hole aktuelle Row-L√§nge aus gameState\r\n      const rowCards = lane === 'public'\r\n        ? gameState.board?.[1]?.innen ?? []\r\n        : gameState.board?.[1]?.aussen ?? [];\r\n\r\n      if (rowCards.length >= cap) {\r\n        // Optional: UI Feedback\r\n        console.warn(`Row ${lane} is full (${rowCards.length}/${cap})`);\r\n        return;\r\n      }\r\n\r\n      onCardClick(data);\r\n      return;\r\n    }\r\n\r\n    // Andere Klicks (empty_slot, board_card, etc.)\r\n    onCardClick(data);\r\n  }, [gameState, onCardClick]);\r\n\r\n  const handleClick = useCallback((e: React.MouseEvent<HTMLCanvasElement>) => {\r\n    const canvas = canvasRef.current;\r\n    if (!canvas) return;\r\n\r\n    const rect = canvas.getBoundingClientRect();\r\n    const { scale, offsetX, offsetY } = getUiTransform(canvas.width, canvas.height);\r\n    const mx = (e.clientX - rect.left - offsetX) / scale;\r\n    const my = (e.clientY - rect.top - offsetY) / scale;\r\n\r\n    const hit = clickZonesRef.current.find(z => mx >= z.x && mx <= z.x + z.w && my >= z.y && my <= z.y + z.h);\r\n    if (hit) handleCardClick(hit.data);\r\n  }, [handleCardClick]);\r\n\r\n  const handleMouseMove = useCallback((e: React.MouseEvent<HTMLCanvasElement>) => {\r\n    const canvas = canvasRef.current;\r\n    if (!canvas) return;\r\n\r\n    const rect = canvas.getBoundingClientRect();\r\n    const { scale, offsetX, offsetY } = getUiTransform(canvas.width, canvas.height);\r\n    const mx = (e.clientX - rect.left - offsetX) / scale;\r\n    const my = (e.clientY - rect.top - offsetY) / scale;\r\n\r\n    const hit = clickZonesRef.current.find(z => mx >= z.x && mx <= z.x + z.w && my >= z.y && my <= z.y + z.h);\r\n    if (hit) {\r\n      console.log('[hover]', hit.data.type, hit.data.card?.name);\r\n      onCardHover({ ...hit.data, x: e.clientX, y: e.clientY });\r\n    } else {\r\n      onCardHover(null);\r\n    }\r\n  }, [onCardHover]);\r\n\r\n  return (\r\n    <canvas\r\n      ref={canvasRef}\r\n      width={1920}\r\n      height={1080}\r\n      style={{\r\n        display: 'block',\r\n        width: '100%',\r\n        height: '100%',\r\n        imageRendering: 'auto',\r\n      }}\r\n      onClick={handleClick}\r\n      onMouseMove={handleMouseMove}\r\n    />\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}