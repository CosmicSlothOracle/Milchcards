{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\skank\\\\Videos\\\\Cards\\\\Milchcards\\\\src\\\\components\\\\Dice3D.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useImperativeHandle, forwardRef } from 'react';\nimport * as THREE from 'three';\nimport { gsap } from 'gsap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n/**\n * Dice3D â€“ simple WebGL dice rendered with three.js\n * Usage:\n *   const diceRef = useRef<Dice3DHandle>(null);\n *   <Dice3D ref={diceRef} onRoll={(f)=>console.log(f)}/>\n *   diceRef.current?.roll();\n */\nconst Dice3D = /*#__PURE__*/_s(/*#__PURE__*/forwardRef(_c = _s(({\n  size = 180,\n  duration = 1200,\n  onRoll,\n  className,\n  spinOnly = false\n}, ref) => {\n  _s();\n  const canvasRef = useRef(null);\n  const sceneRef = useRef();\n  const cubeRef = useRef();\n  const rendererRef = useRef();\n  const cameraRef = useRef();\n  const animIdRef = useRef(0);\n\n  /** helper to create a texture with pips */\n  const createFaceTexture = face => {\n    const size = 128;\n    const cvs = document.createElement('canvas');\n    cvs.width = cvs.height = size;\n    const ctx = cvs.getContext('2d');\n    ctx.fillStyle = '#fff';\n    ctx.fillRect(0, 0, size, size);\n    ctx.fillStyle = '#111';\n    const dot = (x, y) => {\n      ctx.beginPath();\n      ctx.arc(x, y, size * 0.1, 0, Math.PI * 2);\n      ctx.fill();\n    };\n    const g = size * 0.25;\n    const centers = {\n      1: [[size / 2, size / 2]],\n      2: [[g, g], [size - g, size - g]],\n      3: [[g, g], [size / 2, size / 2], [size - g, size - g]],\n      4: [[g, g], [size - g, g], [g, size - g], [size - g, size - g]],\n      5: [[g, g], [size - g, g], [size / 2, size / 2], [g, size - g], [size - g, size - g]],\n      6: [[g, g], [size - g, g], [g, size / 2], [size - g, size / 2], [g, size - g], [size - g, size - g]]\n    };\n    centers[face].forEach(([x, y]) => dot(x, y));\n    const tex = new THREE.CanvasTexture(cvs);\n    tex.needsUpdate = true;\n    return tex;\n  };\n\n  // initialize three scene\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const scene = new THREE.Scene();\n    scene.background = new THREE.Color(0x000000);\n    const camera = new THREE.PerspectiveCamera(45, 1, 0.1, 1000);\n    camera.position.z = 4;\n    const renderer = new THREE.WebGLRenderer({\n      canvas,\n      antialias: true,\n      alpha: true\n    });\n    renderer.setSize(size, size);\n    renderer.shadowMap.enabled = true;\n    renderer.shadowMap.type = THREE.PCFSoftShadowMap;\n\n    // lights\n    const ambient = new THREE.AmbientLight(0xffffff, 0.6);\n    scene.add(ambient);\n    const dir = new THREE.DirectionalLight(0xffffff, 1.0);\n    dir.position.set(5, 10, 7);\n    dir.castShadow = true;\n    dir.shadow.mapSize.width = 1024;\n    dir.shadow.mapSize.height = 1024;\n    dir.shadow.camera.left = -5;\n    dir.shadow.camera.right = 5;\n    dir.shadow.camera.top = 5;\n    dir.shadow.camera.bottom = -5;\n    scene.add(dir);\n\n    // ground plane to receive shadow\n    const planeGeo = new THREE.PlaneGeometry(10, 10);\n    const planeMat = new THREE.ShadowMaterial({\n      opacity: 0.35\n    });\n    const plane = new THREE.Mesh(planeGeo, planeMat);\n    plane.rotation.x = -Math.PI / 2;\n    plane.position.y = -1.1;\n    plane.receiveShadow = true;\n    scene.add(plane);\n\n    // Create a simple procedural equirectangular-like texture for subtle reflections\n    let generatedEnvMap = null;\n    try {\n      const envCanvas = document.createElement('canvas');\n      envCanvas.width = envCanvas.height = 256;\n      const ectx = envCanvas.getContext('2d');\n      // simple radial gradient\n      const grad = ectx.createRadialGradient(128, 128, 20, 128, 128, 140);\n      grad.addColorStop(0, '#ffffff');\n      grad.addColorStop(0.5, '#ccccff');\n      grad.addColorStop(1, '#556688');\n      ectx.fillStyle = grad;\n      ectx.fillRect(0, 0, 256, 256);\n      const envTex = new THREE.CanvasTexture(envCanvas);\n      envTex.mapping = THREE.EquirectangularReflectionMapping;\n      const pmremGen = new THREE.PMREMGenerator(renderer);\n      pmremGen.compileEquirectangularShader();\n      generatedEnvMap = pmremGen.fromEquirectangular(envTex).texture;\n      scene.environment = generatedEnvMap;\n    } catch (e) {\n      // ignore if PMREM not supported in environment\n      generatedEnvMap = null;\n    }\n\n    // cube\n    const materials = [1, 2, 3, 4, 5, 6].map(f => new THREE.MeshStandardMaterial({\n      map: createFaceTexture(f),\n      metalness: 0.1,\n      roughness: 0.6\n    }));\n    const geometry = new THREE.BoxGeometry(2, 2, 2);\n    const cube = new THREE.Mesh(geometry, materials);\n    cube.castShadow = true;\n    cube.receiveShadow = false;\n    scene.add(cube);\n\n    // If we generated an environment map, apply it to materials for reflections\n    if (generatedEnvMap) {\n      try {\n        materials.forEach(m => {\n          m.envMap = generatedEnvMap;\n          m.envMapIntensity = 0.8;\n          m.needsUpdate = true;\n        });\n      } catch (e) {}\n    }\n    sceneRef.current = scene;\n    cubeRef.current = cube;\n    rendererRef.current = renderer;\n    cameraRef.current = camera;\n\n    // animation loop\n    const animate = () => {\n      animIdRef.current = requestAnimationFrame(animate);\n      // subtle idle rotate\n      if (cube) {\n        cube.rotation.x *= 0.995;\n        cube.rotation.y *= 0.995;\n      }\n      renderer.render(scene, camera);\n    };\n    animate();\n    return () => {\n      cancelAnimationFrame(animIdRef.current);\n      renderer.dispose();\n    };\n  }, [size]);\n\n  // roll logic (includes DOM motion)\n  const rollInternal = targetFace => {\n    if (!cubeRef.current) return;\n    const cube = cubeRef.current;\n    // pick target if not provided\n    const face = targetFace !== null && targetFace !== void 0 ? targetFace : 1 + Math.floor(Math.random() * 6);\n\n    // orientation map: face -> Euler rotation (approx)\n    const orientations = {\n      1: [0, 0, 0],\n      2: [0, Math.PI / 2, 0],\n      3: [-Math.PI / 2, 0, 0],\n      4: [Math.PI / 2, 0, 0],\n      5: [0, -Math.PI / 2, 0],\n      6: [Math.PI, 0, 0]\n    };\n    const [tx, ty, tz] = orientations[face];\n    const start = {\n      x: cube.rotation.x,\n      y: cube.rotation.y,\n      z: cube.rotation.z\n    };\n    const end = {\n      x: tx + 2 * Math.PI,\n      y: ty + 2 * Math.PI,\n      z: tz + 2 * Math.PI\n    };\n\n    // Use GSAP timeline for smooth rotation + bounces and DOM motion\n    const timeline = gsap.timeline({\n      onComplete: () => {\n        cube.rotation.set(tx, ty, tz);\n        if (onRoll) onRoll(face);\n      }\n    });\n    const canvasEl = canvasRef.current;\n    if (spinOnly) {\n      // keep canvas in place; clear transforms\n      if (canvasEl && canvasEl.style) {\n        gsap.set(canvasEl, {\n          x: 0,\n          y: 0,\n          filter: 'blur(0px)'\n        });\n      }\n    } else {\n      // physics-like multi-bounce motion across screen\n      if (canvasEl && canvasEl.style) {\n        canvasEl.style.position = 'fixed';\n        canvasEl.style.left = '0px';\n        canvasEl.style.top = '0px';\n        canvasEl.style.willChange = 'transform, filter';\n\n        // initial velocity and angle\n        const speedBase = Math.max(200, duration * 0.6); // px per second scale\n        const angle = Math.random() * Math.PI * 2;\n        let vx = Math.cos(angle) * (speedBase * (0.6 + Math.random() * 0.8));\n        let vy = Math.sin(angle) * (speedBase * (0.6 + Math.random() * 0.8));\n\n        // start position center-ish\n        let x = Math.random() * (window.innerWidth - size);\n        let y = Math.random() * (window.innerHeight - size);\n        gsap.set(canvasEl, {\n          x,\n          y,\n          filter: 'blur(0px)'\n        });\n\n        // generate bounces until energy low or max 6 bounces\n        const bounces = [];\n        let energy = Math.hypot(vx, vy);\n        const damp = 0.45 + Math.random() * 0.18; // energy retention per bounce\n        const maxBounces = 6;\n        for (let i = 0; i < maxBounces && energy > 80; i++) {\n          // project next position with simple friction\n          const dt = duration / 1000 * (0.25 + Math.random() * 0.35);\n          const nx = x + vx * dt;\n          const ny = y + vy * dt + 200 * (Math.random() - 0.5) * 0.1; // slight gravity variation\n          const dur = Math.max(0.06, dt * (0.6 + Math.random() * 0.6));\n          const blur = Math.min(6, energy / 200);\n          bounces.push({\n            nx,\n            ny,\n            dur,\n            blur\n          });\n\n          // update for next\n          x = nx;\n          y = ny;\n          energy *= damp * (0.8 + Math.random() * 0.4);\n          // random angle change\n          const angChange = (Math.random() - 0.5) * 0.8;\n          const vAngle = Math.atan2(vy, vx) + angChange;\n          const vMag = energy;\n          vx = Math.cos(vAngle) * vMag * 0.02;\n          vy = Math.sin(vAngle) * vMag * 0.02;\n        }\n\n        // schedule bounces in timeline\n        let tOffset = 0;\n        for (const b of bounces) {\n          timeline.to(canvasEl, {\n            duration: b.dur,\n            x: b.nx,\n            y: b.ny,\n            ease: 'power2.out'\n          }, tOffset);\n          timeline.to(canvasEl, {\n            duration: b.dur,\n            filter: `blur(${b.blur}px)`\n          }, tOffset);\n          tOffset += b.dur * 0.9;\n        }\n        // final settle\n        timeline.to(canvasEl, {\n          duration: 0.08,\n          x,\n          y,\n          ease: 'power1.out'\n        }, '>-0.02');\n        timeline.to(canvasEl, {\n          duration: 0.08,\n          filter: 'blur(0px)',\n          ease: 'power1.out'\n        }, '>-0.02');\n      }\n    }\n\n    // rotation: spin multiple revolutions then ease to final orientation\n    // we'll use a GSAP ticker to update cube.rotation\n    const totalSpins = 3 + Math.floor(Math.random() * 4);\n    const rotEnd = {\n      x: end.x,\n      y: end.y,\n      z: end.z\n    };\n    const rotStart = {\n      x: start.x,\n      y: start.y,\n      z: start.z\n    };\n\n    // animate rotation using timeline with an onUpdate that writes to cube\n    let progress = {\n      t: 0\n    };\n    timeline.to(progress, {\n      t: 1,\n      duration: duration / 1000,\n      ease: 'power3.out',\n      onUpdate: () => {\n        const k = progress.t;\n        // combine ease with extra spins\n        const spinFactor = 1 - Math.pow(1 - k, 3);\n        const currentX = rotStart.x + (rotEnd.x - rotStart.x) * k + totalSpins * Math.PI * 2 * (1 - (1 - k));\n        const currentY = rotStart.y + (rotEnd.y - rotStart.y) * k + totalSpins * Math.PI * 2 * (1 - (1 - k));\n        const currentZ = rotStart.z + (rotEnd.z - rotStart.z) * k + totalSpins * Math.PI * 2 * (1 - (1 - k));\n        cube.rotation.set(currentX, currentY, currentZ);\n      }\n    });\n\n    // small multi-bounce sequence on completion (scale + tilt)\n    timeline.to(cube.scale, {\n      x: 1.08,\n      y: 0.90,\n      z: 0.9,\n      duration: 0.07,\n      ease: 'power2.out'\n    }, '>-0.05');\n    timeline.to(cube.scale, {\n      x: 0.95,\n      y: 1.07,\n      z: 0.95,\n      duration: 0.06,\n      ease: 'power2.in'\n    });\n    timeline.to(cube.scale, {\n      x: 1.03,\n      y: 0.98,\n      z: 1.02,\n      duration: 0.05,\n      ease: 'power2.out'\n    });\n    timeline.to(cube.scale, {\n      x: 1,\n      y: 1,\n      z: 1,\n      duration: 0.04,\n      ease: 'power2.out'\n    });\n  };\n  useImperativeHandle(ref, () => ({\n    roll: () => rollInternal(),\n    rollTo: face => rollInternal(Math.max(1, Math.min(6, face)))\n  }), [duration, onRoll]);\n\n  // click to roll\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const handler = () => rollInternal();\n    canvas.addEventListener('click', handler);\n    return () => canvas.removeEventListener('click', handler);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    width: size,\n    height: size,\n    className: className,\n    style: {\n      cursor: 'pointer'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 304,\n    columnNumber: 12\n  }, this);\n}, \"ly5rQgKhkC6yoCpgKv0PQVA/swM=\")), \"ly5rQgKhkC6yoCpgKv0PQVA/swM=\");\n_c2 = Dice3D;\nexport default Dice3D;\nvar _c, _c2;\n$RefreshReg$(_c, \"Dice3D$forwardRef\");\n$RefreshReg$(_c2, \"Dice3D\");","map":{"version":3,"names":["React","useEffect","useRef","useImperativeHandle","forwardRef","THREE","gsap","jsxDEV","_jsxDEV","Dice3D","_s","_c","size","duration","onRoll","className","spinOnly","ref","canvasRef","sceneRef","cubeRef","rendererRef","cameraRef","animIdRef","createFaceTexture","face","cvs","document","createElement","width","height","ctx","getContext","fillStyle","fillRect","dot","x","y","beginPath","arc","Math","PI","fill","g","centers","forEach","tex","CanvasTexture","needsUpdate","canvas","current","scene","Scene","background","Color","camera","PerspectiveCamera","position","z","renderer","WebGLRenderer","antialias","alpha","setSize","shadowMap","enabled","type","PCFSoftShadowMap","ambient","AmbientLight","add","dir","DirectionalLight","set","castShadow","shadow","mapSize","left","right","top","bottom","planeGeo","PlaneGeometry","planeMat","ShadowMaterial","opacity","plane","Mesh","rotation","receiveShadow","generatedEnvMap","envCanvas","ectx","grad","createRadialGradient","addColorStop","envTex","mapping","EquirectangularReflectionMapping","pmremGen","PMREMGenerator","compileEquirectangularShader","fromEquirectangular","texture","environment","e","materials","map","f","MeshStandardMaterial","metalness","roughness","geometry","BoxGeometry","cube","m","envMap","envMapIntensity","animate","requestAnimationFrame","render","cancelAnimationFrame","dispose","rollInternal","targetFace","floor","random","orientations","tx","ty","tz","start","end","timeline","onComplete","canvasEl","style","filter","willChange","speedBase","max","angle","vx","cos","vy","sin","window","innerWidth","innerHeight","bounces","energy","hypot","damp","maxBounces","i","dt","nx","ny","dur","blur","min","push","angChange","vAngle","atan2","vMag","tOffset","b","to","ease","totalSpins","rotEnd","rotStart","progress","t","onUpdate","k","spinFactor","pow","currentX","currentY","currentZ","scale","roll","rollTo","handler","addEventListener","removeEventListener","cursor","fileName","_jsxFileName","lineNumber","columnNumber","_c2","$RefreshReg$"],"sources":["C:/Users/skank/Videos/Cards/Milchcards/src/components/Dice3D.tsx"],"sourcesContent":["import React, { useEffect, useRef, useImperativeHandle, forwardRef } from 'react';\nimport * as THREE from 'three';\nimport { gsap } from 'gsap';\n\nexport interface Dice3DProps {\n  /** pixel size of canvas */\n  size?: number;\n  /** roll animation duration in ms */\n  duration?: number;\n  /** callback when roll ends */\n  onRoll?: (face: number) => void;\n  className?: string;\n  /** if true, only spin in place; if false, do screen bounces */\n  spinOnly?: boolean;\n}\n\nexport interface Dice3DHandle {\n  roll: () => void;\n  rollTo: (face: number) => void;\n}\n\n/**\n * Dice3D â€“ simple WebGL dice rendered with three.js\n * Usage:\n *   const diceRef = useRef<Dice3DHandle>(null);\n *   <Dice3D ref={diceRef} onRoll={(f)=>console.log(f)}/>\n *   diceRef.current?.roll();\n */\nconst Dice3D = forwardRef<Dice3DHandle, Dice3DProps>(\n  ({ size = 180, duration = 1200, onRoll, className, spinOnly = false }: Dice3DProps, ref) => {\n    const canvasRef = useRef<HTMLCanvasElement | null>(null);\n    const sceneRef = useRef<THREE.Scene>();\n    const cubeRef = useRef<THREE.Mesh>();\n    const rendererRef = useRef<THREE.WebGLRenderer>();\n    const cameraRef = useRef<THREE.PerspectiveCamera>();\n    const animIdRef = useRef(0);\n\n    /** helper to create a texture with pips */\n    const createFaceTexture = (face: number): THREE.Texture => {\n      const size = 128;\n      const cvs = document.createElement('canvas');\n      cvs.width = cvs.height = size;\n      const ctx = cvs.getContext('2d')!;\n      ctx.fillStyle = '#fff';\n      ctx.fillRect(0, 0, size, size);\n      ctx.fillStyle = '#111';\n\n      const dot = (x: number, y: number) => {\n        ctx.beginPath();\n        ctx.arc(x, y, size * 0.1, 0, Math.PI * 2);\n        ctx.fill();\n      };\n      const g = size * 0.25;\n      const centers: Record<number, Array<[number, number]>> = {\n        1: [[size / 2, size / 2]],\n        2: [[g, g], [size - g, size - g]],\n        3: [[g, g], [size / 2, size / 2], [size - g, size - g]],\n        4: [[g, g], [size - g, g], [g, size - g], [size - g, size - g]],\n        5: [[g, g], [size - g, g], [size / 2, size / 2], [g, size - g], [size - g, size - g]],\n        6: [[g, g], [size - g, g], [g, size / 2], [size - g, size / 2], [g, size - g], [size - g, size - g]],\n      };\n      centers[face].forEach(([x, y]) => dot(x, y));\n      const tex = new THREE.CanvasTexture(cvs);\n      tex.needsUpdate = true;\n      return tex;\n    };\n\n    // initialize three scene\n    useEffect(() => {\n      const canvas = canvasRef.current;\n      if (!canvas) return;\n      const scene = new THREE.Scene();\n      scene.background = new THREE.Color(0x000000);\n      const camera = new THREE.PerspectiveCamera(45, 1, 0.1, 1000);\n      camera.position.z = 4;\n      const renderer = new THREE.WebGLRenderer({ canvas, antialias: true, alpha: true });\n      renderer.setSize(size, size);\n      renderer.shadowMap.enabled = true;\n      renderer.shadowMap.type = THREE.PCFSoftShadowMap;\n\n      // lights\n      const ambient = new THREE.AmbientLight(0xffffff, 0.6);\n      scene.add(ambient);\n      const dir = new THREE.DirectionalLight(0xffffff, 1.0);\n      dir.position.set(5, 10, 7);\n      dir.castShadow = true;\n      dir.shadow.mapSize.width = 1024;\n      dir.shadow.mapSize.height = 1024;\n      dir.shadow.camera.left = -5;\n      dir.shadow.camera.right = 5;\n      dir.shadow.camera.top = 5;\n      dir.shadow.camera.bottom = -5;\n      scene.add(dir);\n\n      // ground plane to receive shadow\n      const planeGeo = new THREE.PlaneGeometry(10, 10);\n      const planeMat = new THREE.ShadowMaterial({ opacity: 0.35 });\n      const plane = new THREE.Mesh(planeGeo, planeMat);\n      plane.rotation.x = -Math.PI / 2;\n      plane.position.y = -1.1;\n      plane.receiveShadow = true;\n      scene.add(plane);\n\n      // Create a simple procedural equirectangular-like texture for subtle reflections\n      let generatedEnvMap: THREE.Texture | null = null;\n      try {\n        const envCanvas = document.createElement('canvas');\n        envCanvas.width = envCanvas.height = 256;\n        const ectx = envCanvas.getContext('2d')!;\n        // simple radial gradient\n        const grad = ectx.createRadialGradient(128, 128, 20, 128, 128, 140);\n        grad.addColorStop(0, '#ffffff');\n        grad.addColorStop(0.5, '#ccccff');\n        grad.addColorStop(1, '#556688');\n        ectx.fillStyle = grad;\n        ectx.fillRect(0, 0, 256, 256);\n        const envTex = new THREE.CanvasTexture(envCanvas);\n        envTex.mapping = THREE.EquirectangularReflectionMapping;\n        const pmremGen = new THREE.PMREMGenerator(renderer);\n        pmremGen.compileEquirectangularShader();\n        generatedEnvMap = pmremGen.fromEquirectangular(envTex).texture;\n        scene.environment = generatedEnvMap;\n      } catch (e) {\n        // ignore if PMREM not supported in environment\n        generatedEnvMap = null;\n      }\n\n      // cube\n      const materials = [1, 2, 3, 4, 5, 6].map(f => new THREE.MeshStandardMaterial({ map: createFaceTexture(f), metalness: 0.1, roughness: 0.6 }));\n      const geometry = new THREE.BoxGeometry(2, 2, 2);\n      const cube = new THREE.Mesh(geometry, materials);\n      cube.castShadow = true;\n      cube.receiveShadow = false;\n      scene.add(cube);\n\n      // If we generated an environment map, apply it to materials for reflections\n      if (generatedEnvMap) {\n        try {\n          materials.forEach((m: any) => {\n            m.envMap = generatedEnvMap;\n            m.envMapIntensity = 0.8;\n            m.needsUpdate = true;\n          });\n        } catch (e) {}\n      }\n\n      sceneRef.current = scene;\n      cubeRef.current = cube;\n      rendererRef.current = renderer;\n      cameraRef.current = camera;\n\n      // animation loop\n      const animate = () => {\n        animIdRef.current = requestAnimationFrame(animate);\n        // subtle idle rotate\n        if (cube) {\n          cube.rotation.x *= 0.995;\n          cube.rotation.y *= 0.995;\n        }\n        renderer.render(scene, camera);\n      };\n      animate();\n\n      return () => {\n        cancelAnimationFrame(animIdRef.current);\n        renderer.dispose();\n      };\n    }, [size]);\n\n    // roll logic (includes DOM motion)\n    const rollInternal = (targetFace?: number) => {\n      if (!cubeRef.current) return;\n      const cube = cubeRef.current;\n      // pick target if not provided\n      const face = targetFace ?? (1 + Math.floor(Math.random() * 6));\n\n      // orientation map: face -> Euler rotation (approx)\n      const orientations: Record<number, [number, number, number]> = {\n        1: [0, 0, 0],\n        2: [0, Math.PI / 2, 0],\n        3: [-Math.PI / 2, 0, 0],\n        4: [Math.PI / 2, 0, 0],\n        5: [0, -Math.PI / 2, 0],\n        6: [Math.PI, 0, 0],\n      };\n      const [tx, ty, tz] = orientations[face];\n\n      const start = { x: cube.rotation.x, y: cube.rotation.y, z: cube.rotation.z };\n      const end = { x: tx + 2 * Math.PI, y: ty + 2 * Math.PI, z: tz + 2 * Math.PI };\n\n      // Use GSAP timeline for smooth rotation + bounces and DOM motion\n      const timeline = gsap.timeline({ onComplete: () => {\n        cube.rotation.set(tx, ty, tz);\n        if (onRoll) onRoll(face);\n      }});\n\n      const canvasEl = canvasRef.current as HTMLCanvasElement | null;\n      if (spinOnly) {\n        // keep canvas in place; clear transforms\n        if (canvasEl && canvasEl.style) {\n          gsap.set(canvasEl, { x: 0, y: 0, filter: 'blur(0px)' });\n        }\n      } else {\n        // physics-like multi-bounce motion across screen\n        if (canvasEl && canvasEl.style) {\n          canvasEl.style.position = 'fixed';\n          canvasEl.style.left = '0px';\n          canvasEl.style.top = '0px';\n          canvasEl.style.willChange = 'transform, filter';\n\n          // initial velocity and angle\n          const speedBase = Math.max(200, duration * 0.6); // px per second scale\n          const angle = Math.random() * Math.PI * 2;\n          let vx = Math.cos(angle) * (speedBase * (0.6 + Math.random() * 0.8));\n          let vy = Math.sin(angle) * (speedBase * (0.6 + Math.random() * 0.8));\n\n          // start position center-ish\n          let x = Math.random() * (window.innerWidth - size);\n          let y = Math.random() * (window.innerHeight - size);\n          gsap.set(canvasEl, { x, y, filter: 'blur(0px)' });\n\n          // generate bounces until energy low or max 6 bounces\n          const bounces: Array<{ nx: number; ny: number; dur: number; blur: number }> = [];\n          let energy = Math.hypot(vx, vy);\n          const damp = 0.45 + Math.random() * 0.18; // energy retention per bounce\n          const maxBounces = 6;\n          for (let i = 0; i < maxBounces && energy > 80; i++) {\n            // project next position with simple friction\n            const dt = (duration / 1000) * (0.25 + Math.random() * 0.35);\n            const nx = x + vx * dt;\n            const ny = y + vy * dt + 200 * (Math.random() - 0.5) * 0.1; // slight gravity variation\n            const dur = Math.max(0.06, dt * (0.6 + Math.random() * 0.6));\n            const blur = Math.min(6, energy / 200);\n            bounces.push({ nx, ny, dur, blur });\n\n            // update for next\n            x = nx; y = ny;\n            energy *= damp * (0.8 + Math.random() * 0.4);\n            // random angle change\n            const angChange = (Math.random() - 0.5) * 0.8;\n            const vAngle = Math.atan2(vy, vx) + angChange;\n            const vMag = energy;\n            vx = Math.cos(vAngle) * vMag * 0.02;\n            vy = Math.sin(vAngle) * vMag * 0.02;\n          }\n\n          // schedule bounces in timeline\n          let tOffset = 0;\n          for (const b of bounces) {\n            timeline.to(canvasEl, { duration: b.dur, x: b.nx, y: b.ny, ease: 'power2.out' }, tOffset);\n            timeline.to(canvasEl, { duration: b.dur, filter: `blur(${b.blur}px)` }, tOffset);\n            tOffset += b.dur * 0.9;\n          }\n          // final settle\n          timeline.to(canvasEl, { duration: 0.08, x, y, ease: 'power1.out' }, '>-0.02');\n          timeline.to(canvasEl, { duration: 0.08, filter: 'blur(0px)', ease: 'power1.out' }, '>-0.02');\n        }\n      }\n\n      // rotation: spin multiple revolutions then ease to final orientation\n      // we'll use a GSAP ticker to update cube.rotation\n      const totalSpins = 3 + Math.floor(Math.random() * 4);\n      const rotEnd = { x: end.x, y: end.y, z: end.z };\n      const rotStart = { x: start.x, y: start.y, z: start.z };\n\n      // animate rotation using timeline with an onUpdate that writes to cube\n      let progress = { t: 0 };\n      timeline.to(progress, {\n        t: 1,\n        duration: duration / 1000,\n        ease: 'power3.out',\n        onUpdate: () => {\n          const k = progress.t;\n          // combine ease with extra spins\n          const spinFactor = 1 - Math.pow(1 - k, 3);\n          const currentX = rotStart.x + (rotEnd.x - rotStart.x) * k + totalSpins * Math.PI * 2 * (1 - (1 - k));\n          const currentY = rotStart.y + (rotEnd.y - rotStart.y) * k + totalSpins * Math.PI * 2 * (1 - (1 - k));\n          const currentZ = rotStart.z + (rotEnd.z - rotStart.z) * k + totalSpins * Math.PI * 2 * (1 - (1 - k));\n          cube.rotation.set(currentX, currentY, currentZ);\n        }\n      });\n\n      // small multi-bounce sequence on completion (scale + tilt)\n      timeline.to(cube.scale, { x: 1.08, y: 0.90, z: 0.9, duration: 0.07, ease: 'power2.out' }, '>-0.05');\n      timeline.to(cube.scale, { x: 0.95, y: 1.07, z: 0.95, duration: 0.06, ease: 'power2.in' });\n      timeline.to(cube.scale, { x: 1.03, y: 0.98, z: 1.02, duration: 0.05, ease: 'power2.out' });\n      timeline.to(cube.scale, { x: 1, y: 1, z: 1, duration: 0.04, ease: 'power2.out' });\n    };\n\n    useImperativeHandle(ref, () => ({\n      roll: () => rollInternal(),\n      rollTo: (face: number) => rollInternal(Math.max(1, Math.min(6, face))),\n    }), [duration, onRoll]);\n\n    // click to roll\n    useEffect(() => {\n      const canvas = canvasRef.current;\n      if (!canvas) return;\n      const handler = () => rollInternal();\n      canvas.addEventListener('click', handler);\n      return () => canvas.removeEventListener('click', handler);\n    }, []);\n\n    return <canvas ref={canvasRef} width={size} height={size} className={className} style={{ cursor: 'pointer' }} />;\n  });\n\nexport default Dice3D;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}