{"ast":null,"code":"import _objectSpread from\"C:/Users/skank/Videos/Cards/Milchcards/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{useState,useCallback}from'react';import{createDefaultEffectFlags}from'../types/game';import{Pols,Specials,PRESET_DECKS}from'../data/gameData';import{sumRow,shuffle,makePolInstance,makeSpecInstance,buildDeckFromEntries,drawCards,drawCardsAtRoundEnd,tryApplyNegativeEffect,adjustInfluence,findCardLocation,sumGovernmentInfluenceWithAuras,EffectQueueManager,ActiveAbilitiesManager}from'../utils/gameUtils';import{getCardDetails}from'../data/cardDetails';import{useGameActions}from'./useGameActions';import{useGameAI}from'./useGameAI';import{useGameEffects}from'./useGameEffects';import{applyStartOfTurnHooks}from'../utils/startOfTurnHooks';import{emptyBoard}from'../state/board';const initialGameState={round:1,current:1,passed:{1:false,2:false},actionPoints:{1:2,2:2},actionsUsed:{1:0,2:0},decks:{1:[],2:[]},hands:{1:[],2:[]},traps:{1:[],2:[]},board:emptyBoard(),permanentSlots:{1:{government:null,public:null,initiativePermanent:null},2:{government:null,public:null,initiativePermanent:null}},discard:[],log:[],activeRefresh:{1:0,2:0},roundsWon:{1:0,2:0},gameWinner:null,effectFlags:{1:createDefaultEffectFlags(),2:createDefaultEffectFlags()},effectQueue:EffectQueueManager.initializeQueue(),activeAbilities:{1:[],2:[]},pendingAbilitySelect:undefined,aiEnabled:{1:false,2:false}};export function useGameState(){const[gameState,setGameState]=useState(initialGameState);const[selectedHandIndex,setSelectedHandIndex]=useState(null);const log=useCallback(msg=>{const timestamp=new Date().toLocaleTimeString('de-DE',{hour:'2-digit',minute:'2-digit',second:'2-digit'});const logEntry=\"[\".concat(timestamp,\"] \").concat(msg);console.log(logEntry);// Also log to console for debugging\nsetGameState(prev=>_objectSpread(_objectSpread({},prev),{},{log:[...prev.log,logEntry]}));},[]);// Enhanced logging functions for different types of events\nconst logUIInteraction=useCallback((action,details)=>{log(\"\\uD83C\\uDFAF UI: \".concat(action,\" - \").concat(details));},[log]);const logGameStateChange=useCallback((change,details)=>{log(\"\\uD83D\\uDD04 STATE: \".concat(change,\" - \").concat(details));},[log]);const logAIAction=useCallback((action,details)=>{log(\"\\uD83E\\uDD16 KI: \".concat(action,\" - \").concat(details));},[log]);const logCardEffect=useCallback((cardName,effect)=>{log(\"\\u2728 EFFEKT: \".concat(cardName,\" - \").concat(effect));},[log]);const logIntervention=useCallback((interventionName,trigger)=>{log(\"\\uD83D\\uDCA5 INTERVENTION: \".concat(interventionName,\" ausgel\\xF6st durch \").concat(trigger));},[log]);// New detailed logging functions for debugging\nconst logFunctionCall=useCallback((functionName,params,context)=>{const paramStr=typeof params==='object'?JSON.stringify(params,null,2):String(params);log(\"\\uD83D\\uDD27 CALL: \".concat(functionName,\"(\").concat(paramStr,\") - \").concat(context));},[log]);const logDataFlow=useCallback((from,to,data,action)=>{const dataStr=typeof data==='object'?JSON.stringify(data,null,2):String(data);log(\"\\uD83D\\uDCCA FLOW: \".concat(from,\" \\u2192 \").concat(to,\" | \").concat(action,\" | Data: \").concat(dataStr));},[log]);const logConditionCheck=useCallback((condition,result,context)=>{log(\"\\uD83D\\uDD0D CHECK: \".concat(condition,\" = \").concat(result,\" - \").concat(context));},[log]);const logError=useCallback((error,context)=>{log(\"\\u274C ERROR: \".concat(error,\" - \").concat(context));},[log]);const logWarning=useCallback((warning,context)=>{log(\"\\u26A0\\uFE0F WARN: \".concat(warning,\" - \").concat(context));},[log]);// Nach Queue-Aufl√∂sung: Hand-Arrays immutabel neu zuweisen ‚Üí Canvas & UI bekommen die neuen UIDs\nconst afterQueueResolved=useCallback(()=>{setGameState(s=>{var _version;const n=_objectSpread({},s);n.hands={1:[...s.hands[1]],2:[...s.hands[2]]};// optional: version bump f√ºr Canvas\nn._version=((_version=s._version)!==null&&_version!==void 0?_version:0)+1;return n;});},[]);// Import functionality from separated hooks\nconst gameActions=useGameActions(gameState,setGameState,log,afterQueueResolved);const gameAI=useGameAI(gameState,setGameState,log);const gameEffects=useGameEffects(gameState,setGameState,log);const dealStartingHands=useCallback(()=>{console.log('[DIAG] dealStartingHands called');function buildDeck(){const polPool=[...Pols];const specPool=[...Specials];shuffle(polPool);shuffle(specPool);const deck=[];polPool.slice(0,14).forEach(p=>deck.push(makePolInstance(p)));// prefer more useful/implemented specials\nconst implFirst=['media','pledge','pledge2','sanctions','dnc1','dnc2','dnc3','reshuffle','mission','trap_fakenews','trap_protest','trap_scandal'];const srt=specPool.slice().sort((a,b)=>implFirst.indexOf(a.impl)-implFirst.indexOf(b.impl));srt.slice(0,11).forEach(s=>deck.push(makeSpecInstance(s)));return shuffle(deck).slice(0,25);}const deck1=buildDeck();const deck2=buildDeck();console.log('[DIAG] built decks lengths',deck1.length,deck2.length);setGameState(prev=>_objectSpread(_objectSpread({},prev),{},{decks:{1:deck1,2:deck2},hands:{1:deck1.splice(0,5),2:deck2.splice(0,5)}}));console.log('[DIAG] setGameState after deal: hands[1].length',deck1.length>=5?5:deck1.length);},[]);const startNewGame=useCallback(()=>{setGameState(_objectSpread(_objectSpread({},initialGameState),{},{round:1,current:1,passed:{1:false,2:false},actionPoints:{1:2,2:2},actionsUsed:{1:0,2:0},board:emptyBoard(),traps:{1:[],2:[]},permanentSlots:{1:{government:null,public:null,initiativePermanent:null},2:{government:null,public:null,initiativePermanent:null}},// instantSlot wird nicht mehr verwendet - Sofort-Initiativen gehen in board[player].sofort\ndiscard:[],log:[],activeRefresh:{1:0,2:0}}));dealStartingHands();},[dealStartingHands]);const startMatchWithDecks=useCallback((p1DeckEntries,p2DeckEntries)=>{console.log('üîß DEBUG: startMatchWithDecks called - activating AI for player 2');// Automatically enable AI for player 2 when starting with decks\nconsole.log('üîß DEBUG: About to call gameAI.setAiEnabled(true)');gameAI.setAiEnabled(true);console.log('üîß DEBUG: About to call gameAI.setAiPreset(AUTORITAERER_REALIST)');gameAI.setAiPreset('AUTORITAERER_REALIST');console.log('üîß DEBUG: AI setup completed');console.log('[DIAG] startMatchWithDecks - p1DeckEntries',p1DeckEntries.length,'p2DeckEntries',p2DeckEntries.length);console.log('[DIAG] startMatchWithDecks - sample entries:',p1DeckEntries.slice(0,2),p2DeckEntries.slice(0,2));const p1Cards=buildDeckFromEntries(p1DeckEntries);const p2Cards=buildDeckFromEntries(p2DeckEntries);const d1=[...p1Cards];const d2=[...p2Cards];const h1=d1.splice(0,Math.min(5,d1.length));const h2=d2.splice(0,Math.min(5,d2.length));console.log('[DIAG] startMatchWithDecks - p1Cards',p1Cards.length,'p2Cards',p2Cards.length);console.log('[DIAG] startMatchWithDecks - h1',h1.length,'h2',h2.length);console.log('[DIAG] startMatchWithDecks - sample cards:',p1Cards.slice(0,2),p2Cards.slice(0,2));setGameState(_objectSpread(_objectSpread({},initialGameState),{},{round:1,current:1,passed:{1:false,2:false},decks:{1:d1,2:d2},hands:{1:h1,2:h2},board:emptyBoard(),traps:{1:[],2:[]},permanentSlots:{1:{government:null,public:null,initiativePermanent:null},2:{government:null,public:null,initiativePermanent:null}},// instantSlot wird nicht mehr verwendet - Sofort-Initiativen gehen in board[player].sofort\ndiscard:[],log:[\"Match gestartet. P1 und P2 erhalten je \".concat(h1.length,\"/\").concat(h2.length,\" Startkarten.\")],activeRefresh:{1:0,2:0}}));console.log('[DIAG] setGameState called in startMatchWithDecks');},[gameAI]);const startMatchVsAI=useCallback(function(p1DeckEntries){let presetKey=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'AUTORITAERER_REALIST';const p2DeckEntries=PRESET_DECKS[presetKey];gameAI.setAiEnabled(true);gameAI.setAiPreset(presetKey);gameActions.startMatchWithDecks(p1DeckEntries,p2DeckEntries);},[gameAI,gameActions]);// Pr√ºfe ob der Zug automatisch gewechselt werden soll\nconst shouldAdvanceTurn=useCallback((gameState,player)=>{// Wenn Spieler gepasst hat\nif(gameState.passed[player])return true;// Wenn keine AP mehr verf√ºgbar sind\nif(gameState.actionPoints[player]<=0)return true;// Wenn 2 Aktionen verwendet wurden\n// if (gameState.actionsUsed[player] >= 2) return true;\nreturn false;},[]);// Karten-Effekte implementieren\nconst executeCardEffect=useCallback((card,player,state,logFunc)=>{let newState=_objectSpread({},state);logFunctionCall('executeCardEffect',{card:card.name,player,type:card.kind},'Starting card effect execution');if(card.kind==='spec'){const specCard=card;// === SOFORT-INITIATIVEN ===\nif(specCard.name==='Shadow Lobbying'){// Count own board cards with tag Oligarch\nconst boardCards=[...newState.board[player].innen,...newState.board[player].aussen];const oligarchCount=boardCards.filter(c=>{var _details$subcategorie;const details=getCardDetails(c.name);return details===null||details===void 0?void 0:(_details$subcategorie=details.subcategories)===null||_details$subcategorie===void 0?void 0:_details$subcategorie.includes('Oligarch');}).length;const buffAmount=Math.min(oligarchCount,3);if(buffAmount>0){const govCards=newState.board[player].aussen.filter(c=>c.kind==='pol');if(govCards.length){const target=govCards[0];const oldInfl=target.influence;adjustInfluence(target,buffAmount,'Shadow Lobbying');logCardEffect(specCard.name,\"\".concat(target.name,\" erh\\xE4lt +\").concat(buffAmount,\" Einfluss ( \").concat(oldInfl,\" \\u2192 \").concat(target.influence,\" )\"));}else{logWarning('No government cards','Shadow Lobbying buff had no target');}}else{logCardEffect(specCard.name,'Keine Oligarchen ‚Äì kein Einfluss-Buff');}}else if(specCard.name==='Spin Doctor'){const govCards=newState.board[player].aussen.filter(c=>c.kind==='pol');logDataFlow('board analysis','govCards',{count:govCards.length,cards:govCards.map(c=>c.name)},'Finding government cards');if(govCards.length>0){const targetCard=govCards[0];const oldInfluence=targetCard.influence;adjustInfluence(targetCard,2,'Spin Doctor');const newInfluence=targetCard.influence;logCardEffect(specCard.name,\"\".concat(targetCard.name,\" erh\\xE4lt +2 Einfluss (\").concat(oldInfluence,\" \\u2192 \").concat(newInfluence,\")\"));logDataFlow('influence adjustment','targetCard',{card:targetCard.name,old:oldInfluence,new:newInfluence,change:2},'Spin Doctor effect applied');}else{logWarning('No government cards found','Spin Doctor effect has no target');}}else if(specCard.name==='Digitaler Wahlkampf'){logCardEffect(specCard.name,'Ziehe 2 Karten, n√§chste Initiative -1 AP');const{newHands,newDecks}=drawCards(player,2,newState,logFunc);newState=_objectSpread(_objectSpread({},newState),{},{hands:newHands,decks:newDecks});// Simplified AP system: No discounts\nlogDataFlow('effectFlags','newState',{player},'Platform effect applied');}else if(specCard.name==='Partei-Offensive'){const opponent=player===1?2:1;const oppGovCards=newState.board[opponent].aussen.filter(c=>c.kind==='pol'&&!c.deactivated);logDataFlow('opponent analysis','oppGovCards',{opponent,count:oppGovCards.length,cards:oppGovCards.map(c=>c.name)},'Finding active opponent government cards');if(oppGovCards.length>0){const targetCard=oppGovCards[0];targetCard.deactivated=true;logCardEffect(specCard.name,\"\".concat(targetCard.name,\" wird deaktiviert (bis Rundenende)\"));logDataFlow('card deactivation','targetCard',{card:targetCard.name,deactivated:true},'Partei-Offensive effect applied');}else{logWarning('No active opponent government cards found','Partei-Offensive effect has no target');}}else if(specCard.name==='Oppositionsblockade'){const opponent=player===1?2:1;const oppHand=newState.hands[opponent];logDataFlow('opponent hand','analysis',{opponent,handSize:oppHand.length,cards:oppHand.map(c=>c.name)},'Analyzing opponent hand');if(oppHand.length>0){const discardedCard=oppHand[Math.floor(Math.random()*oppHand.length)];const newOppHand=oppHand.filter(c=>c!==discardedCard);newState.hands=_objectSpread(_objectSpread({},newState.hands),{},{[opponent]:newOppHand});logCardEffect(specCard.name,\"Gegner verliert \".concat(discardedCard.name,\" aus der Hand\"));logDataFlow('card discard','opponent hand',{card:discardedCard.name,newHandSize:newOppHand.length},'Oppositionsblockade effect applied');}else{logWarning('Opponent hand is empty','Oppositionsblockade effect has no target');}}else if(specCard.name==='Opportunist'){const opponent=player===1?2:1;const oppBoard=newState.board[opponent];const totalOppInfluence=sumRow([...oppBoard.innen,...oppBoard.aussen]);logDataFlow('opponent board analysis','influence calculation',{opponent,innen:oppBoard.innen.map(c=>({name:c.name,influence:c.kind==='pol'?c.influence:0})),aussen:oppBoard.aussen.map(c=>({name:c.name,influence:c.kind==='pol'?c.influence:0})),totalInfluence:totalOppInfluence},'Calculating opponent total influence');if(totalOppInfluence>10){const{newHands,newDecks}=drawCards(player,1,newState,logFunc);newState=_objectSpread(_objectSpread({},newState),{},{hands:newHands,decks:newDecks});logCardEffect(specCard.name,\"Gegner hat \".concat(totalOppInfluence,\" Einfluss (>10) - ziehe 1 Karte\"));}else{logCardEffect(specCard.name,\"Gegner hat \".concat(totalOppInfluence,\" Einfluss (\\u226410) - kein Effekt\"));}}else if(specCard.name==='Think-tank'){const{newHands,newDecks}=drawCards(player,1,newState,logFunc);newState=_objectSpread(_objectSpread({},newState),{},{hands:newHands,decks:newDecks});logCardEffect(specCard.name,'Ziehe 1 Karte');}else if(specCard.name==='Influencer-Kampagne'){const publicCards=newState.board[player].innen.filter(c=>c.kind==='pol');logDataFlow('public cards analysis','influence boost',{count:publicCards.length,cards:publicCards.map(c=>c.name)},'Finding public cards for influence boost');publicCards.forEach(card=>{const oldInfluence=card.influence;adjustInfluence(card,1,'Influencer-Kampagne');const newInfluence=card.influence;logCardEffect(specCard.name,\"\".concat(card.name,\" erh\\xE4lt +1 Einfluss (\").concat(oldInfluence,\" \\u2192 \").concat(newInfluence,\")\"));});if(publicCards.length===0){logWarning('No public cards found','Influencer-Kampagne effect has no targets');}}else if(specCard.name==='Systemrelevant'){const opponent=player===1?2:1;const oppGovCards=newState.board[opponent].aussen.filter(c=>c.kind==='pol');logDataFlow('opponent government analysis','systemrelevant effect',{count:oppGovCards.length,cards:oppGovCards.map(c=>c.name)},'Finding opponent government cards');if(oppGovCards.length>0){const targetCard=oppGovCards[0];const oldInfluence=targetCard.influence;adjustInfluence(targetCard,-2,'Systemrelevant');const newInfluence=targetCard.influence;logCardEffect(specCard.name,\"\".concat(targetCard.name,\" verliert 2 Einfluss (\").concat(oldInfluence,\" \\u2192 \").concat(newInfluence,\")\"));logDataFlow('influence reduction','targetCard',{card:targetCard.name,old:oldInfluence,new:newInfluence,change:-2},'Systemrelevant effect applied');}else{logWarning('No opponent government cards found','Systemrelevant effect has no target');}}else if(specCard.name==='Symbolpolitik'){const{newHands,newDecks}=drawCards(player,1,newState,logFunc);newState=_objectSpread(_objectSpread({},newState),{},{hands:newHands,decks:newDecks});newState.actionPoints=_objectSpread(_objectSpread({},newState.actionPoints),{},{[player]:Math.min(2,newState.actionPoints[player]+1)});const oldAP=state.actionPoints[player];const newAP=newState.actionPoints[player];logCardEffect(specCard.name,\"Ziehe 1 Karte, erhalte +1 AP (\".concat(oldAP,\" \\u2192 \").concat(newAP,\")\"));logDataFlow('AP gain','player',{player,old:oldAP,new:newAP,change:1},'Symbolpolitik effect applied');}else if(specCard.name==='Alexei Navalny'){logCardEffect(specCard.name,'Ziehe 1 Karte');const{newHands,newDecks}=drawCards(player,1,newState,logFunc);newState=_objectSpread(_objectSpread({},newState),{},{hands:newHands,decks:newDecks});}else if(specCard.name==='Mukesh Ambani'){logCardEffect(specCard.name,'Ziehe 1 Karte');const{newHands,newDecks}=drawCards(player,1,newState,logFunc);newState=_objectSpread(_objectSpread({},newState),{},{hands:newHands,decks:newDecks});}// Oligarch-Effekte\nelse if(['Elon Musk','Bill Gates','George Soros','Warren Buffett','Mukesh Ambani','Jeff Bezos','Alisher Usmanov','Gautam Adani','Jack Ma','Zhang Yiming','Roman Abramovich'].includes(specCard.name)){logCardEffect(specCard.name,'Ziehe 1 Karte (Oligarch-Effekt)');const{newHands,newDecks}=drawCards(player,1,newState,logFunc);newState=_objectSpread(_objectSpread({},newState),{},{hands:newHands,decks:newDecks});}}// === DAUERHAFTE INITIATIVEN ===\nif(card.kind==='spec'&&card.type==='Dauerhaft-Initiative'){const specCard=card;if(specCard.name==='Algorithmischer Diskurs'){logCardEffect(specCard.name,'Dauerhafte Initiative: Alle Medien-Karten geben +1 Einfluss');// This effect will be applied in applyStartOfTurnHooks\n}else if(specCard.name==='Alternative Fakten'){logCardEffect(specCard.name,'Dauerhafte Initiative: Alle Oligarchen geben +1 Einfluss');// This effect will be applied in applyStartOfTurnHooks\n}}// === POLITIKER-KARTEN ===\nelse if(card.kind==='pol'){const polCard=card;logCardEffect(polCard.name,\"Politiker platziert - Basis-Einfluss: \".concat(polCard.influence));}logDataFlow('executeCardEffect','newState',{card:card.name,effectsApplied:true},'Card effect execution completed');return newState;},[logFunctionCall,logCardEffect,logDataFlow,logWarning]);const nextTurn=useCallback(()=>{logFunctionCall('nextTurn',{},'Starting turn change');setGameState(prev=>{var _prev$aiEnabled$,_prev$aiEnabled,_prev$aiEnabled$2,_prev$aiEnabled2,_prev$aiEnabled$3,_prev$aiEnabled3;logDataFlow('UI','nextTurn',{current:prev.current,passed:prev.passed},'Turn change request');// if both passed -> resolve round\nlogConditionCheck('both players passed',prev.passed[1]&&prev.passed[2],'Round end check');if(prev.passed[1]&&prev.passed[2]){logFunctionCall('resolveRound',{round:prev.round},'Both players passed - resolving round');return resolveRound(prev);}const newCurrent=prev.current===1?2:1;logDataFlow('turn change','newCurrent',{old:prev.current,new:newCurrent},'Player switch');// Reset AP for the new current player\nconst newActionPoints=_objectSpread({},prev.actionPoints);newActionPoints[newCurrent]=2;logDataFlow('AP reset','newCurrent',{player:newCurrent,oldAP:prev.actionPoints[newCurrent],newAP:newActionPoints[newCurrent],oldActions:0,newActions:0},'Resource reset for new player');// Apply start-of-turn hooks for the new current player\nconst newState=_objectSpread(_objectSpread({},prev),{},{current:newCurrent,actionPoints:newActionPoints});// Log turn change\nlog(\"Spieler \".concat(newCurrent,\" ist am Zug (2 AP verf\\xFCgbar)\"));logGameStateChange('turn change',\"Player \".concat(newCurrent,\" turn started\"));logFunctionCall('applyStartOfTurnHooks',{player:newCurrent},'Applying start-of-turn effects');applyStartOfTurnHooks(newState,newCurrent,log);// Check if AI should take turn\nlogConditionCheck('AI turn',newCurrent===2&&((_prev$aiEnabled$=(_prev$aiEnabled=prev.aiEnabled)===null||_prev$aiEnabled===void 0?void 0:_prev$aiEnabled[2])!==null&&_prev$aiEnabled$!==void 0?_prev$aiEnabled$:false),'AI turn check');if(newCurrent===2&&((_prev$aiEnabled$2=(_prev$aiEnabled2=prev.aiEnabled)===null||_prev$aiEnabled2===void 0?void 0:_prev$aiEnabled2[2])!==null&&_prev$aiEnabled$2!==void 0?_prev$aiEnabled$2:false)){logFunctionCall('runAITurn',{player:newCurrent},'Triggering AI turn');// Use setTimeout to avoid state update conflicts\nsetTimeout(()=>{logAIAction('AI turn triggered','Starting AI turn execution');gameAI.runAITurn();},100);}logDataFlow('nextTurn','finalState',{current:newState.current,ap:newState.actionPoints[newCurrent],aiEnabled:(_prev$aiEnabled$3=(_prev$aiEnabled3=prev.aiEnabled)===null||_prev$aiEnabled3===void 0?void 0:_prev$aiEnabled3[2])!==null&&_prev$aiEnabled$3!==void 0?_prev$aiEnabled$3:false},'Turn change completed');return newState;});// Nach Zugwechsel ebenfalls spiegeln (z. B. Auto-Draw am EoT)\nafterQueueResolved();},[logFunctionCall,logDataFlow,logConditionCheck,logGameStateChange,gameAI,log,logAIAction,afterQueueResolved]);// Automatischer Zugwechsel basierend auf AP\nconst checkAndAdvanceTurn=useCallback(gameState=>{const currentPlayer=gameState.current;if(shouldAdvanceTurn(gameState,currentPlayer)){// Nur wechseln wenn der andere Spieler nicht auch fertig ist\nconst otherPlayer=currentPlayer===1?2:1;if(!shouldAdvanceTurn(gameState,otherPlayer)||gameState.passed[otherPlayer]){nextTurn();}}},[shouldAdvanceTurn,nextTurn]);const scores=useCallback(state=>{// Einheitliche Berechnung √ºber Utils-Helfer\nconst s1=sumGovernmentInfluenceWithAuras(state,1);const s2=sumGovernmentInfluenceWithAuras(state,2);return[s1,s2];},[]);const resolveRound=useCallback(state=>{const[s1,s2]=scores(state);let winner=1;let note='';if(s1>s2)winner=1;else if(s2>s1)winner=2;else{// Gleichstand -> erster Pass gewinnt\nwinner=state.passed[1]&&!state.passed[2]?1:2;note=' (Gleichstand ‚Äì fr√ºherer Pass)';}log(\"Runde \".concat(state.round,\" endet: P1 \").concat(s1,\" : P2 \").concat(s2,\". Gewinner: P\").concat(winner).concat(note,\".\"));// Rundensieg z√§hlen\nconst newRoundsWon=_objectSpread({},state.roundsWon);newRoundsWon[winner]+=1;// Pr√ºfe Best-of-3 Gewinner\nlet gameWinner=null;if(newRoundsWon[1]>=2){gameWinner=1;log(\"\\uD83C\\uDF89 SPIEL ENDE: Spieler 1 gewinnt das Spiel! (\".concat(newRoundsWon[1],\":\").concat(newRoundsWon[2],\")\"));}else if(newRoundsWon[2]>=2){gameWinner=2;log(\"\\uD83C\\uDF89 SPIEL ENDE: Spieler 2 gewinnt das Spiel! (\".concat(newRoundsWon[2],\":\").concat(newRoundsWon[1],\")\"));}// clear board (no carryover)\nconst newBoard=emptyBoard();const newTraps={1:[],2:[]};// Verbesserte Karten-Nachzieh-Mechanik (ziehe bis Hand voll ist)\nconst{newHands,newDecks}=drawCardsAtRoundEnd(state,log);const newRound=state.round+1;const newPassed={1:false,2:false};// alternate starter each round\nconst newCurrent=newRound%2===1?1:2;// Wenn Spiel zu Ende, stoppe\nif(gameWinner){return _objectSpread(_objectSpread({},state),{},{roundsWon:newRoundsWon,gameWinner});}log(\"Runde \".concat(newRound,\" beginnt. P\").concat(newCurrent,\" startet.\"));// üî• CLUSTER 3: Reset tempor√§re Initiative-Boni am Rundenende\nconst newEffectFlags={1:_objectSpread(_objectSpread({},state.effectFlags[1]),{},{// Reset Cluster 3 Flags\nscienceInitiativeBonus:false,militaryInitiativePenalty:false,healthInitiativeBonus:false,cultureInitiativeBonus:false,// Reset andere rundenbasierte Flags\nmarkZuckerbergUsed:false,opportunistActive:false,publicEffectDoubled:false,cannotPlayInitiatives:false,nextCardProtected:false,platformAfterInitiativeBonus:false,interventionEffectReduced:false}),2:_objectSpread(_objectSpread({},state.effectFlags[2]),{},{// Reset Cluster 3 Flags\nscienceInitiativeBonus:false,militaryInitiativePenalty:false,healthInitiativeBonus:false,cultureInitiativeBonus:false,// Reset andere rundenbasierte Flags\nmarkZuckerbergUsed:false,opportunistActive:false,publicEffectDoubled:false,cannotPlayInitiatives:false,nextCardProtected:false,platformAfterInitiativeBonus:false,interventionEffectReduced:false})};return _objectSpread(_objectSpread({},state),{},{round:newRound,current:newCurrent,passed:newPassed,board:newBoard,traps:newTraps,hands:newHands,decks:newDecks,roundsWon:newRoundsWon,effectFlags:newEffectFlags});},[log,scores]);// Einfache Interventionsauswertung f√ºr einige h√§ufige Trigger\nconst evaluateInterventions=(prev,actingPlayer,event,tentativeBoard)=>{const opponent=actingPlayer===1?2:1;const oppTraps=[...(prev.traps[opponent]||[])];let board=tentativeBoard;let trapsChanged=false;for(let i=0;i<oppTraps.length;i++){const trap=oppTraps[i];if(trap.kind!=='spec')continue;const spec=trap;const details=getCardDetails(spec.name);const key=spec.key;// Trigger: Karte gespielt\nif(event.type==='card_played'&&event.card){const played=event.card;const isMedia=['Oprah Winfrey'].includes(played.name);const isNGO=['Bill Gates','Jennifer Doudna','Noam Chomsky'].includes(played.name);const isPlatform=['Mark Zuckerberg','Tim Cook','Jack Ma','Zhang Yiming'].includes(played.name);const isDiplomat=['Joschka Fischer','Sergey Lavrov','Ursula von der Leyen','Jens Stoltenberg','Hans Dietrich Genscher','Colin Powell','Condoleezza Rice','Christine Lagarde'].includes(played.name);const isTier2Gov=played.T===2&&event.lane==='aussen';const isTier1Gov=played.T===1&&event.lane==='aussen';const isWeakGov=played.influence<=5&&event.lane==='aussen';const isLowPowerGov=played.influence<=4&&event.lane==='aussen';// Cancel Culture / Fake News-Kampagne\nif(((details===null||details===void 0?void 0:details.name)==='Cancel Culture'||key==='Cancel_Culture')&&event.lane==='innen'){tryApplyNegativeEffect(played,()=>{played.deactivated=true;},prev.round);oppTraps.splice(i,1);i--;trapsChanged=true;log(\"Intervention ausgel\\xF6st: Cancel Culture \\u2192 \".concat(played.name,\" deaktiviert.\"));logIntervention('Cancel Culture',\"Ausgel\\xF6st gegen \".concat(played.name,\" in \\xD6ffentlichkeit\"));continue;}if(((details===null||details===void 0?void 0:details.name)==='Fake News-Kampagne'||key==='Fake_News_Kampagne')&&isMedia){tryApplyNegativeEffect(played,()=>{played.deactivated=true;},prev.round);oppTraps.splice(i,1);i--;trapsChanged=true;log(\"Intervention ausgel\\xF6st: Fake News-Kampagne \\u2192 \".concat(played.name,\" deaktiviert.\"));logIntervention('Fake News-Kampagne',\"Ausgel\\xF6st gegen \".concat(played.name,\" (Medien)\"));continue;}// Whistleblower (Tier 2 Regierung)\nif(((details===null||details===void 0?void 0:details.name)==='Whistleblower'||key==='Whistleblower')&&isTier2Gov){tryApplyNegativeEffect(played,()=>{adjustInfluence(played,-2,'Whistleblower');},prev.round);oppTraps.splice(i,1);i--;trapsChanged=true;log(\"Intervention ausgel\\xF6st: Whistleblower \\u2192 \".concat(played.name,\" -2 Einfluss.\"));continue;}// Berater-Aff√§re (Tier 1 Regierung)\nif(((details===null||details===void 0?void 0:details.name)==='Berater-Aff√§re'||key==='Berater_Affaere')&&isTier1Gov){tryApplyNegativeEffect(played,()=>{adjustInfluence(played,-2,'Berater-Aff√§re');},prev.round);oppTraps.splice(i,1);i--;trapsChanged=true;log(\"Intervention ausgel\\xF6st: Berater-Aff\\xE4re \\u2192 \".concat(played.name,\" -2 Einfluss.\"));continue;}// Soft Power-Kollaps / Deepfake-Skandal (Diplomat)\nif(((details===null||details===void 0?void 0:details.name)==='Soft Power-Kollaps'||key==='Soft_Power_Kollaps')&&isDiplomat){tryApplyNegativeEffect(played,()=>{adjustInfluence(played,-3,'Soft Power-Kollaps');},prev.round);oppTraps.splice(i,1);i--;trapsChanged=true;log(\"Intervention ausgel\\xF6st: Soft Power-Kollaps \\u2192 \".concat(played.name,\" -3 Einfluss.\"));continue;}if(((details===null||details===void 0?void 0:details.name)==='Deepfake-Skandal'||key==='Deepfake_Skandal')&&isDiplomat){var _prev$effectFlags;// Kein Einflusstransfer m√∂glich - Flag setzen\nconst newFlags=_objectSpread(_objectSpread({},(_prev$effectFlags=prev.effectFlags)===null||_prev$effectFlags===void 0?void 0:_prev$effectFlags[actingPlayer]),{},{influenceTransferBlocked:true});prev.effectFlags=_objectSpread(_objectSpread({},prev.effectFlags),{},{[actingPlayer]:newFlags});oppTraps.splice(i,1);i--;trapsChanged=true;log(\"Intervention ausgel\\xF6st: Deepfake-Skandal \\u2192 \".concat(played.name,\" kann keinen Einfluss transferieren.\"));continue;}// Lobby Leak / Boykott-Kampagne (NGO/Bewegung)\nif(((details===null||details===void 0?void 0:details.name)==='Lobby Leak'||key==='Lobby_Leak')&&isNGO){const hands=_objectSpread({},prev.hands);if(hands[actingPlayer].length>0){hands[actingPlayer]=hands[actingPlayer].slice(1);prev.hands=hands;}oppTraps.splice(i,1);i--;trapsChanged=true;log(\"Intervention ausgel\\xF6st: Lobby Leak \\u2192 P\".concat(actingPlayer,\" wirft 1 Karte ab.\"));continue;}if(((details===null||details===void 0?void 0:details.name)==='Boykott-Kampagne'||key==='Boykott_Kampagne')&&(isNGO||['Greta Thunberg','Malala Yousafzai','Ai Weiwei','Alexei Navalny'].includes(played.name))){tryApplyNegativeEffect(played,()=>{played.deactivated=true;},prev.round);oppTraps.splice(i,1);i--;trapsChanged=true;log(\"Intervention ausgel\\xF6st: Boykott-Kampagne \\u2192 \".concat(played.name,\" deaktiviert.\"));continue;}// Cyber-Attacke (Plattform)\nif(((details===null||details===void 0?void 0:details.name)==='Cyber-Attacke'||key==='Cyber_Attacke')&&isPlatform){const loc=findCardLocation(played,_objectSpread(_objectSpread({},prev),{},{board}));if(loc){const arr=[...board[loc.player][loc.lane]];const idx=arr.findIndex(c=>c.uid===played.uid);if(idx>=0){arr.splice(idx,1);board=_objectSpread(_objectSpread({},board),{},{[loc.player]:_objectSpread(_objectSpread({},board[loc.player]),{},{[loc.lane]:arr})});}}oppTraps.splice(i,1);i--;trapsChanged=true;log(\"Intervention ausgel\\xF6st: Cyber-Attacke \\u2192 \".concat(played.name,\" zerst\\xF6rt.\"));continue;}// Bestechungsskandal 2.0 (schwache Regierung M‚â§5)\nif(((details===null||details===void 0?void 0:details.name)==='Bestechungsskandal 2.0'||key==='Bestechungsskandal_2_0')&&isWeakGov){// √úbernehme Karte bis Rundenende (vereinfacht: tempor√§r deaktiviert)\ntryApplyNegativeEffect(played,()=>{played.deactivated=true;},prev.round);oppTraps.splice(i,1);i--;trapsChanged=true;log(\"Intervention ausgel\\xF6st: Bestechungsskandal 2.0 \\u2192 \".concat(played.name,\" \\xFCbernommen.\"));continue;}// Tunnelvision (M‚â§4 Regierung)\nif(((details===null||details===void 0?void 0:details.name)==='Tunnelvision'||key==='Tunnelvision')&&isLowPowerGov){// Karte z√§hlt nicht zur Runde (vereinfacht: -100% Einfluss)\ntryApplyNegativeEffect(played,()=>{played.influence=0;},prev.round);oppTraps.splice(i,1);i--;trapsChanged=true;log(\"Intervention ausgel\\xF6st: Tunnelvision \\u2192 \".concat(played.name,\" z\\xE4hlt nicht zur Runde.\"));continue;}}// Trigger: Board-Zustand\nif(event.type==='board_state_check'){var _event$card,_event$card2;const actingPlayerGovCount=tentativeBoard[actingPlayer].aussen.length;const actingPlayerPubCount=tentativeBoard[actingPlayer].innen.length;// Strategische Enth√ºllung (>2 Regierungskarten)\nif(((details===null||details===void 0?void 0:details.name)==='Strategische Enth√ºllung'||key==='Strategische_Enthuellung')&&actingPlayerGovCount>2){// Eine Regierungskarte zur√ºck auf Hand (vereinfacht: entferne erste)\nconst govCards=[...tentativeBoard[actingPlayer].aussen];if(govCards.length>0){govCards.pop();// Entferne letzte\nboard=_objectSpread(_objectSpread({},board),{},{[actingPlayer]:_objectSpread(_objectSpread({},board[actingPlayer]),{},{aussen:govCards})});}oppTraps.splice(i,1);i--;trapsChanged=true;log(\"Intervention ausgel\\xF6st: Strategische Enth\\xFCllung \\u2192 Regierungskarte zur\\xFCck.\");continue;}// Grassroots-Widerstand (>2 √ñffentlichkeitskarten)\nif(((details===null||details===void 0?void 0:details.name)==='Grassroots-Widerstand'||key==='Grassroots_Widerstand')&&actingPlayerPubCount>2){const pubCards=tentativeBoard[actingPlayer].innen.filter(c=>c.kind==='pol');if(pubCards.length>0){tryApplyNegativeEffect(pubCards[0],()=>{pubCards[0].deactivated=true;},prev.round);}oppTraps.splice(i,1);i--;trapsChanged=true;log(\"Intervention ausgel\\xF6st: Grassroots-Widerstand \\u2192 \\xD6ffentlichkeitskarte deaktiviert.\");continue;}// Parlament geschlossen (‚â•2 Regierungskarten)\nif(((details===null||details===void 0?void 0:details.name)==='Parlament geschlossen'||key==='Parlament_geschlossen')&&actingPlayerGovCount>=2){var _prev$effectFlags2;// Blockiere weitere Regierungskarten (Flag f√ºr diesen Zug)\nconst newFlags=_objectSpread(_objectSpread({},(_prev$effectFlags2=prev.effectFlags)===null||_prev$effectFlags2===void 0?void 0:_prev$effectFlags2[actingPlayer]),{},{cannotPlayMoreGovernment:true});prev.effectFlags=_objectSpread(_objectSpread({},prev.effectFlags),{},{[actingPlayer]:newFlags});oppTraps.splice(i,1);i--;trapsChanged=true;log(\"Intervention ausgel\\xF6st: Parlament geschlossen \\u2192 keine weiteren Regierungskarten.\");continue;}// Interne Fraktionsk√§mpfe (gro√üe Initiative 3-4 HP)\nif(((details===null||details===void 0?void 0:details.name)==='Interne Fraktionsk√§mpfe'||key==='Interne_Fraktionskaempfe')&&event.type==='card_played'&&((_event$card=event.card)===null||_event$card===void 0?void 0:_event$card.kind)==='spec'){const specCard=event.card;const isLargeInitiative=specCard.type==='Sofort-Initiative'&&specCard.bp>=3;if(isLargeInitiative){// Initiative annullieren (vereinfacht: Karte zur√ºck auf Hand)\nconst hands=_objectSpread({},prev.hands);hands[actingPlayer].push(event.card);prev.hands=hands;oppTraps.splice(i,1);i--;trapsChanged=true;log(\"Intervention ausgel\\xF6st: Interne Fraktionsk\\xE4mpfe \\u2192 \".concat(event.card.name,\" wird annulliert.\"));continue;}}// Massenproteste (2 Regierungskarten in der Runde)\nif(((details===null||details===void 0?void 0:details.name)==='Massenproteste'||key==='Massenproteste')&&event.type==='card_played'&&event.lane==='aussen'){// Vereinfacht: Beide Regierungskarten -1 Einfluss\nconst govCards=board[actingPlayer].aussen.filter(c=>c.kind==='pol');if(govCards.length>=2){adjustInfluence(govCards[0],-1,'Massenproteste');adjustInfluence(govCards[1],-1,'Massenproteste');oppTraps.splice(i,1);i--;trapsChanged=true;log(\"Intervention ausgel\\xF6st: Massenproteste \\u2192 \".concat(govCards[0].name,\" und \").concat(govCards[1].name,\" -1 Einfluss.\"));continue;}}// \"Unabh√§ngige\" Untersuchung (gegen Intervention)\nif(((details===null||details===void 0?void 0:details.name)==='\"Unabh√§ngige\" Untersuchung'||key==='Unabhaengige_Untersuchung')&&event.type==='card_played'&&((_event$card2=event.card)===null||_event$card2===void 0?void 0:_event$card2.kind)==='spec'){const specCard=event.card;if(specCard.type==='Intervention'){// Intervention annullieren (vereinfacht: Karte zur√ºck auf Hand)\nconst hands=_objectSpread({},prev.hands);hands[actingPlayer].push(event.card);prev.hands=hands;oppTraps.splice(i,1);i--;trapsChanged=true;log(\"Intervention ausgel\\xF6st: \\\"Unabh\\xE4ngige\\\" Untersuchung \\u2192 \".concat(event.card.name,\" wird annulliert.\"));continue;}}// Maulwurf (kopiere schw√§chere Regierungskarte des Gegners)\nif(((details===null||details===void 0?void 0:details.name)==='Maulwurf'||key==='Maulwurf')&&event.type==='card_played'&&event.lane==='aussen'){const oppGovCards=board[opponent].aussen.filter(c=>c.kind==='pol');if(oppGovCards.length>0){// Finde schw√§chste Regierungskarte\nconst weakestCard=oppGovCards.reduce((weakest,current)=>current.influence<weakest.influence?current:weakest);// Kopie erstellen (vereinfacht: gleiche Karte auf eigene Hand)\nconst hands=_objectSpread({},prev.hands);const copyCard=_objectSpread(_objectSpread({},weakestCard),{},{uid:Date.now()+Math.random()});hands[opponent].push(copyCard);prev.hands=hands;oppTraps.splice(i,1);i--;trapsChanged=true;log(\"Intervention ausgel\\xF6st: Maulwurf \\u2192 Kopie von \".concat(weakestCard.name,\" auf Hand.\"));continue;}}// Skandalspirale (Initiative + √ñffentlichkeitskarte)\nif(((details===null||details===void 0?void 0:details.name)==='Skandalspirale'||key==='Skandalspirale')&&event.type==='card_played'){// Vereinfacht: Pr√ºfe ob Initiative und √ñffentlichkeitskarte in dieser Runde gespielt wurden\nconst recentCards=board[actingPlayer].innen.concat(board[actingPlayer].aussen);const hasInitiative=recentCards.some(c=>c.kind==='spec'&&c.type==='Sofort-Initiative');const hasPublic=recentCards.some(c=>c.kind==='spec'&&c.type==='√ñffentlichkeitskarte');if(hasInitiative&&hasPublic){// Eine der beiden Karten annullieren (vereinfacht: letzte √ñffentlichkeitskarte)\nconst pubCards=board[actingPlayer].innen.filter(c=>c.kind==='spec'&&c.type==='√ñffentlichkeitskarte');if(pubCards.length>0){const lastPubCard=pubCards[pubCards.length-1];const arr=[...board[actingPlayer].innen];const idx=arr.findIndex(c=>c.uid===lastPubCard.uid);if(idx>=0){arr.splice(idx,1);board=_objectSpread(_objectSpread({},board),{},{[actingPlayer]:_objectSpread(_objectSpread({},board[actingPlayer]),{},{innen:arr})});}}oppTraps.splice(i,1);i--;trapsChanged=true;log(\"Intervention ausgel\\xF6st: Skandalspirale \\u2192 \\xD6ffentlichkeitskarte annulliert.\");continue;}}// Satire-Show (bei mehr Einfluss als Gegner)\nif((details===null||details===void 0?void 0:details.name)==='Satire-Show'||key==='Satire_Show'){const playerInfluence=sumRow([...board[opponent].aussen]);const opponentInfluence=sumRow([...board[actingPlayer].aussen]);if(opponentInfluence>playerInfluence){const oppGovCards=board[opponent].aussen.filter(c=>c.kind==='pol');if(oppGovCards.length>0){// Erste Regierungskarte -2 Einfluss\nadjustInfluence(oppGovCards[0],-2,'Satire-Show');oppTraps.splice(i,1);i--;trapsChanged=true;log(\"Intervention ausgel\\xF6st: Satire-Show \\u2192 \".concat(oppGovCards[0].name,\" -2 Einfluss.\"));continue;}}}}}if(trapsChanged){const newTraps=_objectSpread(_objectSpread({},prev.traps),{},{[opponent]:oppTraps});return[board,newTraps];}return[null,null];};// Zentrale Effekt-Queue Verarbeitung\nconst processEffectQueue=useCallback(state=>{if(!state.effectQueue||state.effectQueue.items.length===0){return state;}const[newQueue,newState]=EffectQueueManager.processQueue(state.effectQueue,state,log);return _objectSpread(_objectSpread({},newState),{},{effectQueue:newQueue});},[log]);// Berechne Einfluss mit dauerhaften Auren-Effekten\nconst sumRowWithAuras=(state,player)=>{const govCards=state.board[player].aussen.filter(c=>c.kind==='pol');const opponent=player===1?2:1;let total=0;// üîç DEBUG: Log welche Regierungskarten gefunden wurden\nconsole.log(\"\\uD83D\\uDD0D sumRowWithAuras P\".concat(player,\": Gefunden \").concat(govCards.length,\" Regierungskarten:\"),govCards.map(c=>\"\".concat(c.name,\"[\").concat(c.influence,\"I]\")).join(', '));govCards.forEach(card=>{let influence=card.influence;// Dauerhafte Auren anwenden\nconst govSlot=state.permanentSlots[player].government;const pubSlot=state.permanentSlots[player].public;// Koalitionszwang: Tier 2 Regierungskarten +1 Einfluss\nif((govSlot===null||govSlot===void 0?void 0:govSlot.kind)==='spec'&&govSlot.name==='Koalitionszwang'){if(card.T===2)influence+=1;}// Napoleon Komplex: Tier 1 Regierungskarten +1 Einfluss\nif((govSlot===null||govSlot===void 0?void 0:govSlot.kind)==='spec'&&govSlot.name==='Napoleon Komplex'){if(card.T===1)influence+=1;}// Zivilgesellschaft: Bewegung-Karten +1 Einfluss\nif((pubSlot===null||pubSlot===void 0?void 0:pubSlot.kind)==='spec'&&pubSlot.name==='Zivilgesellschaft'){const bewegungNames=['Greta Thunberg','Malala Yousafzai','Ai Weiwei','Alexei Navalny'];const hasBewegung=state.board[player].innen.some(c=>c.kind==='spec'&&c.type==='√ñffentlichkeitskarte'&&bewegungNames.includes(c.name));if(hasBewegung)influence+=1;}// üî• JOSCHKA FISCHER NGO-BOOST: +1 Einfluss wenn NGO auf dem Board liegt\nif(card.name==='Joschka Fischer'&&card.effect==='ngo_boost'){const hasNgoCard=state.board[player].innen.some(c=>c.kind==='spec'&&c.type==='√ñffentlichkeitskarte'&&c.tag==='NGO');if(hasNgoCard){influence+=1;// Log nur beim ersten Mal, um Spam zu vermeiden\nif(!card._ngoBoostLogged){console.log(\"\\uD83D\\uDD25 JOSCHKA FISCHER KONTINUIERLICHER NGO-BOOST: +1 Einfluss\");card._ngoBoostLogged=true;}}else{card._ngoBoostLogged=false;}}// Milchglas Transparenz: +1 Einfluss wenn keine NGO/Bewegung liegt\nif((govSlot===null||govSlot===void 0?void 0:govSlot.kind)==='spec'&&govSlot.name==='Milchglas Transparenz'){const ngoMovementNames=['Jennifer Doudna','Noam Chomsky','Bill Gates','Greta Thunberg','Malala Yousafzai','Ai Weiwei','Alexei Navalny'];const hasNgoMovement=state.board[player].innen.some(c=>c.kind==='spec'&&c.type==='√ñffentlichkeitskarte'&&ngoMovementNames.includes(c.name));if(!hasNgoMovement)influence+=1;}// Alternative Fakten: Gegner-Interventionen -1 Wirkung\nconst oppPubSlot=state.permanentSlots[opponent].public;if((oppPubSlot===null||oppPubSlot===void 0?void 0:oppPubSlot.kind)==='spec'&&oppPubSlot.name==='Alternative Fakten'){// Reduziere Effekt von Interventionen (vereinfacht: -1 Einfluss weniger)\n// Wird in der Intervention-Auswertung ber√ºcksichtigt\n}total+=influence;});// üîç DEBUG: Final influence calculation\nconsole.log(\"\\uD83C\\uDFAF sumRowWithAuras P\".concat(player,\": Gesamt-Einfluss = \").concat(total));return total;};// playCard is now handled by useGameActions hook\n// runAITurn is now handled by useGameAI hook - removed duplicate implementation\nconst applyStartOfTurnHooksLegacy=useCallback((player,state)=>{logFunctionCall('applyStartOfTurnHooksLegacy',{player,round:state.round},'Starting legacy turn hooks');const pool=[...state.board[player].innen,...state.board[player].aussen];pool.forEach(c=>{if(c.kind==='pol'){const polCard=c;if(polCard._pledgeDown&&polCard._pledgeDown.round===state.round){const oldInfluence=polCard.influence;adjustInfluence(polCard,polCard._pledgeDown.amount,'Wahlversprechen');const newInfluence=polCard.influence;log(\"Wahlversprechen Abzug auf \".concat(polCard.name,\": \").concat(oldInfluence,\" \\u2192 \").concat(newInfluence));polCard._pledgeDown=null;}// reset once-per-round flags\npolCard._hypedRoundFlag=false;}});// Apply permanent initiative effects\nconst govSlot=state.permanentSlots[player].government;const pubSlot=state.permanentSlots[player].public;if(govSlot&&govSlot.kind==='spec'){const govInitiative=govSlot;logFunctionCall('applyPermanentInitiative',{slot:'government',initiative:govInitiative.name},'Processing government permanent initiative');if(govInitiative.name==='Alternative Fakten'){// Alle Oligarchen geben +1 Einfluss\nconst oligarchCards=pool.filter(c=>c.kind==='pol'&&['Elon Musk','Bill Gates','George Soros','Warren Buffett','Mukesh Ambani','Jeff Bezos','Alisher Usmanov','Gautam Adani','Jack Ma','Zhang Yiming','Roman Abramovich'].includes(c.name));logDataFlow('board analysis','oligarch cards',{count:oligarchCards.length,cards:oligarchCards.map(c=>({name:c.name,influence:c.kind==='pol'?c.influence:0}))},'Finding oligarch cards for Alternative Fakten effect');let totalInfluenceGained=0;oligarchCards.forEach(card=>{const oldInfluence=card.influence;adjustInfluence(card,1,'Alternative Fakten');const newInfluence=card.influence;totalInfluenceGained+=1;logCardEffect('Alternative Fakten',\"\".concat(card.name,\" erh\\xE4lt +1 Einfluss (\").concat(oldInfluence,\" \\u2192 \").concat(newInfluence,\")\"));});if(oligarchCards.length>0){logCardEffect('Alternative Fakten',\"\".concat(oligarchCards.length,\" Oligarchen gefunden - \").concat(totalInfluenceGained,\" Punkte zum Gesamteinfluss hinzugef\\xFCgt\"));}else{logWarning('No oligarch cards found','Alternative Fakten effect has no targets');}}}if(pubSlot&&pubSlot.kind==='spec'){const pubInitiative=pubSlot;logFunctionCall('applyPermanentInitiative',{slot:'public',initiative:pubInitiative.name},'Processing public permanent initiative');if(pubInitiative.name==='Algorithmischer Diskurs'){// Alle Medien-Karten geben +1 Einfluss\nconst mediaCards=pool.filter(c=>c.kind==='pol'&&['Oprah Winfrey','Mark Zuckerberg','Tim Cook','Sam Altman'].includes(c.name));logDataFlow('board analysis','media cards',{count:mediaCards.length,cards:mediaCards.map(c=>({name:c.name,influence:c.kind==='pol'?c.influence:0}))},'Finding media cards for Algorithmischer Diskurs effect');let totalInfluenceGained=0;mediaCards.forEach(card=>{const oldInfluence=card.influence;adjustInfluence(card,1,'Algorithmischer Diskurs');const newInfluence=card.influence;totalInfluenceGained+=1;logCardEffect('Algorithmischer Diskurs',\"\".concat(card.name,\" erh\\xE4lt +1 Einfluss (\").concat(oldInfluence,\" \\u2192 \").concat(newInfluence,\")\"));});if(mediaCards.length>0){logCardEffect('Algorithmischer Diskurs',\"\".concat(mediaCards.length,\" Medien-Karten gefunden - \").concat(totalInfluenceGained,\" Punkte zum Gesamteinfluss hinzugef\\xFCgt\"));}else{logWarning('No media cards found','Algorithmischer Diskurs effect has no targets');}}}// Legacy flags reset is replaced by the new applyStartOfTurnHooks implementation\nlogFunctionCall('applyStartOfTurnHooksLegacy',{player},'Legacy turn hooks completed');},[logFunctionCall,logDataFlow,logCardEffect,logWarning]);// Helper: Leadership vorhanden?\nconst hasLeadershipCard=(player,state)=>{const gov=state.board[player].aussen;const names=['Justin Trudeau'];return gov.some(c=>c.kind==='pol'&&names.includes(c.name)&&!c.deactivated);};// Helper: Bewegung vorhanden? (√ñffentlichkeitsreihe)\nconst hasMovementCard=(player,state)=>{const pub=state.board[player].innen;const names=['Greta Thunberg','Malala Yousafzai','Ai Weiwei','Alexei Navalny'];return pub.some(c=>c.kind==='pol'&&names.includes(c.name)&&!c.deactivated);};// Helper: Plattform vorhanden? (√ñffentlichkeitsreihe)\nconst hasPlatformCard=(player,state)=>{const pub=state.board[player].innen;const names=['Mark Zuckerberg','Tim Cook','Jack Ma','Zhang Yiming'];return pub.some(c=>c.kind==='pol'&&names.includes(c.name)&&!c.deactivated);};// Helper: Diplomat vorhanden? (Regierungsreihe)\nconst hasDiplomatCard=(player,state)=>{const gov=state.board[player].aussen;const names=['Joschka Fischer','Sergey Lavrov','Ursula von der Leyen','Jens Stoltenberg','Horst K√∂hler','Walter Scheel','Hans Dietrich Genscher','Colin Powell','Condoleezza Rice','Christine Lagarde'];return gov.some(c=>c.kind==='pol'&&names.includes(c.name)&&!c.deactivated);};// Helper: Einfluss-Transfer durch Dauerhaft-Initiativen blockiert? (Koalitionszwang, Napoleon Komplex)\nconst hasInfluenceTransferBlock=(player,state)=>{const govSlot=state.permanentSlots[player].government;if(!govSlot||govSlot.kind!=='spec')return false;const spec=govSlot;return['Koalitionszwang','Napoleon Komplex'].includes(spec.name);};// Helper: Kann Spieler mehrere Interventionen spielen? (Putin-F√§higkeit)\nconst canPlayMultipleInterventions=(player,state)=>{const govCards=state.board[player].aussen.filter(c=>c.kind==='pol');return govCards.some(c=>c.name==='Vladimir Putin'&&!c.deactivated);};const selectHandCard=useCallback(index=>{setSelectedHandIndex(index);},[]);const passTurn=useCallback(player=>{setGameState(prev=>{if(prev.current!==player)return prev;const newState=_objectSpread(_objectSpread({},prev),{},{passed:_objectSpread(_objectSpread({},prev.passed),{},{[player]:true})});log(\"Spieler \".concat(player,\" passt.\"));// If both players have passed, resolve the round\nif(newState.passed[1]&&newState.passed[2]){return resolveRound(newState);}return newState;});},[log,resolveRound]);// Diplomat-Einfluss-Transfer Funktion\nconst transferInfluence=useCallback((player,fromCardUid,toCardUid,amount)=>{setGameState(prev=>{var _prev$effectFlags3;if(prev.current!==player)return prev;const flags=(_prev$effectFlags3=prev.effectFlags)===null||_prev$effectFlags3===void 0?void 0:_prev$effectFlags3[player];if(!flags||flags.diplomatInfluenceTransferUsed||flags.influenceTransferBlocked)return prev;if(!hasDiplomatCard(player,prev))return prev;// Finde beide Karten in der Regierungsreihe\nconst govCards=prev.board[player].aussen;const fromCard=govCards.find(c=>c.uid===fromCardUid&&c.kind==='pol');const toCard=govCards.find(c=>c.uid===toCardUid&&c.kind==='pol');if(!fromCard||!toCard||fromCard.influence<amount)return prev;// Transfer durchf√ºhren\nadjustInfluence(fromCard,-amount,'Diplomat-Transfer');adjustInfluence(toCard,amount,'Diplomat-Transfer');// Flag setzen\nconst newFlags=_objectSpread(_objectSpread({},flags),{},{diplomatInfluenceTransferUsed:true});const newEffectFlags=_objectSpread(_objectSpread({},prev.effectFlags),{},{[player]:newFlags});log(\"P\".concat(player,\" transferiert \").concat(amount,\" Einfluss von \").concat(fromCard.name,\" zu \").concat(toCard.name,\" (Diplomat).\"));return _objectSpread(_objectSpread({},prev),{},{effectFlags:newEffectFlags});});},[log]);// Active Abilities Management\nconst getActiveAbilities=useCallback(player=>{return ActiveAbilitiesManager.getAvailableAbilities(player,gameState);},[]);const useActiveAbility=useCallback((abilityId,targetCardUid)=>{setGameState(prev=>{const player=prev.current;const abilities=ActiveAbilitiesManager.getAvailableAbilities(player,prev);const ability=abilities.find(a=>a.id===abilityId);if(!ability||!ActiveAbilitiesManager.canUseAbility(ability,player,prev)){return prev;}// Finde Actor Card\nconst allCards=[...prev.board[player].innen,...prev.board[player].aussen].filter(c=>c.kind==='pol');const actorCard=allCards.find(c=>ability.id.includes(c.uid.toString()));if(!actorCard)return prev;// Finde Target Card wenn n√∂tig\nlet targetCard;if(targetCardUid){const allTargets=[...prev.board[1].innen,...prev.board[1].aussen,...prev.board[2].innen,...prev.board[2].aussen].filter(c=>c.kind==='pol');targetCard=allTargets.find(c=>c.uid===targetCardUid);}const select={type:ability.type,actorCard,actorPlayer:player,targetCard};const newState=ActiveAbilitiesManager.executeAbility(ability,select,prev);log(\"\".concat(actorCard.name,\" nutzt \").concat(ability.name).concat(targetCard?\" auf \".concat(targetCard.name):'',\".\"));return newState;});},[gameState,log]);// Reset aktive F√§higkeiten zu Rundenbeginn\nconst resetActiveAbilities=useCallback(state=>{const newState=_objectSpread({},state);// Reset _activeUsed f√ºr alle Politikerkarten\n[1,2].forEach(player=>{const allCards=[...newState.board[player].innen,...newState.board[player].aussen].filter(c=>c.kind==='pol');allCards.forEach(card=>{card._activeUsed=false;});});return newState;},[]);// Putin Doppelte Interventionen\nconst executePutinDoubleIntervention=useCallback(interventionCardIds=>{setGameState(prev=>{const player=prev.current;const newState=ActiveAbilitiesManager.executePutinDoubleIntervention(prev,player,interventionCardIds,log);return newState;});},[log]);// Check ob Putin Doppel-Intervention verf√ºgbar ist\nconst canUsePutinDoubleIntervention=useCallback(player=>{const board=gameState.board[player];const allCards=[...board.innen,...board.aussen].filter(c=>c.kind==='pol');const putin=allCards.find(c=>c.name==='Vladimir Putin');if(!putin||putin.deactivated||putin._activeUsed)return false;const interventions=gameState.hands[player].filter(c=>c.kind==='spec');return interventions.length>=2;},[gameState]);// Manual turn advancement for testing\nconst manualAdvanceTurn=useCallback(()=>{console.log('üîß DEBUG: Manual turn advancement triggered');log('üîß DEBUG: Manual turn advancement triggered');nextTurn();},[nextTurn,log]);return{gameState,selectedHandIndex,log,startNewGame,selectHandCard:setSelectedHandIndex,scores,manualAdvanceTurn,// Manual turn advancement for testing\n// Core game state functions\ndealStartingHands,resolveRound,nextTurn:gameActions.nextTurn,endTurn:gameActions.endTurn,checkAndAdvanceTurn,shouldAdvanceTurn,// Helper functions kept for compatibility\nhasLeadershipCard,hasMovementCard,hasPlatformCard,hasDiplomatCard,hasInfluenceTransferBlock,canPlayMultipleInterventions,sumRowWithAuras,applyStartOfTurnHooksLegacy,// Functions that were migrated to separate hooks\npassTurn:gameActions.passTurn,transferInfluence,getActiveAbilities,useActiveAbility,resetActiveAbilities,executePutinDoubleIntervention,canUsePutinDoubleIntervention,// Delegate primary functionality to separated hooks\nstartMatchWithDecks:gameActions.startMatchWithDecks,startMatchVsAI:gameActions.startMatchVsAI,playCard:gameActions.playCard,activateInstantInitiative:gameActions.activateInstantInitiative,// AI functionality\nrunAITurn:gameAI.runAITurn,aiEnabled:gameAI.aiEnabled,setAiEnabled:gameAI.setAiEnabled,aiPreset:gameAI.aiPreset,setAiPreset:gameAI.setAiPreset,// Effects functionality\nexecuteCardEffect,processEffectQueue,afterQueueResolved};}","map":{"version":3,"names":["useState","useCallback","createDefaultEffectFlags","Pols","Specials","PRESET_DECKS","sumRow","shuffle","makePolInstance","makeSpecInstance","buildDeckFromEntries","drawCards","drawCardsAtRoundEnd","tryApplyNegativeEffect","adjustInfluence","findCardLocation","sumGovernmentInfluenceWithAuras","EffectQueueManager","ActiveAbilitiesManager","getCardDetails","useGameActions","useGameAI","useGameEffects","applyStartOfTurnHooks","emptyBoard","initialGameState","round","current","passed","actionPoints","actionsUsed","decks","hands","traps","board","permanentSlots","government","public","initiativePermanent","discard","log","activeRefresh","roundsWon","gameWinner","effectFlags","effectQueue","initializeQueue","activeAbilities","pendingAbilitySelect","undefined","aiEnabled","useGameState","gameState","setGameState","selectedHandIndex","setSelectedHandIndex","msg","timestamp","Date","toLocaleTimeString","hour","minute","second","logEntry","concat","console","prev","_objectSpread","logUIInteraction","action","details","logGameStateChange","change","logAIAction","logCardEffect","cardName","effect","logIntervention","interventionName","trigger","logFunctionCall","functionName","params","context","paramStr","JSON","stringify","String","logDataFlow","from","to","data","dataStr","logConditionCheck","condition","result","logError","error","logWarning","warning","afterQueueResolved","s","_version","n","gameActions","gameAI","gameEffects","dealStartingHands","buildDeck","polPool","specPool","deck","slice","forEach","p","push","implFirst","srt","sort","a","b","indexOf","impl","deck1","deck2","length","splice","startNewGame","startMatchWithDecks","p1DeckEntries","p2DeckEntries","setAiEnabled","setAiPreset","p1Cards","p2Cards","d1","d2","h1","Math","min","h2","startMatchVsAI","presetKey","arguments","shouldAdvanceTurn","player","executeCardEffect","card","state","logFunc","newState","name","type","kind","specCard","boardCards","innen","aussen","oligarchCount","filter","c","_details$subcategorie","subcategories","includes","buffAmount","govCards","target","oldInfl","influence","count","cards","map","targetCard","oldInfluence","newInfluence","old","new","newHands","newDecks","opponent","oppGovCards","deactivated","oppHand","handSize","discardedCard","floor","random","newOppHand","newHandSize","oppBoard","totalOppInfluence","totalInfluence","publicCards","oldAP","newAP","polCard","effectsApplied","nextTurn","_prev$aiEnabled$","_prev$aiEnabled","_prev$aiEnabled$2","_prev$aiEnabled2","_prev$aiEnabled$3","_prev$aiEnabled3","resolveRound","newCurrent","newActionPoints","oldActions","newActions","setTimeout","runAITurn","ap","checkAndAdvanceTurn","currentPlayer","otherPlayer","scores","s1","s2","winner","note","newRoundsWon","newBoard","newTraps","newRound","newPassed","newEffectFlags","scienceInitiativeBonus","militaryInitiativePenalty","healthInitiativeBonus","cultureInitiativeBonus","markZuckerbergUsed","opportunistActive","publicEffectDoubled","cannotPlayInitiatives","nextCardProtected","platformAfterInitiativeBonus","interventionEffectReduced","evaluateInterventions","actingPlayer","event","tentativeBoard","oppTraps","trapsChanged","i","trap","spec","key","played","isMedia","isNGO","isPlatform","isDiplomat","isTier2Gov","T","lane","isTier1Gov","isWeakGov","isLowPowerGov","_prev$effectFlags","newFlags","influenceTransferBlocked","loc","arr","idx","findIndex","uid","_event$card","_event$card2","actingPlayerGovCount","actingPlayerPubCount","pop","pubCards","_prev$effectFlags2","cannotPlayMoreGovernment","isLargeInitiative","bp","weakestCard","reduce","weakest","copyCard","now","recentCards","hasInitiative","some","hasPublic","lastPubCard","playerInfluence","opponentInfluence","processEffectQueue","items","newQueue","processQueue","sumRowWithAuras","total","join","govSlot","pubSlot","bewegungNames","hasBewegung","hasNgoCard","tag","_ngoBoostLogged","ngoMovementNames","hasNgoMovement","oppPubSlot","applyStartOfTurnHooksLegacy","pool","_pledgeDown","amount","_hypedRoundFlag","govInitiative","slot","initiative","oligarchCards","totalInfluenceGained","pubInitiative","mediaCards","hasLeadershipCard","gov","names","hasMovementCard","pub","hasPlatformCard","hasDiplomatCard","hasInfluenceTransferBlock","canPlayMultipleInterventions","selectHandCard","index","passTurn","transferInfluence","fromCardUid","toCardUid","_prev$effectFlags3","flags","diplomatInfluenceTransferUsed","fromCard","find","toCard","getActiveAbilities","getAvailableAbilities","useActiveAbility","abilityId","targetCardUid","abilities","ability","id","canUseAbility","allCards","actorCard","toString","allTargets","select","actorPlayer","executeAbility","resetActiveAbilities","_activeUsed","executePutinDoubleIntervention","interventionCardIds","canUsePutinDoubleIntervention","putin","interventions","manualAdvanceTurn","endTurn","playCard","activateInstantInitiative","aiPreset"],"sources":["C:/Users/skank/Videos/Cards/Milchcards/src/hooks/useGameState.ts"],"sourcesContent":["import { useState, useCallback } from 'react';\r\nimport { GameState, Card, PoliticianCard, SpecialCard, Player, BuilderEntry, createDefaultEffectFlags } from '../types/game';\r\nimport { Pols, Specials, PRESET_DECKS } from '../data/gameData';\r\nimport {\r\n  sumRow,\r\n  shuffle,\r\n  makePolInstance,\r\n  makeSpecInstance,\r\n  buildDeckFromEntries,\r\n  drawCards,\r\n  drawCardsAtRoundEnd,\r\n  tryApplyNegativeEffect,\r\n  adjustInfluence,\r\n  findCardLocation,\r\n  sumGovernmentInfluenceWithAuras,\r\n  EffectQueueManager,\r\n  ActiveAbilitiesManager\r\n} from '../utils/gameUtils';\r\nimport { getCardDetails } from '../data/cardDetails';\r\nimport { useGameActions } from './useGameActions';\r\nimport { useGameAI } from './useGameAI';\r\nimport { useGameEffects } from './useGameEffects';\r\nimport { applyStartOfTurnHooks } from '../utils/startOfTurnHooks';\r\nimport { emptyBoard, emptyBoardSide, ensureSofortBoard } from '../state/board';\r\n\r\nconst initialGameState: GameState = {\r\n  round: 1,\r\n  current: 1,\r\n  passed: { 1: false, 2: false },\r\n  actionPoints: { 1: 2, 2: 2 },\r\n  actionsUsed: { 1: 0, 2: 0 },\r\n  decks: { 1: [], 2: [] },\r\n  hands: { 1: [], 2: [] },\r\n  traps: { 1: [], 2: [] },\r\n  board: emptyBoard(),\r\n  permanentSlots: {\r\n    1: { government: null, public: null, initiativePermanent: null },\r\n    2: { government: null, public: null, initiativePermanent: null },\r\n  },\r\n  discard: [],\r\n  log: [],\r\n  activeRefresh: { 1: 0, 2: 0 },\r\n  roundsWon: { 1: 0, 2: 0 },\r\n  gameWinner: null,\r\n  effectFlags: {\r\n    1: createDefaultEffectFlags(),\r\n    2: createDefaultEffectFlags()\r\n  },\r\n  effectQueue: EffectQueueManager.initializeQueue(),\r\n  activeAbilities: {\r\n    1: [],\r\n    2: []\r\n  },\r\n  pendingAbilitySelect: undefined,\r\n  aiEnabled: { 1: false, 2: false },\r\n};\r\n\r\nexport function useGameState() {\r\n  const [gameState, setGameState] = useState<GameState>(initialGameState);\r\n  const [selectedHandIndex, setSelectedHandIndex] = useState<number | null>(null);\r\n\r\n  const log = useCallback((msg: string) => {\r\n    const timestamp = new Date().toLocaleTimeString('de-DE', {\r\n      hour: '2-digit',\r\n      minute: '2-digit',\r\n      second: '2-digit'\r\n    });\r\n    const logEntry = `[${timestamp}] ${msg}`;\r\n\r\n    console.log(logEntry); // Also log to console for debugging\r\n\r\n    setGameState(prev => ({\r\n      ...prev,\r\n      log: [...prev.log, logEntry]\r\n    }));\r\n  }, []);\r\n\r\n  // Enhanced logging functions for different types of events\r\n  const logUIInteraction = useCallback((action: string, details: string) => {\r\n    log(`üéØ UI: ${action} - ${details}`);\r\n  }, [log]);\r\n\r\n  const logGameStateChange = useCallback((change: string, details: string) => {\r\n    log(`üîÑ STATE: ${change} - ${details}`);\r\n  }, [log]);\r\n\r\n  const logAIAction = useCallback((action: string, details: string) => {\r\n    log(`ü§ñ KI: ${action} - ${details}`);\r\n  }, [log]);\r\n\r\n  const logCardEffect = useCallback((cardName: string, effect: string) => {\r\n    log(`‚ú® EFFEKT: ${cardName} - ${effect}`);\r\n  }, [log]);\r\n\r\n  const logIntervention = useCallback((interventionName: string, trigger: string) => {\r\n    log(`üí• INTERVENTION: ${interventionName} ausgel√∂st durch ${trigger}`);\r\n  }, [log]);\r\n\r\n  // New detailed logging functions for debugging\r\n  const logFunctionCall = useCallback((functionName: string, params: any, context: string) => {\r\n    const paramStr = typeof params === 'object' ? JSON.stringify(params, null, 2) : String(params);\r\n    log(`üîß CALL: ${functionName}(${paramStr}) - ${context}`);\r\n  }, [log]);\r\n\r\n  const logDataFlow = useCallback((from: string, to: string, data: any, action: string) => {\r\n    const dataStr = typeof data === 'object' ? JSON.stringify(data, null, 2) : String(data);\r\n    log(`üìä FLOW: ${from} ‚Üí ${to} | ${action} | Data: ${dataStr}`);\r\n  }, [log]);\r\n\r\n  const logConditionCheck = useCallback((condition: string, result: boolean, context: string) => {\r\n    log(`üîç CHECK: ${condition} = ${result} - ${context}`);\r\n  }, [log]);\r\n\r\n  const logError = useCallback((error: string, context: string) => {\r\n    log(`‚ùå ERROR: ${error} - ${context}`);\r\n  }, [log]);\r\n\r\n  const logWarning = useCallback((warning: string, context: string) => {\r\n    log(`‚ö†Ô∏è WARN: ${warning} - ${context}`);\r\n  }, [log]);\r\n\r\n  // Nach Queue-Aufl√∂sung: Hand-Arrays immutabel neu zuweisen ‚Üí Canvas & UI bekommen die neuen UIDs\r\n  const afterQueueResolved = useCallback(() => {\r\n    setGameState(s => {\r\n      const n = { ...s };\r\n      n.hands = {\r\n        1: [...s.hands[1]],\r\n        2: [...s.hands[2]],\r\n      } as any;\r\n      // optional: version bump f√ºr Canvas\r\n      (n as any)._version = ((s as any)._version ?? 0) + 1;\r\n      return n;\r\n    });\r\n  }, []);\r\n\r\n  // Import functionality from separated hooks\r\n  const gameActions = useGameActions(gameState, setGameState, log, afterQueueResolved);\r\n  const gameAI = useGameAI(gameState, setGameState, log);\r\n  const gameEffects = useGameEffects(gameState, setGameState, log);\r\n\r\n  const dealStartingHands = useCallback(() => {\r\n    console.log('[DIAG] dealStartingHands called');\r\n    function buildDeck(): Card[] {\r\n      const polPool = [...Pols];\r\n      const specPool = [...Specials];\r\n      shuffle(polPool);\r\n      shuffle(specPool);\r\n      const deck: Card[] = [];\r\n      polPool.slice(0, 14).forEach(p => deck.push(makePolInstance(p)));\r\n\r\n      // prefer more useful/implemented specials\r\n      const implFirst = ['media', 'pledge', 'pledge2', 'sanctions', 'dnc1', 'dnc2', 'dnc3', 'reshuffle', 'mission', 'trap_fakenews', 'trap_protest', 'trap_scandal'];\r\n      const srt = specPool.slice().sort((a, b) => implFirst.indexOf(a.impl) - implFirst.indexOf(b.impl));\r\n      srt.slice(0, 11).forEach(s => deck.push(makeSpecInstance(s)));\r\n      return shuffle(deck).slice(0, 25);\r\n    }\r\n\r\n    const deck1 = buildDeck();\r\n    const deck2 = buildDeck();\r\n\r\n    console.log('[DIAG] built decks lengths', deck1.length, deck2.length);\r\n\r\n    setGameState(prev => ({\r\n      ...prev,\r\n      decks: { 1: deck1, 2: deck2 },\r\n      hands: {\r\n        1: deck1.splice(0, 5),\r\n        2: deck2.splice(0, 5)\r\n      }\r\n    }));\r\n    console.log('[DIAG] setGameState after deal: hands[1].length', (deck1.length >= 5 ? 5 : deck1.length));\r\n  }, []);\r\n\r\n  const startNewGame = useCallback(() => {\r\n    setGameState({\r\n      ...initialGameState,\r\n      round: 1,\r\n      current: 1,\r\n      passed: { 1: false, 2: false },\r\n      actionPoints: { 1: 2, 2: 2 },\r\n      actionsUsed: { 1: 0, 2: 0 },\r\n      board: emptyBoard(),\r\n      traps: { 1: [], 2: [] },\r\n      permanentSlots: {\r\n        1: { government: null, public: null, initiativePermanent: null },\r\n        2: { government: null, public: null, initiativePermanent: null },\r\n      },\r\n      // instantSlot wird nicht mehr verwendet - Sofort-Initiativen gehen in board[player].sofort\r\n      discard: [],\r\n      log: [],\r\n      activeRefresh: { 1: 0, 2: 0 },\r\n    });\r\n    dealStartingHands();\r\n  }, [dealStartingHands]);\r\n\r\n  const startMatchWithDecks = useCallback((p1DeckEntries: BuilderEntry[], p2DeckEntries: BuilderEntry[]) => {\r\n    console.log('üîß DEBUG: startMatchWithDecks called - activating AI for player 2');\r\n    // Automatically enable AI for player 2 when starting with decks\r\n    console.log('üîß DEBUG: About to call gameAI.setAiEnabled(true)');\r\n    gameAI.setAiEnabled(true);\r\n    console.log('üîß DEBUG: About to call gameAI.setAiPreset(AUTORITAERER_REALIST)');\r\n    gameAI.setAiPreset('AUTORITAERER_REALIST');\r\n    console.log('üîß DEBUG: AI setup completed');\r\n\r\n    console.log('[DIAG] startMatchWithDecks - p1DeckEntries', p1DeckEntries.length, 'p2DeckEntries', p2DeckEntries.length);\r\n    console.log('[DIAG] startMatchWithDecks - sample entries:', p1DeckEntries.slice(0, 2), p2DeckEntries.slice(0, 2));\r\n\r\n    const p1Cards = buildDeckFromEntries(p1DeckEntries);\r\n    const p2Cards = buildDeckFromEntries(p2DeckEntries);\r\n\r\n    const d1 = [...p1Cards];\r\n    const d2 = [...p2Cards];\r\n    const h1 = d1.splice(0, Math.min(5, d1.length));\r\n    const h2 = d2.splice(0, Math.min(5, d2.length));\r\n\r\n    console.log('[DIAG] startMatchWithDecks - p1Cards', p1Cards.length, 'p2Cards', p2Cards.length);\r\n    console.log('[DIAG] startMatchWithDecks - h1', h1.length, 'h2', h2.length);\r\n    console.log('[DIAG] startMatchWithDecks - sample cards:', p1Cards.slice(0, 2), p2Cards.slice(0, 2));\r\n\r\n    setGameState({\r\n      ...initialGameState,\r\n      round: 1,\r\n      current: 1,\r\n      passed: { 1: false, 2: false },\r\n      decks: { 1: d1, 2: d2 },\r\n      hands: { 1: h1, 2: h2 },\r\n      board: emptyBoard(),\r\n      traps: { 1: [], 2: [] },\r\n      permanentSlots: {\r\n        1: { government: null, public: null, initiativePermanent: null },\r\n        2: { government: null, public: null, initiativePermanent: null },\r\n      },\r\n      // instantSlot wird nicht mehr verwendet - Sofort-Initiativen gehen in board[player].sofort\r\n      discard: [],\r\n      log: [`Match gestartet. P1 und P2 erhalten je ${h1.length}/${h2.length} Startkarten.`],\r\n      activeRefresh: { 1: 0, 2: 0 },\r\n    });\r\n    console.log('[DIAG] setGameState called in startMatchWithDecks');\r\n  }, [gameAI]);\r\n\r\n  const startMatchVsAI = useCallback((p1DeckEntries: BuilderEntry[], presetKey: keyof typeof PRESET_DECKS = 'AUTORITAERER_REALIST') => {\r\n    const p2DeckEntries = PRESET_DECKS[presetKey] as BuilderEntry[];\r\n    gameAI.setAiEnabled(true);\r\n    gameAI.setAiPreset(presetKey);\r\n    gameActions.startMatchWithDecks(p1DeckEntries, p2DeckEntries);\r\n  }, [gameAI, gameActions]);\r\n\r\n  // Pr√ºfe ob der Zug automatisch gewechselt werden soll\r\n  const shouldAdvanceTurn = useCallback((gameState: GameState, player: Player): boolean => {\r\n    // Wenn Spieler gepasst hat\r\n    if (gameState.passed[player]) return true;\r\n\r\n    // Wenn keine AP mehr verf√ºgbar sind\r\n    if (gameState.actionPoints[player] <= 0) return true;\r\n\r\n    // Wenn 2 Aktionen verwendet wurden\r\n    // if (gameState.actionsUsed[player] >= 2) return true;\r\n\r\n    return false;\r\n  }, []);\r\n\r\n  // Karten-Effekte implementieren\r\n  const executeCardEffect = useCallback((\r\n    card: Card,\r\n    player: Player,\r\n    state: GameState,\r\n    logFunc: (msg: string) => void\r\n  ): GameState => {\r\n    let newState = { ...state };\r\n\r\n    logFunctionCall('executeCardEffect', { card: card.name, player, type: card.kind }, 'Starting card effect execution');\r\n\r\n    if (card.kind === 'spec') {\r\n      const specCard = card as SpecialCard;\r\n\r\n      // === SOFORT-INITIATIVEN ===\r\n      if (specCard.name === 'Shadow Lobbying') {\r\n        // Count own board cards with tag Oligarch\r\n        const boardCards = [\r\n          ...newState.board[player].innen,\r\n          ...newState.board[player].aussen,\r\n        ];\r\n        const oligarchCount = boardCards.filter(c => {\r\n          const details = getCardDetails(c.name);\r\n          return details?.subcategories?.includes('Oligarch');\r\n        }).length;\r\n\r\n        const buffAmount = Math.min(oligarchCount, 3);\r\n\r\n        if (buffAmount > 0) {\r\n          const govCards = newState.board[player].aussen.filter(c => c.kind === 'pol') as PoliticianCard[];\r\n          if (govCards.length) {\r\n            const target = govCards[0];\r\n            const oldInfl = target.influence;\r\n            adjustInfluence(target, buffAmount, 'Shadow Lobbying');\r\n            logCardEffect(specCard.name, `${target.name} erh√§lt +${buffAmount} Einfluss ( ${oldInfl} ‚Üí ${target.influence} )`);\r\n          } else {\r\n            logWarning('No government cards', 'Shadow Lobbying buff had no target');\r\n          }\r\n        } else {\r\n          logCardEffect(specCard.name, 'Keine Oligarchen ‚Äì kein Einfluss-Buff');\r\n        }\r\n      }\r\n      else if (specCard.name === 'Spin Doctor') {\r\n        const govCards = newState.board[player].aussen.filter(c => c.kind === 'pol') as PoliticianCard[];\r\n        logDataFlow('board analysis', 'govCards', { count: govCards.length, cards: govCards.map(c => c.name) }, 'Finding government cards');\r\n\r\n        if (govCards.length > 0) {\r\n          const targetCard = govCards[0];\r\n          const oldInfluence = targetCard.influence;\r\n          adjustInfluence(targetCard, 2, 'Spin Doctor');\r\n          const newInfluence = targetCard.influence;\r\n\r\n          logCardEffect(specCard.name, `${targetCard.name} erh√§lt +2 Einfluss (${oldInfluence} ‚Üí ${newInfluence})`);\r\n          logDataFlow('influence adjustment', 'targetCard', { card: targetCard.name, old: oldInfluence, new: newInfluence, change: 2 }, 'Spin Doctor effect applied');\r\n        } else {\r\n          logWarning('No government cards found', 'Spin Doctor effect has no target');\r\n        }\r\n      }\r\n      else if (specCard.name === 'Digitaler Wahlkampf') {\r\n        logCardEffect(specCard.name, 'Ziehe 2 Karten, n√§chste Initiative -1 AP');\r\n        const { newHands, newDecks } = drawCards(player, 2, newState, logFunc);\r\n        newState = { ...newState, hands: newHands, decks: newDecks };\r\n\r\n        // Simplified AP system: No discounts\r\n        logDataFlow('effectFlags', 'newState', { player }, 'Platform effect applied');\r\n      }\r\n      else if (specCard.name === 'Partei-Offensive') {\r\n        const opponent: Player = player === 1 ? 2 : 1;\r\n        const oppGovCards = newState.board[opponent].aussen.filter(c => c.kind === 'pol' && !(c as PoliticianCard).deactivated) as PoliticianCard[];\r\n        logDataFlow('opponent analysis', 'oppGovCards', { opponent, count: oppGovCards.length, cards: oppGovCards.map(c => c.name) }, 'Finding active opponent government cards');\r\n\r\n        if (oppGovCards.length > 0) {\r\n          const targetCard = oppGovCards[0];\r\n          targetCard.deactivated = true;\r\n          logCardEffect(specCard.name, `${targetCard.name} wird deaktiviert (bis Rundenende)`);\r\n          logDataFlow('card deactivation', 'targetCard', { card: targetCard.name, deactivated: true }, 'Partei-Offensive effect applied');\r\n        } else {\r\n          logWarning('No active opponent government cards found', 'Partei-Offensive effect has no target');\r\n        }\r\n      }\r\n      else if (specCard.name === 'Oppositionsblockade') {\r\n        const opponent: Player = player === 1 ? 2 : 1;\r\n        const oppHand = newState.hands[opponent];\r\n        logDataFlow('opponent hand', 'analysis', { opponent, handSize: oppHand.length, cards: oppHand.map(c => c.name) }, 'Analyzing opponent hand');\r\n\r\n        if (oppHand.length > 0) {\r\n          const discardedCard = oppHand[Math.floor(Math.random() * oppHand.length)];\r\n          const newOppHand = oppHand.filter(c => c !== discardedCard);\r\n          newState.hands = { ...newState.hands, [opponent]: newOppHand };\r\n\r\n          logCardEffect(specCard.name, `Gegner verliert ${discardedCard.name} aus der Hand`);\r\n          logDataFlow('card discard', 'opponent hand', { card: discardedCard.name, newHandSize: newOppHand.length }, 'Oppositionsblockade effect applied');\r\n        } else {\r\n          logWarning('Opponent hand is empty', 'Oppositionsblockade effect has no target');\r\n        }\r\n      }\r\n      else if (specCard.name === 'Opportunist') {\r\n        const opponent: Player = player === 1 ? 2 : 1;\r\n        const oppBoard = newState.board[opponent];\r\n        const totalOppInfluence = sumRow([...oppBoard.innen, ...oppBoard.aussen]);\r\n\r\n        logDataFlow('opponent board analysis', 'influence calculation', {\r\n          opponent,\r\n          innen: oppBoard.innen.map(c => ({ name: c.name, influence: c.kind === 'pol' ? (c as any).influence : 0 })),\r\n          aussen: oppBoard.aussen.map(c => ({ name: c.name, influence: c.kind === 'pol' ? (c as any).influence : 0 })),\r\n          totalInfluence: totalOppInfluence\r\n        }, 'Calculating opponent total influence');\r\n\r\n        if (totalOppInfluence > 10) {\r\n          const { newHands, newDecks } = drawCards(player, 1, newState, logFunc);\r\n          newState = { ...newState, hands: newHands, decks: newDecks };\r\n          logCardEffect(specCard.name, `Gegner hat ${totalOppInfluence} Einfluss (>10) - ziehe 1 Karte`);\r\n        } else {\r\n          logCardEffect(specCard.name, `Gegner hat ${totalOppInfluence} Einfluss (‚â§10) - kein Effekt`);\r\n        }\r\n      }\r\n      else if (specCard.name === 'Think-tank') {\r\n        const { newHands, newDecks } = drawCards(player, 1, newState, logFunc);\r\n        newState = { ...newState, hands: newHands, decks: newDecks };\r\n        logCardEffect(specCard.name, 'Ziehe 1 Karte');\r\n      }\r\n      else if (specCard.name === 'Influencer-Kampagne') {\r\n        const publicCards = newState.board[player].innen.filter(c => c.kind === 'pol') as PoliticianCard[];\r\n        logDataFlow('public cards analysis', 'influence boost', { count: publicCards.length, cards: publicCards.map(c => c.name) }, 'Finding public cards for influence boost');\r\n\r\n        publicCards.forEach(card => {\r\n          const oldInfluence = card.influence;\r\n          adjustInfluence(card, 1, 'Influencer-Kampagne');\r\n          const newInfluence = card.influence;\r\n          logCardEffect(specCard.name, `${card.name} erh√§lt +1 Einfluss (${oldInfluence} ‚Üí ${newInfluence})`);\r\n        });\r\n\r\n        if (publicCards.length === 0) {\r\n          logWarning('No public cards found', 'Influencer-Kampagne effect has no targets');\r\n        }\r\n      }\r\n      else if (specCard.name === 'Systemrelevant') {\r\n        const opponent: Player = player === 1 ? 2 : 1;\r\n        const oppGovCards = newState.board[opponent].aussen.filter(c => c.kind === 'pol') as PoliticianCard[];\r\n        logDataFlow('opponent government analysis', 'systemrelevant effect', { count: oppGovCards.length, cards: oppGovCards.map(c => c.name) }, 'Finding opponent government cards');\r\n\r\n        if (oppGovCards.length > 0) {\r\n          const targetCard = oppGovCards[0];\r\n          const oldInfluence = targetCard.influence;\r\n          adjustInfluence(targetCard, -2, 'Systemrelevant');\r\n          const newInfluence = targetCard.influence;\r\n\r\n          logCardEffect(specCard.name, `${targetCard.name} verliert 2 Einfluss (${oldInfluence} ‚Üí ${newInfluence})`);\r\n          logDataFlow('influence reduction', 'targetCard', { card: targetCard.name, old: oldInfluence, new: newInfluence, change: -2 }, 'Systemrelevant effect applied');\r\n        } else {\r\n          logWarning('No opponent government cards found', 'Systemrelevant effect has no target');\r\n        }\r\n      }\r\n      else if (specCard.name === 'Symbolpolitik') {\r\n        const { newHands, newDecks } = drawCards(player, 1, newState, logFunc);\r\n        newState = { ...newState, hands: newHands, decks: newDecks };\r\n\r\n        newState.actionPoints = {\r\n          ...newState.actionPoints,\r\n          [player]: Math.min(2, newState.actionPoints[player] + 1)\r\n        };\r\n\r\n        const oldAP = state.actionPoints[player];\r\n        const newAP = newState.actionPoints[player];\r\n        logCardEffect(specCard.name, `Ziehe 1 Karte, erhalte +1 AP (${oldAP} ‚Üí ${newAP})`);\r\n        logDataFlow('AP gain', 'player', { player, old: oldAP, new: newAP, change: 1 }, 'Symbolpolitik effect applied');\r\n      }\r\n      else if (specCard.name === 'Alexei Navalny') {\r\n        logCardEffect(specCard.name, 'Ziehe 1 Karte');\r\n        const { newHands, newDecks } = drawCards(player, 1, newState, logFunc);\r\n        newState = { ...newState, hands: newHands, decks: newDecks };\r\n      }\r\n      else if (specCard.name === 'Mukesh Ambani') {\r\n        logCardEffect(specCard.name, 'Ziehe 1 Karte');\r\n        const { newHands, newDecks } = drawCards(player, 1, newState, logFunc);\r\n        newState = { ...newState, hands: newHands, decks: newDecks };\r\n      }\r\n\r\n      // Oligarch-Effekte\r\n      else if (['Elon Musk', 'Bill Gates', 'George Soros', 'Warren Buffett', 'Mukesh Ambani', 'Jeff Bezos', 'Alisher Usmanov', 'Gautam Adani', 'Jack Ma', 'Zhang Yiming', 'Roman Abramovich'].includes(specCard.name)) {\r\n        logCardEffect(specCard.name, 'Ziehe 1 Karte (Oligarch-Effekt)');\r\n        const { newHands, newDecks } = drawCards(player, 1, newState, logFunc);\r\n        newState = { ...newState, hands: newHands, decks: newDecks };\r\n      }\r\n    }\r\n\r\n    // === DAUERHAFTE INITIATIVEN ===\r\n    if (card.kind === 'spec' && (card as SpecialCard).type === 'Dauerhaft-Initiative') {\r\n      const specCard = card as SpecialCard;\r\n\r\n      if (specCard.name === 'Algorithmischer Diskurs') {\r\n        logCardEffect(specCard.name, 'Dauerhafte Initiative: Alle Medien-Karten geben +1 Einfluss');\r\n        // This effect will be applied in applyStartOfTurnHooks\r\n      }\r\n      else if (specCard.name === 'Alternative Fakten') {\r\n        logCardEffect(specCard.name, 'Dauerhafte Initiative: Alle Oligarchen geben +1 Einfluss');\r\n        // This effect will be applied in applyStartOfTurnHooks\r\n      }\r\n    }\r\n\r\n    // === POLITIKER-KARTEN ===\r\n    else if (card.kind === 'pol') {\r\n      const polCard = card as PoliticianCard;\r\n      logCardEffect(polCard.name, `Politiker platziert - Basis-Einfluss: ${polCard.influence}`);\r\n    }\r\n\r\n    logDataFlow('executeCardEffect', 'newState', { card: card.name, effectsApplied: true }, 'Card effect execution completed');\r\n    return newState;\r\n  }, [logFunctionCall, logCardEffect, logDataFlow, logWarning]);\r\n\r\n  const nextTurn = useCallback(() => {\r\n    logFunctionCall('nextTurn', {}, 'Starting turn change');\r\n\r\n    setGameState((prev): GameState => {\r\n      logDataFlow('UI', 'nextTurn', { current: prev.current, passed: prev.passed }, 'Turn change request');\r\n\r\n      // if both passed -> resolve round\r\n      logConditionCheck('both players passed', prev.passed[1] && prev.passed[2], 'Round end check');\r\n      if (prev.passed[1] && prev.passed[2]) {\r\n        logFunctionCall('resolveRound', { round: prev.round }, 'Both players passed - resolving round');\r\n        return resolveRound(prev);\r\n      }\r\n\r\n      const newCurrent: Player = prev.current === 1 ? 2 : 1;\r\n      logDataFlow('turn change', 'newCurrent', { old: prev.current, new: newCurrent }, 'Player switch');\r\n\r\n      // Reset AP for the new current player\r\n      const newActionPoints = { ...prev.actionPoints };\r\n      newActionPoints[newCurrent] = 2;\r\n\r\n      logDataFlow('AP reset', 'newCurrent', {\r\n        player: newCurrent,\r\n        oldAP: prev.actionPoints[newCurrent],\r\n        newAP: newActionPoints[newCurrent],\r\n        oldActions: 0,\r\n        newActions: 0\r\n      }, 'Resource reset for new player');\r\n\r\n      // Apply start-of-turn hooks for the new current player\r\n      const newState: GameState = {\r\n        ...prev,\r\n        current: newCurrent,\r\n        actionPoints: newActionPoints\r\n      };\r\n\r\n      // Log turn change\r\n      log(`Spieler ${newCurrent} ist am Zug (2 AP verf√ºgbar)`);\r\n      logGameStateChange('turn change', `Player ${newCurrent} turn started`);\r\n\r\n      logFunctionCall('applyStartOfTurnHooks', { player: newCurrent }, 'Applying start-of-turn effects');\r\n      applyStartOfTurnHooks(newState, newCurrent, log);\r\n\r\n      // Check if AI should take turn\r\n      logConditionCheck('AI turn', newCurrent === 2 && (prev.aiEnabled?.[2] ?? false), 'AI turn check');\r\n      if (newCurrent === 2 && (prev.aiEnabled?.[2] ?? false)) {\r\n        logFunctionCall('runAITurn', { player: newCurrent }, 'Triggering AI turn');\r\n        // Use setTimeout to avoid state update conflicts\r\n        setTimeout(() => {\r\n          logAIAction('AI turn triggered', 'Starting AI turn execution');\r\n          gameAI.runAITurn();\r\n        }, 100);\r\n      }\r\n\r\n      logDataFlow('nextTurn', 'finalState', {\r\n        current: newState.current,\r\n        ap: newState.actionPoints[newCurrent],\r\n        aiEnabled: prev.aiEnabled?.[2] ?? false\r\n      }, 'Turn change completed');\r\n\r\n      return newState;\r\n    });\r\n\r\n    // Nach Zugwechsel ebenfalls spiegeln (z. B. Auto-Draw am EoT)\r\n    afterQueueResolved();\r\n  }, [logFunctionCall, logDataFlow, logConditionCheck, logGameStateChange, gameAI, log, logAIAction, afterQueueResolved]);\r\n\r\n  // Automatischer Zugwechsel basierend auf AP\r\n  const checkAndAdvanceTurn = useCallback((gameState: GameState) => {\r\n    const currentPlayer = gameState.current;\r\n    if (shouldAdvanceTurn(gameState, currentPlayer)) {\r\n      // Nur wechseln wenn der andere Spieler nicht auch fertig ist\r\n      const otherPlayer: Player = currentPlayer === 1 ? 2 : 1;\r\n      if (!shouldAdvanceTurn(gameState, otherPlayer) || gameState.passed[otherPlayer]) {\r\n        nextTurn();\r\n      }\r\n    }\r\n  }, [shouldAdvanceTurn, nextTurn]);\r\n\r\n  const scores = useCallback((state: GameState): [number, number] => {\r\n    // Einheitliche Berechnung √ºber Utils-Helfer\r\n    const s1 = sumGovernmentInfluenceWithAuras(state, 1);\r\n    const s2 = sumGovernmentInfluenceWithAuras(state, 2);\r\n    return [s1, s2];\r\n  }, []);\r\n\r\n  const resolveRound = useCallback((state: GameState): GameState => {\r\n    const [s1, s2] = scores(state);\r\n    let winner: 1 | 2 = 1;\r\n    let note = '';\r\n\r\n    if (s1 > s2) winner = 1;\r\n    else if (s2 > s1) winner = 2;\r\n    else {\r\n      // Gleichstand -> erster Pass gewinnt\r\n      winner = state.passed[1] && !state.passed[2] ? 1 : 2;\r\n      note = ' (Gleichstand ‚Äì fr√ºherer Pass)';\r\n    }\r\n\r\n    log(`Runde ${state.round} endet: P1 ${s1} : P2 ${s2}. Gewinner: P${winner}${note}.`);\r\n\r\n    // Rundensieg z√§hlen\r\n    const newRoundsWon = { ...state.roundsWon };\r\n    newRoundsWon[winner] += 1;\r\n\r\n    // Pr√ºfe Best-of-3 Gewinner\r\n    let gameWinner: 1 | 2 | null = null;\r\n    if (newRoundsWon[1] >= 2) {\r\n      gameWinner = 1;\r\n      log(`üéâ SPIEL ENDE: Spieler 1 gewinnt das Spiel! (${newRoundsWon[1]}:${newRoundsWon[2]})`);\r\n    } else if (newRoundsWon[2] >= 2) {\r\n      gameWinner = 2;\r\n      log(`üéâ SPIEL ENDE: Spieler 2 gewinnt das Spiel! (${newRoundsWon[2]}:${newRoundsWon[1]})`);\r\n    }\r\n\r\n    // clear board (no carryover)\r\n    const newBoard = emptyBoard();\r\n    const newTraps = { 1: [], 2: [] };\r\n\r\n    // Verbesserte Karten-Nachzieh-Mechanik (ziehe bis Hand voll ist)\r\n    const { newHands, newDecks } = drawCardsAtRoundEnd(state, log);\r\n\r\n    const newRound = state.round + 1;\r\n    const newPassed = { 1: false, 2: false };\r\n    // alternate starter each round\r\n    const newCurrent = (newRound % 2 === 1) ? 1 : 2;\r\n\r\n    // Wenn Spiel zu Ende, stoppe\r\n    if (gameWinner) {\r\n      return {\r\n        ...state,\r\n        roundsWon: newRoundsWon,\r\n        gameWinner,\r\n      };\r\n    }\r\n\r\n    log(`Runde ${newRound} beginnt. P${newCurrent} startet.`);\r\n\r\n    // üî• CLUSTER 3: Reset tempor√§re Initiative-Boni am Rundenende\r\n    const newEffectFlags = {\r\n      1: {\r\n        ...state.effectFlags[1],\r\n        // Reset Cluster 3 Flags\r\n        scienceInitiativeBonus: false,\r\n        militaryInitiativePenalty: false,\r\n        healthInitiativeBonus: false,\r\n        cultureInitiativeBonus: false,\r\n        // Reset andere rundenbasierte Flags\r\n        markZuckerbergUsed: false,\r\n        opportunistActive: false,\r\n        publicEffectDoubled: false,\r\n        cannotPlayInitiatives: false,\r\n        nextCardProtected: false,\r\n        platformAfterInitiativeBonus: false,\r\n        interventionEffectReduced: false,\r\n      },\r\n      2: {\r\n        ...state.effectFlags[2],\r\n        // Reset Cluster 3 Flags\r\n        scienceInitiativeBonus: false,\r\n        militaryInitiativePenalty: false,\r\n        healthInitiativeBonus: false,\r\n        cultureInitiativeBonus: false,\r\n        // Reset andere rundenbasierte Flags\r\n        markZuckerbergUsed: false,\r\n        opportunistActive: false,\r\n        publicEffectDoubled: false,\r\n        cannotPlayInitiatives: false,\r\n        nextCardProtected: false,\r\n        platformAfterInitiativeBonus: false,\r\n        interventionEffectReduced: false,\r\n      }\r\n    };\r\n\r\n    return {\r\n      ...state,\r\n      round: newRound,\r\n      current: newCurrent,\r\n      passed: newPassed,\r\n      board: newBoard,\r\n      traps: newTraps,\r\n      hands: newHands,\r\n      decks: newDecks,\r\n      roundsWon: newRoundsWon,\r\n      effectFlags: newEffectFlags,\r\n    };\r\n  }, [log, scores]);\r\n\r\n  // Einfache Interventionsauswertung f√ºr einige h√§ufige Trigger\r\n  const evaluateInterventions = (\r\n    prev: GameState,\r\n    actingPlayer: Player,\r\n    event: any,\r\n    tentativeBoard: GameState['board']\r\n  ): [GameState['board'] | null, GameState['traps'] | null] => {\r\n    const opponent: Player = actingPlayer === 1 ? 2 : 1;\r\n    const oppTraps = [...(prev.traps[opponent] || [])];\r\n    let board = tentativeBoard;\r\n    let trapsChanged = false;\r\n\r\n    for (let i = 0; i < oppTraps.length; i++) {\r\n      const trap = oppTraps[i];\r\n      if (trap.kind !== 'spec') continue;\r\n      const spec = trap as SpecialCard;\r\n      const details = getCardDetails(spec.name);\r\n      const key = spec.key;\r\n\r\n      // Trigger: Karte gespielt\r\n      if (event.type === 'card_played' && (event.card as PoliticianCard)) {\r\n        const played = event.card as PoliticianCard;\r\n        const isMedia = ['Oprah Winfrey'].includes(played.name);\r\n        const isNGO = ['Bill Gates', 'Jennifer Doudna', 'Noam Chomsky'].includes(played.name);\r\n        const isPlatform = ['Mark Zuckerberg', 'Tim Cook', 'Jack Ma', 'Zhang Yiming'].includes(played.name);\r\n        const isDiplomat = ['Joschka Fischer', 'Sergey Lavrov', 'Ursula von der Leyen', 'Jens Stoltenberg', 'Hans Dietrich Genscher', 'Colin Powell', 'Condoleezza Rice', 'Christine Lagarde'].includes(played.name);\r\n        const isTier2Gov = (played.T === 2 && event.lane === 'aussen');\r\n        const isTier1Gov = (played.T === 1 && event.lane === 'aussen');\r\n        const isWeakGov = (played.influence <= 5 && event.lane === 'aussen');\r\n        const isLowPowerGov = (played.influence <= 4 && event.lane === 'aussen');\r\n\r\n        // Cancel Culture / Fake News-Kampagne\r\n        if ((details?.name === 'Cancel Culture' || key === 'Cancel_Culture') && event.lane === 'innen') {\r\n          tryApplyNegativeEffect(played, () => { played.deactivated = true; }, prev.round);\r\n          oppTraps.splice(i, 1); i--; trapsChanged = true;\r\n          log(`Intervention ausgel√∂st: Cancel Culture ‚Üí ${played.name} deaktiviert.`);\r\n          logIntervention('Cancel Culture', `Ausgel√∂st gegen ${played.name} in √ñffentlichkeit`);\r\n          continue;\r\n        }\r\n        if ((details?.name === 'Fake News-Kampagne' || key === 'Fake_News_Kampagne') && isMedia) {\r\n          tryApplyNegativeEffect(played, () => { played.deactivated = true; }, prev.round);\r\n          oppTraps.splice(i, 1); i--; trapsChanged = true;\r\n          log(`Intervention ausgel√∂st: Fake News-Kampagne ‚Üí ${played.name} deaktiviert.`);\r\n          logIntervention('Fake News-Kampagne', `Ausgel√∂st gegen ${played.name} (Medien)`);\r\n          continue;\r\n        }\r\n\r\n        // Whistleblower (Tier 2 Regierung)\r\n        if ((details?.name === 'Whistleblower' || key === 'Whistleblower') && isTier2Gov) {\r\n          tryApplyNegativeEffect(played, () => { adjustInfluence(played, -2, 'Whistleblower'); }, prev.round);\r\n          oppTraps.splice(i, 1); i--; trapsChanged = true;\r\n          log(`Intervention ausgel√∂st: Whistleblower ‚Üí ${played.name} -2 Einfluss.`);\r\n          continue;\r\n        }\r\n\r\n        // Berater-Aff√§re (Tier 1 Regierung)\r\n        if ((details?.name === 'Berater-Aff√§re' || key === 'Berater_Affaere') && isTier1Gov) {\r\n          tryApplyNegativeEffect(played, () => { adjustInfluence(played, -2, 'Berater-Aff√§re'); }, prev.round);\r\n          oppTraps.splice(i, 1); i--; trapsChanged = true;\r\n          log(`Intervention ausgel√∂st: Berater-Aff√§re ‚Üí ${played.name} -2 Einfluss.`);\r\n          continue;\r\n        }\r\n\r\n        // Soft Power-Kollaps / Deepfake-Skandal (Diplomat)\r\n        if ((details?.name === 'Soft Power-Kollaps' || key === 'Soft_Power_Kollaps') && isDiplomat) {\r\n          tryApplyNegativeEffect(played, () => { adjustInfluence(played, -3, 'Soft Power-Kollaps'); }, prev.round);\r\n          oppTraps.splice(i, 1); i--; trapsChanged = true;\r\n          log(`Intervention ausgel√∂st: Soft Power-Kollaps ‚Üí ${played.name} -3 Einfluss.`);\r\n          continue;\r\n        }\r\n        if ((details?.name === 'Deepfake-Skandal' || key === 'Deepfake_Skandal') && isDiplomat) {\r\n          // Kein Einflusstransfer m√∂glich - Flag setzen\r\n          const newFlags = { ...prev.effectFlags?.[actingPlayer], influenceTransferBlocked: true };\r\n          prev.effectFlags = { ...prev.effectFlags, [actingPlayer]: newFlags } as GameState['effectFlags'];\r\n          oppTraps.splice(i, 1); i--; trapsChanged = true;\r\n          log(`Intervention ausgel√∂st: Deepfake-Skandal ‚Üí ${played.name} kann keinen Einfluss transferieren.`);\r\n          continue;\r\n        }\r\n\r\n        // Lobby Leak / Boykott-Kampagne (NGO/Bewegung)\r\n        if ((details?.name === 'Lobby Leak' || key === 'Lobby_Leak') && isNGO) {\r\n          const hands = { ...prev.hands } as GameState['hands'];\r\n          if (hands[actingPlayer].length > 0) {\r\n            hands[actingPlayer] = hands[actingPlayer].slice(1);\r\n            prev.hands = hands;\r\n          }\r\n          oppTraps.splice(i, 1); i--; trapsChanged = true;\r\n          log(`Intervention ausgel√∂st: Lobby Leak ‚Üí P${actingPlayer} wirft 1 Karte ab.`);\r\n          continue;\r\n        }\r\n        if ((details?.name === 'Boykott-Kampagne' || key === 'Boykott_Kampagne') && (isNGO || ['Greta Thunberg', 'Malala Yousafzai', 'Ai Weiwei', 'Alexei Navalny'].includes(played.name))) {\r\n          tryApplyNegativeEffect(played, () => { played.deactivated = true; }, prev.round);\r\n          oppTraps.splice(i, 1); i--; trapsChanged = true;\r\n          log(`Intervention ausgel√∂st: Boykott-Kampagne ‚Üí ${played.name} deaktiviert.`);\r\n          continue;\r\n        }\r\n\r\n        // Cyber-Attacke (Plattform)\r\n        if ((details?.name === 'Cyber-Attacke' || key === 'Cyber_Attacke') && isPlatform) {\r\n          const loc = findCardLocation(played as any, { ...prev, board } as GameState);\r\n          if (loc) {\r\n            const arr = [...board[loc.player][loc.lane]];\r\n            const idx = arr.findIndex(c => c.uid === played.uid);\r\n            if (idx >= 0) {\r\n              arr.splice(idx, 1);\r\n              board = {\r\n                ...board,\r\n                [loc.player]: {\r\n                  ...board[loc.player],\r\n                  [loc.lane]: arr\r\n                }\r\n              } as GameState['board'];\r\n            }\r\n          }\r\n          oppTraps.splice(i, 1); i--; trapsChanged = true;\r\n          log(`Intervention ausgel√∂st: Cyber-Attacke ‚Üí ${played.name} zerst√∂rt.`);\r\n          continue;\r\n        }\r\n\r\n        // Bestechungsskandal 2.0 (schwache Regierung M‚â§5)\r\n        if ((details?.name === 'Bestechungsskandal 2.0' || key === 'Bestechungsskandal_2_0') && isWeakGov) {\r\n          // √úbernehme Karte bis Rundenende (vereinfacht: tempor√§r deaktiviert)\r\n          tryApplyNegativeEffect(played, () => { played.deactivated = true; }, prev.round);\r\n          oppTraps.splice(i, 1); i--; trapsChanged = true;\r\n          log(`Intervention ausgel√∂st: Bestechungsskandal 2.0 ‚Üí ${played.name} √ºbernommen.`);\r\n          continue;\r\n        }\r\n\r\n        // Tunnelvision (M‚â§4 Regierung)\r\n        if ((details?.name === 'Tunnelvision' || key === 'Tunnelvision') && isLowPowerGov) {\r\n          // Karte z√§hlt nicht zur Runde (vereinfacht: -100% Einfluss)\r\n          tryApplyNegativeEffect(played, () => { played.influence = 0; }, prev.round);\r\n          oppTraps.splice(i, 1); i--; trapsChanged = true;\r\n          log(`Intervention ausgel√∂st: Tunnelvision ‚Üí ${played.name} z√§hlt nicht zur Runde.`);\r\n          continue;\r\n        }\r\n      }\r\n\r\n      // Trigger: Board-Zustand\r\n      if (event.type === 'board_state_check') {\r\n        const actingPlayerGovCount = tentativeBoard[actingPlayer].aussen.length;\r\n        const actingPlayerPubCount = tentativeBoard[actingPlayer].innen.length;\r\n\r\n        // Strategische Enth√ºllung (>2 Regierungskarten)\r\n        if ((details?.name === 'Strategische Enth√ºllung' || key === 'Strategische_Enthuellung') && actingPlayerGovCount > 2) {\r\n          // Eine Regierungskarte zur√ºck auf Hand (vereinfacht: entferne erste)\r\n          const govCards = [...tentativeBoard[actingPlayer].aussen];\r\n          if (govCards.length > 0) {\r\n            govCards.pop(); // Entferne letzte\r\n            board = { ...board, [actingPlayer]: { ...board[actingPlayer], aussen: govCards } } as GameState['board'];\r\n          }\r\n          oppTraps.splice(i, 1); i--; trapsChanged = true;\r\n          log(`Intervention ausgel√∂st: Strategische Enth√ºllung ‚Üí Regierungskarte zur√ºck.`);\r\n          continue;\r\n        }\r\n\r\n        // Grassroots-Widerstand (>2 √ñffentlichkeitskarten)\r\n        if ((details?.name === 'Grassroots-Widerstand' || key === 'Grassroots_Widerstand') && actingPlayerPubCount > 2) {\r\n          const pubCards = tentativeBoard[actingPlayer].innen.filter(c => c.kind === 'pol') as PoliticianCard[];\r\n          if (pubCards.length > 0) {\r\n            tryApplyNegativeEffect(pubCards[0], () => { pubCards[0].deactivated = true; }, prev.round);\r\n          }\r\n          oppTraps.splice(i, 1); i--; trapsChanged = true;\r\n          log(`Intervention ausgel√∂st: Grassroots-Widerstand ‚Üí √ñffentlichkeitskarte deaktiviert.`);\r\n          continue;\r\n        }\r\n\r\n        // Parlament geschlossen (‚â•2 Regierungskarten)\r\n        if ((details?.name === 'Parlament geschlossen' || key === 'Parlament_geschlossen') && actingPlayerGovCount >= 2) {\r\n          // Blockiere weitere Regierungskarten (Flag f√ºr diesen Zug)\r\n          const newFlags = { ...prev.effectFlags?.[actingPlayer], cannotPlayMoreGovernment: true };\r\n          prev.effectFlags = { ...prev.effectFlags, [actingPlayer]: newFlags } as GameState['effectFlags'];\r\n          oppTraps.splice(i, 1); i--; trapsChanged = true;\r\n          log(`Intervention ausgel√∂st: Parlament geschlossen ‚Üí keine weiteren Regierungskarten.`);\r\n          continue;\r\n        }\r\n\r\n        // Interne Fraktionsk√§mpfe (gro√üe Initiative 3-4 HP)\r\n        if ((details?.name === 'Interne Fraktionsk√§mpfe' || key === 'Interne_Fraktionskaempfe') && event.type === 'card_played' && event.card?.kind === 'spec') {\r\n          const specCard = event.card as SpecialCard;\r\n          const isLargeInitiative = specCard.type === 'Sofort-Initiative' && (specCard.bp >= 3);\r\n          if (isLargeInitiative) {\r\n            // Initiative annullieren (vereinfacht: Karte zur√ºck auf Hand)\r\n            const hands = { ...prev.hands } as GameState['hands'];\r\n            hands[actingPlayer].push(event.card);\r\n            prev.hands = hands;\r\n            oppTraps.splice(i, 1); i--; trapsChanged = true;\r\n            log(`Intervention ausgel√∂st: Interne Fraktionsk√§mpfe ‚Üí ${event.card.name} wird annulliert.`);\r\n            continue;\r\n          }\r\n        }\r\n\r\n        // Massenproteste (2 Regierungskarten in der Runde)\r\n        if ((details?.name === 'Massenproteste' || key === 'Massenproteste') && event.type === 'card_played' && event.lane === 'aussen') {\r\n          // Vereinfacht: Beide Regierungskarten -1 Einfluss\r\n          const govCards = board[actingPlayer].aussen.filter(c => c.kind === 'pol') as PoliticianCard[];\r\n          if (govCards.length >= 2) {\r\n            adjustInfluence(govCards[0], -1, 'Massenproteste');\r\n            adjustInfluence(govCards[1], -1, 'Massenproteste');\r\n            oppTraps.splice(i, 1); i--; trapsChanged = true;\r\n            log(`Intervention ausgel√∂st: Massenproteste ‚Üí ${govCards[0].name} und ${govCards[1].name} -1 Einfluss.`);\r\n            continue;\r\n          }\r\n        }\r\n\r\n        // \"Unabh√§ngige\" Untersuchung (gegen Intervention)\r\n        if ((details?.name === '\"Unabh√§ngige\" Untersuchung' || key === 'Unabhaengige_Untersuchung') && event.type === 'card_played' && event.card?.kind === 'spec') {\r\n          const specCard = event.card as SpecialCard;\r\n          if (specCard.type === 'Intervention') {\r\n            // Intervention annullieren (vereinfacht: Karte zur√ºck auf Hand)\r\n            const hands = { ...prev.hands } as GameState['hands'];\r\n            hands[actingPlayer].push(event.card);\r\n            prev.hands = hands;\r\n            oppTraps.splice(i, 1); i--; trapsChanged = true;\r\n            log(`Intervention ausgel√∂st: \"Unabh√§ngige\" Untersuchung ‚Üí ${event.card.name} wird annulliert.`);\r\n            continue;\r\n          }\r\n        }\r\n\r\n        // Maulwurf (kopiere schw√§chere Regierungskarte des Gegners)\r\n        if ((details?.name === 'Maulwurf' || key === 'Maulwurf') && event.type === 'card_played' && event.lane === 'aussen') {\r\n          const oppGovCards = board[opponent].aussen.filter(c => c.kind === 'pol') as PoliticianCard[];\r\n          if (oppGovCards.length > 0) {\r\n            // Finde schw√§chste Regierungskarte\r\n            const weakestCard = oppGovCards.reduce((weakest, current) =>\r\n              (current.influence < weakest.influence) ? current : weakest\r\n            );\r\n            // Kopie erstellen (vereinfacht: gleiche Karte auf eigene Hand)\r\n            const hands = { ...prev.hands } as GameState['hands'];\r\n            const copyCard = { ...weakestCard, uid: Date.now() + Math.random() };\r\n            hands[opponent].push(copyCard);\r\n            prev.hands = hands;\r\n            oppTraps.splice(i, 1); i--; trapsChanged = true;\r\n            log(`Intervention ausgel√∂st: Maulwurf ‚Üí Kopie von ${weakestCard.name} auf Hand.`);\r\n            continue;\r\n          }\r\n        }\r\n\r\n        // Skandalspirale (Initiative + √ñffentlichkeitskarte)\r\n        if ((details?.name === 'Skandalspirale' || key === 'Skandalspirale') && event.type === 'card_played') {\r\n          // Vereinfacht: Pr√ºfe ob Initiative und √ñffentlichkeitskarte in dieser Runde gespielt wurden\r\n          const recentCards = board[actingPlayer].innen.concat(board[actingPlayer].aussen);\r\n          const hasInitiative = recentCards.some(c => c.kind === 'spec' && (c as SpecialCard).type === 'Sofort-Initiative');\r\n          const hasPublic = recentCards.some(c => c.kind === 'spec' && (c as SpecialCard).type === '√ñffentlichkeitskarte');\r\n          if (hasInitiative && hasPublic) {\r\n            // Eine der beiden Karten annullieren (vereinfacht: letzte √ñffentlichkeitskarte)\r\n            const pubCards = board[actingPlayer].innen.filter(c => c.kind === 'spec' && (c as SpecialCard).type === '√ñffentlichkeitskarte');\r\n            if (pubCards.length > 0) {\r\n              const lastPubCard = pubCards[pubCards.length - 1];\r\n              const arr = [...board[actingPlayer].innen];\r\n              const idx = arr.findIndex(c => c.uid === lastPubCard.uid);\r\n              if (idx >= 0) {\r\n                arr.splice(idx, 1);\r\n                board = {\r\n                  ...board,\r\n                  [actingPlayer]: { ...board[actingPlayer], innen: arr }\r\n                } as GameState['board'];\r\n              }\r\n            }\r\n            oppTraps.splice(i, 1); i--; trapsChanged = true;\r\n            log(`Intervention ausgel√∂st: Skandalspirale ‚Üí √ñffentlichkeitskarte annulliert.`);\r\n            continue;\r\n          }\r\n        }\r\n\r\n        // Satire-Show (bei mehr Einfluss als Gegner)\r\n        if ((details?.name === 'Satire-Show' || key === 'Satire_Show')) {\r\n          const playerInfluence = sumRow([...board[opponent].aussen]);\r\n          const opponentInfluence = sumRow([...board[actingPlayer].aussen]);\r\n          if (opponentInfluence > playerInfluence) {\r\n            const oppGovCards = board[opponent].aussen.filter(c => c.kind === 'pol') as PoliticianCard[];\r\n            if (oppGovCards.length > 0) {\r\n              // Erste Regierungskarte -2 Einfluss\r\n              adjustInfluence(oppGovCards[0], -2, 'Satire-Show');\r\n              oppTraps.splice(i, 1); i--; trapsChanged = true;\r\n              log(`Intervention ausgel√∂st: Satire-Show ‚Üí ${oppGovCards[0].name} -2 Einfluss.`);\r\n              continue;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    if (trapsChanged) {\r\n      const newTraps = { ...prev.traps, [opponent]: oppTraps } as GameState['traps'];\r\n      return [board, newTraps];\r\n    }\r\n    return [null, null];\r\n  };\r\n\r\n  // Zentrale Effekt-Queue Verarbeitung\r\n  const processEffectQueue = useCallback((state: GameState): GameState => {\r\n    if (!state.effectQueue || state.effectQueue.items.length === 0) {\r\n      return state;\r\n    }\r\n\r\n    const [newQueue, newState] = EffectQueueManager.processQueue(\r\n      state.effectQueue,\r\n      state,\r\n      log\r\n    );\r\n\r\n    return {\r\n      ...newState,\r\n      effectQueue: newQueue\r\n    };\r\n  }, [log]);\r\n\r\n  // Berechne Einfluss mit dauerhaften Auren-Effekten\r\n  const sumRowWithAuras = (state: GameState, player: Player): number => {\r\n    const govCards = state.board[player].aussen.filter(c => c.kind === 'pol') as PoliticianCard[];\r\n    const opponent: Player = player === 1 ? 2 : 1;\r\n    let total = 0;\r\n\r\n    // üîç DEBUG: Log welche Regierungskarten gefunden wurden\r\n    console.log(`üîç sumRowWithAuras P${player}: Gefunden ${govCards.length} Regierungskarten:`,\r\n      govCards.map(c => `${c.name}[${c.influence}I]`).join(', '));\r\n\r\n    govCards.forEach(card => {\r\n      let influence = card.influence;\r\n\r\n      // Dauerhafte Auren anwenden\r\n      const govSlot = state.permanentSlots[player].government;\r\n      const pubSlot = state.permanentSlots[player].public;\r\n\r\n      // Koalitionszwang: Tier 2 Regierungskarten +1 Einfluss\r\n      if (govSlot?.kind === 'spec' && (govSlot as SpecialCard).name === 'Koalitionszwang') {\r\n        if (card.T === 2) influence += 1;\r\n      }\r\n\r\n      // Napoleon Komplex: Tier 1 Regierungskarten +1 Einfluss\r\n      if (govSlot?.kind === 'spec' && (govSlot as SpecialCard).name === 'Napoleon Komplex') {\r\n        if (card.T === 1) influence += 1;\r\n      }\r\n\r\n      // Zivilgesellschaft: Bewegung-Karten +1 Einfluss\r\n      if (pubSlot?.kind === 'spec' && (pubSlot as SpecialCard).name === 'Zivilgesellschaft') {\r\n        const bewegungNames = ['Greta Thunberg', 'Malala Yousafzai', 'Ai Weiwei', 'Alexei Navalny'];\r\n        const hasBewegung = state.board[player].innen.some(c => c.kind === 'spec' && (c as SpecialCard).type === '√ñffentlichkeitskarte' && bewegungNames.includes(c.name));\r\n        if (hasBewegung) influence += 1;\r\n      }\r\n\r\n      // üî• JOSCHKA FISCHER NGO-BOOST: +1 Einfluss wenn NGO auf dem Board liegt\r\n      if (card.name === 'Joschka Fischer' && (card as any).effect === 'ngo_boost') {\r\n        const hasNgoCard = state.board[player].innen.some(c =>\r\n          c.kind === 'spec' &&\r\n          (c as SpecialCard).type === '√ñffentlichkeitskarte' &&\r\n          (c as any).tag === 'NGO'\r\n        );\r\n        if (hasNgoCard) {\r\n          influence += 1;\r\n          // Log nur beim ersten Mal, um Spam zu vermeiden\r\n          if (!(card as any)._ngoBoostLogged) {\r\n            console.log(`üî• JOSCHKA FISCHER KONTINUIERLICHER NGO-BOOST: +1 Einfluss`);\r\n            (card as any)._ngoBoostLogged = true;\r\n          }\r\n        } else {\r\n          (card as any)._ngoBoostLogged = false;\r\n        }\r\n      }\r\n\r\n      // Milchglas Transparenz: +1 Einfluss wenn keine NGO/Bewegung liegt\r\n      if (govSlot?.kind === 'spec' && (govSlot as SpecialCard).name === 'Milchglas Transparenz') {\r\n        const ngoMovementNames = ['Jennifer Doudna', 'Noam Chomsky', 'Bill Gates', 'Greta Thunberg', 'Malala Yousafzai', 'Ai Weiwei', 'Alexei Navalny'];\r\n        const hasNgoMovement = state.board[player].innen.some(c => c.kind === 'spec' && (c as SpecialCard).type === '√ñffentlichkeitskarte' && ngoMovementNames.includes(c.name));\r\n        if (!hasNgoMovement) influence += 1;\r\n      }\r\n\r\n      // Alternative Fakten: Gegner-Interventionen -1 Wirkung\r\n      const oppPubSlot = state.permanentSlots[opponent].public;\r\n      if (oppPubSlot?.kind === 'spec' && (oppPubSlot as SpecialCard).name === 'Alternative Fakten') {\r\n        // Reduziere Effekt von Interventionen (vereinfacht: -1 Einfluss weniger)\r\n        // Wird in der Intervention-Auswertung ber√ºcksichtigt\r\n      }\r\n\r\n      total += influence;\r\n    });\r\n\r\n    // üîç DEBUG: Final influence calculation\r\n    console.log(`üéØ sumRowWithAuras P${player}: Gesamt-Einfluss = ${total}`);\r\n    return total;\r\n  };\r\n\r\n  // playCard is now handled by useGameActions hook\r\n\r\n  // runAITurn is now handled by useGameAI hook - removed duplicate implementation\r\n\r\n  const applyStartOfTurnHooksLegacy = useCallback((player: Player, state: GameState) => {\r\n    logFunctionCall('applyStartOfTurnHooksLegacy', { player, round: state.round }, 'Starting legacy turn hooks');\r\n\r\n    const pool = [...state.board[player].innen, ...state.board[player].aussen];\r\n    pool.forEach(c => {\r\n        if (c.kind === 'pol') {\r\n        const polCard = c as PoliticianCard;\r\n        if (polCard._pledgeDown && polCard._pledgeDown.round === state.round) {\r\n          const oldInfluence = polCard.influence;\r\n          adjustInfluence(polCard, polCard._pledgeDown.amount, 'Wahlversprechen');\r\n          const newInfluence = polCard.influence;\r\n          log(`Wahlversprechen Abzug auf ${polCard.name}: ${oldInfluence} ‚Üí ${newInfluence}`);\r\n          polCard._pledgeDown = null;\r\n        }\r\n        // reset once-per-round flags\r\n        polCard._hypedRoundFlag = false;\r\n      }\r\n    });\r\n\r\n    // Apply permanent initiative effects\r\n    const govSlot = state.permanentSlots[player].government;\r\n    const pubSlot = state.permanentSlots[player].public;\r\n\r\n    if (govSlot && govSlot.kind === 'spec') {\r\n      const govInitiative = govSlot as SpecialCard;\r\n      logFunctionCall('applyPermanentInitiative', { slot: 'government', initiative: govInitiative.name }, 'Processing government permanent initiative');\r\n\r\n      if (govInitiative.name === 'Alternative Fakten') {\r\n        // Alle Oligarchen geben +1 Einfluss\r\n        const oligarchCards = pool.filter(c =>\r\n          c.kind === 'pol' &&\r\n          ['Elon Musk', 'Bill Gates', 'George Soros', 'Warren Buffett', 'Mukesh Ambani', 'Jeff Bezos', 'Alisher Usmanov', 'Gautam Adani', 'Jack Ma', 'Zhang Yiming', 'Roman Abramovich'].includes(c.name)\r\n        ) as PoliticianCard[];\r\n\r\n        logDataFlow('board analysis', 'oligarch cards', {\r\n          count: oligarchCards.length,\r\n          cards: oligarchCards.map(c => ({ name: c.name, influence: c.kind === 'pol' ? (c as any).influence : 0 }))\r\n        }, 'Finding oligarch cards for Alternative Fakten effect');\r\n\r\n        let totalInfluenceGained = 0;\r\n        oligarchCards.forEach(card => {\r\n          const oldInfluence = card.influence;\r\n          adjustInfluence(card, 1, 'Alternative Fakten');\r\n          const newInfluence = card.influence;\r\n          totalInfluenceGained += 1;\r\n          logCardEffect('Alternative Fakten', `${card.name} erh√§lt +1 Einfluss (${oldInfluence} ‚Üí ${newInfluence})`);\r\n        });\r\n\r\n        if (oligarchCards.length > 0) {\r\n          logCardEffect('Alternative Fakten', `${oligarchCards.length} Oligarchen gefunden - ${totalInfluenceGained} Punkte zum Gesamteinfluss hinzugef√ºgt`);\r\n        } else {\r\n          logWarning('No oligarch cards found', 'Alternative Fakten effect has no targets');\r\n        }\r\n      }\r\n    }\r\n\r\n    if (pubSlot && pubSlot.kind === 'spec') {\r\n      const pubInitiative = pubSlot as SpecialCard;\r\n      logFunctionCall('applyPermanentInitiative', { slot: 'public', initiative: pubInitiative.name }, 'Processing public permanent initiative');\r\n\r\n      if (pubInitiative.name === 'Algorithmischer Diskurs') {\r\n        // Alle Medien-Karten geben +1 Einfluss\r\n        const mediaCards = pool.filter(c =>\r\n          c.kind === 'pol' &&\r\n          ['Oprah Winfrey', 'Mark Zuckerberg', 'Tim Cook', 'Sam Altman'].includes(c.name)\r\n        ) as PoliticianCard[];\r\n\r\n        logDataFlow('board analysis', 'media cards', {\r\n          count: mediaCards.length,\r\n          cards: mediaCards.map(c => ({ name: c.name, influence: c.kind === 'pol' ? (c as any).influence : 0 }))\r\n        }, 'Finding media cards for Algorithmischer Diskurs effect');\r\n\r\n        let totalInfluenceGained = 0;\r\n        mediaCards.forEach(card => {\r\n          const oldInfluence = card.influence;\r\n          adjustInfluence(card, 1, 'Algorithmischer Diskurs');\r\n          const newInfluence = card.influence;\r\n          totalInfluenceGained += 1;\r\n          logCardEffect('Algorithmischer Diskurs', `${card.name} erh√§lt +1 Einfluss (${oldInfluence} ‚Üí ${newInfluence})`);\r\n        });\r\n\r\n        if (mediaCards.length > 0) {\r\n          logCardEffect('Algorithmischer Diskurs', `${mediaCards.length} Medien-Karten gefunden - ${totalInfluenceGained} Punkte zum Gesamteinfluss hinzugef√ºgt`);\r\n        } else {\r\n          logWarning('No media cards found', 'Algorithmischer Diskurs effect has no targets');\r\n        }\r\n      }\r\n    }\r\n\r\n    // Legacy flags reset is replaced by the new applyStartOfTurnHooks implementation\r\n\r\n    logFunctionCall('applyStartOfTurnHooksLegacy', { player }, 'Legacy turn hooks completed');\r\n  }, [logFunctionCall, logDataFlow, logCardEffect, logWarning]);\r\n\r\n  // Helper: Leadership vorhanden?\r\n  const hasLeadershipCard = (player: Player, state: GameState): boolean => {\r\n    const gov = state.board[player].aussen;\r\n    const names = ['Justin Trudeau'];\r\n    return gov.some(c => c.kind === 'pol' && names.includes(c.name) && !(c as PoliticianCard).deactivated);\r\n  };\r\n\r\n  // Helper: Bewegung vorhanden? (√ñffentlichkeitsreihe)\r\n  const hasMovementCard = (player: Player, state: GameState): boolean => {\r\n    const pub = state.board[player].innen;\r\n    const names = ['Greta Thunberg', 'Malala Yousafzai', 'Ai Weiwei', 'Alexei Navalny'];\r\n    return pub.some(c => c.kind === 'pol' && names.includes(c.name) && !(c as PoliticianCard).deactivated);\r\n  };\r\n\r\n  // Helper: Plattform vorhanden? (√ñffentlichkeitsreihe)\r\n  const hasPlatformCard = (player: Player, state: GameState): boolean => {\r\n    const pub = state.board[player].innen;\r\n    const names = ['Mark Zuckerberg', 'Tim Cook', 'Jack Ma', 'Zhang Yiming'];\r\n    return pub.some(c => c.kind === 'pol' && names.includes(c.name) && !(c as PoliticianCard).deactivated);\r\n  };\r\n\r\n  // Helper: Diplomat vorhanden? (Regierungsreihe)\r\n  const hasDiplomatCard = (player: Player, state: GameState): boolean => {\r\n    const gov = state.board[player].aussen;\r\n    const names = ['Joschka Fischer', 'Sergey Lavrov', 'Ursula von der Leyen', 'Jens Stoltenberg', 'Horst K√∂hler', 'Walter Scheel', 'Hans Dietrich Genscher', 'Colin Powell', 'Condoleezza Rice', 'Christine Lagarde'];\r\n    return gov.some(c => c.kind === 'pol' && names.includes(c.name) && !(c as PoliticianCard).deactivated);\r\n  };\r\n\r\n  // Helper: Einfluss-Transfer durch Dauerhaft-Initiativen blockiert? (Koalitionszwang, Napoleon Komplex)\r\n  const hasInfluenceTransferBlock = (player: Player, state: GameState): boolean => {\r\n    const govSlot = state.permanentSlots[player].government;\r\n    if (!govSlot || govSlot.kind !== 'spec') return false;\r\n    const spec = govSlot as SpecialCard;\r\n    return ['Koalitionszwang', 'Napoleon Komplex'].includes(spec.name);\r\n  };\r\n\r\n  // Helper: Kann Spieler mehrere Interventionen spielen? (Putin-F√§higkeit)\r\n  const canPlayMultipleInterventions = (player: Player, state: GameState): boolean => {\r\n    const govCards = state.board[player].aussen.filter(c => c.kind === 'pol') as PoliticianCard[];\r\n    return govCards.some(c => c.name === 'Vladimir Putin' && !c.deactivated);\r\n  };\r\n\r\n  const selectHandCard = useCallback((index: number | null) => {\r\n    setSelectedHandIndex(index);\r\n  }, []);\r\n\r\n  const passTurn = useCallback((player: Player) => {\r\n    setGameState(prev => {\r\n      if (prev.current !== player) return prev;\r\n\r\n      const newState = { ...prev, passed: { ...prev.passed, [player]: true } };\r\n      log(`Spieler ${player} passt.`);\r\n\r\n      // If both players have passed, resolve the round\r\n      if (newState.passed[1] && newState.passed[2]) {\r\n        return resolveRound(newState);\r\n      }\r\n\r\n      return newState;\r\n    });\r\n  }, [log, resolveRound]);\r\n\r\n  // Diplomat-Einfluss-Transfer Funktion\r\n  const transferInfluence = useCallback((player: Player, fromCardUid: number, toCardUid: number, amount: number) => {\r\n    setGameState(prev => {\r\n      if (prev.current !== player) return prev;\r\n\r\n      const flags = prev.effectFlags?.[player];\r\n      if (!flags || flags.diplomatInfluenceTransferUsed || flags.influenceTransferBlocked) return prev;\r\n      if (!hasDiplomatCard(player, prev)) return prev;\r\n\r\n      // Finde beide Karten in der Regierungsreihe\r\n      const govCards = prev.board[player].aussen;\r\n      const fromCard = govCards.find(c => c.uid === fromCardUid && c.kind === 'pol') as PoliticianCard;\r\n      const toCard = govCards.find(c => c.uid === toCardUid && c.kind === 'pol') as PoliticianCard;\r\n\r\n      if (!fromCard || !toCard || fromCard.influence < amount) return prev;\r\n\r\n      // Transfer durchf√ºhren\r\n      adjustInfluence(fromCard, -amount, 'Diplomat-Transfer');\r\n      adjustInfluence(toCard, amount, 'Diplomat-Transfer');\r\n\r\n      // Flag setzen\r\n      const newFlags = { ...flags, diplomatInfluenceTransferUsed: true };\r\n      const newEffectFlags = { ...prev.effectFlags, [player]: newFlags } as GameState['effectFlags'];\r\n\r\n      log(`P${player} transferiert ${amount} Einfluss von ${fromCard.name} zu ${toCard.name} (Diplomat).`);\r\n\r\n      return {\r\n        ...prev,\r\n        effectFlags: newEffectFlags\r\n      };\r\n    });\r\n  }, [log]);\r\n\r\n  // Active Abilities Management\r\n  const getActiveAbilities = useCallback((player: Player) => {\r\n    return ActiveAbilitiesManager.getAvailableAbilities(player, gameState);\r\n  }, []);\r\n\r\n  const useActiveAbility = useCallback((abilityId: string, targetCardUid?: number) => {\r\n    setGameState(prev => {\r\n      const player = prev.current;\r\n      const abilities = ActiveAbilitiesManager.getAvailableAbilities(player, prev);\r\n      const ability = abilities.find(a => a.id === abilityId);\r\n\r\n      if (!ability || !ActiveAbilitiesManager.canUseAbility(ability, player, prev)) {\r\n        return prev;\r\n      }\r\n\r\n      // Finde Actor Card\r\n      const allCards = [...prev.board[player].innen, ...prev.board[player].aussen].filter(c => c.kind === 'pol') as PoliticianCard[];\r\n      const actorCard = allCards.find(c => ability.id.includes(c.uid.toString()));\r\n\r\n      if (!actorCard) return prev;\r\n\r\n      // Finde Target Card wenn n√∂tig\r\n      let targetCard: PoliticianCard | undefined;\r\n      if (targetCardUid) {\r\n        const allTargets = [...prev.board[1].innen, ...prev.board[1].aussen, ...prev.board[2].innen, ...prev.board[2].aussen].filter(c => c.kind === 'pol') as PoliticianCard[];\r\n        targetCard = allTargets.find(c => c.uid === targetCardUid);\r\n      }\r\n\r\n      const select = {\r\n        type: ability.type,\r\n        actorCard,\r\n        actorPlayer: player,\r\n        targetCard\r\n      } as any;\r\n\r\n      const newState = ActiveAbilitiesManager.executeAbility(ability, select, prev);\r\n\r\n      log(`${actorCard.name} nutzt ${ability.name}${targetCard ? ` auf ${targetCard.name}` : ''}.`);\r\n\r\n      return newState;\r\n    });\r\n  }, [gameState, log]);\r\n\r\n  // Reset aktive F√§higkeiten zu Rundenbeginn\r\n  const resetActiveAbilities = useCallback((state: GameState): GameState => {\r\n    const newState = { ...state };\r\n\r\n    // Reset _activeUsed f√ºr alle Politikerkarten\r\n    [1, 2].forEach(player => {\r\n      const allCards = [...newState.board[player as Player].innen, ...newState.board[player as Player].aussen].filter(c => c.kind === 'pol') as PoliticianCard[];\r\n      allCards.forEach(card => {\r\n        card._activeUsed = false;\r\n      });\r\n    });\r\n\r\n    return newState;\r\n  }, []);\r\n\r\n  // Putin Doppelte Interventionen\r\n  const executePutinDoubleIntervention = useCallback((interventionCardIds: number[]) => {\r\n    setGameState(prev => {\r\n      const player = prev.current;\r\n      const newState = ActiveAbilitiesManager.executePutinDoubleIntervention(prev, player, interventionCardIds, log);\r\n      return newState;\r\n    });\r\n  }, [log]);\r\n\r\n  // Check ob Putin Doppel-Intervention verf√ºgbar ist\r\n  const canUsePutinDoubleIntervention = useCallback((player: Player): boolean => {\r\n    const board = gameState.board[player];\r\n    const allCards = [...board.innen, ...board.aussen].filter(c => c.kind === 'pol') as PoliticianCard[];\r\n    const putin = allCards.find(c => c.name === 'Vladimir Putin');\r\n\r\n    if (!putin || putin.deactivated || putin._activeUsed) return false;\r\n\r\n    const interventions = gameState.hands[player].filter(c => c.kind === 'spec');\r\n    return interventions.length >= 2;\r\n  }, [gameState]);\r\n\r\n  // Manual turn advancement for testing\r\n  const manualAdvanceTurn = useCallback(() => {\r\n    console.log('üîß DEBUG: Manual turn advancement triggered');\r\n    log('üîß DEBUG: Manual turn advancement triggered');\r\n    nextTurn();\r\n  }, [nextTurn, log]);\r\n\r\n  return {\r\n    gameState,\r\n    selectedHandIndex,\r\n    log,\r\n    startNewGame,\r\n    selectHandCard: setSelectedHandIndex,\r\n    scores,\r\n    manualAdvanceTurn, // Manual turn advancement for testing\r\n\r\n    // Core game state functions\r\n    dealStartingHands,\r\n    resolveRound,\r\n    nextTurn: gameActions.nextTurn,\r\n    endTurn: gameActions.endTurn,\r\n    checkAndAdvanceTurn,\r\n    shouldAdvanceTurn,\r\n\r\n    // Helper functions kept for compatibility\r\n    hasLeadershipCard,\r\n    hasMovementCard,\r\n    hasPlatformCard,\r\n    hasDiplomatCard,\r\n    hasInfluenceTransferBlock,\r\n    canPlayMultipleInterventions,\r\n    sumRowWithAuras,\r\n    applyStartOfTurnHooksLegacy,\r\n\r\n    // Functions that were migrated to separate hooks\r\n    passTurn: gameActions.passTurn,\r\n    transferInfluence,\r\n    getActiveAbilities,\r\n    useActiveAbility,\r\n    resetActiveAbilities,\r\n    executePutinDoubleIntervention,\r\n    canUsePutinDoubleIntervention,\r\n\r\n    // Delegate primary functionality to separated hooks\r\n    startMatchWithDecks: gameActions.startMatchWithDecks,\r\n    startMatchVsAI: gameActions.startMatchVsAI,\r\n    playCard: gameActions.playCard,\r\n    activateInstantInitiative: gameActions.activateInstantInitiative,\r\n\r\n    // AI functionality\r\n    runAITurn: gameAI.runAITurn,\r\n    aiEnabled: gameAI.aiEnabled,\r\n    setAiEnabled: gameAI.setAiEnabled,\r\n    aiPreset: gameAI.aiPreset,\r\n    setAiPreset: gameAI.setAiPreset,\r\n\r\n    // Effects functionality\r\n    executeCardEffect,\r\n    processEffectQueue,\r\n    afterQueueResolved,\r\n  };\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}