{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\skank\\\\Videos\\\\Cards\\\\Milchcards\\\\src\\\\ui\\\\withIcons.tsx\";\nimport React from 'react';\nimport { Icon } from './Icon';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst DICT = [{\n  re: /\\bGovernment\\b/gi,\n  icon: 'government_row'\n}, {\n  re: /\\bPublic\\b/gi,\n  icon: 'public_row'\n}, {\n  re: /\\bInitiative(s)?\\b/gi,\n  icon: 'initiative'\n}, {\n  re: /\\bIntervention(s)?|Trap(s)?\\b/gi,\n  icon: 'intervention_trap'\n}, {\n  re: /\\bAP\\b/gi,\n  icon: 'ap'\n}, {\n  re: /\\bInfluence\\b/gi,\n  icon: 'influence'\n}, {\n  re: /\\bRound(s)?\\b/gi,\n  icon: 'round_turn'\n}, {\n  re: /\\bBuff\\b/gi,\n  icon: 'buff_strength'\n}, {\n  re: /\\bDraw\\b/gi,\n  icon: 'draw_cards'\n}, {\n  re: /\\bDiscard\\b/gi,\n  icon: 'discard_cards'\n}, {\n  re: /\\bReturn to hand\\b/gi,\n  icon: 'return_to_hand'\n}, {\n  re: /\\bDeactivate\\b/gi,\n  icon: 'deactivate_card'\n}, {\n  re: /\\bCancel\\b/gi,\n  icon: 'cancel_card'\n}, {\n  re: /\\bShield\\b/gi,\n  icon: 'grant_shield'\n}, {\n  re: /\\bAura\\b/gi,\n  icon: 'aura_ongoing'\n}, {\n  re: /\\bScience\\b/gi,\n  icon: 'aura_science'\n}, {\n  re: /\\bHealth\\b/gi,\n  icon: 'aura_health'\n}, {\n  re: /\\bMilitary\\b/gi,\n  icon: 'aura_military_penalty'\n}, {\n  re: /\\bRegister Trap\\b/gi,\n  icon: 'register_trap'\n}, {\n  re: /\\bInitiative Activated\\b/gi,\n  icon: 'initiative_activated'\n}, {\n  re: /\\bStart of turn\\b/gi,\n  icon: 'start_of_turn'\n}, {\n  re: /\\bCopy\\b/gi,\n  icon: 'copy_log'\n}, {\n  re: /\\bClear\\b/gi,\n  icon: 'clear_log'\n}, {\n  re: /\\bSearch\\b/gi,\n  icon: 'search'\n}, {\n  re: /\\bBudget\\b/gi,\n  icon: 'budget_money'\n}, {\n  re: /\\bLog\\b/gi,\n  icon: 'game_log'\n}, {\n  re: /\\bMedien\\b/gi,\n  icon: 'medien'\n}, {\n  re: /\\bOligarch(en)?\\b/gi,\n  icon: 'oligarch'\n}, {\n  re: /\\bStaat(lich|en)?\\b/gi,\n  icon: 'staat'\n}, {\n  re: /\\bTech\\b/gi,\n  icon: 'tech'\n}, {\n  re: /\\bWissenschaft(ler)?\\b/gi,\n  icon: 'wissenschaft'\n}, {\n  re: /\\bAktivist(en)?\\b/gi,\n  icon: 'aktivist'\n}, {\n  re: /\\bDenker\\b/gi,\n  icon: 'denker'\n}];\nexport function withIcons(text, size = 14) {\n  // Ersetzt [ICON:name]-Tokens und bekannte Begriffe durch [Icon + Text]-Spans\n  // First, tokenize explicit ICON tokens like [ICON:oligarch]\n  const parts = [];\n  const tokenRe = /\\[ICON:([a-z_]+)\\]/gi;\n  let lastIndex = 0;\n  let m;\n  while ((m = tokenRe.exec(text)) !== null) {\n    const idx = m.index;\n    if (idx > lastIndex) parts.push(text.substring(lastIndex, idx));\n    const token = m[1].toLowerCase();\n    // Map token to existing icon name mapping where possible\n    const tokenToIcon = {\n      medien: 'medien',\n      oligarch: 'oligarch',\n      staat: 'staat',\n      tech: 'tech',\n      wissenschaft: 'wissenschaft',\n      aktivist: 'aktivist',\n      denker: 'denker'\n    };\n    const iconName = tokenToIcon[token];\n    if (iconName) {\n      parts.push(/*#__PURE__*/_jsxDEV(Icon, {\n        name: iconName,\n        size: size\n      }, `tok-${token}-${idx}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 18\n      }, this));\n    } else {\n      // If unknown token, keep raw text\n      parts.push(m[0]);\n    }\n    lastIndex = idx + m[0].length;\n  }\n  if (lastIndex < text.length) parts.push(text.substring(lastIndex));\n  DICT.forEach(({\n    re,\n    icon\n  }) => {\n    for (let i = 0; i < parts.length; i++) {\n      const chunk = parts[i];\n      if (typeof chunk !== 'string') continue;\n      const segs = chunk.split(re);\n      if (segs.length === 1) continue;\n      const matches = chunk.match(re) || [];\n      const rebuilt = [];\n      segs.forEach((s, idx) => {\n        rebuilt.push(s);\n        if (idx < matches.length) {\n          rebuilt.push(/*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              display: 'inline-flex',\n              alignItems: 'center',\n              gap: 4\n            },\n            children: [/*#__PURE__*/_jsxDEV(Icon, {\n              name: icon,\n              size: size\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: matches[idx]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 15\n            }, this)]\n          }, `${icon}-${i}-${idx}`, true, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 13\n          }, this));\n        }\n      });\n      parts.splice(i, 1, ...rebuilt);\n      i += rebuilt.length - 1;\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: parts\n  }, void 0, false);\n}","map":{"version":3,"names":["React","Icon","jsxDEV","_jsxDEV","Fragment","_Fragment","DICT","re","icon","withIcons","text","size","parts","tokenRe","lastIndex","m","exec","idx","index","push","substring","token","toLowerCase","tokenToIcon","medien","oligarch","staat","tech","wissenschaft","aktivist","denker","iconName","name","fileName","_jsxFileName","lineNumber","columnNumber","length","forEach","i","chunk","segs","split","matches","match","rebuilt","s","style","display","alignItems","gap","children","splice"],"sources":["C:/Users/skank/Videos/Cards/Milchcards/src/ui/withIcons.tsx"],"sourcesContent":["import React from 'react';\r\nimport { Icon, IconName } from './Icon';\r\n\r\nconst DICT: Array<{ re: RegExp; icon: IconName; label?: string }> = [\r\n  { re: /\\bGovernment\\b/gi, icon: 'government_row' },\r\n  { re: /\\bPublic\\b/gi, icon: 'public_row' },\r\n  { re: /\\bInitiative(s)?\\b/gi, icon: 'initiative' },\r\n  { re: /\\bIntervention(s)?|Trap(s)?\\b/gi, icon: 'intervention_trap' },\r\n  { re: /\\bAP\\b/gi, icon: 'ap' },\r\n  { re: /\\bInfluence\\b/gi, icon: 'influence' },\r\n  { re: /\\bRound(s)?\\b/gi, icon: 'round_turn' },\r\n  { re: /\\bBuff\\b/gi, icon: 'buff_strength' },\r\n  { re: /\\bDraw\\b/gi, icon: 'draw_cards' },\r\n  { re: /\\bDiscard\\b/gi, icon: 'discard_cards' },\r\n  { re: /\\bReturn to hand\\b/gi, icon: 'return_to_hand' },\r\n  { re: /\\bDeactivate\\b/gi, icon: 'deactivate_card' },\r\n  { re: /\\bCancel\\b/gi, icon: 'cancel_card' },\r\n  { re: /\\bShield\\b/gi, icon: 'grant_shield' },\r\n  { re: /\\bAura\\b/gi, icon: 'aura_ongoing' },\r\n  { re: /\\bScience\\b/gi, icon: 'aura_science' },\r\n  { re: /\\bHealth\\b/gi, icon: 'aura_health' },\r\n  { re: /\\bMilitary\\b/gi, icon: 'aura_military_penalty' },\r\n  { re: /\\bRegister Trap\\b/gi, icon: 'register_trap' },\r\n  { re: /\\bInitiative Activated\\b/gi, icon: 'initiative_activated' },\r\n  { re: /\\bStart of turn\\b/gi, icon: 'start_of_turn' },\r\n  { re: /\\bCopy\\b/gi, icon: 'copy_log' },\r\n  { re: /\\bClear\\b/gi, icon: 'clear_log' },\r\n  { re: /\\bSearch\\b/gi, icon: 'search' },\r\n  { re: /\\bBudget\\b/gi, icon: 'budget_money' },\r\n  { re: /\\bLog\\b/gi, icon: 'game_log' },\r\n  { re: /\\bMedien\\b/gi, icon: 'medien' },\r\n  { re: /\\bOligarch(en)?\\b/gi, icon: 'oligarch' },\r\n  { re: /\\bStaat(lich|en)?\\b/gi, icon: 'staat' },\r\n  { re: /\\bTech\\b/gi, icon: 'tech' },\r\n  { re: /\\bWissenschaft(ler)?\\b/gi, icon: 'wissenschaft' },\r\n  { re: /\\bAktivist(en)?\\b/gi, icon: 'aktivist' },\r\n  { re: /\\bDenker\\b/gi, icon: 'denker' },\r\n];\r\n\r\nexport function withIcons(text: string, size = 14) {\r\n  // Ersetzt [ICON:name]-Tokens und bekannte Begriffe durch [Icon + Text]-Spans\r\n  // First, tokenize explicit ICON tokens like [ICON:oligarch]\r\n  const parts: React.ReactNode[] = [];\r\n  const tokenRe = /\\[ICON:([a-z_]+)\\]/gi;\r\n  let lastIndex = 0;\r\n  let m: RegExpExecArray | null;\r\n  while ((m = tokenRe.exec(text)) !== null) {\r\n    const idx = m.index;\r\n    if (idx > lastIndex) parts.push(text.substring(lastIndex, idx));\r\n    const token = m[1].toLowerCase();\r\n    // Map token to existing icon name mapping where possible\r\n    const tokenToIcon: Record<string, IconName> = {\r\n      medien: 'medien',\r\n      oligarch: 'oligarch',\r\n      staat: 'staat',\r\n      tech: 'tech',\r\n      wissenschaft: 'wissenschaft',\r\n      aktivist: 'aktivist',\r\n      denker: 'denker',\r\n    } as any;\r\n    const iconName = tokenToIcon[token] as IconName | undefined;\r\n    if (iconName) {\r\n      parts.push(<Icon key={`tok-${token}-${idx}`} name={iconName} size={size} />);\r\n    } else {\r\n      // If unknown token, keep raw text\r\n      parts.push(m[0]);\r\n    }\r\n    lastIndex = idx + m[0].length;\r\n  }\r\n  if (lastIndex < text.length) parts.push(text.substring(lastIndex));\r\n  DICT.forEach(({ re, icon }) => {\r\n    for (let i = 0; i < parts.length; i++) {\r\n      const chunk = parts[i];\r\n      if (typeof chunk !== 'string') continue;\r\n      const segs = chunk.split(re);\r\n      if (segs.length === 1) continue;\r\n      const matches = chunk.match(re) || [];\r\n      const rebuilt: React.ReactNode[] = [];\r\n      segs.forEach((s, idx) => {\r\n        rebuilt.push(s);\r\n        if (idx < matches.length) {\r\n          rebuilt.push(\r\n            <span key={`${icon}-${i}-${idx}`} style={{ display: 'inline-flex', alignItems: 'center', gap: 4 }}>\r\n              <Icon name={icon} size={size} />\r\n              <span>{matches[idx]}</span>\r\n            </span>\r\n          );\r\n        }\r\n      });\r\n      parts.splice(i, 1, ...rebuilt);\r\n      i += rebuilt.length - 1;\r\n    }\r\n  });\r\n  return <>{parts}</>;\r\n}\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,IAAI,QAAkB,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAExC,MAAMC,IAA2D,GAAG,CAClE;EAAEC,EAAE,EAAE,kBAAkB;EAAEC,IAAI,EAAE;AAAiB,CAAC,EAClD;EAAED,EAAE,EAAE,cAAc;EAAEC,IAAI,EAAE;AAAa,CAAC,EAC1C;EAAED,EAAE,EAAE,sBAAsB;EAAEC,IAAI,EAAE;AAAa,CAAC,EAClD;EAAED,EAAE,EAAE,iCAAiC;EAAEC,IAAI,EAAE;AAAoB,CAAC,EACpE;EAAED,EAAE,EAAE,UAAU;EAAEC,IAAI,EAAE;AAAK,CAAC,EAC9B;EAAED,EAAE,EAAE,iBAAiB;EAAEC,IAAI,EAAE;AAAY,CAAC,EAC5C;EAAED,EAAE,EAAE,iBAAiB;EAAEC,IAAI,EAAE;AAAa,CAAC,EAC7C;EAAED,EAAE,EAAE,YAAY;EAAEC,IAAI,EAAE;AAAgB,CAAC,EAC3C;EAAED,EAAE,EAAE,YAAY;EAAEC,IAAI,EAAE;AAAa,CAAC,EACxC;EAAED,EAAE,EAAE,eAAe;EAAEC,IAAI,EAAE;AAAgB,CAAC,EAC9C;EAAED,EAAE,EAAE,sBAAsB;EAAEC,IAAI,EAAE;AAAiB,CAAC,EACtD;EAAED,EAAE,EAAE,kBAAkB;EAAEC,IAAI,EAAE;AAAkB,CAAC,EACnD;EAAED,EAAE,EAAE,cAAc;EAAEC,IAAI,EAAE;AAAc,CAAC,EAC3C;EAAED,EAAE,EAAE,cAAc;EAAEC,IAAI,EAAE;AAAe,CAAC,EAC5C;EAAED,EAAE,EAAE,YAAY;EAAEC,IAAI,EAAE;AAAe,CAAC,EAC1C;EAAED,EAAE,EAAE,eAAe;EAAEC,IAAI,EAAE;AAAe,CAAC,EAC7C;EAAED,EAAE,EAAE,cAAc;EAAEC,IAAI,EAAE;AAAc,CAAC,EAC3C;EAAED,EAAE,EAAE,gBAAgB;EAAEC,IAAI,EAAE;AAAwB,CAAC,EACvD;EAAED,EAAE,EAAE,qBAAqB;EAAEC,IAAI,EAAE;AAAgB,CAAC,EACpD;EAAED,EAAE,EAAE,4BAA4B;EAAEC,IAAI,EAAE;AAAuB,CAAC,EAClE;EAAED,EAAE,EAAE,qBAAqB;EAAEC,IAAI,EAAE;AAAgB,CAAC,EACpD;EAAED,EAAE,EAAE,YAAY;EAAEC,IAAI,EAAE;AAAW,CAAC,EACtC;EAAED,EAAE,EAAE,aAAa;EAAEC,IAAI,EAAE;AAAY,CAAC,EACxC;EAAED,EAAE,EAAE,cAAc;EAAEC,IAAI,EAAE;AAAS,CAAC,EACtC;EAAED,EAAE,EAAE,cAAc;EAAEC,IAAI,EAAE;AAAe,CAAC,EAC5C;EAAED,EAAE,EAAE,WAAW;EAAEC,IAAI,EAAE;AAAW,CAAC,EACrC;EAAED,EAAE,EAAE,cAAc;EAAEC,IAAI,EAAE;AAAS,CAAC,EACtC;EAAED,EAAE,EAAE,qBAAqB;EAAEC,IAAI,EAAE;AAAW,CAAC,EAC/C;EAAED,EAAE,EAAE,uBAAuB;EAAEC,IAAI,EAAE;AAAQ,CAAC,EAC9C;EAAED,EAAE,EAAE,YAAY;EAAEC,IAAI,EAAE;AAAO,CAAC,EAClC;EAAED,EAAE,EAAE,0BAA0B;EAAEC,IAAI,EAAE;AAAe,CAAC,EACxD;EAAED,EAAE,EAAE,qBAAqB;EAAEC,IAAI,EAAE;AAAW,CAAC,EAC/C;EAAED,EAAE,EAAE,cAAc;EAAEC,IAAI,EAAE;AAAS,CAAC,CACvC;AAED,OAAO,SAASC,SAASA,CAACC,IAAY,EAAEC,IAAI,GAAG,EAAE,EAAE;EACjD;EACA;EACA,MAAMC,KAAwB,GAAG,EAAE;EACnC,MAAMC,OAAO,GAAG,sBAAsB;EACtC,IAAIC,SAAS,GAAG,CAAC;EACjB,IAAIC,CAAyB;EAC7B,OAAO,CAACA,CAAC,GAAGF,OAAO,CAACG,IAAI,CAACN,IAAI,CAAC,MAAM,IAAI,EAAE;IACxC,MAAMO,GAAG,GAAGF,CAAC,CAACG,KAAK;IACnB,IAAID,GAAG,GAAGH,SAAS,EAAEF,KAAK,CAACO,IAAI,CAACT,IAAI,CAACU,SAAS,CAACN,SAAS,EAAEG,GAAG,CAAC,CAAC;IAC/D,MAAMI,KAAK,GAAGN,CAAC,CAAC,CAAC,CAAC,CAACO,WAAW,CAAC,CAAC;IAChC;IACA,MAAMC,WAAqC,GAAG;MAC5CC,MAAM,EAAE,QAAQ;MAChBC,QAAQ,EAAE,UAAU;MACpBC,KAAK,EAAE,OAAO;MACdC,IAAI,EAAE,MAAM;MACZC,YAAY,EAAE,cAAc;MAC5BC,QAAQ,EAAE,UAAU;MACpBC,MAAM,EAAE;IACV,CAAQ;IACR,MAAMC,QAAQ,GAAGR,WAAW,CAACF,KAAK,CAAyB;IAC3D,IAAIU,QAAQ,EAAE;MACZnB,KAAK,CAACO,IAAI,cAAChB,OAAA,CAACF,IAAI;QAA6B+B,IAAI,EAAED,QAAS;QAACpB,IAAI,EAAEA;MAAK,GAAlD,OAAOU,KAAK,IAAIJ,GAAG,EAAE;QAAAgB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAA+B,CAAC,CAAC;IAC9E,CAAC,MAAM;MACL;MACAxB,KAAK,CAACO,IAAI,CAACJ,CAAC,CAAC,CAAC,CAAC,CAAC;IAClB;IACAD,SAAS,GAAGG,GAAG,GAAGF,CAAC,CAAC,CAAC,CAAC,CAACsB,MAAM;EAC/B;EACA,IAAIvB,SAAS,GAAGJ,IAAI,CAAC2B,MAAM,EAAEzB,KAAK,CAACO,IAAI,CAACT,IAAI,CAACU,SAAS,CAACN,SAAS,CAAC,CAAC;EAClER,IAAI,CAACgC,OAAO,CAAC,CAAC;IAAE/B,EAAE;IAAEC;EAAK,CAAC,KAAK;IAC7B,KAAK,IAAI+B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG3B,KAAK,CAACyB,MAAM,EAAEE,CAAC,EAAE,EAAE;MACrC,MAAMC,KAAK,GAAG5B,KAAK,CAAC2B,CAAC,CAAC;MACtB,IAAI,OAAOC,KAAK,KAAK,QAAQ,EAAE;MAC/B,MAAMC,IAAI,GAAGD,KAAK,CAACE,KAAK,CAACnC,EAAE,CAAC;MAC5B,IAAIkC,IAAI,CAACJ,MAAM,KAAK,CAAC,EAAE;MACvB,MAAMM,OAAO,GAAGH,KAAK,CAACI,KAAK,CAACrC,EAAE,CAAC,IAAI,EAAE;MACrC,MAAMsC,OAA0B,GAAG,EAAE;MACrCJ,IAAI,CAACH,OAAO,CAAC,CAACQ,CAAC,EAAE7B,GAAG,KAAK;QACvB4B,OAAO,CAAC1B,IAAI,CAAC2B,CAAC,CAAC;QACf,IAAI7B,GAAG,GAAG0B,OAAO,CAACN,MAAM,EAAE;UACxBQ,OAAO,CAAC1B,IAAI,cACVhB,OAAA;YAAkC4C,KAAK,EAAE;cAAEC,OAAO,EAAE,aAAa;cAAEC,UAAU,EAAE,QAAQ;cAAEC,GAAG,EAAE;YAAE,CAAE;YAAAC,QAAA,gBAChGhD,OAAA,CAACF,IAAI;cAAC+B,IAAI,EAAExB,IAAK;cAACG,IAAI,EAAEA;YAAK;cAAAsB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC,eAChCjC,OAAA;cAAAgD,QAAA,EAAOR,OAAO,CAAC1B,GAAG;YAAC;cAAAgB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAO,CAAC;UAAA,GAFlB,GAAG5B,IAAI,IAAI+B,CAAC,IAAItB,GAAG,EAAE;YAAAgB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAG1B,CACR,CAAC;QACH;MACF,CAAC,CAAC;MACFxB,KAAK,CAACwC,MAAM,CAACb,CAAC,EAAE,CAAC,EAAE,GAAGM,OAAO,CAAC;MAC9BN,CAAC,IAAIM,OAAO,CAACR,MAAM,GAAG,CAAC;IACzB;EACF,CAAC,CAAC;EACF,oBAAOlC,OAAA,CAAAE,SAAA;IAAA8C,QAAA,EAAGvC;EAAK,gBAAG,CAAC;AACrB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}