{"ast":null,"code":"// Animation Viewer Modal for QTE System\nimport { SpriteAnimator } from \"./spriteAnimator\";\nimport { loadAtlas } from \"./atlasLoader\";\nexport class AnimationViewer {\n  constructor() {\n    this.modal = void 0;\n    this.canvas = void 0;\n    this.ctx = void 0;\n    this.currentAnimationIndex = 0;\n    this.animations = [];\n    this.animators = new Map();\n    this.isVisible = false;\n    this.animationId = null;\n    this.currentCharacter = \"ninja\";\n    this.createModal();\n    this.setupEventListeners();\n    this.loadAnimations();\n  }\n  createModal() {\n    // Create modal container\n    this.modal = document.createElement('div');\n    this.modal.style.cssText = `\n      position: fixed;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      background: rgba(0, 0, 0, 0.8);\n      display: none;\n      z-index: 10000;\n      font-family: Arial, sans-serif;\n    `;\n\n    // Create modal content\n    const content = document.createElement('div');\n    content.style.cssText = `\n      position: absolute;\n      top: 50%;\n      left: 50%;\n      transform: translate(-50%, -50%);\n      background: #1a1a1a;\n      border: 2px solid #333;\n      border-radius: 8px;\n      padding: 20px;\n      min-width: 600px;\n      max-width: 90vw;\n      max-height: 90vh;\n      overflow: hidden;\n    `;\n\n    // Create header\n    const header = document.createElement('div');\n    header.style.cssText = `\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      margin-bottom: 20px;\n      border-bottom: 1px solid #333;\n      padding-bottom: 10px;\n    `;\n    const title = document.createElement('h2');\n    title.textContent = 'QTE Animation Viewer';\n    title.style.cssText = `\n      color: #fff;\n      margin: 0;\n      font-size: 24px;\n    `;\n    const closeBtn = document.createElement('button');\n    closeBtn.textContent = '×';\n    closeBtn.style.cssText = `\n      background: #ff4444;\n      color: white;\n      border: none;\n      border-radius: 4px;\n      width: 30px;\n      height: 30px;\n      font-size: 18px;\n      cursor: pointer;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n    `;\n    closeBtn.onclick = () => this.hide();\n    header.appendChild(title);\n    header.appendChild(closeBtn);\n\n    // Create character selector\n    const characterSelector = document.createElement('div');\n    characterSelector.style.cssText = `\n      margin-bottom: 20px;\n      display: flex;\n      gap: 10px;\n      align-items: center;\n    `;\n    const characterLabel = document.createElement('label');\n    characterLabel.textContent = 'Character:';\n    characterLabel.style.cssText = 'color: #fff; font-weight: bold;';\n    const characterSelect = document.createElement('select');\n    characterSelect.style.cssText = `\n      background: #333;\n      color: #fff;\n      border: 1px solid #555;\n      border-radius: 4px;\n      padding: 5px 10px;\n      font-size: 14px;\n    `;\n    characterSelect.innerHTML = `\n      <option value=\"ninja\">Ninja</option>\n      <option value=\"cyboard\">Cyboard</option>\n    `;\n    characterSelect.onchange = e => {\n      this.currentCharacter = e.target.value;\n      this.loadAnimations();\n      this.currentAnimationIndex = 0;\n      this.updateDisplay();\n    };\n    characterSelector.appendChild(characterLabel);\n    characterSelector.appendChild(characterSelect);\n\n    // Create animation display area\n    const displayArea = document.createElement('div');\n    displayArea.style.cssText = `\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      gap: 20px;\n    `;\n\n    // Create canvas for animation\n    this.canvas = document.createElement('canvas');\n    this.canvas.width = 256;\n    this.canvas.height = 256;\n    this.canvas.style.cssText = `\n      border: 2px solid #555;\n      border-radius: 4px;\n      background: #000;\n      image-rendering: pixelated;\n      image-rendering: -moz-crisp-edges;\n      image-rendering: crisp-edges;\n    `;\n    this.ctx = this.canvas.getContext('2d');\n\n    // Create animation info display\n    const infoDisplay = document.createElement('div');\n    infoDisplay.id = 'animation-info';\n    infoDisplay.style.cssText = `\n      color: #fff;\n      text-align: center;\n      font-size: 16px;\n      min-height: 60px;\n      display: flex;\n      flex-direction: column;\n      justify-content: center;\n    `;\n\n    // Create navigation controls\n    const controls = document.createElement('div');\n    controls.style.cssText = `\n      display: flex;\n      gap: 10px;\n      align-items: center;\n      justify-content: center;\n    `;\n    const prevBtn = document.createElement('button');\n    prevBtn.textContent = '◀ Previous';\n    prevBtn.style.cssText = `\n      background: #444;\n      color: white;\n      border: 1px solid #666;\n      border-radius: 4px;\n      padding: 8px 16px;\n      cursor: pointer;\n      font-size: 14px;\n    `;\n    prevBtn.onclick = () => this.previousAnimation();\n    const nextBtn = document.createElement('button');\n    nextBtn.textContent = 'Next ▶';\n    nextBtn.style.cssText = `\n      background: #444;\n      color: white;\n      border: 1px solid #666;\n      border-radius: 4px;\n      padding: 8px 16px;\n      cursor: pointer;\n      font-size: 14px;\n    `;\n    nextBtn.onclick = () => this.nextAnimation();\n    const playPauseBtn = document.createElement('button');\n    playPauseBtn.id = 'play-pause-btn';\n    playPauseBtn.textContent = '⏸ Pause';\n    playPauseBtn.style.cssText = `\n      background: #0066cc;\n      color: white;\n      border: 1px solid #0088ff;\n      border-radius: 4px;\n      padding: 8px 16px;\n      cursor: pointer;\n      font-size: 14px;\n    `;\n    playPauseBtn.onclick = () => this.togglePlayPause();\n    controls.appendChild(prevBtn);\n    controls.appendChild(playPauseBtn);\n    controls.appendChild(nextBtn);\n\n    // Create animation list\n    const animationList = document.createElement('div');\n    animationList.id = 'animation-list';\n    animationList.style.cssText = `\n      margin-top: 20px;\n      max-height: 200px;\n      overflow-y: auto;\n      border: 1px solid #333;\n      border-radius: 4px;\n      background: #222;\n    `;\n    displayArea.appendChild(this.canvas);\n    displayArea.appendChild(infoDisplay);\n    displayArea.appendChild(controls);\n    displayArea.appendChild(animationList);\n    content.appendChild(header);\n    content.appendChild(characterSelector);\n    content.appendChild(displayArea);\n    this.modal.appendChild(content);\n    document.body.appendChild(this.modal);\n  }\n  setupEventListeners() {\n    // Keyboard navigation\n    document.addEventListener('keydown', e => {\n      if (!this.isVisible) return;\n      switch (e.key) {\n        case 'Escape':\n          this.hide();\n          break;\n        case 'ArrowLeft':\n          this.previousAnimation();\n          break;\n        case 'ArrowRight':\n          this.nextAnimation();\n          break;\n        case ' ':\n          e.preventDefault();\n          this.togglePlayPause();\n          break;\n      }\n    });\n  }\n  async loadAnimations() {\n    try {\n      // Load atlas for current character\n      const atlas = await loadAtlas(`/qte/${this.currentCharacter}`);\n\n      // Clear previous animations\n      this.animations = [];\n      this.animators.clear();\n\n      // Get actual frame counts from atlas data\n      const getFrameCount = animationName => {\n        if (atlas.animations && atlas.animations[animationName]) {\n          return atlas.animations[animationName].frames.length;\n        }\n\n        // Fallback: count frames in the frames object\n        let count = 0;\n        for (const key in atlas.frames) {\n          if (key.startsWith(`${animationName}_`)) {\n            count++;\n          }\n        }\n        return count;\n      };\n\n      // Define animation configurations with actual frame counts\n      const animationConfigs = [{\n        name: 'idle',\n        frames: getFrameCount('idle'),\n        fps: 6,\n        loop: true\n      }, {\n        name: 'walk',\n        frames: getFrameCount('walk'),\n        fps: 10,\n        loop: true\n      }, {\n        name: 'jump',\n        frames: getFrameCount('jump'),\n        fps: 12,\n        loop: false\n      }, {\n        name: 'attack',\n        frames: getFrameCount('attack'),\n        fps: 12,\n        loop: false\n      }, {\n        name: 'parry',\n        frames: getFrameCount('parry'),\n        fps: 10,\n        loop: false\n      }, {\n        name: 'spawn',\n        frames: getFrameCount('spawn'),\n        fps: 8,\n        loop: false\n      }, {\n        name: 'defeat',\n        frames: getFrameCount('defeat'),\n        fps: 6,\n        loop: false\n      }, {\n        name: 'projectile',\n        frames: getFrameCount('projectile'),\n        fps: 12,\n        loop: true\n      }, {\n        name: 'ranged',\n        frames: getFrameCount('ranged'),\n        fps: 12,\n        loop: false\n      }, {\n        name: 'blast',\n        frames: getFrameCount('blast'),\n        fps: 12,\n        loop: false\n      }];\n\n      // Create animations and animators\n      for (const config of animationConfigs) {\n        var _atlas$animations$con;\n        const animationInfo = {\n          name: config.name,\n          character: this.currentCharacter,\n          frames: config.frames,\n          fps: config.fps,\n          loop: config.loop\n        };\n\n        // Create sprite animator for this animation\n        const animator = new SpriteAnimator(atlas.image, 256, 256, {\n          [config.name]: {\n            src: `${this.currentCharacter}/${config.name}_256x256_${config.frames}.png`,\n            frames: config.frames,\n            fps: config.fps,\n            loop: config.loop,\n            frameW: 256,\n            frameH: 256,\n            rects: ((_atlas$animations$con = atlas.animations[config.name]) === null || _atlas$animations$con === void 0 ? void 0 : _atlas$animations$con.frames) || [],\n            image: atlas.image\n          }\n        });\n\n        // Patch with atlas data if available\n        if (atlas.animations[config.name]) {\n          const animDef = animator.animations[config.name];\n          animDef.rects = atlas.animations[config.name].frames;\n          animDef.image = atlas.image;\n          animDef.frames = atlas.animations[config.name].frames.length;\n          animDef.imageLoaded = true;\n          animDef.imageBroken = false;\n        }\n        this.animations.push(animationInfo);\n        this.animators.set(config.name, animator);\n      }\n      this.updateAnimationList();\n      this.updateDisplay();\n    } catch (error) {\n      console.error('Failed to load animations:', error);\n    }\n  }\n  updateAnimationList() {\n    const list = document.getElementById('animation-list');\n    if (!list) return;\n    list.innerHTML = '';\n    this.animations.forEach((anim, index) => {\n      const item = document.createElement('div');\n      item.style.cssText = `\n        padding: 8px 12px;\n        cursor: pointer;\n        border-bottom: 1px solid #333;\n        color: #fff;\n        font-size: 14px;\n        transition: background-color 0.2s;\n      `;\n      if (index === this.currentAnimationIndex) {\n        item.style.backgroundColor = '#0066cc';\n      }\n      item.innerHTML = `\n        <div style=\"font-weight: bold;\">${anim.name}</div>\n        <div style=\"font-size: 12px; color: #aaa;\">\n          ${anim.frames} frames • ${anim.fps} fps • ${anim.loop ? 'Loop' : 'Once'}\n        </div>\n      `;\n      item.onclick = () => {\n        this.currentAnimationIndex = index;\n        this.updateDisplay();\n        this.updateAnimationList();\n      };\n      item.onmouseenter = () => {\n        if (index !== this.currentAnimationIndex) {\n          item.style.backgroundColor = '#444';\n        }\n      };\n      item.onmouseleave = () => {\n        if (index !== this.currentAnimationIndex) {\n          item.style.backgroundColor = 'transparent';\n        }\n      };\n      list.appendChild(item);\n    });\n  }\n  updateDisplay() {\n    if (this.animations.length === 0) return;\n    const currentAnim = this.animations[this.currentAnimationIndex];\n    const animator = this.animators.get(currentAnim.name);\n    if (!animator) return;\n\n    // Set the animation state\n    animator.setState(currentAnim.name);\n\n    // Update info display\n    const infoDisplay = document.getElementById('animation-info');\n    if (infoDisplay) {\n      infoDisplay.innerHTML = `\n        <div style=\"font-size: 20px; font-weight: bold; margin-bottom: 5px;\">\n          ${currentAnim.name.toUpperCase()}\n        </div>\n        <div style=\"font-size: 14px; color: #aaa;\">\n          ${currentAnim.character} • ${currentAnim.frames} frames • ${currentAnim.fps} fps • ${currentAnim.loop ? 'Looping' : 'Single play'}\n        </div>\n      `;\n    }\n\n    // Start animation loop if not already running\n    if (!this.animationId) {\n      this.startAnimationLoop();\n    }\n  }\n  startAnimationLoop() {\n    const animate = timestamp => {\n      if (!this.isVisible) {\n        this.animationId = null;\n        return;\n      }\n      const currentAnim = this.animations[this.currentAnimationIndex];\n      const animator = this.animators.get(currentAnim.name);\n      if (animator) {\n        // Clear canvas\n        this.ctx.fillStyle = '#000';\n        this.ctx.fillRect(0, 0, 256, 256);\n\n        // Update and draw animation\n        animator.update(1 / 60); // Assume 60fps\n        animator.draw(this.ctx, 0, 0, 256, 256);\n      }\n      this.animationId = requestAnimationFrame(animate);\n    };\n    this.animationId = requestAnimationFrame(animate);\n  }\n  previousAnimation() {\n    if (this.animations.length === 0) return;\n    this.currentAnimationIndex = (this.currentAnimationIndex - 1 + this.animations.length) % this.animations.length;\n    this.updateDisplay();\n    this.updateAnimationList();\n  }\n  nextAnimation() {\n    if (this.animations.length === 0) return;\n    this.currentAnimationIndex = (this.currentAnimationIndex + 1) % this.animations.length;\n    this.updateDisplay();\n    this.updateAnimationList();\n  }\n  togglePlayPause() {\n    const btn = document.getElementById('play-pause-btn');\n    if (!btn) return;\n    if (this.animationId) {\n      // Pause\n      cancelAnimationFrame(this.animationId);\n      this.animationId = null;\n      btn.textContent = '▶ Play';\n      btn.style.background = '#0066cc';\n    } else {\n      // Play\n      this.startAnimationLoop();\n      btn.textContent = '⏸ Pause';\n      btn.style.background = '#cc6600';\n    }\n  }\n  show() {\n    this.isVisible = true;\n    this.modal.style.display = 'block';\n    this.updateDisplay();\n  }\n  hide() {\n    this.isVisible = false;\n    this.modal.style.display = 'none';\n    if (this.animationId) {\n      cancelAnimationFrame(this.animationId);\n      this.animationId = null;\n    }\n  }\n  toggle() {\n    if (this.isVisible) {\n      this.hide();\n    } else {\n      this.show();\n    }\n  }\n}\n\n// Global instance\nlet animationViewer = null;\nexport function getAnimationViewer() {\n  if (!animationViewer) {\n    animationViewer = new AnimationViewer();\n  }\n  return animationViewer;\n}\n\n// Add global function for easy access\nwindow.showAnimationViewer = () => getAnimationViewer().show();\nwindow.hideAnimationViewer = () => getAnimationViewer().hide();\nwindow.toggleAnimationViewer = () => getAnimationViewer().toggle();","map":{"version":3,"names":["SpriteAnimator","loadAtlas","AnimationViewer","constructor","modal","canvas","ctx","currentAnimationIndex","animations","animators","Map","isVisible","animationId","currentCharacter","createModal","setupEventListeners","loadAnimations","document","createElement","style","cssText","content","header","title","textContent","closeBtn","onclick","hide","appendChild","characterSelector","characterLabel","characterSelect","innerHTML","onchange","e","target","value","updateDisplay","displayArea","width","height","getContext","infoDisplay","id","controls","prevBtn","previousAnimation","nextBtn","nextAnimation","playPauseBtn","togglePlayPause","animationList","body","addEventListener","key","preventDefault","atlas","clear","getFrameCount","animationName","frames","length","count","startsWith","animationConfigs","name","fps","loop","config","_atlas$animations$con","animationInfo","character","animator","image","src","frameW","frameH","rects","animDef","imageLoaded","imageBroken","push","set","updateAnimationList","error","console","list","getElementById","forEach","anim","index","item","backgroundColor","onmouseenter","onmouseleave","currentAnim","get","setState","toUpperCase","startAnimationLoop","animate","timestamp","fillStyle","fillRect","update","draw","requestAnimationFrame","btn","cancelAnimationFrame","background","show","display","toggle","animationViewer","getAnimationViewer","window","showAnimationViewer","hideAnimationViewer","toggleAnimationViewer"],"sources":["C:/Users/skank/Videos/Cards/Milchcards/src/qte/animationViewer.ts"],"sourcesContent":["// Animation Viewer Modal for QTE System\r\nimport { SpriteAnimator } from \"./spriteAnimator\";\r\nimport { loadAtlas } from \"./atlasLoader\";\r\n\r\nexport interface AnimationInfo {\r\n  name: string;\r\n  character: string;\r\n  frames: number;\r\n  fps: number;\r\n  loop: boolean;\r\n}\r\n\r\nexport class AnimationViewer {\r\n  private modal!: HTMLElement;\r\n  private canvas!: HTMLCanvasElement;\r\n  private ctx!: CanvasRenderingContext2D;\r\n  private currentAnimationIndex = 0;\r\n  private animations: AnimationInfo[] = [];\r\n  private animators: Map<string, SpriteAnimator> = new Map();\r\n  private isVisible = false;\r\n  private animationId: number | null = null;\r\n  private currentCharacter = \"ninja\";\r\n\r\n  constructor() {\r\n    this.createModal();\r\n    this.setupEventListeners();\r\n    this.loadAnimations();\r\n  }\r\n\r\n  private createModal() {\r\n    // Create modal container\r\n    this.modal = document.createElement('div');\r\n    this.modal.style.cssText = `\r\n      position: fixed;\r\n      top: 0;\r\n      left: 0;\r\n      width: 100%;\r\n      height: 100%;\r\n      background: rgba(0, 0, 0, 0.8);\r\n      display: none;\r\n      z-index: 10000;\r\n      font-family: Arial, sans-serif;\r\n    `;\r\n\r\n    // Create modal content\r\n    const content = document.createElement('div');\r\n    content.style.cssText = `\r\n      position: absolute;\r\n      top: 50%;\r\n      left: 50%;\r\n      transform: translate(-50%, -50%);\r\n      background: #1a1a1a;\r\n      border: 2px solid #333;\r\n      border-radius: 8px;\r\n      padding: 20px;\r\n      min-width: 600px;\r\n      max-width: 90vw;\r\n      max-height: 90vh;\r\n      overflow: hidden;\r\n    `;\r\n\r\n    // Create header\r\n    const header = document.createElement('div');\r\n    header.style.cssText = `\r\n      display: flex;\r\n      justify-content: space-between;\r\n      align-items: center;\r\n      margin-bottom: 20px;\r\n      border-bottom: 1px solid #333;\r\n      padding-bottom: 10px;\r\n    `;\r\n\r\n    const title = document.createElement('h2');\r\n    title.textContent = 'QTE Animation Viewer';\r\n    title.style.cssText = `\r\n      color: #fff;\r\n      margin: 0;\r\n      font-size: 24px;\r\n    `;\r\n\r\n    const closeBtn = document.createElement('button');\r\n    closeBtn.textContent = '×';\r\n    closeBtn.style.cssText = `\r\n      background: #ff4444;\r\n      color: white;\r\n      border: none;\r\n      border-radius: 4px;\r\n      width: 30px;\r\n      height: 30px;\r\n      font-size: 18px;\r\n      cursor: pointer;\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: center;\r\n    `;\r\n    closeBtn.onclick = () => this.hide();\r\n\r\n    header.appendChild(title);\r\n    header.appendChild(closeBtn);\r\n\r\n    // Create character selector\r\n    const characterSelector = document.createElement('div');\r\n    characterSelector.style.cssText = `\r\n      margin-bottom: 20px;\r\n      display: flex;\r\n      gap: 10px;\r\n      align-items: center;\r\n    `;\r\n\r\n    const characterLabel = document.createElement('label');\r\n    characterLabel.textContent = 'Character:';\r\n    characterLabel.style.cssText = 'color: #fff; font-weight: bold;';\r\n\r\n    const characterSelect = document.createElement('select');\r\n    characterSelect.style.cssText = `\r\n      background: #333;\r\n      color: #fff;\r\n      border: 1px solid #555;\r\n      border-radius: 4px;\r\n      padding: 5px 10px;\r\n      font-size: 14px;\r\n    `;\r\n    characterSelect.innerHTML = `\r\n      <option value=\"ninja\">Ninja</option>\r\n      <option value=\"cyboard\">Cyboard</option>\r\n    `;\r\n    characterSelect.onchange = (e) => {\r\n      this.currentCharacter = (e.target as HTMLSelectElement).value;\r\n      this.loadAnimations();\r\n      this.currentAnimationIndex = 0;\r\n      this.updateDisplay();\r\n    };\r\n\r\n    characterSelector.appendChild(characterLabel);\r\n    characterSelector.appendChild(characterSelect);\r\n\r\n    // Create animation display area\r\n    const displayArea = document.createElement('div');\r\n    displayArea.style.cssText = `\r\n      display: flex;\r\n      flex-direction: column;\r\n      align-items: center;\r\n      gap: 20px;\r\n    `;\r\n\r\n    // Create canvas for animation\r\n    this.canvas = document.createElement('canvas');\r\n    this.canvas.width = 256;\r\n    this.canvas.height = 256;\r\n    this.canvas.style.cssText = `\r\n      border: 2px solid #555;\r\n      border-radius: 4px;\r\n      background: #000;\r\n      image-rendering: pixelated;\r\n      image-rendering: -moz-crisp-edges;\r\n      image-rendering: crisp-edges;\r\n    `;\r\n    this.ctx = this.canvas.getContext('2d')!;\r\n\r\n    // Create animation info display\r\n    const infoDisplay = document.createElement('div');\r\n    infoDisplay.id = 'animation-info';\r\n    infoDisplay.style.cssText = `\r\n      color: #fff;\r\n      text-align: center;\r\n      font-size: 16px;\r\n      min-height: 60px;\r\n      display: flex;\r\n      flex-direction: column;\r\n      justify-content: center;\r\n    `;\r\n\r\n    // Create navigation controls\r\n    const controls = document.createElement('div');\r\n    controls.style.cssText = `\r\n      display: flex;\r\n      gap: 10px;\r\n      align-items: center;\r\n      justify-content: center;\r\n    `;\r\n\r\n    const prevBtn = document.createElement('button');\r\n    prevBtn.textContent = '◀ Previous';\r\n    prevBtn.style.cssText = `\r\n      background: #444;\r\n      color: white;\r\n      border: 1px solid #666;\r\n      border-radius: 4px;\r\n      padding: 8px 16px;\r\n      cursor: pointer;\r\n      font-size: 14px;\r\n    `;\r\n    prevBtn.onclick = () => this.previousAnimation();\r\n\r\n    const nextBtn = document.createElement('button');\r\n    nextBtn.textContent = 'Next ▶';\r\n    nextBtn.style.cssText = `\r\n      background: #444;\r\n      color: white;\r\n      border: 1px solid #666;\r\n      border-radius: 4px;\r\n      padding: 8px 16px;\r\n      cursor: pointer;\r\n      font-size: 14px;\r\n    `;\r\n    nextBtn.onclick = () => this.nextAnimation();\r\n\r\n    const playPauseBtn = document.createElement('button');\r\n    playPauseBtn.id = 'play-pause-btn';\r\n    playPauseBtn.textContent = '⏸ Pause';\r\n    playPauseBtn.style.cssText = `\r\n      background: #0066cc;\r\n      color: white;\r\n      border: 1px solid #0088ff;\r\n      border-radius: 4px;\r\n      padding: 8px 16px;\r\n      cursor: pointer;\r\n      font-size: 14px;\r\n    `;\r\n    playPauseBtn.onclick = () => this.togglePlayPause();\r\n\r\n    controls.appendChild(prevBtn);\r\n    controls.appendChild(playPauseBtn);\r\n    controls.appendChild(nextBtn);\r\n\r\n    // Create animation list\r\n    const animationList = document.createElement('div');\r\n    animationList.id = 'animation-list';\r\n    animationList.style.cssText = `\r\n      margin-top: 20px;\r\n      max-height: 200px;\r\n      overflow-y: auto;\r\n      border: 1px solid #333;\r\n      border-radius: 4px;\r\n      background: #222;\r\n    `;\r\n\r\n    displayArea.appendChild(this.canvas);\r\n    displayArea.appendChild(infoDisplay);\r\n    displayArea.appendChild(controls);\r\n    displayArea.appendChild(animationList);\r\n\r\n    content.appendChild(header);\r\n    content.appendChild(characterSelector);\r\n    content.appendChild(displayArea);\r\n    this.modal.appendChild(content);\r\n    document.body.appendChild(this.modal);\r\n  }\r\n\r\n  private setupEventListeners() {\r\n    // Keyboard navigation\r\n    document.addEventListener('keydown', (e) => {\r\n      if (!this.isVisible) return;\r\n\r\n      switch (e.key) {\r\n        case 'Escape':\r\n          this.hide();\r\n          break;\r\n        case 'ArrowLeft':\r\n          this.previousAnimation();\r\n          break;\r\n        case 'ArrowRight':\r\n          this.nextAnimation();\r\n          break;\r\n        case ' ':\r\n          e.preventDefault();\r\n          this.togglePlayPause();\r\n          break;\r\n      }\r\n    });\r\n  }\r\n\r\n  private async loadAnimations() {\r\n    try {\r\n      // Load atlas for current character\r\n      const atlas = await loadAtlas(`/qte/${this.currentCharacter}`);\r\n\r\n      // Clear previous animations\r\n      this.animations = [];\r\n      this.animators.clear();\r\n\r\n      // Get actual frame counts from atlas data\r\n      const getFrameCount = (animationName: string): number => {\r\n        if (atlas.animations && atlas.animations[animationName]) {\r\n          return atlas.animations[animationName].frames.length;\r\n        }\r\n        \r\n        // Fallback: count frames in the frames object\r\n        let count = 0;\r\n        for (const key in atlas.frames) {\r\n          if (key.startsWith(`${animationName}_`)) {\r\n            count++;\r\n          }\r\n        }\r\n        return count;\r\n      };\r\n\r\n      // Define animation configurations with actual frame counts\r\n      const animationConfigs = [\r\n        { name: 'idle', frames: getFrameCount('idle'), fps: 6, loop: true },\r\n        { name: 'walk', frames: getFrameCount('walk'), fps: 10, loop: true },\r\n        { name: 'jump', frames: getFrameCount('jump'), fps: 12, loop: false },\r\n        { name: 'attack', frames: getFrameCount('attack'), fps: 12, loop: false },\r\n        { name: 'parry', frames: getFrameCount('parry'), fps: 10, loop: false },\r\n        { name: 'spawn', frames: getFrameCount('spawn'), fps: 8, loop: false },\r\n        { name: 'defeat', frames: getFrameCount('defeat'), fps: 6, loop: false },\r\n        { name: 'projectile', frames: getFrameCount('projectile'), fps: 12, loop: true },\r\n        { name: 'ranged', frames: getFrameCount('ranged'), fps: 12, loop: false },\r\n        { name: 'blast', frames: getFrameCount('blast'), fps: 12, loop: false },\r\n      ];\r\n\r\n      // Create animations and animators\r\n      for (const config of animationConfigs) {\r\n        const animationInfo: AnimationInfo = {\r\n          name: config.name,\r\n          character: this.currentCharacter,\r\n          frames: config.frames,\r\n          fps: config.fps,\r\n          loop: config.loop\r\n        };\r\n\r\n        // Create sprite animator for this animation\r\n        const animator = new SpriteAnimator(atlas.image, 256, 256, {\r\n          [config.name]: {\r\n            src: `${this.currentCharacter}/${config.name}_256x256_${config.frames}.png`,\r\n            frames: config.frames,\r\n            fps: config.fps,\r\n            loop: config.loop,\r\n            frameW: 256,\r\n            frameH: 256,\r\n            rects: atlas.animations[config.name]?.frames || [],\r\n            image: atlas.image\r\n          }\r\n        });\r\n\r\n        // Patch with atlas data if available\r\n        if (atlas.animations[config.name]) {\r\n          const animDef = animator.animations[config.name];\r\n          animDef.rects = atlas.animations[config.name].frames;\r\n          animDef.image = atlas.image;\r\n          animDef.frames = atlas.animations[config.name].frames.length;\r\n          (animDef as any).imageLoaded = true;\r\n          (animDef as any).imageBroken = false;\r\n        }\r\n\r\n        this.animations.push(animationInfo);\r\n        this.animators.set(config.name, animator);\r\n      }\r\n\r\n      this.updateAnimationList();\r\n      this.updateDisplay();\r\n    } catch (error) {\r\n      console.error('Failed to load animations:', error);\r\n    }\r\n  }\r\n\r\n  private updateAnimationList() {\r\n    const list = document.getElementById('animation-list');\r\n    if (!list) return;\r\n\r\n    list.innerHTML = '';\r\n\r\n    this.animations.forEach((anim, index) => {\r\n      const item = document.createElement('div');\r\n      item.style.cssText = `\r\n        padding: 8px 12px;\r\n        cursor: pointer;\r\n        border-bottom: 1px solid #333;\r\n        color: #fff;\r\n        font-size: 14px;\r\n        transition: background-color 0.2s;\r\n      `;\r\n\r\n      if (index === this.currentAnimationIndex) {\r\n        item.style.backgroundColor = '#0066cc';\r\n      }\r\n\r\n      item.innerHTML = `\r\n        <div style=\"font-weight: bold;\">${anim.name}</div>\r\n        <div style=\"font-size: 12px; color: #aaa;\">\r\n          ${anim.frames} frames • ${anim.fps} fps • ${anim.loop ? 'Loop' : 'Once'}\r\n        </div>\r\n      `;\r\n\r\n      item.onclick = () => {\r\n        this.currentAnimationIndex = index;\r\n        this.updateDisplay();\r\n        this.updateAnimationList();\r\n      };\r\n\r\n      item.onmouseenter = () => {\r\n        if (index !== this.currentAnimationIndex) {\r\n          item.style.backgroundColor = '#444';\r\n        }\r\n      };\r\n\r\n      item.onmouseleave = () => {\r\n        if (index !== this.currentAnimationIndex) {\r\n          item.style.backgroundColor = 'transparent';\r\n        }\r\n      };\r\n\r\n      list.appendChild(item);\r\n    });\r\n  }\r\n\r\n  private updateDisplay() {\r\n    if (this.animations.length === 0) return;\r\n\r\n    const currentAnim = this.animations[this.currentAnimationIndex];\r\n    const animator = this.animators.get(currentAnim.name);\r\n\r\n    if (!animator) return;\r\n\r\n    // Set the animation state\r\n    animator.setState(currentAnim.name);\r\n\r\n    // Update info display\r\n    const infoDisplay = document.getElementById('animation-info');\r\n    if (infoDisplay) {\r\n      infoDisplay.innerHTML = `\r\n        <div style=\"font-size: 20px; font-weight: bold; margin-bottom: 5px;\">\r\n          ${currentAnim.name.toUpperCase()}\r\n        </div>\r\n        <div style=\"font-size: 14px; color: #aaa;\">\r\n          ${currentAnim.character} • ${currentAnim.frames} frames • ${currentAnim.fps} fps • ${currentAnim.loop ? 'Looping' : 'Single play'}\r\n        </div>\r\n      `;\r\n    }\r\n\r\n    // Start animation loop if not already running\r\n    if (!this.animationId) {\r\n      this.startAnimationLoop();\r\n    }\r\n  }\r\n\r\n  private startAnimationLoop() {\r\n    const animate = (timestamp: number) => {\r\n      if (!this.isVisible) {\r\n        this.animationId = null;\r\n        return;\r\n      }\r\n\r\n      const currentAnim = this.animations[this.currentAnimationIndex];\r\n      const animator = this.animators.get(currentAnim.name);\r\n\r\n      if (animator) {\r\n        // Clear canvas\r\n        this.ctx.fillStyle = '#000';\r\n        this.ctx.fillRect(0, 0, 256, 256);\r\n\r\n        // Update and draw animation\r\n        animator.update(1/60); // Assume 60fps\r\n        animator.draw(this.ctx, 0, 0, 256, 256);\r\n      }\r\n\r\n      this.animationId = requestAnimationFrame(animate);\r\n    };\r\n\r\n    this.animationId = requestAnimationFrame(animate);\r\n  }\r\n\r\n  private previousAnimation() {\r\n    if (this.animations.length === 0) return;\r\n    this.currentAnimationIndex = (this.currentAnimationIndex - 1 + this.animations.length) % this.animations.length;\r\n    this.updateDisplay();\r\n    this.updateAnimationList();\r\n  }\r\n\r\n  private nextAnimation() {\r\n    if (this.animations.length === 0) return;\r\n    this.currentAnimationIndex = (this.currentAnimationIndex + 1) % this.animations.length;\r\n    this.updateDisplay();\r\n    this.updateAnimationList();\r\n  }\r\n\r\n  private togglePlayPause() {\r\n    const btn = document.getElementById('play-pause-btn');\r\n    if (!btn) return;\r\n\r\n    if (this.animationId) {\r\n      // Pause\r\n      cancelAnimationFrame(this.animationId);\r\n      this.animationId = null;\r\n      btn.textContent = '▶ Play';\r\n      btn.style.background = '#0066cc';\r\n    } else {\r\n      // Play\r\n      this.startAnimationLoop();\r\n      btn.textContent = '⏸ Pause';\r\n      btn.style.background = '#cc6600';\r\n    }\r\n  }\r\n\r\n  public show() {\r\n    this.isVisible = true;\r\n    this.modal.style.display = 'block';\r\n    this.updateDisplay();\r\n  }\r\n\r\n  public hide() {\r\n    this.isVisible = false;\r\n    this.modal.style.display = 'none';\r\n    if (this.animationId) {\r\n      cancelAnimationFrame(this.animationId);\r\n      this.animationId = null;\r\n    }\r\n  }\r\n\r\n  public toggle() {\r\n    if (this.isVisible) {\r\n      this.hide();\r\n    } else {\r\n      this.show();\r\n    }\r\n  }\r\n}\r\n\r\n// Global instance\r\nlet animationViewer: AnimationViewer | null = null;\r\n\r\nexport function getAnimationViewer(): AnimationViewer {\r\n  if (!animationViewer) {\r\n    animationViewer = new AnimationViewer();\r\n  }\r\n  return animationViewer;\r\n}\r\n\r\n// Add global function for easy access\r\n(window as any).showAnimationViewer = () => getAnimationViewer().show();\r\n(window as any).hideAnimationViewer = () => getAnimationViewer().hide();\r\n(window as any).toggleAnimationViewer = () => getAnimationViewer().toggle();\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}