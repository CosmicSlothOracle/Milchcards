{"ast":null,"code":"import { getCardImagePath, Pols, Specials } from '../data/gameData';\nimport { makePolInstance, makeSpecInstance } from './cardUtils';\nimport { makeUid } from './id';\nimport { getLaneCapacity } from '../ui/layout';\n\n// Re-export helpers from effectUtils\nexport { EffectQueueManager, ActiveAbilitiesManager, tryApplyNegativeEffect } from './effectUtils';\n\n// Re-export helpers from cardUtils\nexport { makePolInstance, makeSpecInstance, sortHandCards, adjustInfluence, findCardLocation, getAllowedLaneForCard, isLaneAllowedForCard, getCardActionPointCost } from './cardUtils';\n\n// Helper functions\nexport function ceil(x) {\n  return Math.ceil(x);\n}\nexport function pow(a, b) {\n  return Math.pow(a, b);\n}\nexport function calcBP(influence, T) {\n  return ceil(pow(influence, 1.4) + 2 * T);\n}\nexport function shuffle(a) {\n  for (let i = a.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [a[i], a[j]] = [a[j], a[i]];\n  }\n  return a;\n}\n\n// Game logic helpers\nexport function sumRow(arr) {\n  return arr.reduce((a, c) => {\n    if (c.kind === 'pol') {\n      return a + c.influence; // ğŸ”¥ VEREINFACHT: Nur noch influence\n    }\n    return a; // Special cards don't contribute to influence\n  }, 0);\n}\n\n// Unified scoring: Government influence including permanent auras and Joschka+NGO synergy\nexport function sumGovernmentInfluenceWithAuras(state, player) {\n  const govCards = state.board[player].aussen.filter(c => c.kind === 'pol');\n  // Opponent reference kept for completeness of future aura checks\n\n  let total = 0;\n  const govSlot = state.permanentSlots[player].government;\n  const pubSlot = state.permanentSlots[player].public;\n  govCards.forEach(card => {\n    var _state$effectFlags$pl, _state$effectFlags$pl2, _state$effectFlags$pl3;\n    let influence = card.influence;\n\n    // Koalitionszwang: Tier 2 Regierungskarten +1 Einfluss\n    if ((govSlot === null || govSlot === void 0 ? void 0 : govSlot.kind) === 'spec' && govSlot.name === 'Koalitionszwang') {\n      if (card.T === 2) influence += 1;\n    }\n\n    // Napoleon Komplex: Tier 1 Regierungskarten +1 Einfluss\n    if ((govSlot === null || govSlot === void 0 ? void 0 : govSlot.kind) === 'spec' && govSlot.name === 'Napoleon Komplex') {\n      if (card.T === 1) influence += 1;\n    }\n\n    // Zivilgesellschaft: Bewegung-Karten +1 Einfluss (wenn eine Bewegung in Ã–ffentlichkeit liegt)\n    if ((pubSlot === null || pubSlot === void 0 ? void 0 : pubSlot.kind) === 'spec' && pubSlot.name === 'Zivilgesellschaft') {\n      const bewegungNames = ['Greta Thunberg', 'Malala Yousafzai', 'Ai Weiwei', 'Alexei Navalny'];\n      const hasBewegung = state.board[player].innen.some(c => c.kind === 'spec' && c.type === 'Ã–ffentlichkeitskarte' && bewegungNames.includes(c.name));\n      if (hasBewegung) influence += 1;\n    }\n\n    // Joschka Fischer NGO-Boost: +1 Einfluss, wenn eine NGO-Ã–ffentlichkeitskarte liegt\n    if (card.name === 'Joschka Fischer' && card.effect === 'ngo_boost') {\n      const hasNgoCard = state.board[player].innen.some(c => c.kind === 'spec' && c.type === 'Ã–ffentlichkeitskarte' && c.tag === 'NGO');\n      if (hasNgoCard) influence += 1;\n    }\n\n    // Milchglas Transparenz: +1 Einfluss wenn keine NGO/Bewegung liegt\n    if ((govSlot === null || govSlot === void 0 ? void 0 : govSlot.kind) === 'spec' && govSlot.name === 'Milchglas Transparenz') {\n      const ngoMovementNames = ['Jennifer Doudna', 'Noam Chomsky', 'Bill Gates', 'Greta Thunberg', 'Malala Yousafzai', 'Ai Weiwei', 'Alexei Navalny'];\n      const hasNgoMovement = state.board[player].innen.some(c => c.kind === 'spec' && c.type === 'Ã–ffentlichkeitskarte' && ngoMovementNames.includes(c.name));\n      if (!hasNgoMovement) influence += 1;\n    }\n\n    // ğŸ”¥ CLUSTER 3: TemporÃ¤re Initiative-Boni (bis Rundenende)\n\n    // Jennifer Doudna: +1 Einfluss bei Initiativen\n    if ((_state$effectFlags$pl = state.effectFlags[player]) !== null && _state$effectFlags$pl !== void 0 && _state$effectFlags$pl.scienceInitiativeBonus) {\n      influence += 1;\n    }\n\n    // Anthony Fauci: +1 Einfluss bei Initiativen\n    if ((_state$effectFlags$pl2 = state.effectFlags[player]) !== null && _state$effectFlags$pl2 !== void 0 && _state$effectFlags$pl2.healthInitiativeBonus) {\n      influence += 1;\n    }\n\n    // Noam Chomsky: -1 Einfluss bei Initiativen (fÃ¼r Gegner)\n    if ((_state$effectFlags$pl3 = state.effectFlags[player]) !== null && _state$effectFlags$pl3 !== void 0 && _state$effectFlags$pl3.militaryInitiativePenalty) {\n      influence -= 1;\n    }\n\n    // Alternative Fakten is applied within interventions; no direct change here\n\n    total += influence;\n  });\n  return total;\n}\nexport function drawCards(player, count, state, log) {\n  const deck = [...state.decks[player]];\n  const hand = [...state.hands[player]];\n  const drawn = deck.splice(0, Math.min(count, deck.length));\n  hand.push(...drawn);\n  if (drawn.length > 0) {\n    log(`P${player} zieht ${drawn.length} Karte(n)`);\n  }\n  return {\n    newHands: {\n      ...state.hands,\n      [player]: hand\n    },\n    newDecks: {\n      ...state.decks,\n      [player]: deck\n    }\n  };\n}\nexport function drawCardsAtRoundEnd(state, log) {\n  let newHands = {\n    ...state.hands\n  };\n  let newDecks = {\n    ...state.decks\n  };\n  [1, 2].forEach(player => {\n    const targetHandSize = 5;\n    const currentHandSize = newHands[player].length;\n    let drawCount = Math.max(0, targetHandSize - currentHandSize);\n\n    // ğŸ”¥ MUKESH AMBANI EFFEKT: Gegner darf 1 Karte weniger nachziehen\n    const opponent = player === 1 ? 2 : 1;\n    const opponentBoard = state.board[opponent];\n    const mukeshAmbani = opponentBoard.innen.find(card => card.kind === 'spec' && card.name === 'Mukesh Ambani');\n    if (mukeshAmbani && drawCount > 0) {\n      drawCount = Math.max(0, drawCount - 1);\n      log(`ğŸ”¥ MUKESH AMBANI EFFEKT: P${player} zieht 1 Karte weniger (${drawCount} statt ${drawCount + 1})`);\n    }\n    if (drawCount > 0) {\n      const result = drawCards(player, drawCount, {\n        ...state,\n        hands: newHands,\n        decks: newDecks\n      }, log);\n      newHands = result.newHands;\n      newDecks = result.newDecks;\n    }\n  });\n  return {\n    newHands,\n    newDecks\n  };\n}\n\n// Deck building utilities\nexport function currentBuilderBudget(deck) {\n  return deck.reduce((sum, entry) => {\n    if (entry.kind === 'pol') {\n      const pol = entry.base;\n      return sum + ((pol === null || pol === void 0 ? void 0 : pol.BP) || 0) * entry.count;\n    } else {\n      const spec = entry.base;\n      return sum + ((spec === null || spec === void 0 ? void 0 : spec.bp) || 0) * entry.count;\n    }\n  }, 0);\n}\nexport function currentBuilderCount(deck) {\n  return deck.reduce((sum, entry) => sum + entry.count, 0);\n}\nexport function buildDeckFromEntries(entries) {\n  const deck = [];\n  entries.forEach(entry => {\n    for (let i = 0; i < entry.count; i++) {\n      if (entry.kind === 'pol') {\n        // Support both base object (deckbuilder) and baseId (presets)\n        const base = entry.base || (entry.baseId ? Pols.find(p => p.id === entry.baseId) : null);\n        if (base) deck.push(makePolInstance(base));\n      } else {\n        // Support both base object (deckbuilder) and baseId (presets)\n        const base = entry.base || (entry.baseId ? Specials.find(s => s.id === entry.baseId) : null);\n        if (base) deck.push(makeSpecInstance(base));\n      }\n    }\n  });\n\n  // Stelle sicher, dass jede Karte eine uid besitzt\n  const deckWithUids = deck.map(c => c && c.uid ? c : {\n    ...c,\n    uid: makeUid('card')\n  });\n  return shuffle(deckWithUids);\n}\n\n// Image loading utilities (Legacy function for backwards compatibility)\nexport function drawCardImage(ctx, card, dx, dy, size, imageSize = 'ui') {\n  const img = new Image();\n  img.onload = () => {\n    ctx.drawImage(img, dx, dy, size, size);\n  };\n  img.src = getCardImagePath(card, imageSize);\n}\n\n// KapazitÃ¤tsprÃ¼fung fÃ¼r Reihen (verhindert zu viele Karten in kleinen Rows)\nexport function canPlayToLane(state, player, lane) {\n  var _state$board$player$i, _state$board$player, _state$board$player$a, _state$board$player2;\n  const cap = getLaneCapacity(lane);\n  const row = lane === 'public' ? (_state$board$player$i = (_state$board$player = state.board[player]) === null || _state$board$player === void 0 ? void 0 : _state$board$player.innen) !== null && _state$board$player$i !== void 0 ? _state$board$player$i : [] : (_state$board$player$a = (_state$board$player2 = state.board[player]) === null || _state$board$player2 === void 0 ? void 0 : _state$board$player2.aussen) !== null && _state$board$player$a !== void 0 ? _state$board$player$a : [];\n  return row.length < cap;\n}","map":{"version":3,"names":["getCardImagePath","Pols","Specials","makePolInstance","makeSpecInstance","makeUid","getLaneCapacity","EffectQueueManager","ActiveAbilitiesManager","tryApplyNegativeEffect","sortHandCards","adjustInfluence","findCardLocation","getAllowedLaneForCard","isLaneAllowedForCard","getCardActionPointCost","ceil","x","Math","pow","a","b","calcBP","influence","T","shuffle","i","length","j","floor","random","sumRow","arr","reduce","c","kind","sumGovernmentInfluenceWithAuras","state","player","govCards","board","aussen","filter","total","govSlot","permanentSlots","government","pubSlot","public","forEach","card","_state$effectFlags$pl","_state$effectFlags$pl2","_state$effectFlags$pl3","name","bewegungNames","hasBewegung","innen","some","type","includes","effect","hasNgoCard","tag","ngoMovementNames","hasNgoMovement","effectFlags","scienceInitiativeBonus","healthInitiativeBonus","militaryInitiativePenalty","drawCards","count","log","deck","decks","hand","hands","drawn","splice","min","push","newHands","newDecks","drawCardsAtRoundEnd","targetHandSize","currentHandSize","drawCount","max","opponent","opponentBoard","mukeshAmbani","find","result","currentBuilderBudget","sum","entry","pol","base","BP","spec","bp","currentBuilderCount","buildDeckFromEntries","entries","baseId","p","id","s","deckWithUids","map","uid","drawCardImage","ctx","dx","dy","size","imageSize","img","Image","onload","drawImage","src","canPlayToLane","lane","_state$board$player$i","_state$board$player","_state$board$player$a","_state$board$player2","cap","row"],"sources":["C:/Users/skank/Videos/Cards/Milchcards/src/utils/gameUtils.ts"],"sourcesContent":["import { Card, PoliticianCard, SpecialCard, GameState, Player } from '../types/game';\r\nimport { getCardImagePath, Pols, Specials } from '../data/gameData';\r\nimport { makePolInstance, makeSpecInstance } from './cardUtils';\r\nimport { makeUid } from './id';\r\nimport { getLaneCapacity } from '../ui/layout';\r\n\r\n// Re-export helpers from effectUtils\r\nexport { EffectQueueManager, ActiveAbilitiesManager, tryApplyNegativeEffect } from './effectUtils';\r\n\r\n// Re-export helpers from cardUtils\r\nexport {\r\n  makePolInstance,\r\n  makeSpecInstance,\r\n  sortHandCards,\r\n  adjustInfluence,\r\n  findCardLocation,\r\n  getAllowedLaneForCard,\r\n  isLaneAllowedForCard,\r\n  getCardActionPointCost\r\n} from './cardUtils';\r\n\r\n// Helper functions\r\nexport function ceil(x: number): number {\r\n  return Math.ceil(x);\r\n}\r\n\r\nexport function pow(a: number, b: number): number {\r\n  return Math.pow(a, b);\r\n}\r\n\r\nexport function calcBP(influence: number, T: number): number {\r\n  return ceil(pow(influence, 1.4) + 2 * T);\r\n}\r\n\r\nexport function shuffle<T>(a: T[]): T[] {\r\n  for (let i = a.length - 1; i > 0; i--) {\r\n    const j = Math.floor(Math.random() * (i + 1));\r\n    [a[i], a[j]] = [a[j], a[i]];\r\n  }\r\n  return a;\r\n}\r\n\r\n// Game logic helpers\r\nexport function sumRow(arr: Card[]): number {\r\n  return arr.reduce((a, c) => {\r\n    if (c.kind === 'pol') {\r\n      return a + (c as PoliticianCard).influence; // ğŸ”¥ VEREINFACHT: Nur noch influence\r\n    }\r\n    return a; // Special cards don't contribute to influence\r\n  }, 0);\r\n}\r\n\r\n// Unified scoring: Government influence including permanent auras and Joschka+NGO synergy\r\nexport function sumGovernmentInfluenceWithAuras(state: GameState, player: Player): number {\r\n  const govCards = state.board[player].aussen.filter(c => c.kind === 'pol') as PoliticianCard[];\r\n  // Opponent reference kept for completeness of future aura checks\r\n\r\n  let total = 0;\r\n\r\n  const govSlot = state.permanentSlots[player].government;\r\n  const pubSlot = state.permanentSlots[player].public;\r\n\r\n  govCards.forEach(card => {\r\n    let influence = card.influence;\r\n\r\n    // Koalitionszwang: Tier 2 Regierungskarten +1 Einfluss\r\n    if (govSlot?.kind === 'spec' && (govSlot as SpecialCard).name === 'Koalitionszwang') {\r\n      if (card.T === 2) influence += 1;\r\n    }\r\n\r\n    // Napoleon Komplex: Tier 1 Regierungskarten +1 Einfluss\r\n    if (govSlot?.kind === 'spec' && (govSlot as SpecialCard).name === 'Napoleon Komplex') {\r\n      if (card.T === 1) influence += 1;\r\n    }\r\n\r\n    // Zivilgesellschaft: Bewegung-Karten +1 Einfluss (wenn eine Bewegung in Ã–ffentlichkeit liegt)\r\n    if (pubSlot?.kind === 'spec' && (pubSlot as SpecialCard).name === 'Zivilgesellschaft') {\r\n      const bewegungNames = ['Greta Thunberg', 'Malala Yousafzai', 'Ai Weiwei', 'Alexei Navalny'];\r\n      const hasBewegung = state.board[player].innen.some(c => c.kind === 'spec' && (c as SpecialCard).type === 'Ã–ffentlichkeitskarte' && bewegungNames.includes(c.name));\r\n      if (hasBewegung) influence += 1;\r\n    }\r\n\r\n    // Joschka Fischer NGO-Boost: +1 Einfluss, wenn eine NGO-Ã–ffentlichkeitskarte liegt\r\n    if (card.name === 'Joschka Fischer' && (card as any).effect === 'ngo_boost') {\r\n      const hasNgoCard = state.board[player].innen.some(c => c.kind === 'spec' && (c as SpecialCard).type === 'Ã–ffentlichkeitskarte' && (c as any).tag === 'NGO');\r\n      if (hasNgoCard) influence += 1;\r\n    }\r\n\r\n    // Milchglas Transparenz: +1 Einfluss wenn keine NGO/Bewegung liegt\r\n    if (govSlot?.kind === 'spec' && (govSlot as SpecialCard).name === 'Milchglas Transparenz') {\r\n      const ngoMovementNames = ['Jennifer Doudna', 'Noam Chomsky', 'Bill Gates', 'Greta Thunberg', 'Malala Yousafzai', 'Ai Weiwei', 'Alexei Navalny'];\r\n      const hasNgoMovement = state.board[player].innen.some(c => c.kind === 'spec' && (c as SpecialCard).type === 'Ã–ffentlichkeitskarte' && ngoMovementNames.includes(c.name));\r\n      if (!hasNgoMovement) influence += 1;\r\n    }\r\n\r\n        // ğŸ”¥ CLUSTER 3: TemporÃ¤re Initiative-Boni (bis Rundenende)\r\n\r\n    // Jennifer Doudna: +1 Einfluss bei Initiativen\r\n    if (state.effectFlags[player]?.scienceInitiativeBonus) {\r\n      influence += 1;\r\n    }\r\n\r\n    // Anthony Fauci: +1 Einfluss bei Initiativen\r\n    if (state.effectFlags[player]?.healthInitiativeBonus) {\r\n      influence += 1;\r\n    }\r\n\r\n    // Noam Chomsky: -1 Einfluss bei Initiativen (fÃ¼r Gegner)\r\n    if (state.effectFlags[player]?.militaryInitiativePenalty) {\r\n      influence -= 1;\r\n    }\r\n\r\n    // Alternative Fakten is applied within interventions; no direct change here\r\n\r\n    total += influence;\r\n  });\r\n\r\n  return total;\r\n}\r\n\r\nexport function drawCards(\r\n  player: Player,\r\n  count: number,\r\n  state: GameState,\r\n  log: (msg: string) => void\r\n): { newHands: GameState['hands']; newDecks: GameState['decks'] } {\r\n  const deck = [...state.decks[player]];\r\n  const hand = [...state.hands[player]];\r\n\r\n  const drawn = deck.splice(0, Math.min(count, deck.length));\r\n  hand.push(...drawn);\r\n\r\n  if (drawn.length > 0) {\r\n    log(`P${player} zieht ${drawn.length} Karte(n)`);\r\n  }\r\n\r\n  return {\r\n    newHands: { ...state.hands, [player]: hand },\r\n    newDecks: { ...state.decks, [player]: deck }\r\n  };\r\n}\r\n\r\nexport function drawCardsAtRoundEnd(\r\n  state: GameState,\r\n  log: (msg: string) => void\r\n): { newHands: GameState['hands']; newDecks: GameState['decks'] } {\r\n  let newHands = { ...state.hands };\r\n  let newDecks = { ...state.decks };\r\n\r\n  [1, 2].forEach(player => {\r\n    const targetHandSize = 5;\r\n    const currentHandSize = newHands[player as Player].length;\r\n    let drawCount = Math.max(0, targetHandSize - currentHandSize);\r\n\r\n    // ğŸ”¥ MUKESH AMBANI EFFEKT: Gegner darf 1 Karte weniger nachziehen\r\n    const opponent = player === 1 ? 2 : 1;\r\n    const opponentBoard = state.board[opponent];\r\n    const mukeshAmbani = opponentBoard.innen.find(card =>\r\n      card.kind === 'spec' && (card as any).name === 'Mukesh Ambani'\r\n    );\r\n\r\n    if (mukeshAmbani && drawCount > 0) {\r\n      drawCount = Math.max(0, drawCount - 1);\r\n      log(`ğŸ”¥ MUKESH AMBANI EFFEKT: P${player} zieht 1 Karte weniger (${drawCount} statt ${drawCount + 1})`);\r\n    }\r\n\r\n    if (drawCount > 0) {\r\n      const result = drawCards(player as Player, drawCount,\r\n        { ...state, hands: newHands, decks: newDecks }, log);\r\n      newHands = result.newHands;\r\n      newDecks = result.newDecks;\r\n    }\r\n  });\r\n\r\n  return { newHands, newDecks };\r\n}\r\n\r\n// Deck building utilities\r\nexport function currentBuilderBudget(deck: any[]): number {\r\n  return deck.reduce((sum, entry) => {\r\n    if (entry.kind === 'pol') {\r\n      const pol = entry.base;\r\n      return sum + (pol?.BP || 0) * entry.count;\r\n  } else {\r\n      const spec = entry.base;\r\n      return sum + (spec?.bp || 0) * entry.count;\r\n    }\r\n  }, 0);\r\n}\r\n\r\nexport function currentBuilderCount(deck: any[]): number {\r\n  return deck.reduce((sum, entry) => sum + entry.count, 0);\r\n}\r\n\r\nexport function buildDeckFromEntries(entries: any[]): Card[] {\r\n  const deck: Card[] = [];\r\n\r\n  entries.forEach(entry => {\r\n    for (let i = 0; i < entry.count; i++) {\r\n      if (entry.kind === 'pol') {\r\n        // Support both base object (deckbuilder) and baseId (presets)\r\n        const base = entry.base || (entry.baseId ? Pols.find(p => p.id === entry.baseId) : null);\r\n        if (base) deck.push(makePolInstance(base));\r\n      } else {\r\n        // Support both base object (deckbuilder) and baseId (presets)\r\n        const base = entry.base || (entry.baseId ? Specials.find(s => s.id === entry.baseId) : null);\r\n        if (base) deck.push(makeSpecInstance(base));\r\n      }\r\n    }\r\n  });\r\n\r\n  // Stelle sicher, dass jede Karte eine uid besitzt\r\n  const deckWithUids = deck.map((c: any) => (c && c.uid) ? c : { ...c, uid: makeUid('card') });\r\n  return shuffle(deckWithUids);\r\n}\r\n\r\n// Image loading utilities (Legacy function for backwards compatibility)\r\nexport function drawCardImage(\r\n  ctx: CanvasRenderingContext2D,\r\n  card: Card,\r\n  dx: number,\r\n  dy: number,\r\n  size: number,\r\n  imageSize: 'ui' | 'modal' = 'ui'\r\n): void {\r\n  const img = new Image();\r\n  img.onload = () => {\r\n    ctx.drawImage(img, dx, dy, size, size);\r\n  };\r\n  img.src = getCardImagePath(card, imageSize);\r\n}\r\n\r\n// KapazitÃ¤tsprÃ¼fung fÃ¼r Reihen (verhindert zu viele Karten in kleinen Rows)\r\nexport function canPlayToLane(state: GameState, player: Player, lane: 'public' | 'government'): boolean {\r\n  const cap = getLaneCapacity(lane);\r\n  const row = lane === 'public'\r\n    ? state.board[player]?.innen ?? []\r\n    : state.board[player]?.aussen ?? [];\r\n  return row.length < cap;\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}