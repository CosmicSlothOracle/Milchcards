{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useCallback, useRef } from 'react';\nimport { createDefaultEffectFlags } from '../types/game';\nimport { buildDeckFromEntries, sumGovernmentInfluenceWithAuras } from '../utils/gameUtils';\nimport { PRESET_DECKS } from '../data/gameData';\nimport { getCardActionPointCost, getNetApCost, canPlayCard } from '../utils/ap';\nimport { triggerCardEffects } from '../effects/cards';\nimport { ensureTestBaselineAP } from '../utils/testCompat';\nimport { resolveQueue } from '../utils/queue';\nimport { applyStartOfTurnFlags } from '../utils/startOfTurnHooks';\nimport { registerTrap, applyTrapsOnCardPlayed } from '../utils/traps';\nimport { recomputeAuraFlags } from '../state/effects';\nimport { emptyBoard } from '../state/board';\nimport { logger } from '../debug/logger';\nimport { useVisualEffectsSafe } from '../context/VisualEffectsContext';\nimport slotGovGif from '../ui/layout/slot_gov.gif';\nimport { getUiTransform, getGovernmentRects } from '../ui/layout';\n\n// Migration Helper für Queue-Vereinheitlichung\nconst migrateLegacyQueue = state => {\n  // Queue migration completed - only _effectQueue exists now\n};\n\n// Helper function for getting the other player\nconst other = p => p === 1 ? 2 : 1;\n\n// Hilfsfunktion: stellt sicher, dass effectFlags vorhanden sind\nconst ensureFlags = (s, p) => {\n  if (!s.effectFlags) {\n    s.effectFlags = {\n      1: createDefaultEffectFlags(),\n      2: createDefaultEffectFlags()\n    };\n  } else {\n    s.effectFlags[p] = {\n      ...createDefaultEffectFlags(),\n      ...s.effectFlags[p]\n    };\n  }\n};\n\n// Lane-Heuristik wie in playCard\nconst pickLane = c => {\n  const tag = c.tag;\n  if (c.kind === 'pol' && (tag === 'Staatsoberhaupt' || tag === 'Regierungschef' || tag === 'Diplomat')) return 'aussen';\n  return 'innen';\n};\nconst isCardPlayableNow = (state, player, card) => {\n  if (card.deactivated) return false;\n  if (card.kind === 'pol') {\n    const lane = pickLane(card);\n    return state.board[player][lane].length < 5;\n  }\n  if (card.kind === 'spec') {\n    const t = String(card.type || '').toLowerCase();\n    if (t === 'öffentlichkeitskarte' || t === 'oeffentlichkeitskarte' || t === 'public') {\n      return state.board[player].innen.length < 5;\n    }\n    if (t === 'dauerhaft-initiative') {\n      const slot = 'government'; // wie bei dir „simplified\"\n      return !state.permanentSlots[player][slot];\n    }\n    // sonst: Fallen/Interventionen – aktuell immer erlaubt\n    return true;\n  }\n  return false;\n};\nexport const hasPlayableZeroCost = (state, player) => {\n  for (const c of state.hands[player]) {\n    const {\n      cost\n    } = getCardActionPointCost(state, player, c);\n    if (cost === 0 && isCardPlayableNow(state, player, c)) return true;\n  }\n  return false;\n};\n\n// Helper function to apply auras for a player (instant updates for Joschka Fischer + NGO synergy)\nfunction applyAurasForPlayer(state, player, log) {\n  const board = state.board[player];\n  const hasNgo = board.innen.some(c => c.kind === 'spec' && c.type === 'Öffentlichkeitskarte' && c.tag === 'NGO' && !c.deactivated);\n  const newAussen = board.aussen.map(card => {\n    if (card.kind !== 'pol') return card;\n    const pol = {\n      ...card\n    };\n    if (pol.baseInfluence == null) pol.baseInfluence = pol.influence;\n    const prev = pol.influence;\n    let bonus = 0;\n    if (!pol.deactivated && pol.name === 'Joschka Fischer' && pol.effect === 'ngo_boost' && hasNgo) {\n      bonus += 1;\n    }\n    pol.influence = pol.baseInfluence + bonus;\n    if (log && pol.influence > prev) log(`PASSIV: ${pol.name} +${pol.influence - prev} I (jetzt ${pol.influence}).`);\n    return pol;\n  });\n  state.board = {\n    ...state.board,\n    [player]: {\n      ...state.board[player],\n      aussen: newAussen\n    }\n  };\n}\n\n// Helper function to check if round should end\nfunction checkRoundEnd(gameState) {\n  // Round ends if both players have passed\n  const result = gameState.passed[1] && gameState.passed[2];\n  logger.dbg(`checkRoundEnd P1=${gameState.passed[1]} P2=${gameState.passed[2]} result=${result}`);\n  return result;\n}\n\n// Helper function to draw cards from deck\nfunction drawCardsFromDeck(gameState, player, count) {\n  const deck = [...gameState.decks[player]];\n  const drawnCards = deck.splice(0, Math.min(count, deck.length));\n  return drawnCards;\n}\n\n// Helper function to really end a turn (extracted from nextTurn logic)\nfunction reallyEndTurn(gameState, log) {\n  const current = gameState.current;\n\n  // Flag zurücksetzen - Zug-Ende wird jetzt wirklich durchgeführt\n  gameState.isEndingTurn = false;\n\n  // ✅ Karte nachziehen am Ende eines Zugs (nur wenn NICHT \"pass\")\n  if (!gameState.passed[current]) {\n    const drawnCard = gameState.decks[current].shift();\n    if (drawnCard) {\n      gameState.hands[current].push(drawnCard);\n      log(`🔥 Zug-Ende: +1 Karte gezogen (${drawnCard.name})`);\n    }\n  } else {\n    log(`⏭️ P${current} hat gepasst – kein Nachziehen.`);\n  }\n\n  // Check if round should end\n  const shouldEndRound = checkRoundEnd(gameState);\n  if (shouldEndRound) {\n    log(`🏁 Runde ${gameState.round} wird beendet (Zug-Ende).`);\n    return resolveRound(gameState, log);\n  }\n\n  // Spielerwechsel + AP reset\n  const newCurrent = current === 1 ? 2 : 1;\n  gameState.current = newCurrent;\n  gameState.actionPoints = {\n    ...gameState.actionPoints,\n    [newCurrent]: 2\n  };\n  gameState.passed = {\n    ...gameState.passed,\n    [newCurrent]: false\n  };\n\n  // Apply new start-of-turn hooks\n  applyStartOfTurnFlags(gameState, newCurrent, log);\n\n  // 🔥 CLUSTER 3: Auren-Flags beim Zugstart neu berechnen\n  recomputeAuraFlags(gameState);\n\n  // Reset turn-bezogener Flag-Nutzungen (handled in applyStartOfTurnFlags)\n\n  log(`🔄 Zug-Ende: Spieler ${newCurrent} ist am Zug (2 AP verfügbar)`);\n  return gameState;\n}\n\n// Helper function to resolve round and start new one\nfunction resolveRound(gameState, log) {\n  // Calculate influence for both players\n  const p1Influence = sumGovernmentInfluenceWithAuras(gameState, 1);\n  const p2Influence = sumGovernmentInfluenceWithAuras(gameState, 2);\n  log(`📊 Rundenauswertung: P1 ${p1Influence} Einfluss vs P2 ${p2Influence} Einfluss`);\n\n  // Determine winner\n  let roundWinner;\n  if (p1Influence > p2Influence) {\n    roundWinner = 1;\n    log(`🏆 Spieler 1 gewinnt die Runde! (${p1Influence} > ${p2Influence})`);\n  } else if (p2Influence > p1Influence) {\n    roundWinner = 2;\n    log(`🏆 Spieler 2 gewinnt die Runde! (${p2Influence} > ${p1Influence})`);\n  } else {\n    // Tie - current player wins\n    roundWinner = gameState.current;\n    log(`🤝 Unentschieden! Spieler ${roundWinner} gewinnt als aktiver Spieler.`);\n  }\n\n  // Collect all cards to move to discard\n  const cardsToDiscard = [...gameState.board[1].innen, ...gameState.board[1].aussen, ...gameState.board[2].innen, ...gameState.board[2].aussen, ...(gameState.permanentSlots[1].government ? [gameState.permanentSlots[1].government] : []), ...(gameState.permanentSlots[1].public ? [gameState.permanentSlots[1].public] : []), ...(gameState.permanentSlots[2].government ? [gameState.permanentSlots[2].government] : []), ...(gameState.permanentSlots[2].public ? [gameState.permanentSlots[2].public] : []), ...gameState.board[1].sofort, ...gameState.board[2].sofort];\n\n  // Draw 5 new cards for each player\n  const newP1Hand = drawCardsFromDeck(gameState, 1, 5);\n  const newP2Hand = drawCardsFromDeck(gameState, 2, 5);\n\n  // Calculate new rounds won\n  const newRoundsWon = {\n    ...gameState.roundsWon,\n    [roundWinner]: gameState.roundsWon[roundWinner] + 1\n  };\n\n  // Check if game should end (Best of 3: first to 2 wins)\n  const p1Wins = newRoundsWon[1];\n  const p2Wins = newRoundsWon[2];\n  if (p1Wins >= 2 || p2Wins >= 2) {\n    const gameWinner = p1Wins >= 2 ? 1 : 2;\n    log(`🏆🎉 SPIEL BEENDET! Spieler ${gameWinner} gewinnt das Match! (${p1Wins}-${p2Wins})`);\n    log(`🔥 Gesamtergebnis: Player ${gameWinner} ist der Sieger!`);\n\n    // Return final state with game winner\n    return {\n      ...gameState,\n      roundsWon: newRoundsWon,\n      gameWinner,\n      // Keep current board state for final display\n      passed: {\n        1: true,\n        2: true\n      } // Both passed to indicate game end\n    };\n  }\n\n  // Create new state for next round\n  const newState = {\n    ...gameState,\n    round: gameState.round + 1,\n    current: roundWinner,\n    // Winner starts next round\n    passed: {\n      1: false,\n      2: false\n    },\n    // Reset pass status\n    actionPoints: {\n      1: 2,\n      2: 2\n    },\n    // Reset AP\n    actionsUsed: {\n      1: 0,\n      2: 0\n    },\n    // Reset actions (kept for compatibility)\n    roundsWon: newRoundsWon,\n    effectFlags: {\n      1: createDefaultEffectFlags(),\n      2: createDefaultEffectFlags()\n    },\n    // Clear all board positions\n    board: emptyBoard(),\n    // Clear permanent slots\n    permanentSlots: {\n      1: {\n        government: null,\n        public: null,\n        initiativePermanent: null\n      },\n      2: {\n        government: null,\n        public: null,\n        initiativePermanent: null\n      }\n    },\n    // instantSlot wird nicht mehr verwendet - Sofort-Initiativen gehen in board[player].sofort\n    // New hands with 5 cards each\n    hands: {\n      1: newP1Hand,\n      2: newP2Hand\n    },\n    // Update decks (cards were removed during drawing)\n    decks: {\n      1: gameState.decks[1].slice(newP1Hand.length),\n      2: gameState.decks[2].slice(newP2Hand.length)\n    },\n    // Update discard pile\n    discard: [...gameState.discard, ...cardsToDiscard]\n  };\n  log(`🆕 Runde ${newState.round} startet! Spieler ${roundWinner} beginnt. (Rundenstand: P1 ${newState.roundsWon[1]} - P2 ${newState.roundsWon[2]})`);\n  log(`🃏 Beide Spieler erhalten 5 neue Handkarten.`);\n  return newState;\n}\nexport function useGameActions(gameState, setGameState, log, afterQueueResolved) {\n  _s();\n  // Visual effects context (spawn helpers)\n  // Use safe hook variant which returns null when no provider is present\n  const visualEffects = useVisualEffectsSafe();\n  // Helper: spawn lightweight UI visuals via window hooks (prototype only)\n  const spawnCardVisual = useCallback(card => {\n    try {\n      var _card$uid, _card$uid2, _politicardDebug2;\n      if (!card) return;\n      console.debug('[GameActions] spawnCardVisual called', {\n        uid: (_card$uid = card.uid) !== null && _card$uid !== void 0 ? _card$uid : card.id,\n        name: card.name\n      });\n      const uid = (_card$uid2 = card.uid) !== null && _card$uid2 !== void 0 ? _card$uid2 : card.id;\n      // prefer VisualEffects context if available\n      if (visualEffects) {\n        var _politicardDebug;\n        // Prefer authoritative board-based slot centering (gov slots) using gameState\n        try {\n          let located = null;\n          for (const p of [1, 2]) {\n            const aussen = gameState.board[p].aussen || [];\n            const idxA = aussen.findIndex(c => {\n              var _c$uid, _card$uid3;\n              return ((_c$uid = c.uid) !== null && _c$uid !== void 0 ? _c$uid : c.id) === ((_card$uid3 = card.uid) !== null && _card$uid3 !== void 0 ? _card$uid3 : card.id);\n            });\n            if (idxA >= 0) {\n              located = {\n                player: p,\n                lane: 'aussen',\n                index: idxA\n              };\n              break;\n            }\n            const innen = gameState.board[p].innen || [];\n            const idxI = innen.findIndex(c => {\n              var _c$uid2, _card$uid4;\n              return ((_c$uid2 = c.uid) !== null && _c$uid2 !== void 0 ? _c$uid2 : c.id) === ((_card$uid4 = card.uid) !== null && _card$uid4 !== void 0 ? _card$uid4 : card.id);\n            });\n            if (idxI >= 0) {\n              located = {\n                player: p,\n                lane: 'innen',\n                index: idxI\n              };\n              break;\n            }\n          }\n          if (located && located.lane === 'aussen') {\n            var _card$uid5, _card$uid6;\n            const rects = getGovernmentRects(located.player === 1 ? 'player' : 'opponent');\n            const slot = rects[located.index] || rects[0] || {\n              x: 960 - 128,\n              y: 540 - 128,\n              w: 256,\n              h: 256\n            };\n            const cx_slot = slot.x + slot.w / 2;\n            const cy_slot = slot.y + slot.h / 2;\n            visualEffects.spawnParticles(cx_slot, cy_slot, 18);\n            visualEffects.spawnPop((_card$uid5 = card.uid) !== null && _card$uid5 !== void 0 ? _card$uid5 : card.id);\n            console.debug('[GameActions] spawnCardVisual particles/pop (gov slot)', {\n              uid: (_card$uid6 = card.uid) !== null && _card$uid6 !== void 0 ? _card$uid6 : card.id,\n              cx: cx_slot,\n              cy: cy_slot,\n              slot\n            });\n            const canvas = document.querySelector('canvas');\n            if (canvas) {\n              var _card$uid7, _card$uid8;\n              const rect = canvas.getBoundingClientRect();\n              const {\n                scale,\n                offsetX,\n                offsetY\n              } = getUiTransform(canvas.width, canvas.height);\n              const screenCx = rect.left + (cx_slot * scale + offsetX);\n              const screenCy = rect.top + (cy_slot * scale + offsetY);\n              // Use dedicated government slot GIF provided by user\n              visualEffects.spawnGifOverlay({\n                id: (_card$uid7 = card.uid) !== null && _card$uid7 !== void 0 ? _card$uid7 : card.id,\n                cx: screenCx,\n                cy: screenCy,\n                w: 260 * scale,\n                h: 260 * scale,\n                src: slotGovGif,\n                duration: 700\n              });\n              console.debug('[GameActions] spawnCardVisual spawnGifOverlay (gov slot)', {\n                uid: (_card$uid8 = card.uid) !== null && _card$uid8 !== void 0 ? _card$uid8 : card.id,\n                screenCx,\n                screenCy,\n                src: slotGovGif\n              });\n            }\n            try {\n              var _card$uid9;\n              visualEffects.playAnimsRef.current.push({\n                uid: (_card$uid9 = card.uid) !== null && _card$uid9 !== void 0 ? _card$uid9 : card.id,\n                started: performance.now(),\n                duration: 420\n              });\n            } catch (e) {}\n            return;\n          }\n        } catch (e) {\n          console.debug('[GameActions] gov-slot centering failed, falling back', e);\n        }\n        // attempt to find a row_slot zone center via debug snapshot (avoid hand slots)\n        const zones = ((_politicardDebug = window.__politicardDebug) === null || _politicardDebug === void 0 ? void 0 : _politicardDebug.clickZones) || [];\n        const zone = zones.find(z => {\n          var _z$data$card$uid;\n          return z.data && z.data.type === 'row_slot' && z.data.card && ((_z$data$card$uid = z.data.card.uid) !== null && _z$data$card$uid !== void 0 ? _z$data$card$uid : z.data.card.id) === uid;\n        });\n        const cx = zone ? zone.x + (zone.w || 256) / 2 : 960;\n        const cy = zone ? zone.y + (zone.h || 256) / 2 : 540;\n        visualEffects.spawnParticles(cx, cy, 18);\n        visualEffects.spawnPop(uid);\n        console.debug('[GameActions] spawnCardVisual particles/pop (fallback)', {\n          uid,\n          cx,\n          cy,\n          zone\n        });\n        // Add play animation entry so canvas will fade-in the card itself\n        try {\n          visualEffects.playAnimsRef.current.push({\n            uid,\n            started: performance.now(),\n            duration: 420\n          });\n          console.debug('[GameActions] spawnCardVisual playAnimsRef push', uid);\n        } catch (e) {\n          console.debug('[GameActions] spawnCardVisual playAnimsRef push failed', e);\n        }\n        return;\n      }\n      // fallback to old window-based prototype\n      const zones = ((_politicardDebug2 = window.__politicardDebug) === null || _politicardDebug2 === void 0 ? void 0 : _politicardDebug2.clickZones) || [];\n      const zone = zones.find(z => {\n        var _z$data$card$uid2;\n        return z.data && z.data.card && ((_z$data$card$uid2 = z.data.card.uid) !== null && _z$data$card$uid2 !== void 0 ? _z$data$card$uid2 : z.data.card.id) === uid;\n      });\n      const cx = zone ? zone.x + (zone.w || 256) / 2 : 960;\n      const cy = zone ? zone.y + (zone.h || 256) / 2 : 540;\n      window.__pc_particles = window.__pc_particles || [];\n      for (let i = 0; i < 18; i++) {\n        window.__pc_particles.push({\n          start: performance.now(),\n          life: 600 + Math.random() * 400,\n          x: cx + (Math.random() - 0.5) * 40,\n          y: cy + (Math.random() - 0.5) * 40,\n          vx: (Math.random() - 0.5) * 6,\n          vy: -Math.random() * 6,\n          size: 3 + Math.random() * 5,\n          color: ['#ffd166', '#ff6b6b', '#4ade80'][Math.floor(Math.random() * 3)],\n          gravity: 0.12\n        });\n      }\n      window.__pc_pops = window.__pc_pops || [];\n      window.__pc_pops.push({\n        uid,\n        started: performance.now(),\n        duration: 420\n      });\n      // Fallback: add play anim entry to global when VisualEffects not available\n      window.__pc_play_anims = window.__pc_play_anims || [];\n      window.__pc_play_anims.push({\n        uid,\n        started: performance.now(),\n        duration: 420\n      });\n      // Also attempt to use provider fallback on window if available\n      try {\n        const wv = window.__pc_visual_effects;\n        if (wv && typeof wv.spawnGifOverlay === 'function') {\n          // Compute screen coords based on canvas if possible\n          const canvas = document.querySelector('canvas');\n          if (canvas) {\n            var _politicardDebug3;\n            const rect = canvas.getBoundingClientRect();\n            const ui = ((_politicardDebug3 = window.__politicardDebug) === null || _politicardDebug3 === void 0 ? void 0 : _politicardDebug3.uiTransform) || {\n              scale: 1,\n              offsetX: 0,\n              offsetY: 0\n            };\n            const screenCx = rect.left + (cx * ui.scale + ui.offsetX);\n            const screenCy = rect.top + (cy * ui.scale + ui.offsetY);\n            try {\n              wv.spawnGifOverlay({\n                id: uid,\n                cx: screenCx,\n                cy: screenCy,\n                w: 256 * ui.scale,\n                h: 256 * ui.scale,\n                src: slotGovGif,\n                duration: 700\n              });\n              console.debug('[GameActions] fallback window.__pc_visual_effects.spawnGifOverlay', uid);\n            } catch (e) {\n              console.debug('[GameActions] fallback spawnGifOverlay failed', e);\n            }\n          }\n        }\n      } catch (e) {}\n    } catch (e) {\n      // swallow - non-critical\n    }\n  }, [visualEffects]);\n  // Guard against duplicate concurrent playCard calls for the same card UID\n  const playingUidRef = useRef(new Set());\n  const startMatchWithDecks = useCallback((p1DeckEntries, p2DeckEntries) => {\n    const p1Cards = buildDeckFromEntries(p1DeckEntries);\n    const p2Cards = buildDeckFromEntries(p2DeckEntries);\n\n    // Debug: Log deck composition with detailed tag analysis\n    const p1NgoCarten = p1Cards.filter(c => c.tag === 'NGO');\n    const p1PlatformCards = p1Cards.filter(c => c.tag === 'Plattform');\n    const p1JoschaCards = p1Cards.filter(c => c.effect === 'ngo_boost');\n    const p1PublicCards = p1Cards.filter(c => c.kind === 'spec' && c.type === 'Öffentlichkeitskarte');\n    log(`🔍 DECK DEBUG P1: ${p1Cards.length} Karten total`);\n    log(`🧪 P1 Public Cards: ${p1PublicCards.map(c => `${c.name}${c.tag ? `[${c.tag}]` : ''}`).join(', ')}`);\n    log(`🌱 P1 NGO-Karten: ${p1NgoCarten.length > 0 ? p1NgoCarten.map(c => c.name).join(', ') : 'Keine'}`);\n    log(`💻 P1 Plattform-Karten: ${p1PlatformCards.length > 0 ? p1PlatformCards.map(c => c.name).join(', ') : 'Keine'}`);\n    log(`🎯 JOSCHKA FISCHER: ${p1JoschaCards.length > 0 ? '✅ IM DECK' : '❌ NICHT IM DECK'}`);\n    const d1 = [...p1Cards];\n    const d2 = [...p2Cards];\n    const h1 = d1.splice(0, Math.min(5, d1.length));\n    const h2 = d2.splice(0, Math.min(5, d2.length));\n    setGameState(prev => ({\n      ...prev,\n      round: 1,\n      current: 1,\n      passed: {\n        1: false,\n        2: false\n      },\n      decks: {\n        1: d1,\n        2: d2\n      },\n      hands: {\n        1: h1,\n        2: h2\n      },\n      board: {\n        1: {\n          innen: [],\n          aussen: [],\n          sofort: []\n        },\n        2: {\n          innen: [],\n          aussen: [],\n          sofort: []\n        }\n      },\n      traps: {\n        1: [],\n        2: []\n      },\n      permanentSlots: {\n        1: {\n          government: null,\n          public: null,\n          initiativePermanent: null\n        },\n        2: {\n          government: null,\n          public: null,\n          initiativePermanent: null\n        }\n      },\n      // instantSlot wird nicht mehr verwendet - Sofort-Initiativen gehen in board[player].sofort\n      discard: [],\n      shields: new Set(),\n      // Set<UID>\n      effectFlags: {\n        1: createDefaultEffectFlags(),\n        2: createDefaultEffectFlags()\n      },\n      actionsUsed: {\n        1: 0,\n        2: 0\n      },\n      log: [`Match gestartet. P1 und P2 erhalten je ${h1.length}/${h2.length} Startkarten.`, `🔍 DECK DEBUG P1: ${p1Cards.length} Karten total`, `🧪 P1 Public Cards: ${p1PublicCards.map(c => `${c.name}${c.tag ? `[${c.tag}]` : ''}`).join(', ')}`, `🌱 P1 NGO-Karten: ${p1NgoCarten.length > 0 ? p1NgoCarten.map(c => c.name).join(', ') : 'Keine'}`, `💻 P1 Plattform-Karten: ${p1PlatformCards.length > 0 ? p1PlatformCards.map(c => c.name).join(', ') : 'Keine'}`, `🎯 JOSCHKA FISCHER: ${p1JoschaCards.length > 0 ? '✅ IM DECK' : '❌ NICHT IM DECK'}`, `📋 INITIAL BOARD P1: Regierung=[] | Öffentlichkeit=[]`, `📋 INITIAL BOARD P2: Regierung=[] | Öffentlichkeit=[]`, `🏠 PERMANENT SLOTS: Alle leer`],\n      activeRefresh: {\n        1: 0,\n        2: 0\n      },\n      // preserve any aiEnabled flags set before calling this\n      aiEnabled: prev.aiEnabled || {\n        1: false,\n        2: false\n      }\n    }));\n  }, [gameState, setGameState, log]);\n  const startMatchVsAI = useCallback((p1DeckEntries, presetKey = 'AUTORITAERER_REALIST') => {\n    const p2DeckEntries = PRESET_DECKS[presetKey];\n    // Enable AI for P2 first so nextTurn/auto-run sees the flag immediately\n    setGameState(prev => ({\n      ...prev,\n      aiEnabled: {\n        ...(prev.aiEnabled || {\n          1: false,\n          2: false\n        }),\n        2: true\n      }\n    }));\n    log('🔧 AI aktiviert für Spieler 2');\n    startMatchWithDecks(p1DeckEntries, p2DeckEntries);\n  }, [startMatchWithDecks]);\n  const playCard = useCallback((player, handIndex, lane) => {\n    logger.info(`playCard START P${player} idx=${handIndex}`);\n    setGameState(prev => {\n      // Test-only baseline fix – ensures AP=5 at game start inside test runner\n      ensureTestBaselineAP(prev);\n\n      // Validate input parameters\n      if (prev.current !== player) {\n        log(`❌ ERROR: Not player turn - Current: ${prev.current}, Attempted: ${player}`);\n        logger.warn(`playCard abort: wrong turn`);\n        return prev;\n      }\n      const hand = prev.hands[player];\n      if (handIndex < 0 || handIndex >= hand.length) {\n        log(`❌ ERROR: Invalid hand index - Index: ${handIndex}, Hand length: ${hand.length}`);\n        return prev;\n      }\n\n      // Debug: Log current hand contents with detailed tag info\n      log(`🔍 HAND DEBUG P${player}: ${hand.map((c, i) => `${i}:${c.name}${c.tag ? `[${c.tag}]` : ''}`).join(', ')}`);\n      const ngoCards = hand.filter(c => c.tag === 'NGO');\n      const platformCards = hand.filter(c => c.tag === 'Plattform');\n      if (ngoCards.length > 0) {\n        log(`🌱 NGO-Karten in Hand P${player}: ${ngoCards.map(c => c.name).join(', ')}`);\n      }\n      if (platformCards.length > 0) {\n        log(`💻 Plattform-Karten in Hand P${player}: ${platformCards.map(c => c.name).join(', ')}`);\n      }\n      const selectedCard = hand[handIndex];\n      if (!canPlayCard(prev, player, selectedCard)) {\n        log('🚫 Kann Karte nicht spielen (keine AP verfügbar).');\n        return prev;\n      }\n      const {\n        cost\n      } = getNetApCost(prev, player, selectedCard);\n      const prevAp = prev.actionPoints[player];\n      const newState = {\n        ...prev\n      };\n\n      // Simplified AP system: All cards cost exactly 1 AP\n      newState.actionPoints[player] = Math.max(0, newState.actionPoints[player] - cost);\n      log(`💳 Kosten verbucht: AP ${prevAp}→${newState.actionPoints[player]}`);\n\n      // Flags KONSUMIEREN (einheitlich, NUR HIER!)\n      ensureFlags(newState, player);\n      const ef = newState.effectFlags[player];\n\n      // Simplified AP system: No refunds or discounts\n      // All cards cost exactly 1 AP\n\n      // Remove card from hand\n      const newHand = [...newState.hands[player]];\n      const [playedCard] = newHand.splice(handIndex, 1);\n      newState.hands = {\n        ...newState.hands,\n        [player]: newHand\n      };\n\n      // Prevent double-playing the same UID concurrently\n      if (playedCard.uid) {\n        if (playingUidRef.current.has(playedCard.uid)) {\n          log(`⚠️ Duplicate play prevented for UID ${playedCard.uid}`);\n          return prev;\n        }\n        playingUidRef.current.add(playedCard.uid);\n      }\n\n      // 🔧 CLUSTER 3 DEBUG: Zeige jede gespielte Karte\n      log(`🔧 CLUSTER 3 GLOBAL DEBUG: P${player} spielt ${playedCard.name} (${playedCard.kind}) - Type: ${playedCard.type || 'KEIN TYPE'}`);\n\n      // 🔧 CLUSTER 3 DEBUG: Zeige aktuelles Board\n      const currentBoard = newState.board[player];\n      const publicCardsOnBoard = currentBoard.innen.filter(card => card.kind === 'spec');\n      log(`🔧 CLUSTER 3 GLOBAL DEBUG: Öffentlichkeitskarten auf dem Feld: ${publicCardsOnBoard.map(c => c.name).join(', ')}`);\n\n      // Jennifer Doudna check removed - not needed for current game logic\n\n      // Handle different card types\n      if (playedCard.kind === 'pol') {\n        const polCard = playedCard;\n        const targetLane = lane || (polCard.tag === 'Staatsoberhaupt' || polCard.tag === 'Regierungschef' || polCard.tag === 'Diplomat' ? 'aussen' : 'innen');\n        if (newState.board[player][targetLane].length >= 5) {\n          log(`❌ ERROR: Lane full - Lane: ${targetLane}, Current: ${newState.board[player][targetLane].length}/5`);\n          return prev;\n        }\n\n        // Add to board (immutable clone to avoid accidental double references)\n        const laneArray = [...newState.board[player][targetLane], playedCard];\n        const playerBoardCloned = {\n          ...newState.board[player],\n          [targetLane]: laneArray\n        };\n        newState.board = {\n          ...newState.board,\n          [player]: playerBoardCloned\n        };\n\n        // VISUAL: spawn GIF overlay centered over the government slot icon when placing a government card\n        try {\n          if (targetLane === 'aussen') {\n            const rects = getGovernmentRects(player === 1 ? 'player' : 'opponent');\n            const slotIndex = newState.board[player].aussen.length - 1;\n            const slotRect = rects[slotIndex] || rects[0] || {\n              x: 960 - 128,\n              y: 540 - 128,\n              w: 256,\n              h: 256\n            };\n            const cx = slotRect.x + slotRect.w / 2;\n            const cy = slotRect.y + slotRect.h / 2;\n\n            // particles/pop in canvas coords\n            try {\n              visualEffects === null || visualEffects === void 0 ? void 0 : visualEffects.spawnParticles(cx, cy, 18);\n            } catch (e) {}\n            try {\n              var _playedCard$uid;\n              visualEffects === null || visualEffects === void 0 ? void 0 : visualEffects.spawnPop((_playedCard$uid = playedCard.uid) !== null && _playedCard$uid !== void 0 ? _playedCard$uid : playedCard.id);\n            } catch (e) {}\n\n            // compute screen coords and spawn 300x300 overlay\n            const canvas = document.querySelector('canvas');\n            if (canvas) {\n              const bbox = canvas.getBoundingClientRect();\n              const {\n                scale,\n                offsetX,\n                offsetY\n              } = getUiTransform(canvas.width, canvas.height);\n              const screenCx = bbox.left + (cx * scale + offsetX);\n              const screenCy = bbox.top + (cy * scale + offsetY);\n              if (visualEffects) {\n                var _playedCard$uid2, _playedCard$uid4;\n                visualEffects.spawnGifOverlay({\n                  id: (_playedCard$uid2 = playedCard.uid) !== null && _playedCard$uid2 !== void 0 ? _playedCard$uid2 : playedCard.id,\n                  cx: screenCx,\n                  cy: screenCy,\n                  w: 300,\n                  h: 300,\n                  src: slotGovGif,\n                  duration: 800\n                });\n                try {\n                  var _playedCard$uid3;\n                  visualEffects.playAnimsRef.current.push({\n                    uid: (_playedCard$uid3 = playedCard.uid) !== null && _playedCard$uid3 !== void 0 ? _playedCard$uid3 : playedCard.id,\n                    started: performance.now(),\n                    duration: 420\n                  });\n                } catch (e) {}\n                console.debug('[GameActions] GOV overlay spawned', {\n                  uid: (_playedCard$uid4 = playedCard.uid) !== null && _playedCard$uid4 !== void 0 ? _playedCard$uid4 : playedCard.id,\n                  screenCx,\n                  screenCy,\n                  src: slotGovGif\n                });\n              } else {\n                // fallback to global provider if present\n                const wv = window.__pc_visual_effects || window.__pc_visual_effects;\n                if (wv && typeof wv.spawnGifOverlay === 'function') {\n                  try {\n                    var _playedCard$uid5;\n                    wv.spawnGifOverlay({\n                      id: (_playedCard$uid5 = playedCard.uid) !== null && _playedCard$uid5 !== void 0 ? _playedCard$uid5 : playedCard.id,\n                      cx: screenCx,\n                      cy: screenCy,\n                      w: 300,\n                      h: 300,\n                      src: slotGovGif,\n                      duration: 800\n                    });\n                  } catch (e) {}\n                }\n              }\n            }\n          }\n        } catch (e) {\n          console.debug('[GameActions] GOV overlay failed', e);\n        }\n        log(`🃏 Player ${player}: ${playedCard.name} gespielt in ${targetLane === 'aussen' ? 'Regierung' : 'Öffentlichkeit'}`);\n\n        // 3) Nachdem die Karte gelegt wurde: gegnerische Traps prüfen\n        applyTrapsOnCardPlayed(newState, player, playedCard, event => {\n          if (!newState._effectQueue) newState._effectQueue = [];\n          newState._effectQueue.push(event);\n        }, log);\n\n        // 👉 Erst JETZT Auren anwenden (damit +2 Basis erhalten bleibt)\n        applyAurasForPlayer(newState, player, log);\n\n        // 6) Karteneffekte enqueuen + Queue auflösen\n        triggerCardEffects(newState, player, playedCard);\n        // UI visual: particle burst + pop scale for played card (prototype hook)\n        try {\n          spawnCardVisual(playedCard);\n        } catch (e) {}\n        // Migration Helper verwenden\n        migrateLegacyQueue(newState);\n        // Nur noch _effectQueue verwenden\n        if (newState._effectQueue && newState._effectQueue.length > 0) {\n          resolveQueue(newState, newState._effectQueue);\n          newState._effectQueue = [];\n          // Nach Queue-Auflösung: Hand-Arrays immutabel neu zuweisen\n          afterQueueResolved === null || afterQueueResolved === void 0 ? void 0 : afterQueueResolved();\n        }\n\n        // Release playing UID after queue resolved\n        if (playedCard.uid) playingUidRef.current.delete(playedCard.uid);\n\n        // Check for trap triggers\n        applyTrapsOnCardPlayed(newState, player, playedCard, e => (newState._effectQueue ??= []).push(e), m => (newState._effectQueue ??= []).push({\n          type: 'LOG',\n          msg: m\n        }));\n\n        // 🔥 ROMAN ABRAMOVICH EFFEKT: Wenn Regierungskarte mit Einfluss ≤5 gespielt wird\n        if (playedCard.kind === 'pol' && playedCard.influence <= 5) {\n          const opponent = player === 1 ? 2 : 1;\n          const opponentBoard = newState.board[opponent];\n          const romanAbramovich = opponentBoard.innen.find(card => card.kind === 'spec' && card.name === 'Roman Abramovich');\n          if (romanAbramovich) {\n            // Ziehe eine Karte für den Gegner\n            if (newState.decks[opponent].length > 0) {\n              const drawnCard = newState.decks[opponent].shift();\n              if (drawnCard) {\n                newState.hands[opponent].push(drawnCard);\n                log(`🔥 ROMAN ABRAMOVICH EFFEKT: P${opponent} zieht 1 Karte (${drawnCard.name}) - Regierungskarte mit Einfluss ≤5 gespielt`);\n              }\n            }\n          }\n        }\n\n        // 🔍 BOARD DEBUG: Zeige aktuelles Board nach dem Spielen\n        const currentBoard = newState.board[player];\n        const regierungKarten = currentBoard.aussen.map(c => `${c.name}[${c.kind === 'pol' ? c.influence + 'I' : 'S'}]`);\n        const öffentlichkeitKarten = currentBoard.innen.map(c => `${c.name}[${c.kind === 'spec' ? c.tag || 'S' : 'P'}]`);\n        log(`📋 P${player} BOARD: Regierung=[${regierungKarten.join(', ')}] | Öffentlichkeit=[${öffentlichkeitKarten.join(', ')}]`);\n\n        // 🔥 JOSCHKA FISCHER NGO-EFFEKT: Jetzt als kontinuierlicher Aura-Effekt in sumRowWithAuras implementiert\n        log(`🔍 DEBUG: Karte gespielt - Name: ${playedCard.name}, Tag: ${playedCard.tag || 'Kein Tag'}, Lane: ${targetLane}, Kind: ${playedCard.kind}`);\n        if (playedCard.tag === 'NGO') {\n          log(`🔍 NGO-Karte gespielt: ${playedCard.name} [NGO] - Kontinuierliche Aura-Effekte werden bei Rundenauswertung berechnet`);\n\n          // 🎯 SOFORTIGE SYNERGIE-PRÜFUNG: Joschka Fischer + NGO\n          const joschaFischer = currentBoard.aussen.find(card => card.kind === 'pol' && card.effect === 'ngo_boost');\n          if (joschaFischer) {\n            log(`🔥🔥🔥 SYNERGIE AKTIVIERT! 🔥🔥🔥 Joschka Fischer + ${playedCard.name}[NGO] → +1 Einfluss bei Rundenauswertung`);\n          }\n        }\n      } else if (playedCard.kind === 'spec') {\n        var _type, _type2;\n        const specCard = playedCard;\n        const typeStr = String(specCard.type || '').toLowerCase();\n        const isInitiative = /initiative/.test(typeStr); // matcht \"Initiative\", \"Sofort-Initiative\", etc.\n\n        // 1) Falls es eine \"Systemrelevant\" ist (sofortiger Buff auf letzte eigene Regierungskarte)\n        if (playedCard.kind === 'spec' && (_type = playedCard.type) !== null && _type !== void 0 && _type.toLowerCase().includes('systemrelevant')) {\n          const ownBoard = newState.board[player];\n          const candidates = [...ownBoard.aussen, ...ownBoard.innen].filter(c => c.kind === 'pol');\n          const target = candidates[candidates.length - 1]; // letzte eigene Regierungskarte\n          if (target) {\n            target.protected = true;\n            log(`🛡️ ${target.name} erhält einmaligen Schutz.`);\n          } else {\n            log('🛈 Systemrelevant: Keine eigene Regierungskarte im Spiel – Effekt verpufft.');\n          }\n          // danach die Spezialkarte normal entsorgen\n          newState.discard.push(playedCard);\n          return newState;\n        }\n\n        // 1) Dauerhaft-Initiative (Ongoing)\n        if (typeStr.includes('dauerhaft')) {\n          // Slot-Mapping: Dauerhaft-Initiativen → initiativePermanent, nicht government\n          const slotType = 'initiativePermanent';\n          if (!newState.permanentSlots[player][slotType]) {\n            newState.permanentSlots[player][slotType] = playedCard;\n            log(`P${player} spielt ${playedCard.name} als Dauerhafte Initiative (Slot: ${slotType})`);\n          } else {\n            var _newState$permanentSl;\n            log(`⚠️ WARN: Slot occupied - Slot ${slotType} already has ${(_newState$permanentSl = newState.permanentSlots[player][slotType]) === null || _newState$permanentSl === void 0 ? void 0 : _newState$permanentSl.name}`);\n          }\n\n          // 6) Karteneffekte enqueuen + Queue auflösen\n          triggerCardEffects(newState, player, playedCard);\n          // Migration Helper verwenden\n          migrateLegacyQueue(newState);\n          // Nur noch _effectQueue verwenden\n          if (newState._effectQueue && newState._effectQueue.length > 0) {\n            resolveQueue(newState, newState._effectQueue);\n            newState._effectQueue = [];\n            // Nach Queue-Auflösung: Hand-Arrays immutabel neu zuweisen\n            afterQueueResolved === null || afterQueueResolved === void 0 ? void 0 : afterQueueResolved();\n          }\n\n          // Check for trap triggers\n          applyTrapsOnCardPlayed(newState, player, playedCard, e => (newState._effectQueue ??= []).push(e), m => (newState._effectQueue ??= []).push({\n            type: 'LOG',\n            msg: m\n          }));\n          return newState;\n        }\n\n        // 2) Sofort-/Sofort-Initiativen (Instant)\n        if (isInitiative) {\n          if (!specCard.effectKey) {\n            log(`❌ Initiative ohne effectKey: ${specCard.name}`);\n          } else {\n            log(`🧩 INIT: ${specCard.name} [${String(specCard.effectKey)}] gespielt`);\n          }\n\n          // 🔧 NEU: Sofort-Initiativen werden in das sofort Array gelegt statt sofort aktiviert\n          if (typeStr.includes('sofort')) {\n            // Prüfe ob bereits eine Sofort-Initiative im Slot liegt\n            if (newState.board[player].sofort.length > 0) {\n              var _newState$board$playe;\n              log(`❌ ERROR: Sofort-Initiative-Slot bereits besetzt - ${(_newState$board$playe = newState.board[player].sofort[0]) === null || _newState$board$playe === void 0 ? void 0 : _newState$board$playe.name} muss erst aktiviert werden`);\n              // Karte zurück in die Hand\n              newState.hands[player] = [...newState.hands[player], playedCard];\n              // AP zurückgeben\n              newState.actionPoints[player] += cost;\n              // AP zurückgegeben, keine Aktion rückgängig zu machen\n              return newState;\n            }\n\n            // Sofort-Initiative in das sofort Array legen\n            newState.board[player].sofort = [playedCard];\n            log(`🎯 P${player} legt ${playedCard.name} in Sofort-Initiative-Slot (kann später aktiviert werden)`);\n\n            // Sofort-Initiativen: auf Board.sofort legen (nicht direkt entsorgen)\n            if (!newState._effectQueue) newState._effectQueue = [];\n            newState._effectQueue.push({\n              type: 'LOG',\n              msg: `🔔 Sofort-Initiative bereit: ${playedCard.name} (zum Aktivieren anklicken oder Taste 'A')`\n            });\n            return newState;\n          }\n\n          // Dauerhaft-Initiativen werden weiterhin sofort aktiviert\n          // Initiative in den Ablagestapel\n          newState.discard = [...newState.discard, playedCard];\n          log(`P${player} spielt Initiative: ${playedCard.name}`);\n\n          // 6) Karteneffekte enqueuen + Queue auflösen\n          triggerCardEffects(newState, player, playedCard);\n          // Migration Helper verwenden\n          migrateLegacyQueue(newState);\n          // Nur noch _effectQueue verwenden\n          if (newState._effectQueue && newState._effectQueue.length > 0) {\n            resolveQueue(newState, newState._effectQueue);\n            newState._effectQueue = [];\n            // Nach Queue-Auflösung: Hand-Arrays immutabel neu zuweisen\n            afterQueueResolved === null || afterQueueResolved === void 0 ? void 0 : afterQueueResolved();\n          }\n\n          // Check for trap triggers\n          applyTrapsOnCardPlayed(newState, player, playedCard, e => (newState._effectQueue ??= []).push(e), m => (newState._effectQueue ??= []).push({\n            type: 'LOG',\n            msg: m\n          }));\n\n          // 🔥 CLUSTER 3: Auren-Flags neu berechnen (nach Kartenspielen)\n          recomputeAuraFlags(newState);\n\n          // 🔥 CLUSTER 3: Ai Weiwei Bonus wird bei Aktivierung angewendet (nicht beim Spielen)\n\n          // 🔥 PASSIVE EFFEKTE NACH INITIATIVE: Mark Zuckerberg & Sam Altman\n          // Diese Effekte werden jetzt über INITIATIVE_ACTIVATED Event + Board-Check gehandhabt\n          // Keine direkten Flag-Mutationen mehr - alles über Events\n\n          return newState;\n        }\n\n        // 3) Öffentlichkeit (Public)\n        if (typeStr === 'öffentlichkeitskarte' || typeStr === 'oeffentlichkeitskarte' || typeStr === 'öffentlichkeit' || typeStr === 'public') {\n          if (newState.board[player].innen.length < 5) {\n            const innenArray = [...newState.board[player].innen, playedCard];\n            const playerBoardCloned = {\n              ...newState.board[player],\n              innen: innenArray\n            };\n            newState.board = {\n              ...newState.board,\n              [player]: playerBoardCloned\n            };\n            log(`P${player} spielt ${playedCard.name} in Öffentlichkeit`);\n\n            // Sofort Auren prüfen (z.B. JF +1, wenn JF schon liegt)\n            applyAurasForPlayer(newState, player, log);\n\n            // 6) Karteneffekte enqueuen + Queue auflösen\n            triggerCardEffects(newState, player, playedCard);\n            // Migration Helper verwenden\n            migrateLegacyQueue(newState);\n            if (newState._effectQueue && newState._effectQueue.length > 0) {\n              resolveQueue(newState, newState._effectQueue);\n              newState._effectQueue = [];\n              // Nach Queue-Auflösung: Hand-Arrays immutabel neu zuweisen\n              afterQueueResolved === null || afterQueueResolved === void 0 ? void 0 : afterQueueResolved();\n            }\n\n            // Check for trap triggers\n            applyTrapsOnCardPlayed(newState, player, playedCard, e => (newState._effectQueue ??= []).push(e), m => (newState._effectQueue ??= []).push({\n              type: 'LOG',\n              msg: m\n            }));\n\n            // 🔥 PUBLIC CARD EFFECTS - Passive effects when played\n\n            // Helper function to draw a card for the player\n            const drawCardForPlayer = cardName => {\n              if (newState.decks[player].length > 0) {\n                const drawnCard = newState.decks[player].shift();\n                if (drawnCard) {\n                  newState.hands[player].push(drawnCard);\n                  log(`🔥 ${cardName.toUpperCase()} EFFEKT: +1 Karte gezogen (${drawnCard.name})`);\n                  return true;\n                }\n              }\n              return false;\n            };\n            if (specCard.name === 'Elon Musk') {\n              // Effect: \"Ziehe 1 Karte. Deine erste Initiative pro Runde kostet 1 Aktionspunkt weniger.\"\n              drawCardForPlayer('Elon Musk');\n              // 🔥 QUEUE-SYSTEM: Erste Initiative pro Runde → Refund wird über triggerCardEffects gehandhabt\n            } else if (specCard.name === 'Bill Gates') {\n              // Effect: \"Ziehe 1 Karte. Deine nächste Initiative kostet 1 Aktionspunkt weniger.\"\n              drawCardForPlayer('Bill Gates');\n              // 🔥 QUEUE-SYSTEM: Nächste Initiative → Refund wird über triggerCardEffects gehandhabt\n            } else if (specCard.name === 'Jeff Bezos') {\n              // Effect: \"Ziehe 1 Karte beim Ausspielen. Wenn eine Plattform liegt: +1 Aktionspunkt.\"\n              drawCardForPlayer('Jeff Bezos');\n              const hasPlatform = newState.board[player].innen.some(c => c.kind === 'spec' && c.tag === 'Plattform');\n              if (hasPlatform) {\n                newState.actionPoints[player] += 1;\n                log(`🔥 JEFF BEZOS: +1 AP durch Plattform-Synergie! (${newState.actionPoints[player] - 1} → ${newState.actionPoints[player]})`);\n              }\n            } else if (specCard.name === 'Warren Buffett') {\n              // Effect: \"Ziehe 1 Karte. Bei einer Wirtschafts-Initiative: +1 Effekt.\"\n              drawCardForPlayer('Warren Buffett');\n              // TODO: Implement \"Wirtschafts-Initiative +1 Effect\" logic\n              log(`📊 WARREN BUFFETT: Bei Wirtschafts-Initiativen +1 Effekt! (TODO: Implementierung)`);\n            } else if (specCard.name === 'Gautam Adani') {\n              // Effect: \"Ziehe 1 Karte. Bei einer Infrastruktur-Initiative: +1 Effekt.\"\n              drawCardForPlayer('Gautam Adani');\n              // TODO: Implement \"Infrastruktur-Initiative +1 Effect\" logic\n              log(`📊 GAUTAM ADANI: Bei Infrastruktur-Initiativen +1 Effekt! (TODO: Implementierung)`);\n            } else if (specCard.name === 'Zhang Yiming') {\n              // Effect: \"Ziehe 1 Karte. Bei Medien auf dem Feld: -1 Aktionspunkt auf deine nächste Initiative.\"\n              drawCardForPlayer('Zhang Yiming');\n              const hasMedia = newState.board[player].innen.some(c => c.kind === 'spec' && c.tag === 'Medien');\n              if (hasMedia) {\n                // TODO: Implement \"nächste Initiative -1 AP\" logic\n                log(`🔥 ZHANG YIMING: Nächste Initiative kostet 1 AP weniger durch Medien-Synergie! (TODO: Implementierung)`);\n              }\n            } else if (specCard.name === 'George Soros') {\n              // Effect: \"+1 Aktionspunkt wenn der Gegner eine autoritäre Regierungskarte hat.\"\n              const opponent = player === 1 ? 2 : 1;\n              const hasAuthoritarianCard = newState.board[opponent].aussen.some(card => {\n                const polCard = card;\n                return polCard.tag === 'Staatsoberhaupt' && polCard.influence >= 8; // High influence leaders\n              });\n              if (hasAuthoritarianCard) {\n                newState.actionPoints[player] += 1;\n                log(`🔥 GEORGE SOROS EFFEKT: +1 AP durch autoritäre Regierung des Gegners!`);\n                log(`📊 SOROS: Aktionspunkte ${newState.actionPoints[player] - 1} → ${newState.actionPoints[player]}`);\n              } else {\n                log(`💭 George Soros: Keine autoritären Karten beim Gegner - Effekt nicht ausgelöst`);\n              }\n            }\n\n            // 🔗 NGO-Synergie: Wenn eine NGO gelegt wird und Joschka Fischer liegt, erhält P${player} +1 Einfluss (Rundenauswertung)\n            if (specCard.tag === 'NGO') {\n              const hasJoschka = newState.board[player].aussen.some(c => c.kind === 'pol' && c.name === 'Joschka Fischer' && !c.deactivated);\n              if (hasJoschka) {\n                log(`🔥🔥🔥 SYNERGIE AKTIVIERT! 🔥🔥🔥 Joschka Fischer + ${playedCard.name}[NGO] → +1 Einfluss bei Rundenauswertung`);\n              }\n            }\n          } else {\n            log(`❌ ERROR: Lane full - Öffentlichkeit ist voll (5/5)`);\n          }\n\n          // Simplified AP system: No refunds\n          return newState;\n        }\n\n        // 4) Default: Traps/Interventions\n        // Falls Trap-Karte gelegt wird\n        if (playedCard.kind === 'spec' && (_type2 = playedCard.type) !== null && _type2 !== void 0 && _type2.toLowerCase().includes('trap')) {\n          registerTrap(newState, player, playedCard.key || playedCard.name.toLowerCase().replace(/[- ]/g, '_'));\n          // NICHT sofort checken – sie wartet auf den Gegner\n          return newState;\n        }\n        newState.traps[player] = [...newState.traps[player], playedCard];\n        log(`P${player} spielt ${playedCard.name} als ${specCard.type}`);\n\n        // 6) Karteneffekte enqueuen + Queue auflösen\n        triggerCardEffects(newState, player, playedCard);\n        // Migration Helper verwenden\n        migrateLegacyQueue(newState);\n        // Nur noch _effectQueue verwenden\n        if (newState._effectQueue && newState._effectQueue.length > 0) {\n          resolveQueue(newState, newState._effectQueue);\n          newState._effectQueue = [];\n          // Nach Queue-Auflösung: Hand-Arrays immutabel neu zuweisen\n          afterQueueResolved === null || afterQueueResolved === void 0 ? void 0 : afterQueueResolved();\n        }\n\n        // Check for trap triggers\n        applyTrapsOnCardPlayed(newState, player, playedCard, e => (newState._effectQueue ??= []).push(e), m => (newState._effectQueue ??= []).push({\n          type: 'LOG',\n          msg: m\n        }));\n\n        // Simplified AP system: No refunds\n        return newState;\n      }\n\n      // 6) Karteneffekte enqueuen + Queue auflösen (fallback für unbekannte Kartentypen)\n      triggerCardEffects(newState, player, selectedCard);\n      // Migration Helper verwenden\n      migrateLegacyQueue(newState);\n      // Nur noch _effectQueue verwenden\n      if (newState._effectQueue && newState._effectQueue.length > 0) {\n        resolveQueue(newState, newState._effectQueue);\n        newState._effectQueue = [];\n        // Nach Queue-Auflösung: Hand-Arrays immutabel neu zuweisen\n        afterQueueResolved === null || afterQueueResolved === void 0 ? void 0 : afterQueueResolved();\n      }\n\n      // Check for trap triggers\n      applyTrapsOnCardPlayed(newState, player, selectedCard, e => (newState._effectQueue ??= []).push(e), m => (newState._effectQueue ??= []).push({\n        type: 'LOG',\n        msg: m\n      }));\n\n      // Simplified AP system: No refunds\n\n      // Kein Aktionenlimit mehr → automatischer Turnwechsel entfällt\n\n      return newState;\n    });\n  }, [setGameState, log]);\n  const activateInstantInitiative = useCallback(player => {\n    logger.info(`activateInstantInitiative START P${player}`);\n    setGameState(prev => {\n      if (prev.current !== player) {\n        log(`❌ ERROR: Not player turn - Current: ${prev.current}, Attempted: ${player}`);\n        return prev;\n      }\n      const instantCard = prev.board[player].sofort[0];\n      if (!instantCard) {\n        log(`❌ ERROR: No Sofort-Initiative in slot for player ${player}`);\n        return prev;\n      }\n      const newState = {\n        ...prev\n      };\n\n      // 1) Normale Karten-Effekte der Sofort-Karte feuern\n      triggerCardEffects(newState, player, instantCard);\n\n      // UI visual: initiative ripple + AP pop (prototype hook)\n      try {\n        var _politicardDebug4;\n        const zones = ((_politicardDebug4 = window.__politicardDebug) === null || _politicardDebug4 === void 0 ? void 0 : _politicardDebug4.clickZones) || [];\n        const boardZone = zones.find(z => z.data && z.data.type === 'row_slot');\n        const cx = boardZone ? boardZone.x + (boardZone.w || 256) / 2 : 960;\n        const cy = boardZone ? boardZone.y + (boardZone.h || 256) / 2 : 300;\n        if (visualEffects) {\n          visualEffects.spawnRipple(cx, cy, {\n            radius: 640,\n            showAp: true,\n            apX: cx,\n            apY: cy + 40\n          });\n        } else {\n          window.__pc_ripples = window.__pc_ripples || [];\n          window.__pc_ripples.push({\n            cx,\n            cy,\n            started: performance.now(),\n            duration: 700,\n            radius: 640,\n            showAp: true,\n            apX: cx,\n            apY: cy + 40\n          });\n        }\n      } catch (e) {}\n\n      // Check for trap triggers\n      applyTrapsOnCardPlayed(newState, player, instantCard, e => (newState._effectQueue ??= []).push(e), m => (newState._effectQueue ??= []).push({\n        type: 'LOG',\n        msg: m\n      }));\n\n      // 2) Queue auflösen (BEVOR die Karte entfernt wird)\n      if (newState._effectQueue && newState._effectQueue.length > 0) {\n        resolveQueue(newState, [...newState._effectQueue]);\n        newState._effectQueue = [];\n        // Nach Queue-Auflösung: Hand-Arrays immutabel neu zuweisen\n        afterQueueResolved === null || afterQueueResolved === void 0 ? void 0 : afterQueueResolved();\n      }\n\n      // 3) Karte NACH Queue-Auflösung in den Ablagestapel\n      const [played] = newState.board[player].sofort.splice(0, 1);\n      newState.discard.push(played);\n      return newState;\n    });\n  }, [setGameState, log]);\n  const endTurn = useCallback((reason = 'button_end_turn') => {\n    logger.info(`endTurn START reason=${reason}`);\n    setGameState(prev => {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const current = prev.current;\n\n      // 1) Schon im Abschluss? -> Nichts tun (Idempotenz)\n      if (prev.isEndingTurn) {\n        log('🔁 Zugabschluss läuft bereits – warte auf Queue.');\n        return prev;\n      }\n      const newState = {\n        ...prev,\n        isEndingTurn: true\n      };\n\n      // 2) Hängen noch Effekte in der Queue? -> Auflösen lassen\n      if (newState._effectQueue && newState._effectQueue.length > 0) {\n        log('⏳ Effekte werden noch aufgelöst – Zugwechsel folgt automatisch.');\n        resolveQueue(newState, [...newState._effectQueue]);\n        newState._effectQueue = [];\n        // Nach Queue-Auflösung: Wenn Flag noch gesetzt, Zug beenden\n        if (newState.isEndingTurn) {\n          return reallyEndTurn(newState, log);\n        }\n        return newState;\n      }\n\n      // 3) Keine Effekte mehr -> sofort beenden\n      return reallyEndTurn(newState, log);\n    });\n  }, [setGameState, log]);\n\n  // Legacy: nextTurn als Alias für endTurn für Kompatibilität\n  const nextTurn = useCallback(() => {\n    logger.info('nextTurn alias called');\n    endTurn('auto');\n  }, [endTurn]);\n  const passTurn = useCallback(player => {\n    logger.info(`passTurn START P${player}`);\n    setGameState(prev => {\n      logger.dbg(`passTurn setState current=${prev.current} player=${player}`);\n      if (prev.current !== player) {\n        logger.dbg(`passTurn wrong turn current=${prev.current} attempted=${player}`);\n        return prev;\n      }\n      const newState = {\n        ...prev,\n        passed: {\n          ...prev.passed,\n          [player]: true\n        }\n      };\n      logger.dbg(`Pass status updated P1=${newState.passed[1]} P2=${newState.passed[2]}`);\n      log(`🚫 Spieler ${player} passt.`);\n\n      // ❗ Kein Nachziehen bei Pass:\n      // Der passierende Spieler kommt in dieser Runde nicht mehr dran.\n      // Die nächste Runde startet ohnehin mit 5 neuen Handkarten.\n\n      // Check if round should end (both players passed)\n      const shouldEndRound = checkRoundEnd(newState);\n      logger.dbg(`Should end round? ${shouldEndRound}`);\n      if (shouldEndRound) {\n        log(`🏁 Runde ${newState.round} wird beendet und ausgewertet.`);\n        return resolveRound(newState, log);\n      } else {\n        // Switch turn to other player for their final chance\n        const otherPlayer = player === 1 ? 2 : 1;\n        logger.dbg(`Switching to other player ${otherPlayer} hasPassed=${newState.passed[otherPlayer]}`);\n\n        // Only switch if other player hasn't passed yet\n        if (!newState.passed[otherPlayer]) {\n          newState.current = otherPlayer;\n          newState.actionPoints = {\n            ...newState.actionPoints,\n            [otherPlayer]: 2\n          };\n\n          // Apply new start-of-turn hooks\n          applyStartOfTurnFlags(newState, otherPlayer, log);\n\n          // 🔥 CLUSTER 3: Auren-Flags beim Zugstart neu berechnen\n          recomputeAuraFlags(newState);\n          log(`⏭️ Spieler ${otherPlayer} hat noch einen letzten Zug.`);\n          logger.dbg(`Turn switched to player ${otherPlayer}`);\n        } else {\n          // Both players have passed now, end round\n          log(`🏁 Runde ${newState.round} wird beendet (beide Spieler haben gepasst).`);\n          return resolveRound(newState, log);\n        }\n      }\n      return newState;\n    });\n  }, [setGameState, log]);\n  return {\n    startMatchWithDecks,\n    startMatchVsAI,\n    playCard,\n    activateInstantInitiative,\n    passTurn,\n    nextTurn,\n    endTurn\n  };\n}\n_s(useGameActions, \"16rTrIFLeV/rubmFtu/2f1zn4aM=\", false, function () {\n  return [useVisualEffectsSafe];\n});","map":{"version":3,"names":["useCallback","useRef","createDefaultEffectFlags","buildDeckFromEntries","sumGovernmentInfluenceWithAuras","PRESET_DECKS","getCardActionPointCost","getNetApCost","canPlayCard","triggerCardEffects","ensureTestBaselineAP","resolveQueue","applyStartOfTurnFlags","registerTrap","applyTrapsOnCardPlayed","recomputeAuraFlags","emptyBoard","logger","useVisualEffectsSafe","slotGovGif","getUiTransform","getGovernmentRects","migrateLegacyQueue","state","other","p","ensureFlags","s","effectFlags","pickLane","c","tag","kind","isCardPlayableNow","player","card","deactivated","lane","board","length","t","String","type","toLowerCase","innen","slot","permanentSlots","hasPlayableZeroCost","hands","cost","applyAurasForPlayer","log","hasNgo","some","newAussen","aussen","map","pol","baseInfluence","influence","prev","bonus","name","effect","checkRoundEnd","gameState","result","passed","dbg","drawCardsFromDeck","count","deck","decks","drawnCards","splice","Math","min","reallyEndTurn","current","isEndingTurn","drawnCard","shift","push","shouldEndRound","round","resolveRound","newCurrent","actionPoints","p1Influence","p2Influence","roundWinner","cardsToDiscard","government","public","sofort","newP1Hand","newP2Hand","newRoundsWon","roundsWon","p1Wins","p2Wins","gameWinner","newState","actionsUsed","initiativePermanent","slice","discard","useGameActions","setGameState","afterQueueResolved","_s","visualEffects","spawnCardVisual","_card$uid","_card$uid2","_politicardDebug2","console","debug","uid","id","_politicardDebug","located","idxA","findIndex","_c$uid","_card$uid3","index","idxI","_c$uid2","_card$uid4","_card$uid5","_card$uid6","rects","x","y","w","h","cx_slot","cy_slot","spawnParticles","spawnPop","cx","cy","canvas","document","querySelector","_card$uid7","_card$uid8","rect","getBoundingClientRect","scale","offsetX","offsetY","width","height","screenCx","left","screenCy","top","spawnGifOverlay","src","duration","_card$uid9","playAnimsRef","started","performance","now","e","zones","window","__politicardDebug","clickZones","zone","find","z","_z$data$card$uid","data","_z$data$card$uid2","__pc_particles","i","start","life","random","vx","vy","size","color","floor","gravity","__pc_pops","__pc_play_anims","wv","__pc_visual_effects","_politicardDebug3","ui","uiTransform","playingUidRef","Set","startMatchWithDecks","p1DeckEntries","p2DeckEntries","p1Cards","p2Cards","p1NgoCarten","filter","p1PlatformCards","p1JoschaCards","p1PublicCards","join","d1","d2","h1","h2","traps","shields","activeRefresh","aiEnabled","startMatchVsAI","presetKey","playCard","handIndex","info","warn","hand","ngoCards","platformCards","selectedCard","prevAp","max","ef","newHand","playedCard","has","add","currentBoard","publicCardsOnBoard","polCard","targetLane","laneArray","playerBoardCloned","slotIndex","slotRect","_playedCard$uid","bbox","_playedCard$uid2","_playedCard$uid4","_playedCard$uid3","_playedCard$uid5","event","_effectQueue","delete","m","msg","opponent","opponentBoard","romanAbramovich","regierungKarten","öffentlichkeitKarten","joschaFischer","_type","_type2","specCard","typeStr","isInitiative","test","includes","ownBoard","candidates","target","protected","slotType","_newState$permanentSl","effectKey","_newState$board$playe","innenArray","drawCardForPlayer","cardName","toUpperCase","hasPlatform","hasMedia","hasAuthoritarianCard","hasJoschka","key","replace","activateInstantInitiative","instantCard","_politicardDebug4","boardZone","spawnRipple","radius","showAp","apX","apY","__pc_ripples","played","endTurn","reason","nextTurn","passTurn","otherPlayer"],"sources":["C:/Users/skank/Videos/Cards/Milchcards/src/hooks/useGameActions.ts"],"sourcesContent":["import { useCallback, useRef } from 'react';\nimport { GameState, Card, Player, BuilderEntry, PoliticianCard } from '../types/game';\nimport { createDefaultEffectFlags } from '../types/game';\nimport { buildDeckFromEntries, sumGovernmentInfluenceWithAuras } from '../utils/gameUtils';\nimport { PRESET_DECKS } from '../data/gameData';\nimport { getCardActionPointCost, getNetApCost, canPlayCard, isInitiativeCard, isGovernmentCard } from '../utils/ap';\nimport { triggerCardEffects } from '../effects/cards';\nimport { ensureTestBaselineAP } from '../utils/testCompat';\nimport { resolveQueue } from '../utils/queue';\nimport { applyStartOfTurnFlags } from '../utils/startOfTurnHooks';\nimport { registerTrap, applyTrapsOnCardPlayed } from '../utils/traps';\nimport { recomputeAuraFlags } from '../state/effects';\nimport { activateInstantInitiative as activateInstantInitiativeRuntime } from '../state/instantRuntime';\nimport { isInstantInitiative } from '../utils/initiative';\nimport { emptyBoard } from '../state/board';\nimport type { EffectEvent } from '../types/effects';\nimport { logger } from '../debug/logger';\nimport { useVisualEffects, useVisualEffectsSafe } from '../context/VisualEffectsContext';\nimport slotGovGif from '../ui/layout/slot_gov.gif';\nimport { getUiTransform, getGovernmentRects } from '../ui/layout';\n\n// Migration Helper für Queue-Vereinheitlichung\nconst migrateLegacyQueue = (state: any) => {\n  // Queue migration completed - only _effectQueue exists now\n};\n\n// Helper function for getting the other player\nconst other = (p: Player): Player => (p === 1 ? 2 : 1) as Player;\n\n// Hilfsfunktion: stellt sicher, dass effectFlags vorhanden sind\nconst ensureFlags = (s: GameState, p: Player) => {\n  if (!s.effectFlags) {\n    (s as any).effectFlags = { 1: createDefaultEffectFlags(), 2: createDefaultEffectFlags() };\n  } else {\n    s.effectFlags[p] = { ...createDefaultEffectFlags(), ...s.effectFlags[p] };\n  }\n};\n\n// Lane-Heuristik wie in playCard\nconst pickLane = (c: Card): 'innen'|'aussen' => {\n  const tag = (c as any).tag;\n  if (c.kind === 'pol' && (tag === 'Staatsoberhaupt' || tag === 'Regierungschef' || tag === 'Diplomat')) return 'aussen';\n  return 'innen';\n};\n\nconst isCardPlayableNow = (state: GameState, player: Player, card: Card): boolean => {\n  if ((card as any).deactivated) return false;\n\n  if (card.kind === 'pol') {\n    const lane = pickLane(card);\n    return state.board[player][lane].length < 5;\n  }\n\n  if (card.kind === 'spec') {\n    const t = String((card as any).type || '').toLowerCase();\n    if (t === 'öffentlichkeitskarte' || t === 'oeffentlichkeitskarte' || t === 'public') {\n      return state.board[player].innen.length < 5;\n    }\n    if (t === 'dauerhaft-initiative') {\n      const slot = 'government'; // wie bei dir „simplified\"\n      return !state.permanentSlots[player][slot];\n    }\n    // sonst: Fallen/Interventionen – aktuell immer erlaubt\n    return true;\n  }\n\n  return false;\n};\n\nexport const hasPlayableZeroCost = (state: GameState, player: Player): boolean => {\n  for (const c of state.hands[player]) {\n    const { cost } = getCardActionPointCost(state, player, c);\n    if (cost === 0 && isCardPlayableNow(state, player, c)) return true;\n  }\n  return false;\n};\n\n// Helper function to apply auras for a player (instant updates for Joschka Fischer + NGO synergy)\nfunction applyAurasForPlayer(state: GameState, player: Player, log?: (msg: string) => void) {\n  const board = state.board[player];\n  const hasNgo = board.innen.some(c =>\n    c.kind === 'spec' &&\n    (c as any).type === 'Öffentlichkeitskarte' &&\n    (c as any).tag === 'NGO' &&\n    !(c as any).deactivated\n  );\n\n  const newAussen = board.aussen.map(card => {\n    if (card.kind !== 'pol') return card;\n    const pol: any = { ...card };\n    if (pol.baseInfluence == null) pol.baseInfluence = pol.influence;\n    const prev = pol.influence as number;\n\n    let bonus = 0;\n    if (!pol.deactivated && pol.name === 'Joschka Fischer' && pol.effect === 'ngo_boost' && hasNgo) {\n      bonus += 1;\n    }\n    pol.influence = (pol.baseInfluence as number) + bonus;\n    if (log && pol.influence > prev) log(`PASSIV: ${pol.name} +${pol.influence - prev} I (jetzt ${pol.influence}).`);\n    return pol;\n  });\n\n  state.board = {\n    ...state.board,\n    [player]: { ...state.board[player], aussen: newAussen },\n  } as any;\n}\n\n\n\n// Helper function to check if round should end\nfunction checkRoundEnd(gameState: GameState): boolean {\n  // Round ends if both players have passed\n  const result = gameState.passed[1] && gameState.passed[2];\n  logger.dbg(`checkRoundEnd P1=${gameState.passed[1]} P2=${gameState.passed[2]} result=${result}`);\n  return result;\n}\n\n// Helper function to draw cards from deck\nfunction drawCardsFromDeck(gameState: GameState, player: Player, count: number): Card[] {\n  const deck = [...gameState.decks[player]];\n  const drawnCards = deck.splice(0, Math.min(count, deck.length));\n  return drawnCards;\n}\n\n// Helper function to really end a turn (extracted from nextTurn logic)\nfunction reallyEndTurn(gameState: GameState, log: (msg: string) => void): GameState {\n  const current = gameState.current;\n\n  // Flag zurücksetzen - Zug-Ende wird jetzt wirklich durchgeführt\n  gameState.isEndingTurn = false;\n\n  // ✅ Karte nachziehen am Ende eines Zugs (nur wenn NICHT \"pass\")\n  if (!gameState.passed[current]) {\n    const drawnCard = gameState.decks[current].shift();\n    if (drawnCard) {\n      gameState.hands[current].push(drawnCard);\n      log(`🔥 Zug-Ende: +1 Karte gezogen (${drawnCard.name})`);\n    }\n  } else {\n    log(`⏭️ P${current} hat gepasst – kein Nachziehen.`);\n  }\n\n  // Check if round should end\n  const shouldEndRound = checkRoundEnd(gameState);\n  if (shouldEndRound) {\n    log(`🏁 Runde ${gameState.round} wird beendet (Zug-Ende).`);\n    return resolveRound(gameState, log);\n  }\n\n  // Spielerwechsel + AP reset\n  const newCurrent: Player = current === 1 ? 2 : 1;\n  gameState.current = newCurrent;\n  gameState.actionPoints = { ...gameState.actionPoints, [newCurrent]: 2 };\n  gameState.passed = { ...gameState.passed, [newCurrent]: false };\n\n            // Apply new start-of-turn hooks\n          applyStartOfTurnFlags(gameState, newCurrent, log);\n\n        // 🔥 CLUSTER 3: Auren-Flags beim Zugstart neu berechnen\n        recomputeAuraFlags(gameState);\n\n  // Reset turn-bezogener Flag-Nutzungen (handled in applyStartOfTurnFlags)\n\n  log(`🔄 Zug-Ende: Spieler ${newCurrent} ist am Zug (2 AP verfügbar)`);\n\n  return gameState;\n}\n\n// Helper function to resolve round and start new one\nfunction resolveRound(gameState: GameState, log: (msg: string) => void): GameState {\n  // Calculate influence for both players\n  const p1Influence = sumGovernmentInfluenceWithAuras(gameState, 1);\n  const p2Influence = sumGovernmentInfluenceWithAuras(gameState, 2);\n\n  log(`📊 Rundenauswertung: P1 ${p1Influence} Einfluss vs P2 ${p2Influence} Einfluss`);\n\n  // Determine winner\n  let roundWinner: Player;\n  if (p1Influence > p2Influence) {\n    roundWinner = 1;\n    log(`🏆 Spieler 1 gewinnt die Runde! (${p1Influence} > ${p2Influence})`);\n  } else if (p2Influence > p1Influence) {\n    roundWinner = 2;\n    log(`🏆 Spieler 2 gewinnt die Runde! (${p2Influence} > ${p1Influence})`);\n  } else {\n    // Tie - current player wins\n    roundWinner = gameState.current;\n    log(`🤝 Unentschieden! Spieler ${roundWinner} gewinnt als aktiver Spieler.`);\n  }\n\n  // Collect all cards to move to discard\n  const cardsToDiscard: Card[] = [\n    ...gameState.board[1].innen,\n    ...gameState.board[1].aussen,\n    ...gameState.board[2].innen,\n    ...gameState.board[2].aussen,\n    ...(gameState.permanentSlots[1].government ? [gameState.permanentSlots[1].government] : []),\n    ...(gameState.permanentSlots[1].public ? [gameState.permanentSlots[1].public] : []),\n    ...(gameState.permanentSlots[2].government ? [gameState.permanentSlots[2].government] : []),\n    ...(gameState.permanentSlots[2].public ? [gameState.permanentSlots[2].public] : []),\n    ...gameState.board[1].sofort,\n    ...gameState.board[2].sofort\n  ];\n\n  // Draw 5 new cards for each player\n  const newP1Hand = drawCardsFromDeck(gameState, 1, 5);\n  const newP2Hand = drawCardsFromDeck(gameState, 2, 5);\n\n  // Calculate new rounds won\n  const newRoundsWon = {\n    ...gameState.roundsWon,\n    [roundWinner]: gameState.roundsWon[roundWinner] + 1\n  };\n\n  // Check if game should end (Best of 3: first to 2 wins)\n  const p1Wins = newRoundsWon[1];\n  const p2Wins = newRoundsWon[2];\n\n  if (p1Wins >= 2 || p2Wins >= 2) {\n    const gameWinner = p1Wins >= 2 ? 1 : 2;\n    log(`🏆🎉 SPIEL BEENDET! Spieler ${gameWinner} gewinnt das Match! (${p1Wins}-${p2Wins})`);\n    log(`🔥 Gesamtergebnis: Player ${gameWinner} ist der Sieger!`);\n\n    // Return final state with game winner\n    return {\n      ...gameState,\n      roundsWon: newRoundsWon,\n      gameWinner,\n      // Keep current board state for final display\n      passed: { 1: true, 2: true }, // Both passed to indicate game end\n    };\n  }\n\n  // Create new state for next round\n  const newState: GameState = {\n    ...gameState,\n    round: gameState.round + 1,\n    current: roundWinner, // Winner starts next round\n         passed: { 1: false, 2: false }, // Reset pass status\n     actionPoints: { 1: 2, 2: 2 }, // Reset AP\n     actionsUsed: { 1: 0, 2: 0 }, // Reset actions (kept for compatibility)\n     roundsWon: newRoundsWon,\n    effectFlags: {\n      1: createDefaultEffectFlags(),\n      2: createDefaultEffectFlags()\n    },\n    // Clear all board positions\n    board: emptyBoard(),\n    // Clear permanent slots\n    permanentSlots: {\n      1: { government: null, public: null, initiativePermanent: null },\n      2: { government: null, public: null, initiativePermanent: null }\n    },\n    // instantSlot wird nicht mehr verwendet - Sofort-Initiativen gehen in board[player].sofort\n    // New hands with 5 cards each\n    hands: {\n      1: newP1Hand,\n      2: newP2Hand\n    },\n    // Update decks (cards were removed during drawing)\n    decks: {\n      1: gameState.decks[1].slice(newP1Hand.length),\n      2: gameState.decks[2].slice(newP2Hand.length)\n    },\n    // Update discard pile\n    discard: [...gameState.discard, ...cardsToDiscard]\n  };\n\n  log(`🆕 Runde ${newState.round} startet! Spieler ${roundWinner} beginnt. (Rundenstand: P1 ${newState.roundsWon[1]} - P2 ${newState.roundsWon[2]})`);\n  log(`🃏 Beide Spieler erhalten 5 neue Handkarten.`);\n\n  return newState;\n}\n\nexport function useGameActions(\n  gameState: GameState,\n  setGameState: React.Dispatch<React.SetStateAction<GameState>>,\n  log: (msg: string) => void,\n  afterQueueResolved?: () => void\n) {\n  // Visual effects context (spawn helpers)\n  // Use safe hook variant which returns null when no provider is present\n  const visualEffects = useVisualEffectsSafe();\n  // Helper: spawn lightweight UI visuals via window hooks (prototype only)\n  const spawnCardVisual = useCallback((card: any) => {\n    try {\n      if (!card) return;\n      console.debug('[GameActions] spawnCardVisual called', { uid: card.uid ?? card.id, name: card.name });\n      const uid = card.uid ?? card.id;\n      // prefer VisualEffects context if available\n      if (visualEffects) {\n        // Prefer authoritative board-based slot centering (gov slots) using gameState\n        try {\n          let located: { player: number; lane: 'aussen' | 'innen'; index: number } | null = null;\n          for (const p of [1, 2] as const) {\n            const aussen = gameState.board[p].aussen || [];\n            const idxA = aussen.findIndex((c: any) => (c.uid ?? c.id) === (card.uid ?? card.id));\n            if (idxA >= 0) { located = { player: p, lane: 'aussen', index: idxA }; break; }\n            const innen = gameState.board[p].innen || [];\n            const idxI = innen.findIndex((c: any) => (c.uid ?? c.id) === (card.uid ?? card.id));\n            if (idxI >= 0) { located = { player: p, lane: 'innen', index: idxI }; break; }\n          }\n\n          if (located && located.lane === 'aussen') {\n            const rects = getGovernmentRects(located.player === 1 ? 'player' : 'opponent');\n            const slot = rects[located.index] || rects[0] || { x: 960 - 128, y: 540 - 128, w: 256, h: 256 };\n            const cx_slot = slot.x + slot.w / 2;\n            const cy_slot = slot.y + slot.h / 2;\n            visualEffects.spawnParticles(cx_slot, cy_slot, 18);\n            visualEffects.spawnPop(card.uid ?? card.id);\n            console.debug('[GameActions] spawnCardVisual particles/pop (gov slot)', { uid: card.uid ?? card.id, cx: cx_slot, cy: cy_slot, slot });\n\n            const canvas = document.querySelector('canvas');\n            if (canvas) {\n              const rect = canvas.getBoundingClientRect();\n              const { scale, offsetX, offsetY } = getUiTransform(canvas.width, canvas.height);\n              const screenCx = rect.left + (cx_slot * scale + offsetX);\n              const screenCy = rect.top + (cy_slot * scale + offsetY);\n              // Use dedicated government slot GIF provided by user\n              visualEffects.spawnGifOverlay({ id: card.uid ?? card.id, cx: screenCx, cy: screenCy, w: 260 * scale, h: 260 * scale, src: slotGovGif, duration: 700 });\n              console.debug('[GameActions] spawnCardVisual spawnGifOverlay (gov slot)', { uid: card.uid ?? card.id, screenCx, screenCy, src: slotGovGif });\n            }\n\n            try { visualEffects.playAnimsRef.current.push({ uid: card.uid ?? card.id, started: performance.now(), duration: 420 }); } catch (e) {}\n            return;\n          }\n        } catch (e) {\n          console.debug('[GameActions] gov-slot centering failed, falling back', e);\n        }\n        // attempt to find a row_slot zone center via debug snapshot (avoid hand slots)\n        const zones = (window as any).__politicardDebug?.clickZones || [];\n        const zone = zones.find((z: any) => z.data && z.data.type === 'row_slot' && z.data.card && ((z.data.card.uid ?? z.data.card.id) === uid));\n        const cx = zone ? zone.x + (zone.w || 256) / 2 : 960;\n        const cy = zone ? zone.y + (zone.h || 256) / 2 : 540;\n        visualEffects.spawnParticles(cx, cy, 18);\n        visualEffects.spawnPop(uid);\n        console.debug('[GameActions] spawnCardVisual particles/pop (fallback)', { uid, cx, cy, zone });\n        // Add play animation entry so canvas will fade-in the card itself\n        try {\n          visualEffects.playAnimsRef.current.push({ uid, started: performance.now(), duration: 420 });\n          console.debug('[GameActions] spawnCardVisual playAnimsRef push', uid);\n        } catch (e) { console.debug('[GameActions] spawnCardVisual playAnimsRef push failed', e); }\n        return;\n      }\n      // fallback to old window-based prototype\n      const zones = (window as any).__politicardDebug?.clickZones || [];\n      const zone = zones.find((z: any) => z.data && z.data.card && ((z.data.card.uid ?? z.data.card.id) === uid));\n      const cx = zone ? zone.x + (zone.w || 256) / 2 : 960;\n      const cy = zone ? zone.y + (zone.h || 256) / 2 : 540;\n      (window as any).__pc_particles = (window as any).__pc_particles || [];\n      for (let i = 0; i < 18; i++) {\n        (window as any).__pc_particles.push({ start: performance.now(), life: 600 + Math.random() * 400, x: cx + (Math.random() - 0.5) * 40, y: cy + (Math.random() - 0.5) * 40, vx: (Math.random() - 0.5) * 6, vy: -Math.random() * 6, size: 3 + Math.random() * 5, color: ['#ffd166', '#ff6b6b', '#4ade80'][Math.floor(Math.random() * 3)], gravity: 0.12 });\n      }\n      (window as any).__pc_pops = (window as any).__pc_pops || [];\n      (window as any).__pc_pops.push({ uid, started: performance.now(), duration: 420 });\n      // Fallback: add play anim entry to global when VisualEffects not available\n      (window as any).__pc_play_anims = (window as any).__pc_play_anims || [];\n      (window as any).__pc_play_anims.push({ uid, started: performance.now(), duration: 420 });\n      // Also attempt to use provider fallback on window if available\n      try {\n        const wv = (window as any).__pc_visual_effects;\n        if (wv && typeof wv.spawnGifOverlay === 'function') {\n          // Compute screen coords based on canvas if possible\n          const canvas = document.querySelector('canvas');\n          if (canvas) {\n            const rect = canvas.getBoundingClientRect();\n            const ui = (window as any).__politicardDebug?.uiTransform || { scale: 1, offsetX: 0, offsetY: 0 };\n            const screenCx = rect.left + (cx * ui.scale + ui.offsetX);\n            const screenCy = rect.top + (cy * ui.scale + ui.offsetY);\n            try { wv.spawnGifOverlay({ id: uid, cx: screenCx, cy: screenCy, w: 256 * ui.scale, h: 256 * ui.scale, src: slotGovGif, duration: 700 }); console.debug('[GameActions] fallback window.__pc_visual_effects.spawnGifOverlay', uid); } catch (e) { console.debug('[GameActions] fallback spawnGifOverlay failed', e); }\n          }\n        }\n      } catch (e) {}\n    } catch (e) {\n      // swallow - non-critical\n    }\n  }, [visualEffects]);\n  // Guard against duplicate concurrent playCard calls for the same card UID\n  const playingUidRef = useRef<Set<number>>(new Set());\n  const startMatchWithDecks = useCallback((p1DeckEntries: BuilderEntry[], p2DeckEntries: BuilderEntry[]) => {\n    const p1Cards = buildDeckFromEntries(p1DeckEntries);\n    const p2Cards = buildDeckFromEntries(p2DeckEntries);\n\n        // Debug: Log deck composition with detailed tag analysis\n    const p1NgoCarten = p1Cards.filter(c => (c as any).tag === 'NGO');\n    const p1PlatformCards = p1Cards.filter(c => (c as any).tag === 'Plattform');\n    const p1JoschaCards = p1Cards.filter(c => (c as any).effect === 'ngo_boost');\n    const p1PublicCards = p1Cards.filter(c => c.kind === 'spec' && (c as any).type === 'Öffentlichkeitskarte');\n\n    log(`🔍 DECK DEBUG P1: ${p1Cards.length} Karten total`);\n    log(`🧪 P1 Public Cards: ${p1PublicCards.map(c => `${c.name}${(c as any).tag ? `[${(c as any).tag}]` : ''}`).join(', ')}`);\n    log(`🌱 P1 NGO-Karten: ${p1NgoCarten.length > 0 ? p1NgoCarten.map(c => c.name).join(', ') : 'Keine'}`);\n    log(`💻 P1 Plattform-Karten: ${p1PlatformCards.length > 0 ? p1PlatformCards.map(c => c.name).join(', ') : 'Keine'}`);\n    log(`🎯 JOSCHKA FISCHER: ${p1JoschaCards.length > 0 ? '✅ IM DECK' : '❌ NICHT IM DECK'}`);\n\n    const d1 = [...p1Cards];\n    const d2 = [...p2Cards];\n    const h1 = d1.splice(0, Math.min(5, d1.length));\n    const h2 = d2.splice(0, Math.min(5, d2.length));\n\n    setGameState(prev => ({\n      ...prev,\n      round: 1,\n      current: 1,\n      passed: { 1: false, 2: false },\n      decks: { 1: d1, 2: d2 },\n      hands: { 1: h1, 2: h2 },\n      board: { 1: { innen: [], aussen: [], sofort: [] }, 2: { innen: [], aussen: [], sofort: [] } },\n      traps: { 1: [], 2: [] },\n      permanentSlots: {\n        1: { government: null, public: null, initiativePermanent: null },\n        2: { government: null, public: null, initiativePermanent: null },\n      },\n      // instantSlot wird nicht mehr verwendet - Sofort-Initiativen gehen in board[player].sofort\n      discard: [],\n      shields: new Set(), // Set<UID>\n      effectFlags: {\n        1: createDefaultEffectFlags(),\n        2: createDefaultEffectFlags()\n      },\n      actionsUsed: { 1: 0, 2: 0 },\n      log: [\n        `Match gestartet. P1 und P2 erhalten je ${h1.length}/${h2.length} Startkarten.`,\n        `🔍 DECK DEBUG P1: ${p1Cards.length} Karten total`,\n        `🧪 P1 Public Cards: ${p1PublicCards.map(c => `${c.name}${(c as any).tag ? `[${(c as any).tag}]` : ''}`).join(', ')}`,\n        `🌱 P1 NGO-Karten: ${p1NgoCarten.length > 0 ? p1NgoCarten.map(c => c.name).join(', ') : 'Keine'}`,\n        `💻 P1 Plattform-Karten: ${p1PlatformCards.length > 0 ? p1PlatformCards.map(c => c.name).join(', ') : 'Keine'}`,\n        `🎯 JOSCHKA FISCHER: ${p1JoschaCards.length > 0 ? '✅ IM DECK' : '❌ NICHT IM DECK'}`,\n        `📋 INITIAL BOARD P1: Regierung=[] | Öffentlichkeit=[]`,\n        `📋 INITIAL BOARD P2: Regierung=[] | Öffentlichkeit=[]`,\n        `🏠 PERMANENT SLOTS: Alle leer`\n      ],\n      activeRefresh: { 1: 0, 2: 0 },\n      // preserve any aiEnabled flags set before calling this\n      aiEnabled: prev.aiEnabled || { 1: false, 2: false }\n    }));\n  }, [gameState, setGameState, log]);\n\n  const startMatchVsAI = useCallback((p1DeckEntries: BuilderEntry[], presetKey: keyof typeof PRESET_DECKS = 'AUTORITAERER_REALIST') => {\n    const p2DeckEntries = PRESET_DECKS[presetKey] as BuilderEntry[];\n    // Enable AI for P2 first so nextTurn/auto-run sees the flag immediately\n    setGameState(prev => ({ ...prev, aiEnabled: { ...(prev.aiEnabled || { 1: false, 2: false }), 2: true } }));\n    log('🔧 AI aktiviert für Spieler 2');\n    startMatchWithDecks(p1DeckEntries, p2DeckEntries);\n  }, [startMatchWithDecks]);\n\n  const playCard = useCallback((player: Player, handIndex: number, lane?: 'innen' | 'aussen') => {\n    logger.info(`playCard START P${player} idx=${handIndex}`);\n    setGameState(prev => {\n      // Test-only baseline fix – ensures AP=5 at game start inside test runner\n      ensureTestBaselineAP(prev);\n\n      // Validate input parameters\n      if (prev.current !== player) {\n        log(`❌ ERROR: Not player turn - Current: ${prev.current}, Attempted: ${player}`);\n        logger.warn(`playCard abort: wrong turn`);\n        return prev;\n      }\n\n      const hand = prev.hands[player];\n      if (handIndex < 0 || handIndex >= hand.length) {\n        log(`❌ ERROR: Invalid hand index - Index: ${handIndex}, Hand length: ${hand.length}`);\n        return prev;\n      }\n\n      // Debug: Log current hand contents with detailed tag info\n      log(`🔍 HAND DEBUG P${player}: ${hand.map((c, i) => `${i}:${c.name}${(c as any).tag ? `[${(c as any).tag}]` : ''}`).join(', ')}`);\n      const ngoCards = hand.filter(c => (c as any).tag === 'NGO');\n      const platformCards = hand.filter(c => (c as any).tag === 'Plattform');\n      if (ngoCards.length > 0) {\n        log(`🌱 NGO-Karten in Hand P${player}: ${ngoCards.map(c => c.name).join(', ')}`);\n      }\n      if (platformCards.length > 0) {\n        log(`💻 Plattform-Karten in Hand P${player}: ${platformCards.map(c => c.name).join(', ')}`);\n      }\n\n      const selectedCard = hand[handIndex];\n      if (!canPlayCard(prev, player, selectedCard)) {\n        log('🚫 Kann Karte nicht spielen (keine AP verfügbar).');\n        return prev;\n      }\n\n      const { cost } = getNetApCost(prev, player, selectedCard);\n      const prevAp = prev.actionPoints[player];\n\n      const newState = { ...prev };\n\n      // Simplified AP system: All cards cost exactly 1 AP\n      newState.actionPoints[player] = Math.max(0, newState.actionPoints[player] - cost);\n      log(`💳 Kosten verbucht: AP ${prevAp}→${newState.actionPoints[player]}`);\n\n      // Flags KONSUMIEREN (einheitlich, NUR HIER!)\n      ensureFlags(newState, player);\n      const ef = newState.effectFlags[player];\n\n      // Simplified AP system: No refunds or discounts\n      // All cards cost exactly 1 AP\n\n      // Remove card from hand\n      const newHand = [...newState.hands[player]];\n      const [playedCard] = newHand.splice(handIndex, 1);\n      newState.hands = { ...newState.hands, [player]: newHand };\n\n      // Prevent double-playing the same UID concurrently\n      if ((playedCard as any).uid) {\n        if (playingUidRef.current.has((playedCard as any).uid)) {\n          log(`⚠️ Duplicate play prevented for UID ${(playedCard as any).uid}`);\n          return prev;\n        }\n        playingUidRef.current.add((playedCard as any).uid);\n      }\n\n      // 🔧 CLUSTER 3 DEBUG: Zeige jede gespielte Karte\n      log(`🔧 CLUSTER 3 GLOBAL DEBUG: P${player} spielt ${(playedCard as any).name} (${playedCard.kind}) - Type: ${(playedCard as any).type || 'KEIN TYPE'}`);\n\n      // 🔧 CLUSTER 3 DEBUG: Zeige aktuelles Board\n      const currentBoard = newState.board[player];\n      const publicCardsOnBoard = currentBoard.innen.filter(card => card.kind === 'spec');\n      log(`🔧 CLUSTER 3 GLOBAL DEBUG: Öffentlichkeitskarten auf dem Feld: ${publicCardsOnBoard.map(c => (c as any).name).join(', ')}`);\n\n      // Jennifer Doudna check removed - not needed for current game logic\n\n      // Handle different card types\n      if (playedCard.kind === 'pol') {\n        const polCard = playedCard as any;\n        const targetLane = lane || (polCard.tag === 'Staatsoberhaupt' || polCard.tag === 'Regierungschef' || polCard.tag === 'Diplomat' ? 'aussen' : 'innen');\n\n        if (newState.board[player][targetLane].length >= 5) {\n          log(`❌ ERROR: Lane full - Lane: ${targetLane}, Current: ${newState.board[player][targetLane].length}/5`);\n          return prev;\n        }\n\n        // Add to board (immutable clone to avoid accidental double references)\n        const laneArray = [...newState.board[player][targetLane], playedCard];\n        const playerBoardCloned = { ...newState.board[player], [targetLane]: laneArray } as any;\n        newState.board = { ...newState.board, [player]: playerBoardCloned } as any;\n\n        // VISUAL: spawn GIF overlay centered over the government slot icon when placing a government card\n        try {\n          if (targetLane === 'aussen') {\n            const rects = getGovernmentRects(player === 1 ? 'player' : 'opponent');\n            const slotIndex = newState.board[player].aussen.length - 1;\n            const slotRect = rects[slotIndex] || rects[0] || { x: 960 - 128, y: 540 - 128, w: 256, h: 256 };\n            const cx = slotRect.x + slotRect.w / 2;\n            const cy = slotRect.y + slotRect.h / 2;\n\n            // particles/pop in canvas coords\n            try { visualEffects?.spawnParticles(cx, cy, 18); } catch (e) {}\n            try { visualEffects?.spawnPop(playedCard.uid ?? playedCard.id); } catch (e) {}\n\n            // compute screen coords and spawn 300x300 overlay\n            const canvas = document.querySelector('canvas');\n            if (canvas) {\n              const bbox = canvas.getBoundingClientRect();\n              const { scale, offsetX, offsetY } = getUiTransform(canvas.width, canvas.height);\n              const screenCx = bbox.left + (cx * scale + offsetX);\n              const screenCy = bbox.top + (cy * scale + offsetY);\n              if (visualEffects) {\n                visualEffects.spawnGifOverlay({ id: playedCard.uid ?? playedCard.id, cx: screenCx, cy: screenCy, w: 300, h: 300, src: slotGovGif, duration: 800 });\n                try { visualEffects.playAnimsRef.current.push({ uid: playedCard.uid ?? playedCard.id, started: performance.now(), duration: 420 }); } catch (e) {}\n                console.debug('[GameActions] GOV overlay spawned', { uid: playedCard.uid ?? playedCard.id, screenCx, screenCy, src: slotGovGif });\n              } else {\n                // fallback to global provider if present\n                const wv = (window as any).__pc_visual_effects || (window as any).__pc_visual_effects;\n                if (wv && typeof wv.spawnGifOverlay === 'function') {\n                  try { wv.spawnGifOverlay({ id: playedCard.uid ?? playedCard.id, cx: screenCx, cy: screenCy, w: 300, h: 300, src: slotGovGif, duration: 800 }); } catch (e) {}\n                }\n              }\n            }\n          }\n        } catch (e) {\n          console.debug('[GameActions] GOV overlay failed', e);\n        }\n        log(`🃏 Player ${player}: ${playedCard.name} gespielt in ${targetLane === 'aussen' ? 'Regierung' : 'Öffentlichkeit'}`);\n\n        // 3) Nachdem die Karte gelegt wurde: gegnerische Traps prüfen\n        applyTrapsOnCardPlayed(\n          newState,\n          player,\n          playedCard,\n          (event) => {\n            if (!newState._effectQueue) newState._effectQueue = [];\n            newState._effectQueue.push(event);\n          },\n          log\n        );\n\n        // 👉 Erst JETZT Auren anwenden (damit +2 Basis erhalten bleibt)\n        applyAurasForPlayer(newState, player, log);\n\n        // 6) Karteneffekte enqueuen + Queue auflösen\n        triggerCardEffects(newState, player, playedCard);\n        // UI visual: particle burst + pop scale for played card (prototype hook)\n        try { spawnCardVisual(playedCard); } catch (e) {}\n        // Migration Helper verwenden\n        migrateLegacyQueue(newState);\n        // Nur noch _effectQueue verwenden\n        if (newState._effectQueue && newState._effectQueue.length > 0) {\n          resolveQueue(newState, newState._effectQueue);\n          newState._effectQueue = [];\n          // Nach Queue-Auflösung: Hand-Arrays immutabel neu zuweisen\n          afterQueueResolved?.();\n        }\n\n        // Release playing UID after queue resolved\n        if ((playedCard as any).uid) playingUidRef.current.delete((playedCard as any).uid);\n\n        // Check for trap triggers\n        applyTrapsOnCardPlayed(\n          newState,\n          player,\n          playedCard,\n          (e) => (newState._effectQueue ??= []).push(e),\n          (m) => (newState._effectQueue ??= []).push({ type: 'LOG', msg: m })\n        );\n\n        // 🔥 ROMAN ABRAMOVICH EFFEKT: Wenn Regierungskarte mit Einfluss ≤5 gespielt wird\n        if (playedCard.kind === 'pol' && (playedCard as any).influence <= 5) {\n          const opponent = player === 1 ? 2 : 1;\n          const opponentBoard = newState.board[opponent];\n          const romanAbramovich = opponentBoard.innen.find(card =>\n            card.kind === 'spec' && (card as any).name === 'Roman Abramovich'\n          );\n\n          if (romanAbramovich) {\n            // Ziehe eine Karte für den Gegner\n            if (newState.decks[opponent].length > 0) {\n              const drawnCard = newState.decks[opponent].shift();\n              if (drawnCard) {\n                newState.hands[opponent].push(drawnCard);\n                log(`🔥 ROMAN ABRAMOVICH EFFEKT: P${opponent} zieht 1 Karte (${drawnCard.name}) - Regierungskarte mit Einfluss ≤5 gespielt`);\n              }\n            }\n          }\n        }\n\n\n\n\n\n\n\n        // 🔍 BOARD DEBUG: Zeige aktuelles Board nach dem Spielen\n        const currentBoard = newState.board[player];\n        const regierungKarten = currentBoard.aussen.map(c => `${c.name}[${c.kind === 'pol' ? (c as any).influence + 'I' : 'S'}]`);\n        const öffentlichkeitKarten = currentBoard.innen.map(c => `${c.name}[${c.kind === 'spec' ? (c as any).tag || 'S' : 'P'}]`);\n        log(`📋 P${player} BOARD: Regierung=[${regierungKarten.join(', ')}] | Öffentlichkeit=[${öffentlichkeitKarten.join(', ')}]`);\n\n                // 🔥 JOSCHKA FISCHER NGO-EFFEKT: Jetzt als kontinuierlicher Aura-Effekt in sumRowWithAuras implementiert\n        log(`🔍 DEBUG: Karte gespielt - Name: ${playedCard.name}, Tag: ${(playedCard as any).tag || 'Kein Tag'}, Lane: ${targetLane}, Kind: ${playedCard.kind}`);\n\n        if ((playedCard as any).tag === 'NGO') {\n          log(`🔍 NGO-Karte gespielt: ${playedCard.name} [NGO] - Kontinuierliche Aura-Effekte werden bei Rundenauswertung berechnet`);\n\n          // 🎯 SOFORTIGE SYNERGIE-PRÜFUNG: Joschka Fischer + NGO\n          const joschaFischer = currentBoard.aussen.find(card =>\n            card.kind === 'pol' && (card as any).effect === 'ngo_boost'\n          );\n\n          if (joschaFischer) {\n            log(`🔥🔥🔥 SYNERGIE AKTIVIERT! 🔥🔥🔥 Joschka Fischer + ${playedCard.name}[NGO] → +1 Einfluss bei Rundenauswertung`);\n          }\n        }\n\n      } else if (playedCard.kind === 'spec') {\n        const specCard = playedCard as any;\n        const typeStr = String(specCard.type || '').toLowerCase();\n        const isInitiative = /initiative/.test(typeStr); // matcht \"Initiative\", \"Sofort-Initiative\", etc.\n\n                  // 1) Falls es eine \"Systemrelevant\" ist (sofortiger Buff auf letzte eigene Regierungskarte)\n        if (playedCard.kind === 'spec' && (playedCard as any).type?.toLowerCase().includes('systemrelevant')) {\n          const ownBoard = newState.board[player];\n          const candidates = [...ownBoard.aussen, ...ownBoard.innen].filter(c => c.kind === 'pol') as PoliticianCard[];\n          const target = candidates[candidates.length - 1]; // letzte eigene Regierungskarte\n          if (target) {\n            (target as any).protected = true;\n            log(`🛡️ ${target.name} erhält einmaligen Schutz.`);\n          } else {\n            log('🛈 Systemrelevant: Keine eigene Regierungskarte im Spiel – Effekt verpufft.');\n          }\n          // danach die Spezialkarte normal entsorgen\n          newState.discard.push(playedCard);\n          return newState;\n        }\n\n        // 1) Dauerhaft-Initiative (Ongoing)\n        if (typeStr.includes('dauerhaft')) {\n          // Slot-Mapping: Dauerhaft-Initiativen → initiativePermanent, nicht government\n          const slotType = 'initiativePermanent';\n          if (!newState.permanentSlots[player][slotType]) {\n            newState.permanentSlots[player][slotType] = playedCard;\n            log(`P${player} spielt ${playedCard.name} als Dauerhafte Initiative (Slot: ${slotType})`);\n          } else {\n            log(`⚠️ WARN: Slot occupied - Slot ${slotType} already has ${newState.permanentSlots[player][slotType]?.name}`);\n          }\n\n          // 6) Karteneffekte enqueuen + Queue auflösen\n          triggerCardEffects(newState, player, playedCard);\n          // Migration Helper verwenden\n          migrateLegacyQueue(newState);\n          // Nur noch _effectQueue verwenden\n          if (newState._effectQueue && newState._effectQueue.length > 0) {\n            resolveQueue(newState, newState._effectQueue);\n            newState._effectQueue = [];\n            // Nach Queue-Auflösung: Hand-Arrays immutabel neu zuweisen\n            afterQueueResolved?.();\n          }\n\n          // Check for trap triggers\n          applyTrapsOnCardPlayed(\n            newState,\n            player,\n            playedCard,\n            (e) => (newState._effectQueue ??= []).push(e),\n            (m) => (newState._effectQueue ??= []).push({ type: 'LOG', msg: m })\n          );\n\n          return newState;\n        }\n\n        // 2) Sofort-/Sofort-Initiativen (Instant)\n        if (isInitiative) {\n          if (!specCard.effectKey) {\n            log(`❌ Initiative ohne effectKey: ${specCard.name}`);\n          } else {\n            log(`🧩 INIT: ${specCard.name} [${String(specCard.effectKey)}] gespielt`);\n          }\n\n          // 🔧 NEU: Sofort-Initiativen werden in das sofort Array gelegt statt sofort aktiviert\n          if (typeStr.includes('sofort')) {\n            // Prüfe ob bereits eine Sofort-Initiative im Slot liegt\n            if (newState.board[player].sofort.length > 0) {\n              log(`❌ ERROR: Sofort-Initiative-Slot bereits besetzt - ${newState.board[player].sofort[0]?.name} muss erst aktiviert werden`);\n              // Karte zurück in die Hand\n              newState.hands[player] = [...newState.hands[player], playedCard];\n              // AP zurückgeben\n              newState.actionPoints[player] += cost;\n              // AP zurückgegeben, keine Aktion rückgängig zu machen\n              return newState;\n            }\n\n            // Sofort-Initiative in das sofort Array legen\n            newState.board[player].sofort = [playedCard];\n            log(`🎯 P${player} legt ${playedCard.name} in Sofort-Initiative-Slot (kann später aktiviert werden)`);\n\n            // Sofort-Initiativen: auf Board.sofort legen (nicht direkt entsorgen)\n            if (!newState._effectQueue) newState._effectQueue = [];\n            newState._effectQueue.push({ type: 'LOG', msg: `🔔 Sofort-Initiative bereit: ${playedCard.name} (zum Aktivieren anklicken oder Taste 'A')` });\n            return newState;\n          }\n\n          // Dauerhaft-Initiativen werden weiterhin sofort aktiviert\n          // Initiative in den Ablagestapel\n          newState.discard = [...newState.discard, playedCard];\n          log(`P${player} spielt Initiative: ${playedCard.name}`);\n\n                     // 6) Karteneffekte enqueuen + Queue auflösen\n           triggerCardEffects(newState, player, playedCard);\n           // Migration Helper verwenden\n           migrateLegacyQueue(newState);\n           // Nur noch _effectQueue verwenden\n         if (newState._effectQueue && newState._effectQueue.length > 0) {\n           resolveQueue(newState, newState._effectQueue);\n           newState._effectQueue = [];\n           // Nach Queue-Auflösung: Hand-Arrays immutabel neu zuweisen\n           afterQueueResolved?.();\n         }\n\n           // Check for trap triggers\n           applyTrapsOnCardPlayed(\n             newState,\n             player,\n             playedCard,\n             (e) => (newState._effectQueue ??= []).push(e),\n             (m) => (newState._effectQueue ??= []).push({ type: 'LOG', msg: m })\n           );\n\n           // 🔥 CLUSTER 3: Auren-Flags neu berechnen (nach Kartenspielen)\n          recomputeAuraFlags(newState);\n\n          // 🔥 CLUSTER 3: Ai Weiwei Bonus wird bei Aktivierung angewendet (nicht beim Spielen)\n\n          // 🔥 PASSIVE EFFEKTE NACH INITIATIVE: Mark Zuckerberg & Sam Altman\n          // Diese Effekte werden jetzt über INITIATIVE_ACTIVATED Event + Board-Check gehandhabt\n          // Keine direkten Flag-Mutationen mehr - alles über Events\n\n\n          return newState;\n        }\n\n        // 3) Öffentlichkeit (Public)\n        if (\n          typeStr === 'öffentlichkeitskarte' ||\n          typeStr === 'oeffentlichkeitskarte' ||\n          typeStr === 'öffentlichkeit' ||\n          typeStr === 'public'\n        ) {\n          if (newState.board[player].innen.length < 5) {\n            const innenArray = [...newState.board[player].innen, playedCard];\n            const playerBoardCloned = { ...newState.board[player], innen: innenArray } as any;\n            newState.board = { ...newState.board, [player]: playerBoardCloned } as any;\n            log(`P${player} spielt ${playedCard.name} in Öffentlichkeit`);\n\n            // Sofort Auren prüfen (z.B. JF +1, wenn JF schon liegt)\n            applyAurasForPlayer(newState, player, log);\n\n                         // 6) Karteneffekte enqueuen + Queue auflösen\n             triggerCardEffects(newState, player, playedCard);\n             // Migration Helper verwenden\n             migrateLegacyQueue(newState);\n         if (newState._effectQueue && newState._effectQueue.length > 0) {\n           resolveQueue(newState, newState._effectQueue);\n           newState._effectQueue = [];\n           // Nach Queue-Auflösung: Hand-Arrays immutabel neu zuweisen\n           afterQueueResolved?.();\n         }\n\n             // Check for trap triggers\n             applyTrapsOnCardPlayed(\n               newState,\n               player,\n               playedCard,\n               (e) => (newState._effectQueue ??= []).push(e),\n               (m) => (newState._effectQueue ??= []).push({ type: 'LOG', msg: m })\n             );\n\n\n\n            // 🔥 PUBLIC CARD EFFECTS - Passive effects when played\n\n            // Helper function to draw a card for the player\n            const drawCardForPlayer = (cardName: string) => {\n              if (newState.decks[player].length > 0) {\n                const drawnCard = newState.decks[player].shift();\n                if (drawnCard) {\n                  newState.hands[player].push(drawnCard);\n                  log(`🔥 ${cardName.toUpperCase()} EFFEKT: +1 Karte gezogen (${drawnCard.name})`);\n                  return true;\n                }\n              }\n              return false;\n            };\n\n            if (specCard.name === 'Elon Musk') {\n              // Effect: \"Ziehe 1 Karte. Deine erste Initiative pro Runde kostet 1 Aktionspunkt weniger.\"\n              drawCardForPlayer('Elon Musk');\n              // 🔥 QUEUE-SYSTEM: Erste Initiative pro Runde → Refund wird über triggerCardEffects gehandhabt\n\n            } else if (specCard.name === 'Bill Gates') {\n              // Effect: \"Ziehe 1 Karte. Deine nächste Initiative kostet 1 Aktionspunkt weniger.\"\n              drawCardForPlayer('Bill Gates');\n              // 🔥 QUEUE-SYSTEM: Nächste Initiative → Refund wird über triggerCardEffects gehandhabt\n\n            } else if (specCard.name === 'Jeff Bezos') {\n              // Effect: \"Ziehe 1 Karte beim Ausspielen. Wenn eine Plattform liegt: +1 Aktionspunkt.\"\n              drawCardForPlayer('Jeff Bezos');\n              const hasPlatform = newState.board[player].innen.some(c =>\n                c.kind === 'spec' && (c as any).tag === 'Plattform'\n              );\n              if (hasPlatform) {\n                newState.actionPoints[player] += 1;\n                log(`🔥 JEFF BEZOS: +1 AP durch Plattform-Synergie! (${newState.actionPoints[player] - 1} → ${newState.actionPoints[player]})`);\n              }\n\n            } else if (specCard.name === 'Warren Buffett') {\n              // Effect: \"Ziehe 1 Karte. Bei einer Wirtschafts-Initiative: +1 Effekt.\"\n              drawCardForPlayer('Warren Buffett');\n              // TODO: Implement \"Wirtschafts-Initiative +1 Effect\" logic\n              log(`📊 WARREN BUFFETT: Bei Wirtschafts-Initiativen +1 Effekt! (TODO: Implementierung)`);\n\n            } else if (specCard.name === 'Gautam Adani') {\n              // Effect: \"Ziehe 1 Karte. Bei einer Infrastruktur-Initiative: +1 Effekt.\"\n              drawCardForPlayer('Gautam Adani');\n              // TODO: Implement \"Infrastruktur-Initiative +1 Effect\" logic\n              log(`📊 GAUTAM ADANI: Bei Infrastruktur-Initiativen +1 Effekt! (TODO: Implementierung)`);\n\n            } else if (specCard.name === 'Zhang Yiming') {\n              // Effect: \"Ziehe 1 Karte. Bei Medien auf dem Feld: -1 Aktionspunkt auf deine nächste Initiative.\"\n              drawCardForPlayer('Zhang Yiming');\n              const hasMedia = newState.board[player].innen.some(c =>\n                c.kind === 'spec' && (c as any).tag === 'Medien'\n              );\n              if (hasMedia) {\n                // TODO: Implement \"nächste Initiative -1 AP\" logic\n                log(`🔥 ZHANG YIMING: Nächste Initiative kostet 1 AP weniger durch Medien-Synergie! (TODO: Implementierung)`);\n              }\n\n            } else if (specCard.name === 'George Soros') {\n              // Effect: \"+1 Aktionspunkt wenn der Gegner eine autoritäre Regierungskarte hat.\"\n              const opponent = player === 1 ? 2 : 1;\n              const hasAuthoritarianCard = newState.board[opponent].aussen.some(card => {\n                const polCard = card as any;\n                return polCard.tag === 'Staatsoberhaupt' && polCard.influence >= 8; // High influence leaders\n              });\n\n              if (hasAuthoritarianCard) {\n                newState.actionPoints[player] += 1;\n                log(`🔥 GEORGE SOROS EFFEKT: +1 AP durch autoritäre Regierung des Gegners!`);\n                log(`📊 SOROS: Aktionspunkte ${newState.actionPoints[player] - 1} → ${newState.actionPoints[player]}`);\n              } else {\n                log(`💭 George Soros: Keine autoritären Karten beim Gegner - Effekt nicht ausgelöst`);\n              }\n            }\n\n            // 🔗 NGO-Synergie: Wenn eine NGO gelegt wird und Joschka Fischer liegt, erhält P${player} +1 Einfluss (Rundenauswertung)\n            if ((specCard as any).tag === 'NGO') {\n              const hasJoschka = newState.board[player].aussen.some(c => c.kind === 'pol' && (c as any).name === 'Joschka Fischer' && !(c as any).deactivated);\n              if (hasJoschka) {\n                log(`🔥🔥🔥 SYNERGIE AKTIVIERT! 🔥🔥🔥 Joschka Fischer + ${playedCard.name}[NGO] → +1 Einfluss bei Rundenauswertung`);\n              }\n            }\n          } else {\n            log(`❌ ERROR: Lane full - Öffentlichkeit ist voll (5/5)`);\n          }\n\n          // Simplified AP system: No refunds\n          return newState;\n        }\n\n                  // 4) Default: Traps/Interventions\n                  // Falls Trap-Karte gelegt wird\n          if (playedCard.kind === 'spec' && (playedCard as any).type?.toLowerCase().includes('trap')) {\n            registerTrap(newState, player, playedCard.key || playedCard.name.toLowerCase().replace(/[- ]/g, '_'));\n            // NICHT sofort checken – sie wartet auf den Gegner\n            return newState;\n          }\n\n        newState.traps[player] = [...newState.traps[player], playedCard];\n        log(`P${player} spielt ${playedCard.name} als ${specCard.type}`);\n\n        // 6) Karteneffekte enqueuen + Queue auflösen\n        triggerCardEffects(newState, player, playedCard);\n        // Migration Helper verwenden\n        migrateLegacyQueue(newState);\n        // Nur noch _effectQueue verwenden\n        if (newState._effectQueue && newState._effectQueue.length > 0) {\n          resolveQueue(newState, newState._effectQueue);\n          newState._effectQueue = [];\n          // Nach Queue-Auflösung: Hand-Arrays immutabel neu zuweisen\n          afterQueueResolved?.();\n        }\n\n        // Check for trap triggers\n        applyTrapsOnCardPlayed(\n          newState,\n          player,\n          playedCard,\n          (e) => (newState._effectQueue ??= []).push(e),\n          (m) => (newState._effectQueue ??= []).push({ type: 'LOG', msg: m })\n        );\n\n        // Simplified AP system: No refunds\n        return newState;\n      }\n\n      // 6) Karteneffekte enqueuen + Queue auflösen (fallback für unbekannte Kartentypen)\n      triggerCardEffects(newState, player, selectedCard);\n      // Migration Helper verwenden\n      migrateLegacyQueue(newState);\n      // Nur noch _effectQueue verwenden\n        if (newState._effectQueue && newState._effectQueue.length > 0) {\n          resolveQueue(newState, newState._effectQueue);\n          newState._effectQueue = [];\n          // Nach Queue-Auflösung: Hand-Arrays immutabel neu zuweisen\n          afterQueueResolved?.();\n        }\n\n      // Check for trap triggers\n      applyTrapsOnCardPlayed(\n        newState,\n        player,\n        selectedCard,\n        (e) => (newState._effectQueue ??= []).push(e),\n        (m) => (newState._effectQueue ??= []).push({ type: 'LOG', msg: m })\n      );\n\n      // Simplified AP system: No refunds\n\n      // Kein Aktionenlimit mehr → automatischer Turnwechsel entfällt\n\n\n      return newState;\n    });\n  }, [setGameState, log]);\n\n  const activateInstantInitiative = useCallback((player: Player) => {\n    logger.info(`activateInstantInitiative START P${player}`);\n    setGameState(prev => {\n      if (prev.current !== player) {\n        log(`❌ ERROR: Not player turn - Current: ${prev.current}, Attempted: ${player}`);\n        return prev;\n      }\n\n      const instantCard = prev.board[player].sofort[0];\n      if (!instantCard) {\n        log(`❌ ERROR: No Sofort-Initiative in slot for player ${player}`);\n        return prev;\n      }\n\n      const newState = { ...prev };\n\n      // 1) Normale Karten-Effekte der Sofort-Karte feuern\n      triggerCardEffects(newState, player, instantCard);\n\n      // UI visual: initiative ripple + AP pop (prototype hook)\n      try {\n        const zones = (window as any).__politicardDebug?.clickZones || [];\n        const boardZone = zones.find((z: any) => z.data && z.data.type === 'row_slot');\n        const cx = boardZone ? boardZone.x + (boardZone.w || 256) / 2 : 960;\n        const cy = boardZone ? boardZone.y + (boardZone.h || 256) / 2 : 300;\n        if (visualEffects) {\n          visualEffects.spawnRipple(cx, cy, { radius: 640, showAp: true, apX: cx, apY: cy + 40 });\n        } else {\n          (window as any).__pc_ripples = (window as any).__pc_ripples || [];\n          (window as any).__pc_ripples.push({ cx, cy, started: performance.now(), duration: 700, radius: 640, showAp: true, apX: cx, apY: cy + 40 });\n        }\n      } catch (e) {}\n\n      // Check for trap triggers\n      applyTrapsOnCardPlayed(\n        newState,\n        player,\n        instantCard,\n        (e) => (newState._effectQueue ??= []).push(e),\n        (m) => (newState._effectQueue ??= []).push({ type: 'LOG', msg: m })\n      );\n\n      // 2) Queue auflösen (BEVOR die Karte entfernt wird)\n      if (newState._effectQueue && newState._effectQueue.length > 0) {\n        resolveQueue(newState, [...newState._effectQueue]);\n        newState._effectQueue = [];\n        // Nach Queue-Auflösung: Hand-Arrays immutabel neu zuweisen\n        afterQueueResolved?.();\n      }\n\n      // 3) Karte NACH Queue-Auflösung in den Ablagestapel\n      const [played] = newState.board[player].sofort.splice(0, 1);\n      newState.discard.push(played);\n\n      return newState;\n    });\n  }, [setGameState, log]);\n\n  const endTurn = useCallback((reason: 'button_end_turn' | 'auto' = 'button_end_turn') => {\n    logger.info(`endTurn START reason=${reason}`);\n    setGameState((prev): GameState => {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const current = prev.current;\n\n      // 1) Schon im Abschluss? -> Nichts tun (Idempotenz)\n      if (prev.isEndingTurn) {\n        log('🔁 Zugabschluss läuft bereits – warte auf Queue.');\n        return prev;\n      }\n\n      const newState = { ...prev, isEndingTurn: true };\n\n      // 2) Hängen noch Effekte in der Queue? -> Auflösen lassen\n      if (newState._effectQueue && newState._effectQueue.length > 0) {\n        log('⏳ Effekte werden noch aufgelöst – Zugwechsel folgt automatisch.');\n        resolveQueue(newState, [...newState._effectQueue]);\n        newState._effectQueue = [];\n        // Nach Queue-Auflösung: Wenn Flag noch gesetzt, Zug beenden\n        if (newState.isEndingTurn) {\n          return reallyEndTurn(newState, log);\n        }\n        return newState;\n      }\n\n      // 3) Keine Effekte mehr -> sofort beenden\n      return reallyEndTurn(newState, log);\n    });\n  }, [setGameState, log]);\n\n  // Legacy: nextTurn als Alias für endTurn für Kompatibilität\n  const nextTurn = useCallback(() => {\n    logger.info('nextTurn alias called');\n    endTurn('auto');\n  }, [endTurn]);\n\n    const passTurn = useCallback((player: Player) => {\n    logger.info(`passTurn START P${player}`);\n\n    setGameState(prev => {\n      logger.dbg(`passTurn setState current=${prev.current} player=${player}`);\n\n      if (prev.current !== player) {\n        logger.dbg(`passTurn wrong turn current=${prev.current} attempted=${player}`);\n        return prev;\n      }\n\n      const newState = { ...prev, passed: { ...prev.passed, [player]: true } };\n      logger.dbg(`Pass status updated P1=${newState.passed[1]} P2=${newState.passed[2]}`);\n      log(`🚫 Spieler ${player} passt.`);\n\n      // ❗ Kein Nachziehen bei Pass:\n      // Der passierende Spieler kommt in dieser Runde nicht mehr dran.\n      // Die nächste Runde startet ohnehin mit 5 neuen Handkarten.\n\n      // Check if round should end (both players passed)\n      const shouldEndRound = checkRoundEnd(newState);\n      logger.dbg(`Should end round? ${shouldEndRound}`);\n\n      if (shouldEndRound) {\n        log(`🏁 Runde ${newState.round} wird beendet und ausgewertet.`);\n        return resolveRound(newState, log);\n      } else {\n        // Switch turn to other player for their final chance\n        const otherPlayer: Player = player === 1 ? 2 : 1;\n        logger.dbg(`Switching to other player ${otherPlayer} hasPassed=${newState.passed[otherPlayer]}`);\n\n        // Only switch if other player hasn't passed yet\n        if (!newState.passed[otherPlayer]) {\n                     newState.current = otherPlayer;\n           newState.actionPoints = { ...newState.actionPoints, [otherPlayer]: 2 };\n\n          // Apply new start-of-turn hooks\n          applyStartOfTurnFlags(newState, otherPlayer, log);\n\n        // 🔥 CLUSTER 3: Auren-Flags beim Zugstart neu berechnen\n        recomputeAuraFlags(newState);\n\n          log(`⏭️ Spieler ${otherPlayer} hat noch einen letzten Zug.`);\n          logger.dbg(`Turn switched to player ${otherPlayer}`);\n        } else {\n          // Both players have passed now, end round\n          log(`🏁 Runde ${newState.round} wird beendet (beide Spieler haben gepasst).`);\n          return resolveRound(newState, log);\n        }\n      }\n\n      return newState;\n    });\n  }, [setGameState, log]);\n\n  return {\n    startMatchWithDecks,\n    startMatchVsAI,\n    playCard,\n    activateInstantInitiative,\n    passTurn,\n    nextTurn,\n    endTurn,\n  };\n  }\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}