{"ast":null,"code":"import _objectSpread from\"C:/Users/skank/Videos/Cards/Milchcards/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{useRef,useEffect,useCallback}from'react';import{LAYOUT,getZone,computeSlotRects,getUiTransform,getLaneCapacity,getPublicRects,getGovernmentRects}from'../ui/layout';import{sortHandCards}from'../utils/gameUtils';import{getCardImagePath}from'../data/gameData';import influenceIconUrl from'../assets/icons/influence.svg';import publicSymbolUrl from'../assets/icons/public_symbol.png';import sofortSymbolUrl from'../assets/icons/sofort_initiative_symbol.png';import dauerhaftSymbolUrl from'../assets/icons/dauerhaft_initative.png';import governmentSymbolUrl from'../assets/icons/government_symbol.png';import interventionSymbolUrl from'../assets/icons/intervention_symbol.png';import{jsx as _jsx}from\"react/jsx-runtime\";export const GameCanvas=_ref=>{let{gameState,selectedHandIndex,onCardClick,onCardHover,devMode=false}=_ref;const canvasRef=useRef(null);const clickZonesRef=useRef([]);// Smooth vertical scroll for P1 hand when it has more than visible slots\nconst handScrollTargetRef=useRef(0);const handScrollCurrentRef=useRef(0);const handScrollEnabledRef=useRef(true);// Touch handling refs\nconst touchStartYRef=useRef(null);const lastTouchYRef=useRef(null);const isTouchingRef=useRef(false);const backgroundImageRef=useRef(null);const imageCacheRef=useRef(new Map());const influenceImgRef=useRef(null);// Animation state for visual influence changes: Map<uid, Array<Anim>>\nconst influenceAnimRef=useRef(new Map());// Previous per-card influence snapshot to detect increases\nconst prevInfluencesRef=useRef({});// Slot symbol images\nconst slotSymbolImgsRef=useRef(new Map());// Load influence icon once\nuseEffect(()=>{const img=new Image();img.src=influenceIconUrl;influenceImgRef.current=img;},[]);const drawCardAt=useCallback(function(ctx,card,x,y,size){var _shield;let selected=arguments.length>5&&arguments[5]!==undefined?arguments[5]:false;let showAPCost=arguments.length>6&&arguments[6]!==undefined?arguments[6]:false;let player=arguments.length>7?arguments[7]:undefined;let dx=x,dy=y,s=size;if(selected){s=Math.floor(size*1.05);dx=x-Math.floor((s-size)/2);dy=y-Math.floor((s-size)/2);}// Note: pulse overlay is drawn at top layer after all cards are rendered\n// Draw card image with caching to prevent flicker in continuous loop\nconst src=getCardImagePath(card,'ui');const cached=imageCacheRef.current.get(src);if(cached&&cached.complete){ctx.drawImage(cached,dx,dy,s,s);}else{const img=new Image();img.onload=()=>{imageCacheRef.current.set(src,img);ctx.drawImage(img,dx,dy,s,s);};img.src=src;imageCacheRef.current.set(src,img);}// Status-Indikatoren (fÃ¼r alle Board-Karten)\n// Einfluss-Wert dauerhaft anzeigen (oben links) â€“ nur fÃ¼r Regierungskarten\nif(card.kind==='pol'){var _influence;const barH=Math.max(20,Math.floor(s*0.12)+6);ctx.fillStyle='rgba(0,0,0,0.6)';ctx.fillRect(dx,dy+s-barH,s,barH);ctx.fillStyle='#ffffff';const fontSize=Math.floor(s*0.12);ctx.font=\"bold \".concat(fontSize,\"px sans-serif\");ctx.textAlign='left';ctx.textBaseline='middle';ctx.fillText(\"\".concat((_influence=card.influence)!==null&&_influence!==void 0?_influence:0),dx+8,dy+s-barH/2);}// Schutz-Status (blauer Punkt)\nif(card.protected||((_shield=card.shield)!==null&&_shield!==void 0?_shield:0)>0){ctx.fillStyle='#1da1f2';ctx.fillRect(dx+s-22,dy+6,16,16);}// Deaktiviert-Status (roter Punkt)\nif(card.deactivated){ctx.fillStyle='#b63838';ctx.fillRect(dx+s-22,dy+26,16,16);}// Einfluss-Badge fÃ¼r Handkarten oben rechts (nur Regierungskarten)\nif(showAPCost&&player&&card.kind==='pol'){var _influence2;const badgeHeight=Math.max(16,Math.floor(s*0.12));const badgeWidth=badgeHeight*2;const badgeX=dx+s-badgeWidth-6;const badgeY=dy+6;// Semi-transparent dunkler Hintergrund\nctx.fillStyle='rgba(0,0,0,0.6)';ctx.beginPath();ctx.roundRect(badgeX,badgeY,badgeWidth,badgeHeight,badgeHeight/2);ctx.fill();// Influence icon (90% opacity) links im Badge\nif(influenceImgRef.current&&influenceImgRef.current.complete){ctx.globalAlpha=0.9;ctx.drawImage(influenceImgRef.current,badgeX+2,badgeY+2,badgeHeight-4,badgeHeight-4);ctx.globalAlpha=1;}// Influence number rechts im Badge\nctx.fillStyle='#ffffff';ctx.font=\"bold \".concat(Math.floor(badgeHeight*0.5),\"px sans-serif\");ctx.textAlign='right';ctx.textBaseline='middle';ctx.fillText(\"\".concat((_influence2=card.influence)!==null&&_influence2!==void 0?_influence2:0),badgeX+badgeWidth-4,badgeY+badgeHeight/2);// Reset align\nctx.textAlign='start';ctx.textBaseline='alphabetic';}// NOTE: influence overlays (pulse + labels) are drawn in a separate pass\n// Auswahl-Rahmen\nif(selected){ctx.strokeStyle='#61dafb';ctx.lineWidth=3;ctx.strokeRect(dx+1,dy+1,s-2,s-2);ctx.lineWidth=1;}// Return exact 256x256 click zone over the card\n// Since all cards are 256x256, the click zone should match exactly\nreturn{x:dx,y:dy,w:256,h:256};},[gameState]);// Slot-Benennungs-Funktion basierend auf Glossar\nconst getSlotDisplayName=useCallback((zoneId,index,player)=>{const slotNumber=index+1;if(zoneId.includes('government')){if(zoneId.includes('player')){return\"Regierungsreihe Slot \".concat(slotNumber);}else{return\"Gegner Regierung Slot \".concat(slotNumber);}}else if(zoneId.includes('public')){if(zoneId.includes('player')){return\"\\xD6ffentlichkeitsreihe Slot \".concat(slotNumber);}else{return\"Gegner \\xD6ffentlichkeit Slot \".concat(slotNumber);}}else if(zoneId.includes('permanent.government')){if(zoneId.includes('player')){return'Regierung Spezial-Slot';}else{return'Gegner Regierung Spezial-Slot';}}else if(zoneId.includes('permanent.public')){if(zoneId.includes('player')){return'Ã–ffentlichkeit Spezial-Slot';}else{return'Gegner Ã–ffentlichkeit Spezial-Slot';}}else if(zoneId.includes('instant')){if(zoneId.includes('player')){return'Sofort-Slot';}else{return'Gegner Sofort-Slot';}}else if(zoneId.includes('hand')){return'Hand';}else if(zoneId.includes('interventions')){return'Interventionen';}return\"Slot \".concat(slotNumber);},[]);const drawLane=useCallback((ctx,zoneId,player,lane,clickable)=>{const zone=getZone(zoneId);if(!zone)return;const slots=computeSlotRects(zone);const arr=gameState.board[player][lane];slots.forEach((s,idx)=>{const card=arr[idx];// Hintergrundfarbe nach Kategorie\nlet bgColor='rgba(0,0,0,0.1)';// Standard\nif(zoneId.includes('government')){bgColor='rgba(255, 197, 0, 0.15)';// Hellgelb fÃ¼r Regierung\n}else if(zoneId.includes('public')){bgColor='rgba(0, 255, 0, 0.15)';// HellgrÃ¼n fÃ¼r Ã–ffentlichkeit\n}ctx.fillStyle=bgColor;ctx.fillRect(s.x,s.y,s.w,s.h);// Slot-Rahmen\nctx.strokeStyle='rgba(255,255,255,0.06)';ctx.strokeRect(s.x+0.5,s.y+0.5,s.w-1,s.h-1);if(card){const isSelected=player===1&&selectedHandIndex!==null&&gameState.hands[1][selectedHandIndex]===card;const clickZone=drawCardAt(ctx,card,s.x,s.y,s.w,isSelected,false);// Kartenname unter dem Slot anzeigen\nctx.fillStyle='rgba(255,255,255,0.9)';ctx.font='bold 12px sans-serif';ctx.textAlign='center';const textY=s.y+s.h+16;ctx.fillText(card.name,s.x+s.w/2,textY);clickZonesRef.current.push(_objectSpread(_objectSpread({},clickZone),{},{data:{type:'board_card',player,lane,index:idx,card}}));}else if(clickable&&gameState.current===player){// Slot-Benennung anzeigen (fÃ¼r den aktuellen Spieler)\nconst slotName=getSlotDisplayName(zoneId,idx,player);ctx.fillStyle='rgba(255,255,255,0.6)';ctx.font='11px sans-serif';ctx.textAlign='center';const textY=s.y+s.h/2;ctx.fillText(slotName,s.x+s.w/2,textY);clickZonesRef.current.push({x:s.x,y:s.y,w:s.w,h:s.h,data:{type:'row_slot',lane,index:idx}});}});},[gameState,selectedHandIndex,drawCardAt,getSlotDisplayName]);const drawHandP1=useCallback(ctx=>{const hand=sortHandCards(gameState.hands[1]);const zone=getZone('hand.player');if(!zone)return;const slots=computeSlotRects(zone);// Apply smooth offset (lerp towards target)\nconst target=handScrollTargetRef.current;handScrollCurrentRef.current+=(target-handScrollCurrentRef.current)*0.15;// easing\nconst offsetY=Math.round(handScrollCurrentRef.current);slots.forEach((s,i)=>{const card=hand[i];if(!card)return;// Find original index in unsorted hand for click handling\nconst originalIndex=gameState.hands[1].findIndex(c=>c.uid===card.uid);const isSel=selectedHandIndex===originalIndex;// apply vertical offset\nconst sx=s.x;const sy=s.y+offsetY;const clickZone=drawCardAt(ctx,card,sx,sy,s.w,isSel,true,1);// Show AP cost for player 1 hand\nclickZonesRef.current.push(_objectSpread(_objectSpread({},clickZone),{},{data:{type:'hand_p1',index:originalIndex,card}}));});},[gameState.hands,selectedHandIndex,drawCardAt]);// ðŸ”§ DEV MODE: Player 2 Hand (rechts unten, kompakter)\nconst drawHandP2=useCallback(ctx=>{const hand=sortHandCards(gameState.hands[2]);const zone=getZone('hand.opponent');if(!zone)return;const slots=computeSlotRects(zone);// Hintergrund fÃ¼r P2 Hand\nconst[x,y,w,h]=zone.rectPx;ctx.fillStyle='rgba(255, 100, 100, 0.15)';// RÃ¶tlicher Hintergrund fÃ¼r P2\nctx.fillRect(x,y,w,h);ctx.strokeStyle='rgba(255, 100, 100, 0.3)';ctx.strokeRect(x+0.5,y+0.5,w-1,h-1);// Label fÃ¼r P2 Hand\nctx.fillStyle='rgba(255, 255, 255, 0.9)';ctx.font='bold 14px sans-serif';ctx.textAlign='center';ctx.fillText('Player 2 Hand',x+w/2,y-8);slots.forEach((s,i)=>{const card=hand[i];if(!card)return;// Find original index in unsorted hand for click handling\nconst originalIndex=gameState.hands[2].findIndex(c=>c.uid===card.uid);const isSel=gameState.current===2&&selectedHandIndex===originalIndex;const clickZone=drawCardAt(ctx,card,s.x,s.y,s.w,isSel,true,2);// Show AP cost for player 2 hand\nclickZonesRef.current.push(_objectSpread(_objectSpread({},clickZone),{},{data:{type:'hand_p2',index:originalIndex,card}}));});},[gameState,selectedHandIndex,drawCardAt]);// Interventions strip (player traps)\nconst drawInterventionsP1=useCallback(ctx=>{const traps=gameState.traps[1]||[];const zone=getZone('interventions.player');if(!zone)return;// Single intervention slot\nconst[zx,zy,zw,zh]=zone.rectPx;const card=traps[0];// Only first trap\n// Hintergrund fÃ¼r Interventions-Slot\nctx.fillStyle='rgba(200, 160, 255, 0.15)';// Lavendelfarben fÃ¼r Interventionen\nctx.fillRect(zx,zy,zw,zh);ctx.strokeStyle='rgba(200, 160, 255, 0.3)';ctx.strokeRect(zx+0.5,zy+0.5,zw-1,zh-1);// Slot-Benennung fÃ¼r Interventions-Slot\nctx.fillStyle='rgba(200, 160, 255, 0.8)';ctx.font='11px sans-serif';ctx.textAlign='left';ctx.fillText('Intervention',zx+8,zy+zh-6);if(card){const clickZone=drawCardAt(ctx,card,zx,zy,zw,false,false);clickZonesRef.current.push(_objectSpread(_objectSpread({},clickZone),{},{data:{type:'trap_p1',index:0,card}}));}},[gameState.traps,drawCardAt]);// Interventions strip (opponent traps)\nconst drawInterventionsP2=useCallback(ctx=>{const traps=gameState.traps[2]||[];const zone=getZone('interventions.opponent');if(!zone)return;// Single intervention slot\nconst[zx,zy,zw,zh]=zone.rectPx;const card=traps[0];// Only first trap\n// Hintergrund fÃ¼r Interventions-Slot\nctx.fillStyle='rgba(200, 160, 255, 0.15)';// Lavendelfarben fÃ¼r Interventionen\nctx.fillRect(zx,zy,zw,zh);ctx.strokeStyle='rgba(200, 160, 255, 0.3)';ctx.strokeRect(zx+0.5,zy+0.5,zw-1,zh-1);// Slot-Benennung fÃ¼r Interventions-Slot\nctx.fillStyle='rgba(200, 160, 255, 0.8)';ctx.font='11px sans-serif';ctx.textAlign='left';ctx.fillText('Intervention',zx+8,zy+zh-6);if(card){const clickZone=drawCardAt(ctx,card,zx,zy,zw,false,false);clickZonesRef.current.push(_objectSpread(_objectSpread({},clickZone),{},{data:{type:'trap_p2',index:0,card}}));}},[gameState.traps,drawCardAt]);// Single slot drawing function\nconst drawSingleSlot=useCallback((ctx,zoneId,card,clickType,player)=>{const zone=getZone(zoneId);if(!zone)return;const[x,y,w,h]=zone.rectPx;// Hintergrundfarbe nach Kategorie\nlet bgColor='rgba(0,0,0,0.1)';// Standard\nif(zoneId.includes('government')){bgColor='rgba(255, 197, 0, 0.15)';// Hellgelb fÃ¼r Regierung\n}else if(zoneId.includes('public')){bgColor='rgba(0, 255, 0, 0.15)';// HellgrÃ¼n fÃ¼r Ã–ffentlichkeit\n}else if(zoneId.includes('instant')){bgColor='rgba(127, 116, 91, 0.15)';// Neutral fÃ¼r Sofort-Slots\n}else if(zoneId.includes('permanent')){// Unterscheide zwischen government und public permanent slots\nif(zoneId.includes('government')){bgColor='rgba(255, 197, 0, 0.15)';}else if(zoneId.includes('public')){bgColor='rgba(0, 255, 0, 0.15)';}}ctx.fillStyle=bgColor;ctx.fillRect(x,y,w,h);// Draw slot border\nctx.strokeStyle='rgba(255,255,255,0.06)';ctx.strokeRect(x+0.5,y+0.5,w-1,h-1);if(card){const isSelected=player===1&&selectedHandIndex!==null&&gameState.hands[1][selectedHandIndex]===card;const clickZone=drawCardAt(ctx,card,x,y,w,isSelected,false);// Kartenname unter dem Slot anzeigen\nctx.fillStyle='rgba(255,255,255,0.9)';ctx.font='bold 12px sans-serif';ctx.textAlign='center';const textY=y+h+16;ctx.fillText(card.name,x+w/2,textY);clickZonesRef.current.push(_objectSpread(_objectSpread({},clickZone),{},{data:{type:'slot_card',slot:clickType,card}}));// ðŸ”§ NEU: Sofort-Initiative-Slots sind klickbar fÃ¼r Aktivierung\nif(clickType==='instant'&&gameState.current===player){clickZonesRef.current.push({x,y,w,h,data:{type:'activate_instant',player,card}});}}else if(gameState.current===player){// Slot-Benennung fÃ¼r leere Slots anzeigen (fÃ¼r den aktuellen Spieler)\nconst slotName=getSlotDisplayName(zoneId,0,player);ctx.fillStyle='rgba(255,255,255,0.6)';ctx.font='11px sans-serif';ctx.textAlign='center';const textY=y+h/2;ctx.fillText(slotName,x+w/2,textY);clickZonesRef.current.push({x,y,w,h,data:{type:'empty_slot',slot:clickType}});}},[selectedHandIndex,gameState,drawCardAt,getSlotDisplayName]);// Draw permanent slots for player\nconst drawPermanentSlotsP1=useCallback(ctx=>{drawSingleSlot(ctx,'slot.permanent.government.player',gameState.permanentSlots[1].government,'permanent_government',1);drawSingleSlot(ctx,'slot.permanent.public.player',gameState.permanentSlots[1].public,'permanent_public',1);},[gameState.permanentSlots,drawSingleSlot]);// Draw permanent slots for opponent\nconst drawPermanentSlotsP2=useCallback(ctx=>{drawSingleSlot(ctx,'slot.permanent.government.opponent',gameState.permanentSlots[2].government,'permanent_government',2);drawSingleSlot(ctx,'slot.permanent.public.opponent',gameState.permanentSlots[2].public,'permanent_public',2);},[gameState.permanentSlots,drawSingleSlot]);// Draw instant slots\nconst drawInstantSlots=useCallback(ctx=>{// Sofort-Initiative-Slots aus dem Board zeichnen\nconst sofortPlayerCard=gameState.board[1].sofort[0];const sofortOppCard=gameState.board[2].sofort[0];drawSingleSlot(ctx,'slot.instant.player',sofortPlayerCard,'instant',1);drawSingleSlot(ctx,'slot.instant.opponent',sofortOppCard,'instant',2);},[gameState.board,drawSingleSlot]);// Aktive SchlÃ¼sselwÃ¶rter und Unterkategorien ermitteln\nconst getActiveKeywordsAndSubcategories=useCallback(player=>{const board=gameState.board[player];const permanentSlots=gameState.permanentSlots[player];const allCards=[...board.innen,...board.aussen,permanentSlots.government,permanentSlots.public].filter(c=>c&&c.kind==='pol');const keywords=new Set();const subcategories=new Set();allCards.forEach(card=>{if(!card.deactivated){// Regierungskarten-SchlÃ¼sselwÃ¶rter\nif(card.tag==='Leadership'){keywords.add('Leadership');}if(card.tag==='Diplomat'){keywords.add('Diplomat');}// Ã–ffentlichkeits-Unterkategorien (fÃ¼r Karten in Ã–ffentlichkeitsreihe)\nif(board.innen.includes(card)){const publicCard=card;if(publicCard.tag){// Oligarch\nconst oligarchNames=['Elon Musk','Bill Gates','George Soros','Warren Buffett','Mukesh Ambani','Jeff Bezos','Alisher Usmanov','Gautam Adani','Jack Ma','Zhang Yiming','Roman Abramovich'];if(oligarchNames.includes(publicCard.name)){subcategories.add('Oligarch');}// Plattform\nconst platformNames=['Mark Zuckerberg','Tim Cook','Sam Altman','Jack Ma'];if(platformNames.includes(publicCard.name)){subcategories.add('Plattform');}// Bewegung\nconst movementNames=['Greta Thunberg','Malala Yousafzai','Ai Weiwei','Alexei Navalny'];if(movementNames.includes(publicCard.name)){subcategories.add('Bewegung');}// NGO/Think-Tank\nconst ngoNames=['Bill Gates','George Soros','Jennifer Doudna','Noam Chomsky','Anthony Fauci'];if(ngoNames.includes(publicCard.name)){subcategories.add('NGO/Think-Tank');}// Intelligenz\nconst intelligenceNames=['Jennifer Doudna','Noam Chomsky','Edward Snowden','Julian Assange','Yuval Noah Harari','Ai Weiwei','Alexei Navalny','Anthony Fauci'];if(intelligenceNames.includes(publicCard.name)){subcategories.add('Intelligenz');}// Medien\nconst mediaNames=['Oprah Winfrey'];if(mediaNames.includes(publicCard.name)){subcategories.add('Medien');}}}}});return{keywords:Array.from(keywords),subcategories:Array.from(subcategories)};},[gameState]);// Info-Panels zeichnen\nconst drawInfoPanels=useCallback(ctx=>{const{keywords,subcategories}=getActiveKeywordsAndSubcategories(1);// Panel fÃ¼r RegierungsschlÃ¼sselwÃ¶rter (rechts neben Regierungsslots)\nconst govPanelX=1640+256+20;// Nach dem letzten permanenten Slot\nconst govPanelY=300;// Auf HÃ¶he der Regierungsslots\nconst govPanelW=120;const govPanelH=256;// Regierungspanel Hintergrund\nctx.fillStyle='rgba(255, 197, 0, 0.15)';ctx.fillRect(govPanelX,govPanelY,govPanelW,govPanelH);ctx.strokeStyle='rgba(255, 197, 0, 0.3)';ctx.strokeRect(govPanelX+0.5,govPanelY+0.5,govPanelW-1,govPanelH-1);// Regierungspanel Titel\nctx.fillStyle='rgba(255, 197, 0, 0.9)';ctx.font='bold 12px sans-serif';ctx.textAlign='center';ctx.fillText('Regierung',govPanelX+govPanelW/2,govPanelY+16);// SchlÃ¼sselwÃ¶rter auflisten\nctx.fillStyle='rgba(255, 255, 255, 0.9)';ctx.font='11px sans-serif';ctx.textAlign='left';if(keywords.length>0){keywords.forEach((keyword,idx)=>{ctx.fillText(\"\\u2022 \".concat(keyword),govPanelX+8,govPanelY+36+idx*16);});}else{ctx.fillStyle='rgba(255, 255, 255, 0.5)';ctx.fillText('Keine aktiven',govPanelX+8,govPanelY+36);ctx.fillText('SchlÃ¼sselwÃ¶rter',govPanelX+8,govPanelY+52);}// Panel fÃ¼r Ã–ffentlichkeits-Unterkategorien (rechts neben Ã–ffentlichkeitsslots)\nconst pubPanelX=1640+256+20;const pubPanelY=580;// Auf HÃ¶he der Ã–ffentlichkeitsslots\nconst pubPanelW=120;const pubPanelH=256;// Ã–ffentlichkeitspanel Hintergrund\nctx.fillStyle='rgba(0, 255, 0, 0.15)';ctx.fillRect(pubPanelX,pubPanelY,pubPanelW,pubPanelH);ctx.strokeStyle='rgba(0, 255, 0, 0.3)';ctx.strokeRect(pubPanelX+0.5,pubPanelY+0.5,pubPanelW-1,pubPanelH-1);// Ã–ffentlichkeitspanel Titel\nctx.fillStyle='rgba(0, 255, 0, 0.9)';ctx.font='bold 12px sans-serif';ctx.textAlign='center';ctx.fillText('Ã–ffentlichkeit',pubPanelX+pubPanelW/2,pubPanelY+16);// Unterkategorien auflisten\nctx.fillStyle='rgba(255, 255, 255, 0.9)';ctx.font='11px sans-serif';ctx.textAlign='left';if(subcategories.length>0){subcategories.forEach((subcategory,idx)=>{const displayName=subcategory.length>12?subcategory.substring(0,10)+'...':subcategory;ctx.fillText(\"\\u2022 \".concat(displayName),pubPanelX+8,pubPanelY+36+idx*16);});}else{ctx.fillStyle='rgba(255, 255, 255, 0.5)';ctx.fillText('Keine aktiven',pubPanelX+8,pubPanelY+36);ctx.fillText('Unterkategorien',pubPanelX+8,pubPanelY+52);}},[getActiveKeywordsAndSubcategories]);// Move diagnostics to draw callback to ensure they run after canvas is actually rendered\nconst runDiagnostics=useCallback(()=>{try{const handZones=clickZonesRef.current.filter(z=>z.data&&z.data.type==='hand_p1');const uiUIDs=handZones.map(z=>{var _z$data$card$uid;return z.data.card&&((_z$data$card$uid=z.data.card.uid)!==null&&_z$data$card$uid!==void 0?_z$data$card$uid:z.data.card.id);}).filter(Boolean);const stateHand=gameState.hands&&gameState.hands[1]?gameState.hands[1]:[];const stateUIDs=stateHand.map(c=>{var _c$uid;return(_c$uid=c.uid)!==null&&_c$uid!==void 0?_c$uid:c.id;}).filter(Boolean);const missingInState=uiUIDs.filter(u=>!stateUIDs.includes(u));const missingInUI=stateUIDs.filter(u=>!uiUIDs.includes(u));// Only warn if there are cards in UI that don't exist in state (real error)\n// Don't warn about missing UI cards due to limited slot capacity\nif(missingInState.length>0){var _politicardDebug;const mismatch={ts:Date.now(),uiCount:uiUIDs.length,stateCount:stateUIDs.length,uiUIDs,stateUIDs,missingInState,missingInUI,stack:new Error('mismatch-stack').stack};window.__politicardDebug=_objectSpread(_objectSpread({},window.__politicardDebug),{},{mismatch:[...(((_politicardDebug=window.__politicardDebug)===null||_politicardDebug===void 0?void 0:_politicardDebug.mismatch)||[])].slice(-19).concat([mismatch])});// Clear, then log to console so user can copy/paste trace\nconsole.warn('POLITICARD DIAGNOSTIC: hand mismatch detected',mismatch);}}catch(e){// swallow diagnostic errors to avoid breaking rendering\nconsole.error('Diagnostic error',e);}},[gameState.hands]);const draw=useCallback(()=>{var _LAYOUT$background,_LAYOUT$background2;const canvas=canvasRef.current;if(!canvas)return;const ctx=canvas.getContext('2d');if(!ctx)return;// Detect influence increases and start animations\ntry{const currSnapshot={};const collect=c=>{var _c$uid2,_c$influence;if(!c)return;if(c.kind!=='pol')return;const uid=(_c$uid2=c.uid)!==null&&_c$uid2!==void 0?_c$uid2:c.id!=null?String(c.id):null;if(!uid)return;currSnapshot[uid]=(_c$influence=c.influence)!==null&&_c$influence!==void 0?_c$influence:0;};// board rows\n(gameState.board[1].aussen||[]).forEach(collect);(gameState.board[2].aussen||[]).forEach(collect);(gameState.board[1].innen||[]).forEach(collect);(gameState.board[2].innen||[]).forEach(collect);// permanent slots\ncollect(gameState.permanentSlots[1].government);collect(gameState.permanentSlots[2].government);collect(gameState.permanentSlots[1].public);collect(gameState.permanentSlots[2].public);const now=performance.now();Object.keys(currSnapshot).forEach(uid=>{var _currSnapshot$uid,_prevInfluencesRef$cu;const curr=(_currSnapshot$uid=currSnapshot[uid])!==null&&_currSnapshot$uid!==void 0?_currSnapshot$uid:0;const prev=(_prevInfluencesRef$cu=prevInfluencesRef.current[uid])!==null&&_prevInfluencesRef$cu!==void 0?_prevInfluencesRef$cu:curr;if(curr>prev){const delta=curr-prev;const list=influenceAnimRef.current.get(uid)||[];list.push({start:now,duration:900,amount:delta});influenceAnimRef.current.set(uid,list);}prevInfluencesRef.current[uid]=curr;});}catch(e){// ignore\n}// Clear canvas\nctx.clearRect(0,0,canvas.width,canvas.height);// Clear click zones\nclickZonesRef.current=[];// Background: prefer PNG if configured\nif((_LAYOUT$background=LAYOUT.background)!==null&&_LAYOUT$background!==void 0&&_LAYOUT$background.enabled&&(_LAYOUT$background2=LAYOUT.background)!==null&&_LAYOUT$background2!==void 0&&_LAYOUT$background2.src){if(backgroundImageRef.current){ctx.drawImage(backgroundImageRef.current,0,0,canvas.width,canvas.height);}else{ctx.fillStyle='#0c131b';ctx.fillRect(0,0,canvas.width,canvas.height);}}else{ctx.fillStyle='#0c131b';ctx.fillRect(0,0,canvas.width,canvas.height);}// Apply UI transform (new signature)\nconst{scale,offsetX,offsetY}=getUiTransform(canvas.width,canvas.height);ctx.save();ctx.translate(offsetX,offsetY);ctx.scale(scale,scale);// Draw opponent board (top rows) - clickable im Dev Mode\n// Draw opponent board using new layout system\nconst opponentPublicRects=getPublicRects('opponent');const opponentGovRects=getGovernmentRects('opponent');// Draw opponent public slots\nopponentPublicRects.forEach((s,idx)=>{const card=gameState.board[2].innen[idx];if(card){drawCardAt(ctx,card,s.x,s.y,s.w,false,false,2);}else{// draw placeholder symbol for empty public slot\nconst img=slotSymbolImgsRef.current.get('public');if(img&&img.complete)ctx.drawImage(img,s.x,s.y,s.w,s.h);}});// Draw opponent government slots\nopponentGovRects.forEach((s,idx)=>{const card=gameState.board[2].aussen[idx];if(card){drawCardAt(ctx,card,s.x,s.y,s.w,false,false,2);}else{const img=slotSymbolImgsRef.current.get('government');if(img&&img.complete)ctx.drawImage(img,s.x,s.y,s.w,s.h);}});// Draw opponent permanent slots\ndrawPermanentSlotsP2(ctx);// Draw player board (middle rows)\n// Draw player board using new layout system\nconst playerPublicRects=getPublicRects('player');const playerGovRects=getGovernmentRects('player');// Draw player public slots\nplayerPublicRects.forEach((s,idx)=>{const card=gameState.board[1].innen[idx];if(card){const clickZone=drawCardAt(ctx,card,s.x,s.y,s.w,false,false,1);clickZonesRef.current.push(_objectSpread(_objectSpread({},clickZone),{},{data:{type:'row_slot',player:1,lane:'innen',index:idx}}));}else{// Empty slot click zone and draw public symbol\nconst img=slotSymbolImgsRef.current.get('public');if(img&&img.complete)ctx.drawImage(img,s.x,s.y,s.w,s.h);clickZonesRef.current.push({x:s.x,y:s.y,w:s.w,h:s.h,data:{type:'row_slot',player:1,lane:'innen',index:idx}});}});// Draw player government slots\nplayerGovRects.forEach((s,idx)=>{const card=gameState.board[1].aussen[idx];if(card){const clickZone=drawCardAt(ctx,card,s.x,s.y,s.w,false,false,1);clickZonesRef.current.push(_objectSpread(_objectSpread({},clickZone),{},{data:{type:'row_slot',player:1,lane:'aussen',index:idx}}));}else{// Empty slot click zone and draw government symbol\nconst img=slotSymbolImgsRef.current.get('government');if(img&&img.complete)ctx.drawImage(img,s.x,s.y,s.w,s.h);clickZonesRef.current.push({x:s.x,y:s.y,w:s.w,h:s.h,data:{type:'row_slot',player:1,lane:'aussen',index:idx}});}});// Draw player permanent slots (draw symbols if empty)\n// permanent government\nconst permGovZone=getZone('slot.permanent.government.player');if(permGovZone){const card=gameState.permanentSlots[1].government;const[x,y,w,h]=permGovZone.rectPx;if(card){drawSingleSlot(ctx,'slot.permanent.government.player',card,'permanent_government',1);}else{const img=slotSymbolImgsRef.current.get('government');// Draw pulsating purple gradient fill + outline for permanent initiative slot\ntry{const nowG=performance.now();const pulse=0.45+0.55*(0.5+0.5*Math.sin(nowG/360+0.3));const rgbPurple='139,92,246';const grad=ctx.createLinearGradient(x,y,x+w,y+h);grad.addColorStop(0,\"rgba(\".concat(rgbPurple,\", \").concat(0.18*pulse,\")\"));grad.addColorStop(1,\"rgba(\".concat(rgbPurple,\", \").concat(0.08*pulse,\")\"));ctx.save();ctx.fillStyle=grad;ctx.beginPath();ctx.rect(x+2,y+2,w-4,h-4);ctx.fill();ctx.lineWidth=2;ctx.strokeStyle=\"rgba(\".concat(rgbPurple,\", \").concat(0.28*pulse,\")\");ctx.strokeRect(x-0.5,y-0.5,w+1,h+1);ctx.restore();}catch(e){}if(img&&img.complete)ctx.drawImage(img,x,y,w,h);}}// permanent public\nconst permPubZone=getZone('slot.permanent.public.player');if(permPubZone){const card=gameState.permanentSlots[1].public;const[x2,y2,w2,h2]=permPubZone.rectPx;if(card){drawSingleSlot(ctx,'slot.permanent.public.player',card,'permanent_public',1);}else{const img=slotSymbolImgsRef.current.get('public');// Draw same purple fill + outline for permanent initiative slot\ntry{const nowG=performance.now();const pulse=0.45+0.55*(0.5+0.5*Math.sin(nowG/360+0.6));const rgbPurple='139,92,246';const grad=ctx.createLinearGradient(x2,y2,x2+w2,y2+h2);grad.addColorStop(0,\"rgba(\".concat(rgbPurple,\", \").concat(0.18*pulse,\")\"));grad.addColorStop(1,\"rgba(\".concat(rgbPurple,\", \").concat(0.08*pulse,\")\"));ctx.save();ctx.fillStyle=grad;ctx.beginPath();ctx.rect(x2+2,y2+2,w2-4,h2-4);ctx.fill();ctx.lineWidth=2;ctx.strokeStyle=\"rgba(\".concat(rgbPurple,\", \").concat(0.28*pulse,\")\");ctx.strokeRect(x2-0.5,y2-0.5,w2+1,h2+1);ctx.restore();}catch(e){}if(img&&img.complete)ctx.drawImage(img,x2,y2,w2,h2);}}// Draw instant slots (both players) and placeholder if empty\nconst instantPlayerZone=getZone('slot.instant.player');if(instantPlayerZone){const card=gameState.board[1].sofort[0];const[x,y,w,h]=instantPlayerZone.rectPx;if(card)drawSingleSlot(ctx,'slot.instant.player',card,'instant',1);else{const img=slotSymbolImgsRef.current.get('sofort');// Draw pulsating complementary gradient fill (purple) under the icon\ntry{const nowG=performance.now();const pulse=0.45+0.55*(0.5+0.5*Math.sin(nowG/350));const rgbPurple='139,92,246';const grad=ctx.createLinearGradient(x,y,x+w,y+h);grad.addColorStop(0,\"rgba(\".concat(rgbPurple,\", \").concat(0.18*pulse,\")\"));grad.addColorStop(1,\"rgba(\".concat(rgbPurple,\", \").concat(0.08*pulse,\")\"));ctx.save();ctx.fillStyle=grad;// fill slightly inset rounded rect area\nctx.beginPath();ctx.rect(x+2,y+2,w-4,h-4);ctx.fill();// outline\nctx.lineWidth=2;ctx.strokeStyle=\"rgba(\".concat(rgbPurple,\", \").concat(0.28*pulse,\")\");ctx.strokeRect(x-0.5,y-0.5,w+1,h+1);ctx.restore();}catch(e){}if(img&&img.complete)ctx.drawImage(img,x,y,w,h);}}// Draw interventions strip (player)\n// We draw symbol if empty\nconst interventionsZone=getZone('interventions.player');if(interventionsZone){const[zx,zy,zw,zh]=interventionsZone.rectPx;const card=gameState.traps[1]&&gameState.traps[1][0];if(card)drawInterventionsP1(ctx);else{const img=slotSymbolImgsRef.current.get('intervention');// Draw pulsating complementary gradient fill (orange) under the icon\ntry{const nowG=performance.now();const pulse=0.45+0.55*(0.5+0.5*Math.sin(nowG/380+0.6));const rgbOrange='251,146,60';const grad=ctx.createLinearGradient(zx,zy,zx+zw,zy+zh);grad.addColorStop(0,\"rgba(\".concat(rgbOrange,\", \").concat(0.18*pulse,\")\"));grad.addColorStop(1,\"rgba(\".concat(rgbOrange,\", \").concat(0.08*pulse,\")\"));ctx.save();ctx.fillStyle=grad;ctx.beginPath();ctx.rect(zx+2,zy+2,zw-4,zh-4);ctx.fill();ctx.lineWidth=2;ctx.strokeStyle=\"rgba(\".concat(rgbOrange,\", \").concat(0.28*pulse,\")\");ctx.strokeRect(zx-0.5,zy-0.5,zw+1,zh+1);ctx.restore();}catch(e){}if(img&&img.complete)ctx.drawImage(img,zx,zy,zw,zh);}}// Draw interventions strip (opponent) - nur im Dev Mode\nif(devMode){drawInterventionsP2(ctx);}// Draw hand (P1)\ndrawHandP1(ctx);// ðŸ”§ DEV MODE: Draw hand (P2) - nur im Dev Mode\nif(devMode){drawHandP2(ctx);}// Draw info panels\ndrawInfoPanels(ctx);// --- Overlay pass: draw influence pulse ring and +N labels on top of all cards ---\ntry{const now=performance.now();// iterate over stored anims\ninfluenceAnimRef.current.forEach((anims,uid)=>{// find card position by scanning clickZones\nconst zone=clickZonesRef.current.find(z=>{var _z$data$card$uid2;return z.data&&(z.data.card&&((_z$data$card$uid2=z.data.card.uid)!==null&&_z$data$card$uid2!==void 0?_z$data$card$uid2:String(z.data.card.id))===uid||z.data.card&&z.data.card.uid===uid);});if(!zone)return;const cx=zone.x+zone.w/2;const cy=zone.y+zone.h/2;// calculate aggregate pulse for this uid\nlet maxPulse=0;let totalAmount=0;const remaining=[];anims.forEach(a=>{const p=Math.min(1,Math.max(0,(now-a.start)/a.duration));const pulse=Math.pow(Math.max(0,1-p),2);if(pulse>maxPulse)maxPulse=pulse;if(p<1){remaining.push(a);totalAmount+=a.amount;}});// update list\nif(remaining.length>0)influenceAnimRef.current.set(uid,remaining);else influenceAnimRef.current.delete(uid);if(maxPulse>0.001){// draw a soft ring to the right-bottom of influence number\nconst ringRadius=Math.max(8,zone.w*0.08)*(1+maxPulse*0.6);const ringX=zone.x+zone.w-28;// near bottom-right where influence text lives\nconst ringY=zone.y+zone.h-20;ctx.save();ctx.beginPath();ctx.strokeStyle=\"rgba(46, 204, 113, \".concat(0.9*maxPulse,\")\");ctx.lineWidth=Math.max(2,Math.ceil(6*maxPulse));ctx.arc(ringX,ringY,ringRadius,0,Math.PI*2);ctx.stroke();ctx.restore();}if(totalAmount>0){// floating +N to the right of influence number\nconst labelX=zone.x+zone.w-12;const labelY=zone.y+zone.h-32-Math.random()*6;// slight jitter\nctx.save();ctx.fillStyle='#2ecc71';ctx.font='bold 16px sans-serif';ctx.textAlign='left';ctx.textBaseline='middle';ctx.fillText(\"+\".concat(totalAmount),labelX,labelY);ctx.restore();}});}catch(e){// ignore overlay errors\n}// --- Outline pass: draw a subtle, slightly pulsing 257x257 square around 256x256 slots ---\ntry{const now2=performance.now();clickZonesRef.current.forEach((z,i)=>{if(!z)return;const w=z.w||0;const h=z.h||0;// only target 256x256 slot-sized zones (covers the icons)\nif(Math.abs(w-256)>0.1||Math.abs(h-256)>0.1)return;const x=z.x;const y=z.y;// Color palette (rgb)\nconst rgbTeal='20,184,166';const rgbBurg='127,29,29';const rgbPurple='139,92,246';const rgbYellow='250,204,21';const rgbOrange='251,146,60';// Determine slot semantic\nlet slotType='default';try{const dt=z.data||{};if(dt.slot&&typeof dt.slot==='string'){if(dt.slot.includes('government'))slotType='government';else if(dt.slot.includes('public'))slotType='public';else if(dt.slot.includes('permanent'))slotType='permanent';else if(dt.slot.includes('instant'))slotType='instant';}if(dt.type==='row_slot'&&dt.lane==='aussen')slotType='government';if(dt.type==='row_slot'&&dt.lane==='innen')slotType='public';if(dt.type==='trap_p1'||dt.type==='trap_p2'||dt.card&&dt.card.kind==='trap')slotType='intervention';if(dt.type==='activate_instant'||dt.slot==='instant')slotType='instant';if(dt.slot==='permanent_government'||dt.slot==='permanent_public'||dt.slot==='permanent')slotType='permanent';}catch(e){}const pulse=0.5+0.5*Math.sin(now2/350+i);const alpha=0.06+0.12*pulse;// subtle alpha\nconst lw=1+2*pulse;// line width between 1 and 3\n// Create gradient based on slot type\nlet grad=null;try{grad=ctx.createLinearGradient(x,y,x+w,y+h);if(slotType==='government'){grad.addColorStop(0,\"rgba(\".concat(rgbTeal,\",1)\"));grad.addColorStop(1,\"rgba(\".concat(rgbBurg,\",1)\"));}else if(slotType==='public'){grad.addColorStop(0,\"rgba(\".concat(rgbBurg,\",1)\"));grad.addColorStop(1,\"rgba(\".concat(rgbTeal,\",1)\"));}else if(slotType==='permanent'){grad.addColorStop(0,\"rgba(\".concat(rgbPurple,\",1)\"));grad.addColorStop(1,\"rgba(\".concat(rgbPurple,\",1)\"));}else if(slotType==='instant'){grad.addColorStop(0,\"rgba(\".concat(rgbYellow,\",1)\"));grad.addColorStop(1,\"rgba(\".concat(rgbYellow,\",1)\"));}else if(slotType==='intervention'){grad.addColorStop(0,\"rgba(\".concat(rgbOrange,\",1)\"));grad.addColorStop(1,\"rgba(\".concat(rgbOrange,\",1)\"));}else{grad.addColorStop(0,\"rgba(255,255,255,1)\");grad.addColorStop(1,\"rgba(255,255,255,1)\");}}catch(e){grad=null;}ctx.save();if(grad)ctx.strokeStyle=grad;else ctx.strokeStyle=\"rgba(255,255,255,\".concat(alpha.toFixed(3),\")\");ctx.globalAlpha=alpha;ctx.lineWidth=lw;// draw 257x257 centered so that it encloses the 256 slot\nctx.strokeRect(x-0.5,y-0.5,w+1,h+1);ctx.restore();});}catch(e){// ignore outline errors\n}ctx.restore();// expose zones for debug snapshot\nwindow.__politicardDebug={uiTransform:getUiTransform(canvas.width,canvas.height),canvasSize:{width:canvas.width,height:canvas.height},zones:LAYOUT.zones,clickZones:clickZonesRef.current.slice(0,1000)};// Run diagnostics after canvas is fully rendered\nrunDiagnostics();},[drawLane,drawHandP1,drawHandP2,drawInterventionsP1,drawInterventionsP2,drawPermanentSlotsP1,drawPermanentSlotsP2,drawInstantSlots,drawInfoPanels,devMode,runDiagnostics]);const DRAW_LAYOUT_OVERLAY=false;// force off per new layout system\n// Load slot symbol images once\nuseEffect(()=>{const load=(key,src)=>{const img=new Image();img.onload=()=>{slotSymbolImgsRef.current.set(key,img);};img.onerror=()=>{console.warn('Failed to load slot icon',src);};img.src=src;};load('public',publicSymbolUrl);load('sofort',sofortSymbolUrl);load('dauerhaft',dauerhaftSymbolUrl);load('government',governmentSymbolUrl);load('intervention',interventionSymbolUrl);// ensure first draw\nrequestAnimationFrame(draw);},[draw]);// Redraw when game state or selection changes\nuseEffect(()=>{requestAnimationFrame(draw);},[gameState,selectedHandIndex,draw]);// Continuous render loop to keep canvas updated without relying on external state refs\nuseEffect(()=>{let frame;const loop=()=>{draw();frame=requestAnimationFrame(loop);};frame=requestAnimationFrame(loop);return()=>cancelAnimationFrame(frame);},[draw]);const handleCardClick=useCallback(data=>{// Hand-Klick\nif(data.type==='hand_p1'){var _data$card$uid,_data$card,_data$card2,_gameState$hands;const uid=(_data$card$uid=(_data$card=data.card)===null||_data$card===void 0?void 0:_data$card.uid)!==null&&_data$card$uid!==void 0?_data$card$uid:(_data$card2=data.card)===null||_data$card2===void 0?void 0:_data$card2.id;const stateHand=((_gameState$hands=gameState.hands)===null||_gameState$hands===void 0?void 0:_gameState$hands[1])||[];const idxInState=stateHand.findIndex(c=>{var _c$uid3;return((_c$uid3=c.uid)!==null&&_c$uid3!==void 0?_c$uid3:c.id)===uid;});onCardClick(data);return;}// Slot-Klick\nif(data.type==='row_slot'){var _gameState$board$1$in,_gameState$board,_gameState$board$,_gameState$board$1$au,_gameState$board2,_gameState$board2$;const lane=data.lane;const cap=getLaneCapacity(lane);// Hole aktuelle Row-LÃ¤nge aus gameState\nconst rowCards=lane==='public'?(_gameState$board$1$in=(_gameState$board=gameState.board)===null||_gameState$board===void 0?void 0:(_gameState$board$=_gameState$board[1])===null||_gameState$board$===void 0?void 0:_gameState$board$.innen)!==null&&_gameState$board$1$in!==void 0?_gameState$board$1$in:[]:(_gameState$board$1$au=(_gameState$board2=gameState.board)===null||_gameState$board2===void 0?void 0:(_gameState$board2$=_gameState$board2[1])===null||_gameState$board2$===void 0?void 0:_gameState$board2$.aussen)!==null&&_gameState$board$1$au!==void 0?_gameState$board$1$au:[];if(rowCards.length>=cap){// Optional: UI Feedback\nconsole.warn(\"Row \".concat(lane,\" is full (\").concat(rowCards.length,\"/\").concat(cap,\")\"));return;}onCardClick(data);return;}// Andere Klicks (empty_slot, board_card, etc.)\nonCardClick(data);},[gameState,onCardClick]);const handleClick=useCallback(e=>{const canvas=canvasRef.current;if(!canvas)return;const rect=canvas.getBoundingClientRect();const{scale,offsetX,offsetY}=getUiTransform(canvas.width,canvas.height);const mx=(e.clientX-rect.left-offsetX)/scale;const my=(e.clientY-rect.top-offsetY)/scale;const hit=clickZonesRef.current.find(z=>mx>=z.x&&mx<=z.x+z.w&&my>=z.y&&my<=z.y+z.h);if(hit)handleCardClick(hit.data);},[handleCardClick]);const handleMouseMove=useCallback(e=>{const canvas=canvasRef.current;if(!canvas)return;const rect=canvas.getBoundingClientRect();const{scale,offsetX,offsetY}=getUiTransform(canvas.width,canvas.height);const mx=(e.clientX-rect.left-offsetX)/scale;const my=(e.clientY-rect.top-offsetY)/scale;const hit=clickZonesRef.current.find(z=>mx>=z.x&&mx<=z.x+z.w&&my>=z.y&&my<=z.y+z.h);if(hit){var _hit$data$card;console.log('[hover]',hit.data.type,(_hit$data$card=hit.data.card)===null||_hit$data$card===void 0?void 0:_hit$data$card.name);onCardHover(_objectSpread(_objectSpread({},hit.data),{},{x:e.clientX,y:e.clientY}));}else{onCardHover(null);}},[onCardHover]);const handleWheel=useCallback(e=>{// only enable when player1 has more slots than visible\nconst handLen=gameState.hands&&gameState.hands[1]?gameState.hands[1].length:0;const zone=getZone('hand.player');if(!zone)return;if(handLen<=5)return;// nothing to scroll\n// Prevent page scrolling when over canvas\ne.preventDefault();// accumulate target offset (invert so wheel down moves cards up)\n// Each wheel step moves by 48px per delta unit\nconst delta=Math.sign(e.deltaY)*48;// compute slot height more robustly\nconst slots=computeSlotRects(zone);const slotH=slots&&slots.length>0?slots[0].h:zone.rectPx[3]/5;const visible=5;const maxOffset=-(Math.max(0,handLen-visible)*slotH);handScrollTargetRef.current=Math.max(Math.min(handScrollTargetRef.current-delta,0),maxOffset);},[gameState.hands]);const handleTouchStart=useCallback(e=>{if(!e.touches||e.touches.length===0)return;const handLen=gameState.hands&&gameState.hands[1]?gameState.hands[1].length:0;if(handLen<=5)return;isTouchingRef.current=true;const y=e.touches[0].clientY;touchStartYRef.current=y;lastTouchYRef.current=y;e.preventDefault();},[gameState.hands]);const handleTouchMove=useCallback(e=>{var _lastTouchYRef$curren;if(!isTouchingRef.current)return;if(!e.touches||e.touches.length===0)return;const y=e.touches[0].clientY;const last=(_lastTouchYRef$curren=lastTouchYRef.current)!==null&&_lastTouchYRef$curren!==void 0?_lastTouchYRef$curren:y;const dy=y-last;// positive when moving down\nlastTouchYRef.current=y;// invert so dragging up moves cards up\nconst delta=-dy;const handLen=gameState.hands&&gameState.hands[1]?gameState.hands[1].length:0;const zone=getZone('hand.player');if(!zone)return;const slots=computeSlotRects(zone);const slotH=slots&&slots.length>0?slots[0].h:zone.rectPx[3]/5;const visible=5;const maxOffset=-(Math.max(0,handLen-visible)*slotH);handScrollTargetRef.current=Math.max(Math.min(handScrollTargetRef.current+delta,0),maxOffset);e.preventDefault();},[gameState.hands]);const handleTouchEnd=useCallback(e=>{isTouchingRef.current=false;touchStartYRef.current=null;lastTouchYRef.current=null;},[]);return/*#__PURE__*/_jsx(\"canvas\",{ref:canvasRef,width:1920,height:1080,style:{display:'block',width:'100%',height:'100%',imageRendering:'auto'},onClick:handleClick,onMouseMove:handleMouseMove,onWheel:handleWheel,onTouchStart:handleTouchStart,onTouchMove:handleTouchMove,onTouchEnd:handleTouchEnd});};","map":{"version":3,"names":["React","useRef","useEffect","useCallback","LAYOUT","getZone","computeSlotRects","getUiTransform","getLaneCapacity","getPublicRects","getGovernmentRects","sortHandCards","getCardImagePath","influenceIconUrl","publicSymbolUrl","sofortSymbolUrl","dauerhaftSymbolUrl","governmentSymbolUrl","interventionSymbolUrl","jsx","_jsx","GameCanvas","_ref","gameState","selectedHandIndex","onCardClick","onCardHover","devMode","canvasRef","clickZonesRef","handScrollTargetRef","handScrollCurrentRef","handScrollEnabledRef","touchStartYRef","lastTouchYRef","isTouchingRef","backgroundImageRef","imageCacheRef","Map","influenceImgRef","influenceAnimRef","prevInfluencesRef","slotSymbolImgsRef","img","Image","src","current","drawCardAt","ctx","card","x","y","size","_shield","selected","arguments","length","undefined","showAPCost","player","dx","dy","s","Math","floor","cached","get","complete","drawImage","onload","set","kind","_influence","barH","max","fillStyle","fillRect","fontSize","font","concat","textAlign","textBaseline","fillText","influence","protected","shield","deactivated","_influence2","badgeHeight","badgeWidth","badgeX","badgeY","beginPath","roundRect","fill","globalAlpha","strokeStyle","lineWidth","strokeRect","w","h","getSlotDisplayName","zoneId","index","slotNumber","includes","drawLane","lane","clickable","zone","slots","arr","board","forEach","idx","bgColor","isSelected","hands","clickZone","textY","name","push","_objectSpread","data","type","slotName","drawHandP1","hand","target","offsetY","round","i","originalIndex","findIndex","c","uid","isSel","sx","sy","drawHandP2","rectPx","drawInterventionsP1","traps","zx","zy","zw","zh","drawInterventionsP2","drawSingleSlot","clickType","slot","drawPermanentSlotsP1","permanentSlots","government","public","drawPermanentSlotsP2","drawInstantSlots","sofortPlayerCard","sofort","sofortOppCard","getActiveKeywordsAndSubcategories","allCards","innen","aussen","filter","keywords","Set","subcategories","tag","add","publicCard","oligarchNames","platformNames","movementNames","ngoNames","intelligenceNames","mediaNames","Array","from","drawInfoPanels","govPanelX","govPanelY","govPanelW","govPanelH","keyword","pubPanelX","pubPanelY","pubPanelW","pubPanelH","subcategory","displayName","substring","runDiagnostics","handZones","z","uiUIDs","map","_z$data$card$uid","id","Boolean","stateHand","stateUIDs","_c$uid","missingInState","u","missingInUI","_politicardDebug","mismatch","ts","Date","now","uiCount","stateCount","stack","Error","window","__politicardDebug","slice","console","warn","e","error","draw","_LAYOUT$background","_LAYOUT$background2","canvas","getContext","currSnapshot","collect","_c$uid2","_c$influence","String","performance","Object","keys","_currSnapshot$uid","_prevInfluencesRef$cu","curr","prev","delta","list","start","duration","amount","clearRect","width","height","background","enabled","scale","offsetX","save","translate","opponentPublicRects","opponentGovRects","playerPublicRects","playerGovRects","permGovZone","nowG","pulse","sin","rgbPurple","grad","createLinearGradient","addColorStop","rect","restore","permPubZone","x2","y2","w2","h2","instantPlayerZone","interventionsZone","rgbOrange","anims","find","_z$data$card$uid2","cx","cy","maxPulse","totalAmount","remaining","a","p","min","pow","delete","ringRadius","ringX","ringY","ceil","arc","PI","stroke","labelX","labelY","random","now2","abs","rgbTeal","rgbBurg","rgbYellow","slotType","dt","alpha","lw","toFixed","uiTransform","canvasSize","zones","clickZones","DRAW_LAYOUT_OVERLAY","load","key","onerror","requestAnimationFrame","frame","loop","cancelAnimationFrame","handleCardClick","_data$card$uid","_data$card","_data$card2","_gameState$hands","idxInState","_c$uid3","_gameState$board$1$in","_gameState$board","_gameState$board$","_gameState$board$1$au","_gameState$board2","_gameState$board2$","cap","rowCards","handleClick","getBoundingClientRect","mx","clientX","left","my","clientY","top","hit","handleMouseMove","_hit$data$card","log","handleWheel","handLen","preventDefault","sign","deltaY","slotH","visible","maxOffset","handleTouchStart","touches","handleTouchMove","_lastTouchYRef$curren","last","handleTouchEnd","ref","style","display","imageRendering","onClick","onMouseMove","onWheel","onTouchStart","onTouchMove","onTouchEnd"],"sources":["C:/Users/skank/Videos/Cards/Milchcards/src/components/GameCanvas.tsx"],"sourcesContent":["import React, { useRef, useEffect, useCallback } from 'react';\nimport { GameState, Card, PoliticianCard, Player, Lane } from '../types/game';\nimport { LAYOUT, getZone, computeSlotRects, getUiTransform, getLaneCapacity, getPublicRects, getGovernmentRects, getSofortRect } from '../ui/layout';\nimport { drawCardImage, sortHandCards } from '../utils/gameUtils';\nimport { getNetApCost } from '../utils/ap';\nimport { getCardImagePath } from '../data/gameData';\nimport influenceIconUrl from '../assets/icons/influence.svg';\nimport publicSymbolUrl from '../assets/icons/public_symbol.png';\nimport sofortSymbolUrl from '../assets/icons/sofort_initiative_symbol.png';\nimport dauerhaftSymbolUrl from '../assets/icons/dauerhaft_initative.png';\nimport governmentSymbolUrl from '../assets/icons/government_symbol.png';\nimport interventionSymbolUrl from '../assets/icons/intervention_symbol.png';\n\ninterface GameCanvasProps {\n  gameState: GameState;\n  selectedHandIndex: number | null;\n  onCardClick: (data: any) => void;\n  onCardHover: (data: any) => void;\n  devMode?: boolean; // ðŸ”§ DEV MODE: Show P2 hand when true\n}\n\n\n\nexport const GameCanvas: React.FC<GameCanvasProps> = ({\n  gameState,\n  selectedHandIndex,\n  onCardClick,\n  onCardHover,\n  devMode = false,\n}) => {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const clickZonesRef = useRef<Array<{ x: number; y: number; w: number; h: number; data: any }>>([]);\n  // Smooth vertical scroll for P1 hand when it has more than visible slots\n  const handScrollTargetRef = useRef<number>(0);\n  const handScrollCurrentRef = useRef<number>(0);\n  const handScrollEnabledRef = useRef<boolean>(true);\n  // Touch handling refs\n  const touchStartYRef = useRef<number | null>(null);\n  const lastTouchYRef = useRef<number | null>(null);\n  const isTouchingRef = useRef<boolean>(false);\n  const backgroundImageRef = useRef<HTMLImageElement | null>(null);\n  const imageCacheRef = useRef<Map<string, HTMLImageElement>>(new Map());\n  const influenceImgRef = useRef<HTMLImageElement | null>(null);\n  // Animation state for visual influence changes: Map<uid, Array<Anim>>\n  const influenceAnimRef = useRef<Map<string, Array<{ start: number; duration: number; amount: number }>>>(new Map());\n  // Previous per-card influence snapshot to detect increases\n  const prevInfluencesRef = useRef<Record<string, number>>({});\n  // Slot symbol images\n  const slotSymbolImgsRef = useRef<Map<string, HTMLImageElement>>(new Map());\n\n  // Load influence icon once\n  useEffect(() => {\n    const img = new Image();\n    img.src = influenceIconUrl;\n    influenceImgRef.current = img;\n  }, []);\n\n\n  const drawCardAt = useCallback((\n    ctx: CanvasRenderingContext2D,\n    card: Card,\n    x: number,\n    y: number,\n    size: number,\n    selected: boolean = false,\n    showAPCost: boolean = false,\n    player?: Player\n  ) => {\n    let dx = x, dy = y, s = size;\n    if (selected) {\n      s = Math.floor(size * 1.05);\n      dx = x - Math.floor((s - size) / 2);\n      dy = y - Math.floor((s - size) / 2);\n    }\n\n    // Note: pulse overlay is drawn at top layer after all cards are rendered\n\n    // Draw card image with caching to prevent flicker in continuous loop\n    const src = getCardImagePath(card, 'ui');\n    const cached = imageCacheRef.current.get(src);\n    if (cached && cached.complete) {\n      ctx.drawImage(cached, dx, dy, s, s);\n    } else {\n      const img = new Image();\n      img.onload = () => {\n        imageCacheRef.current.set(src, img);\n        ctx.drawImage(img, dx, dy, s, s);\n      };\n      img.src = src;\n      imageCacheRef.current.set(src, img);\n    }\n\n    // Status-Indikatoren (fÃ¼r alle Board-Karten)\n    // Einfluss-Wert dauerhaft anzeigen (oben links) â€“ nur fÃ¼r Regierungskarten\n    if ((card as any).kind === 'pol') {\n      const barH = Math.max(20, Math.floor(s * 0.12) + 6);\n      ctx.fillStyle = 'rgba(0,0,0,0.6)';\n      ctx.fillRect(dx, dy + s - barH, s, barH);\n\n      ctx.fillStyle = '#ffffff';\n      const fontSize = Math.floor(s * 0.12);\n      ctx.font = `bold ${fontSize}px sans-serif`;\n      ctx.textAlign = 'left';\n      ctx.textBaseline = 'middle';\n      ctx.fillText(`${(card as any).influence ?? 0}`, dx + 8, dy + s - barH / 2);\n    }\n    // Schutz-Status (blauer Punkt)\n    if ((card as any).protected || ((card as any).shield ?? 0) > 0) {\n      ctx.fillStyle = '#1da1f2';\n      ctx.fillRect(dx + s - 22, dy + 6, 16, 16);\n    }\n    // Deaktiviert-Status (roter Punkt)\n    if ((card as any).deactivated) {\n      ctx.fillStyle = '#b63838';\n      ctx.fillRect(dx + s - 22, dy + 26, 16, 16);\n    }\n\n    // Einfluss-Badge fÃ¼r Handkarten oben rechts (nur Regierungskarten)\n    if (showAPCost && player && (card as any).kind === 'pol') {\n      const badgeHeight = Math.max(16, Math.floor(s * 0.12));\n      const badgeWidth = badgeHeight * 2;\n      const badgeX = dx + s - badgeWidth - 6;\n      const badgeY = dy + 6;\n\n      // Semi-transparent dunkler Hintergrund\n      ctx.fillStyle = 'rgba(0,0,0,0.6)';\n      ctx.beginPath();\n      ctx.roundRect(badgeX, badgeY, badgeWidth, badgeHeight, badgeHeight / 2);\n      ctx.fill();\n\n      // Influence icon (90% opacity) links im Badge\n      if (influenceImgRef.current && influenceImgRef.current.complete) {\n        ctx.globalAlpha = 0.9;\n        ctx.drawImage(influenceImgRef.current, badgeX + 2, badgeY + 2, badgeHeight - 4, badgeHeight - 4);\n        ctx.globalAlpha = 1;\n      }\n\n      // Influence number rechts im Badge\n      ctx.fillStyle = '#ffffff';\n      ctx.font = `bold ${Math.floor(badgeHeight * 0.5)}px sans-serif`;\n      ctx.textAlign = 'right';\n      ctx.textBaseline = 'middle';\n      ctx.fillText(`${(card as any).influence ?? 0}`, badgeX + badgeWidth - 4, badgeY + badgeHeight / 2);\n\n      // Reset align\n      ctx.textAlign = 'start';\n      ctx.textBaseline = 'alphabetic';\n    }\n\n    // NOTE: influence overlays (pulse + labels) are drawn in a separate pass\n\n    // Auswahl-Rahmen\n    if (selected) {\n      ctx.strokeStyle = '#61dafb';\n      ctx.lineWidth = 3;\n      ctx.strokeRect(dx + 1, dy + 1, s - 2, s - 2);\n      ctx.lineWidth = 1;\n    }\n\n    // Return exact 256x256 click zone over the card\n    // Since all cards are 256x256, the click zone should match exactly\n    return { x: dx, y: dy, w: 256, h: 256 };\n  }, [gameState]);\n\n\n\n\n\n\n\n  // Slot-Benennungs-Funktion basierend auf Glossar\n  const getSlotDisplayName = useCallback((zoneId: string, index: number, player: Player): string => {\n    const slotNumber = index + 1;\n\n    if (zoneId.includes('government')) {\n      if (zoneId.includes('player')) {\n        return `Regierungsreihe Slot ${slotNumber}`;\n      } else {\n        return `Gegner Regierung Slot ${slotNumber}`;\n      }\n    } else if (zoneId.includes('public')) {\n      if (zoneId.includes('player')) {\n        return `Ã–ffentlichkeitsreihe Slot ${slotNumber}`;\n      } else {\n        return `Gegner Ã–ffentlichkeit Slot ${slotNumber}`;\n      }\n    } else if (zoneId.includes('permanent.government')) {\n      if (zoneId.includes('player')) {\n        return 'Regierung Spezial-Slot';\n      } else {\n        return 'Gegner Regierung Spezial-Slot';\n      }\n    } else if (zoneId.includes('permanent.public')) {\n      if (zoneId.includes('player')) {\n        return 'Ã–ffentlichkeit Spezial-Slot';\n      } else {\n        return 'Gegner Ã–ffentlichkeit Spezial-Slot';\n      }\n    } else if (zoneId.includes('instant')) {\n      if (zoneId.includes('player')) {\n        return 'Sofort-Slot';\n      } else {\n        return 'Gegner Sofort-Slot';\n      }\n    } else if (zoneId.includes('hand')) {\n      return 'Hand';\n    } else if (zoneId.includes('interventions')) {\n      return 'Interventionen';\n    }\n\n    return `Slot ${slotNumber}`;\n  }, []);\n\n  const drawLane = useCallback((\n    ctx: CanvasRenderingContext2D,\n    zoneId: string,\n    player: Player,\n    lane: Lane,\n    clickable: boolean\n  ) => {\n    const zone = getZone(zoneId);\n    if (!zone) return;\n\n    const slots = computeSlotRects(zone);\n    const arr = gameState.board[player][lane];\n\n    slots.forEach((s, idx) => {\n      const card = arr[idx];\n\n      // Hintergrundfarbe nach Kategorie\n      let bgColor = 'rgba(0,0,0,0.1)'; // Standard\n      if (zoneId.includes('government')) {\n        bgColor = 'rgba(255, 197, 0, 0.15)'; // Hellgelb fÃ¼r Regierung\n      } else if (zoneId.includes('public')) {\n        bgColor = 'rgba(0, 255, 0, 0.15)'; // HellgrÃ¼n fÃ¼r Ã–ffentlichkeit\n      }\n\n      ctx.fillStyle = bgColor;\n      ctx.fillRect(s.x, s.y, s.w, s.h);\n\n      // Slot-Rahmen\n      ctx.strokeStyle = 'rgba(255,255,255,0.06)';\n      ctx.strokeRect(s.x + 0.5, s.y + 0.5, s.w - 1, s.h - 1);\n\n      if (card) {\n        const isSelected = player === 1 && selectedHandIndex !== null && gameState.hands[1][selectedHandIndex] === card;\n        const clickZone = drawCardAt(ctx, card, s.x, s.y, s.w, isSelected, false);\n\n        // Kartenname unter dem Slot anzeigen\n        ctx.fillStyle = 'rgba(255,255,255,0.9)';\n        ctx.font = 'bold 12px sans-serif';\n        ctx.textAlign = 'center';\n        const textY = s.y + s.h + 16;\n        ctx.fillText(card.name, s.x + s.w/2, textY);\n\n        clickZonesRef.current.push({\n          ...clickZone,\n          data: { type: 'board_card', player, lane, index: idx, card }\n        });\n      } else if (clickable && gameState.current === player) {\n        // Slot-Benennung anzeigen (fÃ¼r den aktuellen Spieler)\n        const slotName = getSlotDisplayName(zoneId, idx, player);\n        ctx.fillStyle = 'rgba(255,255,255,0.6)';\n        ctx.font = '11px sans-serif';\n        ctx.textAlign = 'center';\n        const textY = s.y + s.h/2;\n        ctx.fillText(slotName, s.x + s.w/2, textY);\n\n        clickZonesRef.current.push({\n          x: s.x, y: s.y, w: s.w, h: s.h,\n          data: { type: 'row_slot', lane, index: idx }\n        });\n      }\n    });\n  }, [gameState, selectedHandIndex, drawCardAt, getSlotDisplayName]);\n\n  const drawHandP1 = useCallback((ctx: CanvasRenderingContext2D) => {\n    const hand = sortHandCards(gameState.hands[1]);\n    const zone = getZone('hand.player');\n    if (!zone) return;\n\n    const slots = computeSlotRects(zone);\n    // Apply smooth offset (lerp towards target)\n    const target = handScrollTargetRef.current;\n    handScrollCurrentRef.current += (target - handScrollCurrentRef.current) * 0.15; // easing\n    const offsetY = Math.round(handScrollCurrentRef.current);\n    slots.forEach((s: { x: number; y: number; w: number; h: number }, i: number) => {\n      const card = hand[i];\n      if (!card) return;\n      // Find original index in unsorted hand for click handling\n      const originalIndex = gameState.hands[1].findIndex(c => c.uid === card.uid);\n      const isSel = selectedHandIndex === originalIndex;\n      // apply vertical offset\n      const sx = s.x;\n      const sy = s.y + offsetY;\n      const clickZone = drawCardAt(ctx, card, sx, sy, s.w, isSel, true, 1); // Show AP cost for player 1 hand\n      clickZonesRef.current.push({ ...clickZone, data: { type: 'hand_p1', index: originalIndex, card } });\n    });\n  }, [gameState.hands, selectedHandIndex, drawCardAt]);\n\n      // ðŸ”§ DEV MODE: Player 2 Hand (rechts unten, kompakter)\n  const drawHandP2 = useCallback((ctx: CanvasRenderingContext2D) => {\n    const hand = sortHandCards(gameState.hands[2]);\n    const zone = getZone('hand.opponent');\n    if (!zone) return;\n\n    const slots = computeSlotRects(zone);\n\n    // Hintergrund fÃ¼r P2 Hand\n    const [x, y, w, h] = zone.rectPx;\n    ctx.fillStyle = 'rgba(255, 100, 100, 0.15)'; // RÃ¶tlicher Hintergrund fÃ¼r P2\n    ctx.fillRect(x, y, w, h);\n    ctx.strokeStyle = 'rgba(255, 100, 100, 0.3)';\n    ctx.strokeRect(x + 0.5, y + 0.5, w - 1, h - 1);\n\n    // Label fÃ¼r P2 Hand\n    ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\n    ctx.font = 'bold 14px sans-serif';\n    ctx.textAlign = 'center';\n    ctx.fillText('Player 2 Hand', x + w/2, y - 8);\n\n    slots.forEach((s: { x: number; y: number; w: number; h: number }, i: number) => {\n      const card = hand[i];\n      if (!card) return;\n      // Find original index in unsorted hand for click handling\n      const originalIndex = gameState.hands[2].findIndex(c => c.uid === card.uid);\n      const isSel = gameState.current === 2 && selectedHandIndex === originalIndex;\n      const clickZone = drawCardAt(ctx, card, s.x, s.y, s.w, isSel, true, 2); // Show AP cost for player 2 hand\n      clickZonesRef.current.push({ ...clickZone, data: { type: 'hand_p2', index: originalIndex, card } });\n    });\n  }, [gameState, selectedHandIndex, drawCardAt]);\n  // Interventions strip (player traps)\n  const drawInterventionsP1 = useCallback((ctx: CanvasRenderingContext2D) => {\n    const traps = gameState.traps[1] || [];\n    const zone = getZone('interventions.player');\n    if (!zone) return;\n\n    // Single intervention slot\n    const [zx, zy, zw, zh] = zone.rectPx;\n    const card = traps[0]; // Only first trap\n\n    // Hintergrund fÃ¼r Interventions-Slot\n    ctx.fillStyle = 'rgba(200, 160, 255, 0.15)'; // Lavendelfarben fÃ¼r Interventionen\n    ctx.fillRect(zx, zy, zw, zh);\n    ctx.strokeStyle = 'rgba(200, 160, 255, 0.3)';\n    ctx.strokeRect(zx + 0.5, zy + 0.5, zw - 1, zh - 1);\n\n    // Slot-Benennung fÃ¼r Interventions-Slot\n    ctx.fillStyle = 'rgba(200, 160, 255, 0.8)';\n    ctx.font = '11px sans-serif';\n    ctx.textAlign = 'left';\n    ctx.fillText('Intervention', zx + 8, zy + zh - 6);\n\n    if (card) {\n      const clickZone = drawCardAt(ctx, card, zx, zy, zw, false, false);\n      clickZonesRef.current.push({ ...clickZone, data: { type: 'trap_p1', index: 0, card } });\n    }\n  }, [gameState.traps, drawCardAt]);\n\n  // Interventions strip (opponent traps)\n  const drawInterventionsP2 = useCallback((ctx: CanvasRenderingContext2D) => {\n    const traps = gameState.traps[2] || [];\n    const zone = getZone('interventions.opponent');\n    if (!zone) return;\n\n    // Single intervention slot\n    const [zx, zy, zw, zh] = zone.rectPx;\n    const card = traps[0]; // Only first trap\n\n    // Hintergrund fÃ¼r Interventions-Slot\n    ctx.fillStyle = 'rgba(200, 160, 255, 0.15)'; // Lavendelfarben fÃ¼r Interventionen\n    ctx.fillRect(zx, zy, zw, zh);\n    ctx.strokeStyle = 'rgba(200, 160, 255, 0.3)';\n    ctx.strokeRect(zx + 0.5, zy + 0.5, zw - 1, zh - 1);\n\n    // Slot-Benennung fÃ¼r Interventions-Slot\n    ctx.fillStyle = 'rgba(200, 160, 255, 0.8)';\n    ctx.font = '11px sans-serif';\n    ctx.textAlign = 'left';\n    ctx.fillText('Intervention', zx + 8, zy + zh - 6);\n\n    if (card) {\n      const clickZone = drawCardAt(ctx, card, zx, zy, zw, false, false);\n      clickZonesRef.current.push({ ...clickZone, data: { type: 'trap_p2', index: 0, card } });\n    }\n  }, [gameState.traps, drawCardAt]);\n\n  // Single slot drawing function\n  const drawSingleSlot = useCallback((\n    ctx: CanvasRenderingContext2D,\n    zoneId: string,\n    card: Card | null,\n    clickType: string,\n    player: Player\n  ) => {\n    const zone = getZone(zoneId);\n    if (!zone) return;\n    const [x, y, w, h] = zone.rectPx;\n\n    // Hintergrundfarbe nach Kategorie\n    let bgColor = 'rgba(0,0,0,0.1)'; // Standard\n    if (zoneId.includes('government')) {\n      bgColor = 'rgba(255, 197, 0, 0.15)'; // Hellgelb fÃ¼r Regierung\n    } else if (zoneId.includes('public')) {\n      bgColor = 'rgba(0, 255, 0, 0.15)'; // HellgrÃ¼n fÃ¼r Ã–ffentlichkeit\n    } else if (zoneId.includes('instant')) {\n      bgColor = 'rgba(127, 116, 91, 0.15)'; // Neutral fÃ¼r Sofort-Slots\n    } else if (zoneId.includes('permanent')) {\n      // Unterscheide zwischen government und public permanent slots\n      if (zoneId.includes('government')) {\n        bgColor = 'rgba(255, 197, 0, 0.15)';\n      } else if (zoneId.includes('public')) {\n        bgColor = 'rgba(0, 255, 0, 0.15)';\n      }\n    }\n\n    ctx.fillStyle = bgColor;\n    ctx.fillRect(x, y, w, h);\n\n    // Draw slot border\n    ctx.strokeStyle = 'rgba(255,255,255,0.06)';\n    ctx.strokeRect(x + 0.5, y + 0.5, w - 1, h - 1);\n\n    if (card) {\n      const isSelected = player === 1 && selectedHandIndex !== null && gameState.hands[1][selectedHandIndex] === card;\n      const clickZone = drawCardAt(ctx, card, x, y, w, isSelected, false);\n\n      // Kartenname unter dem Slot anzeigen\n      ctx.fillStyle = 'rgba(255,255,255,0.9)';\n      ctx.font = 'bold 12px sans-serif';\n      ctx.textAlign = 'center';\n      const textY = y + h + 16;\n      ctx.fillText(card.name, x + w/2, textY);\n\n      clickZonesRef.current.push({ ...clickZone, data: { type: 'slot_card', slot: clickType, card } });\n\n      // ðŸ”§ NEU: Sofort-Initiative-Slots sind klickbar fÃ¼r Aktivierung\n      if (clickType === 'instant' && gameState.current === player) {\n        clickZonesRef.current.push({\n          x, y, w, h,\n          data: { type: 'activate_instant', player, card }\n        });\n      }\n    } else if (gameState.current === player) {\n      // Slot-Benennung fÃ¼r leere Slots anzeigen (fÃ¼r den aktuellen Spieler)\n      const slotName = getSlotDisplayName(zoneId, 0, player);\n      ctx.fillStyle = 'rgba(255,255,255,0.6)';\n      ctx.font = '11px sans-serif';\n      ctx.textAlign = 'center';\n      const textY = y + h/2;\n      ctx.fillText(slotName, x + w/2, textY);\n\n      clickZonesRef.current.push({ x, y, w, h, data: { type: 'empty_slot', slot: clickType } });\n    }\n  }, [selectedHandIndex, gameState, drawCardAt, getSlotDisplayName]);\n\n  // Draw permanent slots for player\n  const drawPermanentSlotsP1 = useCallback((ctx: CanvasRenderingContext2D) => {\n    drawSingleSlot(ctx, 'slot.permanent.government.player', gameState.permanentSlots[1].government, 'permanent_government', 1);\n    drawSingleSlot(ctx, 'slot.permanent.public.player', gameState.permanentSlots[1].public, 'permanent_public', 1);\n  }, [gameState.permanentSlots, drawSingleSlot]);\n\n  // Draw permanent slots for opponent\n  const drawPermanentSlotsP2 = useCallback((ctx: CanvasRenderingContext2D) => {\n    drawSingleSlot(ctx, 'slot.permanent.government.opponent', gameState.permanentSlots[2].government, 'permanent_government', 2);\n    drawSingleSlot(ctx, 'slot.permanent.public.opponent', gameState.permanentSlots[2].public, 'permanent_public', 2);\n  }, [gameState.permanentSlots, drawSingleSlot]);\n\n  // Draw instant slots\n  const drawInstantSlots = useCallback((ctx: CanvasRenderingContext2D) => {\n    // Sofort-Initiative-Slots aus dem Board zeichnen\n    const sofortPlayerCard = gameState.board[1].sofort[0];\n    const sofortOppCard = gameState.board[2].sofort[0];\n\n    drawSingleSlot(ctx, 'slot.instant.player', sofortPlayerCard, 'instant', 1);\n    drawSingleSlot(ctx, 'slot.instant.opponent', sofortOppCard, 'instant', 2);\n  }, [gameState.board, drawSingleSlot]);\n\n  // Aktive SchlÃ¼sselwÃ¶rter und Unterkategorien ermitteln\n  const getActiveKeywordsAndSubcategories = useCallback((player: Player) => {\n    const board = gameState.board[player];\n    const permanentSlots = gameState.permanentSlots[player];\n    const allCards = [\n      ...board.innen,\n      ...board.aussen,\n      permanentSlots.government,\n      permanentSlots.public\n    ].filter(c => c && c.kind === 'pol') as PoliticianCard[];\n\n    const keywords = new Set<string>();\n    const subcategories = new Set<string>();\n\n    allCards.forEach(card => {\n      if (!card.deactivated) {\n        // Regierungskarten-SchlÃ¼sselwÃ¶rter\n        if (card.tag === 'Leadership') {\n          keywords.add('Leadership');\n        }\n        if (card.tag === 'Diplomat') {\n          keywords.add('Diplomat');\n        }\n\n        // Ã–ffentlichkeits-Unterkategorien (fÃ¼r Karten in Ã–ffentlichkeitsreihe)\n        if (board.innen.includes(card)) {\n          const publicCard = card as any;\n          if (publicCard.tag) {\n            // Oligarch\n            const oligarchNames = ['Elon Musk', 'Bill Gates', 'George Soros', 'Warren Buffett', 'Mukesh Ambani', 'Jeff Bezos', 'Alisher Usmanov', 'Gautam Adani', 'Jack Ma', 'Zhang Yiming', 'Roman Abramovich'];\n            if (oligarchNames.includes(publicCard.name)) {\n              subcategories.add('Oligarch');\n            }\n\n            // Plattform\n            const platformNames = ['Mark Zuckerberg', 'Tim Cook', 'Sam Altman', 'Jack Ma'];\n            if (platformNames.includes(publicCard.name)) {\n              subcategories.add('Plattform');\n            }\n\n            // Bewegung\n            const movementNames = ['Greta Thunberg', 'Malala Yousafzai', 'Ai Weiwei', 'Alexei Navalny'];\n            if (movementNames.includes(publicCard.name)) {\n              subcategories.add('Bewegung');\n            }\n\n            // NGO/Think-Tank\n            const ngoNames = ['Bill Gates', 'George Soros', 'Jennifer Doudna', 'Noam Chomsky', 'Anthony Fauci'];\n            if (ngoNames.includes(publicCard.name)) {\n              subcategories.add('NGO/Think-Tank');\n            }\n\n            // Intelligenz\n            const intelligenceNames = ['Jennifer Doudna', 'Noam Chomsky', 'Edward Snowden', 'Julian Assange', 'Yuval Noah Harari', 'Ai Weiwei', 'Alexei Navalny', 'Anthony Fauci'];\n            if (intelligenceNames.includes(publicCard.name)) {\n              subcategories.add('Intelligenz');\n            }\n\n            // Medien\n            const mediaNames = ['Oprah Winfrey'];\n            if (mediaNames.includes(publicCard.name)) {\n              subcategories.add('Medien');\n            }\n          }\n        }\n      }\n    });\n\n    return {\n      keywords: Array.from(keywords),\n      subcategories: Array.from(subcategories)\n    };\n  }, [gameState]);\n\n  // Info-Panels zeichnen\n  const drawInfoPanels = useCallback((ctx: CanvasRenderingContext2D) => {\n    const { keywords, subcategories } = getActiveKeywordsAndSubcategories(1);\n\n    // Panel fÃ¼r RegierungsschlÃ¼sselwÃ¶rter (rechts neben Regierungsslots)\n    const govPanelX = 1640 + 256 + 20; // Nach dem letzten permanenten Slot\n    const govPanelY = 300; // Auf HÃ¶he der Regierungsslots\n    const govPanelW = 120;\n    const govPanelH = 256;\n\n    // Regierungspanel Hintergrund\n    ctx.fillStyle = 'rgba(255, 197, 0, 0.15)';\n    ctx.fillRect(govPanelX, govPanelY, govPanelW, govPanelH);\n    ctx.strokeStyle = 'rgba(255, 197, 0, 0.3)';\n    ctx.strokeRect(govPanelX + 0.5, govPanelY + 0.5, govPanelW - 1, govPanelH - 1);\n\n    // Regierungspanel Titel\n    ctx.fillStyle = 'rgba(255, 197, 0, 0.9)';\n    ctx.font = 'bold 12px sans-serif';\n    ctx.textAlign = 'center';\n    ctx.fillText('Regierung', govPanelX + govPanelW/2, govPanelY + 16);\n\n    // SchlÃ¼sselwÃ¶rter auflisten\n    ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\n    ctx.font = '11px sans-serif';\n    ctx.textAlign = 'left';\n    if (keywords.length > 0) {\n      keywords.forEach((keyword, idx) => {\n        ctx.fillText(`â€¢ ${keyword}`, govPanelX + 8, govPanelY + 36 + idx * 16);\n      });\n    } else {\n      ctx.fillStyle = 'rgba(255, 255, 255, 0.5)';\n      ctx.fillText('Keine aktiven', govPanelX + 8, govPanelY + 36);\n      ctx.fillText('SchlÃ¼sselwÃ¶rter', govPanelX + 8, govPanelY + 52);\n    }\n\n    // Panel fÃ¼r Ã–ffentlichkeits-Unterkategorien (rechts neben Ã–ffentlichkeitsslots)\n    const pubPanelX = 1640 + 256 + 20;\n    const pubPanelY = 580; // Auf HÃ¶he der Ã–ffentlichkeitsslots\n    const pubPanelW = 120;\n    const pubPanelH = 256;\n\n    // Ã–ffentlichkeitspanel Hintergrund\n    ctx.fillStyle = 'rgba(0, 255, 0, 0.15)';\n    ctx.fillRect(pubPanelX, pubPanelY, pubPanelW, pubPanelH);\n    ctx.strokeStyle = 'rgba(0, 255, 0, 0.3)';\n    ctx.strokeRect(pubPanelX + 0.5, pubPanelY + 0.5, pubPanelW - 1, pubPanelH - 1);\n\n    // Ã–ffentlichkeitspanel Titel\n    ctx.fillStyle = 'rgba(0, 255, 0, 0.9)';\n    ctx.font = 'bold 12px sans-serif';\n    ctx.textAlign = 'center';\n    ctx.fillText('Ã–ffentlichkeit', pubPanelX + pubPanelW/2, pubPanelY + 16);\n\n    // Unterkategorien auflisten\n    ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';\n    ctx.font = '11px sans-serif';\n    ctx.textAlign = 'left';\n    if (subcategories.length > 0) {\n      subcategories.forEach((subcategory, idx) => {\n        const displayName = subcategory.length > 12 ? subcategory.substring(0, 10) + '...' : subcategory;\n        ctx.fillText(`â€¢ ${displayName}`, pubPanelX + 8, pubPanelY + 36 + idx * 16);\n      });\n    } else {\n      ctx.fillStyle = 'rgba(255, 255, 255, 0.5)';\n      ctx.fillText('Keine aktiven', pubPanelX + 8, pubPanelY + 36);\n      ctx.fillText('Unterkategorien', pubPanelX + 8, pubPanelY + 52);\n    }\n  }, [getActiveKeywordsAndSubcategories]);\n\n  // Move diagnostics to draw callback to ensure they run after canvas is actually rendered\n  const runDiagnostics = useCallback(() => {\n    try {\n      const handZones = clickZonesRef.current.filter(z => z.data && z.data.type === 'hand_p1');\n      const uiUIDs = handZones.map(z => (z.data.card && (z.data.card.uid ?? z.data.card.id)) ).filter(Boolean);\n      const stateHand = gameState.hands && gameState.hands[1] ? gameState.hands[1] : [];\n      const stateUIDs = stateHand.map((c: any) => c.uid ?? c.id).filter(Boolean);\n\n      const missingInState = uiUIDs.filter((u: any) => !stateUIDs.includes(u));\n      const missingInUI = stateUIDs.filter((u: any) => !uiUIDs.includes(u));\n\n      // Only warn if there are cards in UI that don't exist in state (real error)\n      // Don't warn about missing UI cards due to limited slot capacity\n      if (missingInState.length > 0) {\n        const mismatch = {\n          ts: Date.now(),\n          uiCount: uiUIDs.length,\n          stateCount: stateUIDs.length,\n          uiUIDs,\n          stateUIDs,\n          missingInState,\n          missingInUI,\n          stack: (new Error('mismatch-stack')).stack\n        };\n        (window as any).__politicardDebug = {\n          ...(window as any).__politicardDebug,\n          mismatch: [ ...(window as any).__politicardDebug?.mismatch || [] ].slice(-19).concat([mismatch])\n        };\n        // Clear, then log to console so user can copy/paste trace\n        console.warn('POLITICARD DIAGNOSTIC: hand mismatch detected', mismatch);\n      }\n    } catch (e) {\n      // swallow diagnostic errors to avoid breaking rendering\n      console.error('Diagnostic error', e);\n    }\n  }, [gameState.hands]);\n\n  const draw = useCallback(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n\n    // Detect influence increases and start animations\n    try {\n      const currSnapshot: Record<string, number> = {};\n      const collect = (c: any) => {\n        if (!c) return;\n        if ((c as any).kind !== 'pol') return;\n        const uid = c.uid ?? (c.id != null ? String(c.id) : null);\n        if (!uid) return;\n        currSnapshot[uid] = (c.influence ?? 0) as number;\n      };\n      // board rows\n      (gameState.board[1].aussen || []).forEach(collect);\n      (gameState.board[2].aussen || []).forEach(collect);\n      (gameState.board[1].innen || []).forEach(collect);\n      (gameState.board[2].innen || []).forEach(collect);\n      // permanent slots\n      collect(gameState.permanentSlots[1].government as any);\n      collect(gameState.permanentSlots[2].government as any);\n      collect(gameState.permanentSlots[1].public as any);\n      collect(gameState.permanentSlots[2].public as any);\n\n      const now = performance.now();\n      Object.keys(currSnapshot).forEach(uid => {\n        const curr = currSnapshot[uid] ?? 0;\n        const prev = prevInfluencesRef.current[uid] ?? curr;\n        if (curr > prev) {\n          const delta = curr - prev;\n          const list = influenceAnimRef.current.get(uid) || [];\n          list.push({ start: now, duration: 900, amount: delta });\n          influenceAnimRef.current.set(uid, list);\n        }\n        prevInfluencesRef.current[uid] = curr;\n      });\n    } catch (e) {\n      // ignore\n    }\n\n    // Clear canvas\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    // Clear click zones\n    clickZonesRef.current = [];\n\n    // Background: prefer PNG if configured\n    if (LAYOUT.background?.enabled && LAYOUT.background?.src) {\n      if (backgroundImageRef.current) {\n        ctx.drawImage(backgroundImageRef.current, 0, 0, canvas.width, canvas.height);\n      } else {\n        ctx.fillStyle = '#0c131b';\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\n      }\n    } else {\n      ctx.fillStyle = '#0c131b';\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n    }\n\n    // Apply UI transform (new signature)\n    const { scale, offsetX, offsetY } = getUiTransform(canvas.width, canvas.height);\n    ctx.save();\n    ctx.translate(offsetX, offsetY);\n    ctx.scale(scale, scale);\n\n    // Draw opponent board (top rows) - clickable im Dev Mode\n    // Draw opponent board using new layout system\n    const opponentPublicRects = getPublicRects('opponent');\n    const opponentGovRects = getGovernmentRects('opponent');\n\n    // Draw opponent public slots\n    opponentPublicRects.forEach((s: { x: number; y: number; w: number; h: number }, idx: number) => {\n      const card = gameState.board[2].innen[idx];\n      if (card) {\n        drawCardAt(ctx, card, s.x, s.y, s.w, false, false, 2);\n      }\n      else {\n        // draw placeholder symbol for empty public slot\n        const img = slotSymbolImgsRef.current.get('public');\n        if (img && img.complete) ctx.drawImage(img, s.x, s.y, s.w, s.h);\n      }\n    });\n\n    // Draw opponent government slots\n    opponentGovRects.forEach((s: { x: number; y: number; w: number; h: number }, idx: number) => {\n      const card = gameState.board[2].aussen[idx];\n      if (card) {\n        drawCardAt(ctx, card, s.x, s.y, s.w, false, false, 2);\n      }\n      else {\n        const img = slotSymbolImgsRef.current.get('government');\n        if (img && img.complete) ctx.drawImage(img, s.x, s.y, s.w, s.h);\n      }\n    });\n\n    // Draw opponent permanent slots\n    drawPermanentSlotsP2(ctx);\n\n    // Draw player board (middle rows)\n    // Draw player board using new layout system\n    const playerPublicRects = getPublicRects('player');\n    const playerGovRects = getGovernmentRects('player');\n\n    // Draw player public slots\n    playerPublicRects.forEach((s: { x: number; y: number; w: number; h: number }, idx: number) => {\n      const card = gameState.board[1].innen[idx];\n      if (card) {\n        const clickZone = drawCardAt(ctx, card, s.x, s.y, s.w, false, false, 1);\n        clickZonesRef.current.push({\n          ...clickZone,\n          data: { type: 'row_slot', player: 1, lane: 'innen', index: idx }\n        });\n      } else {\n        // Empty slot click zone and draw public symbol\n        const img = slotSymbolImgsRef.current.get('public');\n        if (img && img.complete) ctx.drawImage(img, s.x, s.y, s.w, s.h);\n        clickZonesRef.current.push({\n          x: s.x, y: s.y, w: s.w, h: s.h,\n          data: { type: 'row_slot', player: 1, lane: 'innen', index: idx }\n        });\n      }\n    });\n\n    // Draw player government slots\n    playerGovRects.forEach((s: { x: number; y: number; w: number; h: number }, idx: number) => {\n      const card = gameState.board[1].aussen[idx];\n      if (card) {\n        const clickZone = drawCardAt(ctx, card, s.x, s.y, s.w, false, false, 1);\n        clickZonesRef.current.push({\n          ...clickZone,\n          data: { type: 'row_slot', player: 1, lane: 'aussen', index: idx }\n        });\n      } else {\n        // Empty slot click zone and draw government symbol\n        const img = slotSymbolImgsRef.current.get('government');\n        if (img && img.complete) ctx.drawImage(img, s.x, s.y, s.w, s.h);\n        clickZonesRef.current.push({\n          x: s.x, y: s.y, w: s.w, h: s.h,\n          data: { type: 'row_slot', player: 1, lane: 'aussen', index: idx }\n        });\n      }\n    });\n\n    // Draw player permanent slots (draw symbols if empty)\n    // permanent government\n    const permGovZone = getZone('slot.permanent.government.player');\n    if (permGovZone) {\n      const card = gameState.permanentSlots[1].government;\n      const [x, y, w, h] = permGovZone.rectPx;\n      if (card) {\n        drawSingleSlot(ctx, 'slot.permanent.government.player', card, 'permanent_government', 1);\n      } else {\n        const img = slotSymbolImgsRef.current.get('government');\n        // Draw pulsating purple gradient fill + outline for permanent initiative slot\n        try {\n          const nowG = performance.now();\n          const pulse = 0.45 + 0.55 * (0.5 + 0.5 * Math.sin(nowG / 360 + 0.3));\n          const rgbPurple = '139,92,246';\n          const grad = ctx.createLinearGradient(x, y, x + w, y + h);\n          grad.addColorStop(0, `rgba(${rgbPurple}, ${0.18 * pulse})`);\n          grad.addColorStop(1, `rgba(${rgbPurple}, ${0.08 * pulse})`);\n          ctx.save();\n          ctx.fillStyle = grad as any;\n          ctx.beginPath();\n          ctx.rect(x + 2, y + 2, w - 4, h - 4);\n          ctx.fill();\n          ctx.lineWidth = 2;\n          ctx.strokeStyle = `rgba(${rgbPurple}, ${0.28 * pulse})`;\n          ctx.strokeRect(x - 0.5, y - 0.5, w + 1, h + 1);\n          ctx.restore();\n        } catch (e) {}\n        if (img && img.complete) ctx.drawImage(img, x, y, w, h);\n      }\n    }\n    // permanent public\n    const permPubZone = getZone('slot.permanent.public.player');\n    if (permPubZone) {\n      const card = gameState.permanentSlots[1].public;\n      const [x2, y2, w2, h2] = permPubZone.rectPx;\n      if (card) {\n        drawSingleSlot(ctx, 'slot.permanent.public.player', card, 'permanent_public', 1);\n      } else {\n        const img = slotSymbolImgsRef.current.get('public');\n        // Draw same purple fill + outline for permanent initiative slot\n        try {\n          const nowG = performance.now();\n          const pulse = 0.45 + 0.55 * (0.5 + 0.5 * Math.sin(nowG / 360 + 0.6));\n          const rgbPurple = '139,92,246';\n          const grad = ctx.createLinearGradient(x2, y2, x2 + w2, y2 + h2);\n          grad.addColorStop(0, `rgba(${rgbPurple}, ${0.18 * pulse})`);\n          grad.addColorStop(1, `rgba(${rgbPurple}, ${0.08 * pulse})`);\n          ctx.save();\n          ctx.fillStyle = grad as any;\n          ctx.beginPath();\n          ctx.rect(x2 + 2, y2 + 2, w2 - 4, h2 - 4);\n          ctx.fill();\n          ctx.lineWidth = 2;\n          ctx.strokeStyle = `rgba(${rgbPurple}, ${0.28 * pulse})`;\n          ctx.strokeRect(x2 - 0.5, y2 - 0.5, w2 + 1, h2 + 1);\n          ctx.restore();\n        } catch (e) {}\n        if (img && img.complete) ctx.drawImage(img, x2, y2, w2, h2);\n      }\n    }\n\n    // Draw instant slots (both players) and placeholder if empty\n    const instantPlayerZone = getZone('slot.instant.player');\n    if (instantPlayerZone) {\n      const card = gameState.board[1].sofort[0];\n      const [x, y, w, h] = instantPlayerZone.rectPx;\n      if (card) drawSingleSlot(ctx, 'slot.instant.player', card, 'instant', 1);\n      else {\n        const img = slotSymbolImgsRef.current.get('sofort');\n        // Draw pulsating complementary gradient fill (purple) under the icon\n        try {\n          const nowG = performance.now();\n          const pulse = 0.45 + 0.55 * (0.5 + 0.5 * Math.sin(nowG / 350));\n          const rgbPurple = '139,92,246';\n          const grad = ctx.createLinearGradient(x, y, x + w, y + h);\n          grad.addColorStop(0, `rgba(${rgbPurple}, ${0.18 * pulse})`);\n          grad.addColorStop(1, `rgba(${rgbPurple}, ${0.08 * pulse})`);\n          ctx.save();\n          ctx.fillStyle = grad as any;\n          // fill slightly inset rounded rect area\n          ctx.beginPath();\n          ctx.rect(x + 2, y + 2, w - 4, h - 4);\n          ctx.fill();\n          // outline\n          ctx.lineWidth = 2;\n          ctx.strokeStyle = `rgba(${rgbPurple}, ${0.28 * pulse})`;\n          ctx.strokeRect(x - 0.5, y - 0.5, w + 1, h + 1);\n          ctx.restore();\n        } catch (e) {}\n        if (img && img.complete) ctx.drawImage(img, x, y, w, h);\n      }\n    }\n\n    // Draw interventions strip (player)\n    // We draw symbol if empty\n    const interventionsZone = getZone('interventions.player');\n    if (interventionsZone) {\n      const [zx, zy, zw, zh] = interventionsZone.rectPx;\n      const card = gameState.traps[1] && gameState.traps[1][0];\n      if (card) drawInterventionsP1(ctx);\n      else {\n        const img = slotSymbolImgsRef.current.get('intervention');\n        // Draw pulsating complementary gradient fill (orange) under the icon\n        try {\n          const nowG = performance.now();\n          const pulse = 0.45 + 0.55 * (0.5 + 0.5 * Math.sin(nowG / 380 + 0.6));\n          const rgbOrange = '251,146,60';\n          const grad = ctx.createLinearGradient(zx, zy, zx + zw, zy + zh);\n          grad.addColorStop(0, `rgba(${rgbOrange}, ${0.18 * pulse})`);\n          grad.addColorStop(1, `rgba(${rgbOrange}, ${0.08 * pulse})`);\n          ctx.save();\n          ctx.fillStyle = grad as any;\n          ctx.beginPath();\n          ctx.rect(zx + 2, zy + 2, zw - 4, zh - 4);\n          ctx.fill();\n          ctx.lineWidth = 2;\n          ctx.strokeStyle = `rgba(${rgbOrange}, ${0.28 * pulse})`;\n          ctx.strokeRect(zx - 0.5, zy - 0.5, zw + 1, zh + 1);\n          ctx.restore();\n        } catch (e) {}\n        if (img && img.complete) ctx.drawImage(img, zx, zy, zw, zh);\n      }\n    }\n\n    // Draw interventions strip (opponent) - nur im Dev Mode\n    if (devMode) {\n      drawInterventionsP2(ctx);\n    }\n\n    // Draw hand (P1)\n    drawHandP1(ctx);\n\n    // ðŸ”§ DEV MODE: Draw hand (P2) - nur im Dev Mode\n    if (devMode) {\n      drawHandP2(ctx);\n    }\n\n    // Draw info panels\n    drawInfoPanels(ctx);\n\n    // --- Overlay pass: draw influence pulse ring and +N labels on top of all cards ---\n    try {\n      const now = performance.now();\n      // iterate over stored anims\n      influenceAnimRef.current.forEach((anims, uid) => {\n        // find card position by scanning clickZones\n        const zone = clickZonesRef.current.find(z => z.data && ((z.data.card && ((z.data.card.uid ?? String(z.data.card.id)) === uid)) || (z.data.card && z.data.card.uid === uid)) );\n        if (!zone) return;\n        const cx = zone.x + zone.w / 2;\n        const cy = zone.y + zone.h / 2;\n        // calculate aggregate pulse for this uid\n        let maxPulse = 0;\n        let totalAmount = 0;\n        const remaining: Array<{ start: number; duration: number; amount: number }> = [];\n        anims.forEach(a => {\n          const p = Math.min(1, Math.max(0, (now - a.start) / a.duration));\n          const pulse = Math.pow(Math.max(0, 1 - p), 2);\n          if (pulse > maxPulse) maxPulse = pulse;\n          if (p < 1) {\n            remaining.push(a);\n            totalAmount += a.amount;\n          }\n        });\n\n        // update list\n        if (remaining.length > 0) influenceAnimRef.current.set(uid, remaining);\n        else influenceAnimRef.current.delete(uid);\n\n        if (maxPulse > 0.001) {\n          // draw a soft ring to the right-bottom of influence number\n          const ringRadius = Math.max(8, zone.w * 0.08) * (1 + maxPulse * 0.6);\n          const ringX = zone.x + zone.w - 28; // near bottom-right where influence text lives\n          const ringY = zone.y + zone.h - 20;\n\n          ctx.save();\n          ctx.beginPath();\n          ctx.strokeStyle = `rgba(46, 204, 113, ${0.9 * maxPulse})`;\n          ctx.lineWidth = Math.max(2, Math.ceil(6 * maxPulse));\n          ctx.arc(ringX, ringY, ringRadius, 0, Math.PI * 2);\n          ctx.stroke();\n          ctx.restore();\n        }\n\n        if (totalAmount > 0) {\n          // floating +N to the right of influence number\n          const labelX = zone.x + zone.w - 12;\n          const labelY = zone.y + zone.h - 32 - (Math.random() * 6); // slight jitter\n          ctx.save();\n          ctx.fillStyle = '#2ecc71';\n          ctx.font = 'bold 16px sans-serif';\n          ctx.textAlign = 'left';\n          ctx.textBaseline = 'middle';\n          ctx.fillText(`+${totalAmount}`, labelX, labelY);\n          ctx.restore();\n        }\n      });\n    } catch (e) {\n      // ignore overlay errors\n    }\n\n    // --- Outline pass: draw a subtle, slightly pulsing 257x257 square around 256x256 slots ---\n    try {\n      const now2 = performance.now();\n      clickZonesRef.current.forEach((z, i) => {\n        if (!z) return;\n        const w = z.w || 0;\n        const h = z.h || 0;\n        // only target 256x256 slot-sized zones (covers the icons)\n        if (Math.abs(w - 256) > 0.1 || Math.abs(h - 256) > 0.1) return;\n        const x = z.x;\n        const y = z.y;\n\n        // Color palette (rgb)\n        const rgbTeal = '20,184,166';\n        const rgbBurg = '127,29,29';\n        const rgbPurple = '139,92,246';\n        const rgbYellow = '250,204,21';\n        const rgbOrange = '251,146,60';\n\n        // Determine slot semantic\n        let slotType: 'government' | 'public' | 'permanent' | 'instant' | 'intervention' | 'default' = 'default';\n        try {\n          const dt = z.data || {};\n          if (dt.slot && typeof dt.slot === 'string') {\n            if (dt.slot.includes('government')) slotType = 'government';\n            else if (dt.slot.includes('public')) slotType = 'public';\n            else if (dt.slot.includes('permanent')) slotType = 'permanent';\n            else if (dt.slot.includes('instant')) slotType = 'instant';\n          }\n          if (dt.type === 'row_slot' && dt.lane === 'aussen') slotType = 'government';\n          if (dt.type === 'row_slot' && dt.lane === 'innen') slotType = 'public';\n          if (dt.type === 'trap_p1' || dt.type === 'trap_p2' || (dt.card && dt.card.kind === 'trap')) slotType = 'intervention';\n          if (dt.type === 'activate_instant' || dt.slot === 'instant') slotType = 'instant';\n          if (dt.slot === 'permanent_government' || dt.slot === 'permanent_public' || dt.slot === 'permanent') slotType = 'permanent';\n        } catch (e) {}\n\n        const pulse = 0.5 + 0.5 * Math.sin(now2 / 350 + i);\n        const alpha = 0.06 + 0.12 * pulse; // subtle alpha\n        const lw = 1 + 2 * pulse; // line width between 1 and 3\n\n        // Create gradient based on slot type\n        let grad: CanvasGradient | null = null;\n        try {\n          grad = ctx.createLinearGradient(x, y, x + w, y + h);\n          if (slotType === 'government') {\n            grad.addColorStop(0, `rgba(${rgbTeal},1)`);\n            grad.addColorStop(1, `rgba(${rgbBurg},1)`);\n          } else if (slotType === 'public') {\n            grad.addColorStop(0, `rgba(${rgbBurg},1)`);\n            grad.addColorStop(1, `rgba(${rgbTeal},1)`);\n          } else if (slotType === 'permanent') {\n            grad.addColorStop(0, `rgba(${rgbPurple},1)`);\n            grad.addColorStop(1, `rgba(${rgbPurple},1)`);\n          } else if (slotType === 'instant') {\n            grad.addColorStop(0, `rgba(${rgbYellow},1)`);\n            grad.addColorStop(1, `rgba(${rgbYellow},1)`);\n          } else if (slotType === 'intervention') {\n            grad.addColorStop(0, `rgba(${rgbOrange},1)`);\n            grad.addColorStop(1, `rgba(${rgbOrange},1)`);\n          } else {\n            grad.addColorStop(0, `rgba(255,255,255,1)`);\n            grad.addColorStop(1, `rgba(255,255,255,1)`);\n          }\n        } catch (e) {\n          grad = null;\n        }\n\n        ctx.save();\n        if (grad) ctx.strokeStyle = grad as any;\n        else ctx.strokeStyle = `rgba(255,255,255,${alpha.toFixed(3)})`;\n        ctx.globalAlpha = alpha;\n        ctx.lineWidth = lw;\n        // draw 257x257 centered so that it encloses the 256 slot\n        ctx.strokeRect(x - 0.5, y - 0.5, w + 1, h + 1);\n        ctx.restore();\n      });\n    } catch (e) {\n      // ignore outline errors\n    }\n\n    ctx.restore();\n\n    // expose zones for debug snapshot\n    (window as any).__politicardDebug = {\n      uiTransform: getUiTransform(canvas.width, canvas.height),\n      canvasSize: { width: canvas.width, height: canvas.height },\n      zones: LAYOUT.zones,\n      clickZones: clickZonesRef.current.slice(0, 1000)\n    };\n\n    // Run diagnostics after canvas is fully rendered\n    runDiagnostics();\n  }, [drawLane, drawHandP1, drawHandP2, drawInterventionsP1, drawInterventionsP2, drawPermanentSlotsP1, drawPermanentSlotsP2, drawInstantSlots, drawInfoPanels, devMode, runDiagnostics]);\n\n  const DRAW_LAYOUT_OVERLAY = false; // force off per new layout system\n\n  // Load slot symbol images once\n  useEffect(() => {\n    const load = (key: string, src: string) => {\n      const img = new Image();\n      img.onload = () => { slotSymbolImgsRef.current.set(key, img); };\n      img.onerror = () => { console.warn('Failed to load slot icon', src); };\n      img.src = src;\n    };\n    load('public', publicSymbolUrl);\n    load('sofort', sofortSymbolUrl);\n    load('dauerhaft', dauerhaftSymbolUrl);\n    load('government', governmentSymbolUrl);\n    load('intervention', interventionSymbolUrl);\n\n    // ensure first draw\n    requestAnimationFrame(draw);\n  }, [draw]);\n\n  // Redraw when game state or selection changes\n  useEffect(() => {\n    requestAnimationFrame(draw);\n  }, [gameState, selectedHandIndex, draw]);\n\n  // Continuous render loop to keep canvas updated without relying on external state refs\n  useEffect(() => {\n    let frame: number;\n    const loop = () => {\n      draw();\n      frame = requestAnimationFrame(loop);\n    };\n    frame = requestAnimationFrame(loop);\n    return () => cancelAnimationFrame(frame);\n  }, [draw]);\n\n  const handleCardClick = useCallback((data: any) => {\n    // Hand-Klick\n    if (data.type === 'hand_p1') {\n      const uid = data.card?.uid ?? data.card?.id;\n      const stateHand = gameState.hands?.[1] || [];\n      const idxInState = stateHand.findIndex((c: any) => (c.uid ?? c.id) === uid);\n      onCardClick(data);\n      return;\n    }\n\n    // Slot-Klick\n    if (data.type === 'row_slot') {\n      const lane: 'public' | 'government' = data.lane;\n      const cap = getLaneCapacity(lane);\n\n      // Hole aktuelle Row-LÃ¤nge aus gameState\n      const rowCards = lane === 'public'\n        ? gameState.board?.[1]?.innen ?? []\n        : gameState.board?.[1]?.aussen ?? [];\n\n      if (rowCards.length >= cap) {\n        // Optional: UI Feedback\n        console.warn(`Row ${lane} is full (${rowCards.length}/${cap})`);\n        return;\n      }\n\n      onCardClick(data);\n      return;\n    }\n\n    // Andere Klicks (empty_slot, board_card, etc.)\n    onCardClick(data);\n  }, [gameState, onCardClick]);\n\n  const handleClick = useCallback((e: React.MouseEvent<HTMLCanvasElement>) => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const rect = canvas.getBoundingClientRect();\n    const { scale, offsetX, offsetY } = getUiTransform(canvas.width, canvas.height);\n    const mx = (e.clientX - rect.left - offsetX) / scale;\n    const my = (e.clientY - rect.top - offsetY) / scale;\n\n    const hit = clickZonesRef.current.find(z => mx >= z.x && mx <= z.x + z.w && my >= z.y && my <= z.y + z.h);\n    if (hit) handleCardClick(hit.data);\n  }, [handleCardClick]);\n\n  const handleMouseMove = useCallback((e: React.MouseEvent<HTMLCanvasElement>) => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const rect = canvas.getBoundingClientRect();\n    const { scale, offsetX, offsetY } = getUiTransform(canvas.width, canvas.height);\n    const mx = (e.clientX - rect.left - offsetX) / scale;\n    const my = (e.clientY - rect.top - offsetY) / scale;\n\n    const hit = clickZonesRef.current.find(z => mx >= z.x && mx <= z.x + z.w && my >= z.y && my <= z.y + z.h);\n    if (hit) {\n      console.log('[hover]', hit.data.type, hit.data.card?.name);\n      onCardHover({ ...hit.data, x: e.clientX, y: e.clientY });\n    } else {\n      onCardHover(null);\n    }\n  }, [onCardHover]);\n\n  const handleWheel = useCallback((e: React.WheelEvent<HTMLCanvasElement>) => {\n    // only enable when player1 has more slots than visible\n    const handLen = (gameState.hands && gameState.hands[1]) ? gameState.hands[1].length : 0;\n    const zone = getZone('hand.player');\n    if (!zone) return;\n    if (handLen <= 5) return; // nothing to scroll\n\n    // Prevent page scrolling when over canvas\n    e.preventDefault();\n\n    // accumulate target offset (invert so wheel down moves cards up)\n    // Each wheel step moves by 48px per delta unit\n    const delta = Math.sign(e.deltaY) * 48;\n    // compute slot height more robustly\n    const slots = computeSlotRects(zone);\n    const slotH = slots && slots.length > 0 ? slots[0].h : zone.rectPx[3] / 5;\n    const visible = 5;\n    const maxOffset = -(Math.max(0, handLen - visible) * slotH);\n    handScrollTargetRef.current = Math.max(Math.min(handScrollTargetRef.current - delta, 0), maxOffset);\n  }, [gameState.hands]);\n\n  const handleTouchStart = useCallback((e: React.TouchEvent<HTMLCanvasElement>) => {\n    if (!e.touches || e.touches.length === 0) return;\n    const handLen = (gameState.hands && gameState.hands[1]) ? gameState.hands[1].length : 0;\n    if (handLen <= 5) return;\n    isTouchingRef.current = true;\n    const y = e.touches[0].clientY;\n    touchStartYRef.current = y;\n    lastTouchYRef.current = y;\n    e.preventDefault();\n  }, [gameState.hands]);\n\n  const handleTouchMove = useCallback((e: React.TouchEvent<HTMLCanvasElement>) => {\n    if (!isTouchingRef.current) return;\n    if (!e.touches || e.touches.length === 0) return;\n    const y = e.touches[0].clientY;\n    const last = lastTouchYRef.current ?? y;\n    const dy = y - last; // positive when moving down\n    lastTouchYRef.current = y;\n\n    // invert so dragging up moves cards up\n    const delta = -dy;\n    const handLen = (gameState.hands && gameState.hands[1]) ? gameState.hands[1].length : 0;\n    const zone = getZone('hand.player');\n    if (!zone) return;\n    const slots = computeSlotRects(zone);\n    const slotH = slots && slots.length > 0 ? slots[0].h : zone.rectPx[3] / 5;\n    const visible = 5;\n    const maxOffset = -(Math.max(0, handLen - visible) * slotH);\n    handScrollTargetRef.current = Math.max(Math.min(handScrollTargetRef.current + delta, 0), maxOffset);\n    e.preventDefault();\n  }, [gameState.hands]);\n\n  const handleTouchEnd = useCallback((e: React.TouchEvent<HTMLCanvasElement>) => {\n    isTouchingRef.current = false;\n    touchStartYRef.current = null;\n    lastTouchYRef.current = null;\n  }, []);\n\n  return (\n    <canvas\n      ref={canvasRef}\n      width={1920}\n      height={1080}\n      style={{\n        display: 'block',\n        width: '100%',\n        height: '100%',\n        imageRendering: 'auto',\n      }}\n      onClick={handleClick}\n      onMouseMove={handleMouseMove}\n      onWheel={handleWheel}\n      onTouchStart={handleTouchStart}\n      onTouchMove={handleTouchMove}\n      onTouchEnd={handleTouchEnd}\n    />\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}