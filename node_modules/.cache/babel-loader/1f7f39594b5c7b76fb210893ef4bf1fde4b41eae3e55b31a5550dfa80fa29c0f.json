{"ast":null,"code":"import { sumRow, getCardActionPointCost } from '../utils/gameUtils';\n// Basic AI player module with three difficulty presets.\n// takeTurn applies a state update via setGameState(prev => newState).\nexport function takeTurn(setGameState, difficulty, log) {\n  setGameState(prev => {\n    var _prev$aiEnabled$, _prev$aiEnabled;\n    const aiEnabled = (_prev$aiEnabled$ = (_prev$aiEnabled = prev.aiEnabled) === null || _prev$aiEnabled === void 0 ? void 0 : _prev$aiEnabled[2]) !== null && _prev$aiEnabled$ !== void 0 ? _prev$aiEnabled$ : false;\n    if (!aiEnabled || prev.current !== 2) return prev;\n    const hand = prev.hands[2];\n    const playerBoard = prev.board[1];\n    const aiBoard = prev.board[2];\n    const aiAP = prev.actionPoints[2];\n    log(`🤖 AI(${difficulty}) Analyse: P=${sumRow([...playerBoard.aussen])} vs AI=${sumRow([...aiBoard.aussen])}`);\n    if (aiAP <= 0) {\n      log('🤖 AI passt - keine AP mehr.');\n      return {\n        ...prev,\n        passed: {\n          ...prev.passed,\n          2: true\n        }\n      };\n    }\n\n    // Use the centralized decision helper so tests and takeTurn share logic\n    const action = decideBestAction(prev, 2, difficulty);\n    if (action.type === 'pass') {\n      log('🤖 AI passt - keine guten Aktionen.');\n      return {\n        ...prev,\n        passed: {\n          ...prev.passed,\n          2: true\n        }\n      };\n    }\n\n    // Execute chosen play\n    const playIndex = action.type === 'play' ? action.index : -1;\n    const chosenCard = prev.hands[2][playIndex];\n    if (!chosenCard) {\n      log('🤖 AI Fehler: Ungültiger Kartenindex, passe.');\n      return {\n        ...prev,\n        passed: {\n          ...prev.passed,\n          2: true\n        }\n      };\n    }\n    const apCost = getCardActionPointCost(chosenCard, prev, 2);\n    if (chosenCard.kind === 'pol') {\n      var _action$lane, _influence;\n      const lane = (_action$lane = action.lane) !== null && _action$lane !== void 0 ? _action$lane : chosenCard.tag === 'Staatsoberhaupt' || chosenCard.tag === 'Regierungschef' || chosenCard.tag === 'Diplomat' ? 'aussen' : 'innen';\n      const newP2Hand = [...prev.hands[2]];\n      const [played] = newP2Hand.splice(playIndex, 1);\n      const newP2Lane = [...prev.board[2][lane], played];\n      const newP2Board = {\n        ...prev.board[2],\n        [lane]: newP2Lane\n      };\n      const newBoard = {\n        ...prev.board,\n        2: newP2Board\n      };\n      const newActionPoints = {\n        ...prev.actionPoints,\n        2: prev.actionPoints[2] - apCost\n      };\n      const laneName = lane === 'aussen' ? 'Regierungsreihe' : 'Öffentlichkeitsreihe';\n      const power = (_influence = played.influence) !== null && _influence !== void 0 ? _influence : 0;\n      log(`🤖 AI spielt ${played.name} (${power} Einfluss) nach ${laneName}.`);\n      return {\n        ...prev,\n        hands: {\n          ...prev.hands,\n          2: newP2Hand\n        },\n        board: newBoard,\n        actionPoints: newActionPoints\n      };\n    }\n\n    // spec cards\n    const newP2Hand = [...prev.hands[2]];\n    const [playedSpec] = newP2Hand.splice(playIndex, 1);\n    const newActionPoints = {\n      ...prev.actionPoints,\n      2: prev.actionPoints[2] - apCost\n    };\n    if (playedSpec.type === 'Dauerhaft-Initiative') {\n      const slotType = playedSpec.slot === 'Öffentlichkeit' ? 'public' : 'government';\n      if (slotType === 'government' && !prev.permanentSlots[2].government) {\n        const newPermanentSlots = {\n          ...prev.permanentSlots,\n          2: {\n            ...prev.permanentSlots[2],\n            government: playedSpec\n          }\n        };\n        log(`🤖 AI legt ${playedSpec.name} in Regierung Spezial-Slot.`);\n        return {\n          ...prev,\n          hands: {\n            ...prev.hands,\n            2: newP2Hand\n          },\n          permanentSlots: newPermanentSlots,\n          actionPoints: newActionPoints\n        };\n      } else if (slotType === 'public' && !prev.permanentSlots[2].public) {\n        const newPermanentSlots = {\n          ...prev.permanentSlots,\n          2: {\n            ...prev.permanentSlots[2],\n            public: playedSpec\n          }\n        };\n        log(`🤖 AI legt ${playedSpec.name} in Öffentlichkeit Spezial-Slot.`);\n        return {\n          ...prev,\n          hands: {\n            ...prev.hands,\n            2: newP2Hand\n          },\n          permanentSlots: newPermanentSlots,\n          actionPoints: newActionPoints\n        };\n      }\n    }\n    log(`🤖 AI spielt Spezialkarte ${playedSpec.name}.`);\n    return {\n      ...prev,\n      hands: {\n        ...prev.hands,\n        2: newP2Hand\n      },\n      actionPoints: newActionPoints\n    };\n  });\n}\n\n// Expose a light-weight decision helper for tests\nexport function decideBestAction(state, player, difficulty = 'easy') {\n  // reuse takeTurn logic but without mutating state: produce an action suggestions\n  const hand = state.hands[player];\n  const aiAP = state.actionPoints[player];\n  if (aiAP <= 0) return {\n    type: 'pass'\n  };\n  const candidates = [];\n  hand.forEach((card, idx) => {\n    const apCost = getCardActionPointCost(card, state, player);\n    if (apCost > aiAP) return;\n    let priority = 0;\n    if (card.kind === 'pol') priority = card.influence + 50;else priority = 40;\n    if (difficulty === 'medium') priority += Math.floor(Math.random() * 10) - 5;\n    if (difficulty === 'hard') priority += 10;\n    candidates.push({\n      index: idx,\n      card,\n      priority\n    });\n  });\n  if (candidates.length === 0) return {\n    type: 'pass'\n  };\n  candidates.sort((a, b) => b.priority - a.priority);\n  return {\n    type: 'play',\n    index: candidates[0].index\n  };\n}","map":{"version":3,"names":["sumRow","getCardActionPointCost","takeTurn","setGameState","difficulty","log","prev","_prev$aiEnabled$","_prev$aiEnabled","aiEnabled","current","hand","hands","playerBoard","board","aiBoard","aiAP","actionPoints","aussen","passed","action","decideBestAction","type","playIndex","index","chosenCard","apCost","kind","_action$lane","_influence","lane","tag","newP2Hand","played","splice","newP2Lane","newP2Board","newBoard","newActionPoints","laneName","power","influence","name","playedSpec","slotType","slot","permanentSlots","government","newPermanentSlots","public","state","player","candidates","forEach","card","idx","priority","Math","floor","random","push","length","sort","a","b"],"sources":["C:/Users/skank/Videos/Cards/Milchcards/src/ai/aiPlayer.ts"],"sourcesContent":["import { GameState, Card, Player } from '../types/game';\r\nimport { sumRow, getCardActionPointCost } from '../utils/gameUtils';\r\n\r\nexport type Difficulty = 'easy' | 'medium' | 'hard';\r\n\r\nexport type AIAction =\r\n  | { type: 'pass' }\r\n  | { type: 'play'; index: number; lane?: 'innen' | 'aussen' };\r\n\r\n// Basic AI player module with three difficulty presets.\r\n// takeTurn applies a state update via setGameState(prev => newState).\r\nexport function takeTurn(\r\n  setGameState: React.Dispatch<React.SetStateAction<GameState>>,\r\n  difficulty: Difficulty,\r\n  log: (msg: string) => void\r\n) {\r\n  setGameState(prev => {\r\n    const aiEnabled = prev.aiEnabled?.[2] ?? false;\r\n    if (!aiEnabled || prev.current !== 2) return prev;\r\n\r\n    const hand = prev.hands[2];\r\n    const playerBoard = prev.board[1];\r\n    const aiBoard = prev.board[2];\r\n    const aiAP = prev.actionPoints[2];\r\n\r\n    log(`🤖 AI(${difficulty}) Analyse: P=${sumRow([...playerBoard.aussen])} vs AI=${sumRow([...aiBoard.aussen])}`);\r\n\r\n    if (aiAP <= 0) {\r\n      log('🤖 AI passt - keine AP mehr.');\r\n      return { ...prev, passed: { ...prev.passed, 2: true } };\r\n    }\r\n\r\n    // Use the centralized decision helper so tests and takeTurn share logic\r\n    const action = decideBestAction(prev, 2, difficulty);\r\n    if (action.type === 'pass') {\r\n      log('🤖 AI passt - keine guten Aktionen.');\r\n      return { ...prev, passed: { ...prev.passed, 2: true } };\r\n    }\r\n\r\n    // Execute chosen play\r\n    const playIndex = action.type === 'play' ? action.index : -1;\r\n    const chosenCard = prev.hands[2][playIndex];\r\n    if (!chosenCard) {\r\n      log('🤖 AI Fehler: Ungültiger Kartenindex, passe.');\r\n      return { ...prev, passed: { ...prev.passed, 2: true } };\r\n    }\r\n\r\n    const apCost = getCardActionPointCost(chosenCard, prev, 2);\r\n\r\n    if (chosenCard.kind === 'pol') {\r\n      const lane = action.lane ?? ((chosenCard as any).tag === 'Staatsoberhaupt' || (chosenCard as any).tag === 'Regierungschef' || (chosenCard as any).tag === 'Diplomat' ? 'aussen' : 'innen');\r\n      const newP2Hand = [...prev.hands[2]];\r\n      const [played] = newP2Hand.splice(playIndex, 1);\r\n      const newP2Lane = [...prev.board[2][lane], played];\r\n      const newP2Board = { ...prev.board[2], [lane]: newP2Lane };\r\n      const newBoard = { ...prev.board, 2: newP2Board };\r\n      const newActionPoints = { ...prev.actionPoints, 2: prev.actionPoints[2] - apCost };\r\n\r\n      const laneName = lane === 'aussen' ? 'Regierungsreihe' : 'Öffentlichkeitsreihe';\r\n      const power = (played as any).influence ?? 0;\r\n      log(`🤖 AI spielt ${played.name} (${power} Einfluss) nach ${laneName}.`);\r\n\r\n      return {\r\n        ...prev,\r\n        hands: { ...prev.hands, 2: newP2Hand },\r\n        board: newBoard,\r\n        actionPoints: newActionPoints\r\n      };\r\n    }\r\n\r\n    // spec cards\r\n    const newP2Hand = [...prev.hands[2]];\r\n    const [playedSpec] = newP2Hand.splice(playIndex, 1);\r\n    const newActionPoints = { ...prev.actionPoints, 2: prev.actionPoints[2] - apCost };\r\n\r\n    if ((playedSpec as any).type === 'Dauerhaft-Initiative') {\r\n      const slotType = (playedSpec as any).slot === 'Öffentlichkeit' ? 'public' : 'government';\r\n      if (slotType === 'government' && !prev.permanentSlots[2].government) {\r\n        const newPermanentSlots = { ...prev.permanentSlots, 2: { ...prev.permanentSlots[2], government: playedSpec } };\r\n        log(`🤖 AI legt ${playedSpec.name} in Regierung Spezial-Slot.`);\r\n        return { ...prev, hands: { ...prev.hands, 2: newP2Hand }, permanentSlots: newPermanentSlots, actionPoints: newActionPoints };\r\n      } else if (slotType === 'public' && !prev.permanentSlots[2].public) {\r\n        const newPermanentSlots = { ...prev.permanentSlots, 2: { ...prev.permanentSlots[2], public: playedSpec } };\r\n        log(`🤖 AI legt ${playedSpec.name} in Öffentlichkeit Spezial-Slot.`);\r\n        return { ...prev, hands: { ...prev.hands, 2: newP2Hand }, permanentSlots: newPermanentSlots, actionPoints: newActionPoints };\r\n      }\r\n    }\r\n\r\n    log(`🤖 AI spielt Spezialkarte ${playedSpec.name}.`);\r\n    return { ...prev, hands: { ...prev.hands, 2: newP2Hand }, actionPoints: newActionPoints };\r\n  });\r\n}\r\n\r\n// Expose a light-weight decision helper for tests\r\nexport function decideBestAction(state: GameState, player: Player, difficulty: Difficulty = 'easy'): AIAction {\r\n  // reuse takeTurn logic but without mutating state: produce an action suggestions\r\n  const hand = state.hands[player];\r\n  const aiAP = state.actionPoints[player];\r\n  if (aiAP <= 0) return { type: 'pass' };\r\n\r\n  const candidates: Array<{ index: number; card: Card; priority: number }> = [];\r\n  hand.forEach((card, idx) => {\r\n    const apCost = getCardActionPointCost(card, state, player);\r\n    if (apCost > aiAP) return;\r\n    let priority = 0;\r\n    if (card.kind === 'pol') priority = (card as any).influence + 50;\r\n    else priority = 40;\r\n    if (difficulty === 'medium') priority += Math.floor(Math.random() * 10) - 5;\r\n    if (difficulty === 'hard') priority += 10;\r\n    candidates.push({ index: idx, card, priority });\r\n  });\r\n  if (candidates.length === 0) return { type: 'pass' };\r\n  candidates.sort((a, b) => b.priority - a.priority);\r\n  return { type: 'play', index: candidates[0].index };\r\n}\r\n\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}