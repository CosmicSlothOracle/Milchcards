{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\skank\\\\Videos\\\\Cards\\\\Milchcards\\\\src\\\\ui\\\\withIcons.tsx\";\nimport React from 'react';\nimport { Icon } from './Icon';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst DICT = [{\n  re: /\\bGovernment\\b/gi,\n  icon: 'government-row'\n}, {\n  re: /\\bPublic\\b/gi,\n  icon: 'public-row'\n}, {\n  re: /\\bInitiative(s)?\\b/gi,\n  icon: 'initiative'\n}, {\n  re: /\\bIntervention(s)?|Trap(s)?\\b/gi,\n  icon: 'intervention-trap'\n}, {\n  re: /\\bAP\\b/gi,\n  icon: 'ap'\n}, {\n  re: /\\bInfluence\\b/gi,\n  icon: 'influence'\n}, {\n  re: /\\bRound(s)?\\b/gi,\n  icon: 'round-turn'\n}, {\n  re: /\\bBuff\\b/gi,\n  icon: 'buff-strength'\n}, {\n  re: /\\bDraw\\b/gi,\n  icon: 'draw-cards'\n}, {\n  re: /\\bDiscard\\b/gi,\n  icon: 'discard-cards'\n}, {\n  re: /\\bReturn to hand\\b/gi,\n  icon: 'return-to-hand'\n}, {\n  re: /\\bDeactivate\\b/gi,\n  icon: 'deactivate-card'\n}, {\n  re: /\\bCancel\\b/gi,\n  icon: 'cancel-card'\n}, {\n  re: /\\bShield\\b/gi,\n  icon: 'grant-shield'\n}, {\n  re: /\\bAura\\b/gi,\n  icon: 'aura-ongoing'\n}, {\n  re: /\\bScience\\b/gi,\n  icon: 'aura-science'\n}, {\n  re: /\\bHealth\\b/gi,\n  icon: 'aura-health'\n}, {\n  re: /\\bMilitary\\b/gi,\n  icon: 'aura-military-penalty'\n}, {\n  re: /\\bRegister Trap\\b/gi,\n  icon: 'register-trap'\n}, {\n  re: /\\bInitiative Activated\\b/gi,\n  icon: 'initiative-activated'\n}, {\n  re: /\\bStart of turn\\b/gi,\n  icon: 'start-of-turn'\n}, {\n  re: /\\bCopy\\b/gi,\n  icon: 'copy-log'\n}, {\n  re: /\\bClear\\b/gi,\n  icon: 'clear-log'\n}, {\n  re: /\\bSearch\\b/gi,\n  icon: 'search'\n}, {\n  re: /\\bBudget\\b/gi,\n  icon: 'budget-money'\n}, {\n  re: /\\bLog\\b/gi,\n  icon: 'game-log'\n}];\nexport function withIcons(text, size = 14) {\n  // Ersetzt bekannte Begriffe durch [Icon + Text]-Spans\n  const parts = [text];\n  DICT.forEach(({\n    re,\n    icon\n  }) => {\n    for (let i = 0; i < parts.length; i++) {\n      const chunk = parts[i];\n      if (typeof chunk !== 'string') continue;\n      const segs = chunk.split(re);\n      if (segs.length === 1) continue;\n      const matches = chunk.match(re) || [];\n      const rebuilt = [];\n      segs.forEach((s, idx) => {\n        rebuilt.push(s);\n        if (idx < matches.length) {\n          rebuilt.push(/*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              display: 'inline-flex',\n              alignItems: 'center',\n              gap: 4\n            },\n            children: [/*#__PURE__*/_jsxDEV(Icon, {\n              name: icon,\n              size: size\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 49,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: matches[idx]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 50,\n              columnNumber: 15\n            }, this)]\n          }, `${icon}-${i}-${idx}`, true, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 13\n          }, this));\n        }\n      });\n      parts.splice(i, 1, ...rebuilt);\n      i += rebuilt.length - 1;\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: parts\n  }, void 0, false);\n}","map":{"version":3,"names":["React","Icon","jsxDEV","_jsxDEV","Fragment","_Fragment","DICT","re","icon","withIcons","text","size","parts","forEach","i","length","chunk","segs","split","matches","match","rebuilt","s","idx","push","style","display","alignItems","gap","children","name","fileName","_jsxFileName","lineNumber","columnNumber","splice"],"sources":["C:/Users/skank/Videos/Cards/Milchcards/src/ui/withIcons.tsx"],"sourcesContent":["import React from 'react';\r\nimport { Icon, IconName } from './Icon';\r\n\r\nconst DICT: Array<{ re: RegExp; icon: IconName; label?: string }> = [\r\n  { re: /\\bGovernment\\b/gi, icon: 'government-row' },\r\n  { re: /\\bPublic\\b/gi, icon: 'public-row' },\r\n  { re: /\\bInitiative(s)?\\b/gi, icon: 'initiative' },\r\n  { re: /\\bIntervention(s)?|Trap(s)?\\b/gi, icon: 'intervention-trap' },\r\n  { re: /\\bAP\\b/gi, icon: 'ap' },\r\n  { re: /\\bInfluence\\b/gi, icon: 'influence' },\r\n  { re: /\\bRound(s)?\\b/gi, icon: 'round-turn' },\r\n  { re: /\\bBuff\\b/gi, icon: 'buff-strength' },\r\n  { re: /\\bDraw\\b/gi, icon: 'draw-cards' },\r\n  { re: /\\bDiscard\\b/gi, icon: 'discard-cards' },\r\n  { re: /\\bReturn to hand\\b/gi, icon: 'return-to-hand' },\r\n  { re: /\\bDeactivate\\b/gi, icon: 'deactivate-card' },\r\n  { re: /\\bCancel\\b/gi, icon: 'cancel-card' },\r\n  { re: /\\bShield\\b/gi, icon: 'grant-shield' },\r\n  { re: /\\bAura\\b/gi, icon: 'aura-ongoing' },\r\n  { re: /\\bScience\\b/gi, icon: 'aura-science' },\r\n  { re: /\\bHealth\\b/gi, icon: 'aura-health' },\r\n  { re: /\\bMilitary\\b/gi, icon: 'aura-military-penalty' },\r\n  { re: /\\bRegister Trap\\b/gi, icon: 'register-trap' },\r\n  { re: /\\bInitiative Activated\\b/gi, icon: 'initiative-activated' },\r\n  { re: /\\bStart of turn\\b/gi, icon: 'start-of-turn' },\r\n  { re: /\\bCopy\\b/gi, icon: 'copy-log' },\r\n  { re: /\\bClear\\b/gi, icon: 'clear-log' },\r\n  { re: /\\bSearch\\b/gi, icon: 'search' },\r\n  { re: /\\bBudget\\b/gi, icon: 'budget-money' },\r\n  { re: /\\bLog\\b/gi, icon: 'game-log' },\r\n];\r\n\r\nexport function withIcons(text: string, size = 14) {\r\n  // Ersetzt bekannte Begriffe durch [Icon + Text]-Spans\r\n  const parts: React.ReactNode[] = [text];\r\n  DICT.forEach(({ re, icon }) => {\r\n    for (let i = 0; i < parts.length; i++) {\r\n      const chunk = parts[i];\r\n      if (typeof chunk !== 'string') continue;\r\n      const segs = chunk.split(re);\r\n      if (segs.length === 1) continue;\r\n      const matches = chunk.match(re) || [];\r\n      const rebuilt: React.ReactNode[] = [];\r\n      segs.forEach((s, idx) => {\r\n        rebuilt.push(s);\r\n        if (idx < matches.length) {\r\n          rebuilt.push(\r\n            <span key={`${icon}-${i}-${idx}`} style={{ display: 'inline-flex', alignItems: 'center', gap: 4 }}>\r\n              <Icon name={icon} size={size} />\r\n              <span>{matches[idx]}</span>\r\n            </span>\r\n          );\r\n        }\r\n      });\r\n      parts.splice(i, 1, ...rebuilt);\r\n      i += rebuilt.length - 1;\r\n    }\r\n  });\r\n  return <>{parts}</>;\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}