{"ast":null,"code":"// initiative_public_suite.ts\n// -------------------------------------------------------------\n// Test-Suite für Initiativen (Sofort + Dauerhaft) & Public Cards\n// - läuft im Browser (ingame) & in Node\n// - exportiert Ergebnisse als JSON/CSV\n// - \"tamper resistant\": Erwartungs-Regeln sind gefreezed & gehasht\n// -------------------------------------------------------------\n// PATH: anpassen, wenn nötig\nimport{EFFECTS,LEGACY_NAME_TO_KEY}from'../effects/registry';import{triggerCardEffects}from'../effects/cards';import{resolveQueue}from'../utils/queue';// Falls ihr startOfTurn Hooks habt:\nimport{startOfTurn as startOfTurnHooks}from'../utils/startOfTurnHooks';// PATH: anpassen – eure Kartendaten (Specials enthält Initiativen & Public)\nimport{CARDS}from'../data/cards';// Types – falls eure Typ-Pfade anders sind, hier anpassen oder \"any\" verwenden.\n// -------------------------------------------------------------\n// 0) Utility – minimaler Fallback-Typ, falls der Import fehlschlägt\n// -------------------------------------------------------------\nfunction deepClone(x){return JSON.parse(JSON.stringify(x));}function other(p){return p===1?2:1;}// -------------------------------------------------------------\n// 1) Auswahl der Testkarten\n// -------------------------------------------------------------\nconst isInitiative=t=>t==='initiative';const isPublic=t=>t==='public';const TEST_CARDS=CARDS.filter(s=>isInitiative(s.type)||isPublic(s.type));// -------------------------------------------------------------\n// 2) \"Tamper resistance\": Erwartungsregeln einfrieren + simple Hash\n//    (kein Kryptoschutz – aber Änderungen werden sichtbar markiert)\n// -------------------------------------------------------------\n// bewusst offen gelassen (SoT/Auren etc.)\n// Karte -> erwartete Effekte (konservativ, nichts „schönt“)\nconst EXPECTED=Object.freeze({// PUBLIC\n'public.elon.draw_ap':[{kind:'DRAWS_AT_LEAST',who:2,count:1},{kind:'AP_DELTA',who:2,delta:+1}],'public.greta_thunberg.first_gov_ap1':[{kind:'AP_DELTA',who:2,delta:+1}],'public.zuck.once_ap_on_activation':[{kind:'PENDING',reason:'SoT-Flag + INITIATIVE_ACTIVATED nötig – hier nur Registrierung erwartet'}],'public.doudna.aura_science':[{kind:'PENDING',reason:'Aura wird via Start-of-Turn-Hook berechnet'}],'public.fauci.aura_health':[{kind:'PENDING',reason:'Aura wird via Start-of-Turn-Hook berechnet'}],'public.chomsky.aura_military_penalty':[{kind:'PENDING',reason:'Aura wird via Start-of-Turn-Hook berechnet'}],'public.aiweiwei.on_activate_draw_ap':[{kind:'PENDING',reason:'Hook triggert bei INITIATIVE_ACTIVATED'}],// INIT – Sofort\n'init.spin_doctor.buff_strongest_gov2':[{kind:'BUFF_STRONGEST_GOV_MIN',who:2,min:2}],'init.shadow_lobbying.buff2':[{kind:'BUFF_STRONGEST_GOV_MIN',who:2,min:2}],'init.digital_campaign.draw2':[{kind:'DRAWS_AT_LEAST',who:2,count:2},{kind:'AP_DELTA',who:2,delta:+1}],'init.surprise_funding.ap2':[{kind:'AP_DELTA',who:2,delta:+2}],'init.grassroots_blitz.draw1_buff1':[{kind:'DRAWS_AT_LEAST',who:2,count:1},{kind:'BUFF_STRONGEST_GOV_MIN',who:2,min:1}],'init.strategic_leaks.opp_discard1':[// Wir testen nur Veränderung Gegnerhand (wenn Resolver implementiert)\n// keine \"Schönung\": falls nicht implementiert, schlägt es fehl.\n],'init.emergency_legislation.grant_shield1':[// Shield wird engine-spezifisch vergeben – explizit nicht geschönt:\n{kind:'PENDING',reason:'GRANT_SHIELD engine-spezifisch – bitte Resolver prüfen'}],'init.ai_narrative.register_media_blackout':[{kind:'PENDING',reason:'Nur Trap-Registrierung – Verhalten in applyTraps geprüft'}],'init.party_offensive.deactivate_gov':[// Engine-spezifisch – wir prüfen MINDESTENS dass ein Deactivation Event wirkt:\n{kind:'PENDING',reason:'DEACTIVATE_STRONGEST_ENEMY_GOV – Ergebnis engine-spezifisch'}],'init.opposition_blockade.lock_initiatives':[{kind:'SET_FLAG_TRUE',path:'effectFlags[1].initiativesLocked'}// Lock beim Gegner (P1)\n],'init.delay_tactics.ap_or_draw':[{kind:'AP_DELTA',who:2,delta:+1}],'init.think_tank.draw1_buff_gov2':[{kind:'DRAWS_AT_LEAST',who:2,count:1},{kind:'BUFF_STRONGEST_GOV_MIN',who:2,min:2}],'init.influencer_campaign.double_public':[{kind:'SET_FLAG_TRUE',path:'effectFlags[2].doublePublicAura'}],'init.system_critical.shield1':[{kind:'PENDING',reason:'GRANT_SHIELD engine-spezifisch'}],'init.symbolic_politics.draw1':[{kind:'DRAWS_AT_LEAST',who:2,count:1}],// INIT – Dauerhaft\n'init.napoleon_komplex.tier1_gov_plus1':[{kind:'PENDING',reason:'Ongoing Aura – wird via SoT berechnet, Slot-Routing muss stimmen'}]});function simpleHash(str){// sehr simpler Hash – reine Manipulationsanzeige\nlet h=0,i=0,len=str.length;while(i<len)h=h*31+str.charCodeAt(i++)|0;return(h>>>0).toString(16);}const EXPECTED_HASH=simpleHash(JSON.stringify(EXPECTED));// -------------------------------------------------------------\n// 3) State-Bau für reproduzierbare Tests\n//    Minimaler, aber kompatibler State (kein Schönreden).\n// -------------------------------------------------------------\nfunction makeBasePolitician(name,influence){return{kind:'pol',name,baseInfluence:influence,influence,tempBuffs:0,tempDebuffs:0,uid:Math.floor(Math.random()*1e9)};}// Stellt sicher, dass es je Seite mind. 1 Regierung gibt, damit BUFF_* Effekte messbar sind\nfunction makeTestState(){const p1Gov=makeBasePolitician('Karl Rove',6);const p2Gov=makeBasePolitician('Olaf Scholz',7);const state={actionPoints:{1:2,2:2},hands:{1:[],2:[]},decks:{1:[],2:[]},discard:[],board:{1:{innen:[],aussen:[p1Gov],sofort:[]},2:{innen:[],aussen:[p2Gov],sofort:[]}},permanentSlots:{1:{government:null,public:null,initiativePermanent:null},2:{government:null,public:null,initiativePermanent:null}},traps:{1:[],2:[]},effectFlags:{1:{markZuckerbergUsed:false},2:{markZuckerbergUsed:false}},_effectQueue:[],log:[]};return state;}// -------------------------------------------------------------\n// 4) Hilfsfunktionen zum Messen\n// -------------------------------------------------------------\nfunction getHandLength(state,p){var _state$hands;return(((_state$hands=state.hands)===null||_state$hands===void 0?void 0:_state$hands[p])||[]).length;}function getAP(state,p){var _state$actionPoints$p,_state$actionPoints;return(_state$actionPoints$p=(_state$actionPoints=state.actionPoints)===null||_state$actionPoints===void 0?void 0:_state$actionPoints[p])!==null&&_state$actionPoints$p!==void 0?_state$actionPoints$p:0;}function getStrongestGov(state,p){var _state$board,_state$board$p;const govs=((_state$board=state.board)===null||_state$board===void 0?void 0:(_state$board$p=_state$board[p])===null||_state$board$p===void 0?void 0:_state$board$p.aussen)||[];if(!govs.length)return null;return govs.reduce((a,b)=>a.influence+(a.tempBuffs||0)-(a.tempDebuffs||0)>=b.influence+(b.tempBuffs||0)-(b.tempDebuffs||0)?a:b);}function readByPath(state,path){// z.B. effectFlags[1].initiativesLocked\nconst parts=path.replace(/\\]/g,'').split(/\\.|\\[/g).filter(Boolean);let cur=state;for(const p of parts){var _cur;cur=(_cur=cur)===null||_cur===void 0?void 0:_cur[p];}return cur;}// Karte (aus Specials) -> (Card) für triggerCardEffect\nfunction toEngineCard(spec){return{name:spec.name,key:spec.key,effectKey:spec.effectKey,// kann undefined sein, dann legacy Mapping\ntype:spec.type// .. Rest uninteressant für reine Effekt-Tests\n};}// -------------------------------------------------------------\n// 5) Einzeltest: führt Effekt aus und vergleicht mit EXPECTED\n// -------------------------------------------------------------\nfunction runSingleTest(spec){var _card$effectKey,_EXPECTED;const state=makeTestState();const P=2;// Wir testen konsistent als Spieler 2 (wie in deinen Logs)\nconst O=1;const card=toEngineCard(spec);// resolve key via card.effectKey or legacy mapping\nconst effectKey=(_card$effectKey=card.effectKey)!==null&&_card$effectKey!==void 0?_card$effectKey:LEGACY_NAME_TO_KEY[card.name];const expectations=(_EXPECTED=EXPECTED[effectKey])!==null&&_EXPECTED!==void 0?_EXPECTED:[];// Pre-Snapshot\nconst pre={apP:getAP(state,P),apO:getAP(state,O),hP:getHandLength(state,P),hO:getHandLength(state,O),sGovP:deepClone(getStrongestGov(state,P)),sGovO:deepClone(getStrongestGov(state,O)),flagsBefore:deepClone(state.effectFlags)};// Trigger\ntry{triggerCardEffects(state,P,card);}catch(e){return{cardName:spec.name,effectKey,type:spec.type,status:'FAIL',details:{error:'triggerCardEffect threw',e:String(e)},expectations};}// Resolve queue\ntry{const q=state._effectQueue||[];resolveQueue(state,q);}catch(e){return{cardName:spec.name,effectKey,type:spec.type,status:'FAIL',details:{error:'resolveQueue threw',e:String(e)},expectations};}// Optional: Start-of-Turn Hooks für Auren testen (nur wenn Dauerhaft/Public Aura)\nif(spec.type==='Dauerhaft-Initiative'||spec.type==='Öffentlichkeitskarte'){try{if(typeof startOfTurnHooks==='function'){startOfTurnHooks(state,P);}}catch(_unused){/* Hooks optional – ignorieren */}}// Post-Snapshot\nconst post={apP:getAP(state,P),apO:getAP(state,O),hP:getHandLength(state,P),hO:getHandLength(state,O),sGovP:deepClone(getStrongestGov(state,P)),sGovO:deepClone(getStrongestGov(state,O)),flagsAfter:deepClone(state.effectFlags)};// Bewertung\nconst evalDetails={checks:[]};let hardFails=0;let pendings=0;if(!effectKey||!EFFECTS[effectKey]&&!LEGACY_NAME_TO_KEY[spec.name]){return{cardName:spec.name,effectKey,type:spec.type,status:'NO_HANDLER',details:{msg:'Kein Effect-Handler gefunden'},expectations};}// generische, nicht-beschönigende Checks\nfor(const exp of expectations){switch(exp.kind){case'AP_DELTA':{const actual=post.apP-pre.apP;const ok=(exp.who===2?actual:post.apO-pre.apO)===exp.delta;evalDetails.checks.push({exp,actualP:actual,actualO:post.apO-pre.apO,ok});if(!ok)hardFails++;break;}case'DRAWS_AT_LEAST':{const actual=exp.who===2?post.hP-pre.hP:post.hO-pre.hO;const ok=actual>=exp.count;evalDetails.checks.push({exp,actual,ok});if(!ok)hardFails++;break;}case'BUFF_STRONGEST_GOV_MIN':{const before=pre.sGovP;const after=post.sGovP;const delta=((after===null||after===void 0?void 0:after.tempBuffs)||0)-((before===null||before===void 0?void 0:before.tempBuffs)||0)-(((after===null||after===void 0?void 0:after.tempDebuffs)||0)-((before===null||before===void 0?void 0:before.tempDebuffs)||0));const ok=(exp.who===2?delta:0)>=exp.min;// wir messen auf P2\nevalDetails.checks.push({exp,delta,ok,before,after});if(!ok)hardFails++;break;}case'SET_FLAG_TRUE':{const val=readByPath(state,exp.path);const ok=Boolean(val);evalDetails.checks.push({exp,value:val,ok});if(!ok)hardFails++;break;}case'PENDING':{pendings++;evalDetails.checks.push({exp,ok:true});break;}}}// Wenn keine EXPECTED-Einträge existieren, bewerten wir neutral (keine Schönung)\nlet status='PASS';if(hardFails>0)status='FAIL';else if(pendings>0&&hardFails===0)status='PENDING';return{cardName:spec.name,effectKey,type:spec.type,status,details:{expectedHash:EXPECTED_HASH,pre,post,eval:evalDetails,note:expectations.length===0?'Keine festen Erwartungen hinterlegt (neutral bewertet)':undefined},expectations};}// -------------------------------------------------------------\n// 6) Gesamtlauf + Export\n// -------------------------------------------------------------\nexport async function runInitiativeAndPublicTests(){// Nur Initiativen & Public – Interventions werden bewusst ausgelassen\nconst toTest=TEST_CARDS.filter(s=>s.type==='public'||isInitiative(s.type));const results=[];for(const spec of toTest){results.push(runSingleTest(spec));}const summary={total:results.length,pass:results.filter(r=>r.status==='PASS').length,fail:results.filter(r=>r.status==='FAIL').length,pending:results.filter(r=>r.status==='PENDING').length,noHandler:results.filter(r=>r.status==='NO_HANDLER').length,expectedHash:EXPECTED_HASH,timestamp:new Date().toISOString()};return{summary,items:results};}// Browser-Export als Download\nexport function downloadJSON(obj){let filename=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'milchcards_test_results.json';const data='data:text/json;charset=utf-8,'+encodeURIComponent(JSON.stringify(obj,null,2));const a=document.createElement('a');a.setAttribute('href',data);a.setAttribute('download',filename);a.click();}// Optional CSV (für schnelle Diff/Sheets)\nexport function toCSV(res){const header=['cardName','effectKey','type','status'].join(',');const rows=res.items.map(i=>[JSON.stringify(i.cardName),JSON.stringify(i.effectKey||''),JSON.stringify(i.type),JSON.stringify(i.status)].join(','));return[header,...rows].join('\\n');}export function downloadCSV(res){let filename=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'milchcards_test_results.csv';const data='data:text/csv;charset=utf-8,'+encodeURIComponent(toCSV(res));const a=document.createElement('a');a.setAttribute('href',data);a.setAttribute('download',filename);a.click();}// -------------------------------------------------------------\n// 7) Ingame-Hook (bequem aus der Konsole starten)\n// -------------------------------------------------------------\nif(typeof window!=='undefined'){window.__MILCH_TESTS__=Object.freeze({run:async()=>{const res=await runInitiativeAndPublicTests();console.table(res.summary);return res;},runAndDownload:async()=>{const res=await runInitiativeAndPublicTests();downloadJSON(res);return res.summary;},runAndDownloadCSV:async()=>{const res=await runInitiativeAndPublicTests();downloadCSV(res);return res.summary;},expectedHash:EXPECTED_HASH});}","map":{"version":3,"names":["EFFECTS","LEGACY_NAME_TO_KEY","triggerCardEffects","resolveQueue","startOfTurn","startOfTurnHooks","CARDS","deepClone","x","JSON","parse","stringify","other","p","isInitiative","t","isPublic","TEST_CARDS","filter","s","type","EXPECTED","Object","freeze","kind","who","count","delta","reason","min","path","simpleHash","str","h","i","len","length","charCodeAt","toString","EXPECTED_HASH","makeBasePolitician","name","influence","baseInfluence","tempBuffs","tempDebuffs","uid","Math","floor","random","makeTestState","p1Gov","p2Gov","state","actionPoints","hands","decks","discard","board","innen","aussen","sofort","permanentSlots","government","public","initiativePermanent","traps","effectFlags","markZuckerbergUsed","_effectQueue","log","getHandLength","_state$hands","getAP","_state$actionPoints$p","_state$actionPoints","getStrongestGov","_state$board","_state$board$p","govs","reduce","a","b","readByPath","parts","replace","split","Boolean","cur","_cur","toEngineCard","spec","key","effectKey","runSingleTest","_card$effectKey","_EXPECTED","P","O","card","expectations","pre","apP","apO","hP","hO","sGovP","sGovO","flagsBefore","e","cardName","status","details","error","String","q","_unused","post","flagsAfter","evalDetails","checks","hardFails","pendings","msg","exp","actual","ok","push","actualP","actualO","before","after","val","value","expectedHash","eval","note","undefined","runInitiativeAndPublicTests","toTest","results","summary","total","pass","r","fail","pending","noHandler","timestamp","Date","toISOString","items","downloadJSON","obj","filename","arguments","data","encodeURIComponent","document","createElement","setAttribute","click","toCSV","res","header","join","rows","map","downloadCSV","window","__MILCH_TESTS__","run","console","table","runAndDownload","runAndDownloadCSV"],"sources":["C:/Users/skank/Videos/Cards/Milchcards/src/__tests__/initiative_public_suite.ts"],"sourcesContent":["// initiative_public_suite.ts\r\n// -------------------------------------------------------------\r\n// Test-Suite für Initiativen (Sofort + Dauerhaft) & Public Cards\r\n// - läuft im Browser (ingame) & in Node\r\n// - exportiert Ergebnisse als JSON/CSV\r\n// - \"tamper resistant\": Erwartungs-Regeln sind gefreezed & gehasht\r\n// -------------------------------------------------------------\r\n\r\n// PATH: anpassen, wenn nötig\r\nimport { EFFECTS, LEGACY_NAME_TO_KEY } from '../effects/registry';\r\nimport { triggerCardEffects } from '../effects/cards';\r\nimport { resolveQueue } from '../utils/queue';\r\n// Falls ihr startOfTurn Hooks habt:\r\nimport { startOfTurn as startOfTurnHooks } from '../utils/startOfTurnHooks';\r\n\r\n// PATH: anpassen – eure Kartendaten (Specials enthält Initiativen & Public)\r\nimport { CARDS } from '../data/cards';\r\n// Types – falls eure Typ-Pfade anders sind, hier anpassen oder \"any\" verwenden.\r\nimport type { GameState, Player, Card } from '../types/game';\r\nimport type { EffectEvent } from '../types/effects';\r\n\r\n// -------------------------------------------------------------\r\n// 0) Utility – minimaler Fallback-Typ, falls der Import fehlschlägt\r\n// -------------------------------------------------------------\r\ntype AnyObj = Record<string, any>;\r\n\r\nfunction deepClone<T>(x: T): T { return JSON.parse(JSON.stringify(x)); }\r\nfunction other(p: Player): Player { return (p === 1 ? 2 : 1) as Player; }\r\n\r\n// -------------------------------------------------------------\r\n// 1) Auswahl der Testkarten\r\n// -------------------------------------------------------------\r\ntype SpecType = 'initiative' | 'public' | 'government' | 'intervention';\r\n\r\nconst isInitiative = (t: string) => t === 'initiative';\r\nconst isPublic = (t: string) => t === 'public';\r\n\r\nconst TEST_CARDS = CARDS.filter((s: any) => isInitiative(s.type as SpecType) || isPublic(s.type as SpecType));\r\n\r\n// -------------------------------------------------------------\r\n// 2) \"Tamper resistance\": Erwartungsregeln einfrieren + simple Hash\r\n//    (kein Kryptoschutz – aber Änderungen werden sichtbar markiert)\r\n// -------------------------------------------------------------\r\ntype Expectation =\r\n  | { kind: 'AP_DELTA'; who: Player; delta: number }\r\n  | { kind: 'DRAWS_AT_LEAST'; who: Player; count: number }\r\n  | { kind: 'BUFF_STRONGEST_GOV_MIN'; who: Player; min: number }\r\n  | { kind: 'SET_FLAG_TRUE'; path: string } // z.B. \"effectFlags[2].initiativesLocked\"\r\n  | { kind: 'PENDING'; reason: string };    // bewusst offen gelassen (SoT/Auren etc.)\r\n\r\n// Karte -> erwartete Effekte (konservativ, nichts „schönt“)\r\nconst EXPECTED: Record<string, Expectation[]> = Object.freeze({\r\n  // PUBLIC\r\n  'public.elon.draw_ap': [\r\n    { kind: 'DRAWS_AT_LEAST', who: 2, count: 1 },\r\n    { kind: 'AP_DELTA', who: 2, delta: +1 },\r\n  ],\r\n  'public.greta_thunberg.first_gov_ap1': [\r\n    { kind: 'AP_DELTA', who: 2, delta: +1 },\r\n  ],\r\n  'public.zuck.once_ap_on_activation': [\r\n    { kind: 'PENDING', reason: 'SoT-Flag + INITIATIVE_ACTIVATED nötig – hier nur Registrierung erwartet' }\r\n  ],\r\n  'public.doudna.aura_science': [\r\n    { kind: 'PENDING', reason: 'Aura wird via Start-of-Turn-Hook berechnet' }\r\n  ],\r\n  'public.fauci.aura_health': [\r\n    { kind: 'PENDING', reason: 'Aura wird via Start-of-Turn-Hook berechnet' }\r\n  ],\r\n  'public.chomsky.aura_military_penalty': [\r\n    { kind: 'PENDING', reason: 'Aura wird via Start-of-Turn-Hook berechnet' }\r\n  ],\r\n  'public.aiweiwei.on_activate_draw_ap': [\r\n    { kind: 'PENDING', reason: 'Hook triggert bei INITIATIVE_ACTIVATED' }\r\n  ],\r\n\r\n  // INIT – Sofort\r\n  'init.spin_doctor.buff_strongest_gov2': [\r\n    { kind: 'BUFF_STRONGEST_GOV_MIN', who: 2, min: 2 },\r\n  ],\r\n  'init.shadow_lobbying.buff2': [\r\n    { kind: 'BUFF_STRONGEST_GOV_MIN', who: 2, min: 2 },\r\n  ],\r\n  'init.digital_campaign.draw2': [\r\n    { kind: 'DRAWS_AT_LEAST', who: 2, count: 2 },\r\n    { kind: 'AP_DELTA', who: 2, delta: +1 },\r\n  ],\r\n  'init.surprise_funding.ap2': [\r\n    { kind: 'AP_DELTA', who: 2, delta: +2 },\r\n  ],\r\n  'init.grassroots_blitz.draw1_buff1': [\r\n    { kind: 'DRAWS_AT_LEAST', who: 2, count: 1 },\r\n    { kind: 'BUFF_STRONGEST_GOV_MIN', who: 2, min: 1 },\r\n  ],\r\n  'init.strategic_leaks.opp_discard1': [\r\n    // Wir testen nur Veränderung Gegnerhand (wenn Resolver implementiert)\r\n    // keine \"Schönung\": falls nicht implementiert, schlägt es fehl.\r\n  ],\r\n  'init.emergency_legislation.grant_shield1': [\r\n    // Shield wird engine-spezifisch vergeben – explizit nicht geschönt:\r\n    { kind: 'PENDING', reason: 'GRANT_SHIELD engine-spezifisch – bitte Resolver prüfen' }\r\n  ],\r\n  'init.ai_narrative.register_media_blackout': [\r\n    { kind: 'PENDING', reason: 'Nur Trap-Registrierung – Verhalten in applyTraps geprüft' }\r\n  ],\r\n  'init.party_offensive.deactivate_gov': [\r\n    // Engine-spezifisch – wir prüfen MINDESTENS dass ein Deactivation Event wirkt:\r\n    { kind: 'PENDING', reason: 'DEACTIVATE_STRONGEST_ENEMY_GOV – Ergebnis engine-spezifisch' }\r\n  ],\r\n  'init.opposition_blockade.lock_initiatives': [\r\n    { kind: 'SET_FLAG_TRUE', path: 'effectFlags[1].initiativesLocked' }, // Lock beim Gegner (P1)\r\n  ],\r\n  'init.delay_tactics.ap_or_draw': [\r\n    { kind: 'AP_DELTA', who: 2, delta: +1 },\r\n  ],\r\n  'init.think_tank.draw1_buff_gov2': [\r\n    { kind: 'DRAWS_AT_LEAST', who: 2, count: 1 },\r\n    { kind: 'BUFF_STRONGEST_GOV_MIN', who: 2, min: 2 },\r\n  ],\r\n  'init.influencer_campaign.double_public': [\r\n    { kind: 'SET_FLAG_TRUE', path: 'effectFlags[2].doublePublicAura' },\r\n  ],\r\n  'init.system_critical.shield1': [\r\n    { kind: 'PENDING', reason: 'GRANT_SHIELD engine-spezifisch' }\r\n  ],\r\n  'init.symbolic_politics.draw1': [\r\n    { kind: 'DRAWS_AT_LEAST', who: 2, count: 1 },\r\n  ],\r\n\r\n  // INIT – Dauerhaft\r\n  'init.napoleon_komplex.tier1_gov_plus1': [\r\n    { kind: 'PENDING', reason: 'Ongoing Aura – wird via SoT berechnet, Slot-Routing muss stimmen' }\r\n  ],\r\n} as const);\r\n\r\nfunction simpleHash(str: string): string {\r\n  // sehr simpler Hash – reine Manipulationsanzeige\r\n  let h = 0, i = 0, len = str.length;\r\n  while (i < len) h = (h * 31 + str.charCodeAt(i++)) | 0;\r\n  return (h >>> 0).toString(16);\r\n}\r\nconst EXPECTED_HASH = simpleHash(JSON.stringify(EXPECTED));\r\n\r\n// -------------------------------------------------------------\r\n// 3) State-Bau für reproduzierbare Tests\r\n//    Minimaler, aber kompatibler State (kein Schönreden).\r\n// -------------------------------------------------------------\r\nfunction makeBasePolitician(name: string, influence: number) {\r\n  return {\r\n    kind: 'pol',\r\n    name,\r\n    baseInfluence: influence,\r\n    influence,\r\n    tempBuffs: 0,\r\n    tempDebuffs: 0,\r\n    uid: Math.floor(Math.random() * 1e9),\r\n  };\r\n}\r\n\r\n// Stellt sicher, dass es je Seite mind. 1 Regierung gibt, damit BUFF_* Effekte messbar sind\r\nfunction makeTestState(): GameState {\r\n  const p1Gov = makeBasePolitician('Karl Rove', 6);\r\n  const p2Gov = makeBasePolitician('Olaf Scholz', 7);\r\n\r\n  const state: AnyObj = {\r\n    actionPoints: { 1: 2, 2: 2 },\r\n    hands: { 1: [], 2: [] },\r\n    decks: { 1: [], 2: [] },\r\n    discard: [],\r\n    board: {\r\n      1: { innen: [], aussen: [p1Gov], sofort: [] },\r\n      2: { innen: [], aussen: [p2Gov], sofort: [] },\r\n    },\r\n    permanentSlots: {\r\n      1: { government: null, public: null, initiativePermanent: null },\r\n      2: { government: null, public: null, initiativePermanent: null }\r\n    },\r\n    traps: { 1: [], 2: [] },\r\n    effectFlags: {\r\n      1: { markZuckerbergUsed: false },\r\n      2: { markZuckerbergUsed: false },\r\n    },\r\n    _effectQueue: [] as EffectEvent[],\r\n    log: [] as string[],\r\n  };\r\n\r\n  return state as GameState;\r\n}\r\n\r\n// -------------------------------------------------------------\r\n// 4) Hilfsfunktionen zum Messen\r\n// -------------------------------------------------------------\r\nfunction getHandLength(state: AnyObj, p: Player) {\r\n  return (state.hands?.[p] || []).length;\r\n}\r\nfunction getAP(state: AnyObj, p: Player) {\r\n  return state.actionPoints?.[p] ?? 0;\r\n}\r\nfunction getStrongestGov(state: AnyObj, p: Player) {\r\n  const govs = state.board?.[p]?.aussen || [];\r\n  if (!govs.length) return null;\r\n  return govs.reduce((a: AnyObj, b: AnyObj) => (a.influence + (a.tempBuffs||0) - (a.tempDebuffs||0)) >= (b.influence + (b.tempBuffs||0) - (b.tempDebuffs||0)) ? a : b);\r\n}\r\nfunction readByPath(state: AnyObj, path: string) {\r\n  // z.B. effectFlags[1].initiativesLocked\r\n  const parts = path.replace(/\\]/g, '').split(/\\.|\\[/g).filter(Boolean);\r\n  let cur: any = state;\r\n  for (const p of parts) {\r\n    cur = cur?.[p];\r\n  }\r\n  return cur;\r\n}\r\n\r\n// Karte (aus Specials) -> (Card) für triggerCardEffect\r\nfunction toEngineCard(spec: AnyObj): Card {\r\n  return {\r\n    name: spec.name,\r\n    key: spec.key,\r\n    effectKey: spec.effectKey, // kann undefined sein, dann legacy Mapping\r\n    type: spec.type,\r\n    // .. Rest uninteressant für reine Effekt-Tests\r\n  } as unknown as Card;\r\n}\r\n\r\n// -------------------------------------------------------------\r\n// 5) Einzeltest: führt Effekt aus und vergleicht mit EXPECTED\r\n// -------------------------------------------------------------\r\ntype TestResult = {\r\n  cardName: string;\r\n  effectKey?: string;\r\n  type: string;\r\n  status: 'PASS' | 'FAIL' | 'PENDING' | 'NO_HANDLER';\r\n  details: AnyObj;\r\n  expectations: Expectation[];\r\n};\r\n\r\nfunction runSingleTest(spec: AnyObj): TestResult {\r\n  const state = makeTestState();\r\n  const P: Player = 2;       // Wir testen konsistent als Spieler 2 (wie in deinen Logs)\r\n  const O: Player = 1;\r\n\r\n  const card = toEngineCard(spec);\r\n\r\n  // resolve key via card.effectKey or legacy mapping\r\n  const effectKey = card.effectKey ?? LEGACY_NAME_TO_KEY[card.name];\r\n  const expectations = EXPECTED[effectKey as keyof typeof EXPECTED] ?? [];\r\n\r\n  // Pre-Snapshot\r\n  const pre = {\r\n    apP: getAP(state, P),\r\n    apO: getAP(state, O),\r\n    hP: getHandLength(state, P),\r\n    hO: getHandLength(state, O),\r\n    sGovP: deepClone(getStrongestGov(state, P)),\r\n    sGovO: deepClone(getStrongestGov(state, O)),\r\n    flagsBefore: deepClone(state.effectFlags),\r\n  };\r\n\r\n  // Trigger\r\n  try {\r\n    triggerCardEffects(state as GameState, P, card);\r\n  } catch (e) {\r\n    return {\r\n      cardName: spec.name,\r\n      effectKey,\r\n      type: spec.type,\r\n      status: 'FAIL',\r\n      details: { error: 'triggerCardEffect threw', e: String(e) },\r\n      expectations,\r\n    };\r\n  }\r\n\r\n  // Resolve queue\r\n  try {\r\n    const q = (state as AnyObj)._effectQueue || [];\r\n    resolveQueue(state as GameState, q);\r\n  } catch (e) {\r\n    return {\r\n      cardName: spec.name,\r\n      effectKey,\r\n      type: spec.type,\r\n      status: 'FAIL',\r\n      details: { error: 'resolveQueue threw', e: String(e) },\r\n      expectations,\r\n    };\r\n  }\r\n\r\n  // Optional: Start-of-Turn Hooks für Auren testen (nur wenn Dauerhaft/Public Aura)\r\n  if (spec.type === 'Dauerhaft-Initiative' || spec.type === 'Öffentlichkeitskarte') {\r\n    try {\r\n      if (typeof startOfTurnHooks === 'function') {\r\n        startOfTurnHooks(state as GameState, P);\r\n      }\r\n    } catch { /* Hooks optional – ignorieren */ }\r\n  }\r\n\r\n  // Post-Snapshot\r\n  const post = {\r\n    apP: getAP(state, P),\r\n    apO: getAP(state, O),\r\n    hP: getHandLength(state, P),\r\n    hO: getHandLength(state, O),\r\n    sGovP: deepClone(getStrongestGov(state, P)),\r\n    sGovO: deepClone(getStrongestGov(state, O)),\r\n    flagsAfter: deepClone(state.effectFlags),\r\n  };\r\n\r\n  // Bewertung\r\n  const evalDetails: AnyObj = { checks: [] };\r\n  let hardFails = 0;\r\n  let pendings = 0;\r\n\r\n  if (!effectKey || (!EFFECTS[effectKey] && !LEGACY_NAME_TO_KEY[spec.name])) {\r\n    return {\r\n      cardName: spec.name,\r\n      effectKey,\r\n      type: spec.type,\r\n      status: 'NO_HANDLER',\r\n      details: { msg: 'Kein Effect-Handler gefunden' },\r\n      expectations,\r\n    };\r\n  }\r\n\r\n  // generische, nicht-beschönigende Checks\r\n  for (const exp of expectations) {\r\n    switch (exp.kind) {\r\n      case 'AP_DELTA': {\r\n        const actual = post.apP - pre.apP;\r\n        const ok = (exp.who === 2 ? actual : (post.apO - pre.apO)) === exp.delta;\r\n        evalDetails.checks.push({ exp, actualP: actual, actualO: (post.apO - pre.apO), ok });\r\n        if (!ok) hardFails++;\r\n        break;\r\n      }\r\n      case 'DRAWS_AT_LEAST': {\r\n        const actual = (exp.who === 2 ? (post.hP - pre.hP) : (post.hO - pre.hO));\r\n        const ok = actual >= exp.count;\r\n        evalDetails.checks.push({ exp, actual, ok });\r\n        if (!ok) hardFails++;\r\n        break;\r\n      }\r\n      case 'BUFF_STRONGEST_GOV_MIN': {\r\n        const before = pre.sGovP;\r\n        const after  = post.sGovP;\r\n        const delta = ((after?.tempBuffs || 0) - (before?.tempBuffs || 0)) - ((after?.tempDebuffs || 0) - (before?.tempDebuffs || 0));\r\n        const ok = (exp.who === 2 ? delta : 0) >= exp.min; // wir messen auf P2\r\n        evalDetails.checks.push({ exp, delta, ok, before, after });\r\n        if (!ok) hardFails++;\r\n        break;\r\n      }\r\n      case 'SET_FLAG_TRUE': {\r\n        const val = readByPath(state as AnyObj, exp.path);\r\n        const ok = Boolean(val);\r\n        evalDetails.checks.push({ exp, value: val, ok });\r\n        if (!ok) hardFails++;\r\n        break;\r\n      }\r\n      case 'PENDING': {\r\n        pendings++;\r\n        evalDetails.checks.push({ exp, ok: true });\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  // Wenn keine EXPECTED-Einträge existieren, bewerten wir neutral (keine Schönung)\r\n  let status: TestResult['status'] = 'PASS';\r\n  if (hardFails > 0) status = 'FAIL';\r\n  else if (pendings > 0 && hardFails === 0) status = 'PENDING';\r\n\r\n  return {\r\n    cardName: spec.name,\r\n    effectKey,\r\n    type: spec.type,\r\n    status,\r\n    details: {\r\n      expectedHash: EXPECTED_HASH,\r\n      pre, post,\r\n      eval: evalDetails,\r\n      note: expectations.length === 0 ? 'Keine festen Erwartungen hinterlegt (neutral bewertet)' : undefined,\r\n    },\r\n    expectations,\r\n  };\r\n}\r\n\r\n// -------------------------------------------------------------\r\n// 6) Gesamtlauf + Export\r\n// -------------------------------------------------------------\r\nexport type SuiteResult = {\r\n  summary: {\r\n    total: number;\r\n    pass: number;\r\n    fail: number;\r\n    pending: number;\r\n    noHandler: number;\r\n    expectedHash: string;\r\n    timestamp: string;\r\n  };\r\n  items: TestResult[];\r\n};\r\n\r\nexport async function runInitiativeAndPublicTests(): Promise<SuiteResult> {\r\n  // Nur Initiativen & Public – Interventions werden bewusst ausgelassen\r\n  const toTest = TEST_CARDS.filter((s: any) => s.type === 'public' || isInitiative(s.type));\r\n  const results: TestResult[] = [];\r\n\r\n  for (const spec of toTest) {\r\n    results.push(runSingleTest(spec));\r\n  }\r\n\r\n  const summary = {\r\n    total: results.length,\r\n    pass: results.filter(r => r.status === 'PASS').length,\r\n    fail: results.filter(r => r.status === 'FAIL').length,\r\n    pending: results.filter(r => r.status === 'PENDING').length,\r\n    noHandler: results.filter(r => r.status === 'NO_HANDLER').length,\r\n    expectedHash: EXPECTED_HASH,\r\n    timestamp: new Date().toISOString(),\r\n  };\r\n\r\n  return { summary, items: results };\r\n}\r\n\r\n// Browser-Export als Download\r\nexport function downloadJSON(obj: AnyObj, filename = 'milchcards_test_results.json') {\r\n  const data = 'data:text/json;charset=utf-8,' + encodeURIComponent(JSON.stringify(obj, null, 2));\r\n  const a = document.createElement('a');\r\n  a.setAttribute('href', data);\r\n  a.setAttribute('download', filename);\r\n  a.click();\r\n}\r\n\r\n// Optional CSV (für schnelle Diff/Sheets)\r\nexport function toCSV(res: SuiteResult): string {\r\n  const header = ['cardName','effectKey','type','status'].join(',');\r\n  const rows = res.items.map(i => [\r\n    JSON.stringify(i.cardName),\r\n    JSON.stringify(i.effectKey || ''),\r\n    JSON.stringify(i.type),\r\n    JSON.stringify(i.status),\r\n  ].join(','));\r\n  return [header, ...rows].join('\\n');\r\n}\r\nexport function downloadCSV(res: SuiteResult, filename = 'milchcards_test_results.csv') {\r\n  const data = 'data:text/csv;charset=utf-8,' + encodeURIComponent(toCSV(res));\r\n  const a = document.createElement('a');\r\n  a.setAttribute('href', data);\r\n  a.setAttribute('download', filename);\r\n  a.click();\r\n}\r\n\r\n// -------------------------------------------------------------\r\n// 7) Ingame-Hook (bequem aus der Konsole starten)\r\n// -------------------------------------------------------------\r\ndeclare global {\r\n  interface Window { __MILCH_TESTS__?: AnyObj }\r\n}\r\nif (typeof window !== 'undefined') {\r\n  (window as any).__MILCH_TESTS__ = Object.freeze({\r\n    run: async () => {\r\n      const res = await runInitiativeAndPublicTests();\r\n      console.table(res.summary);\r\n      return res;\r\n    },\r\n    runAndDownload: async () => {\r\n      const res = await runInitiativeAndPublicTests();\r\n      downloadJSON(res);\r\n      return res.summary;\r\n    },\r\n    runAndDownloadCSV: async () => {\r\n      const res = await runInitiativeAndPublicTests();\r\n      downloadCSV(res);\r\n      return res.summary;\r\n    },\r\n    expectedHash: EXPECTED_HASH,\r\n  });\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}