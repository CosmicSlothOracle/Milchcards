{"ast":null,"code":"// initiative_public_suite.ts\n// -------------------------------------------------------------\n// Test-Suite für Initiativen (Sofort + Dauerhaft) & Public Cards\n// - läuft im Browser (ingame) & in Node\n// - exportiert Ergebnisse als JSON/CSV\n// - \"tamper resistant\": Erwartungs-Regeln sind gefreezed & gehasht\n// -------------------------------------------------------------\n\n// PATH: anpassen, wenn nötig\nimport { EFFECTS, LEGACY_NAME_TO_KEY } from '../effects/registry';\nimport { triggerCardEffects } from '../effects/cards';\nimport { resolveQueue } from '../utils/queue';\n// Falls ihr startOfTurn Hooks habt:\nimport { startOfTurn as startOfTurnHooks } from '../utils/startOfTurnHooks';\n\n// PATH: anpassen – eure Kartendaten (Specials enthält Initiativen & Public)\nimport { CARDS } from '../data/cards';\n// Types – falls eure Typ-Pfade anders sind, hier anpassen oder \"any\" verwenden.\n\n// -------------------------------------------------------------\n// 0) Utility – minimaler Fallback-Typ, falls der Import fehlschlägt\n// -------------------------------------------------------------\n\nfunction deepClone(x) {\n  return JSON.parse(JSON.stringify(x));\n}\nfunction other(p) {\n  return p === 1 ? 2 : 1;\n}\n\n// -------------------------------------------------------------\n// 1) Auswahl der Testkarten\n// -------------------------------------------------------------\n\nconst isInitiative = t => t === 'initiative';\nconst isPublic = t => t === 'public';\nconst TEST_CARDS = CARDS.filter(_c = s => isInitiative(s.type) || isPublic(s.type));\n\n// -------------------------------------------------------------\n// 2) \"Tamper resistance\": Erwartungsregeln einfrieren + simple Hash\n//    (kein Kryptoschutz – aber Änderungen werden sichtbar markiert)\n// -------------------------------------------------------------\n_c2 = TEST_CARDS;\n// bewusst offen gelassen (SoT/Auren etc.)\n\n// Karte -> erwartete Effekte (konservativ, nichts „schönt“)\nconst EXPECTED = Object.freeze({\n  // PUBLIC\n  'public.elon.draw_ap': [{\n    kind: 'DRAWS_AT_LEAST',\n    who: 2,\n    count: 1\n  }, {\n    kind: 'AP_DELTA',\n    who: 2,\n    delta: +1\n  }],\n  'public.greta_thunberg.first_gov_ap1': [{\n    kind: 'AP_DELTA',\n    who: 2,\n    delta: +1\n  }],\n  'public.zuck.once_ap_on_activation': [{\n    kind: 'PENDING',\n    reason: 'SoT-Flag + INITIATIVE_ACTIVATED nötig – hier nur Registrierung erwartet'\n  }],\n  'public.doudna.aura_science': [{\n    kind: 'PENDING',\n    reason: 'Aura wird via Start-of-Turn-Hook berechnet'\n  }],\n  'public.fauci.aura_health': [{\n    kind: 'PENDING',\n    reason: 'Aura wird via Start-of-Turn-Hook berechnet'\n  }],\n  'public.chomsky.aura_military_penalty': [{\n    kind: 'PENDING',\n    reason: 'Aura wird via Start-of-Turn-Hook berechnet'\n  }],\n  'public.aiweiwei.on_activate_draw_ap': [{\n    kind: 'PENDING',\n    reason: 'Hook triggert bei INITIATIVE_ACTIVATED'\n  }],\n  // INIT – Sofort\n  'init.spin_doctor.buff_strongest_gov2': [{\n    kind: 'BUFF_STRONGEST_GOV_MIN',\n    who: 2,\n    min: 2\n  }],\n  'init.shadow_lobbying.buff2': [{\n    kind: 'BUFF_STRONGEST_GOV_MIN',\n    who: 2,\n    min: 2\n  }],\n  'init.digital_campaign.draw2': [{\n    kind: 'DRAWS_AT_LEAST',\n    who: 2,\n    count: 2\n  }, {\n    kind: 'AP_DELTA',\n    who: 2,\n    delta: +1\n  }],\n  'init.surprise_funding.ap2': [{\n    kind: 'AP_DELTA',\n    who: 2,\n    delta: +2\n  }],\n  'init.grassroots_blitz.draw1_buff1': [{\n    kind: 'DRAWS_AT_LEAST',\n    who: 2,\n    count: 1\n  }, {\n    kind: 'BUFF_STRONGEST_GOV_MIN',\n    who: 2,\n    min: 1\n  }],\n  'init.strategic_leaks.opp_discard1': [\n    // Wir testen nur Veränderung Gegnerhand (wenn Resolver implementiert)\n    // keine \"Schönung\": falls nicht implementiert, schlägt es fehl.\n  ],\n  'init.emergency_legislation.grant_shield1': [\n  // Shield wird engine-spezifisch vergeben – explizit nicht geschönt:\n  {\n    kind: 'PENDING',\n    reason: 'GRANT_SHIELD engine-spezifisch – bitte Resolver prüfen'\n  }],\n  'init.ai_narrative.register_media_blackout': [{\n    kind: 'PENDING',\n    reason: 'Nur Trap-Registrierung – Verhalten in applyTraps geprüft'\n  }],\n  'init.party_offensive.deactivate_gov': [\n  // Engine-spezifisch – wir prüfen MINDESTENS dass ein Deactivation Event wirkt:\n  {\n    kind: 'PENDING',\n    reason: 'DEACTIVATE_STRONGEST_ENEMY_GOV – Ergebnis engine-spezifisch'\n  }],\n  'init.opposition_blockade.lock_initiatives': [{\n    kind: 'SET_FLAG_TRUE',\n    path: 'effectFlags[1].initiativesLocked'\n  } // Lock beim Gegner (P1)\n  ],\n  'init.delay_tactics.ap_or_draw': [{\n    kind: 'AP_DELTA',\n    who: 2,\n    delta: +1\n  }],\n  'init.think_tank.draw1_buff_gov2': [{\n    kind: 'DRAWS_AT_LEAST',\n    who: 2,\n    count: 1\n  }, {\n    kind: 'BUFF_STRONGEST_GOV_MIN',\n    who: 2,\n    min: 2\n  }],\n  'init.influencer_campaign.double_public': [{\n    kind: 'SET_FLAG_TRUE',\n    path: 'effectFlags[2].doublePublicAura'\n  }],\n  'init.system_critical.shield1': [{\n    kind: 'PENDING',\n    reason: 'GRANT_SHIELD engine-spezifisch'\n  }],\n  'init.symbolic_politics.draw1': [{\n    kind: 'DRAWS_AT_LEAST',\n    who: 2,\n    count: 1\n  }],\n  // INIT – Dauerhaft\n  'init.napoleon_komplex.tier1_gov_plus1': [{\n    kind: 'PENDING',\n    reason: 'Ongoing Aura – wird via SoT berechnet, Slot-Routing muss stimmen'\n  }]\n});\nfunction simpleHash(str) {\n  // sehr simpler Hash – reine Manipulationsanzeige\n  let h = 0,\n    i = 0,\n    len = str.length;\n  while (i < len) h = h * 31 + str.charCodeAt(i++) | 0;\n  return (h >>> 0).toString(16);\n}\nconst EXPECTED_HASH = simpleHash(_c3 = JSON.stringify(EXPECTED));\n\n// -------------------------------------------------------------\n// 3) State-Bau für reproduzierbare Tests\n//    Minimaler, aber kompatibler State (kein Schönreden).\n// -------------------------------------------------------------\n_c4 = EXPECTED_HASH;\nfunction makeBasePolitician(name, influence) {\n  return {\n    kind: 'pol',\n    name,\n    baseInfluence: influence,\n    influence,\n    tempBuffs: 0,\n    tempDebuffs: 0,\n    uid: Math.floor(Math.random() * 1e9)\n  };\n}\n\n// Stellt sicher, dass es je Seite mind. 1 Regierung gibt, damit BUFF_* Effekte messbar sind\nfunction makeTestState() {\n  const p1Gov = makeBasePolitician('Karl Rove', 6);\n  const p2Gov = makeBasePolitician('Olaf Scholz', 7);\n  const state = {\n    actionPoints: {\n      1: 2,\n      2: 2\n    },\n    hands: {\n      1: [],\n      2: []\n    },\n    decks: {\n      1: [],\n      2: []\n    },\n    discard: [],\n    board: {\n      1: {\n        innen: [],\n        aussen: [p1Gov],\n        sofort: []\n      },\n      2: {\n        innen: [],\n        aussen: [p2Gov],\n        sofort: []\n      }\n    },\n    permanentSlots: {\n      1: {\n        government: null,\n        public: null,\n        initiativePermanent: null\n      },\n      2: {\n        government: null,\n        public: null,\n        initiativePermanent: null\n      }\n    },\n    traps: {\n      1: [],\n      2: []\n    },\n    effectFlags: {\n      1: {\n        markZuckerbergUsed: false\n      },\n      2: {\n        markZuckerbergUsed: false\n      }\n    },\n    _effectQueue: [],\n    log: []\n  };\n  return state;\n}\n\n// -------------------------------------------------------------\n// 4) Hilfsfunktionen zum Messen\n// -------------------------------------------------------------\nfunction getHandLength(state, p) {\n  var _state$hands;\n  return (((_state$hands = state.hands) === null || _state$hands === void 0 ? void 0 : _state$hands[p]) || []).length;\n}\nfunction getAP(state, p) {\n  var _state$actionPoints$p, _state$actionPoints;\n  return (_state$actionPoints$p = (_state$actionPoints = state.actionPoints) === null || _state$actionPoints === void 0 ? void 0 : _state$actionPoints[p]) !== null && _state$actionPoints$p !== void 0 ? _state$actionPoints$p : 0;\n}\nfunction getStrongestGov(state, p) {\n  var _state$board, _state$board$p;\n  const govs = ((_state$board = state.board) === null || _state$board === void 0 ? void 0 : (_state$board$p = _state$board[p]) === null || _state$board$p === void 0 ? void 0 : _state$board$p.aussen) || [];\n  if (!govs.length) return null;\n  return govs.reduce((a, b) => a.influence + (a.tempBuffs || 0) - (a.tempDebuffs || 0) >= b.influence + (b.tempBuffs || 0) - (b.tempDebuffs || 0) ? a : b);\n}\nfunction readByPath(state, path) {\n  // z.B. effectFlags[1].initiativesLocked\n  const parts = path.replace(/\\]/g, '').split(/\\.|\\[/g).filter(Boolean);\n  let cur = state;\n  for (const p of parts) {\n    var _cur;\n    cur = (_cur = cur) === null || _cur === void 0 ? void 0 : _cur[p];\n  }\n  return cur;\n}\n\n// Karte (aus Specials) -> (Card) für triggerCardEffect\nfunction toEngineCard(spec) {\n  return {\n    name: spec.name,\n    key: spec.key,\n    effectKey: spec.effectKey,\n    // kann undefined sein, dann legacy Mapping\n    type: spec.type\n    // .. Rest uninteressant für reine Effekt-Tests\n  };\n}\n\n// -------------------------------------------------------------\n// 5) Einzeltest: führt Effekt aus und vergleicht mit EXPECTED\n// -------------------------------------------------------------\n\nfunction runSingleTest(spec) {\n  var _card$effectKey, _EXPECTED;\n  const state = makeTestState();\n  const P = 2; // Wir testen konsistent als Spieler 2 (wie in deinen Logs)\n  const O = 1;\n  const card = toEngineCard(spec);\n\n  // resolve key via card.effectKey or legacy mapping\n  const effectKey = (_card$effectKey = card.effectKey) !== null && _card$effectKey !== void 0 ? _card$effectKey : LEGACY_NAME_TO_KEY[card.name];\n  const expectations = (_EXPECTED = EXPECTED[effectKey]) !== null && _EXPECTED !== void 0 ? _EXPECTED : [];\n\n  // Pre-Snapshot\n  const pre = {\n    apP: getAP(state, P),\n    apO: getAP(state, O),\n    hP: getHandLength(state, P),\n    hO: getHandLength(state, O),\n    sGovP: deepClone(getStrongestGov(state, P)),\n    sGovO: deepClone(getStrongestGov(state, O)),\n    flagsBefore: deepClone(state.effectFlags)\n  };\n\n  // Trigger\n  try {\n    triggerCardEffects(state, P, card);\n  } catch (e) {\n    return {\n      cardName: spec.name,\n      effectKey,\n      type: spec.type,\n      status: 'FAIL',\n      details: {\n        error: 'triggerCardEffect threw',\n        e: String(e)\n      },\n      expectations\n    };\n  }\n\n  // Resolve queue\n  try {\n    const q = state._effectQueue || [];\n    resolveQueue(state, q);\n  } catch (e) {\n    return {\n      cardName: spec.name,\n      effectKey,\n      type: spec.type,\n      status: 'FAIL',\n      details: {\n        error: 'resolveQueue threw',\n        e: String(e)\n      },\n      expectations\n    };\n  }\n\n  // Optional: Start-of-Turn Hooks für Auren testen (nur wenn Dauerhaft/Public Aura)\n  if (spec.type === 'Dauerhaft-Initiative' || spec.type === 'Öffentlichkeitskarte') {\n    try {\n      if (typeof startOfTurnHooks === 'function') {\n        startOfTurnHooks(state, P);\n      }\n    } catch {/* Hooks optional – ignorieren */}\n  }\n\n  // Post-Snapshot\n  const post = {\n    apP: getAP(state, P),\n    apO: getAP(state, O),\n    hP: getHandLength(state, P),\n    hO: getHandLength(state, O),\n    sGovP: deepClone(getStrongestGov(state, P)),\n    sGovO: deepClone(getStrongestGov(state, O)),\n    flagsAfter: deepClone(state.effectFlags)\n  };\n\n  // Bewertung\n  const evalDetails = {\n    checks: []\n  };\n  let hardFails = 0;\n  let pendings = 0;\n  if (!effectKey || !EFFECTS[effectKey] && !LEGACY_NAME_TO_KEY[spec.name]) {\n    return {\n      cardName: spec.name,\n      effectKey,\n      type: spec.type,\n      status: 'NO_HANDLER',\n      details: {\n        msg: 'Kein Effect-Handler gefunden'\n      },\n      expectations\n    };\n  }\n\n  // generische, nicht-beschönigende Checks\n  for (const exp of expectations) {\n    switch (exp.kind) {\n      case 'AP_DELTA':\n        {\n          const actual = post.apP - pre.apP;\n          const ok = (exp.who === 2 ? actual : post.apO - pre.apO) === exp.delta;\n          evalDetails.checks.push({\n            exp,\n            actualP: actual,\n            actualO: post.apO - pre.apO,\n            ok\n          });\n          if (!ok) hardFails++;\n          break;\n        }\n      case 'DRAWS_AT_LEAST':\n        {\n          const actual = exp.who === 2 ? post.hP - pre.hP : post.hO - pre.hO;\n          const ok = actual >= exp.count;\n          evalDetails.checks.push({\n            exp,\n            actual,\n            ok\n          });\n          if (!ok) hardFails++;\n          break;\n        }\n      case 'BUFF_STRONGEST_GOV_MIN':\n        {\n          const before = pre.sGovP;\n          const after = post.sGovP;\n          const delta = ((after === null || after === void 0 ? void 0 : after.tempBuffs) || 0) - ((before === null || before === void 0 ? void 0 : before.tempBuffs) || 0) - (((after === null || after === void 0 ? void 0 : after.tempDebuffs) || 0) - ((before === null || before === void 0 ? void 0 : before.tempDebuffs) || 0));\n          const ok = (exp.who === 2 ? delta : 0) >= exp.min; // wir messen auf P2\n          evalDetails.checks.push({\n            exp,\n            delta,\n            ok,\n            before,\n            after\n          });\n          if (!ok) hardFails++;\n          break;\n        }\n      case 'SET_FLAG_TRUE':\n        {\n          const val = readByPath(state, exp.path);\n          const ok = Boolean(val);\n          evalDetails.checks.push({\n            exp,\n            value: val,\n            ok\n          });\n          if (!ok) hardFails++;\n          break;\n        }\n      case 'PENDING':\n        {\n          pendings++;\n          evalDetails.checks.push({\n            exp,\n            ok: true\n          });\n          break;\n        }\n    }\n  }\n\n  // Wenn keine EXPECTED-Einträge existieren, bewerten wir neutral (keine Schönung)\n  let status = 'PASS';\n  if (hardFails > 0) status = 'FAIL';else if (pendings > 0 && hardFails === 0) status = 'PENDING';\n  return {\n    cardName: spec.name,\n    effectKey,\n    type: spec.type,\n    status,\n    details: {\n      expectedHash: EXPECTED_HASH,\n      pre,\n      post,\n      eval: evalDetails,\n      note: expectations.length === 0 ? 'Keine festen Erwartungen hinterlegt (neutral bewertet)' : undefined\n    },\n    expectations\n  };\n}\n\n// -------------------------------------------------------------\n// 6) Gesamtlauf + Export\n// -------------------------------------------------------------\n\nexport async function runInitiativeAndPublicTests() {\n  // Nur Initiativen & Public – Interventions werden bewusst ausgelassen\n  const toTest = TEST_CARDS.filter(s => s.type === 'public' || isInitiative(s.type));\n  const results = [];\n  for (const spec of toTest) {\n    results.push(runSingleTest(spec));\n  }\n  const summary = {\n    total: results.length,\n    pass: results.filter(r => r.status === 'PASS').length,\n    fail: results.filter(r => r.status === 'FAIL').length,\n    pending: results.filter(r => r.status === 'PENDING').length,\n    noHandler: results.filter(r => r.status === 'NO_HANDLER').length,\n    expectedHash: EXPECTED_HASH,\n    timestamp: new Date().toISOString()\n  };\n  return {\n    summary,\n    items: results\n  };\n}\n\n// Browser-Export als Download\nexport function downloadJSON(obj, filename = 'milchcards_test_results.json') {\n  const data = 'data:text/json;charset=utf-8,' + encodeURIComponent(JSON.stringify(obj, null, 2));\n  const a = document.createElement('a');\n  a.setAttribute('href', data);\n  a.setAttribute('download', filename);\n  a.click();\n}\n\n// Optional CSV (für schnelle Diff/Sheets)\nexport function toCSV(res) {\n  const header = ['cardName', 'effectKey', 'type', 'status'].join(',');\n  const rows = res.items.map(i => [JSON.stringify(i.cardName), JSON.stringify(i.effectKey || ''), JSON.stringify(i.type), JSON.stringify(i.status)].join(','));\n  return [header, ...rows].join('\\n');\n}\nexport function downloadCSV(res, filename = 'milchcards_test_results.csv') {\n  const data = 'data:text/csv;charset=utf-8,' + encodeURIComponent(toCSV(res));\n  const a = document.createElement('a');\n  a.setAttribute('href', data);\n  a.setAttribute('download', filename);\n  a.click();\n}\n\n// -------------------------------------------------------------\n// 7) Ingame-Hook (bequem aus der Konsole starten)\n// -------------------------------------------------------------\n\nif (typeof window !== 'undefined') {\n  window.__MILCH_TESTS__ = Object.freeze({\n    run: async () => {\n      const res = await runInitiativeAndPublicTests();\n      console.table(res.summary);\n      return res;\n    },\n    runAndDownload: async () => {\n      const res = await runInitiativeAndPublicTests();\n      downloadJSON(res);\n      return res.summary;\n    },\n    runAndDownloadCSV: async () => {\n      const res = await runInitiativeAndPublicTests();\n      downloadCSV(res);\n      return res.summary;\n    },\n    expectedHash: EXPECTED_HASH\n  });\n}\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"TEST_CARDS$CARDS.filter\");\n$RefreshReg$(_c2, \"TEST_CARDS\");\n$RefreshReg$(_c3, \"EXPECTED_HASH$simpleHash\");\n$RefreshReg$(_c4, \"EXPECTED_HASH\");","map":{"version":3,"names":["EFFECTS","LEGACY_NAME_TO_KEY","triggerCardEffects","resolveQueue","startOfTurn","startOfTurnHooks","CARDS","deepClone","x","JSON","parse","stringify","other","p","isInitiative","t","isPublic","TEST_CARDS","filter","_c","s","type","_c2","EXPECTED","Object","freeze","kind","who","count","delta","reason","min","path","simpleHash","str","h","i","len","length","charCodeAt","toString","EXPECTED_HASH","_c3","_c4","makeBasePolitician","name","influence","baseInfluence","tempBuffs","tempDebuffs","uid","Math","floor","random","makeTestState","p1Gov","p2Gov","state","actionPoints","hands","decks","discard","board","innen","aussen","sofort","permanentSlots","government","public","initiativePermanent","traps","effectFlags","markZuckerbergUsed","_effectQueue","log","getHandLength","_state$hands","getAP","_state$actionPoints$p","_state$actionPoints","getStrongestGov","_state$board","_state$board$p","govs","reduce","a","b","readByPath","parts","replace","split","Boolean","cur","_cur","toEngineCard","spec","key","effectKey","runSingleTest","_card$effectKey","_EXPECTED","P","O","card","expectations","pre","apP","apO","hP","hO","sGovP","sGovO","flagsBefore","e","cardName","status","details","error","String","q","post","flagsAfter","evalDetails","checks","hardFails","pendings","msg","exp","actual","ok","push","actualP","actualO","before","after","val","value","expectedHash","eval","note","undefined","runInitiativeAndPublicTests","toTest","results","summary","total","pass","r","fail","pending","noHandler","timestamp","Date","toISOString","items","downloadJSON","obj","filename","data","encodeURIComponent","document","createElement","setAttribute","click","toCSV","res","header","join","rows","map","downloadCSV","window","__MILCH_TESTS__","run","console","table","runAndDownload","runAndDownloadCSV","$RefreshReg$"],"sources":["C:/Users/skank/Videos/Cards/Milchcards/src/__tests__/initiative_public_suite.ts"],"sourcesContent":["// initiative_public_suite.ts\r\n// -------------------------------------------------------------\r\n// Test-Suite für Initiativen (Sofort + Dauerhaft) & Public Cards\r\n// - läuft im Browser (ingame) & in Node\r\n// - exportiert Ergebnisse als JSON/CSV\r\n// - \"tamper resistant\": Erwartungs-Regeln sind gefreezed & gehasht\r\n// -------------------------------------------------------------\r\n\r\n// PATH: anpassen, wenn nötig\r\nimport { EFFECTS, LEGACY_NAME_TO_KEY } from '../effects/registry';\r\nimport { triggerCardEffects } from '../effects/cards';\r\nimport { resolveQueue } from '../utils/queue';\r\n// Falls ihr startOfTurn Hooks habt:\r\nimport { startOfTurn as startOfTurnHooks } from '../utils/startOfTurnHooks';\r\n\r\n// PATH: anpassen – eure Kartendaten (Specials enthält Initiativen & Public)\r\nimport { CARDS } from '../data/cards';\r\n// Types – falls eure Typ-Pfade anders sind, hier anpassen oder \"any\" verwenden.\r\nimport type { GameState, Player, Card } from '../types/game';\r\nimport type { EffectEvent } from '../types/effects';\r\n\r\n// -------------------------------------------------------------\r\n// 0) Utility – minimaler Fallback-Typ, falls der Import fehlschlägt\r\n// -------------------------------------------------------------\r\ntype AnyObj = Record<string, any>;\r\n\r\nfunction deepClone<T>(x: T): T { return JSON.parse(JSON.stringify(x)); }\r\nfunction other(p: Player): Player { return (p === 1 ? 2 : 1) as Player; }\r\n\r\n// -------------------------------------------------------------\r\n// 1) Auswahl der Testkarten\r\n// -------------------------------------------------------------\r\ntype SpecType = 'initiative' | 'public' | 'government' | 'intervention';\r\n\r\nconst isInitiative = (t: string) => t === 'initiative';\r\nconst isPublic = (t: string) => t === 'public';\r\n\r\nconst TEST_CARDS = CARDS.filter((s: any) => isInitiative(s.type as SpecType) || isPublic(s.type as SpecType));\r\n\r\n// -------------------------------------------------------------\r\n// 2) \"Tamper resistance\": Erwartungsregeln einfrieren + simple Hash\r\n//    (kein Kryptoschutz – aber Änderungen werden sichtbar markiert)\r\n// -------------------------------------------------------------\r\ntype Expectation =\r\n  | { kind: 'AP_DELTA'; who: Player; delta: number }\r\n  | { kind: 'DRAWS_AT_LEAST'; who: Player; count: number }\r\n  | { kind: 'BUFF_STRONGEST_GOV_MIN'; who: Player; min: number }\r\n  | { kind: 'SET_FLAG_TRUE'; path: string } // z.B. \"effectFlags[2].initiativesLocked\"\r\n  | { kind: 'PENDING'; reason: string };    // bewusst offen gelassen (SoT/Auren etc.)\r\n\r\n// Karte -> erwartete Effekte (konservativ, nichts „schönt“)\r\nconst EXPECTED: Record<string, Expectation[]> = Object.freeze({\r\n  // PUBLIC\r\n  'public.elon.draw_ap': [\r\n    { kind: 'DRAWS_AT_LEAST', who: 2, count: 1 },\r\n    { kind: 'AP_DELTA', who: 2, delta: +1 },\r\n  ],\r\n  'public.greta_thunberg.first_gov_ap1': [\r\n    { kind: 'AP_DELTA', who: 2, delta: +1 },\r\n  ],\r\n  'public.zuck.once_ap_on_activation': [\r\n    { kind: 'PENDING', reason: 'SoT-Flag + INITIATIVE_ACTIVATED nötig – hier nur Registrierung erwartet' }\r\n  ],\r\n  'public.doudna.aura_science': [\r\n    { kind: 'PENDING', reason: 'Aura wird via Start-of-Turn-Hook berechnet' }\r\n  ],\r\n  'public.fauci.aura_health': [\r\n    { kind: 'PENDING', reason: 'Aura wird via Start-of-Turn-Hook berechnet' }\r\n  ],\r\n  'public.chomsky.aura_military_penalty': [\r\n    { kind: 'PENDING', reason: 'Aura wird via Start-of-Turn-Hook berechnet' }\r\n  ],\r\n  'public.aiweiwei.on_activate_draw_ap': [\r\n    { kind: 'PENDING', reason: 'Hook triggert bei INITIATIVE_ACTIVATED' }\r\n  ],\r\n\r\n  // INIT – Sofort\r\n  'init.spin_doctor.buff_strongest_gov2': [\r\n    { kind: 'BUFF_STRONGEST_GOV_MIN', who: 2, min: 2 },\r\n  ],\r\n  'init.shadow_lobbying.buff2': [\r\n    { kind: 'BUFF_STRONGEST_GOV_MIN', who: 2, min: 2 },\r\n  ],\r\n  'init.digital_campaign.draw2': [\r\n    { kind: 'DRAWS_AT_LEAST', who: 2, count: 2 },\r\n    { kind: 'AP_DELTA', who: 2, delta: +1 },\r\n  ],\r\n  'init.surprise_funding.ap2': [\r\n    { kind: 'AP_DELTA', who: 2, delta: +2 },\r\n  ],\r\n  'init.grassroots_blitz.draw1_buff1': [\r\n    { kind: 'DRAWS_AT_LEAST', who: 2, count: 1 },\r\n    { kind: 'BUFF_STRONGEST_GOV_MIN', who: 2, min: 1 },\r\n  ],\r\n  'init.strategic_leaks.opp_discard1': [\r\n    // Wir testen nur Veränderung Gegnerhand (wenn Resolver implementiert)\r\n    // keine \"Schönung\": falls nicht implementiert, schlägt es fehl.\r\n  ],\r\n  'init.emergency_legislation.grant_shield1': [\r\n    // Shield wird engine-spezifisch vergeben – explizit nicht geschönt:\r\n    { kind: 'PENDING', reason: 'GRANT_SHIELD engine-spezifisch – bitte Resolver prüfen' }\r\n  ],\r\n  'init.ai_narrative.register_media_blackout': [\r\n    { kind: 'PENDING', reason: 'Nur Trap-Registrierung – Verhalten in applyTraps geprüft' }\r\n  ],\r\n  'init.party_offensive.deactivate_gov': [\r\n    // Engine-spezifisch – wir prüfen MINDESTENS dass ein Deactivation Event wirkt:\r\n    { kind: 'PENDING', reason: 'DEACTIVATE_STRONGEST_ENEMY_GOV – Ergebnis engine-spezifisch' }\r\n  ],\r\n  'init.opposition_blockade.lock_initiatives': [\r\n    { kind: 'SET_FLAG_TRUE', path: 'effectFlags[1].initiativesLocked' }, // Lock beim Gegner (P1)\r\n  ],\r\n  'init.delay_tactics.ap_or_draw': [\r\n    { kind: 'AP_DELTA', who: 2, delta: +1 },\r\n  ],\r\n  'init.think_tank.draw1_buff_gov2': [\r\n    { kind: 'DRAWS_AT_LEAST', who: 2, count: 1 },\r\n    { kind: 'BUFF_STRONGEST_GOV_MIN', who: 2, min: 2 },\r\n  ],\r\n  'init.influencer_campaign.double_public': [\r\n    { kind: 'SET_FLAG_TRUE', path: 'effectFlags[2].doublePublicAura' },\r\n  ],\r\n  'init.system_critical.shield1': [\r\n    { kind: 'PENDING', reason: 'GRANT_SHIELD engine-spezifisch' }\r\n  ],\r\n  'init.symbolic_politics.draw1': [\r\n    { kind: 'DRAWS_AT_LEAST', who: 2, count: 1 },\r\n  ],\r\n\r\n  // INIT – Dauerhaft\r\n  'init.napoleon_komplex.tier1_gov_plus1': [\r\n    { kind: 'PENDING', reason: 'Ongoing Aura – wird via SoT berechnet, Slot-Routing muss stimmen' }\r\n  ],\r\n} as const);\r\n\r\nfunction simpleHash(str: string): string {\r\n  // sehr simpler Hash – reine Manipulationsanzeige\r\n  let h = 0, i = 0, len = str.length;\r\n  while (i < len) h = (h * 31 + str.charCodeAt(i++)) | 0;\r\n  return (h >>> 0).toString(16);\r\n}\r\nconst EXPECTED_HASH = simpleHash(JSON.stringify(EXPECTED));\r\n\r\n// -------------------------------------------------------------\r\n// 3) State-Bau für reproduzierbare Tests\r\n//    Minimaler, aber kompatibler State (kein Schönreden).\r\n// -------------------------------------------------------------\r\nfunction makeBasePolitician(name: string, influence: number) {\r\n  return {\r\n    kind: 'pol',\r\n    name,\r\n    baseInfluence: influence,\r\n    influence,\r\n    tempBuffs: 0,\r\n    tempDebuffs: 0,\r\n    uid: Math.floor(Math.random() * 1e9),\r\n  };\r\n}\r\n\r\n// Stellt sicher, dass es je Seite mind. 1 Regierung gibt, damit BUFF_* Effekte messbar sind\r\nfunction makeTestState(): GameState {\r\n  const p1Gov = makeBasePolitician('Karl Rove', 6);\r\n  const p2Gov = makeBasePolitician('Olaf Scholz', 7);\r\n\r\n  const state: AnyObj = {\r\n    actionPoints: { 1: 2, 2: 2 },\r\n    hands: { 1: [], 2: [] },\r\n    decks: { 1: [], 2: [] },\r\n    discard: [],\r\n    board: {\r\n      1: { innen: [], aussen: [p1Gov], sofort: [] },\r\n      2: { innen: [], aussen: [p2Gov], sofort: [] },\r\n    },\r\n    permanentSlots: {\r\n      1: { government: null, public: null, initiativePermanent: null },\r\n      2: { government: null, public: null, initiativePermanent: null }\r\n    },\r\n    traps: { 1: [], 2: [] },\r\n    effectFlags: {\r\n      1: { markZuckerbergUsed: false },\r\n      2: { markZuckerbergUsed: false },\r\n    },\r\n    _effectQueue: [] as EffectEvent[],\r\n    log: [] as string[],\r\n  };\r\n\r\n  return state as GameState;\r\n}\r\n\r\n// -------------------------------------------------------------\r\n// 4) Hilfsfunktionen zum Messen\r\n// -------------------------------------------------------------\r\nfunction getHandLength(state: AnyObj, p: Player) {\r\n  return (state.hands?.[p] || []).length;\r\n}\r\nfunction getAP(state: AnyObj, p: Player) {\r\n  return state.actionPoints?.[p] ?? 0;\r\n}\r\nfunction getStrongestGov(state: AnyObj, p: Player) {\r\n  const govs = state.board?.[p]?.aussen || [];\r\n  if (!govs.length) return null;\r\n  return govs.reduce((a: AnyObj, b: AnyObj) => (a.influence + (a.tempBuffs||0) - (a.tempDebuffs||0)) >= (b.influence + (b.tempBuffs||0) - (b.tempDebuffs||0)) ? a : b);\r\n}\r\nfunction readByPath(state: AnyObj, path: string) {\r\n  // z.B. effectFlags[1].initiativesLocked\r\n  const parts = path.replace(/\\]/g, '').split(/\\.|\\[/g).filter(Boolean);\r\n  let cur: any = state;\r\n  for (const p of parts) {\r\n    cur = cur?.[p];\r\n  }\r\n  return cur;\r\n}\r\n\r\n// Karte (aus Specials) -> (Card) für triggerCardEffect\r\nfunction toEngineCard(spec: AnyObj): Card {\r\n  return {\r\n    name: spec.name,\r\n    key: spec.key,\r\n    effectKey: spec.effectKey, // kann undefined sein, dann legacy Mapping\r\n    type: spec.type,\r\n    // .. Rest uninteressant für reine Effekt-Tests\r\n  } as unknown as Card;\r\n}\r\n\r\n// -------------------------------------------------------------\r\n// 5) Einzeltest: führt Effekt aus und vergleicht mit EXPECTED\r\n// -------------------------------------------------------------\r\ntype TestResult = {\r\n  cardName: string;\r\n  effectKey?: string;\r\n  type: string;\r\n  status: 'PASS' | 'FAIL' | 'PENDING' | 'NO_HANDLER';\r\n  details: AnyObj;\r\n  expectations: Expectation[];\r\n};\r\n\r\nfunction runSingleTest(spec: AnyObj): TestResult {\r\n  const state = makeTestState();\r\n  const P: Player = 2;       // Wir testen konsistent als Spieler 2 (wie in deinen Logs)\r\n  const O: Player = 1;\r\n\r\n  const card = toEngineCard(spec);\r\n\r\n  // resolve key via card.effectKey or legacy mapping\r\n  const effectKey = card.effectKey ?? LEGACY_NAME_TO_KEY[card.name];\r\n  const expectations = EXPECTED[effectKey as keyof typeof EXPECTED] ?? [];\r\n\r\n  // Pre-Snapshot\r\n  const pre = {\r\n    apP: getAP(state, P),\r\n    apO: getAP(state, O),\r\n    hP: getHandLength(state, P),\r\n    hO: getHandLength(state, O),\r\n    sGovP: deepClone(getStrongestGov(state, P)),\r\n    sGovO: deepClone(getStrongestGov(state, O)),\r\n    flagsBefore: deepClone(state.effectFlags),\r\n  };\r\n\r\n  // Trigger\r\n  try {\r\n    triggerCardEffects(state as GameState, P, card);\r\n  } catch (e) {\r\n    return {\r\n      cardName: spec.name,\r\n      effectKey,\r\n      type: spec.type,\r\n      status: 'FAIL',\r\n      details: { error: 'triggerCardEffect threw', e: String(e) },\r\n      expectations,\r\n    };\r\n  }\r\n\r\n  // Resolve queue\r\n  try {\r\n    const q = (state as AnyObj)._effectQueue || [];\r\n    resolveQueue(state as GameState, q);\r\n  } catch (e) {\r\n    return {\r\n      cardName: spec.name,\r\n      effectKey,\r\n      type: spec.type,\r\n      status: 'FAIL',\r\n      details: { error: 'resolveQueue threw', e: String(e) },\r\n      expectations,\r\n    };\r\n  }\r\n\r\n  // Optional: Start-of-Turn Hooks für Auren testen (nur wenn Dauerhaft/Public Aura)\r\n  if (spec.type === 'Dauerhaft-Initiative' || spec.type === 'Öffentlichkeitskarte') {\r\n    try {\r\n      if (typeof startOfTurnHooks === 'function') {\r\n        startOfTurnHooks(state as GameState, P);\r\n      }\r\n    } catch { /* Hooks optional – ignorieren */ }\r\n  }\r\n\r\n  // Post-Snapshot\r\n  const post = {\r\n    apP: getAP(state, P),\r\n    apO: getAP(state, O),\r\n    hP: getHandLength(state, P),\r\n    hO: getHandLength(state, O),\r\n    sGovP: deepClone(getStrongestGov(state, P)),\r\n    sGovO: deepClone(getStrongestGov(state, O)),\r\n    flagsAfter: deepClone(state.effectFlags),\r\n  };\r\n\r\n  // Bewertung\r\n  const evalDetails: AnyObj = { checks: [] };\r\n  let hardFails = 0;\r\n  let pendings = 0;\r\n\r\n  if (!effectKey || (!EFFECTS[effectKey] && !LEGACY_NAME_TO_KEY[spec.name])) {\r\n    return {\r\n      cardName: spec.name,\r\n      effectKey,\r\n      type: spec.type,\r\n      status: 'NO_HANDLER',\r\n      details: { msg: 'Kein Effect-Handler gefunden' },\r\n      expectations,\r\n    };\r\n  }\r\n\r\n  // generische, nicht-beschönigende Checks\r\n  for (const exp of expectations) {\r\n    switch (exp.kind) {\r\n      case 'AP_DELTA': {\r\n        const actual = post.apP - pre.apP;\r\n        const ok = (exp.who === 2 ? actual : (post.apO - pre.apO)) === exp.delta;\r\n        evalDetails.checks.push({ exp, actualP: actual, actualO: (post.apO - pre.apO), ok });\r\n        if (!ok) hardFails++;\r\n        break;\r\n      }\r\n      case 'DRAWS_AT_LEAST': {\r\n        const actual = (exp.who === 2 ? (post.hP - pre.hP) : (post.hO - pre.hO));\r\n        const ok = actual >= exp.count;\r\n        evalDetails.checks.push({ exp, actual, ok });\r\n        if (!ok) hardFails++;\r\n        break;\r\n      }\r\n      case 'BUFF_STRONGEST_GOV_MIN': {\r\n        const before = pre.sGovP;\r\n        const after  = post.sGovP;\r\n        const delta = ((after?.tempBuffs || 0) - (before?.tempBuffs || 0)) - ((after?.tempDebuffs || 0) - (before?.tempDebuffs || 0));\r\n        const ok = (exp.who === 2 ? delta : 0) >= exp.min; // wir messen auf P2\r\n        evalDetails.checks.push({ exp, delta, ok, before, after });\r\n        if (!ok) hardFails++;\r\n        break;\r\n      }\r\n      case 'SET_FLAG_TRUE': {\r\n        const val = readByPath(state as AnyObj, exp.path);\r\n        const ok = Boolean(val);\r\n        evalDetails.checks.push({ exp, value: val, ok });\r\n        if (!ok) hardFails++;\r\n        break;\r\n      }\r\n      case 'PENDING': {\r\n        pendings++;\r\n        evalDetails.checks.push({ exp, ok: true });\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  // Wenn keine EXPECTED-Einträge existieren, bewerten wir neutral (keine Schönung)\r\n  let status: TestResult['status'] = 'PASS';\r\n  if (hardFails > 0) status = 'FAIL';\r\n  else if (pendings > 0 && hardFails === 0) status = 'PENDING';\r\n\r\n  return {\r\n    cardName: spec.name,\r\n    effectKey,\r\n    type: spec.type,\r\n    status,\r\n    details: {\r\n      expectedHash: EXPECTED_HASH,\r\n      pre, post,\r\n      eval: evalDetails,\r\n      note: expectations.length === 0 ? 'Keine festen Erwartungen hinterlegt (neutral bewertet)' : undefined,\r\n    },\r\n    expectations,\r\n  };\r\n}\r\n\r\n// -------------------------------------------------------------\r\n// 6) Gesamtlauf + Export\r\n// -------------------------------------------------------------\r\nexport type SuiteResult = {\r\n  summary: {\r\n    total: number;\r\n    pass: number;\r\n    fail: number;\r\n    pending: number;\r\n    noHandler: number;\r\n    expectedHash: string;\r\n    timestamp: string;\r\n  };\r\n  items: TestResult[];\r\n};\r\n\r\nexport async function runInitiativeAndPublicTests(): Promise<SuiteResult> {\r\n  // Nur Initiativen & Public – Interventions werden bewusst ausgelassen\r\n  const toTest = TEST_CARDS.filter((s: any) => s.type === 'public' || isInitiative(s.type));\r\n  const results: TestResult[] = [];\r\n\r\n  for (const spec of toTest) {\r\n    results.push(runSingleTest(spec));\r\n  }\r\n\r\n  const summary = {\r\n    total: results.length,\r\n    pass: results.filter(r => r.status === 'PASS').length,\r\n    fail: results.filter(r => r.status === 'FAIL').length,\r\n    pending: results.filter(r => r.status === 'PENDING').length,\r\n    noHandler: results.filter(r => r.status === 'NO_HANDLER').length,\r\n    expectedHash: EXPECTED_HASH,\r\n    timestamp: new Date().toISOString(),\r\n  };\r\n\r\n  return { summary, items: results };\r\n}\r\n\r\n// Browser-Export als Download\r\nexport function downloadJSON(obj: AnyObj, filename = 'milchcards_test_results.json') {\r\n  const data = 'data:text/json;charset=utf-8,' + encodeURIComponent(JSON.stringify(obj, null, 2));\r\n  const a = document.createElement('a');\r\n  a.setAttribute('href', data);\r\n  a.setAttribute('download', filename);\r\n  a.click();\r\n}\r\n\r\n// Optional CSV (für schnelle Diff/Sheets)\r\nexport function toCSV(res: SuiteResult): string {\r\n  const header = ['cardName','effectKey','type','status'].join(',');\r\n  const rows = res.items.map(i => [\r\n    JSON.stringify(i.cardName),\r\n    JSON.stringify(i.effectKey || ''),\r\n    JSON.stringify(i.type),\r\n    JSON.stringify(i.status),\r\n  ].join(','));\r\n  return [header, ...rows].join('\\n');\r\n}\r\nexport function downloadCSV(res: SuiteResult, filename = 'milchcards_test_results.csv') {\r\n  const data = 'data:text/csv;charset=utf-8,' + encodeURIComponent(toCSV(res));\r\n  const a = document.createElement('a');\r\n  a.setAttribute('href', data);\r\n  a.setAttribute('download', filename);\r\n  a.click();\r\n}\r\n\r\n// -------------------------------------------------------------\r\n// 7) Ingame-Hook (bequem aus der Konsole starten)\r\n// -------------------------------------------------------------\r\ndeclare global {\r\n  interface Window { __MILCH_TESTS__?: AnyObj }\r\n}\r\nif (typeof window !== 'undefined') {\r\n  (window as any).__MILCH_TESTS__ = Object.freeze({\r\n    run: async () => {\r\n      const res = await runInitiativeAndPublicTests();\r\n      console.table(res.summary);\r\n      return res;\r\n    },\r\n    runAndDownload: async () => {\r\n      const res = await runInitiativeAndPublicTests();\r\n      downloadJSON(res);\r\n      return res.summary;\r\n    },\r\n    runAndDownloadCSV: async () => {\r\n      const res = await runInitiativeAndPublicTests();\r\n      downloadCSV(res);\r\n      return res.summary;\r\n    },\r\n    expectedHash: EXPECTED_HASH,\r\n  });\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}