{"ast":null,"code":"import { getStrongestGovernment } from './targets';\nimport { registerTrap } from './traps';\nimport { logAP, logDraw, logDiscardRandom, logDeactivateRandom, logBuffStrongest, logShield, logDeactivateCard, logOpportunist } from './logs';\nimport { getGlobalRNG } from '../services/rng';\nimport { logger } from '../debug/logger';\n// Helper to find strongest government uid for new intents\nfunction strongestGovernmentUid(state, p) {\n  var _state$board$p;\n  const govRow = (_state$board$p = state.board[p]) === null || _state$board$p === void 0 ? void 0 : _state$board$p.aussen;\n  if (!govRow || govRow.length === 0) return null;\n  const alive = govRow.filter(g => !g.deactivated);\n  if (!alive.length) return null;\n  const sorted = alive.slice().sort((a, b) => b.influence + (b.tempBuffs || 0) - (b.tempDebuffs || 0) - (a.influence + (a.tempBuffs || 0) - (a.tempDebuffs || 0)));\n  return sorted[0].uid;\n}\nfunction other(p) {\n  return p === 1 ? 2 : 1;\n}\nfunction logPush(state, msg) {\n  state.log.push(msg);\n}\nfunction strongestGov(state, p) {\n  const row = state.board[p].aussen;\n  if (!row.length) return null;\n  const alive = row.filter(c => !c.deactivated);\n  if (alive.length === 0) return null;\n  return alive.slice().sort((a, b) => b.influence + (b.tempBuffs || 0) - (b.tempDebuffs || 0) - (a.influence + (a.tempBuffs || 0) - (a.tempDebuffs || 0)))[0];\n}\nfunction publicNames(state, p) {\n  return state.board[p].innen.map(c => c.name);\n}\nfunction hasPublic(state, p, name) {\n  return publicNames(state, p).includes(name);\n}\nfunction findCardByUidOnBoard(state, uid) {\n  for (const p of [1, 2]) {\n    for (const lane of ['innen', 'aussen', 'sofort']) {\n      const arr = state.board[p][lane];\n      const hit = arr.find(c => c.uid === uid);\n      if (hit) return hit;\n    }\n  }\n  return null;\n}\nexport function resolveQueue(state, events, hooks) {\n  const rng = getGlobalRNG();\n  // If hooks provided, wrap events in a proxy that notifies on push/unshift/shift\n  if (hooks) {\n    const target = events;\n    const proxy = new Proxy(target, {\n      get(t, prop, receiver) {\n        if (prop === 'push') {\n          return function (...args) {\n            for (const a of args) {\n              var _hooks$onEnqueue;\n              (_hooks$onEnqueue = hooks.onEnqueue) === null || _hooks$onEnqueue === void 0 ? void 0 : _hooks$onEnqueue.call(hooks, a);\n            }\n            return Array.prototype.push.apply(t, args);\n          };\n        }\n        if (prop === 'unshift') {\n          return function (...args) {\n            for (const a of args) {\n              var _hooks$onEnqueue2;\n              (_hooks$onEnqueue2 = hooks.onEnqueue) === null || _hooks$onEnqueue2 === void 0 ? void 0 : _hooks$onEnqueue2.call(hooks, a);\n            }\n            return Array.prototype.unshift.apply(t, args);\n          };\n        }\n        if (prop === 'shift') {\n          return function () {\n            var _hooks$onDequeue;\n            const ev = Array.prototype.shift.apply(t);\n            if (ev !== undefined) (_hooks$onDequeue = hooks.onDequeue) === null || _hooks$onDequeue === void 0 ? void 0 : _hooks$onDequeue.call(hooks, ev);\n            return ev;\n          };\n        }\n        return Reflect.get(t, prop, receiver);\n      }\n    });\n    // replace local events reference with proxy so the rest of function can use it normally\n    events = proxy;\n  }\n\n  // Single pass FIFO\n  while (events.length) {\n    const ev = events.shift();\n    logger.dbg(`DQ ${ev.type}`, ev);\n    // Capture small snapshot for delta calc\n    const beforeAP = {\n      ...state.actionPoints\n    };\n    switch (ev.type) {\n      case 'LOG':\n        {\n          logPush(state, ev.msg);\n          break;\n        }\n      case 'ADD_AP':\n        {\n          var _state$effectFlags$ot;\n          const cur = state.actionPoints[ev.player];\n          const next = Math.max(0, cur + ev.amount);\n          state.actionPoints[ev.player] = next;\n          logger.dbg(`ADD_AP before=${cur} amount=${ev.amount} after=${state.actionPoints[ev.player]}`);\n\n          // Opportunist AP-Spiegelung (falls aktiv beim Gegner)\n          if ((_state$effectFlags$ot = state.effectFlags[other(ev.player)]) !== null && _state$effectFlags$ot !== void 0 && _state$effectFlags$ot.opportunistActive && ev.amount > 0) {\n            const mirror = {\n              type: 'ADD_AP',\n              player: other(ev.player),\n              amount: ev.amount\n            };\n            events.unshift(mirror);\n            logPush(state, `Opportunist: AP +${ev.amount} gespiegelt.`);\n          }\n          logPush(state, logAP(ev.player, cur, next));\n          break;\n        }\n      case 'DRAW_CARDS':\n        {\n          const handBefore = state.hands[ev.player].length;\n          for (let i = 0; i < ev.amount; i++) {\n            const top = state.decks[ev.player].shift();\n            if (top) {\n              state.hands[ev.player].push(top);\n              logPush(state, logDraw(ev.player, top.name));\n            }\n          }\n          const handAfter = state.hands[ev.player].length;\n          logger.dbg(`DRAW_CARDS player=${ev.player} before=${handBefore} after=${handAfter}`);\n          break;\n        }\n      case 'DISCARD_RANDOM_FROM_HAND':\n        {\n          const hand = state.hands[ev.player];\n          for (let i = 0; i < ev.amount && hand.length > 0; i++) {\n            const idx = rng.randomInt(hand.length);\n            const [card] = hand.splice(idx, 1);\n            state.discard.push(card);\n            logPush(state, logDiscardRandom(ev.player, card.name));\n          }\n          break;\n        }\n      case 'DEACTIVATE_RANDOM_HAND':\n        {\n          // Deaktivieren von Handkarten (nicht entfernen)\n          const hand = state.hands[ev.player];\n          const activeCards = hand.filter(c => !c.deactivated);\n          logger.dbg(`DEACTIVATE_RANDOM_HAND: P${ev.player} handSize=${hand.length} activeCandidates=${activeCards.length}`);\n          if (activeCards.length === 0) {\n            logPush(state, `Oprah: no active hand cards to deactivate for P${ev.player}`);\n            break;\n          }\n          for (let i = 0; i < ev.amount && activeCards.length > 0; i++) {\n            const card = rng.pick(activeCards);\n            logger.dbg(`DEACTIVATE_RANDOM_HAND: picked=${card ? card.name : 'undefined'} for P${ev.player}`);\n            if (card) {\n              card.deactivated = true;\n              card._deactivatedBy = 'OPRAH';\n              logPush(state, logDeactivateRandom(ev.player, card.name));\n              // Entferne aus activeCards f√ºr n√§chste Iteration\n              const idx = activeCards.indexOf(card);\n              if (idx > -1) activeCards.splice(idx, 1);\n            }\n          }\n          break;\n        }\n\n      // Legacy cases - removed\n      // SET_DISCOUNT and REFUND_NEXT_INITIATIVE are no longer supported\n      // Use ADD_AP instead\n\n      case 'GRANT_SHIELD':\n        {\n          if (!state.shields) state.shields = new Set();\n          // Wenn kein spezifischer targetUid angegeben ist, verwende Platzhalter pro Spieler (-1 oder -2)\n          const uid = ev.targetUid !== undefined ? ev.targetUid : ev.player === 1 ? -1 : -2;\n          state.shields.add(uid);\n          logPush(state, logShield(uid));\n          break;\n        }\n      case 'DEACTIVATE_CARD':\n        {\n          const card = findCardByUidOnBoard(state, ev.targetUid);\n          if (card) {\n            card.deactivated = true;\n            logPush(state, logDeactivateCard(card.name));\n\n            // Falls die Karte eine Shield-Aura ist, entferne Spielerschilde\n            if (card.effectKey === 'init.intelligence_liaison.shield_aura') {\n              if (state.shields) {\n                const placeholder = ev.player === 1 ? -1 : -2;\n                state.shields.delete(placeholder);\n              }\n            }\n          }\n          break;\n        }\n      case 'REACTIVATE_CARD':\n        {\n          const card = findCardByUidOnBoard(state, ev.targetUid);\n          if (card) {\n            card.deactivated = false;\n            logPush(state, `üîÑ ${card.name} wurde reaktiviert`);\n          }\n          break;\n        }\n      case 'RETURN_TO_HAND':\n        {\n          const card = findCardByUidOnBoard(state, ev.targetUid);\n          if (card) {\n            // Remove from board\n            for (const p of [1, 2]) {\n              for (const lane of ['innen', 'aussen', 'sofort']) {\n                const idx = state.board[p][lane].findIndex(c => c.uid === ev.targetUid);\n                if (idx !== -1) {\n                  state.board[p][lane].splice(idx, 1);\n                  // Add to hand\n                  state.hands[ev.player].push(card);\n                  logPush(state, `üîÑ ${card.name} wurde zur Hand zur√ºckgegeben`);\n                  break;\n                }\n              }\n            }\n          }\n          break;\n        }\n      case 'CANCEL_CARD':\n        {\n          const card = findCardByUidOnBoard(state, ev.targetUid);\n          if (card) {\n            // Remove from board and add to discard\n            for (const p of [1, 2]) {\n              for (const lane of ['innen', 'aussen', 'sofort']) {\n                const idx = state.board[p][lane].findIndex(c => c.uid === ev.targetUid);\n                if (idx !== -1) {\n                  state.board[p][lane].splice(idx, 1);\n                  state.discard.push(card);\n                  logPush(state, `‚ùå ${card.name} wurde annulliert`);\n                  break;\n                }\n              }\n            }\n          }\n          break;\n        }\n      case 'REGISTER_TRAP':\n        {\n          registerTrap(state, ev.player, ev.key);\n          logPush(state, `Trap registered: ${ev.key} (P${ev.player})`);\n          break;\n        }\n      case 'BUFF_STRONGEST_GOV':\n      case 'ADJUST_INFLUENCE':\n        {\n          // Alias auf BUFF_STRONGEST_GOV\n          const player = ev.player;\n          let amount = ev.amount;\n          const reason = ev.reason;\n\n          // Special intent: Oprah media buff - compute amount based on media cards on own board\n          if (reason === 'OPRAH_MEDIA_BUFF_INTENT') {\n            const ownBoard = [...state.board[player].innen, ...state.board[player].aussen];\n            const cd = require('../data/cardDetails');\n            const mediaNames = ['Oprah Winfrey', 'Mark Zuckerberg', 'Tim Cook', 'Sam Altman'];\n            const mediaCount = ownBoard.filter(c => {\n              var _cd$getCardDetails, _cd$getCardDetails$ca;\n              const sub = (_cd$getCardDetails = cd.getCardDetails) === null || _cd$getCardDetails === void 0 ? void 0 : (_cd$getCardDetails$ca = _cd$getCardDetails.call(cd, c.name)) === null || _cd$getCardDetails$ca === void 0 ? void 0 : _cd$getCardDetails$ca.subcategories;\n              const legacy = c.tag === 'Media' || c.tag === 'Medien';\n              return Array.isArray(sub) && sub.includes('Medien') || legacy || mediaNames.includes(c.name);\n            }).length;\n            amount = Math.min(mediaCount, 3);\n            if (amount > 0) {\n              events.unshift({\n                type: 'LOG',\n                msg: `Oprah Winfrey: Media buff calculated +${amount} (max 3).`\n              });\n            } else {\n              events.unshift({\n                type: 'LOG',\n                msg: `Oprah Winfrey: No media cards on board - no buff.`\n              });\n            }\n          }\n          const tgt = getStrongestGovernment(state, player);\n          if (tgt && amount !== 0) {\n            var _state$effectFlags$ot2;\n            if (amount >= 0) {\n              tgt.tempBuffs = (tgt.tempBuffs || 0) + amount;\n            } else {\n              tgt.tempDebuffs = (tgt.tempDebuffs || 0) + Math.abs(amount);\n            }\n            logPush(state, logBuffStrongest(player, tgt.name, amount));\n\n            // Opportunist-Spiegelung (falls aktiv beim Gegner)\n            if ((_state$effectFlags$ot2 = state.effectFlags[other(player)]) !== null && _state$effectFlags$ot2 !== void 0 && _state$effectFlags$ot2.opportunistActive && amount > 0) {\n              const mirror = {\n                type: 'BUFF_STRONGEST_GOV',\n                player: other(player),\n                amount\n              };\n              events.unshift(mirror);\n              logPush(state, logOpportunist(other(player), amount));\n            }\n          }\n          break;\n        }\n      case 'DEBUFF_CARD':\n        {\n          const card = findCardByUidOnBoard(state, ev.targetUid);\n          if (card && card.kind === 'pol') {\n            const tgt = card;\n            tgt.tempDebuffs = (tgt.tempDebuffs || 0) + Math.abs(ev.amount);\n            logPush(state, `üîª ${tgt.name}: -${Math.abs(ev.amount)} Influence`);\n          }\n          break;\n        }\n\n      // ===== New intent event handlers =====\n\n      case 'DEACTIVATE_STRONGEST_ENEMY_GOV':\n        {\n          const opp = ev.player === 1 ? 2 : 1;\n          const uid = strongestGovernmentUid(state, opp);\n          if (uid !== null) {\n            events.unshift({\n              type: 'DEACTIVATE_CARD',\n              player: opp,\n              targetUid: uid\n            });\n            events.unshift({\n              type: 'LOG',\n              msg: 'Party Offensive: strongest enemy Government deactivated.'\n            });\n          } else {\n            events.unshift({\n              type: 'LOG',\n              msg: 'Party Offensive: no enemy Government to deactivate.'\n            });\n          }\n          break;\n        }\n      case 'LOCK_OPPONENT_INITIATIVES_EOT':\n        {\n          const opp = ev.player === 1 ? 2 : 1;\n          state.effectFlags[opp].initiativesLocked = true;\n          events.unshift({\n            type: 'LOG',\n            msg: 'Opposition Blockade: opponent initiatives locked until end of turn.'\n          });\n          break;\n        }\n      case 'SET_DOUBLE_PUBLIC_AURA':\n        {\n          state.effectFlags[ev.player].doublePublicAura = true;\n          events.unshift({\n            type: 'LOG',\n            msg: 'Influencer Campaign: next Public aura will be doubled.'\n          });\n          break;\n        }\n      case 'SET_OPPORTUNIST_ACTIVE':\n        {\n          const {\n            player,\n            active\n          } = ev;\n          state.effectFlags[player].opportunistActive = active;\n          if (active) {\n            events.unshift({\n              type: 'LOG',\n              msg: 'Opportunist: AP effects will be mirrored until end of turn.'\n            });\n          }\n          break;\n        }\n      case 'INITIATIVE_ACTIVATED':\n        {\n          var _state$board$ev$playe, _state$board$ev$playe2, _state$effectFlags$ev;\n          // Initiative activation event - trigger reactions from public cards\n          logPush(state, 'Initiative activated.');\n\n          // Check for public cards that react to initiative activation\n          const publicCards = ((_state$board$ev$playe = state.board[ev.player]) === null || _state$board$ev$playe === void 0 ? void 0 : _state$board$ev$playe.innen) || [];\n\n          // Shadow Lobbying: +1 influence per own Oligarch-tag on board (max +3)\n          // Detect if the activating initiative was Shadow Lobbying by checking the last played instant in slot\n          const instantSlot = ((_state$board$ev$playe2 = state.board[ev.player]) === null || _state$board$ev$playe2 === void 0 ? void 0 : _state$board$ev$playe2.sofort) || [];\n          const lastInstant = instantSlot[0];\n          if (lastInstant && (lastInstant.effectKey === 'init.shadow_lobbying.per_oligarch' || lastInstant.name === 'Shadow Lobbying')) {\n            const ownBoard = [...state.board[ev.player].innen, ...state.board[ev.player].aussen];\n            const oligarchCount = ownBoard.filter(c => {\n              var _getCardDetails, _ref, _getCardDetails$call;\n              const details = c.name ? require('../data/cardDetails') : null;\n              // Fallback: try BaseSpecial tag if available\n              const sub = (_getCardDetails = (_ref = require('../data/cardDetails')).getCardDetails) === null || _getCardDetails === void 0 ? void 0 : (_getCardDetails$call = _getCardDetails.call(_ref, c.name)) === null || _getCardDetails$call === void 0 ? void 0 : _getCardDetails$call.subcategories;\n              const hasNewTag = Array.isArray(sub) && sub.includes('Oligarch');\n              const legacyTag = c.tag === 'Oligarch';\n              return hasNewTag || legacyTag;\n            }).length;\n            const amt = Math.min(oligarchCount, 3);\n            if (amt > 0) {\n              events.unshift({\n                type: 'BUFF_STRONGEST_GOV',\n                player: ev.player,\n                amount: amt\n              });\n              events.unshift({\n                type: 'LOG',\n                msg: `Shadow Lobbying: st√§rkste Regierung +${amt} Einfluss (pro Oligarch, max 3).`\n              });\n            } else {\n              events.unshift({\n                type: 'LOG',\n                msg: `Shadow Lobbying: Keine Oligarchen ‚Äì kein Einfluss-Buff.`\n              });\n            }\n          }\n\n          // Elon Musk: +1 AP on initiative activation\n          const elonMusk = publicCards.find(card => card.kind === 'spec' && card.name === 'Elon Musk');\n          if (elonMusk) {\n            events.unshift({\n              type: 'ADD_AP',\n              player: ev.player,\n              amount: 1\n            });\n            events.unshift({\n              type: 'LOG',\n              msg: 'Elon Musk: +1 AP on initiative activation.'\n            });\n          }\n\n          // Mark Zuckerberg: +1 AP on initiative activation (once per turn)\n          const markZuckerberg = publicCards.find(card => card.kind === 'spec' && card.name === 'Mark Zuckerberg');\n          if (markZuckerberg && !((_state$effectFlags$ev = state.effectFlags[ev.player]) !== null && _state$effectFlags$ev !== void 0 && _state$effectFlags$ev.markZuckerbergUsed)) {\n            events.unshift({\n              type: 'ADD_AP',\n              player: ev.player,\n              amount: 1\n            });\n            events.unshift({\n              type: 'LOG',\n              msg: 'Mark Zuckerberg: +1 AP on initiative activation.'\n            });\n            if (!state.effectFlags[ev.player]) {\n              state.effectFlags[ev.player] = {\n                markZuckerbergUsed: false\n              };\n            }\n            state.effectFlags[ev.player].markZuckerbergUsed = true;\n          }\n\n          // Ai Weiwei: +1 card +1 AP on initiative activation\n          const aiWeiwei = publicCards.find(card => card.kind === 'spec' && card.name === 'Ai Weiwei');\n          if (aiWeiwei) {\n            events.unshift({\n              type: 'DRAW_CARDS',\n              player: ev.player,\n              amount: 1\n            });\n            events.unshift({\n              type: 'ADD_AP',\n              player: ev.player,\n              amount: 1\n            });\n            events.unshift({\n              type: 'LOG',\n              msg: 'Ai Weiwei: +1 card +1 AP on initiative activation.'\n            });\n          }\n\n          // Sam Altman: +1 card +1 AP on AI-related initiative activation\n          const samAltman = publicCards.find(card => card.kind === 'spec' && card.name === 'Sam Altman');\n          if (samAltman) {\n            // Check if the activated initiative is AI-related (would need to be passed as context)\n            // For now, this is handled via the initiative card's tag check in the activation flow\n            events.unshift({\n              type: 'LOG',\n              msg: 'Sam Altman: AI initiative detected - bonus ready.'\n            });\n          }\n\n          // Digitaler Wahlkampf: draw 1 card per own Media-tag on board\n          if (lastInstant && (lastInstant.effectKey === 'init.digital_campaign.per_media' || lastInstant.name === 'Digitaler Wahlkampf')) {\n            const ownBoard = [...state.board[ev.player].innen, ...state.board[ev.player].aussen];\n            const mediaCount = ownBoard.filter(c => {\n              var _getCardDetails2, _ref2, _getCardDetails2$call;\n              const sub = (_getCardDetails2 = (_ref2 = require('../data/cardDetails')).getCardDetails) === null || _getCardDetails2 === void 0 ? void 0 : (_getCardDetails2$call = _getCardDetails2.call(_ref2, c.name)) === null || _getCardDetails2$call === void 0 ? void 0 : _getCardDetails2$call.subcategories;\n              const legacy = c.tag === 'Medien' || c.tag === 'Media';\n              return Array.isArray(sub) && sub.includes('Medien') || legacy || Array.isArray(sub) && sub.includes('Medien') || Array.isArray(sub) && sub.includes('Medien');\n            }).length;\n            if (mediaCount > 0) {\n              events.unshift({\n                type: 'DRAW_CARDS',\n                player: ev.player,\n                amount: mediaCount\n              });\n              events.unshift({\n                type: 'LOG',\n                msg: `Digitaler Wahlkampf: ziehe ${mediaCount} Karte(n) (pro Medien-Karte).`\n              });\n            } else {\n              events.unshift({\n                type: 'LOG',\n                msg: `Digitaler Wahlkampf: Keine Medien-Karten auf dem Feld.`\n              });\n            }\n          }\n          break;\n        }\n\n      // ONCE_AP_ON_ACTIVATION removed - use standard ADD_AP events instead\n\n      // ON_ACTIVATE_DRAW_AP removed - use standard ADD_AP and DRAW_CARDS events instead\n\n      // Simplified AP system: No initiative-specific bonuses\n      // All AP bonuses are now immediate ADD_AP events\n\n      case 'SKANDALSPIRALE_TRIGGER':\n        {\n          // Determine which player currently has lower total influence\n          const p1Influence = sumRow([...state.board[1].aussen]);\n          const p2Influence = sumRow([...state.board[2].aussen]);\n          const disadvantaged = p1Influence === p2Influence ? null : p1Influence < p2Influence ? 1 : 2;\n          if (disadvantaged) {\n            // Roll a d6 using rng\n            const roll = rng.randomInt(6) + 1; // 1-6\n            events.unshift({\n              type: 'LOG',\n              msg: `Skandalspirale: Spieler ${disadvantaged} w√ºrfelt eine ${roll}.`\n            });\n            if (roll <= 3) {\n              const loss = roll; // 1,2,3 influence loss\n              const strongest = strongestGov(state, disadvantaged);\n              if (strongest) {\n                events.unshift({\n                  type: 'BUFF_STRONGEST_GOV',\n                  player: disadvantaged,\n                  amount: -loss\n                });\n                events.unshift({\n                  type: 'LOG',\n                  msg: `Skandalspirale: ${strongest.name} verliert ${loss} Einfluss.`\n                });\n              }\n            } else {\n              events.unshift({\n                type: 'LOG',\n                msg: 'Skandalspirale: Test bestanden ‚Äì kein Einflussverlust.'\n              });\n            }\n          } else {\n            events.unshift({\n              type: 'LOG',\n              msg: 'Skandalspirale: Gleichstand ‚Äì kein Effekt.'\n            });\n          }\n          break;\n        }\n    }\n    // generic after snapshot diff for AP\n    if (state.actionPoints[1] !== beforeAP[1] || state.actionPoints[2] !== beforeAP[2]) {\n      logger.dbg(`AP delta P1 ${beforeAP[1]}->${state.actionPoints[1]} | P2 ${beforeAP[2]}->${state.actionPoints[2]}`);\n    }\n  }\n  // Ensure React viewers see mutated hand arrays by creating shallow copies\n  try {\n    state.hands = {\n      1: state.hands[1] ? [...state.hands[1]] : [],\n      2: state.hands[2] ? [...state.hands[2]] : []\n    };\n    logger.dbg('resolveQueue: hand arrays shallow-copied to trigger UI updates');\n  } catch (e) {\n    logger.dbg('resolveQueue: failed to shallow-copy hands', e);\n  }\n}","map":{"version":3,"names":["getStrongestGovernment","registerTrap","logAP","logDraw","logDiscardRandom","logDeactivateRandom","logBuffStrongest","logShield","logDeactivateCard","logOpportunist","getGlobalRNG","logger","strongestGovernmentUid","state","p","_state$board$p","govRow","board","aussen","length","alive","filter","g","deactivated","sorted","slice","sort","a","b","influence","tempBuffs","tempDebuffs","uid","other","logPush","msg","log","push","strongestGov","row","c","publicNames","innen","map","name","hasPublic","includes","findCardByUidOnBoard","lane","arr","hit","find","resolveQueue","events","hooks","rng","target","proxy","Proxy","get","t","prop","receiver","args","_hooks$onEnqueue","onEnqueue","call","Array","prototype","apply","_hooks$onEnqueue2","unshift","_hooks$onDequeue","ev","shift","undefined","onDequeue","Reflect","dbg","type","beforeAP","actionPoints","_state$effectFlags$ot","cur","player","next","Math","max","amount","effectFlags","opportunistActive","mirror","handBefore","hands","i","top","decks","handAfter","hand","idx","randomInt","card","splice","discard","activeCards","pick","_deactivatedBy","indexOf","shields","Set","targetUid","add","effectKey","placeholder","delete","findIndex","key","reason","ownBoard","cd","require","mediaNames","mediaCount","_cd$getCardDetails","_cd$getCardDetails$ca","sub","getCardDetails","subcategories","legacy","tag","isArray","min","tgt","_state$effectFlags$ot2","abs","kind","opp","initiativesLocked","doublePublicAura","active","_state$board$ev$playe","_state$board$ev$playe2","_state$effectFlags$ev","publicCards","instantSlot","sofort","lastInstant","oligarchCount","_getCardDetails","_ref","_getCardDetails$call","details","hasNewTag","legacyTag","amt","elonMusk","markZuckerberg","markZuckerbergUsed","aiWeiwei","samAltman","_getCardDetails2","_ref2","_getCardDetails2$call","p1Influence","sumRow","p2Influence","disadvantaged","roll","loss","strongest","e"],"sources":["C:/Users/skank/Videos/Cards/Milchcards/src/utils/queue.ts"],"sourcesContent":["import { GameState, Player, PoliticianCard, Card } from '../types/game';\nimport { EffectEvent } from '../types/effects';\nimport { getStrongestGovernment } from './targets';\nimport { AP_CAP, MAX_DISCOUNT, MAX_REFUND } from '../config/gameConstants';\nimport { registerTrap } from './traps';\nimport {\n  logAP, logDiscount, logRefund, logDraw, logDiscardRandom,\n  logDeactivateRandom, logBuffStrongest, logShield, logDeactivateCard,\n  logInitiativeAura, logAiWeiwei, logPlattformBonus, logOpportunist\n} from './logs';\nimport { getGlobalRNG } from '../services/rng';\nimport { logger } from '../debug/logger';\n// Helper to find strongest government uid for new intents\nfunction strongestGovernmentUid(state: GameState, p: Player): number | null {\n  const govRow = state.board[p]?.aussen as PoliticianCard[];\n  if (!govRow || govRow.length === 0) return null;\n  const alive = govRow.filter(g => !(g as any).deactivated);\n  if (!alive.length) return null;\n  const sorted = alive.slice().sort((a,b) => (b.influence + (b.tempBuffs||0) - (b.tempDebuffs||0)) - (a.influence + (a.tempBuffs||0) - (a.tempDebuffs||0)));\n  return sorted[0].uid;\n}\n\nfunction other(p: Player): Player { return p === 1 ? 2 : 1; }\nfunction logPush(state: GameState, msg: string) { state.log.push(msg); }\n\nfunction strongestGov(state: GameState, p: Player): PoliticianCard | null {\n  const row = state.board[p].aussen as PoliticianCard[];\n  if (!row.length) return null;\n  const alive = row.filter(c => !c.deactivated);\n  if (alive.length === 0) return null;\n  return alive.slice().sort((a,b) => (b.influence + (b.tempBuffs||0) - (b.tempDebuffs||0)) - (a.influence + (a.tempBuffs||0) - (a.tempDebuffs||0)))[0];\n}\n\nfunction publicNames(state: GameState, p: Player): string[] {\n  return state.board[p].innen.map(c => c.name);\n}\n\nfunction hasPublic(state: GameState, p: Player, name: string): boolean {\n  return publicNames(state, p).includes(name);\n}\n\nfunction findCardByUidOnBoard(state: GameState, uid: number): Card | null {\n  for (const p of [1,2] as const) {\n    for (const lane of ['innen','aussen','sofort'] as const) {\n      const arr = state.board[p][lane];\n      const hit = arr.find(c => c.uid === uid);\n      if (hit) return hit;\n    }\n  }\n  return null;\n}\n\nexport function resolveQueue(state: GameState, events: EffectEvent[], hooks?: { onEnqueue?: (ev: EffectEvent) => void; onDequeue?: (ev: EffectEvent) => void }) {\n  const rng = getGlobalRNG();\n  // If hooks provided, wrap events in a proxy that notifies on push/unshift/shift\n  if (hooks) {\n    const target = events as any[];\n    const proxy = new Proxy(target, {\n      get(t, prop, receiver) {\n        if (prop === 'push') {\n          return function(...args: any[]) {\n            for (const a of args) hooks.onEnqueue?.(a);\n            return Array.prototype.push.apply(t, args);\n          };\n        }\n        if (prop === 'unshift') {\n          return function(...args: any[]) {\n            for (const a of args) hooks.onEnqueue?.(a);\n            return Array.prototype.unshift.apply(t, args);\n          };\n        }\n        if (prop === 'shift') {\n          return function() {\n            const ev = Array.prototype.shift.apply(t);\n            if (ev !== undefined) hooks.onDequeue?.(ev);\n            return ev;\n          };\n        }\n        return Reflect.get(t, prop, receiver);\n      }\n    });\n    // replace local events reference with proxy so the rest of function can use it normally\n    events = proxy as unknown as EffectEvent[];\n  }\n\n  // Single pass FIFO\n  while (events.length) {\n    const ev = events.shift()!;\n    logger.dbg(`DQ ${ev.type}`, ev);\n    // Capture small snapshot for delta calc\n    const beforeAP = { ...state.actionPoints };\n\n    switch (ev.type) {\n      case 'LOG': {\n        logPush(state, ev.msg);\n        break;\n      }\n\n      case 'ADD_AP': {\n        const cur = state.actionPoints[ev.player];\n        const next = Math.max(0, cur + ev.amount);\n        state.actionPoints[ev.player] = next;\n        logger.dbg(`ADD_AP before=${cur} amount=${ev.amount} after=${state.actionPoints[ev.player]}`);\n\n        // Opportunist AP-Spiegelung (falls aktiv beim Gegner)\n        if (state.effectFlags[other(ev.player)]?.opportunistActive && ev.amount > 0) {\n          const mirror = { type: 'ADD_AP', player: other(ev.player), amount: ev.amount } as EffectEvent;\n          events.unshift(mirror);\n          logPush(state, `Opportunist: AP +${ev.amount} gespiegelt.`);\n        }\n\n        logPush(state, logAP(ev.player, cur, next));\n        break;\n      }\n\n      case 'DRAW_CARDS': {\n        const handBefore = state.hands[ev.player].length;\n        for (let i = 0; i < ev.amount; i++) {\n          const top = state.decks[ev.player].shift();\n          if (top) {\n            state.hands[ev.player].push(top);\n            logPush(state, logDraw(ev.player, top.name));\n          }\n        }\n        const handAfter = state.hands[ev.player].length;\n        logger.dbg(`DRAW_CARDS player=${ev.player} before=${handBefore} after=${handAfter}`);\n        break;\n      }\n\n      case 'DISCARD_RANDOM_FROM_HAND': {\n        const hand = state.hands[ev.player];\n        for (let i = 0; i < ev.amount && hand.length > 0; i++) {\n          const idx = rng.randomInt(hand.length);\n          const [card] = hand.splice(idx, 1);\n          state.discard.push(card);\n          logPush(state, logDiscardRandom(ev.player, card.name));\n        }\n        break;\n      }\n\n      case 'DEACTIVATE_RANDOM_HAND': {\n        // Deaktivieren von Handkarten (nicht entfernen)\n        const hand = state.hands[ev.player];\n        const activeCards = hand.filter(c => !(c as any).deactivated);\n        logger.dbg(`DEACTIVATE_RANDOM_HAND: P${ev.player} handSize=${hand.length} activeCandidates=${activeCards.length}`);\n        if (activeCards.length === 0) {\n          logPush(state, `Oprah: no active hand cards to deactivate for P${ev.player}`);\n          break;\n        }\n        for (let i = 0; i < ev.amount && activeCards.length > 0; i++) {\n          const card = rng.pick(activeCards);\n          logger.dbg(`DEACTIVATE_RANDOM_HAND: picked=${card ? card.name : 'undefined'} for P${ev.player}`);\n          if (card) {\n            (card as any).deactivated = true;\n            (card as any)._deactivatedBy = 'OPRAH';\n            logPush(state, logDeactivateRandom(ev.player, card.name));\n            // Entferne aus activeCards f√ºr n√§chste Iteration\n            const idx = activeCards.indexOf(card);\n            if (idx > -1) activeCards.splice(idx, 1);\n          }\n        }\n        break;\n      }\n\n      // Legacy cases - removed\n      // SET_DISCOUNT and REFUND_NEXT_INITIATIVE are no longer supported\n      // Use ADD_AP instead\n\n      case 'GRANT_SHIELD': {\n        if (!state.shields) state.shields = new Set();\n        // Wenn kein spezifischer targetUid angegeben ist, verwende Platzhalter pro Spieler (-1 oder -2)\n        const uid = ev.targetUid !== undefined ? ev.targetUid : (ev.player === 1 ? -1 : -2);\n        state.shields.add(uid);\n        logPush(state, logShield(uid));\n        break;\n      }\n\n      case 'DEACTIVATE_CARD': {\n        const card = findCardByUidOnBoard(state, ev.targetUid);\n        if (card) {\n          (card as any).deactivated = true;\n          logPush(state, logDeactivateCard(card.name));\n\n          // Falls die Karte eine Shield-Aura ist, entferne Spielerschilde\n          if ((card as any).effectKey === 'init.intelligence_liaison.shield_aura') {\n            if (state.shields) {\n              const placeholder = ev.player === 1 ? -1 : -2;\n              state.shields.delete(placeholder);\n            }\n          }\n        }\n        break;\n      }\n\n      case 'REACTIVATE_CARD': {\n        const card = findCardByUidOnBoard(state, ev.targetUid);\n        if (card) {\n          (card as any).deactivated = false;\n          logPush(state, `üîÑ ${card.name} wurde reaktiviert`);\n        }\n        break;\n      }\n\n      case 'RETURN_TO_HAND': {\n        const card = findCardByUidOnBoard(state, ev.targetUid);\n        if (card) {\n          // Remove from board\n          for (const p of [1, 2] as const) {\n            for (const lane of ['innen', 'aussen', 'sofort'] as const) {\n              const idx = state.board[p][lane].findIndex(c => c.uid === ev.targetUid);\n              if (idx !== -1) {\n                state.board[p][lane].splice(idx, 1);\n                // Add to hand\n                state.hands[ev.player].push(card);\n                logPush(state, `üîÑ ${card.name} wurde zur Hand zur√ºckgegeben`);\n                break;\n              }\n            }\n          }\n        }\n        break;\n      }\n\n      case 'CANCEL_CARD': {\n        const card = findCardByUidOnBoard(state, ev.targetUid);\n        if (card) {\n          // Remove from board and add to discard\n          for (const p of [1, 2] as const) {\n            for (const lane of ['innen', 'aussen', 'sofort'] as const) {\n              const idx = state.board[p][lane].findIndex(c => c.uid === ev.targetUid);\n              if (idx !== -1) {\n                state.board[p][lane].splice(idx, 1);\n                state.discard.push(card);\n                logPush(state, `‚ùå ${card.name} wurde annulliert`);\n                break;\n              }\n            }\n          }\n        }\n        break;\n      }\n\n      case 'REGISTER_TRAP': {\n        registerTrap(state, ev.player, (ev as any).key);\n        logPush(state, `Trap registered: ${(ev as any).key} (P${ev.player})`);\n        break;\n      }\n\n      case 'BUFF_STRONGEST_GOV':\n      case 'ADJUST_INFLUENCE': { // Alias auf BUFF_STRONGEST_GOV\n        const player = ev.player;\n        let amount = (ev as any).amount;\n        const reason = (ev as any).reason as string | undefined;\n\n        // Special intent: Oprah media buff - compute amount based on media cards on own board\n        if (reason === 'OPRAH_MEDIA_BUFF_INTENT') {\n          const ownBoard = [\n            ...state.board[player].innen,\n            ...state.board[player].aussen,\n          ];\n          const cd = require('../data/cardDetails') as any;\n          const mediaNames = ['Oprah Winfrey', 'Mark Zuckerberg', 'Tim Cook', 'Sam Altman'];\n          const mediaCount = ownBoard.filter(c => {\n            const sub = cd.getCardDetails?.(c.name)?.subcategories as string[] | undefined;\n            const legacy = (c as any).tag === 'Media' || (c as any).tag === 'Medien';\n            return (Array.isArray(sub) && sub.includes('Medien')) || legacy || mediaNames.includes(c.name);\n          }).length;\n          amount = Math.min(mediaCount, 3);\n          if (amount > 0) {\n            events.unshift({ type: 'LOG', msg: `Oprah Winfrey: Media buff calculated +${amount} (max 3).` });\n          } else {\n            events.unshift({ type: 'LOG', msg: `Oprah Winfrey: No media cards on board - no buff.` });\n          }\n        }\n\n        const tgt = getStrongestGovernment(state, player);\n        if (tgt && amount !== 0) {\n          if (amount >= 0) {\n            (tgt as PoliticianCard).tempBuffs = ((tgt as PoliticianCard).tempBuffs || 0) + amount;\n          } else {\n            (tgt as PoliticianCard).tempDebuffs = ((tgt as PoliticianCard).tempDebuffs || 0) + Math.abs(amount);\n          }\n          logPush(state, logBuffStrongest(player, tgt.name, amount));\n\n          // Opportunist-Spiegelung (falls aktiv beim Gegner)\n          if (state.effectFlags[other(player)]?.opportunistActive && amount > 0) {\n            const mirror = { type: 'BUFF_STRONGEST_GOV', player: other(player), amount } as EffectEvent;\n            events.unshift(mirror);\n            logPush(state, logOpportunist(other(player), amount));\n          }\n        }\n        break;\n      }\n\n      case 'DEBUFF_CARD': {\n        const card = findCardByUidOnBoard(state, ev.targetUid);\n        if (card && card.kind === 'pol') {\n          const tgt = card as any;\n          tgt.tempDebuffs = (tgt.tempDebuffs || 0) + Math.abs((ev as any).amount);\n          logPush(state, `üîª ${tgt.name}: -${Math.abs((ev as any).amount)} Influence`);\n        }\n        break;\n      }\n\n      // ===== New intent event handlers =====\n\n      case 'DEACTIVATE_STRONGEST_ENEMY_GOV': {\n        const opp: Player = ev.player === 1 ? 2 : 1;\n        const uid = strongestGovernmentUid(state, opp);\n        if (uid !== null) {\n          events.unshift({ type: 'DEACTIVATE_CARD', player: opp, targetUid: uid });\n          events.unshift({ type: 'LOG', msg: 'Party Offensive: strongest enemy Government deactivated.' });\n        } else {\n          events.unshift({ type: 'LOG', msg: 'Party Offensive: no enemy Government to deactivate.' });\n        }\n        break;\n      }\n\n      case 'LOCK_OPPONENT_INITIATIVES_EOT': {\n        const opp: Player = ev.player === 1 ? 2 : 1;\n        state.effectFlags[opp].initiativesLocked = true;\n        events.unshift({ type: 'LOG', msg: 'Opposition Blockade: opponent initiatives locked until end of turn.' });\n        break;\n      }\n\n      case 'SET_DOUBLE_PUBLIC_AURA': {\n        state.effectFlags[ev.player].doublePublicAura = true;\n        events.unshift({ type: 'LOG', msg: 'Influencer Campaign: next Public aura will be doubled.' });\n        break;\n      }\n\n      case 'SET_OPPORTUNIST_ACTIVE': {\n        const { player, active } = ev as { type: 'SET_OPPORTUNIST_ACTIVE'; player: Player; active: boolean };\n        state.effectFlags[player].opportunistActive = active;\n        if (active) {\n          events.unshift({ type: 'LOG', msg: 'Opportunist: AP effects will be mirrored until end of turn.' });\n        }\n        break;\n      }\n\n      case 'INITIATIVE_ACTIVATED': {\n        // Initiative activation event - trigger reactions from public cards\n        logPush(state, 'Initiative activated.');\n\n        // Check for public cards that react to initiative activation\n        const publicCards = state.board[ev.player]?.innen || [];\n\n        // Shadow Lobbying: +1 influence per own Oligarch-tag on board (max +3)\n        // Detect if the activating initiative was Shadow Lobbying by checking the last played instant in slot\n        const instantSlot = state.board[ev.player]?.sofort || [];\n        const lastInstant = instantSlot[0] as any;\n        if (lastInstant && (lastInstant.effectKey === 'init.shadow_lobbying.per_oligarch' || lastInstant.name === 'Shadow Lobbying')) {\n          const ownBoard = [\n            ...state.board[ev.player].innen,\n            ...state.board[ev.player].aussen,\n          ];\n          const oligarchCount = ownBoard.filter(c => {\n            const details = (c as any).name ? require('../data/cardDetails') as any : null;\n            // Fallback: try BaseSpecial tag if available\n            const sub = (require('../data/cardDetails') as any).getCardDetails?.((c as any).name)?.subcategories as string[] | undefined;\n            const hasNewTag = Array.isArray(sub) && sub.includes('Oligarch');\n            const legacyTag = (c as any).tag === 'Oligarch';\n            return hasNewTag || legacyTag;\n          }).length;\n          const amt = Math.min(oligarchCount, 3);\n          if (amt > 0) {\n            events.unshift({ type: 'BUFF_STRONGEST_GOV', player: ev.player, amount: amt });\n            events.unshift({ type: 'LOG', msg: `Shadow Lobbying: st√§rkste Regierung +${amt} Einfluss (pro Oligarch, max 3).` });\n          } else {\n            events.unshift({ type: 'LOG', msg: `Shadow Lobbying: Keine Oligarchen ‚Äì kein Einfluss-Buff.` });\n          }\n        }\n\n        // Elon Musk: +1 AP on initiative activation\n        const elonMusk = publicCards.find(card =>\n          card.kind === 'spec' && (card as any).name === 'Elon Musk'\n        );\n        if (elonMusk) {\n          events.unshift({ type: 'ADD_AP', player: ev.player, amount: 1 });\n          events.unshift({ type: 'LOG', msg: 'Elon Musk: +1 AP on initiative activation.' });\n        }\n\n        // Mark Zuckerberg: +1 AP on initiative activation (once per turn)\n        const markZuckerberg = publicCards.find(card =>\n          card.kind === 'spec' && (card as any).name === 'Mark Zuckerberg'\n        );\n        if (markZuckerberg && !state.effectFlags[ev.player]?.markZuckerbergUsed) {\n          events.unshift({ type: 'ADD_AP', player: ev.player, amount: 1 });\n          events.unshift({ type: 'LOG', msg: 'Mark Zuckerberg: +1 AP on initiative activation.' });\n          if (!state.effectFlags[ev.player]) {\n            state.effectFlags[ev.player] = { markZuckerbergUsed: false };\n          }\n          state.effectFlags[ev.player].markZuckerbergUsed = true;\n        }\n\n        // Ai Weiwei: +1 card +1 AP on initiative activation\n        const aiWeiwei = publicCards.find(card =>\n          card.kind === 'spec' && (card as any).name === 'Ai Weiwei'\n        );\n        if (aiWeiwei) {\n          events.unshift({ type: 'DRAW_CARDS', player: ev.player, amount: 1 });\n          events.unshift({ type: 'ADD_AP', player: ev.player, amount: 1 });\n          events.unshift({ type: 'LOG', msg: 'Ai Weiwei: +1 card +1 AP on initiative activation.' });\n        }\n\n        // Sam Altman: +1 card +1 AP on AI-related initiative activation\n        const samAltman = publicCards.find(card =>\n          card.kind === 'spec' && (card as any).name === 'Sam Altman'\n        );\n        if (samAltman) {\n          // Check if the activated initiative is AI-related (would need to be passed as context)\n          // For now, this is handled via the initiative card's tag check in the activation flow\n          events.unshift({ type: 'LOG', msg: 'Sam Altman: AI initiative detected - bonus ready.' });\n        }\n\n        // Digitaler Wahlkampf: draw 1 card per own Media-tag on board\n        if (lastInstant && (lastInstant.effectKey === 'init.digital_campaign.per_media' || lastInstant.name === 'Digitaler Wahlkampf')) {\n          const ownBoard = [\n            ...state.board[ev.player].innen,\n            ...state.board[ev.player].aussen,\n          ];\n          const mediaCount = ownBoard.filter(c => {\n            const sub = (require('../data/cardDetails') as any).getCardDetails?.((c as any).name)?.subcategories as string[] | undefined;\n            const legacy = (c as any).tag === 'Medien' || (c as any).tag === 'Media';\n            return (Array.isArray(sub) && sub.includes('Medien')) || legacy || (Array.isArray(sub) && sub.includes('Medien')) || (Array.isArray(sub) && sub.includes('Medien'));\n          }).length;\n          if (mediaCount > 0) {\n            events.unshift({ type: 'DRAW_CARDS', player: ev.player, amount: mediaCount });\n            events.unshift({ type: 'LOG', msg: `Digitaler Wahlkampf: ziehe ${mediaCount} Karte(n) (pro Medien-Karte).` });\n          } else {\n            events.unshift({ type: 'LOG', msg: `Digitaler Wahlkampf: Keine Medien-Karten auf dem Feld.` });\n          }\n        }\n\n        break;\n      }\n\n      // ONCE_AP_ON_ACTIVATION removed - use standard ADD_AP events instead\n\n      // ON_ACTIVATE_DRAW_AP removed - use standard ADD_AP and DRAW_CARDS events instead\n\n      // Simplified AP system: No initiative-specific bonuses\n      // All AP bonuses are now immediate ADD_AP events\n\n      case 'SKANDALSPIRALE_TRIGGER': {\n        // Determine which player currently has lower total influence\n        const p1Influence = sumRow([...state.board[1].aussen]);\n        const p2Influence = sumRow([...state.board[2].aussen]);\n        const disadvantaged: Player | null = p1Influence === p2Influence ? null : (p1Influence < p2Influence ? 1 : 2);\n        if (disadvantaged) {\n          // Roll a d6 using rng\n          const roll = rng.randomInt(6) + 1; // 1-6\n          events.unshift({ type: 'LOG', msg: `Skandalspirale: Spieler ${disadvantaged} w√ºrfelt eine ${roll}.` });\n          if (roll <= 3) {\n            const loss = roll; // 1,2,3 influence loss\n            const strongest = strongestGov(state, disadvantaged);\n            if (strongest) {\n              events.unshift({ type: 'BUFF_STRONGEST_GOV', player: disadvantaged, amount: -loss });\n              events.unshift({ type: 'LOG', msg: `Skandalspirale: ${strongest.name} verliert ${loss} Einfluss.` });\n            }\n          } else {\n            events.unshift({ type: 'LOG', msg: 'Skandalspirale: Test bestanden ‚Äì kein Einflussverlust.' });\n          }\n        } else {\n          events.unshift({ type: 'LOG', msg: 'Skandalspirale: Gleichstand ‚Äì kein Effekt.' });\n        }\n        break;\n      }\n\n\n    }\n    // generic after snapshot diff for AP\n    if (state.actionPoints[1] !== beforeAP[1] || state.actionPoints[2] !== beforeAP[2]) {\n      logger.dbg(`AP delta P1 ${beforeAP[1]}->${state.actionPoints[1]} | P2 ${beforeAP[2]}->${state.actionPoints[2]}`);\n    }\n  }\n  // Ensure React viewers see mutated hand arrays by creating shallow copies\n  try {\n    state.hands = {\n      1: state.hands[1] ? [...state.hands[1]] : [],\n      2: state.hands[2] ? [...state.hands[2]] : []\n    } as any;\n    logger.dbg('resolveQueue: hand arrays shallow-copied to trigger UI updates');\n  } catch (e) {\n    logger.dbg('resolveQueue: failed to shallow-copy hands', e);\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}