{"ast":null,"code":"import _objectSpread from\"C:/Users/skank/Videos/Cards/Milchcards/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{sumRow,getCardActionPointCost}from'../utils/gameUtils';// Basic AI player module with three difficulty presets.\n// takeTurn applies a state update via setGameState(prev => newState).\nexport function takeTurn(setGameState,difficulty,log){setGameState(prev=>{var _prev$aiEnabled$,_prev$aiEnabled;const aiEnabled=(_prev$aiEnabled$=(_prev$aiEnabled=prev.aiEnabled)===null||_prev$aiEnabled===void 0?void 0:_prev$aiEnabled[2])!==null&&_prev$aiEnabled$!==void 0?_prev$aiEnabled$:false;if(!aiEnabled||prev.current!==2)return prev;const hand=prev.hands[2];const playerBoard=prev.board[1];const aiBoard=prev.board[2];const aiAP=prev.actionPoints[2];log(\"\\uD83E\\uDD16 AI(\".concat(difficulty,\") Analyse: P=\").concat(sumRow([...playerBoard.aussen]),\" vs AI=\").concat(sumRow([...aiBoard.aussen])));if(aiAP<=0){log('ðŸ¤– AI passt - keine AP mehr.');return _objectSpread(_objectSpread({},prev),{},{passed:_objectSpread(_objectSpread({},prev.passed),{},{2:true})});}// Use the centralized decision helper so tests and takeTurn share logic\nconst action=decideBestAction(prev,2,difficulty);if(action.type==='pass'){log('ðŸ¤– AI passt - keine guten Aktionen.');return _objectSpread(_objectSpread({},prev),{},{passed:_objectSpread(_objectSpread({},prev.passed),{},{2:true})});}// Execute chosen play\nconst playIndex=action.type==='play'?action.index:-1;const chosenCard=prev.hands[2][playIndex];if(!chosenCard){log('ðŸ¤– AI Fehler: UngÃ¼ltiger Kartenindex, passe.');return _objectSpread(_objectSpread({},prev),{},{passed:_objectSpread(_objectSpread({},prev.passed),{},{2:true})});}const apCost=getCardActionPointCost(chosenCard,prev,2);function detectLaneForCard(card){if(card.T&&card.T>=2)return'aussen';if(card.tag&&['Staatsoberhaupt','Regierungschef','Diplomat'].includes(card.tag))return'aussen';return'innen';}if(chosenCard.kind==='pol'){var _action$lane,_influence;const lane=(_action$lane=action.lane)!==null&&_action$lane!==void 0?_action$lane:detectLaneForCard(chosenCard);const newP2Hand=[...prev.hands[2]];const[played]=newP2Hand.splice(playIndex,1);const newP2Lane=[...prev.board[2][lane],played];const newP2Board=_objectSpread(_objectSpread({},prev.board[2]),{},{[lane]:newP2Lane});const newBoard=_objectSpread(_objectSpread({},prev.board),{},{2:newP2Board});const newActionPoints=_objectSpread(_objectSpread({},prev.actionPoints),{},{2:prev.actionPoints[2]-apCost});const laneName=lane==='aussen'?'Regierungsreihe':'Ã–ffentlichkeitsreihe';const power=(_influence=played.influence)!==null&&_influence!==void 0?_influence:0;log(\"\\uD83E\\uDD16 AI spielt \".concat(played.name,\" (\").concat(power,\" Einfluss) nach \").concat(laneName,\".\"));return _objectSpread(_objectSpread({},prev),{},{hands:_objectSpread(_objectSpread({},prev.hands),{},{2:newP2Hand}),board:newBoard,actionPoints:newActionPoints});}// spec cards\nconst newP2Hand=[...prev.hands[2]];const[playedSpec]=newP2Hand.splice(playIndex,1);const newActionPoints=_objectSpread(_objectSpread({},prev.actionPoints),{},{2:prev.actionPoints[2]-apCost});if(playedSpec.type==='Dauerhaft-Initiative'){const slotType=playedSpec.slot==='Ã–ffentlichkeit'?'public':'government';if(slotType==='government'&&!prev.permanentSlots[2].government){const newPermanentSlots=_objectSpread(_objectSpread({},prev.permanentSlots),{},{2:_objectSpread(_objectSpread({},prev.permanentSlots[2]),{},{government:playedSpec})});log(\"\\uD83E\\uDD16 AI legt \".concat(playedSpec.name,\" in Regierung Spezial-Slot.\"));return _objectSpread(_objectSpread({},prev),{},{hands:_objectSpread(_objectSpread({},prev.hands),{},{2:newP2Hand}),permanentSlots:newPermanentSlots,actionPoints:newActionPoints});}else if(slotType==='public'&&!prev.permanentSlots[2].public){const newPermanentSlots=_objectSpread(_objectSpread({},prev.permanentSlots),{},{2:_objectSpread(_objectSpread({},prev.permanentSlots[2]),{},{public:playedSpec})});log(\"\\uD83E\\uDD16 AI legt \".concat(playedSpec.name,\" in \\xD6ffentlichkeit Spezial-Slot.\"));return _objectSpread(_objectSpread({},prev),{},{hands:_objectSpread(_objectSpread({},prev.hands),{},{2:newP2Hand}),permanentSlots:newPermanentSlots,actionPoints:newActionPoints});}}log(\"\\uD83E\\uDD16 AI spielt Spezialkarte \".concat(playedSpec.name,\".\"));return _objectSpread(_objectSpread({},prev),{},{hands:_objectSpread(_objectSpread({},prev.hands),{},{2:newP2Hand}),actionPoints:newActionPoints});});}// Expose a light-weight decision helper for tests\nexport function decideBestAction(state,player){let difficulty=arguments.length>2&&arguments[2]!==undefined?arguments[2]:'easy';// reuse takeTurn logic but without mutating state: produce an action suggestions\nconst hand=state.hands[player];const aiAP=state.actionPoints[player];if(aiAP<=0)return{type:'pass'};// Policy: maximize influence placed per round. If current lead is already durable, pass.\nconst candidates=[];const myInf=sumRow([...state.board[player].aussen]);const opponent=player===1?2:1;const oppInf=sumRow([...state.board[opponent].aussen]);// If already holding a durable lead, pass\nconst currentLead=myInf-oppInf;if(currentLead>=3)return{type:'pass'};hand.forEach((card,idx)=>{const apCost=getCardActionPointCost(card,state,player);if(apCost>aiAP)return;let score=0;let suggestedLane=undefined;if(card.kind==='pol'){const pol=card;suggestedLane=pol.tag==='Staatsoberhaupt'||pol.tag==='Regierungschef'||pol.tag==='Diplomat'?'aussen':'innen';const influence=pol.influence||0;// Strong preference: influence per AP (primary objective)\nscore=influence/Math.max(1,apCost)*100;// small bonus for placing into government lane\nif(suggestedLane==='aussen')score+=15;}else if(card.kind==='spec'){const spec=card;// Specs less prioritized; interventions get moderate score\nif(spec.type==='Intervention')score=30;else score=20+(spec.bp||0)*2;}// difficulty randomness\nif(difficulty==='medium')score+=Math.floor(Math.random()*6)-2;if(difficulty==='hard')score+=4;candidates.push({index:idx,card,score,lane:suggestedLane});});if(candidates.length===0)return{type:'pass'};candidates.sort((a,b)=>b.score-a.score);// If hard difficulty, run light Monte Carlo rollouts from top candidates\nif(difficulty==='hard'){var _rolloutScores$get;const top=candidates.slice(0,Math.min(4,candidates.length));const rolloutScores=new Map();const simulate=(stateSnapshot,playIndex,lane)=>{// Very lightweight simulation: apply the play and evaluate immediate board influence difference\nconst simState=JSON.parse(JSON.stringify(stateSnapshot));const card=simState.hands[player][playIndex];const apCost=getCardActionPointCost(card,simState,player);// apply simple play\nsimState.actionPoints[player]=Math.max(0,simState.actionPoints[player]-apCost);simState.hands[player].splice(playIndex,1);if(card.kind==='pol'){const targetLane=lane!==null&&lane!==void 0?lane:card.tag==='Staatsoberhaupt'||card.tag==='Regierungschef'||card.tag==='Diplomat'?'aussen':'innen';simState.board[player][targetLane].push(card);}else if(card.kind==='spec'&&card.type==='Intervention'){simState.traps[player].push(card);}// Quick eval: difference in government influence\nconst myInf=sumRow([...simState.board[player].aussen]);const opp=player===1?2:1;const oppInf=sumRow([...simState.board[opp].aussen]);return myInf-oppInf;};for(const c of top){let acc=0;const trials=6;for(let t=0;t<trials;t++){acc+=simulate(state,c.index,c.lane);}rolloutScores.set(c.index,acc/trials+c.score);}// pick best by rollout-adjusted score\nlet bestIdx=top[0].index;let bestScore=(_rolloutScores$get=rolloutScores.get(bestIdx))!==null&&_rolloutScores$get!==void 0?_rolloutScores$get:top[0].score;for(const c of top){var _rolloutScores$get2;const s=(_rolloutScores$get2=rolloutScores.get(c.index))!==null&&_rolloutScores$get2!==void 0?_rolloutScores$get2:c.score;if(s>bestScore){bestScore=s;bestIdx=c.index;}}const chosen=candidates.find(x=>x.index===bestIdx);return{type:'play',index:chosen.index,lane:chosen.lane};}const best=candidates[0];return{type:'play',index:best.index,lane:best.lane};}","map":{"version":3,"names":["sumRow","getCardActionPointCost","takeTurn","setGameState","difficulty","log","prev","_prev$aiEnabled$","_prev$aiEnabled","aiEnabled","current","hand","hands","playerBoard","board","aiBoard","aiAP","actionPoints","concat","aussen","_objectSpread","passed","action","decideBestAction","type","playIndex","index","chosenCard","apCost","detectLaneForCard","card","T","tag","includes","kind","_action$lane","_influence","lane","newP2Hand","played","splice","newP2Lane","newP2Board","newBoard","newActionPoints","laneName","power","influence","name","playedSpec","slotType","slot","permanentSlots","government","newPermanentSlots","public","state","player","arguments","length","undefined","candidates","myInf","opponent","oppInf","currentLead","forEach","idx","score","suggestedLane","pol","Math","max","spec","bp","floor","random","push","sort","a","b","_rolloutScores$get","top","slice","min","rolloutScores","Map","simulate","stateSnapshot","simState","JSON","parse","stringify","targetLane","traps","opp","c","acc","trials","t","set","bestIdx","bestScore","get","_rolloutScores$get2","s","chosen","find","x","best"],"sources":["C:/Users/skank/Videos/Cards/Milchcards/src/ai/aiPlayer.ts"],"sourcesContent":["import { GameState, Card, Player } from '../types/game';\nimport { sumRow, getCardActionPointCost } from '../utils/gameUtils';\nimport { buildDeckFromEntries } from '../utils/gameUtils';\n\nexport type Difficulty = 'easy' | 'medium' | 'hard';\n\nexport type AIAction =\n  | { type: 'pass' }\n  | { type: 'play'; index: number; lane?: 'innen' | 'aussen' };\n\n// Basic AI player module with three difficulty presets.\n// takeTurn applies a state update via setGameState(prev => newState).\nexport function takeTurn(\n  setGameState: React.Dispatch<React.SetStateAction<GameState>>,\n  difficulty: Difficulty,\n  log: (msg: string) => void\n) {\n  setGameState(prev => {\n    const aiEnabled = prev.aiEnabled?.[2] ?? false;\n    if (!aiEnabled || prev.current !== 2) return prev;\n\n    const hand = prev.hands[2];\n    const playerBoard = prev.board[1];\n    const aiBoard = prev.board[2];\n    const aiAP = prev.actionPoints[2];\n\n    log(`ðŸ¤– AI(${difficulty}) Analyse: P=${sumRow([...playerBoard.aussen])} vs AI=${sumRow([...aiBoard.aussen])}`);\n\n    if (aiAP <= 0) {\n      log('ðŸ¤– AI passt - keine AP mehr.');\n      return { ...prev, passed: { ...prev.passed, 2: true } };\n    }\n\n    // Use the centralized decision helper so tests and takeTurn share logic\n    const action = decideBestAction(prev, 2, difficulty);\n    if (action.type === 'pass') {\n      log('ðŸ¤– AI passt - keine guten Aktionen.');\n      return { ...prev, passed: { ...prev.passed, 2: true } };\n    }\n\n    // Execute chosen play\n    const playIndex = action.type === 'play' ? action.index : -1;\n    const chosenCard = prev.hands[2][playIndex];\n    if (!chosenCard) {\n      log('ðŸ¤– AI Fehler: UngÃ¼ltiger Kartenindex, passe.');\n      return { ...prev, passed: { ...prev.passed, 2: true } };\n    }\n\n    const apCost = getCardActionPointCost(chosenCard, prev, 2);\n\n    function detectLaneForCard(card: any): 'innen' | 'aussen' {\n      if (card.T && card.T >= 2) return 'aussen';\n      if (card.tag && ['Staatsoberhaupt', 'Regierungschef', 'Diplomat'].includes(card.tag)) return 'aussen';\n      return 'innen';\n    }\n\n    if (chosenCard.kind === 'pol') {\n      const lane = action.lane ?? detectLaneForCard(chosenCard);\n      const newP2Hand = [...prev.hands[2]];\n      const [played] = newP2Hand.splice(playIndex, 1);\n      const newP2Lane = [...prev.board[2][lane], played];\n      const newP2Board = { ...prev.board[2], [lane]: newP2Lane };\n      const newBoard = { ...prev.board, 2: newP2Board };\n      const newActionPoints = { ...prev.actionPoints, 2: prev.actionPoints[2] - apCost };\n\n      const laneName = lane === 'aussen' ? 'Regierungsreihe' : 'Ã–ffentlichkeitsreihe';\n      const power = (played as any).influence ?? 0;\n      log(`ðŸ¤– AI spielt ${played.name} (${power} Einfluss) nach ${laneName}.`);\n\n      return {\n        ...prev,\n        hands: { ...prev.hands, 2: newP2Hand },\n        board: newBoard,\n        actionPoints: newActionPoints\n      };\n    }\n\n    // spec cards\n    const newP2Hand = [...prev.hands[2]];\n    const [playedSpec] = newP2Hand.splice(playIndex, 1);\n    const newActionPoints = { ...prev.actionPoints, 2: prev.actionPoints[2] - apCost };\n\n    if ((playedSpec as any).type === 'Dauerhaft-Initiative') {\n      const slotType = (playedSpec as any).slot === 'Ã–ffentlichkeit' ? 'public' : 'government';\n      if (slotType === 'government' && !prev.permanentSlots[2].government) {\n        const newPermanentSlots = { ...prev.permanentSlots, 2: { ...prev.permanentSlots[2], government: playedSpec } };\n        log(`ðŸ¤– AI legt ${playedSpec.name} in Regierung Spezial-Slot.`);\n        return { ...prev, hands: { ...prev.hands, 2: newP2Hand }, permanentSlots: newPermanentSlots, actionPoints: newActionPoints };\n      } else if (slotType === 'public' && !prev.permanentSlots[2].public) {\n        const newPermanentSlots = { ...prev.permanentSlots, 2: { ...prev.permanentSlots[2], public: playedSpec } };\n        log(`ðŸ¤– AI legt ${playedSpec.name} in Ã–ffentlichkeit Spezial-Slot.`);\n        return { ...prev, hands: { ...prev.hands, 2: newP2Hand }, permanentSlots: newPermanentSlots, actionPoints: newActionPoints };\n      }\n    }\n\n    log(`ðŸ¤– AI spielt Spezialkarte ${playedSpec.name}.`);\n    return { ...prev, hands: { ...prev.hands, 2: newP2Hand }, actionPoints: newActionPoints };\n  });\n}\n\n// Expose a light-weight decision helper for tests\nexport function decideBestAction(state: GameState, player: Player, difficulty: Difficulty = 'easy'): AIAction {\n  // reuse takeTurn logic but without mutating state: produce an action suggestions\n  const hand = state.hands[player];\n  const aiAP = state.actionPoints[player];\n  if (aiAP <= 0) return { type: 'pass' };\n  // Policy: maximize influence placed per round. If current lead is already durable, pass.\n  const candidates: Array<{ index: number; card: Card; score: number; lane?: 'innen' | 'aussen' }> = [];\n  const myInf = sumRow([...state.board[player].aussen]);\n  const opponent = player === 1 ? 2 : 1;\n  const oppInf = sumRow([...state.board[opponent].aussen]);\n\n  // If already holding a durable lead, pass\n  const currentLead = myInf - oppInf;\n  if (currentLead >= 3) return { type: 'pass' };\n\n  hand.forEach((card, idx) => {\n    const apCost = getCardActionPointCost(card, state, player);\n    if (apCost > aiAP) return;\n\n    let score = 0;\n    let suggestedLane: 'innen' | 'aussen' | undefined = undefined;\n\n    if (card.kind === 'pol') {\n      const pol = card as any;\n      suggestedLane = pol.tag === 'Staatsoberhaupt' || pol.tag === 'Regierungschef' || pol.tag === 'Diplomat' ? 'aussen' : 'innen';\n      const influence = pol.influence || 0;\n      // Strong preference: influence per AP (primary objective)\n      score = influence / Math.max(1, apCost) * 100;\n      // small bonus for placing into government lane\n      if (suggestedLane === 'aussen') score += 15;\n    } else if (card.kind === 'spec') {\n      const spec = card as any;\n      // Specs less prioritized; interventions get moderate score\n      if (spec.type === 'Intervention') score = 30;\n      else score = 20 + (spec.bp || 0) * 2;\n    }\n\n    // difficulty randomness\n    if (difficulty === 'medium') score += Math.floor(Math.random() * 6) - 2;\n    if (difficulty === 'hard') score += 4;\n\n    candidates.push({ index: idx, card, score, lane: suggestedLane });\n  });\n\n  if (candidates.length === 0) return { type: 'pass' };\n\n  candidates.sort((a, b) => b.score - a.score);\n  // If hard difficulty, run light Monte Carlo rollouts from top candidates\n  if (difficulty === 'hard') {\n    const top = candidates.slice(0, Math.min(4, candidates.length));\n    const rolloutScores: Map<number, number> = new Map();\n\n    const simulate = (stateSnapshot: GameState, playIndex: number, lane?: 'innen' | 'aussen') => {\n      // Very lightweight simulation: apply the play and evaluate immediate board influence difference\n      const simState = JSON.parse(JSON.stringify(stateSnapshot)) as GameState;\n      const card = simState.hands[player][playIndex];\n      const apCost = getCardActionPointCost(card, simState, player);\n\n      // apply simple play\n      simState.actionPoints[player] = Math.max(0, simState.actionPoints[player] - apCost);\n      simState.hands[player].splice(playIndex, 1);\n      if (card.kind === 'pol') {\n        const targetLane = lane ?? ((card as any).tag === 'Staatsoberhaupt' || (card as any).tag === 'Regierungschef' || (card as any).tag === 'Diplomat' ? 'aussen' : 'innen');\n        (simState.board[player] as any)[targetLane].push(card);\n      } else if (card.kind === 'spec' && (card as any).type === 'Intervention') {\n        simState.traps[player].push(card);\n      }\n\n      // Quick eval: difference in government influence\n      const myInf = sumRow([...simState.board[player].aussen]);\n      const opp = player === 1 ? 2 : 1;\n      const oppInf = sumRow([...simState.board[opp].aussen]);\n      return myInf - oppInf;\n    };\n\n    for (const c of top) {\n      let acc = 0;\n      const trials = 6;\n      for (let t = 0; t < trials; t++) {\n        acc += simulate(state, c.index, c.lane);\n      }\n      rolloutScores.set(c.index, acc / trials + c.score);\n    }\n\n    // pick best by rollout-adjusted score\n    let bestIdx = top[0].index;\n    let bestScore = rolloutScores.get(bestIdx) ?? top[0].score;\n    for (const c of top) {\n      const s = rolloutScores.get(c.index) ?? c.score;\n      if (s > bestScore) {\n        bestScore = s;\n        bestIdx = c.index;\n      }\n    }\n\n    const chosen = candidates.find(x => x.index === bestIdx)!;\n    return { type: 'play', index: chosen.index, lane: chosen.lane };\n  }\n\n  const best = candidates[0];\n  return { type: 'play', index: best.index, lane: best.lane };\n}\n\n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}