{"ast":null,"code":"import _objectSpread from\"C:/Users/skank/Videos/Cards/Milchcards/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";// src/ui/layout.ts\nimport baseLayout from'./ui_layout_1920x1080.json';import bgImg from'../assets/images/ui_layout_background_ingame.png';export const UI_BASE={width:1920,height:1080};// attach background so GameCanvas can read LAYOUT.background\nexport const LAYOUT=_objectSpread(_objectSpread({},baseLayout),{},{background:{enabled:true,src:bgImg}});// ---------- helpers ----------\nexport function getZone(id){const z=LAYOUT.zones.find(z=>z.id===id);if(!z)throw new Error(\"UI zone not found: \".concat(id));return z;}export function getUiTransform(canvasW,canvasH){const sx=canvasW/UI_BASE.width;const sy=canvasH/UI_BASE.height;const scale=Math.min(sx,sy);const offsetX=Math.floor((canvasW-UI_BASE.width*scale)/2);const offsetY=Math.floor((canvasH-UI_BASE.height*scale)/2);return{scale,offsetX,offsetY};}export function computeSlotRects(zone){const[x,y,w,h]=zone.rectPx;if(!zone.layout)return[{x,y,w,h}];if(zone.layout.type==='singleSlot'){const[sw,sh]=zone.layout.slotSize;return[{x:x+Math.floor((w-sw)/2),y:y+Math.floor((h-sh)/2),w:sw,h:sh}];}// fixedSlots\nconst{slots,slotSize,gap,direction,alignment}=zone.layout;const[sw,sh]=slotSize;const rects=[];if(direction==='horizontal'){const totalW=sw*slots+gap*(slots-1);let startX=x;if(alignment==='center')startX=x+Math.floor((w-totalW)/2);if(alignment==='right')startX=x+(w-totalW);for(let i=0;i<slots;i++){rects.push({x:startX+i*(sw+gap),y,w:sw,h:sh});}}else{const totalH=sh*slots+gap*(slots-1);let startY=y;if(alignment==='center')startY=y+Math.floor((h-totalH)/2);if(alignment==='right')startY=y+(h-totalH);// 'right' used as bottom for vertical\nfor(let i=0;i<slots;i++){rects.push({x,y:startY+i*(sh+gap),w:sw,h:sh});}}return rects;}// Hands\nexport function computeHandRects(side){const id=side==='player'?'hand.player':'hand.opponent';return computeSlotRects(getZone(id));}// Rows\nexport function getGovernmentRects(side){const id=side==='player'?'row.government.player':'row.government.opponent';return computeSlotRects(getZone(id));}export function getPublicRects(side){const id=side==='player'?'row.public.player':'row.public.opponent';return computeSlotRects(getZone(id));}// Instant initiative single slot\nexport function getSofortRect(side){const id=side==='player'?'slot.instant.player':'slot.instant.opponent';return computeSlotRects(getZone(id))[0];}// Interventions single slot (kept for draw code)\nexport function getInterventionsRect(side){const id=side==='player'?'interventions.player':'interventions.opponent';return computeSlotRects(getZone(id))[0];}// capacities used by canvas/utils\nexport function getLaneCapacity(lane){return lane==='government'?5:3;}","map":{"version":3,"names":["baseLayout","bgImg","UI_BASE","width","height","LAYOUT","_objectSpread","background","enabled","src","getZone","id","z","zones","find","Error","concat","getUiTransform","canvasW","canvasH","sx","sy","scale","Math","min","offsetX","floor","offsetY","computeSlotRects","zone","x","y","w","h","rectPx","layout","type","sw","sh","slotSize","slots","gap","direction","alignment","rects","totalW","startX","i","push","totalH","startY","computeHandRects","side","getGovernmentRects","getPublicRects","getSofortRect","getInterventionsRect","getLaneCapacity","lane"],"sources":["C:/Users/skank/Videos/Cards/Milchcards/src/ui/layout.ts"],"sourcesContent":["// src/ui/layout.ts\r\nimport baseLayout from './ui_layout_1920x1080.json';\r\nimport bgImg from '../assets/images/ui_layout_background_ingame.png';\r\n\r\nexport const UI_BASE = { width: 1920, height: 1080 } as const;\r\n\r\ntype Dir = 'horizontal' | 'vertical';\r\ntype Align = 'left' | 'center' | 'right';\r\n\r\ntype FixedSlots = {\r\n  type: 'fixedSlots';\r\n  slots: number;\r\n  slotSize: [number, number];\r\n  gap: number;\r\n  alignment: Align;\r\n  direction: Dir;\r\n};\r\n\r\ntype SingleSlot = {\r\n  type: 'singleSlot';\r\n  slotSize: [number, number];\r\n};\r\n\r\ntype ZoneLayout = FixedSlots | SingleSlot;\r\n\r\nexport type UiZone = {\r\n  id: string;\r\n  rectPx: [number, number, number, number];\r\n  layout?: ZoneLayout;\r\n  z?: number;\r\n};\r\n\r\nexport type UiLayout = {\r\n  version: number;\r\n  canvas: { width: number; height: number; aspect: string };\r\n  scaling: { mode: 'fit' | 'fill' | 'stretch'; letterbox: boolean };\r\n  zones: UiZone[];\r\n  background?: { enabled: boolean; src?: string };\r\n};\r\n\r\n// attach background so GameCanvas can read LAYOUT.background\r\nexport const LAYOUT: UiLayout = {\r\n  ...(baseLayout as UiLayout),\r\n  background: { enabled: true, src: bgImg }\r\n};\r\n\r\n// ---------- helpers ----------\r\n\r\nexport function getZone(id: string): UiZone {\r\n  const z = LAYOUT.zones.find(z => z.id === id);\r\n  if (!z) throw new Error(`UI zone not found: ${id}`);\r\n  return z;\r\n}\r\n\r\nexport function getUiTransform(canvasW: number, canvasH: number) {\r\n  const sx = canvasW / UI_BASE.width;\r\n  const sy = canvasH / UI_BASE.height;\r\n  const scale = Math.min(sx, sy);\r\n  const offsetX = Math.floor((canvasW - UI_BASE.width * scale) / 2);\r\n  const offsetY = Math.floor((canvasH - UI_BASE.height * scale) / 2);\r\n  return { scale, offsetX, offsetY };\r\n}\r\n\r\ntype Rect = { x: number; y: number; w: number; h: number };\r\n\r\nexport function computeSlotRects(zone: UiZone): Rect[] {\r\n  const [x, y, w, h] = zone.rectPx;\r\n  if (!zone.layout) return [{ x, y, w, h }];\r\n  if (zone.layout.type === 'singleSlot') {\r\n    const [sw, sh] = zone.layout.slotSize;\r\n    return [{ x: x + Math.floor((w - sw) / 2), y: y + Math.floor((h - sh) / 2), w: sw, h: sh }];\r\n  }\r\n  // fixedSlots\r\n  const { slots, slotSize, gap, direction, alignment } = zone.layout;\r\n  const [sw, sh] = slotSize;\r\n  const rects: Rect[] = [];\r\n  if (direction === 'horizontal') {\r\n    const totalW = sw * slots + gap * (slots - 1);\r\n    let startX = x;\r\n    if (alignment === 'center') startX = x + Math.floor((w - totalW) / 2);\r\n    if (alignment === 'right') startX = x + (w - totalW);\r\n    for (let i = 0; i < slots; i++) {\r\n      rects.push({ x: startX + i * (sw + gap), y, w: sw, h: sh });\r\n    }\r\n  } else {\r\n    const totalH = sh * slots + gap * (slots - 1);\r\n    let startY = y;\r\n    if (alignment === 'center') startY = y + Math.floor((h - totalH) / 2);\r\n    if (alignment === 'right') startY = y + (h - totalH); // 'right' used as bottom for vertical\r\n    for (let i = 0; i < slots; i++) {\r\n      rects.push({ x, y: startY + i * (sh + gap), w: sw, h: sh });\r\n    }\r\n  }\r\n  return rects;\r\n}\r\n\r\n// Hands\r\nexport function computeHandRects(side: 'player' | 'opponent'): Rect[] {\r\n  const id = side === 'player' ? 'hand.player' : 'hand.opponent';\r\n  return computeSlotRects(getZone(id));\r\n}\r\n\r\n// Rows\r\nexport function getGovernmentRects(side: 'player' | 'opponent'): Rect[] {\r\n  const id = side === 'player' ? 'row.government.player' : 'row.government.opponent';\r\n  return computeSlotRects(getZone(id));\r\n}\r\n\r\nexport function getPublicRects(side: 'player' | 'opponent'): Rect[] {\r\n  const id = side === 'player' ? 'row.public.player' : 'row.public.opponent';\r\n  return computeSlotRects(getZone(id));\r\n}\r\n\r\n// Instant initiative single slot\r\nexport function getSofortRect(side: 'player' | 'opponent'): Rect {\r\n  const id = side === 'player' ? 'slot.instant.player' : 'slot.instant.opponent';\r\n  return computeSlotRects(getZone(id))[0];\r\n}\r\n\r\n// Interventions single slot (kept for draw code)\r\nexport function getInterventionsRect(side: 'player' | 'opponent'): Rect {\r\n  const id = side === 'player' ? 'interventions.player' : 'interventions.opponent';\r\n  return computeSlotRects(getZone(id))[0];\r\n}\r\n\r\n// capacities used by canvas/utils\r\nexport function getLaneCapacity(lane: 'public' | 'government'): number {\r\n  return lane === 'government' ? 5 : 3;\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}