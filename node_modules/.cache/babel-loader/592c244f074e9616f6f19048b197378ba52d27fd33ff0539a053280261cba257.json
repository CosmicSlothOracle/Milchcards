{"ast":null,"code":"export function registerTrap(state, player, key) {\n  if (!state.traps) state.traps = {\n    1: [],\n    2: []\n  };\n  const list = state.traps[player];\n  if (!Array.isArray(list)) state.traps[player] = [];\n  state.traps[player].push({\n    owner: player,\n    key\n  });\n}\nexport function applyTrapsOnCardPlayed(state, playedBy, card, enqueue, log) {\n  var _state$traps, _tags, _tags2, _type, _type2;\n  // Beispielhafte Trigger: Medien/Plattform deaktivieren\n  const opp = playedBy === 1 ? 2 : 1;\n  const traps = (_state$traps = state.traps) === null || _state$traps === void 0 ? void 0 : _state$traps[opp];\n  if (!traps || traps.length === 0) return;\n  const isMedia = ((_tags = card.tags) === null || _tags === void 0 ? void 0 : _tags.includes('Media')) || ((_tags2 = card.tags) === null || _tags2 === void 0 ? void 0 : _tags2.includes('Platform')) || ((_type = card.type) === null || _type === void 0 ? void 0 : _type.toLowerCase().includes('media')) || ((_type2 = card.type) === null || _type2 === void 0 ? void 0 : _type2.toLowerCase().includes('platform'));\n  traps.forEach(t => {\n    switch (t.key) {\n      case 'trap.fake_news.deactivate_media':\n        if (isMedia && card.uid != null) {\n          enqueue({\n            type: 'DEACTIVATE_CARD',\n            player: opp,\n            targetUid: card.uid\n          });\n          log('Trap: Fake News – deactivated media/platform card.');\n        }\n        break;\n      // weitere Trap-Keys hier\n      default:\n        break;\n    }\n  });\n\n  // Optional: einmalige Fallen entfernen (wenn so gewünscht)\n  // (state.traps as any)[opp] = (state.traps as any)[opp].filter(t => t.key !== 'trap.fake_news.deactivate_media');\n}","map":{"version":3,"names":["registerTrap","state","player","key","traps","list","Array","isArray","push","owner","applyTrapsOnCardPlayed","playedBy","card","enqueue","log","_state$traps","_tags","_tags2","_type","_type2","opp","length","isMedia","tags","includes","type","toLowerCase","forEach","t","uid","targetUid"],"sources":["C:/Users/skank/Videos/Cards/Milchcards/src/utils/traps.ts"],"sourcesContent":["import type { GameState, Player, Card } from '../types/game';\r\nimport type { EffectEvent } from '../types/effects';\r\n\r\nexport function registerTrap(state: GameState, player: Player, key: string) {\r\n  if (!state.traps) state.traps = { 1: [], 2: [] } as any;\r\n  const list = (state.traps as any)[player] as Array<{ owner: Player; key: string }>;\r\n  if (!Array.isArray(list)) (state.traps as any)[player] = [];\r\n  (state.traps as any)[player].push({ owner: player, key });\r\n}\r\n\r\nexport function applyTrapsOnCardPlayed(\r\n  state: GameState,\r\n  playedBy: Player,\r\n  card: Card,\r\n  enqueue: (e: EffectEvent) => void,\r\n  log: (m: string) => void\r\n) {\r\n  // Beispielhafte Trigger: Medien/Plattform deaktivieren\r\n  const opp: Player = playedBy === 1 ? 2 : 1;\r\n  const traps = (state.traps as any)?.[opp] as Array<{ owner: Player; key: string }> | undefined;\r\n  if (!traps || traps.length === 0) return;\r\n\r\n  const isMedia = (card as any).tags?.includes('Media') || (card as any).tags?.includes('Platform') ||\r\n                  (card as any).type?.toLowerCase().includes('media') || (card as any).type?.toLowerCase().includes('platform');\r\n\r\n  traps.forEach(t => {\r\n    switch (t.key) {\r\n      case 'trap.fake_news.deactivate_media':\r\n        if (isMedia && (card as any).uid != null) {\r\n          enqueue({ type: 'DEACTIVATE_CARD', player: opp, targetUid: (card as any).uid });\r\n          log('Trap: Fake News – deactivated media/platform card.');\r\n        }\r\n        break;\r\n      // weitere Trap-Keys hier\r\n      default:\r\n        break;\r\n    }\r\n  });\r\n\r\n  // Optional: einmalige Fallen entfernen (wenn so gewünscht)\r\n  // (state.traps as any)[opp] = (state.traps as any)[opp].filter(t => t.key !== 'trap.fake_news.deactivate_media');\r\n}"],"mappings":"AAGA,OAAO,SAASA,YAAYA,CAACC,KAAgB,EAAEC,MAAc,EAAEC,GAAW,EAAE;EAC1E,IAAI,CAACF,KAAK,CAACG,KAAK,EAAEH,KAAK,CAACG,KAAK,GAAG;IAAE,CAAC,EAAE,EAAE;IAAE,CAAC,EAAE;EAAG,CAAQ;EACvD,MAAMC,IAAI,GAAIJ,KAAK,CAACG,KAAK,CAASF,MAAM,CAA0C;EAClF,IAAI,CAACI,KAAK,CAACC,OAAO,CAACF,IAAI,CAAC,EAAGJ,KAAK,CAACG,KAAK,CAASF,MAAM,CAAC,GAAG,EAAE;EAC1DD,KAAK,CAACG,KAAK,CAASF,MAAM,CAAC,CAACM,IAAI,CAAC;IAAEC,KAAK,EAAEP,MAAM;IAAEC;EAAI,CAAC,CAAC;AAC3D;AAEA,OAAO,SAASO,sBAAsBA,CACpCT,KAAgB,EAChBU,QAAgB,EAChBC,IAAU,EACVC,OAAiC,EACjCC,GAAwB,EACxB;EAAA,IAAAC,YAAA,EAAAC,KAAA,EAAAC,MAAA,EAAAC,KAAA,EAAAC,MAAA;EACA;EACA,MAAMC,GAAW,GAAGT,QAAQ,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC;EAC1C,MAAMP,KAAK,IAAAW,YAAA,GAAId,KAAK,CAACG,KAAK,cAAAW,YAAA,uBAAZA,YAAA,CAAuBK,GAAG,CAAsD;EAC9F,IAAI,CAAChB,KAAK,IAAIA,KAAK,CAACiB,MAAM,KAAK,CAAC,EAAE;EAElC,MAAMC,OAAO,GAAG,EAAAN,KAAA,GAACJ,IAAI,CAASW,IAAI,cAAAP,KAAA,uBAAlBA,KAAA,CAAoBQ,QAAQ,CAAC,OAAO,CAAC,OAAAP,MAAA,GAAKL,IAAI,CAASW,IAAI,cAAAN,MAAA,uBAAlBA,MAAA,CAAoBO,QAAQ,CAAC,UAAU,CAAC,OAAAN,KAAA,GAChFN,IAAI,CAASa,IAAI,cAAAP,KAAA,uBAAlBA,KAAA,CAAoBQ,WAAW,CAAC,CAAC,CAACF,QAAQ,CAAC,OAAO,CAAC,OAAAL,MAAA,GAAKP,IAAI,CAASa,IAAI,cAAAN,MAAA,uBAAlBA,MAAA,CAAoBO,WAAW,CAAC,CAAC,CAACF,QAAQ,CAAC,UAAU,CAAC;EAE7HpB,KAAK,CAACuB,OAAO,CAACC,CAAC,IAAI;IACjB,QAAQA,CAAC,CAACzB,GAAG;MACX,KAAK,iCAAiC;QACpC,IAAImB,OAAO,IAAKV,IAAI,CAASiB,GAAG,IAAI,IAAI,EAAE;UACxChB,OAAO,CAAC;YAAEY,IAAI,EAAE,iBAAiB;YAAEvB,MAAM,EAAEkB,GAAG;YAAEU,SAAS,EAAGlB,IAAI,CAASiB;UAAI,CAAC,CAAC;UAC/Ef,GAAG,CAAC,oDAAoD,CAAC;QAC3D;QACA;MACF;MACA;QACE;IACJ;EACF,CAAC,CAAC;;EAEF;EACA;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}