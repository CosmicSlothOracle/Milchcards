{"ast":null,"code":"import _objectSpread from\"C:/Users/skank/Videos/Cards/Milchcards/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{getStrongestGovernment}from'./targets';import{registerTrap}from'./traps';import{logAP,logDraw,logDiscardRandom,logDeactivateRandom,logBuffStrongest,logShield,logDeactivateCard,logOpportunist}from'./logs';import{getGlobalRNG}from'../services/rng';import{logger}from'../debug/logger';// Helper to find strongest government uid for new intents\nfunction strongestGovernmentUid(state,p){var _state$board$p;const govRow=(_state$board$p=state.board[p])===null||_state$board$p===void 0?void 0:_state$board$p.aussen;if(!govRow||govRow.length===0)return null;const alive=govRow.filter(g=>!g.deactivated);if(!alive.length)return null;const sorted=alive.slice().sort((a,b)=>b.influence+(b.tempBuffs||0)-(b.tempDebuffs||0)-(a.influence+(a.tempBuffs||0)-(a.tempDebuffs||0)));return sorted[0].uid;}function other(p){return p===1?2:1;}function logPush(state,msg){state.log.push(msg);}function strongestGov(state,p){const row=state.board[p].aussen;if(!row.length)return null;const alive=row.filter(c=>!c.deactivated);if(alive.length===0)return null;return alive.slice().sort((a,b)=>b.influence+(b.tempBuffs||0)-(b.tempDebuffs||0)-(a.influence+(a.tempBuffs||0)-(a.tempDebuffs||0)))[0];}function publicNames(state,p){return state.board[p].innen.map(c=>c.name);}function hasPublic(state,p,name){return publicNames(state,p).includes(name);}function findCardByUidOnBoard(state,uid){for(const p of[1,2]){for(const lane of['innen','aussen','sofort']){const arr=state.board[p][lane];const hit=arr.find(c=>c.uid===uid);if(hit)return hit;}}return null;}// Find the slot location for a card uid on the board\nfunction findCardSlotByUid(state,uid){for(const p of[1,2]){for(const lane of['innen','aussen','sofort']){const arr=state.board[p][lane];const idx=arr.findIndex(c=>c.uid===uid);if(idx!==-1)return{player:p,lane,index:idx};}}// check permanent slots\nconst permGov=state.permanentSlots[1].government;if(permGov&&permGov.uid===uid)return{player:1,lane:'permanent.government',index:0};const permPub=state.permanentSlots[1].public;if(permPub&&permPub.uid===uid)return{player:1,lane:'permanent.public',index:0};const permGov2=state.permanentSlots[2].government;if(permGov2&&permGov2.uid===uid)return{player:2,lane:'permanent.government',index:0};const permPub2=state.permanentSlots[2].public;if(permPub2&&permPub2.uid===uid)return{player:2,lane:'permanent.public',index:0};return null;}export function resolveQueue(state,events){const rng=getGlobalRNG();// Single pass FIFO\nwhile(events.length){const ev=events.shift();logger.dbg(\"DQ \".concat(ev.type),ev);// Capture small snapshot for delta calc\nconst beforeAP=_objectSpread({},state.actionPoints);switch(ev.type){case'LOG':{logPush(state,ev.msg);break;}case'ADD_AP':{var _state$effectFlags$ot;const cur=state.actionPoints[ev.player];const next=Math.max(0,cur+ev.amount);state.actionPoints[ev.player]=next;logger.dbg(\"ADD_AP before=\".concat(cur,\" amount=\").concat(ev.amount,\" after=\").concat(state.actionPoints[ev.player]));// Opportunist AP-Spiegelung (falls aktiv beim Gegner)\nif((_state$effectFlags$ot=state.effectFlags[other(ev.player)])!==null&&_state$effectFlags$ot!==void 0&&_state$effectFlags$ot.opportunistActive&&ev.amount>0){const mirror={type:'ADD_AP',player:other(ev.player),amount:ev.amount};events.unshift(mirror);logPush(state,\"Opportunist: AP +\".concat(ev.amount,\" gespiegelt.\"));}logPush(state,logAP(ev.player,cur,next));break;}case'DRAW_CARDS':{const handBefore=state.hands[ev.player].length;for(let i=0;i<ev.amount;i++){const top=state.decks[ev.player].shift();if(top){state.hands[ev.player].push(top);logPush(state,logDraw(ev.player,top.name));}}const handAfter=state.hands[ev.player].length;logger.dbg(\"DRAW_CARDS player=\".concat(ev.player,\" before=\").concat(handBefore,\" after=\").concat(handAfter));break;}case'DISCARD_RANDOM_FROM_HAND':{const hand=state.hands[ev.player];for(let i=0;i<ev.amount&&hand.length>0;i++){const idx=rng.randomInt(hand.length);const[card]=hand.splice(idx,1);state.discard.push(card);logPush(state,logDiscardRandom(ev.player,card.name));}break;}case'DEACTIVATE_RANDOM_HAND':{// Deaktivieren von Handkarten (nicht entfernen)\nconst hand=state.hands[ev.player];const activeCards=hand.filter(c=>!c.deactivated);logger.dbg(\"DEACTIVATE_RANDOM_HAND: P\".concat(ev.player,\" handSize=\").concat(hand.length,\" activeCandidates=\").concat(activeCards.length));if(activeCards.length===0){logPush(state,\"Oprah: no active hand cards to deactivate for P\".concat(ev.player));break;}for(let i=0;i<ev.amount&&activeCards.length>0;i++){const card=rng.pick(activeCards);logger.dbg(\"DEACTIVATE_RANDOM_HAND: picked=\".concat(card?card.name:'undefined',\" for P\").concat(ev.player));if(card){card.deactivated=true;card._deactivatedBy='OPRAH';logPush(state,logDeactivateRandom(ev.player,card.name));// Entferne aus activeCards für nächste Iteration\nconst idx=activeCards.indexOf(card);if(idx>-1)activeCards.splice(idx,1);}}break;}// Legacy cases - removed\n// SET_DISCOUNT and REFUND_NEXT_INITIATIVE are no longer supported\n// Use ADD_AP instead\ncase'GRANT_SHIELD':{if(!state.shields)state.shields=new Set();// Wenn kein spezifischer targetUid angegeben ist, verwende Platzhalter pro Spieler (-1 oder -2)\nconst uid=ev.targetUid!==undefined?ev.targetUid:ev.player===1?-1:-2;state.shields.add(uid);logPush(state,logShield(uid));break;}case'DEACTIVATE_CARD':{const card=findCardByUidOnBoard(state,ev.targetUid);if(card){card.deactivated=true;logPush(state,logDeactivateCard(card.name));// Falls die Karte eine Shield-Aura ist, entferne Spielerschilde\nif(card.effectKey==='init.intelligence_liaison.shield_aura'){if(state.shields){const placeholder=ev.player===1?-1:-2;state.shields.delete(placeholder);}}}break;}case'REACTIVATE_CARD':{const card=findCardByUidOnBoard(state,ev.targetUid);if(card){card.deactivated=false;logPush(state,\"\\uD83D\\uDD04 \".concat(card.name,\" wurde reaktiviert\"));}break;}case'RETURN_TO_HAND':{const card=findCardByUidOnBoard(state,ev.targetUid);if(card){// Remove from board\nfor(const p of[1,2]){for(const lane of['innen','aussen','sofort']){const idx=state.board[p][lane].findIndex(c=>c.uid===ev.targetUid);if(idx!==-1){state.board[p][lane].splice(idx,1);// Add to hand\nstate.hands[ev.player].push(card);logPush(state,\"\\uD83D\\uDD04 \".concat(card.name,\" wurde zur Hand zur\\xFCckgegeben\"));break;}}}}break;}case'CANCEL_CARD':{const card=findCardByUidOnBoard(state,ev.targetUid);if(card){// Remove from board and add to discard\nfor(const p of[1,2]){for(const lane of['innen','aussen','sofort']){const idx=state.board[p][lane].findIndex(c=>c.uid===ev.targetUid);if(idx!==-1){state.board[p][lane].splice(idx,1);state.discard.push(card);logPush(state,\"\\u274C \".concat(card.name,\" wurde annulliert\"));break;}}}}break;}case'REGISTER_TRAP':{registerTrap(state,ev.player,ev.key);logPush(state,\"Trap registered: \".concat(ev.key,\" (P\").concat(ev.player,\")\"));break;}// UI-only event: instruct frontend to play hit animation on a specific slot\ncase'UI_TRIGGER_HIT_ANIM':{// UI signal: play hit animation on the given slot. Do not mutate game state.\n// Preferred local handling: push into VisualEffectsContext.playAnimsRef so the canvas picks it up.\ntry{const ply=ev.player;const lane=ev.lane;const index=ev.index;const key=\"hit:\".concat(ply,\".\").concat(lane,\".\").concat(index);if(typeof window!=='undefined'&&window.__pc_visual_effects&&window.__pc_visual_effects.playAnimsRef){const now=typeof performance!=='undefined'?performance.now():Date.now();try{window.__pc_visual_effects.playAnimsRef.current.push({uid:key,started:now,duration:25*30});}catch(e){}}else if(typeof window!=='undefined'&&window.dispatchEvent){// fallback: dispatch DOM event for legacy listeners\nconst detail={player:ply,lane,index};try{window.dispatchEvent(new CustomEvent('pc:ui_trigger_hit_anim',{detail}));}catch(e){}}}catch(e){}break;}case'BUFF_STRONGEST_GOV':case'ADJUST_INFLUENCE':{// Alias auf BUFF_STRONGEST_GOV\nconst player=ev.player;let amount=ev.amount;const reason=ev.reason;// Special intent: Oprah media buff - compute amount based on media cards on own board\nif(reason==='OPRAH_MEDIA_BUFF_INTENT'){const ownBoard=[...state.board[player].innen,...state.board[player].aussen];const cd=require('../data/cardDetails');const mediaNames=['Oprah Winfrey','Mark Zuckerberg','Tim Cook','Sam Altman'];const mediaCount=ownBoard.filter(c=>{var _cd$getCardDetails,_cd$getCardDetails$ca;const sub=(_cd$getCardDetails=cd.getCardDetails)===null||_cd$getCardDetails===void 0?void 0:(_cd$getCardDetails$ca=_cd$getCardDetails.call(cd,c.name))===null||_cd$getCardDetails$ca===void 0?void 0:_cd$getCardDetails$ca.subcategories;const legacy=c.tag==='Media'||c.tag==='Medien';return Array.isArray(sub)&&sub.includes('Medien')||legacy||mediaNames.includes(c.name);}).length;amount=Math.min(mediaCount,3);if(amount>0){events.unshift({type:'LOG',msg:\"Oprah Winfrey: Media buff calculated +\".concat(amount,\" (max 3).\")});}else{events.unshift({type:'LOG',msg:\"Oprah Winfrey: No media cards on board - no buff.\"});}}const tgt=getStrongestGovernment(state,player);if(tgt&&amount!==0){var _state$effectFlags$ot2;if(amount>=0){tgt.tempBuffs=(tgt.tempBuffs||0)+amount;}else{tgt.tempDebuffs=(tgt.tempDebuffs||0)+Math.abs(amount);}logPush(state,logBuffStrongest(player,tgt.name,amount));// Opportunist-Spiegelung (falls aktiv beim Gegner)\nif((_state$effectFlags$ot2=state.effectFlags[other(player)])!==null&&_state$effectFlags$ot2!==void 0&&_state$effectFlags$ot2.opportunistActive&&amount>0){const mirror={type:'BUFF_STRONGEST_GOV',player:other(player),amount};events.unshift(mirror);logPush(state,logOpportunist(other(player),amount));}}break;}case'DEBUFF_CARD':{const card=findCardByUidOnBoard(state,ev.targetUid);if(card&&card.kind==='pol'){const tgt=card;tgt.tempDebuffs=(tgt.tempDebuffs||0)+Math.abs(ev.amount);logPush(state,\"\\uD83D\\uDD3B \".concat(tgt.name,\": -\").concat(Math.abs(ev.amount),\" Influence\"));}break;}// ===== New intent event handlers =====\ncase'DEACTIVATE_STRONGEST_ENEMY_GOV':{const opp=ev.player===1?2:1;const uid=strongestGovernmentUid(state,opp);if(uid!==null){events.unshift({type:'DEACTIVATE_CARD',player:opp,targetUid:uid});events.unshift({type:'LOG',msg:'Party Offensive: strongest enemy Government deactivated.'});}else{events.unshift({type:'LOG',msg:'Party Offensive: no enemy Government to deactivate.'});}break;}case'LOCK_OPPONENT_INITIATIVES_EOT':{const opp=ev.player===1?2:1;state.effectFlags[opp].initiativesLocked=true;events.unshift({type:'LOG',msg:'Opposition Blockade: opponent initiatives locked until end of turn.'});break;}case'SET_DOUBLE_PUBLIC_AURA':{state.effectFlags[ev.player].doublePublicAura=true;events.unshift({type:'LOG',msg:'Influencer Campaign: next Public aura will be doubled.'});break;}case'SET_OPPORTUNIST_ACTIVE':{const{player,active}=ev;state.effectFlags[player].opportunistActive=active;if(active){events.unshift({type:'LOG',msg:'Opportunist: AP effects will be mirrored until end of turn.'});}break;}// === CORRUPTION: Bestechungsskandal 2.0 ===\ncase'CORRUPTION_STEAL_GOV_START':{console.log('🔥 PROCESSING CORRUPTION_STEAL_GOV_START - Player:',ev.player);// Signal UI that player must select opponent government card & roll dice\nstate.pendingAbilitySelect={type:'corruption_steal',actorPlayer:ev.player};console.log('🔥 SET pendingAbilitySelect:',state.pendingAbilitySelect);events.unshift({type:'LOG',msg:'Bribery Scandal 2.0: Wähle eine gegnerische Regierungskarte und würfle einen W6.'});// Trigger UI hook to highlight targets\nif(typeof window!=='undefined'){try{console.log('🔥 DISPATCHING pc:corruption_select_target event');window.dispatchEvent(new CustomEvent('pc:corruption_select_target',{detail:{player:ev.player}}));}catch(e){console.error('🔥 ERROR dispatching corruption event:',e);}}break;}case'CORRUPTION_STEAL_GOV_RESOLVE':{const{player:actor,targetUid}=ev;const victim=actor===1?2:1;// Calculate W6 roll first\nconst roll=1+rng.randomInt(6);console.log('🎲 ENGINE: Calculated W6 roll:',roll);// Locate target card\nconst targetIdx=state.board[victim].aussen.findIndex(c=>c.uid===targetUid);if(targetIdx===-1){events.unshift({type:'LOG',msg:'Bribery Scandal 2.0: Zielkarte nicht gefunden.'});break;}const target=state.board[victim].aussen[targetIdx];// Oligarch bonus\nconst oligarchCount=state.board[actor].innen.filter(c=>{var _getCardDetails,_ref,_getCardDetails$call;const sub=(_getCardDetails=(_ref=require('../data/cardDetails')).getCardDetails)===null||_getCardDetails===void 0?void 0:(_getCardDetails$call=_getCardDetails.call(_ref,c.name))===null||_getCardDetails$call===void 0?void 0:_getCardDetails$call.subcategories;const hasNewTag=Array.isArray(sub)&&sub.includes('Oligarch');const legacy=c.tag==='Oligarch';return hasNewTag||legacy;}).length;const total=roll+oligarchCount;const targetInfluence=target.influence+(target.tempBuffs||0)-(target.tempDebuffs||0);// Dispatch the calculated roll to UI for 3D dice display\nif(typeof window!=='undefined'){try{console.log('🎲 ENGINE: Dispatching calculated roll to UI:',roll);window.dispatchEvent(new CustomEvent('pc:engine_dice_result',{detail:{roll,player:actor,targetUid}}));}catch(e){console.error('🎲 ENGINE: Error dispatching dice result:',e);}}events.unshift({type:'LOG',msg:\"Bribery Scandal 2.0: Roll \".concat(roll,\" +\").concat(oligarchCount,\" Bonus = \").concat(total,\" vs \").concat(targetInfluence,\" (\").concat(target.name,\").\")});if(total>=targetInfluence){const maxSlots=3;if(state.board[actor].aussen.length<maxSlots){// Transfer card\nstate.board[victim].aussen.splice(targetIdx,1);state.board[actor].aussen.push(target);events.unshift({type:'LOG',msg:\"Bribery Scandal 2.0: Erfolg! \".concat(target.name,\" \\xFCbernommen.\")});}else{state.board[victim].aussen.splice(targetIdx,1);state.discard.push(target);events.unshift({type:'LOG',msg:\"Bribery Scandal 2.0: Erfolg, aber kein Slot frei \\u2013 \".concat(target.name,\" entfernt.\")});}}else{events.unshift({type:'LOG',msg:'Bribery Scandal 2.0: Wurf zu niedrig – keine Übernahme.'});}// Clear pending selection\nstate.pendingAbilitySelect=undefined;break;}case'INITIATIVE_ACTIVATED':{var _state$board$ev$playe,_state$board$ev$playe2,_state$effectFlags$ev;// Initiative activation event - trigger reactions from public cards\nlogPush(state,'Initiative activated.');// Check for public cards that react to initiative activation\nconst publicCards=((_state$board$ev$playe=state.board[ev.player])===null||_state$board$ev$playe===void 0?void 0:_state$board$ev$playe.innen)||[];// Shadow Lobbying: +1 influence per own Oligarch-tag on board (max +3)\n// Detect if the activating initiative was Shadow Lobbying by checking the last played instant in slot\nconst instantSlot=((_state$board$ev$playe2=state.board[ev.player])===null||_state$board$ev$playe2===void 0?void 0:_state$board$ev$playe2.sofort)||[];const lastInstant=instantSlot[0];if(lastInstant&&(lastInstant.effectKey==='init.shadow_lobbying.per_oligarch'||lastInstant.name==='Shadow Lobbying')){const ownBoard=[...state.board[ev.player].innen,...state.board[ev.player].aussen];const oligarchCount=ownBoard.filter(c=>{var _getCardDetails2,_ref2,_getCardDetails2$call;const details=c.name?require('../data/cardDetails'):null;// Fallback: try BaseSpecial tag if available\nconst sub=(_getCardDetails2=(_ref2=require('../data/cardDetails')).getCardDetails)===null||_getCardDetails2===void 0?void 0:(_getCardDetails2$call=_getCardDetails2.call(_ref2,c.name))===null||_getCardDetails2$call===void 0?void 0:_getCardDetails2$call.subcategories;const hasNewTag=Array.isArray(sub)&&sub.includes('Oligarch');const legacyTag=c.tag==='Oligarch';return hasNewTag||legacyTag;}).length;const amt=Math.min(oligarchCount,3);if(amt>0){events.unshift({type:'BUFF_STRONGEST_GOV',player:ev.player,amount:amt});events.unshift({type:'LOG',msg:\"Shadow Lobbying: st\\xE4rkste Regierung +\".concat(amt,\" Einfluss (pro Oligarch, max 3).\")});}else{events.unshift({type:'LOG',msg:\"Shadow Lobbying: Keine Oligarchen \\u2013 kein Einfluss-Buff.\"});}}// Elon Musk: +1 AP on initiative activation\nconst elonMusk=publicCards.find(card=>card.kind==='spec'&&card.name==='Elon Musk');if(elonMusk){events.unshift({type:'ADD_AP',player:ev.player,amount:1});events.unshift({type:'LOG',msg:'Elon Musk: +1 AP on initiative activation.'});}// Mark Zuckerberg: +1 AP on initiative activation (once per turn)\nconst markZuckerberg=publicCards.find(card=>card.kind==='spec'&&card.name==='Mark Zuckerberg');if(markZuckerberg&&!((_state$effectFlags$ev=state.effectFlags[ev.player])!==null&&_state$effectFlags$ev!==void 0&&_state$effectFlags$ev.markZuckerbergUsed)){events.unshift({type:'ADD_AP',player:ev.player,amount:1});events.unshift({type:'LOG',msg:'Mark Zuckerberg: +1 AP on initiative activation.'});if(!state.effectFlags[ev.player]){state.effectFlags[ev.player]={markZuckerbergUsed:false};}state.effectFlags[ev.player].markZuckerbergUsed=true;}// Ai Weiwei: +1 card +1 AP on initiative activation\nconst aiWeiwei=publicCards.find(card=>card.kind==='spec'&&card.name==='Ai Weiwei');if(aiWeiwei){events.unshift({type:'DRAW_CARDS',player:ev.player,amount:1});events.unshift({type:'ADD_AP',player:ev.player,amount:1});events.unshift({type:'LOG',msg:'Ai Weiwei: +1 card +1 AP on initiative activation.'});}// Sam Altman: +1 card +1 AP on AI-related initiative activation\nconst samAltman=publicCards.find(card=>card.kind==='spec'&&card.name==='Sam Altman');if(samAltman){// Check if the activated initiative is AI-related (would need to be passed as context)\n// For now, this is handled via the initiative card's tag check in the activation flow\nevents.unshift({type:'LOG',msg:'Sam Altman: AI initiative detected - bonus ready.'});}// Digitaler Wahlkampf: draw 1 card per own Media-tag on board\nif(lastInstant&&(lastInstant.effectKey==='init.digital_campaign.per_media'||lastInstant.name==='Digitaler Wahlkampf')){const ownBoard=[...state.board[ev.player].innen,...state.board[ev.player].aussen];const mediaCount=ownBoard.filter(c=>{var _getCardDetails3,_ref3,_getCardDetails3$call;const sub=(_getCardDetails3=(_ref3=require('../data/cardDetails')).getCardDetails)===null||_getCardDetails3===void 0?void 0:(_getCardDetails3$call=_getCardDetails3.call(_ref3,c.name))===null||_getCardDetails3$call===void 0?void 0:_getCardDetails3$call.subcategories;const legacy=c.tag==='Medien'||c.tag==='Media';return Array.isArray(sub)&&sub.includes('Medien')||legacy||Array.isArray(sub)&&sub.includes('Medien')||Array.isArray(sub)&&sub.includes('Medien');}).length;if(mediaCount>0){events.unshift({type:'DRAW_CARDS',player:ev.player,amount:mediaCount});events.unshift({type:'LOG',msg:\"Digitaler Wahlkampf: ziehe \".concat(mediaCount,\" Karte(n) (pro Medien-Karte).\")});}else{events.unshift({type:'LOG',msg:\"Digitaler Wahlkampf: Keine Medien-Karten auf dem Feld.\"});}}// After handling public reactions, enqueue a UI-only event to trigger hit animation on opponent's effected slots\n// We'll compute effected slots conservatively: all opponent's government and public slots that are occupied.\ntry{const opp=ev.player===1?2:1;const effectedSlots=[];(state.board[opp].aussen||[]).forEach((c,idx)=>{if(c)effectedSlots.push({player:opp,lane:'aussen',index:idx});});(state.board[opp].innen||[]).forEach((c,idx)=>{if(c)effectedSlots.push({player:opp,lane:'innen',index:idx});});// enqueue one LOG and one UI_TRIGGER per slot (UI_TRIGGER is handled by the frontend canvas to play hit animation)\neffectedSlots.forEach(s=>{events.unshift({type:'UI_TRIGGER_HIT_ANIM',player:s.player,lane:s.lane,index:s.index});});}catch(e){// ignore UI enqueue failures\n}break;}// ONCE_AP_ON_ACTIVATION removed - use standard ADD_AP events instead\n// ON_ACTIVATE_DRAW_AP removed - use standard ADD_AP and DRAW_CARDS events instead\n// Simplified AP system: No initiative-specific bonuses\n// All AP bonuses are now immediate ADD_AP events\n}// generic after snapshot diff for AP\nif(state.actionPoints[1]!==beforeAP[1]||state.actionPoints[2]!==beforeAP[2]){logger.dbg(\"AP delta P1 \".concat(beforeAP[1],\"->\").concat(state.actionPoints[1],\" | P2 \").concat(beforeAP[2],\"->\").concat(state.actionPoints[2]));}}// Ensure React viewers see mutated hand arrays by creating shallow copies\ntry{state.hands={1:state.hands[1]?[...state.hands[1]]:[],2:state.hands[2]?[...state.hands[2]]:[]};logger.dbg('resolveQueue: hand arrays shallow-copied to trigger UI updates');}catch(e){logger.dbg('resolveQueue: failed to shallow-copy hands',e);}}","map":{"version":3,"names":["getStrongestGovernment","registerTrap","logAP","logDraw","logDiscardRandom","logDeactivateRandom","logBuffStrongest","logShield","logDeactivateCard","logOpportunist","getGlobalRNG","logger","strongestGovernmentUid","state","p","_state$board$p","govRow","board","aussen","length","alive","filter","g","deactivated","sorted","slice","sort","a","b","influence","tempBuffs","tempDebuffs","uid","other","logPush","msg","log","push","strongestGov","row","c","publicNames","innen","map","name","hasPublic","includes","findCardByUidOnBoard","lane","arr","hit","find","findCardSlotByUid","idx","findIndex","player","index","permGov","permanentSlots","government","permPub","public","permGov2","permPub2","resolveQueue","events","rng","ev","shift","dbg","concat","type","beforeAP","_objectSpread","actionPoints","_state$effectFlags$ot","cur","next","Math","max","amount","effectFlags","opportunistActive","mirror","unshift","handBefore","hands","i","top","decks","handAfter","hand","randomInt","card","splice","discard","activeCards","pick","_deactivatedBy","indexOf","shields","Set","targetUid","undefined","add","effectKey","placeholder","delete","key","ply","window","__pc_visual_effects","playAnimsRef","now","performance","Date","current","started","duration","e","dispatchEvent","detail","CustomEvent","reason","ownBoard","cd","require","mediaNames","mediaCount","_cd$getCardDetails","_cd$getCardDetails$ca","sub","getCardDetails","call","subcategories","legacy","tag","Array","isArray","min","tgt","_state$effectFlags$ot2","abs","kind","opp","initiativesLocked","doublePublicAura","active","console","pendingAbilitySelect","actorPlayer","error","actor","victim","roll","targetIdx","target","oligarchCount","_getCardDetails","_ref","_getCardDetails$call","hasNewTag","total","targetInfluence","maxSlots","_state$board$ev$playe","_state$board$ev$playe2","_state$effectFlags$ev","publicCards","instantSlot","sofort","lastInstant","_getCardDetails2","_ref2","_getCardDetails2$call","details","legacyTag","amt","elonMusk","markZuckerberg","markZuckerbergUsed","aiWeiwei","samAltman","_getCardDetails3","_ref3","_getCardDetails3$call","effectedSlots","forEach","s"],"sources":["C:/Users/skank/Videos/Cards/Milchcards/src/utils/queue.ts"],"sourcesContent":["import { GameState, Player, PoliticianCard, Card } from '../types/game';\nimport { EffectEvent } from '../types/effects';\nimport { getStrongestGovernment } from './targets';\nimport { AP_CAP, MAX_DISCOUNT, MAX_REFUND } from '../config/gameConstants';\nimport { registerTrap } from './traps';\nimport {\n  logAP, logDiscount, logRefund, logDraw, logDiscardRandom,\n  logDeactivateRandom, logBuffStrongest, logShield, logDeactivateCard,\n  logInitiativeAura, logAiWeiwei, logPlattformBonus, logOpportunist\n} from './logs';\nimport { getGlobalRNG } from '../services/rng';\nimport { logger } from '../debug/logger';\n// Helper to find strongest government uid for new intents\nfunction strongestGovernmentUid(state: GameState, p: Player): number | null {\n  const govRow = state.board[p]?.aussen as PoliticianCard[];\n  if (!govRow || govRow.length === 0) return null;\n  const alive = govRow.filter(g => !(g as any).deactivated);\n  if (!alive.length) return null;\n  const sorted = alive.slice().sort((a,b) => (b.influence + (b.tempBuffs||0) - (b.tempDebuffs||0)) - (a.influence + (a.tempBuffs||0) - (a.tempDebuffs||0)));\n  return sorted[0].uid;\n}\n\nfunction other(p: Player): Player { return p === 1 ? 2 : 1; }\nfunction logPush(state: GameState, msg: string) { state.log.push(msg); }\n\nfunction strongestGov(state: GameState, p: Player): PoliticianCard | null {\n  const row = state.board[p].aussen as PoliticianCard[];\n  if (!row.length) return null;\n  const alive = row.filter(c => !c.deactivated);\n  if (alive.length === 0) return null;\n  return alive.slice().sort((a,b) => (b.influence + (b.tempBuffs||0) - (b.tempDebuffs||0)) - (a.influence + (a.tempBuffs||0) - (a.tempDebuffs||0)))[0];\n}\n\nfunction publicNames(state: GameState, p: Player): string[] {\n  return state.board[p].innen.map(c => c.name);\n}\n\nfunction hasPublic(state: GameState, p: Player, name: string): boolean {\n  return publicNames(state, p).includes(name);\n}\n\nfunction findCardByUidOnBoard(state: GameState, uid: number): Card | null {\n  for (const p of [1,2] as const) {\n    for (const lane of ['innen','aussen','sofort'] as const) {\n      const arr = state.board[p][lane];\n      const hit = arr.find(c => c.uid === uid);\n      if (hit) return hit;\n    }\n  }\n  return null;\n}\n\n// Find the slot location for a card uid on the board\nfunction findCardSlotByUid(state: GameState, uid: number): { player: Player; lane: string; index: number } | null {\n  for (const p of [1,2] as const) {\n    for (const lane of ['innen','aussen','sofort'] as const) {\n      const arr = state.board[p][lane];\n      const idx = arr.findIndex(c => c.uid === uid);\n      if (idx !== -1) return { player: p, lane, index: idx };\n    }\n  }\n  // check permanent slots\n  const permGov = state.permanentSlots[1].government as any;\n  if (permGov && permGov.uid === uid) return { player: 1, lane: 'permanent.government', index: 0 };\n  const permPub = state.permanentSlots[1].public as any;\n  if (permPub && permPub.uid === uid) return { player: 1, lane: 'permanent.public', index: 0 };\n  const permGov2 = state.permanentSlots[2].government as any;\n  if (permGov2 && permGov2.uid === uid) return { player: 2, lane: 'permanent.government', index: 0 };\n  const permPub2 = state.permanentSlots[2].public as any;\n  if (permPub2 && permPub2.uid === uid) return { player: 2, lane: 'permanent.public', index: 0 };\n  return null;\n}\n\nexport function resolveQueue(state: GameState, events: EffectEvent[]) {\n  const rng = getGlobalRNG();\n\n  // Single pass FIFO\n  while (events.length) {\n    const ev = events.shift()!;\n    logger.dbg(`DQ ${ev.type}`, ev);\n    // Capture small snapshot for delta calc\n    const beforeAP = { ...state.actionPoints };\n\n    switch (ev.type) {\n      case 'LOG': {\n        logPush(state, ev.msg);\n        break;\n      }\n\n      case 'ADD_AP': {\n        const cur = state.actionPoints[ev.player];\n        const next = Math.max(0, cur + ev.amount);\n        state.actionPoints[ev.player] = next;\n        logger.dbg(`ADD_AP before=${cur} amount=${ev.amount} after=${state.actionPoints[ev.player]}`);\n\n        // Opportunist AP-Spiegelung (falls aktiv beim Gegner)\n        if (state.effectFlags[other(ev.player)]?.opportunistActive && ev.amount > 0) {\n          const mirror = { type: 'ADD_AP', player: other(ev.player), amount: ev.amount } as EffectEvent;\n          events.unshift(mirror);\n          logPush(state, `Opportunist: AP +${ev.amount} gespiegelt.`);\n        }\n\n        logPush(state, logAP(ev.player, cur, next));\n        break;\n      }\n\n      case 'DRAW_CARDS': {\n        const handBefore = state.hands[ev.player].length;\n        for (let i = 0; i < ev.amount; i++) {\n          const top = state.decks[ev.player].shift();\n          if (top) {\n            state.hands[ev.player].push(top);\n            logPush(state, logDraw(ev.player, top.name));\n          }\n        }\n        const handAfter = state.hands[ev.player].length;\n        logger.dbg(`DRAW_CARDS player=${ev.player} before=${handBefore} after=${handAfter}`);\n        break;\n      }\n\n      case 'DISCARD_RANDOM_FROM_HAND': {\n        const hand = state.hands[ev.player];\n        for (let i = 0; i < ev.amount && hand.length > 0; i++) {\n          const idx = rng.randomInt(hand.length);\n          const [card] = hand.splice(idx, 1);\n          state.discard.push(card);\n          logPush(state, logDiscardRandom(ev.player, card.name));\n        }\n        break;\n      }\n\n      case 'DEACTIVATE_RANDOM_HAND': {\n        // Deaktivieren von Handkarten (nicht entfernen)\n        const hand = state.hands[ev.player];\n        const activeCards = hand.filter(c => !(c as any).deactivated);\n        logger.dbg(`DEACTIVATE_RANDOM_HAND: P${ev.player} handSize=${hand.length} activeCandidates=${activeCards.length}`);\n        if (activeCards.length === 0) {\n          logPush(state, `Oprah: no active hand cards to deactivate for P${ev.player}`);\n          break;\n        }\n        for (let i = 0; i < ev.amount && activeCards.length > 0; i++) {\n          const card = rng.pick(activeCards);\n          logger.dbg(`DEACTIVATE_RANDOM_HAND: picked=${card ? card.name : 'undefined'} for P${ev.player}`);\n          if (card) {\n            (card as any).deactivated = true;\n            (card as any)._deactivatedBy = 'OPRAH';\n            logPush(state, logDeactivateRandom(ev.player, card.name));\n            // Entferne aus activeCards für nächste Iteration\n            const idx = activeCards.indexOf(card);\n            if (idx > -1) activeCards.splice(idx, 1);\n          }\n        }\n        break;\n      }\n\n      // Legacy cases - removed\n      // SET_DISCOUNT and REFUND_NEXT_INITIATIVE are no longer supported\n      // Use ADD_AP instead\n\n      case 'GRANT_SHIELD': {\n        if (!state.shields) state.shields = new Set();\n        // Wenn kein spezifischer targetUid angegeben ist, verwende Platzhalter pro Spieler (-1 oder -2)\n        const uid = ev.targetUid !== undefined ? ev.targetUid : (ev.player === 1 ? -1 : -2);\n        state.shields.add(uid);\n        logPush(state, logShield(uid));\n        break;\n      }\n\n      case 'DEACTIVATE_CARD': {\n        const card = findCardByUidOnBoard(state, ev.targetUid);\n        if (card) {\n          (card as any).deactivated = true;\n          logPush(state, logDeactivateCard(card.name));\n\n          // Falls die Karte eine Shield-Aura ist, entferne Spielerschilde\n          if ((card as any).effectKey === 'init.intelligence_liaison.shield_aura') {\n            if (state.shields) {\n              const placeholder = ev.player === 1 ? -1 : -2;\n              state.shields.delete(placeholder);\n            }\n          }\n        }\n        break;\n      }\n\n      case 'REACTIVATE_CARD': {\n        const card = findCardByUidOnBoard(state, ev.targetUid);\n        if (card) {\n          (card as any).deactivated = false;\n          logPush(state, `🔄 ${card.name} wurde reaktiviert`);\n        }\n        break;\n      }\n\n      case 'RETURN_TO_HAND': {\n        const card = findCardByUidOnBoard(state, ev.targetUid);\n        if (card) {\n          // Remove from board\n          for (const p of [1, 2] as const) {\n            for (const lane of ['innen', 'aussen', 'sofort'] as const) {\n              const idx = state.board[p][lane].findIndex(c => c.uid === ev.targetUid);\n              if (idx !== -1) {\n                state.board[p][lane].splice(idx, 1);\n                // Add to hand\n                state.hands[ev.player].push(card);\n                logPush(state, `🔄 ${card.name} wurde zur Hand zurückgegeben`);\n                break;\n              }\n            }\n          }\n        }\n        break;\n      }\n\n      case 'CANCEL_CARD': {\n        const card = findCardByUidOnBoard(state, ev.targetUid);\n        if (card) {\n          // Remove from board and add to discard\n          for (const p of [1, 2] as const) {\n            for (const lane of ['innen', 'aussen', 'sofort'] as const) {\n              const idx = state.board[p][lane].findIndex(c => c.uid === ev.targetUid);\n              if (idx !== -1) {\n                state.board[p][lane].splice(idx, 1);\n                state.discard.push(card);\n                logPush(state, `❌ ${card.name} wurde annulliert`);\n                break;\n              }\n            }\n          }\n        }\n        break;\n      }\n\n      case 'REGISTER_TRAP': {\n        registerTrap(state, ev.player, (ev as any).key);\n        logPush(state, `Trap registered: ${(ev as any).key} (P${ev.player})`);\n        break;\n      }\n\n      // UI-only event: instruct frontend to play hit animation on a specific slot\n      case 'UI_TRIGGER_HIT_ANIM': {\n        // UI signal: play hit animation on the given slot. Do not mutate game state.\n        // Preferred local handling: push into VisualEffectsContext.playAnimsRef so the canvas picks it up.\n        try {\n          const ply = ev.player as Player;\n          const lane = (ev as any).lane as string;\n          const index = (ev as any).index as number;\n          const key = `hit:${ply}.${lane}.${index}`;\n          if (typeof window !== 'undefined' && (window as any).__pc_visual_effects && (window as any).__pc_visual_effects.playAnimsRef) {\n            const now = (typeof performance !== 'undefined') ? performance.now() : Date.now();\n            try { (window as any).__pc_visual_effects.playAnimsRef.current.push({ uid: key, started: now, duration: 25 * 30 }); } catch (e) {}\n          } else if (typeof window !== 'undefined' && (window as any).dispatchEvent) {\n            // fallback: dispatch DOM event for legacy listeners\n            const detail = { player: ply, lane, index };\n            try { window.dispatchEvent(new CustomEvent('pc:ui_trigger_hit_anim', { detail })); } catch (e) {}\n          }\n        } catch (e) {}\n        break;\n      }\n\n      case 'BUFF_STRONGEST_GOV':\n      case 'ADJUST_INFLUENCE': { // Alias auf BUFF_STRONGEST_GOV\n        const player = ev.player;\n        let amount = (ev as any).amount;\n        const reason = (ev as any).reason as string | undefined;\n\n        // Special intent: Oprah media buff - compute amount based on media cards on own board\n        if (reason === 'OPRAH_MEDIA_BUFF_INTENT') {\n          const ownBoard = [\n            ...state.board[player].innen,\n            ...state.board[player].aussen,\n          ];\n          const cd = require('../data/cardDetails') as any;\n          const mediaNames = ['Oprah Winfrey', 'Mark Zuckerberg', 'Tim Cook', 'Sam Altman'];\n          const mediaCount = ownBoard.filter(c => {\n            const sub = cd.getCardDetails?.(c.name)?.subcategories as string[] | undefined;\n            const legacy = (c as any).tag === 'Media' || (c as any).tag === 'Medien';\n            return (Array.isArray(sub) && sub.includes('Medien')) || legacy || mediaNames.includes(c.name);\n          }).length;\n          amount = Math.min(mediaCount, 3);\n          if (amount > 0) {\n            events.unshift({ type: 'LOG', msg: `Oprah Winfrey: Media buff calculated +${amount} (max 3).` });\n          } else {\n            events.unshift({ type: 'LOG', msg: `Oprah Winfrey: No media cards on board - no buff.` });\n          }\n        }\n\n        const tgt = getStrongestGovernment(state, player);\n        if (tgt && amount !== 0) {\n          if (amount >= 0) {\n            (tgt as PoliticianCard).tempBuffs = ((tgt as PoliticianCard).tempBuffs || 0) + amount;\n          } else {\n            (tgt as PoliticianCard).tempDebuffs = ((tgt as PoliticianCard).tempDebuffs || 0) + Math.abs(amount);\n          }\n          logPush(state, logBuffStrongest(player, tgt.name, amount));\n\n          // Opportunist-Spiegelung (falls aktiv beim Gegner)\n          if (state.effectFlags[other(player)]?.opportunistActive && amount > 0) {\n            const mirror = { type: 'BUFF_STRONGEST_GOV', player: other(player), amount } as EffectEvent;\n            events.unshift(mirror);\n            logPush(state, logOpportunist(other(player), amount));\n          }\n        }\n        break;\n      }\n\n      case 'DEBUFF_CARD': {\n        const card = findCardByUidOnBoard(state, ev.targetUid);\n        if (card && card.kind === 'pol') {\n          const tgt = card as any;\n          tgt.tempDebuffs = (tgt.tempDebuffs || 0) + Math.abs((ev as any).amount);\n          logPush(state, `🔻 ${tgt.name}: -${Math.abs((ev as any).amount)} Influence`);\n        }\n        break;\n      }\n\n      // ===== New intent event handlers =====\n\n      case 'DEACTIVATE_STRONGEST_ENEMY_GOV': {\n        const opp: Player = ev.player === 1 ? 2 : 1;\n        const uid = strongestGovernmentUid(state, opp);\n        if (uid !== null) {\n          events.unshift({ type: 'DEACTIVATE_CARD', player: opp, targetUid: uid });\n          events.unshift({ type: 'LOG', msg: 'Party Offensive: strongest enemy Government deactivated.' });\n        } else {\n          events.unshift({ type: 'LOG', msg: 'Party Offensive: no enemy Government to deactivate.' });\n        }\n        break;\n      }\n\n      case 'LOCK_OPPONENT_INITIATIVES_EOT': {\n        const opp: Player = ev.player === 1 ? 2 : 1;\n        state.effectFlags[opp].initiativesLocked = true;\n        events.unshift({ type: 'LOG', msg: 'Opposition Blockade: opponent initiatives locked until end of turn.' });\n        break;\n      }\n\n      case 'SET_DOUBLE_PUBLIC_AURA': {\n        state.effectFlags[ev.player].doublePublicAura = true;\n        events.unshift({ type: 'LOG', msg: 'Influencer Campaign: next Public aura will be doubled.' });\n        break;\n      }\n\n      case 'SET_OPPORTUNIST_ACTIVE': {\n        const { player, active } = ev as { type: 'SET_OPPORTUNIST_ACTIVE'; player: Player; active: boolean };\n        state.effectFlags[player].opportunistActive = active;\n        if (active) {\n          events.unshift({ type: 'LOG', msg: 'Opportunist: AP effects will be mirrored until end of turn.' });\n        }\n        break;\n      }\n\n      // === CORRUPTION: Bestechungsskandal 2.0 ===\n      case 'CORRUPTION_STEAL_GOV_START': {\n        console.log('🔥 PROCESSING CORRUPTION_STEAL_GOV_START - Player:', ev.player);\n        // Signal UI that player must select opponent government card & roll dice\n        (state as any).pendingAbilitySelect = {\n          type: 'corruption_steal',\n          actorPlayer: ev.player\n        } as any;\n\n        console.log('🔥 SET pendingAbilitySelect:', (state as any).pendingAbilitySelect);\n        events.unshift({ type: 'LOG', msg: 'Bribery Scandal 2.0: Wähle eine gegnerische Regierungskarte und würfle einen W6.' });\n        // Trigger UI hook to highlight targets\n        if (typeof window !== 'undefined') {\n          try {\n            console.log('🔥 DISPATCHING pc:corruption_select_target event');\n            window.dispatchEvent(new CustomEvent('pc:corruption_select_target', { detail: { player: ev.player } }));\n          } catch(e) {\n            console.error('🔥 ERROR dispatching corruption event:', e);\n          }\n        }\n        break;\n      }\n\n      case 'CORRUPTION_STEAL_GOV_RESOLVE': {\n        const { player: actor, targetUid } = ev as any;\n        const victim: Player = actor === 1 ? 2 : 1;\n\n        // Calculate W6 roll first\n        const roll = 1 + rng.randomInt(6);\n        console.log('🎲 ENGINE: Calculated W6 roll:', roll);\n\n        // Locate target card\n        const targetIdx = state.board[victim].aussen.findIndex(c => c.uid === targetUid);\n        if (targetIdx === -1) {\n          events.unshift({ type: 'LOG', msg: 'Bribery Scandal 2.0: Zielkarte nicht gefunden.' });\n          break;\n        }\n        const target = state.board[victim].aussen[targetIdx] as any;\n\n        // Oligarch bonus\n        const oligarchCount = state.board[actor as Player].innen.filter((c: any) => {\n          const sub = (require('../data/cardDetails') as any).getCardDetails?.(c.name)?.subcategories as string[] | undefined;\n          const hasNewTag = Array.isArray(sub) && sub.includes('Oligarch');\n          const legacy = (c as any).tag === 'Oligarch';\n          return hasNewTag || legacy;\n        }).length;\n\n        const total = roll + oligarchCount;\n        const targetInfluence = target.influence + (target.tempBuffs||0) - (target.tempDebuffs||0);\n\n        // Dispatch the calculated roll to UI for 3D dice display\n        if (typeof window !== 'undefined') {\n          try {\n            console.log('🎲 ENGINE: Dispatching calculated roll to UI:', roll);\n            window.dispatchEvent(new CustomEvent('pc:engine_dice_result', {\n              detail: { roll, player: actor, targetUid }\n            }));\n          } catch(e) {\n            console.error('🎲 ENGINE: Error dispatching dice result:', e);\n          }\n        }\n\n        events.unshift({ type: 'LOG', msg: `Bribery Scandal 2.0: Roll ${roll} +${oligarchCount} Bonus = ${total} vs ${targetInfluence} (${target.name}).` });\n\n        if (total >= targetInfluence) {\n          const maxSlots = 3;\n          if (state.board[actor as Player].aussen.length < maxSlots) {\n            // Transfer card\n            state.board[victim].aussen.splice(targetIdx,1);\n            state.board[actor as Player].aussen.push(target as any);\n            events.unshift({ type: 'LOG', msg: `Bribery Scandal 2.0: Erfolg! ${target.name} übernommen.` });\n          } else {\n            state.board[victim].aussen.splice(targetIdx,1);\n            state.discard.push(target as any);\n            events.unshift({ type: 'LOG', msg: `Bribery Scandal 2.0: Erfolg, aber kein Slot frei – ${target.name} entfernt.` });\n          }\n        } else {\n          events.unshift({ type: 'LOG', msg: 'Bribery Scandal 2.0: Wurf zu niedrig – keine Übernahme.' });\n        }\n\n        // Clear pending selection\n        (state as any).pendingAbilitySelect = undefined;\n        break;\n      }\n\n      case 'INITIATIVE_ACTIVATED': {\n        // Initiative activation event - trigger reactions from public cards\n        logPush(state, 'Initiative activated.');\n\n        // Check for public cards that react to initiative activation\n        const publicCards = state.board[ev.player]?.innen || [];\n\n        // Shadow Lobbying: +1 influence per own Oligarch-tag on board (max +3)\n        // Detect if the activating initiative was Shadow Lobbying by checking the last played instant in slot\n        const instantSlot = state.board[ev.player]?.sofort || [];\n        const lastInstant = instantSlot[0] as any;\n        if (lastInstant && (lastInstant.effectKey === 'init.shadow_lobbying.per_oligarch' || lastInstant.name === 'Shadow Lobbying')) {\n          const ownBoard = [\n            ...state.board[ev.player].innen,\n            ...state.board[ev.player].aussen,\n          ];\n          const oligarchCount = ownBoard.filter(c => {\n            const details = (c as any).name ? require('../data/cardDetails') as any : null;\n            // Fallback: try BaseSpecial tag if available\n            const sub = (require('../data/cardDetails') as any).getCardDetails?.((c as any).name)?.subcategories as string[] | undefined;\n            const hasNewTag = Array.isArray(sub) && sub.includes('Oligarch');\n            const legacyTag = (c as any).tag === 'Oligarch';\n            return hasNewTag || legacyTag;\n          }).length;\n          const amt = Math.min(oligarchCount, 3);\n          if (amt > 0) {\n            events.unshift({ type: 'BUFF_STRONGEST_GOV', player: ev.player, amount: amt });\n            events.unshift({ type: 'LOG', msg: `Shadow Lobbying: stärkste Regierung +${amt} Einfluss (pro Oligarch, max 3).` });\n          } else {\n            events.unshift({ type: 'LOG', msg: `Shadow Lobbying: Keine Oligarchen – kein Einfluss-Buff.` });\n          }\n        }\n\n        // Elon Musk: +1 AP on initiative activation\n        const elonMusk = publicCards.find(card =>\n          card.kind === 'spec' && (card as any).name === 'Elon Musk'\n        );\n        if (elonMusk) {\n          events.unshift({ type: 'ADD_AP', player: ev.player, amount: 1 });\n          events.unshift({ type: 'LOG', msg: 'Elon Musk: +1 AP on initiative activation.' });\n        }\n\n        // Mark Zuckerberg: +1 AP on initiative activation (once per turn)\n        const markZuckerberg = publicCards.find(card =>\n          card.kind === 'spec' && (card as any).name === 'Mark Zuckerberg'\n        );\n        if (markZuckerberg && !state.effectFlags[ev.player]?.markZuckerbergUsed) {\n          events.unshift({ type: 'ADD_AP', player: ev.player, amount: 1 });\n          events.unshift({ type: 'LOG', msg: 'Mark Zuckerberg: +1 AP on initiative activation.' });\n          if (!state.effectFlags[ev.player]) {\n            state.effectFlags[ev.player] = { markZuckerbergUsed: false };\n          }\n          state.effectFlags[ev.player].markZuckerbergUsed = true;\n        }\n\n        // Ai Weiwei: +1 card +1 AP on initiative activation\n        const aiWeiwei = publicCards.find(card =>\n          card.kind === 'spec' && (card as any).name === 'Ai Weiwei'\n        );\n        if (aiWeiwei) {\n          events.unshift({ type: 'DRAW_CARDS', player: ev.player, amount: 1 });\n          events.unshift({ type: 'ADD_AP', player: ev.player, amount: 1 });\n          events.unshift({ type: 'LOG', msg: 'Ai Weiwei: +1 card +1 AP on initiative activation.' });\n        }\n\n        // Sam Altman: +1 card +1 AP on AI-related initiative activation\n        const samAltman = publicCards.find(card =>\n          card.kind === 'spec' && (card as any).name === 'Sam Altman'\n        );\n        if (samAltman) {\n          // Check if the activated initiative is AI-related (would need to be passed as context)\n          // For now, this is handled via the initiative card's tag check in the activation flow\n          events.unshift({ type: 'LOG', msg: 'Sam Altman: AI initiative detected - bonus ready.' });\n        }\n\n        // Digitaler Wahlkampf: draw 1 card per own Media-tag on board\n        if (lastInstant && (lastInstant.effectKey === 'init.digital_campaign.per_media' || lastInstant.name === 'Digitaler Wahlkampf')) {\n          const ownBoard = [\n            ...state.board[ev.player].innen,\n            ...state.board[ev.player].aussen,\n          ];\n          const mediaCount = ownBoard.filter(c => {\n            const sub = (require('../data/cardDetails') as any).getCardDetails?.((c as any).name)?.subcategories as string[] | undefined;\n            const legacy = (c as any).tag === 'Medien' || (c as any).tag === 'Media';\n            return (Array.isArray(sub) && sub.includes('Medien')) || legacy || (Array.isArray(sub) && sub.includes('Medien')) || (Array.isArray(sub) && sub.includes('Medien'));\n          }).length;\n          if (mediaCount > 0) {\n            events.unshift({ type: 'DRAW_CARDS', player: ev.player, amount: mediaCount });\n            events.unshift({ type: 'LOG', msg: `Digitaler Wahlkampf: ziehe ${mediaCount} Karte(n) (pro Medien-Karte).` });\n          } else {\n            events.unshift({ type: 'LOG', msg: `Digitaler Wahlkampf: Keine Medien-Karten auf dem Feld.` });\n          }\n        }\n\n        // After handling public reactions, enqueue a UI-only event to trigger hit animation on opponent's effected slots\n        // We'll compute effected slots conservatively: all opponent's government and public slots that are occupied.\n        try {\n          const opp: Player = ev.player === 1 ? 2 : 1;\n          const effectedSlots: Array<{ player: Player; lane: string; index: number } > = [];\n          (state.board[opp].aussen || []).forEach((c, idx) => { if (c) effectedSlots.push({ player: opp, lane: 'aussen', index: idx }); });\n          (state.board[opp].innen || []).forEach((c, idx) => { if (c) effectedSlots.push({ player: opp, lane: 'innen', index: idx }); });\n\n          // enqueue one LOG and one UI_TRIGGER per slot (UI_TRIGGER is handled by the frontend canvas to play hit animation)\n          effectedSlots.forEach(s => {\n            events.unshift({ type: 'UI_TRIGGER_HIT_ANIM', player: s.player, lane: s.lane, index: s.index } as any);\n          });\n        } catch (e) {\n          // ignore UI enqueue failures\n        }\n\n        break;\n      }\n\n      // ONCE_AP_ON_ACTIVATION removed - use standard ADD_AP events instead\n\n      // ON_ACTIVATE_DRAW_AP removed - use standard ADD_AP and DRAW_CARDS events instead\n\n      // Simplified AP system: No initiative-specific bonuses\n      // All AP bonuses are now immediate ADD_AP events\n\n\n    }\n    // generic after snapshot diff for AP\n    if (state.actionPoints[1] !== beforeAP[1] || state.actionPoints[2] !== beforeAP[2]) {\n      logger.dbg(`AP delta P1 ${beforeAP[1]}->${state.actionPoints[1]} | P2 ${beforeAP[2]}->${state.actionPoints[2]}`);\n    }\n  }\n  // Ensure React viewers see mutated hand arrays by creating shallow copies\n  try {\n    state.hands = {\n      1: state.hands[1] ? [...state.hands[1]] : [],\n      2: state.hands[2] ? [...state.hands[2]] : []\n    } as any;\n    logger.dbg('resolveQueue: hand arrays shallow-copied to trigger UI updates');\n  } catch (e) {\n    logger.dbg('resolveQueue: failed to shallow-copy hands', e);\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}