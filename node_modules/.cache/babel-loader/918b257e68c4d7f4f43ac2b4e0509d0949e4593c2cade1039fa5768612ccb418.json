{"ast":null,"code":"/**\r\n * Deterministisches RNG-System\r\n * Ermöglicht reproduzierbare Zufallszahlen für Tests\r\n */\n\n/**\r\n * Einfacher Pseudo-Zufallszahlengenerator (Linear Congruential Generator)\r\n * Basiert auf Park & Miller (1988)\r\n */\nclass SeededRNG {\n  constructor(seed = Date.now()) {\n    this.seed = void 0;\n    // Konvertiere String-Seed zu Zahl\n    if (typeof seed === 'string') {\n      this.seed = this.hashString(seed);\n    } else {\n      this.seed = seed;\n    }\n\n    // Stelle sicher, dass Seed positiv ist\n    if (this.seed <= 0) {\n      this.seed = 1;\n    }\n  }\n\n  /**\r\n   * Einfacher String-Hash für Seed-Konvertierung\r\n   */\n  hashString(str) {\n    let hash = 0;\n    for (let i = 0; i < str.length; i++) {\n      const char = str.charCodeAt(i);\n      hash = (hash << 5) - hash + char;\n      hash = hash & hash; // Convert to 32-bit integer\n    }\n    return Math.abs(hash) || 1;\n  }\n\n  /**\r\n   * Generiert nächste Pseudo-Zufallszahl\r\n   */\n  random() {\n    // Park & Miller constants\n    const a = 16807;\n    const m = 2147483647;\n    this.seed = a * this.seed % m;\n    return (this.seed - 1) / (m - 1);\n  }\n\n  /**\r\n   * Generiert Zufalls-Integer zwischen 0 und max (exklusiv)\r\n   */\n  randomInt(max) {\n    return Math.floor(this.random() * max);\n  }\n\n  /**\r\n   * Wählt zufälliges Element aus Array\r\n   */\n  pick(array) {\n    if (array.length === 0) return undefined;\n    const index = this.randomInt(array.length);\n    return array[index];\n  }\n}\n\n/**\r\n * Standard Math.random() basiertes RNG für Produktion\r\n */\nclass StandardRNG {\n  random() {\n    return Math.random();\n  }\n  randomInt(max) {\n    return Math.floor(Math.random() * max);\n  }\n  pick(array) {\n    if (array.length === 0) return undefined;\n    const index = Math.floor(Math.random() * array.length);\n    return array[index];\n  }\n}\n\n/**\r\n * Factory-Funktion zum Erstellen eines RNG\r\n * @param seed Optional: Seed für deterministisches RNG (für Tests)\r\n */\nexport function makeRNG(seed) {\n  if (seed !== undefined) {\n    return new SeededRNG(seed);\n  }\n  return new StandardRNG();\n}\n\n/**\r\n * Globale RNG-Instanz (kann für Tests überschrieben werden)\r\n */\nlet globalRNG = new StandardRNG();\n\n/**\r\n * Setzt die globale RNG-Instanz\r\n */\nexport function setGlobalRNG(rng) {\n  globalRNG = rng;\n}\n\n/**\r\n * Gibt die globale RNG-Instanz zurück\r\n */\nexport function getGlobalRNG() {\n  return globalRNG;\n}\n\n/**\r\n * Convenience-Funktion: Setzt globales RNG mit Seed\r\n */\nexport function seedGlobalRNG(seed) {\n  globalRNG = new SeededRNG(seed);\n}\n\n/**\r\n * Convenience-Funktion: Setzt globales RNG auf Standard zurück\r\n */\nexport function resetGlobalRNG() {\n  globalRNG = new StandardRNG();\n}","map":{"version":3,"names":["SeededRNG","constructor","seed","Date","now","hashString","str","hash","i","length","char","charCodeAt","Math","abs","random","a","m","randomInt","max","floor","pick","array","undefined","index","StandardRNG","makeRNG","globalRNG","setGlobalRNG","rng","getGlobalRNG","seedGlobalRNG","resetGlobalRNG"],"sources":["C:/Users/skank/Videos/Cards/Milchcards/src/services/rng.ts"],"sourcesContent":["/**\r\n * Deterministisches RNG-System\r\n * Ermöglicht reproduzierbare Zufallszahlen für Tests\r\n */\r\n\r\nexport interface RNG {\r\n  /**\r\n   * Wählt ein zufälliges Element aus einem Array\r\n   */\r\n  pick<T>(array: T[]): T | undefined;\r\n\r\n  /**\r\n   * Gibt eine Zufallszahl zwischen 0 (inklusiv) und 1 (exklusiv) zurück\r\n   */\r\n  random(): number;\r\n\r\n  /**\r\n   * Gibt eine ganze Zufallszahl zwischen 0 (inklusiv) und max (exklusiv) zurück\r\n   */\r\n  randomInt(max: number): number;\r\n}\r\n\r\n/**\r\n * Einfacher Pseudo-Zufallszahlengenerator (Linear Congruential Generator)\r\n * Basiert auf Park & Miller (1988)\r\n */\r\nclass SeededRNG implements RNG {\r\n  private seed: number;\r\n\r\n  constructor(seed: string | number = Date.now()) {\r\n    // Konvertiere String-Seed zu Zahl\r\n    if (typeof seed === 'string') {\r\n      this.seed = this.hashString(seed);\r\n    } else {\r\n      this.seed = seed;\r\n    }\r\n\r\n    // Stelle sicher, dass Seed positiv ist\r\n    if (this.seed <= 0) {\r\n      this.seed = 1;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Einfacher String-Hash für Seed-Konvertierung\r\n   */\r\n  private hashString(str: string): number {\r\n    let hash = 0;\r\n    for (let i = 0; i < str.length; i++) {\r\n      const char = str.charCodeAt(i);\r\n      hash = ((hash << 5) - hash) + char;\r\n      hash = hash & hash; // Convert to 32-bit integer\r\n    }\r\n    return Math.abs(hash) || 1;\r\n  }\r\n\r\n  /**\r\n   * Generiert nächste Pseudo-Zufallszahl\r\n   */\r\n  random(): number {\r\n    // Park & Miller constants\r\n    const a = 16807;\r\n    const m = 2147483647;\r\n\r\n    this.seed = (a * this.seed) % m;\r\n    return (this.seed - 1) / (m - 1);\r\n  }\r\n\r\n  /**\r\n   * Generiert Zufalls-Integer zwischen 0 und max (exklusiv)\r\n   */\r\n  randomInt(max: number): number {\r\n    return Math.floor(this.random() * max);\r\n  }\r\n\r\n  /**\r\n   * Wählt zufälliges Element aus Array\r\n   */\r\n  pick<T>(array: T[]): T | undefined {\r\n    if (array.length === 0) return undefined;\r\n    const index = this.randomInt(array.length);\r\n    return array[index];\r\n  }\r\n}\r\n\r\n/**\r\n * Standard Math.random() basiertes RNG für Produktion\r\n */\r\nclass StandardRNG implements RNG {\r\n  random(): number {\r\n    return Math.random();\r\n  }\r\n\r\n  randomInt(max: number): number {\r\n    return Math.floor(Math.random() * max);\r\n  }\r\n\r\n  pick<T>(array: T[]): T | undefined {\r\n    if (array.length === 0) return undefined;\r\n    const index = Math.floor(Math.random() * array.length);\r\n    return array[index];\r\n  }\r\n}\r\n\r\n/**\r\n * Factory-Funktion zum Erstellen eines RNG\r\n * @param seed Optional: Seed für deterministisches RNG (für Tests)\r\n */\r\nexport function makeRNG(seed?: string | number): RNG {\r\n  if (seed !== undefined) {\r\n    return new SeededRNG(seed);\r\n  }\r\n  return new StandardRNG();\r\n}\r\n\r\n/**\r\n * Globale RNG-Instanz (kann für Tests überschrieben werden)\r\n */\r\nlet globalRNG: RNG = new StandardRNG();\r\n\r\n/**\r\n * Setzt die globale RNG-Instanz\r\n */\r\nexport function setGlobalRNG(rng: RNG): void {\r\n  globalRNG = rng;\r\n}\r\n\r\n/**\r\n * Gibt die globale RNG-Instanz zurück\r\n */\r\nexport function getGlobalRNG(): RNG {\r\n  return globalRNG;\r\n}\r\n\r\n/**\r\n * Convenience-Funktion: Setzt globales RNG mit Seed\r\n */\r\nexport function seedGlobalRNG(seed: string | number): void {\r\n  globalRNG = new SeededRNG(seed);\r\n}\r\n\r\n/**\r\n * Convenience-Funktion: Setzt globales RNG auf Standard zurück\r\n */\r\nexport function resetGlobalRNG(): void {\r\n  globalRNG = new StandardRNG();\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}