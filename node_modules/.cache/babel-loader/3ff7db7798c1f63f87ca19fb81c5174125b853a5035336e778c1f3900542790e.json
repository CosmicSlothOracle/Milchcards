{"ast":null,"code":"import _objectSpread from\"C:/Users/skank/Videos/Cards/Milchcards/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{sumRow,getCardActionPointCost}from'../utils/gameUtils';// Basic AI player module with three difficulty presets.\n// takeTurn applies a state update via setGameState(prev => newState).\nexport function takeTurn(setGameState,difficulty,log){setGameState(prev=>{var _prev$aiEnabled$,_prev$aiEnabled;const aiEnabled=(_prev$aiEnabled$=(_prev$aiEnabled=prev.aiEnabled)===null||_prev$aiEnabled===void 0?void 0:_prev$aiEnabled[2])!==null&&_prev$aiEnabled$!==void 0?_prev$aiEnabled$:false;if(!aiEnabled||prev.current!==2)return prev;const hand=prev.hands[2];const playerBoard=prev.board[1];const aiBoard=prev.board[2];const aiAP=prev.actionPoints[2];log(\"\\uD83E\\uDD16 AI(\".concat(difficulty,\") Analyse: P=\").concat(sumRow([...playerBoard.aussen]),\" vs AI=\").concat(sumRow([...aiBoard.aussen])));if(aiAP<=0){log('ðŸ¤– AI passt - keine AP mehr.');return _objectSpread(_objectSpread({},prev),{},{passed:_objectSpread(_objectSpread({},prev.passed),{},{2:true})});}const candidates=[];hand.forEach((card,idx)=>{const apCost=getCardActionPointCost(card,prev,2);if(apCost>aiAP)return;let priority=0;let reason='';if(card.kind==='pol'){const polCard=card;const lane=polCard.tag==='Staatsoberhaupt'||polCard.tag==='Regierungschef'||polCard.tag==='Diplomat'?'aussen':'innen';if(prev.board[2][lane].length<5){// simple heuristics\npriority=(polCard.influence||0)+(lane==='aussen'?50:20);reason=lane==='aussen'?'Regierungsaufbau':'Ã–ffentlichkeit';}}else if(card.kind==='spec'){const specCard=card;if(specCard.type==='Sofort-Initiative'||specCard.type==='Dauerhaft-Initiative'){priority=specCard.bp?40+specCard.bp*5:50;reason='Initiative';}else if(specCard.type==='Intervention'){priority=45;reason='Intervention';}else{priority=30;reason='Sonstiges';}}if(priority>0){// difficulty adjustments\nif(difficulty==='medium'){// small randomness\npriority+=Math.floor(Math.random()*10)-5;}else if(difficulty==='hard'){// bias toward higher-impact plays\npriority+=10;}candidates.push({index:idx,card,priority,reason,apCost});}});if(candidates.length===0){log('ðŸ¤– AI passt - keine spielbaren Karten verfÃ¼gbar.');return _objectSpread(_objectSpread({},prev),{},{passed:_objectSpread(_objectSpread({},prev.passed),{},{2:true})});}candidates.sort((a,b)=>b.priority-a.priority);const choice=candidates[0];if(choice.card.kind==='pol'){var _influence;const polChoice=choice.card;const lane=polChoice.tag==='Staatsoberhaupt'||polChoice.tag==='Regierungschef'||polChoice.tag==='Diplomat'?'aussen':'innen';const newP2Hand=[...prev.hands[2]];const[played]=newP2Hand.splice(choice.index,1);const newP2Lane=[...prev.board[2][lane],played];const newP2Board=_objectSpread(_objectSpread({},prev.board[2]),{},{[lane]:newP2Lane});const newBoard=_objectSpread(_objectSpread({},prev.board),{},{2:newP2Board});const newActionPoints=_objectSpread(_objectSpread({},prev.actionPoints),{},{2:prev.actionPoints[2]-choice.apCost});const laneName=lane==='aussen'?'Regierungsreihe':'Ã–ffentlichkeitsreihe';const power=(_influence=played.influence)!==null&&_influence!==void 0?_influence:0;log(\"\\uD83E\\uDD16 AI spielt \".concat(played.name,\" (\").concat(power,\" Einfluss) nach \").concat(laneName,\". (\").concat(choice.reason,\")\"));return _objectSpread(_objectSpread({},prev),{},{hands:_objectSpread(_objectSpread({},prev.hands),{},{2:newP2Hand}),board:newBoard,actionPoints:newActionPoints});}// spec cards\nconst newP2Hand=[...prev.hands[2]];const[played]=newP2Hand.splice(choice.index,1);const newActionPoints=_objectSpread(_objectSpread({},prev.actionPoints),{},{2:prev.actionPoints[2]-choice.apCost});// Permanent initiatives try to occupy slots\nif(played.type==='Dauerhaft-Initiative'){const slotType=played.slot==='Ã–ffentlichkeit'?'public':'government';if(slotType==='government'&&!prev.permanentSlots[2].government){const newPermanentSlots=_objectSpread(_objectSpread({},prev.permanentSlots),{},{2:_objectSpread(_objectSpread({},prev.permanentSlots[2]),{},{government:played})});log(\"\\uD83E\\uDD16 AI legt \".concat(played.name,\" in Regierung Spezial-Slot. (\").concat(choice.reason,\")\"));return _objectSpread(_objectSpread({},prev),{},{hands:_objectSpread(_objectSpread({},prev.hands),{},{2:newP2Hand}),permanentSlots:newPermanentSlots,actionPoints:newActionPoints});}else if(slotType==='public'&&!prev.permanentSlots[2].public){const newPermanentSlots=_objectSpread(_objectSpread({},prev.permanentSlots),{},{2:_objectSpread(_objectSpread({},prev.permanentSlots[2]),{},{public:played})});log(\"\\uD83E\\uDD16 AI legt \".concat(played.name,\" in \\xD6ffentlichkeit Spezial-Slot. (\").concat(choice.reason,\")\"));return _objectSpread(_objectSpread({},prev),{},{hands:_objectSpread(_objectSpread({},prev.hands),{},{2:newP2Hand}),permanentSlots:newPermanentSlots,actionPoints:newActionPoints});}}log(\"\\uD83E\\uDD16 AI spielt Spezialkarte \".concat(played.name,\". (\").concat(choice.reason,\")\"));return _objectSpread(_objectSpread({},prev),{},{hands:_objectSpread(_objectSpread({},prev.hands),{},{2:newP2Hand}),actionPoints:newActionPoints});});}// Expose a light-weight decision helper for tests\nexport function decideBestAction(state,player){let difficulty=arguments.length>2&&arguments[2]!==undefined?arguments[2]:'easy';// reuse takeTurn logic but without mutating state: produce an action suggestions\nconst hand=state.hands[player];const aiAP=state.actionPoints[player];if(aiAP<=0)return{type:'pass'};const candidates=[];hand.forEach((card,idx)=>{const apCost=getCardActionPointCost(card,state,player);if(apCost>aiAP)return;let priority=0;if(card.kind==='pol')priority=card.influence+50;else priority=40;if(difficulty==='medium')priority+=Math.floor(Math.random()*10)-5;if(difficulty==='hard')priority+=10;candidates.push({index:idx,card,priority});});if(candidates.length===0)return{type:'pass'};candidates.sort((a,b)=>b.priority-a.priority);return{type:'play',index:candidates[0].index};}","map":{"version":3,"names":["sumRow","getCardActionPointCost","takeTurn","setGameState","difficulty","log","prev","_prev$aiEnabled$","_prev$aiEnabled","aiEnabled","current","hand","hands","playerBoard","board","aiBoard","aiAP","actionPoints","concat","aussen","_objectSpread","passed","candidates","forEach","card","idx","apCost","priority","reason","kind","polCard","lane","tag","length","influence","specCard","type","bp","Math","floor","random","push","index","sort","a","b","choice","_influence","polChoice","newP2Hand","played","splice","newP2Lane","newP2Board","newBoard","newActionPoints","laneName","power","name","slotType","slot","permanentSlots","government","newPermanentSlots","public","decideBestAction","state","player","arguments","undefined"],"sources":["C:/Users/skank/Videos/Cards/Milchcards/src/ai/aiPlayer.ts"],"sourcesContent":["import { GameState, Card, Player } from '../types/game';\r\nimport { sumRow, getCardActionPointCost } from '../utils/gameUtils';\r\n\r\nexport type Difficulty = 'easy' | 'medium' | 'hard';\r\n\r\nexport type AIAction =\r\n  | { type: 'pass' }\r\n  | { type: 'play'; index: number; lane?: 'innen' | 'aussen' };\r\n\r\n// Basic AI player module with three difficulty presets.\r\n// takeTurn applies a state update via setGameState(prev => newState).\r\nexport function takeTurn(\r\n  setGameState: React.Dispatch<React.SetStateAction<GameState>>,\r\n  difficulty: Difficulty,\r\n  log: (msg: string) => void\r\n) {\r\n  setGameState(prev => {\r\n    const aiEnabled = prev.aiEnabled?.[2] ?? false;\r\n    if (!aiEnabled || prev.current !== 2) return prev;\r\n\r\n    const hand = prev.hands[2];\r\n    const playerBoard = prev.board[1];\r\n    const aiBoard = prev.board[2];\r\n    const aiAP = prev.actionPoints[2];\r\n\r\n    log(`ðŸ¤– AI(${difficulty}) Analyse: P=${sumRow([...playerBoard.aussen])} vs AI=${sumRow([...aiBoard.aussen])}`);\r\n\r\n    if (aiAP <= 0) {\r\n      log('ðŸ¤– AI passt - keine AP mehr.');\r\n      return { ...prev, passed: { ...prev.passed, 2: true } };\r\n    }\r\n\r\n    const candidates: Array<{ index: number; card: Card; priority: number; reason: string; apCost: number }> = [];\r\n\r\n    hand.forEach((card, idx) => {\r\n      const apCost = getCardActionPointCost(card, prev, 2);\r\n      if (apCost > aiAP) return;\r\n\r\n      let priority = 0;\r\n      let reason = '';\r\n\r\n      if (card.kind === 'pol') {\r\n        const polCard = card as any;\r\n        const lane = polCard.tag === 'Staatsoberhaupt' || polCard.tag === 'Regierungschef' || polCard.tag === 'Diplomat' ? 'aussen' : 'innen';\r\n        if (prev.board[2][lane].length < 5) {\r\n          // simple heuristics\r\n          priority = (polCard.influence || 0) + (lane === 'aussen' ? 50 : 20);\r\n          reason = lane === 'aussen' ? 'Regierungsaufbau' : 'Ã–ffentlichkeit';\r\n        }\r\n      }\r\n      else if (card.kind === 'spec') {\r\n        const specCard = card as any;\r\n        if (specCard.type === 'Sofort-Initiative' || specCard.type === 'Dauerhaft-Initiative') {\r\n          priority = specCard.bp ? 40 + specCard.bp * 5 : 50;\r\n          reason = 'Initiative';\r\n        } else if (specCard.type === 'Intervention') {\r\n          priority = 45;\r\n          reason = 'Intervention';\r\n        } else {\r\n          priority = 30;\r\n          reason = 'Sonstiges';\r\n        }\r\n      }\r\n\r\n      if (priority > 0) {\r\n        // difficulty adjustments\r\n        if (difficulty === 'medium') {\r\n          // small randomness\r\n          priority += Math.floor(Math.random() * 10) - 5;\r\n        } else if (difficulty === 'hard') {\r\n          // bias toward higher-impact plays\r\n          priority += 10;\r\n        }\r\n\r\n        candidates.push({ index: idx, card, priority, reason, apCost });\r\n      }\r\n    });\r\n\r\n    if (candidates.length === 0) {\r\n      log('ðŸ¤– AI passt - keine spielbaren Karten verfÃ¼gbar.');\r\n      return { ...prev, passed: { ...prev.passed, 2: true } };\r\n    }\r\n\r\n    candidates.sort((a, b) => b.priority - a.priority);\r\n    const choice = candidates[0];\r\n\r\n    if (choice.card.kind === 'pol') {\r\n      const polChoice = choice.card as any;\r\n      const lane = polChoice.tag === 'Staatsoberhaupt' || polChoice.tag === 'Regierungschef' || polChoice.tag === 'Diplomat' ? 'aussen' : 'innen';\r\n\r\n      const newP2Hand = [...prev.hands[2]];\r\n      const [played] = newP2Hand.splice(choice.index, 1);\r\n      const newP2Lane = [...prev.board[2][lane], played];\r\n      const newP2Board = { ...prev.board[2], [lane]: newP2Lane };\r\n      const newBoard = { ...prev.board, 2: newP2Board };\r\n      const newActionPoints = { ...prev.actionPoints, 2: prev.actionPoints[2] - choice.apCost };\r\n\r\n      const laneName = lane === 'aussen' ? 'Regierungsreihe' : 'Ã–ffentlichkeitsreihe';\r\n      const power = (played as any).influence ?? 0;\r\n      log(`ðŸ¤– AI spielt ${played.name} (${power} Einfluss) nach ${laneName}. (${choice.reason})`);\r\n\r\n      return {\r\n        ...prev,\r\n        hands: { ...prev.hands, 2: newP2Hand },\r\n        board: newBoard,\r\n        actionPoints: newActionPoints\r\n      };\r\n    }\r\n\r\n    // spec cards\r\n    const newP2Hand = [...prev.hands[2]];\r\n    const [played] = newP2Hand.splice(choice.index, 1);\r\n    const newActionPoints = { ...prev.actionPoints, 2: prev.actionPoints[2] - choice.apCost };\r\n\r\n    // Permanent initiatives try to occupy slots\r\n    if ((played as any).type === 'Dauerhaft-Initiative') {\r\n      const slotType = (played as any).slot === 'Ã–ffentlichkeit' ? 'public' : 'government';\r\n      if (slotType === 'government' && !prev.permanentSlots[2].government) {\r\n        const newPermanentSlots = { ...prev.permanentSlots, 2: { ...prev.permanentSlots[2], government: played } };\r\n        log(`ðŸ¤– AI legt ${played.name} in Regierung Spezial-Slot. (${choice.reason})`);\r\n        return { ...prev, hands: { ...prev.hands, 2: newP2Hand }, permanentSlots: newPermanentSlots, actionPoints: newActionPoints };\r\n      } else if (slotType === 'public' && !prev.permanentSlots[2].public) {\r\n        const newPermanentSlots = { ...prev.permanentSlots, 2: { ...prev.permanentSlots[2], public: played } };\r\n        log(`ðŸ¤– AI legt ${played.name} in Ã–ffentlichkeit Spezial-Slot. (${choice.reason})`);\r\n        return { ...prev, hands: { ...prev.hands, 2: newP2Hand }, permanentSlots: newPermanentSlots, actionPoints: newActionPoints };\r\n      }\r\n    }\r\n\r\n    log(`ðŸ¤– AI spielt Spezialkarte ${played.name}. (${choice.reason})`);\r\n    return { ...prev, hands: { ...prev.hands, 2: newP2Hand }, actionPoints: newActionPoints };\r\n  });\r\n}\r\n\r\n// Expose a light-weight decision helper for tests\r\nexport function decideBestAction(state: GameState, player: Player, difficulty: Difficulty = 'easy'): AIAction {\r\n  // reuse takeTurn logic but without mutating state: produce an action suggestions\r\n  const hand = state.hands[player];\r\n  const aiAP = state.actionPoints[player];\r\n  if (aiAP <= 0) return { type: 'pass' };\r\n\r\n  const candidates: Array<{ index: number; card: Card; priority: number }> = [];\r\n  hand.forEach((card, idx) => {\r\n    const apCost = getCardActionPointCost(card, state, player);\r\n    if (apCost > aiAP) return;\r\n    let priority = 0;\r\n    if (card.kind === 'pol') priority = (card as any).influence + 50;\r\n    else priority = 40;\r\n    if (difficulty === 'medium') priority += Math.floor(Math.random() * 10) - 5;\r\n    if (difficulty === 'hard') priority += 10;\r\n    candidates.push({ index: idx, card, priority });\r\n  });\r\n  if (candidates.length === 0) return { type: 'pass' };\r\n  candidates.sort((a, b) => b.priority - a.priority);\r\n  return { type: 'play', index: candidates[0].index };\r\n}\r\n\r\n\r\n\r\n"],"mappings":"2HACA,OAASA,MAAM,CAAEC,sBAAsB,KAAQ,oBAAoB,CAQnE;AACA;AACA,MAAO,SAAS,CAAAC,QAAQA,CACtBC,YAA6D,CAC7DC,UAAsB,CACtBC,GAA0B,CAC1B,CACAF,YAAY,CAACG,IAAI,EAAI,KAAAC,gBAAA,CAAAC,eAAA,CACnB,KAAM,CAAAC,SAAS,EAAAF,gBAAA,EAAAC,eAAA,CAAGF,IAAI,CAACG,SAAS,UAAAD,eAAA,iBAAdA,eAAA,CAAiB,CAAC,CAAC,UAAAD,gBAAA,UAAAA,gBAAA,CAAI,KAAK,CAC9C,GAAI,CAACE,SAAS,EAAIH,IAAI,CAACI,OAAO,GAAK,CAAC,CAAE,MAAO,CAAAJ,IAAI,CAEjD,KAAM,CAAAK,IAAI,CAAGL,IAAI,CAACM,KAAK,CAAC,CAAC,CAAC,CAC1B,KAAM,CAAAC,WAAW,CAAGP,IAAI,CAACQ,KAAK,CAAC,CAAC,CAAC,CACjC,KAAM,CAAAC,OAAO,CAAGT,IAAI,CAACQ,KAAK,CAAC,CAAC,CAAC,CAC7B,KAAM,CAAAE,IAAI,CAAGV,IAAI,CAACW,YAAY,CAAC,CAAC,CAAC,CAEjCZ,GAAG,oBAAAa,MAAA,CAAUd,UAAU,kBAAAc,MAAA,CAAgBlB,MAAM,CAAC,CAAC,GAAGa,WAAW,CAACM,MAAM,CAAC,CAAC,YAAAD,MAAA,CAAUlB,MAAM,CAAC,CAAC,GAAGe,OAAO,CAACI,MAAM,CAAC,CAAC,CAAE,CAAC,CAE9G,GAAIH,IAAI,EAAI,CAAC,CAAE,CACbX,GAAG,CAAC,8BAA8B,CAAC,CACnC,OAAAe,aAAA,CAAAA,aAAA,IAAYd,IAAI,MAAEe,MAAM,CAAAD,aAAA,CAAAA,aAAA,IAAOd,IAAI,CAACe,MAAM,MAAE,CAAC,CAAE,IAAI,EAAE,GACvD,CAEA,KAAM,CAAAC,UAAkG,CAAG,EAAE,CAE7GX,IAAI,CAACY,OAAO,CAAC,CAACC,IAAI,CAAEC,GAAG,GAAK,CAC1B,KAAM,CAAAC,MAAM,CAAGzB,sBAAsB,CAACuB,IAAI,CAAElB,IAAI,CAAE,CAAC,CAAC,CACpD,GAAIoB,MAAM,CAAGV,IAAI,CAAE,OAEnB,GAAI,CAAAW,QAAQ,CAAG,CAAC,CAChB,GAAI,CAAAC,MAAM,CAAG,EAAE,CAEf,GAAIJ,IAAI,CAACK,IAAI,GAAK,KAAK,CAAE,CACvB,KAAM,CAAAC,OAAO,CAAGN,IAAW,CAC3B,KAAM,CAAAO,IAAI,CAAGD,OAAO,CAACE,GAAG,GAAK,iBAAiB,EAAIF,OAAO,CAACE,GAAG,GAAK,gBAAgB,EAAIF,OAAO,CAACE,GAAG,GAAK,UAAU,CAAG,QAAQ,CAAG,OAAO,CACrI,GAAI1B,IAAI,CAACQ,KAAK,CAAC,CAAC,CAAC,CAACiB,IAAI,CAAC,CAACE,MAAM,CAAG,CAAC,CAAE,CAClC;AACAN,QAAQ,CAAG,CAACG,OAAO,CAACI,SAAS,EAAI,CAAC,GAAKH,IAAI,GAAK,QAAQ,CAAG,EAAE,CAAG,EAAE,CAAC,CACnEH,MAAM,CAAGG,IAAI,GAAK,QAAQ,CAAG,kBAAkB,CAAG,gBAAgB,CACpE,CACF,CAAC,IACI,IAAIP,IAAI,CAACK,IAAI,GAAK,MAAM,CAAE,CAC7B,KAAM,CAAAM,QAAQ,CAAGX,IAAW,CAC5B,GAAIW,QAAQ,CAACC,IAAI,GAAK,mBAAmB,EAAID,QAAQ,CAACC,IAAI,GAAK,sBAAsB,CAAE,CACrFT,QAAQ,CAAGQ,QAAQ,CAACE,EAAE,CAAG,EAAE,CAAGF,QAAQ,CAACE,EAAE,CAAG,CAAC,CAAG,EAAE,CAClDT,MAAM,CAAG,YAAY,CACvB,CAAC,IAAM,IAAIO,QAAQ,CAACC,IAAI,GAAK,cAAc,CAAE,CAC3CT,QAAQ,CAAG,EAAE,CACbC,MAAM,CAAG,cAAc,CACzB,CAAC,IAAM,CACLD,QAAQ,CAAG,EAAE,CACbC,MAAM,CAAG,WAAW,CACtB,CACF,CAEA,GAAID,QAAQ,CAAG,CAAC,CAAE,CAChB;AACA,GAAIvB,UAAU,GAAK,QAAQ,CAAE,CAC3B;AACAuB,QAAQ,EAAIW,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,CAAG,EAAE,CAAC,CAAG,CAAC,CAChD,CAAC,IAAM,IAAIpC,UAAU,GAAK,MAAM,CAAE,CAChC;AACAuB,QAAQ,EAAI,EAAE,CAChB,CAEAL,UAAU,CAACmB,IAAI,CAAC,CAAEC,KAAK,CAAEjB,GAAG,CAAED,IAAI,CAAEG,QAAQ,CAAEC,MAAM,CAAEF,MAAO,CAAC,CAAC,CACjE,CACF,CAAC,CAAC,CAEF,GAAIJ,UAAU,CAACW,MAAM,GAAK,CAAC,CAAE,CAC3B5B,GAAG,CAAC,kDAAkD,CAAC,CACvD,OAAAe,aAAA,CAAAA,aAAA,IAAYd,IAAI,MAAEe,MAAM,CAAAD,aAAA,CAAAA,aAAA,IAAOd,IAAI,CAACe,MAAM,MAAE,CAAC,CAAE,IAAI,EAAE,GACvD,CAEAC,UAAU,CAACqB,IAAI,CAAC,CAACC,CAAC,CAAEC,CAAC,GAAKA,CAAC,CAAClB,QAAQ,CAAGiB,CAAC,CAACjB,QAAQ,CAAC,CAClD,KAAM,CAAAmB,MAAM,CAAGxB,UAAU,CAAC,CAAC,CAAC,CAE5B,GAAIwB,MAAM,CAACtB,IAAI,CAACK,IAAI,GAAK,KAAK,CAAE,KAAAkB,UAAA,CAC9B,KAAM,CAAAC,SAAS,CAAGF,MAAM,CAACtB,IAAW,CACpC,KAAM,CAAAO,IAAI,CAAGiB,SAAS,CAAChB,GAAG,GAAK,iBAAiB,EAAIgB,SAAS,CAAChB,GAAG,GAAK,gBAAgB,EAAIgB,SAAS,CAAChB,GAAG,GAAK,UAAU,CAAG,QAAQ,CAAG,OAAO,CAE3I,KAAM,CAAAiB,SAAS,CAAG,CAAC,GAAG3C,IAAI,CAACM,KAAK,CAAC,CAAC,CAAC,CAAC,CACpC,KAAM,CAACsC,MAAM,CAAC,CAAGD,SAAS,CAACE,MAAM,CAACL,MAAM,CAACJ,KAAK,CAAE,CAAC,CAAC,CAClD,KAAM,CAAAU,SAAS,CAAG,CAAC,GAAG9C,IAAI,CAACQ,KAAK,CAAC,CAAC,CAAC,CAACiB,IAAI,CAAC,CAAEmB,MAAM,CAAC,CAClD,KAAM,CAAAG,UAAU,CAAAjC,aAAA,CAAAA,aAAA,IAAQd,IAAI,CAACQ,KAAK,CAAC,CAAC,CAAC,MAAE,CAACiB,IAAI,EAAGqB,SAAS,EAAE,CAC1D,KAAM,CAAAE,QAAQ,CAAAlC,aAAA,CAAAA,aAAA,IAAQd,IAAI,CAACQ,KAAK,MAAE,CAAC,CAAEuC,UAAU,EAAE,CACjD,KAAM,CAAAE,eAAe,CAAAnC,aAAA,CAAAA,aAAA,IAAQd,IAAI,CAACW,YAAY,MAAE,CAAC,CAAEX,IAAI,CAACW,YAAY,CAAC,CAAC,CAAC,CAAG6B,MAAM,CAACpB,MAAM,EAAE,CAEzF,KAAM,CAAA8B,QAAQ,CAAGzB,IAAI,GAAK,QAAQ,CAAG,iBAAiB,CAAG,sBAAsB,CAC/E,KAAM,CAAA0B,KAAK,EAAAV,UAAA,CAAIG,MAAM,CAAShB,SAAS,UAAAa,UAAA,UAAAA,UAAA,CAAI,CAAC,CAC5C1C,GAAG,2BAAAa,MAAA,CAAiBgC,MAAM,CAACQ,IAAI,OAAAxC,MAAA,CAAKuC,KAAK,qBAAAvC,MAAA,CAAmBsC,QAAQ,QAAAtC,MAAA,CAAM4B,MAAM,CAAClB,MAAM,KAAG,CAAC,CAE3F,OAAAR,aAAA,CAAAA,aAAA,IACKd,IAAI,MACPM,KAAK,CAAAQ,aAAA,CAAAA,aAAA,IAAOd,IAAI,CAACM,KAAK,MAAE,CAAC,CAAEqC,SAAS,EAAE,CACtCnC,KAAK,CAAEwC,QAAQ,CACfrC,YAAY,CAAEsC,eAAe,GAEjC,CAEA;AACA,KAAM,CAAAN,SAAS,CAAG,CAAC,GAAG3C,IAAI,CAACM,KAAK,CAAC,CAAC,CAAC,CAAC,CACpC,KAAM,CAACsC,MAAM,CAAC,CAAGD,SAAS,CAACE,MAAM,CAACL,MAAM,CAACJ,KAAK,CAAE,CAAC,CAAC,CAClD,KAAM,CAAAa,eAAe,CAAAnC,aAAA,CAAAA,aAAA,IAAQd,IAAI,CAACW,YAAY,MAAE,CAAC,CAAEX,IAAI,CAACW,YAAY,CAAC,CAAC,CAAC,CAAG6B,MAAM,CAACpB,MAAM,EAAE,CAEzF;AACA,GAAKwB,MAAM,CAASd,IAAI,GAAK,sBAAsB,CAAE,CACnD,KAAM,CAAAuB,QAAQ,CAAIT,MAAM,CAASU,IAAI,GAAK,gBAAgB,CAAG,QAAQ,CAAG,YAAY,CACpF,GAAID,QAAQ,GAAK,YAAY,EAAI,CAACrD,IAAI,CAACuD,cAAc,CAAC,CAAC,CAAC,CAACC,UAAU,CAAE,CACnE,KAAM,CAAAC,iBAAiB,CAAA3C,aAAA,CAAAA,aAAA,IAAQd,IAAI,CAACuD,cAAc,MAAE,CAAC,CAAAzC,aAAA,CAAAA,aAAA,IAAOd,IAAI,CAACuD,cAAc,CAAC,CAAC,CAAC,MAAEC,UAAU,CAAEZ,MAAM,EAAE,EAAE,CAC1G7C,GAAG,yBAAAa,MAAA,CAAegC,MAAM,CAACQ,IAAI,kCAAAxC,MAAA,CAAgC4B,MAAM,CAAClB,MAAM,KAAG,CAAC,CAC9E,OAAAR,aAAA,CAAAA,aAAA,IAAYd,IAAI,MAAEM,KAAK,CAAAQ,aAAA,CAAAA,aAAA,IAAOd,IAAI,CAACM,KAAK,MAAE,CAAC,CAAEqC,SAAS,EAAE,CAAEY,cAAc,CAAEE,iBAAiB,CAAE9C,YAAY,CAAEsC,eAAe,GAC5H,CAAC,IAAM,IAAII,QAAQ,GAAK,QAAQ,EAAI,CAACrD,IAAI,CAACuD,cAAc,CAAC,CAAC,CAAC,CAACG,MAAM,CAAE,CAClE,KAAM,CAAAD,iBAAiB,CAAA3C,aAAA,CAAAA,aAAA,IAAQd,IAAI,CAACuD,cAAc,MAAE,CAAC,CAAAzC,aAAA,CAAAA,aAAA,IAAOd,IAAI,CAACuD,cAAc,CAAC,CAAC,CAAC,MAAEG,MAAM,CAAEd,MAAM,EAAE,EAAE,CACtG7C,GAAG,yBAAAa,MAAA,CAAegC,MAAM,CAACQ,IAAI,0CAAAxC,MAAA,CAAqC4B,MAAM,CAAClB,MAAM,KAAG,CAAC,CACnF,OAAAR,aAAA,CAAAA,aAAA,IAAYd,IAAI,MAAEM,KAAK,CAAAQ,aAAA,CAAAA,aAAA,IAAOd,IAAI,CAACM,KAAK,MAAE,CAAC,CAAEqC,SAAS,EAAE,CAAEY,cAAc,CAAEE,iBAAiB,CAAE9C,YAAY,CAAEsC,eAAe,GAC5H,CACF,CAEAlD,GAAG,wCAAAa,MAAA,CAA8BgC,MAAM,CAACQ,IAAI,QAAAxC,MAAA,CAAM4B,MAAM,CAAClB,MAAM,KAAG,CAAC,CACnE,OAAAR,aAAA,CAAAA,aAAA,IAAYd,IAAI,MAAEM,KAAK,CAAAQ,aAAA,CAAAA,aAAA,IAAOd,IAAI,CAACM,KAAK,MAAE,CAAC,CAAEqC,SAAS,EAAE,CAAEhC,YAAY,CAAEsC,eAAe,GACzF,CAAC,CAAC,CACJ,CAEA;AACA,MAAO,SAAS,CAAAU,gBAAgBA,CAACC,KAAgB,CAAEC,MAAc,CAA6C,IAA3C,CAAA/D,UAAsB,CAAAgE,SAAA,CAAAnC,MAAA,IAAAmC,SAAA,MAAAC,SAAA,CAAAD,SAAA,IAAG,MAAM,CAChG;AACA,KAAM,CAAAzD,IAAI,CAAGuD,KAAK,CAACtD,KAAK,CAACuD,MAAM,CAAC,CAChC,KAAM,CAAAnD,IAAI,CAAGkD,KAAK,CAACjD,YAAY,CAACkD,MAAM,CAAC,CACvC,GAAInD,IAAI,EAAI,CAAC,CAAE,MAAO,CAAEoB,IAAI,CAAE,MAAO,CAAC,CAEtC,KAAM,CAAAd,UAAkE,CAAG,EAAE,CAC7EX,IAAI,CAACY,OAAO,CAAC,CAACC,IAAI,CAAEC,GAAG,GAAK,CAC1B,KAAM,CAAAC,MAAM,CAAGzB,sBAAsB,CAACuB,IAAI,CAAE0C,KAAK,CAAEC,MAAM,CAAC,CAC1D,GAAIzC,MAAM,CAAGV,IAAI,CAAE,OACnB,GAAI,CAAAW,QAAQ,CAAG,CAAC,CAChB,GAAIH,IAAI,CAACK,IAAI,GAAK,KAAK,CAAEF,QAAQ,CAAIH,IAAI,CAASU,SAAS,CAAG,EAAE,CAAC,IAC5D,CAAAP,QAAQ,CAAG,EAAE,CAClB,GAAIvB,UAAU,GAAK,QAAQ,CAAEuB,QAAQ,EAAIW,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,CAAG,EAAE,CAAC,CAAG,CAAC,CAC3E,GAAIpC,UAAU,GAAK,MAAM,CAAEuB,QAAQ,EAAI,EAAE,CACzCL,UAAU,CAACmB,IAAI,CAAC,CAAEC,KAAK,CAAEjB,GAAG,CAAED,IAAI,CAAEG,QAAS,CAAC,CAAC,CACjD,CAAC,CAAC,CACF,GAAIL,UAAU,CAACW,MAAM,GAAK,CAAC,CAAE,MAAO,CAAEG,IAAI,CAAE,MAAO,CAAC,CACpDd,UAAU,CAACqB,IAAI,CAAC,CAACC,CAAC,CAAEC,CAAC,GAAKA,CAAC,CAAClB,QAAQ,CAAGiB,CAAC,CAACjB,QAAQ,CAAC,CAClD,MAAO,CAAES,IAAI,CAAE,MAAM,CAAEM,KAAK,CAAEpB,UAAU,CAAC,CAAC,CAAC,CAACoB,KAAM,CAAC,CACrD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}