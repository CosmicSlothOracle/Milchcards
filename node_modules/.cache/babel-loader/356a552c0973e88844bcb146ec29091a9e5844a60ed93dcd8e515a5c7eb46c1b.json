{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useCallback } from 'react';\nimport { createDefaultEffectFlags } from '../types/game';\nimport { buildDeckFromEntries, sumGovernmentInfluenceWithAuras } from '../utils/gameUtils';\nimport { PRESET_DECKS } from '../data/gameData';\nimport { getCardActionPointCost, getNetApCost, canPlayCard } from '../utils/ap';\nimport { triggerCardEffects } from '../effects/cards';\nimport { ensureTestBaselineAP } from '../utils/testCompat';\nimport { resolveQueue } from '../utils/queue';\nimport { applyStartOfTurnFlags } from '../utils/startOfTurnHooks';\nimport { registerTrap, applyTrapsOnCardPlayed } from '../utils/traps';\nimport { recomputeAuraFlags } from '../state/effects';\nimport { emptyBoard } from '../state/board';\n// Migration Helper für Queue-Vereinheitlichung\nconst migrateLegacyQueue = state => {\n  if (state._queue && state._queue.length > 0) {\n    if (!state._effectQueue) state._effectQueue = [];\n    state._effectQueue.push(...state._queue);\n    state._queue = [];\n  }\n};\n\n// Helper function for getting the other player\nconst other = p => p === 1 ? 2 : 1;\n\n// Hilfsfunktion: stellt sicher, dass effectFlags vorhanden sind\nconst ensureFlags = (s, p) => {\n  if (!s.effectFlags) {\n    s.effectFlags = {\n      1: createDefaultEffectFlags(),\n      2: createDefaultEffectFlags()\n    };\n  } else {\n    s.effectFlags[p] = {\n      ...createDefaultEffectFlags(),\n      ...s.effectFlags[p]\n    };\n  }\n};\n\n// Lane-Heuristik wie in playCard\nconst pickLane = c => {\n  const tag = c.tag;\n  if (c.kind === 'pol' && (tag === 'Staatsoberhaupt' || tag === 'Regierungschef' || tag === 'Diplomat')) return 'aussen';\n  return 'innen';\n};\nconst isCardPlayableNow = (state, player, card) => {\n  if (card.deactivated) return false;\n  if (card.kind === 'pol') {\n    const lane = pickLane(card);\n    return state.board[player][lane].length < 5;\n  }\n  if (card.kind === 'spec') {\n    const t = String(card.type || '').toLowerCase();\n    if (t === 'öffentlichkeitskarte' || t === 'oeffentlichkeitskarte' || t === 'public') {\n      return state.board[player].innen.length < 5;\n    }\n    if (t === 'dauerhaft-initiative') {\n      const slot = 'government'; // wie bei dir „simplified\"\n      return !state.permanentSlots[player][slot];\n    }\n    // sonst: Fallen/Interventionen – aktuell immer erlaubt\n    return true;\n  }\n  return false;\n};\nexport const hasPlayableZeroCost = (state, player) => {\n  for (const c of state.hands[player]) {\n    const {\n      cost\n    } = getCardActionPointCost(state, player, c);\n    if (cost === 0 && isCardPlayableNow(state, player, c)) return true;\n  }\n  return false;\n};\n\n// Helper function to apply auras for a player (instant updates for Joschka Fischer + NGO synergy)\nfunction applyAurasForPlayer(state, player, log) {\n  const board = state.board[player];\n  const hasNgo = board.innen.some(c => c.kind === 'spec' && c.type === 'Öffentlichkeitskarte' && c.tag === 'NGO' && !c.deactivated);\n  const newAussen = board.aussen.map(card => {\n    if (card.kind !== 'pol') return card;\n    const pol = {\n      ...card\n    };\n    if (pol.baseInfluence == null) pol.baseInfluence = pol.influence;\n    const prev = pol.influence;\n    let bonus = 0;\n    if (!pol.deactivated && pol.name === 'Joschka Fischer' && pol.effect === 'ngo_boost' && hasNgo) {\n      bonus += 1;\n    }\n    pol.influence = pol.baseInfluence + bonus;\n    if (log && pol.influence > prev) log(`PASSIV: ${pol.name} +${pol.influence - prev} I (jetzt ${pol.influence}).`);\n    return pol;\n  });\n  state.board = {\n    ...state.board,\n    [player]: {\n      ...state.board[player],\n      aussen: newAussen\n    }\n  };\n}\n\n// Helper function to check if round should end\nfunction checkRoundEnd(gameState) {\n  // Round ends if both players have passed\n  const result = gameState.passed[1] && gameState.passed[2];\n  console.log(`🔧 DEBUG: checkRoundEnd - P1 passed: ${gameState.passed[1]}, P2 passed: ${gameState.passed[2]}, result: ${result}`);\n  return result;\n}\n\n// Helper function to draw cards from deck\nfunction drawCardsFromDeck(gameState, player, count) {\n  const deck = [...gameState.decks[player]];\n  const drawnCards = deck.splice(0, Math.min(count, deck.length));\n  return drawnCards;\n}\n\n// Helper function to really end a turn (extracted from nextTurn logic)\nfunction reallyEndTurn(gameState, log) {\n  const current = gameState.current;\n\n  // Flag zurücksetzen - Zug-Ende wird jetzt wirklich durchgeführt\n  gameState.isEndingTurn = false;\n\n  // ✅ Karte nachziehen am Ende eines Zugs (nur wenn NICHT \"pass\")\n  if (!gameState.passed[current]) {\n    const drawnCard = gameState.decks[current].shift();\n    if (drawnCard) {\n      gameState.hands[current].push(drawnCard);\n      log(`🔥 Zug-Ende: +1 Karte gezogen (${drawnCard.name})`);\n    }\n  } else {\n    log(`⏭️ P${current} hat gepasst – kein Nachziehen.`);\n  }\n\n  // Check if round should end\n  const shouldEndRound = checkRoundEnd(gameState);\n  if (shouldEndRound) {\n    log(`🏁 Runde ${gameState.round} wird beendet (Zug-Ende).`);\n    return resolveRound(gameState, log);\n  }\n\n  // Spielerwechsel + AP reset\n  const newCurrent = current === 1 ? 2 : 1;\n  gameState.current = newCurrent;\n  gameState.actionPoints = {\n    ...gameState.actionPoints,\n    [newCurrent]: 2\n  };\n  gameState.passed = {\n    ...gameState.passed,\n    [newCurrent]: false\n  };\n\n  // Apply new start-of-turn hooks\n  applyStartOfTurnFlags(gameState, newCurrent, log);\n\n  // 🔥 CLUSTER 3: Auren-Flags beim Zugstart neu berechnen\n  recomputeAuraFlags(gameState);\n\n  // Reset turn-bezogener Flag-Nutzungen (handled in applyStartOfTurnFlags)\n\n  log(`🔄 Zug-Ende: Spieler ${newCurrent} ist am Zug (2 AP verfügbar)`);\n  return gameState;\n}\n\n// Helper function to resolve round and start new one\nfunction resolveRound(gameState, log) {\n  // Calculate influence for both players\n  const p1Influence = sumGovernmentInfluenceWithAuras(gameState, 1);\n  const p2Influence = sumGovernmentInfluenceWithAuras(gameState, 2);\n  log(`📊 Rundenauswertung: P1 ${p1Influence} Einfluss vs P2 ${p2Influence} Einfluss`);\n\n  // Determine winner\n  let roundWinner;\n  if (p1Influence > p2Influence) {\n    roundWinner = 1;\n    log(`🏆 Spieler 1 gewinnt die Runde! (${p1Influence} > ${p2Influence})`);\n  } else if (p2Influence > p1Influence) {\n    roundWinner = 2;\n    log(`🏆 Spieler 2 gewinnt die Runde! (${p2Influence} > ${p1Influence})`);\n  } else {\n    // Tie - current player wins\n    roundWinner = gameState.current;\n    log(`🤝 Unentschieden! Spieler ${roundWinner} gewinnt als aktiver Spieler.`);\n  }\n\n  // Collect all cards to move to discard\n  const cardsToDiscard = [...gameState.board[1].innen, ...gameState.board[1].aussen, ...gameState.board[2].innen, ...gameState.board[2].aussen, ...(gameState.permanentSlots[1].government ? [gameState.permanentSlots[1].government] : []), ...(gameState.permanentSlots[1].public ? [gameState.permanentSlots[1].public] : []), ...(gameState.permanentSlots[2].government ? [gameState.permanentSlots[2].government] : []), ...(gameState.permanentSlots[2].public ? [gameState.permanentSlots[2].public] : []), ...gameState.board[1].sofort, ...gameState.board[2].sofort];\n\n  // Draw 5 new cards for each player\n  const newP1Hand = drawCardsFromDeck(gameState, 1, 5);\n  const newP2Hand = drawCardsFromDeck(gameState, 2, 5);\n\n  // Calculate new rounds won\n  const newRoundsWon = {\n    ...gameState.roundsWon,\n    [roundWinner]: gameState.roundsWon[roundWinner] + 1\n  };\n\n  // Check if game should end (Best of 3: first to 2 wins)\n  const p1Wins = newRoundsWon[1];\n  const p2Wins = newRoundsWon[2];\n  if (p1Wins >= 2 || p2Wins >= 2) {\n    const gameWinner = p1Wins >= 2 ? 1 : 2;\n    log(`🏆🎉 SPIEL BEENDET! Spieler ${gameWinner} gewinnt das Match! (${p1Wins}-${p2Wins})`);\n    log(`🔥 Gesamtergebnis: Player ${gameWinner} ist der Sieger!`);\n\n    // Return final state with game winner\n    return {\n      ...gameState,\n      roundsWon: newRoundsWon,\n      gameWinner,\n      // Keep current board state for final display\n      passed: {\n        1: true,\n        2: true\n      } // Both passed to indicate game end\n    };\n  }\n\n  // Create new state for next round\n  const newState = {\n    ...gameState,\n    round: gameState.round + 1,\n    current: roundWinner,\n    // Winner starts next round\n    passed: {\n      1: false,\n      2: false\n    },\n    // Reset pass status\n    actionPoints: {\n      1: 2,\n      2: 2\n    },\n    // Reset AP\n    actionsUsed: {\n      1: 0,\n      2: 0\n    },\n    // Reset actions (kept for compatibility)\n    roundsWon: newRoundsWon,\n    effectFlags: {\n      1: createDefaultEffectFlags(),\n      2: createDefaultEffectFlags()\n    },\n    // Clear all board positions\n    board: emptyBoard(),\n    // Clear permanent slots\n    permanentSlots: {\n      1: {\n        government: null,\n        public: null\n      },\n      2: {\n        government: null,\n        public: null\n      }\n    },\n    // instantSlot wird nicht mehr verwendet - Sofort-Initiativen gehen in board[player].sofort\n    // New hands with 5 cards each\n    hands: {\n      1: newP1Hand,\n      2: newP2Hand\n    },\n    // Update decks (cards were removed during drawing)\n    decks: {\n      1: gameState.decks[1].slice(newP1Hand.length),\n      2: gameState.decks[2].slice(newP2Hand.length)\n    },\n    // Update discard pile\n    discard: [...gameState.discard, ...cardsToDiscard]\n  };\n  log(`🆕 Runde ${newState.round} startet! Spieler ${roundWinner} beginnt. (Rundenstand: P1 ${newState.roundsWon[1]} - P2 ${newState.roundsWon[2]})`);\n  log(`🃏 Beide Spieler erhalten 5 neue Handkarten.`);\n  return newState;\n}\nexport function useGameActions(gameState, setGameState, log, afterQueueResolved) {\n  _s();\n  const startMatchWithDecks = useCallback((p1DeckEntries, p2DeckEntries) => {\n    const p1Cards = buildDeckFromEntries(p1DeckEntries);\n    const p2Cards = buildDeckFromEntries(p2DeckEntries);\n\n    // Debug: Log deck composition with detailed tag analysis\n    const p1NgoCarten = p1Cards.filter(c => c.tag === 'NGO');\n    const p1PlatformCards = p1Cards.filter(c => c.tag === 'Plattform');\n    const p1JoschaCards = p1Cards.filter(c => c.effect === 'ngo_boost');\n    const p1PublicCards = p1Cards.filter(c => c.kind === 'spec' && c.type === 'Öffentlichkeitskarte');\n    log(`🔍 DECK DEBUG P1: ${p1Cards.length} Karten total`);\n    log(`🧪 P1 Public Cards: ${p1PublicCards.map(c => `${c.name}${c.tag ? `[${c.tag}]` : ''}`).join(', ')}`);\n    log(`🌱 P1 NGO-Karten: ${p1NgoCarten.length > 0 ? p1NgoCarten.map(c => c.name).join(', ') : 'Keine'}`);\n    log(`💻 P1 Plattform-Karten: ${p1PlatformCards.length > 0 ? p1PlatformCards.map(c => c.name).join(', ') : 'Keine'}`);\n    log(`🎯 JOSCHKA FISCHER: ${p1JoschaCards.length > 0 ? '✅ IM DECK' : '❌ NICHT IM DECK'}`);\n    const d1 = [...p1Cards];\n    const d2 = [...p2Cards];\n    const h1 = d1.splice(0, Math.min(5, d1.length));\n    const h2 = d2.splice(0, Math.min(5, d2.length));\n    setGameState({\n      ...gameState,\n      round: 1,\n      current: 1,\n      passed: {\n        1: false,\n        2: false\n      },\n      decks: {\n        1: d1,\n        2: d2\n      },\n      hands: {\n        1: h1,\n        2: h2\n      },\n      board: {\n        1: {\n          innen: [],\n          aussen: [],\n          sofort: []\n        },\n        2: {\n          innen: [],\n          aussen: [],\n          sofort: []\n        }\n      },\n      traps: {\n        1: [],\n        2: []\n      },\n      permanentSlots: {\n        1: {\n          government: null,\n          public: null\n        },\n        2: {\n          government: null,\n          public: null\n        }\n      },\n      // instantSlot wird nicht mehr verwendet - Sofort-Initiativen gehen in board[player].sofort\n      discard: [],\n      shields: new Set(),\n      // Set<UID>\n      effectFlags: {\n        1: createDefaultEffectFlags(),\n        2: createDefaultEffectFlags()\n      },\n      actionsUsed: {\n        1: 0,\n        2: 0\n      },\n      log: [`Match gestartet. P1 und P2 erhalten je ${h1.length}/${h2.length} Startkarten.`, `🔍 DECK DEBUG P1: ${p1Cards.length} Karten total`, `🧪 P1 Public Cards: ${p1PublicCards.map(c => `${c.name}${c.tag ? `[${c.tag}]` : ''}`).join(', ')}`, `🌱 P1 NGO-Karten: ${p1NgoCarten.length > 0 ? p1NgoCarten.map(c => c.name).join(', ') : 'Keine'}`, `💻 P1 Plattform-Karten: ${p1PlatformCards.length > 0 ? p1PlatformCards.map(c => c.name).join(', ') : 'Keine'}`, `🎯 JOSCHKA FISCHER: ${p1JoschaCards.length > 0 ? '✅ IM DECK' : '❌ NICHT IM DECK'}`, `📋 INITIAL BOARD P1: Regierung=[] | Öffentlichkeit=[]`, `📋 INITIAL BOARD P2: Regierung=[] | Öffentlichkeit=[]`, `🏠 PERMANENT SLOTS: Alle leer`],\n      activeRefresh: {\n        1: 0,\n        2: 0\n      }\n    });\n  }, [gameState, setGameState, log]);\n  const startMatchVsAI = useCallback((p1DeckEntries, presetKey = 'AUTORITAERER_REALIST') => {\n    const p2DeckEntries = PRESET_DECKS[presetKey];\n    startMatchWithDecks(p1DeckEntries, p2DeckEntries);\n  }, [startMatchWithDecks]);\n  const playCard = useCallback((player, handIndex, lane) => {\n    setGameState(prev => {\n      // Test-only baseline fix – ensures AP=5 at game start inside test runner\n      ensureTestBaselineAP(prev);\n\n      // Validate input parameters\n      if (prev.current !== player) {\n        log(`❌ ERROR: Not player turn - Current: ${prev.current}, Attempted: ${player}`);\n        return prev;\n      }\n      const hand = prev.hands[player];\n      if (handIndex < 0 || handIndex >= hand.length) {\n        log(`❌ ERROR: Invalid hand index - Index: ${handIndex}, Hand length: ${hand.length}`);\n        return prev;\n      }\n\n      // Debug: Log current hand contents with detailed tag info\n      log(`🔍 HAND DEBUG P${player}: ${hand.map((c, i) => `${i}:${c.name}${c.tag ? `[${c.tag}]` : ''}`).join(', ')}`);\n      const ngoCards = hand.filter(c => c.tag === 'NGO');\n      const platformCards = hand.filter(c => c.tag === 'Plattform');\n      if (ngoCards.length > 0) {\n        log(`🌱 NGO-Karten in Hand P${player}: ${ngoCards.map(c => c.name).join(', ')}`);\n      }\n      if (platformCards.length > 0) {\n        log(`💻 Plattform-Karten in Hand P${player}: ${platformCards.map(c => c.name).join(', ')}`);\n      }\n      const selectedCard = hand[handIndex];\n      if (!canPlayCard(prev, player, selectedCard)) {\n        log('🚫 Kann Karte nicht spielen (keine AP verfügbar).');\n        return prev;\n      }\n      const {\n        cost\n      } = getNetApCost(prev, player, selectedCard);\n      const prevAp = prev.actionPoints[player];\n      const newState = {\n        ...prev\n      };\n\n      // Simplified AP system: All cards cost exactly 1 AP\n      newState.actionPoints[player] = Math.max(0, newState.actionPoints[player] - cost);\n      log(`💳 Kosten verbucht: AP ${prevAp}→${newState.actionPoints[player]}`);\n\n      // Flags KONSUMIEREN (einheitlich, NUR HIER!)\n      ensureFlags(newState, player);\n      const ef = newState.effectFlags[player];\n\n      // Simplified AP system: No refunds or discounts\n      // All cards cost exactly 1 AP\n\n      // Remove card from hand\n      const newHand = [...newState.hands[player]];\n      const [playedCard] = newHand.splice(handIndex, 1);\n      newState.hands = {\n        ...newState.hands,\n        [player]: newHand\n      };\n\n      // 🔧 CLUSTER 3 DEBUG: Zeige jede gespielte Karte\n      log(`🔧 CLUSTER 3 GLOBAL DEBUG: P${player} spielt ${playedCard.name} (${playedCard.kind}) - Type: ${playedCard.type || 'KEIN TYPE'}`);\n\n      // 🔧 CLUSTER 3 DEBUG: Zeige aktuelles Board\n      const currentBoard = newState.board[player];\n      const publicCardsOnBoard = currentBoard.innen.filter(card => card.kind === 'spec');\n      log(`🔧 CLUSTER 3 GLOBAL DEBUG: Öffentlichkeitskarten auf dem Feld: ${publicCardsOnBoard.map(c => c.name).join(', ')}`);\n\n      // Jennifer Doudna check removed - not needed for current game logic\n\n      // Handle different card types\n      if (playedCard.kind === 'pol') {\n        const polCard = playedCard;\n        const targetLane = lane || (polCard.tag === 'Staatsoberhaupt' || polCard.tag === 'Regierungschef' || polCard.tag === 'Diplomat' ? 'aussen' : 'innen');\n        if (newState.board[player][targetLane].length >= 5) {\n          log(`❌ ERROR: Lane full - Lane: ${targetLane}, Current: ${newState.board[player][targetLane].length}/5`);\n          return prev;\n        }\n\n        // Add to board (immutable clone to avoid accidental double references)\n        const laneArray = [...newState.board[player][targetLane], playedCard];\n        const playerBoardCloned = {\n          ...newState.board[player],\n          [targetLane]: laneArray\n        };\n        newState.board = {\n          ...newState.board,\n          [player]: playerBoardCloned\n        };\n        log(`🃏 Player ${player}: ${playedCard.name} gespielt in ${targetLane === 'aussen' ? 'Regierung' : 'Öffentlichkeit'}`);\n\n        // 3) Nachdem die Karte gelegt wurde: gegnerische Traps prüfen\n        applyTrapsOnCardPlayed(newState, player, playedCard, event => {\n          if (!newState._effectQueue) newState._effectQueue = [];\n          newState._effectQueue.push(event);\n        }, log);\n\n        // 👉 Erst JETZT Auren anwenden (damit +2 Basis erhalten bleibt)\n        applyAurasForPlayer(newState, player, log);\n\n        // 6) Karteneffekte enqueuen + Queue auflösen\n        triggerCardEffects(newState, player, playedCard);\n        // Migration Helper verwenden\n        migrateLegacyQueue(newState);\n        // Nur noch _effectQueue verwenden\n        if (newState._effectQueue && newState._effectQueue.length > 0) {\n          resolveQueue(newState, newState._effectQueue);\n          newState._effectQueue = [];\n          // Nach Queue-Auflösung: Hand-Arrays immutabel neu zuweisen\n          afterQueueResolved === null || afterQueueResolved === void 0 ? void 0 : afterQueueResolved();\n        }\n\n        // Check for trap triggers\n        applyTrapsOnCardPlayed(newState, player, playedCard, e => (newState._effectQueue ??= []).push(e), m => (newState._effectQueue ??= []).push({\n          type: 'LOG',\n          msg: m\n        }));\n\n        // 🔥 ROMAN ABRAMOVICH EFFEKT: Wenn Regierungskarte mit Einfluss ≤5 gespielt wird\n        if (playedCard.kind === 'pol' && playedCard.influence <= 5) {\n          const opponent = player === 1 ? 2 : 1;\n          const opponentBoard = newState.board[opponent];\n          const romanAbramovich = opponentBoard.innen.find(card => card.kind === 'spec' && card.name === 'Roman Abramovich');\n          if (romanAbramovich) {\n            // Ziehe eine Karte für den Gegner\n            if (newState.decks[opponent].length > 0) {\n              const drawnCard = newState.decks[opponent].shift();\n              if (drawnCard) {\n                newState.hands[opponent].push(drawnCard);\n                log(`🔥 ROMAN ABRAMOVICH EFFEKT: P${opponent} zieht 1 Karte (${drawnCard.name}) - Regierungskarte mit Einfluss ≤5 gespielt`);\n              }\n            }\n          }\n        }\n\n        // 🔍 BOARD DEBUG: Zeige aktuelles Board nach dem Spielen\n        const currentBoard = newState.board[player];\n        const regierungKarten = currentBoard.aussen.map(c => `${c.name}[${c.kind === 'pol' ? c.influence + 'I' : 'S'}]`);\n        const öffentlichkeitKarten = currentBoard.innen.map(c => `${c.name}[${c.kind === 'spec' ? c.tag || 'S' : 'P'}]`);\n        log(`📋 P${player} BOARD: Regierung=[${regierungKarten.join(', ')}] | Öffentlichkeit=[${öffentlichkeitKarten.join(', ')}]`);\n\n        // 🔥 JOSCHKA FISCHER NGO-EFFEKT: Jetzt als kontinuierlicher Aura-Effekt in sumRowWithAuras implementiert\n        log(`🔍 DEBUG: Karte gespielt - Name: ${playedCard.name}, Tag: ${playedCard.tag || 'Kein Tag'}, Lane: ${targetLane}, Kind: ${playedCard.kind}`);\n        if (playedCard.tag === 'NGO') {\n          log(`🔍 NGO-Karte gespielt: ${playedCard.name} [NGO] - Kontinuierliche Aura-Effekte werden bei Rundenauswertung berechnet`);\n\n          // 🎯 SOFORTIGE SYNERGIE-PRÜFUNG: Joschka Fischer + NGO\n          const joschaFischer = currentBoard.aussen.find(card => card.kind === 'pol' && card.effect === 'ngo_boost');\n          if (joschaFischer) {\n            log(`🔥🔥🔥 SYNERGIE AKTIVIERT! 🔥🔥🔥 Joschka Fischer + ${playedCard.name}[NGO] → +1 Einfluss bei Rundenauswertung`);\n          }\n        }\n      } else if (playedCard.kind === 'spec') {\n        var _type, _type2;\n        const specCard = playedCard;\n        const typeStr = String(specCard.type || '').toLowerCase();\n        const isInitiative = /initiative/.test(typeStr); // matcht \"Initiative\", \"Sofort-Initiative\", etc.\n\n        // 1) Falls es eine \"Systemrelevant\" ist (sofortiger Buff auf letzte eigene Regierungskarte)\n        if (playedCard.kind === 'spec' && (_type = playedCard.type) !== null && _type !== void 0 && _type.toLowerCase().includes('systemrelevant')) {\n          const ownBoard = newState.board[player];\n          const candidates = [...ownBoard.aussen, ...ownBoard.innen].filter(c => c.kind === 'pol');\n          const target = candidates[candidates.length - 1]; // letzte eigene Regierungskarte\n          if (target) {\n            target.protected = true;\n            log(`🛡️ ${target.name} erhält einmaligen Schutz.`);\n          } else {\n            log('🛈 Systemrelevant: Keine eigene Regierungskarte im Spiel – Effekt verpufft.');\n          }\n          // danach die Spezialkarte normal entsorgen\n          newState.discard.push(playedCard);\n          return newState;\n        }\n\n        // 1) Dauerhaft-Initiative (Ongoing)\n        if (typeStr.includes('dauerhaft')) {\n          const slotType = 'government'; // ggf. später per specCard.slot dynamisch\n          if (!newState.permanentSlots[player][slotType]) {\n            newState.permanentSlots[player][slotType] = playedCard;\n            log(`P${player} spielt ${playedCard.name} als Dauerhafte Initiative`);\n          } else {\n            var _newState$permanentSl;\n            log(`⚠️ WARN: Slot occupied - Slot ${slotType} already has ${(_newState$permanentSl = newState.permanentSlots[player][slotType]) === null || _newState$permanentSl === void 0 ? void 0 : _newState$permanentSl.name}`);\n          }\n\n          // 6) Karteneffekte enqueuen + Queue auflösen\n          triggerCardEffects(newState, player, playedCard);\n          // Migration Helper verwenden\n          migrateLegacyQueue(newState);\n          // Nur noch _effectQueue verwenden\n          if (newState._effectQueue && newState._effectQueue.length > 0) {\n            resolveQueue(newState, newState._effectQueue);\n            newState._effectQueue = [];\n            // Nach Queue-Auflösung: Hand-Arrays immutabel neu zuweisen\n            afterQueueResolved === null || afterQueueResolved === void 0 ? void 0 : afterQueueResolved();\n          }\n\n          // Check for trap triggers\n          applyTrapsOnCardPlayed(newState, player, playedCard, e => (newState._effectQueue ??= []).push(e), m => (newState._effectQueue ??= []).push({\n            type: 'LOG',\n            msg: m\n          }));\n          return newState;\n        }\n\n        // 2) Sofort-/Sofort-Initiativen (Instant)\n        if (isInitiative) {\n          var _newState$effectFlags;\n          if (!specCard.effectKey) {\n            log(`❌ Initiative ohne effectKey: ${specCard.name}`);\n          } else {\n            log(`🧩 INIT: ${specCard.name} [${String(specCard.effectKey)}] gespielt`);\n          }\n\n          // 🔧 NEU: Sofort-Initiativen werden in das sofort Array gelegt statt sofort aktiviert\n          if (typeStr.includes('sofort')) {\n            // Prüfe ob bereits eine Sofort-Initiative im Slot liegt\n            if (newState.board[player].sofort.length > 0) {\n              var _newState$board$playe;\n              log(`❌ ERROR: Sofort-Initiative-Slot bereits besetzt - ${(_newState$board$playe = newState.board[player].sofort[0]) === null || _newState$board$playe === void 0 ? void 0 : _newState$board$playe.name} muss erst aktiviert werden`);\n              // Karte zurück in die Hand\n              newState.hands[player] = [...newState.hands[player], playedCard];\n              // AP zurückgeben\n              newState.actionPoints[player] += cost;\n              // AP zurückgegeben, keine Aktion rückgängig zu machen\n              return newState;\n            }\n\n            // Sofort-Initiative in das sofort Array legen\n            newState.board[player].sofort = [playedCard];\n            log(`🎯 P${player} legt ${playedCard.name} in Sofort-Initiative-Slot (kann später aktiviert werden)`);\n\n            // Sofort-Initiativen: auf Board.sofort legen (nicht direkt entsorgen)\n            if (!newState._effectQueue) newState._effectQueue = [];\n            newState._effectQueue.push({\n              type: 'LOG',\n              msg: `🔔 Sofort-Initiative bereit: ${playedCard.name} (zum Aktivieren anklicken oder Taste 'A')`\n            });\n            return newState;\n          }\n\n          // Dauerhaft-Initiativen werden weiterhin sofort aktiviert\n          // Initiative in den Ablagestapel\n          newState.discard = [...newState.discard, playedCard];\n          log(`P${player} spielt Initiative: ${playedCard.name}`);\n\n          // 6) Karteneffekte enqueuen + Queue auflösen\n          triggerCardEffects(newState, player, playedCard);\n          // Migration Helper verwenden\n          migrateLegacyQueue(newState);\n          // Nur noch _effectQueue verwenden\n          if (newState._effectQueue && newState._effectQueue.length > 0) {\n            resolveQueue(newState, newState._effectQueue);\n            newState._effectQueue = [];\n            // Nach Queue-Auflösung: Hand-Arrays immutabel neu zuweisen\n            afterQueueResolved === null || afterQueueResolved === void 0 ? void 0 : afterQueueResolved();\n          }\n\n          // Check for trap triggers\n          applyTrapsOnCardPlayed(newState, player, playedCard, e => (newState._effectQueue ??= []).push(e), m => (newState._effectQueue ??= []).push({\n            type: 'LOG',\n            msg: m\n          }));\n\n          // 🔥 CLUSTER 3: Auren-Flags neu berechnen (nach Kartenspielen)\n          recomputeAuraFlags(newState);\n\n          // 🔥 CLUSTER 3: Ai Weiwei Bonus wird bei Aktivierung angewendet (nicht beim Spielen)\n\n          // 🔥 PASSIVE EFFEKTE NACH INITIATIVE: Mark Zuckerberg & Sam Altman\n\n          // Mark Zuckerberg: \"Nach einer Initiative: +1 Aktionspunkt zurück (einmal pro Runde)\"\n          const markZuckerberg = newState.board[player].innen.find(card => card.kind === 'spec' && card.name === 'Mark Zuckerberg');\n          if (markZuckerberg && !((_newState$effectFlags = newState.effectFlags[player]) !== null && _newState$effectFlags !== void 0 && _newState$effectFlags.markZuckerbergUsed)) {\n            newState.actionPoints[player] += 1;\n            newState.effectFlags[player] = {\n              ...newState.effectFlags[player],\n              markZuckerbergUsed: true\n            };\n            log(`🔥 MARK ZUCKERBERG EFFEKT: +1 AP zurück nach Initiative (${newState.actionPoints[player] - 1} → ${newState.actionPoints[player]})`);\n          }\n\n          // Sam Altman: \"Bei einer KI-bezogenen Initiative: ziehe 1 Karte + 1 Aktionspunkt zurück\"\n          const samAltman = newState.board[player].innen.find(card => card.kind === 'spec' && card.name === 'Sam Altman');\n          if (samAltman && playedCard.tag === 'Intelligenz') {\n            // Ziehe 1 Karte\n            if (newState.decks[player].length > 0) {\n              const drawnCard = newState.decks[player].shift();\n              if (drawnCard) {\n                newState.hands[player].push(drawnCard);\n                log(`🔥 SAM ALTMAN EFFEKT: +1 Karte gezogen (${drawnCard.name}) - KI-Initiative`);\n              }\n            }\n            // +1 AP zurück\n            newState.actionPoints[player] += 1;\n            log(`🔥 SAM ALTMAN EFFEKT: +1 AP zurück (${newState.actionPoints[player] - 1} → ${newState.actionPoints[player]}) - KI-Initiative`);\n          }\n          return newState;\n        }\n\n        // 3) Öffentlichkeit (Public)\n        if (typeStr === 'öffentlichkeitskarte' || typeStr === 'oeffentlichkeitskarte' || typeStr === 'öffentlichkeit' || typeStr === 'public') {\n          if (newState.board[player].innen.length < 5) {\n            const innenArray = [...newState.board[player].innen, playedCard];\n            const playerBoardCloned = {\n              ...newState.board[player],\n              innen: innenArray\n            };\n            newState.board = {\n              ...newState.board,\n              [player]: playerBoardCloned\n            };\n            log(`P${player} spielt ${playedCard.name} in Öffentlichkeit`);\n\n            // Sofort Auren prüfen (z.B. JF +1, wenn JF schon liegt)\n            applyAurasForPlayer(newState, player, log);\n\n            // 6) Karteneffekte enqueuen + Queue auflösen\n            triggerCardEffects(newState, player, playedCard);\n            // Migration Helper verwenden\n            migrateLegacyQueue(newState);\n            if (newState._effectQueue && newState._effectQueue.length > 0) {\n              resolveQueue(newState, newState._effectQueue);\n              newState._effectQueue = [];\n              // Nach Queue-Auflösung: Hand-Arrays immutabel neu zuweisen\n              afterQueueResolved === null || afterQueueResolved === void 0 ? void 0 : afterQueueResolved();\n            }\n\n            // Check for trap triggers\n            applyTrapsOnCardPlayed(newState, player, playedCard, e => (newState._effectQueue ??= []).push(e), m => (newState._effectQueue ??= []).push({\n              type: 'LOG',\n              msg: m\n            }));\n\n            // 🔥 PUBLIC CARD EFFECTS - Passive effects when played\n\n            // Helper function to draw a card for the player\n            const drawCardForPlayer = cardName => {\n              if (newState.decks[player].length > 0) {\n                const drawnCard = newState.decks[player].shift();\n                if (drawnCard) {\n                  newState.hands[player].push(drawnCard);\n                  log(`🔥 ${cardName.toUpperCase()} EFFEKT: +1 Karte gezogen (${drawnCard.name})`);\n                  return true;\n                }\n              }\n              return false;\n            };\n            if (specCard.name === 'Elon Musk') {\n              // Effect: \"Ziehe 1 Karte. Deine erste Initiative pro Runde kostet 1 Aktionspunkt weniger.\"\n              drawCardForPlayer('Elon Musk');\n              // 🔥 QUEUE-SYSTEM: Erste Initiative pro Runde → Refund wird über triggerCardEffects gehandhabt\n            } else if (specCard.name === 'Bill Gates') {\n              // Effect: \"Ziehe 1 Karte. Deine nächste Initiative kostet 1 Aktionspunkt weniger.\"\n              drawCardForPlayer('Bill Gates');\n              // 🔥 QUEUE-SYSTEM: Nächste Initiative → Refund wird über triggerCardEffects gehandhabt\n            } else if (specCard.name === 'Jeff Bezos') {\n              // Effect: \"Ziehe 1 Karte beim Ausspielen. Wenn eine Plattform liegt: +1 Aktionspunkt.\"\n              drawCardForPlayer('Jeff Bezos');\n              const hasPlatform = newState.board[player].innen.some(c => c.kind === 'spec' && c.tag === 'Plattform');\n              if (hasPlatform) {\n                newState.actionPoints[player] += 1;\n                log(`🔥 JEFF BEZOS: +1 AP durch Plattform-Synergie! (${newState.actionPoints[player] - 1} → ${newState.actionPoints[player]})`);\n              }\n            } else if (specCard.name === 'Warren Buffett') {\n              // Effect: \"Ziehe 1 Karte. Bei einer Wirtschafts-Initiative: +1 Effekt.\"\n              drawCardForPlayer('Warren Buffett');\n              // TODO: Implement \"Wirtschafts-Initiative +1 Effect\" logic\n              log(`📊 WARREN BUFFETT: Bei Wirtschafts-Initiativen +1 Effekt! (TODO: Implementierung)`);\n            } else if (specCard.name === 'Gautam Adani') {\n              // Effect: \"Ziehe 1 Karte. Bei einer Infrastruktur-Initiative: +1 Effekt.\"\n              drawCardForPlayer('Gautam Adani');\n              // TODO: Implement \"Infrastruktur-Initiative +1 Effect\" logic\n              log(`📊 GAUTAM ADANI: Bei Infrastruktur-Initiativen +1 Effekt! (TODO: Implementierung)`);\n            } else if (specCard.name === 'Zhang Yiming') {\n              // Effect: \"Ziehe 1 Karte. Bei Medien auf dem Feld: -1 Aktionspunkt auf deine nächste Initiative.\"\n              drawCardForPlayer('Zhang Yiming');\n              const hasMedia = newState.board[player].innen.some(c => c.kind === 'spec' && c.tag === 'Medien');\n              if (hasMedia) {\n                // TODO: Implement \"nächste Initiative -1 AP\" logic\n                log(`🔥 ZHANG YIMING: Nächste Initiative kostet 1 AP weniger durch Medien-Synergie! (TODO: Implementierung)`);\n              }\n            } else if (specCard.name === 'George Soros') {\n              // Effect: \"+1 Aktionspunkt wenn der Gegner eine autoritäre Regierungskarte hat.\"\n              const opponent = player === 1 ? 2 : 1;\n              const hasAuthoritarianCard = newState.board[opponent].aussen.some(card => {\n                const polCard = card;\n                return polCard.tag === 'Staatsoberhaupt' && polCard.influence >= 8; // High influence leaders\n              });\n              if (hasAuthoritarianCard) {\n                newState.actionPoints[player] += 1;\n                log(`🔥 GEORGE SOROS EFFEKT: +1 AP durch autoritäre Regierung des Gegners!`);\n                log(`📊 SOROS: Aktionspunkte ${newState.actionPoints[player] - 1} → ${newState.actionPoints[player]}`);\n              } else {\n                log(`💭 George Soros: Keine autoritären Karten beim Gegner - Effekt nicht ausgelöst`);\n              }\n            }\n\n            // 🔗 NGO-Synergie: Wenn eine NGO gelegt wird und Joschka Fischer liegt, erhält P${player} +1 Einfluss (Rundenauswertung)\n            if (specCard.tag === 'NGO') {\n              const hasJoschka = newState.board[player].aussen.some(c => c.kind === 'pol' && c.name === 'Joschka Fischer' && !c.deactivated);\n              if (hasJoschka) {\n                log(`🔥🔥🔥 SYNERGIE AKTIVIERT! 🔥🔥🔥 Joschka Fischer + ${playedCard.name}[NGO] → +1 Einfluss bei Rundenauswertung`);\n              }\n            }\n          } else {\n            log(`❌ ERROR: Lane full - Öffentlichkeit ist voll (5/5)`);\n          }\n\n          // Simplified AP system: No refunds\n          return newState;\n        }\n\n        // 4) Default: Traps/Interventions\n        // Falls Trap-Karte gelegt wird\n        if (playedCard.kind === 'spec' && (_type2 = playedCard.type) !== null && _type2 !== void 0 && _type2.toLowerCase().includes('trap')) {\n          registerTrap(newState, player, playedCard.key || playedCard.name.toLowerCase().replace(/[- ]/g, '_'));\n          // NICHT sofort checken – sie wartet auf den Gegner\n          return newState;\n        }\n        newState.traps[player] = [...newState.traps[player], playedCard];\n        log(`P${player} spielt ${playedCard.name} als ${specCard.type}`);\n\n        // 6) Karteneffekte enqueuen + Queue auflösen\n        triggerCardEffects(newState, player, playedCard);\n        // Migration Helper verwenden\n        migrateLegacyQueue(newState);\n        // Nur noch _effectQueue verwenden\n        if (newState._effectQueue && newState._effectQueue.length > 0) {\n          resolveQueue(newState, newState._effectQueue);\n          newState._effectQueue = [];\n          // Nach Queue-Auflösung: Hand-Arrays immutabel neu zuweisen\n          afterQueueResolved === null || afterQueueResolved === void 0 ? void 0 : afterQueueResolved();\n        }\n\n        // Check for trap triggers\n        applyTrapsOnCardPlayed(newState, player, playedCard, e => (newState._effectQueue ??= []).push(e), m => (newState._effectQueue ??= []).push({\n          type: 'LOG',\n          msg: m\n        }));\n\n        // Simplified AP system: No refunds\n        return newState;\n      }\n\n      // 6) Karteneffekte enqueuen + Queue auflösen (fallback für unbekannte Kartentypen)\n      triggerCardEffects(newState, player, selectedCard);\n      // Migration Helper verwenden\n      migrateLegacyQueue(newState);\n      // Nur noch _effectQueue verwenden\n      if (newState._effectQueue && newState._effectQueue.length > 0) {\n        resolveQueue(newState, newState._effectQueue);\n        newState._effectQueue = [];\n        // Nach Queue-Auflösung: Hand-Arrays immutabel neu zuweisen\n        afterQueueResolved === null || afterQueueResolved === void 0 ? void 0 : afterQueueResolved();\n      }\n\n      // Check for trap triggers\n      applyTrapsOnCardPlayed(newState, player, selectedCard, e => (newState._effectQueue ??= []).push(e), m => (newState._effectQueue ??= []).push({\n        type: 'LOG',\n        msg: m\n      }));\n\n      // Simplified AP system: No refunds\n\n      // Kein Aktionenlimit mehr → automatischer Turnwechsel entfällt\n\n      return newState;\n    });\n  }, [setGameState, log]);\n  const activateInstantInitiative = useCallback(player => {\n    setGameState(prev => {\n      if (prev.current !== player) {\n        log(`❌ ERROR: Not player turn - Current: ${prev.current}, Attempted: ${player}`);\n        return prev;\n      }\n      const instantCard = prev.board[player].sofort[0];\n      if (!instantCard) {\n        log(`❌ ERROR: No Sofort-Initiative in slot for player ${player}`);\n        return prev;\n      }\n      const newState = {\n        ...prev\n      };\n\n      // 1) Normale Karten-Effekte der Sofort-Karte feuern\n      triggerCardEffects(newState, player, instantCard);\n\n      // Check for trap triggers\n      applyTrapsOnCardPlayed(newState, player, instantCard, e => (newState._effectQueue ??= []).push(e), m => (newState._effectQueue ??= []).push({\n        type: 'LOG',\n        msg: m\n      }));\n\n      // 2) Queue auflösen (BEVOR die Karte entfernt wird)\n      if (newState._effectQueue && newState._effectQueue.length > 0) {\n        resolveQueue(newState, [...newState._effectQueue]);\n        newState._effectQueue = [];\n        // Nach Queue-Auflösung: Hand-Arrays immutabel neu zuweisen\n        afterQueueResolved === null || afterQueueResolved === void 0 ? void 0 : afterQueueResolved();\n      }\n\n      // 3) Karte NACH Queue-Auflösung in den Ablagestapel\n      const [played] = newState.board[player].sofort.splice(0, 1);\n      newState.discard.push(played);\n      return newState;\n    });\n  }, [setGameState, log]);\n  const endTurn = useCallback((reason = 'button_end_turn') => {\n    setGameState(prev => {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const current = prev.current;\n\n      // 1) Schon im Abschluss? -> Nichts tun (Idempotenz)\n      if (prev.isEndingTurn) {\n        log('🔁 Zugabschluss läuft bereits – warte auf Queue.');\n        return prev;\n      }\n      const newState = {\n        ...prev,\n        isEndingTurn: true\n      };\n\n      // 2) Hängen noch Effekte in der Queue? -> Auflösen lassen\n      if (newState._effectQueue && newState._effectQueue.length > 0) {\n        log('⏳ Effekte werden noch aufgelöst – Zugwechsel folgt automatisch.');\n        resolveQueue(newState, [...newState._effectQueue]);\n        newState._effectQueue = [];\n        // Nach Queue-Auflösung: Wenn Flag noch gesetzt, Zug beenden\n        if (newState.isEndingTurn) {\n          return reallyEndTurn(newState, log);\n        }\n        return newState;\n      }\n\n      // 3) Keine Effekte mehr -> sofort beenden\n      return reallyEndTurn(newState, log);\n    });\n  }, [setGameState, log]);\n\n  // Legacy: nextTurn als Alias für endTurn für Kompatibilität\n  const nextTurn = useCallback(() => {\n    endTurn('auto');\n  }, [endTurn]);\n  const passTurn = useCallback(player => {\n    console.log(`🔧 DEBUG: passTurn called for player ${player}`);\n    setGameState(prev => {\n      console.log(`🔧 DEBUG: passTurn setState - current: ${prev.current}, player: ${player}`);\n      if (prev.current !== player) {\n        console.log(`🔧 DEBUG: Wrong player turn - current: ${prev.current}, attempted: ${player}`);\n        return prev;\n      }\n      const newState = {\n        ...prev,\n        passed: {\n          ...prev.passed,\n          [player]: true\n        }\n      };\n      console.log(`🔧 DEBUG: Pass status updated - P1: ${newState.passed[1]}, P2: ${newState.passed[2]}`);\n      log(`🚫 Spieler ${player} passt.`);\n\n      // ❗ Kein Nachziehen bei Pass:\n      // Der passierende Spieler kommt in dieser Runde nicht mehr dran.\n      // Die nächste Runde startet ohnehin mit 5 neuen Handkarten.\n\n      // Check if round should end (both players passed)\n      const shouldEndRound = checkRoundEnd(newState);\n      console.log(`🔧 DEBUG: Should end round? ${shouldEndRound}`);\n      if (shouldEndRound) {\n        log(`🏁 Runde ${newState.round} wird beendet und ausgewertet.`);\n        return resolveRound(newState, log);\n      } else {\n        // Switch turn to other player for their final chance\n        const otherPlayer = player === 1 ? 2 : 1;\n        console.log(`🔧 DEBUG: Switching to other player ${otherPlayer}, has passed: ${newState.passed[otherPlayer]}`);\n\n        // Only switch if other player hasn't passed yet\n        if (!newState.passed[otherPlayer]) {\n          newState.current = otherPlayer;\n          newState.actionPoints = {\n            ...newState.actionPoints,\n            [otherPlayer]: 2\n          };\n\n          // Apply new start-of-turn hooks\n          applyStartOfTurnFlags(newState, otherPlayer, log);\n\n          // 🔥 CLUSTER 3: Auren-Flags beim Zugstart neu berechnen\n          recomputeAuraFlags(newState);\n          log(`⏭️ Spieler ${otherPlayer} hat noch einen letzten Zug.`);\n          console.log(`🔧 DEBUG: Turn switched to player ${otherPlayer}`);\n        } else {\n          // Both players have passed now, end round\n          log(`🏁 Runde ${newState.round} wird beendet (beide Spieler haben gepasst).`);\n          return resolveRound(newState, log);\n        }\n      }\n      return newState;\n    });\n  }, [setGameState, log]);\n  return {\n    startMatchWithDecks,\n    startMatchVsAI,\n    playCard,\n    activateInstantInitiative,\n    passTurn,\n    nextTurn,\n    endTurn\n  };\n}\n_s(useGameActions, \"k0iUrGA3o3AxUL5rOzEt77YoKGE=\");","map":{"version":3,"names":["useCallback","createDefaultEffectFlags","buildDeckFromEntries","sumGovernmentInfluenceWithAuras","PRESET_DECKS","getCardActionPointCost","getNetApCost","canPlayCard","triggerCardEffects","ensureTestBaselineAP","resolveQueue","applyStartOfTurnFlags","registerTrap","applyTrapsOnCardPlayed","recomputeAuraFlags","emptyBoard","migrateLegacyQueue","state","_queue","length","_effectQueue","push","other","p","ensureFlags","s","effectFlags","pickLane","c","tag","kind","isCardPlayableNow","player","card","deactivated","lane","board","t","String","type","toLowerCase","innen","slot","permanentSlots","hasPlayableZeroCost","hands","cost","applyAurasForPlayer","log","hasNgo","some","newAussen","aussen","map","pol","baseInfluence","influence","prev","bonus","name","effect","checkRoundEnd","gameState","result","passed","console","drawCardsFromDeck","count","deck","decks","drawnCards","splice","Math","min","reallyEndTurn","current","isEndingTurn","drawnCard","shift","shouldEndRound","round","resolveRound","newCurrent","actionPoints","p1Influence","p2Influence","roundWinner","cardsToDiscard","government","public","sofort","newP1Hand","newP2Hand","newRoundsWon","roundsWon","p1Wins","p2Wins","gameWinner","newState","actionsUsed","slice","discard","useGameActions","setGameState","afterQueueResolved","_s","startMatchWithDecks","p1DeckEntries","p2DeckEntries","p1Cards","p2Cards","p1NgoCarten","filter","p1PlatformCards","p1JoschaCards","p1PublicCards","join","d1","d2","h1","h2","traps","shields","Set","activeRefresh","startMatchVsAI","presetKey","playCard","handIndex","hand","i","ngoCards","platformCards","selectedCard","prevAp","max","ef","newHand","playedCard","currentBoard","publicCardsOnBoard","polCard","targetLane","laneArray","playerBoardCloned","event","e","m","msg","opponent","opponentBoard","romanAbramovich","find","regierungKarten","öffentlichkeitKarten","joschaFischer","_type","_type2","specCard","typeStr","isInitiative","test","includes","ownBoard","candidates","target","protected","slotType","_newState$permanentSl","_newState$effectFlags","effectKey","_newState$board$playe","markZuckerberg","markZuckerbergUsed","samAltman","innenArray","drawCardForPlayer","cardName","toUpperCase","hasPlatform","hasMedia","hasAuthoritarianCard","hasJoschka","key","replace","activateInstantInitiative","instantCard","played","endTurn","reason","nextTurn","passTurn","otherPlayer"],"sources":["C:/Users/skank/Videos/Cards/Milchcards/src/hooks/useGameActions.ts"],"sourcesContent":["import { useCallback } from 'react';\nimport { GameState, Card, Player, BuilderEntry, PoliticianCard } from '../types/game';\nimport { createDefaultEffectFlags } from '../types/game';\nimport { buildDeckFromEntries, sumGovernmentInfluenceWithAuras } from '../utils/gameUtils';\nimport { PRESET_DECKS } from '../data/gameData';\nimport { getCardActionPointCost, getNetApCost, canPlayCard, isInitiativeCard, isGovernmentCard } from '../utils/ap';\nimport { triggerCardEffects } from '../effects/cards';\nimport { ensureTestBaselineAP } from '../utils/testCompat';\nimport { resolveQueue } from '../utils/queue';\nimport { applyStartOfTurnFlags } from '../utils/startOfTurnHooks';\nimport { registerTrap, applyTrapsOnCardPlayed } from '../utils/traps';\nimport { recomputeAuraFlags } from '../state/effects';\nimport { activateInstantInitiative as activateInstantInitiativeRuntime } from '../state/instantRuntime';\nimport { isInstantInitiative } from '../utils/initiative';\nimport { emptyBoard } from '../state/board';\nimport type { EffectEvent } from '../types/effects';\n\n// Migration Helper für Queue-Vereinheitlichung\nconst migrateLegacyQueue = (state: any) => {\n  if (state._queue && state._queue.length > 0) {\n    if (!state._effectQueue) state._effectQueue = [];\n    state._effectQueue.push(...state._queue);\n    state._queue = [];\n  }\n};\n\n// Helper function for getting the other player\nconst other = (p: Player): Player => (p === 1 ? 2 : 1) as Player;\n\n// Hilfsfunktion: stellt sicher, dass effectFlags vorhanden sind\nconst ensureFlags = (s: GameState, p: Player) => {\n  if (!s.effectFlags) {\n    (s as any).effectFlags = { 1: createDefaultEffectFlags(), 2: createDefaultEffectFlags() };\n  } else {\n    s.effectFlags[p] = { ...createDefaultEffectFlags(), ...s.effectFlags[p] };\n  }\n};\n\n// Lane-Heuristik wie in playCard\nconst pickLane = (c: Card): 'innen'|'aussen' => {\n  const tag = (c as any).tag;\n  if (c.kind === 'pol' && (tag === 'Staatsoberhaupt' || tag === 'Regierungschef' || tag === 'Diplomat')) return 'aussen';\n  return 'innen';\n};\n\nconst isCardPlayableNow = (state: GameState, player: Player, card: Card): boolean => {\n  if ((card as any).deactivated) return false;\n\n  if (card.kind === 'pol') {\n    const lane = pickLane(card);\n    return state.board[player][lane].length < 5;\n  }\n\n  if (card.kind === 'spec') {\n    const t = String((card as any).type || '').toLowerCase();\n    if (t === 'öffentlichkeitskarte' || t === 'oeffentlichkeitskarte' || t === 'public') {\n      return state.board[player].innen.length < 5;\n    }\n    if (t === 'dauerhaft-initiative') {\n      const slot = 'government'; // wie bei dir „simplified\"\n      return !state.permanentSlots[player][slot];\n    }\n    // sonst: Fallen/Interventionen – aktuell immer erlaubt\n    return true;\n  }\n\n  return false;\n};\n\nexport const hasPlayableZeroCost = (state: GameState, player: Player): boolean => {\n  for (const c of state.hands[player]) {\n    const { cost } = getCardActionPointCost(state, player, c);\n    if (cost === 0 && isCardPlayableNow(state, player, c)) return true;\n  }\n  return false;\n};\n\n// Helper function to apply auras for a player (instant updates for Joschka Fischer + NGO synergy)\nfunction applyAurasForPlayer(state: GameState, player: Player, log?: (msg: string) => void) {\n  const board = state.board[player];\n  const hasNgo = board.innen.some(c =>\n    c.kind === 'spec' &&\n    (c as any).type === 'Öffentlichkeitskarte' &&\n    (c as any).tag === 'NGO' &&\n    !(c as any).deactivated\n  );\n\n  const newAussen = board.aussen.map(card => {\n    if (card.kind !== 'pol') return card;\n    const pol: any = { ...card };\n    if (pol.baseInfluence == null) pol.baseInfluence = pol.influence;\n    const prev = pol.influence as number;\n\n    let bonus = 0;\n    if (!pol.deactivated && pol.name === 'Joschka Fischer' && pol.effect === 'ngo_boost' && hasNgo) {\n      bonus += 1;\n    }\n    pol.influence = (pol.baseInfluence as number) + bonus;\n    if (log && pol.influence > prev) log(`PASSIV: ${pol.name} +${pol.influence - prev} I (jetzt ${pol.influence}).`);\n    return pol;\n  });\n\n  state.board = {\n    ...state.board,\n    [player]: { ...state.board[player], aussen: newAussen },\n  } as any;\n}\n\n\n\n// Helper function to check if round should end\nfunction checkRoundEnd(gameState: GameState): boolean {\n  // Round ends if both players have passed\n  const result = gameState.passed[1] && gameState.passed[2];\n  console.log(`🔧 DEBUG: checkRoundEnd - P1 passed: ${gameState.passed[1]}, P2 passed: ${gameState.passed[2]}, result: ${result}`);\n  return result;\n}\n\n// Helper function to draw cards from deck\nfunction drawCardsFromDeck(gameState: GameState, player: Player, count: number): Card[] {\n  const deck = [...gameState.decks[player]];\n  const drawnCards = deck.splice(0, Math.min(count, deck.length));\n  return drawnCards;\n}\n\n// Helper function to really end a turn (extracted from nextTurn logic)\nfunction reallyEndTurn(gameState: GameState, log: (msg: string) => void): GameState {\n  const current = gameState.current;\n\n  // Flag zurücksetzen - Zug-Ende wird jetzt wirklich durchgeführt\n  gameState.isEndingTurn = false;\n\n  // ✅ Karte nachziehen am Ende eines Zugs (nur wenn NICHT \"pass\")\n  if (!gameState.passed[current]) {\n    const drawnCard = gameState.decks[current].shift();\n    if (drawnCard) {\n      gameState.hands[current].push(drawnCard);\n      log(`🔥 Zug-Ende: +1 Karte gezogen (${drawnCard.name})`);\n    }\n  } else {\n    log(`⏭️ P${current} hat gepasst – kein Nachziehen.`);\n  }\n\n  // Check if round should end\n  const shouldEndRound = checkRoundEnd(gameState);\n  if (shouldEndRound) {\n    log(`🏁 Runde ${gameState.round} wird beendet (Zug-Ende).`);\n    return resolveRound(gameState, log);\n  }\n\n  // Spielerwechsel + AP reset\n  const newCurrent: Player = current === 1 ? 2 : 1;\n  gameState.current = newCurrent;\n  gameState.actionPoints = { ...gameState.actionPoints, [newCurrent]: 2 };\n  gameState.passed = { ...gameState.passed, [newCurrent]: false };\n\n            // Apply new start-of-turn hooks\n          applyStartOfTurnFlags(gameState, newCurrent, log);\n\n        // 🔥 CLUSTER 3: Auren-Flags beim Zugstart neu berechnen\n        recomputeAuraFlags(gameState);\n\n  // Reset turn-bezogener Flag-Nutzungen (handled in applyStartOfTurnFlags)\n\n  log(`🔄 Zug-Ende: Spieler ${newCurrent} ist am Zug (2 AP verfügbar)`);\n\n  return gameState;\n}\n\n// Helper function to resolve round and start new one\nfunction resolveRound(gameState: GameState, log: (msg: string) => void): GameState {\n  // Calculate influence for both players\n  const p1Influence = sumGovernmentInfluenceWithAuras(gameState, 1);\n  const p2Influence = sumGovernmentInfluenceWithAuras(gameState, 2);\n\n  log(`📊 Rundenauswertung: P1 ${p1Influence} Einfluss vs P2 ${p2Influence} Einfluss`);\n\n  // Determine winner\n  let roundWinner: Player;\n  if (p1Influence > p2Influence) {\n    roundWinner = 1;\n    log(`🏆 Spieler 1 gewinnt die Runde! (${p1Influence} > ${p2Influence})`);\n  } else if (p2Influence > p1Influence) {\n    roundWinner = 2;\n    log(`🏆 Spieler 2 gewinnt die Runde! (${p2Influence} > ${p1Influence})`);\n  } else {\n    // Tie - current player wins\n    roundWinner = gameState.current;\n    log(`🤝 Unentschieden! Spieler ${roundWinner} gewinnt als aktiver Spieler.`);\n  }\n\n  // Collect all cards to move to discard\n  const cardsToDiscard: Card[] = [\n    ...gameState.board[1].innen,\n    ...gameState.board[1].aussen,\n    ...gameState.board[2].innen,\n    ...gameState.board[2].aussen,\n    ...(gameState.permanentSlots[1].government ? [gameState.permanentSlots[1].government] : []),\n    ...(gameState.permanentSlots[1].public ? [gameState.permanentSlots[1].public] : []),\n    ...(gameState.permanentSlots[2].government ? [gameState.permanentSlots[2].government] : []),\n    ...(gameState.permanentSlots[2].public ? [gameState.permanentSlots[2].public] : []),\n    ...gameState.board[1].sofort,\n    ...gameState.board[2].sofort\n  ];\n\n  // Draw 5 new cards for each player\n  const newP1Hand = drawCardsFromDeck(gameState, 1, 5);\n  const newP2Hand = drawCardsFromDeck(gameState, 2, 5);\n\n  // Calculate new rounds won\n  const newRoundsWon = {\n    ...gameState.roundsWon,\n    [roundWinner]: gameState.roundsWon[roundWinner] + 1\n  };\n\n  // Check if game should end (Best of 3: first to 2 wins)\n  const p1Wins = newRoundsWon[1];\n  const p2Wins = newRoundsWon[2];\n\n  if (p1Wins >= 2 || p2Wins >= 2) {\n    const gameWinner = p1Wins >= 2 ? 1 : 2;\n    log(`🏆🎉 SPIEL BEENDET! Spieler ${gameWinner} gewinnt das Match! (${p1Wins}-${p2Wins})`);\n    log(`🔥 Gesamtergebnis: Player ${gameWinner} ist der Sieger!`);\n\n    // Return final state with game winner\n    return {\n      ...gameState,\n      roundsWon: newRoundsWon,\n      gameWinner,\n      // Keep current board state for final display\n      passed: { 1: true, 2: true }, // Both passed to indicate game end\n    };\n  }\n\n  // Create new state for next round\n  const newState: GameState = {\n    ...gameState,\n    round: gameState.round + 1,\n    current: roundWinner, // Winner starts next round\n         passed: { 1: false, 2: false }, // Reset pass status\n     actionPoints: { 1: 2, 2: 2 }, // Reset AP\n     actionsUsed: { 1: 0, 2: 0 }, // Reset actions (kept for compatibility)\n     roundsWon: newRoundsWon,\n    effectFlags: {\n      1: createDefaultEffectFlags(),\n      2: createDefaultEffectFlags()\n    },\n    // Clear all board positions\n    board: emptyBoard(),\n    // Clear permanent slots\n    permanentSlots: {\n      1: { government: null, public: null },\n      2: { government: null, public: null }\n    },\n    // instantSlot wird nicht mehr verwendet - Sofort-Initiativen gehen in board[player].sofort\n    // New hands with 5 cards each\n    hands: {\n      1: newP1Hand,\n      2: newP2Hand\n    },\n    // Update decks (cards were removed during drawing)\n    decks: {\n      1: gameState.decks[1].slice(newP1Hand.length),\n      2: gameState.decks[2].slice(newP2Hand.length)\n    },\n    // Update discard pile\n    discard: [...gameState.discard, ...cardsToDiscard]\n  };\n\n  log(`🆕 Runde ${newState.round} startet! Spieler ${roundWinner} beginnt. (Rundenstand: P1 ${newState.roundsWon[1]} - P2 ${newState.roundsWon[2]})`);\n  log(`🃏 Beide Spieler erhalten 5 neue Handkarten.`);\n\n  return newState;\n}\n\nexport function useGameActions(\n  gameState: GameState,\n  setGameState: React.Dispatch<React.SetStateAction<GameState>>,\n  log: (msg: string) => void,\n  afterQueueResolved?: () => void\n) {\n  const startMatchWithDecks = useCallback((p1DeckEntries: BuilderEntry[], p2DeckEntries: BuilderEntry[]) => {\n    const p1Cards = buildDeckFromEntries(p1DeckEntries);\n    const p2Cards = buildDeckFromEntries(p2DeckEntries);\n\n        // Debug: Log deck composition with detailed tag analysis\n    const p1NgoCarten = p1Cards.filter(c => (c as any).tag === 'NGO');\n    const p1PlatformCards = p1Cards.filter(c => (c as any).tag === 'Plattform');\n    const p1JoschaCards = p1Cards.filter(c => (c as any).effect === 'ngo_boost');\n    const p1PublicCards = p1Cards.filter(c => c.kind === 'spec' && (c as any).type === 'Öffentlichkeitskarte');\n\n    log(`🔍 DECK DEBUG P1: ${p1Cards.length} Karten total`);\n    log(`🧪 P1 Public Cards: ${p1PublicCards.map(c => `${c.name}${(c as any).tag ? `[${(c as any).tag}]` : ''}`).join(', ')}`);\n    log(`🌱 P1 NGO-Karten: ${p1NgoCarten.length > 0 ? p1NgoCarten.map(c => c.name).join(', ') : 'Keine'}`);\n    log(`💻 P1 Plattform-Karten: ${p1PlatformCards.length > 0 ? p1PlatformCards.map(c => c.name).join(', ') : 'Keine'}`);\n    log(`🎯 JOSCHKA FISCHER: ${p1JoschaCards.length > 0 ? '✅ IM DECK' : '❌ NICHT IM DECK'}`);\n\n    const d1 = [...p1Cards];\n    const d2 = [...p2Cards];\n    const h1 = d1.splice(0, Math.min(5, d1.length));\n    const h2 = d2.splice(0, Math.min(5, d2.length));\n\n    setGameState({\n      ...gameState,\n      round: 1,\n      current: 1,\n      passed: { 1: false, 2: false },\n      decks: { 1: d1, 2: d2 },\n      hands: { 1: h1, 2: h2 },\n      board: { 1: { innen: [], aussen: [], sofort: [] }, 2: { innen: [], aussen: [], sofort: [] } },\n      traps: { 1: [], 2: [] },\n      permanentSlots: {\n        1: { government: null, public: null },\n        2: { government: null, public: null },\n      },\n      // instantSlot wird nicht mehr verwendet - Sofort-Initiativen gehen in board[player].sofort\n      discard: [],\n      shields: new Set(), // Set<UID>\n      effectFlags: {\n        1: createDefaultEffectFlags(),\n        2: createDefaultEffectFlags()\n      },\n      actionsUsed: { 1: 0, 2: 0 },\n      log: [\n        `Match gestartet. P1 und P2 erhalten je ${h1.length}/${h2.length} Startkarten.`,\n        `🔍 DECK DEBUG P1: ${p1Cards.length} Karten total`,\n        `🧪 P1 Public Cards: ${p1PublicCards.map(c => `${c.name}${(c as any).tag ? `[${(c as any).tag}]` : ''}`).join(', ')}`,\n        `🌱 P1 NGO-Karten: ${p1NgoCarten.length > 0 ? p1NgoCarten.map(c => c.name).join(', ') : 'Keine'}`,\n        `💻 P1 Plattform-Karten: ${p1PlatformCards.length > 0 ? p1PlatformCards.map(c => c.name).join(', ') : 'Keine'}`,\n        `🎯 JOSCHKA FISCHER: ${p1JoschaCards.length > 0 ? '✅ IM DECK' : '❌ NICHT IM DECK'}`,\n        `📋 INITIAL BOARD P1: Regierung=[] | Öffentlichkeit=[]`,\n        `📋 INITIAL BOARD P2: Regierung=[] | Öffentlichkeit=[]`,\n        `🏠 PERMANENT SLOTS: Alle leer`\n      ],\n      activeRefresh: { 1: 0, 2: 0 },\n    });\n  }, [gameState, setGameState, log]);\n\n  const startMatchVsAI = useCallback((p1DeckEntries: BuilderEntry[], presetKey: keyof typeof PRESET_DECKS = 'AUTORITAERER_REALIST') => {\n    const p2DeckEntries = PRESET_DECKS[presetKey] as BuilderEntry[];\n    startMatchWithDecks(p1DeckEntries, p2DeckEntries);\n  }, [startMatchWithDecks]);\n\n  const playCard = useCallback((player: Player, handIndex: number, lane?: 'innen' | 'aussen') => {\n    setGameState(prev => {\n      // Test-only baseline fix – ensures AP=5 at game start inside test runner\n      ensureTestBaselineAP(prev);\n\n      // Validate input parameters\n      if (prev.current !== player) {\n        log(`❌ ERROR: Not player turn - Current: ${prev.current}, Attempted: ${player}`);\n        return prev;\n      }\n\n      const hand = prev.hands[player];\n      if (handIndex < 0 || handIndex >= hand.length) {\n        log(`❌ ERROR: Invalid hand index - Index: ${handIndex}, Hand length: ${hand.length}`);\n        return prev;\n      }\n\n      // Debug: Log current hand contents with detailed tag info\n      log(`🔍 HAND DEBUG P${player}: ${hand.map((c, i) => `${i}:${c.name}${(c as any).tag ? `[${(c as any).tag}]` : ''}`).join(', ')}`);\n      const ngoCards = hand.filter(c => (c as any).tag === 'NGO');\n      const platformCards = hand.filter(c => (c as any).tag === 'Plattform');\n      if (ngoCards.length > 0) {\n        log(`🌱 NGO-Karten in Hand P${player}: ${ngoCards.map(c => c.name).join(', ')}`);\n      }\n      if (platformCards.length > 0) {\n        log(`💻 Plattform-Karten in Hand P${player}: ${platformCards.map(c => c.name).join(', ')}`);\n      }\n\n      const selectedCard = hand[handIndex];\n      if (!canPlayCard(prev, player, selectedCard)) {\n        log('🚫 Kann Karte nicht spielen (keine AP verfügbar).');\n        return prev;\n      }\n\n      const { cost } = getNetApCost(prev, player, selectedCard);\n      const prevAp = prev.actionPoints[player];\n\n      const newState = { ...prev };\n\n      // Simplified AP system: All cards cost exactly 1 AP\n      newState.actionPoints[player] = Math.max(0, newState.actionPoints[player] - cost);\n      log(`💳 Kosten verbucht: AP ${prevAp}→${newState.actionPoints[player]}`);\n\n      // Flags KONSUMIEREN (einheitlich, NUR HIER!)\n      ensureFlags(newState, player);\n      const ef = newState.effectFlags[player];\n\n      // Simplified AP system: No refunds or discounts\n      // All cards cost exactly 1 AP\n\n      // Remove card from hand\n      const newHand = [...newState.hands[player]];\n      const [playedCard] = newHand.splice(handIndex, 1);\n      newState.hands = { ...newState.hands, [player]: newHand };\n\n      // 🔧 CLUSTER 3 DEBUG: Zeige jede gespielte Karte\n      log(`🔧 CLUSTER 3 GLOBAL DEBUG: P${player} spielt ${(playedCard as any).name} (${playedCard.kind}) - Type: ${(playedCard as any).type || 'KEIN TYPE'}`);\n\n      // 🔧 CLUSTER 3 DEBUG: Zeige aktuelles Board\n      const currentBoard = newState.board[player];\n      const publicCardsOnBoard = currentBoard.innen.filter(card => card.kind === 'spec');\n      log(`🔧 CLUSTER 3 GLOBAL DEBUG: Öffentlichkeitskarten auf dem Feld: ${publicCardsOnBoard.map(c => (c as any).name).join(', ')}`);\n\n      // Jennifer Doudna check removed - not needed for current game logic\n\n      // Handle different card types\n      if (playedCard.kind === 'pol') {\n        const polCard = playedCard as any;\n        const targetLane = lane || (polCard.tag === 'Staatsoberhaupt' || polCard.tag === 'Regierungschef' || polCard.tag === 'Diplomat' ? 'aussen' : 'innen');\n\n        if (newState.board[player][targetLane].length >= 5) {\n          log(`❌ ERROR: Lane full - Lane: ${targetLane}, Current: ${newState.board[player][targetLane].length}/5`);\n          return prev;\n        }\n\n        // Add to board (immutable clone to avoid accidental double references)\n        const laneArray = [...newState.board[player][targetLane], playedCard];\n        const playerBoardCloned = { ...newState.board[player], [targetLane]: laneArray } as any;\n        newState.board = { ...newState.board, [player]: playerBoardCloned } as any;\n        log(`🃏 Player ${player}: ${playedCard.name} gespielt in ${targetLane === 'aussen' ? 'Regierung' : 'Öffentlichkeit'}`);\n\n        // 3) Nachdem die Karte gelegt wurde: gegnerische Traps prüfen\n        applyTrapsOnCardPlayed(\n          newState,\n          player,\n          playedCard,\n          (event) => {\n            if (!newState._effectQueue) newState._effectQueue = [];\n            newState._effectQueue.push(event);\n          },\n          log\n        );\n\n        // 👉 Erst JETZT Auren anwenden (damit +2 Basis erhalten bleibt)\n        applyAurasForPlayer(newState, player, log);\n\n        // 6) Karteneffekte enqueuen + Queue auflösen\n        triggerCardEffects(newState, player, playedCard);\n        // Migration Helper verwenden\n        migrateLegacyQueue(newState);\n        // Nur noch _effectQueue verwenden\n        if (newState._effectQueue && newState._effectQueue.length > 0) {\n          resolveQueue(newState, newState._effectQueue);\n          newState._effectQueue = [];\n          // Nach Queue-Auflösung: Hand-Arrays immutabel neu zuweisen\n          afterQueueResolved?.();\n        }\n\n        // Check for trap triggers\n        applyTrapsOnCardPlayed(\n          newState,\n          player,\n          playedCard,\n          (e) => (newState._effectQueue ??= []).push(e),\n          (m) => (newState._effectQueue ??= []).push({ type: 'LOG', msg: m })\n        );\n\n        // 🔥 ROMAN ABRAMOVICH EFFEKT: Wenn Regierungskarte mit Einfluss ≤5 gespielt wird\n        if (playedCard.kind === 'pol' && (playedCard as any).influence <= 5) {\n          const opponent = player === 1 ? 2 : 1;\n          const opponentBoard = newState.board[opponent];\n          const romanAbramovich = opponentBoard.innen.find(card =>\n            card.kind === 'spec' && (card as any).name === 'Roman Abramovich'\n          );\n\n          if (romanAbramovich) {\n            // Ziehe eine Karte für den Gegner\n            if (newState.decks[opponent].length > 0) {\n              const drawnCard = newState.decks[opponent].shift();\n              if (drawnCard) {\n                newState.hands[opponent].push(drawnCard);\n                log(`🔥 ROMAN ABRAMOVICH EFFEKT: P${opponent} zieht 1 Karte (${drawnCard.name}) - Regierungskarte mit Einfluss ≤5 gespielt`);\n              }\n            }\n          }\n        }\n\n\n\n\n\n\n\n        // 🔍 BOARD DEBUG: Zeige aktuelles Board nach dem Spielen\n        const currentBoard = newState.board[player];\n        const regierungKarten = currentBoard.aussen.map(c => `${c.name}[${c.kind === 'pol' ? (c as any).influence + 'I' : 'S'}]`);\n        const öffentlichkeitKarten = currentBoard.innen.map(c => `${c.name}[${c.kind === 'spec' ? (c as any).tag || 'S' : 'P'}]`);\n        log(`📋 P${player} BOARD: Regierung=[${regierungKarten.join(', ')}] | Öffentlichkeit=[${öffentlichkeitKarten.join(', ')}]`);\n\n                // 🔥 JOSCHKA FISCHER NGO-EFFEKT: Jetzt als kontinuierlicher Aura-Effekt in sumRowWithAuras implementiert\n        log(`🔍 DEBUG: Karte gespielt - Name: ${playedCard.name}, Tag: ${(playedCard as any).tag || 'Kein Tag'}, Lane: ${targetLane}, Kind: ${playedCard.kind}`);\n\n        if ((playedCard as any).tag === 'NGO') {\n          log(`🔍 NGO-Karte gespielt: ${playedCard.name} [NGO] - Kontinuierliche Aura-Effekte werden bei Rundenauswertung berechnet`);\n\n          // 🎯 SOFORTIGE SYNERGIE-PRÜFUNG: Joschka Fischer + NGO\n          const joschaFischer = currentBoard.aussen.find(card =>\n            card.kind === 'pol' && (card as any).effect === 'ngo_boost'\n          );\n\n          if (joschaFischer) {\n            log(`🔥🔥🔥 SYNERGIE AKTIVIERT! 🔥🔥🔥 Joschka Fischer + ${playedCard.name}[NGO] → +1 Einfluss bei Rundenauswertung`);\n          }\n        }\n\n      } else if (playedCard.kind === 'spec') {\n        const specCard = playedCard as any;\n        const typeStr = String(specCard.type || '').toLowerCase();\n        const isInitiative = /initiative/.test(typeStr); // matcht \"Initiative\", \"Sofort-Initiative\", etc.\n\n                  // 1) Falls es eine \"Systemrelevant\" ist (sofortiger Buff auf letzte eigene Regierungskarte)\n        if (playedCard.kind === 'spec' && (playedCard as any).type?.toLowerCase().includes('systemrelevant')) {\n          const ownBoard = newState.board[player];\n          const candidates = [...ownBoard.aussen, ...ownBoard.innen].filter(c => c.kind === 'pol') as PoliticianCard[];\n          const target = candidates[candidates.length - 1]; // letzte eigene Regierungskarte\n          if (target) {\n            (target as any).protected = true;\n            log(`🛡️ ${target.name} erhält einmaligen Schutz.`);\n          } else {\n            log('🛈 Systemrelevant: Keine eigene Regierungskarte im Spiel – Effekt verpufft.');\n          }\n          // danach die Spezialkarte normal entsorgen\n          newState.discard.push(playedCard);\n          return newState;\n        }\n\n        // 1) Dauerhaft-Initiative (Ongoing)\n        if (typeStr.includes('dauerhaft')) {\n          const slotType = 'government'; // ggf. später per specCard.slot dynamisch\n          if (!newState.permanentSlots[player][slotType]) {\n            newState.permanentSlots[player][slotType] = playedCard;\n            log(`P${player} spielt ${playedCard.name} als Dauerhafte Initiative`);\n          } else {\n            log(`⚠️ WARN: Slot occupied - Slot ${slotType} already has ${newState.permanentSlots[player][slotType]?.name}`);\n          }\n\n          // 6) Karteneffekte enqueuen + Queue auflösen\n          triggerCardEffects(newState, player, playedCard);\n          // Migration Helper verwenden\n          migrateLegacyQueue(newState);\n          // Nur noch _effectQueue verwenden\n          if (newState._effectQueue && newState._effectQueue.length > 0) {\n            resolveQueue(newState, newState._effectQueue);\n            newState._effectQueue = [];\n            // Nach Queue-Auflösung: Hand-Arrays immutabel neu zuweisen\n            afterQueueResolved?.();\n          }\n\n          // Check for trap triggers\n          applyTrapsOnCardPlayed(\n            newState,\n            player,\n            playedCard,\n            (e) => (newState._effectQueue ??= []).push(e),\n            (m) => (newState._effectQueue ??= []).push({ type: 'LOG', msg: m })\n          );\n\n          return newState;\n        }\n\n        // 2) Sofort-/Sofort-Initiativen (Instant)\n        if (isInitiative) {\n          if (!specCard.effectKey) {\n            log(`❌ Initiative ohne effectKey: ${specCard.name}`);\n          } else {\n            log(`🧩 INIT: ${specCard.name} [${String(specCard.effectKey)}] gespielt`);\n          }\n\n          // 🔧 NEU: Sofort-Initiativen werden in das sofort Array gelegt statt sofort aktiviert\n          if (typeStr.includes('sofort')) {\n            // Prüfe ob bereits eine Sofort-Initiative im Slot liegt\n            if (newState.board[player].sofort.length > 0) {\n              log(`❌ ERROR: Sofort-Initiative-Slot bereits besetzt - ${newState.board[player].sofort[0]?.name} muss erst aktiviert werden`);\n              // Karte zurück in die Hand\n              newState.hands[player] = [...newState.hands[player], playedCard];\n              // AP zurückgeben\n              newState.actionPoints[player] += cost;\n              // AP zurückgegeben, keine Aktion rückgängig zu machen\n              return newState;\n            }\n\n            // Sofort-Initiative in das sofort Array legen\n            newState.board[player].sofort = [playedCard];\n            log(`🎯 P${player} legt ${playedCard.name} in Sofort-Initiative-Slot (kann später aktiviert werden)`);\n\n            // Sofort-Initiativen: auf Board.sofort legen (nicht direkt entsorgen)\n            if (!newState._effectQueue) newState._effectQueue = [];\n            newState._effectQueue.push({ type: 'LOG', msg: `🔔 Sofort-Initiative bereit: ${playedCard.name} (zum Aktivieren anklicken oder Taste 'A')` });\n            return newState;\n          }\n\n          // Dauerhaft-Initiativen werden weiterhin sofort aktiviert\n          // Initiative in den Ablagestapel\n          newState.discard = [...newState.discard, playedCard];\n          log(`P${player} spielt Initiative: ${playedCard.name}`);\n\n                     // 6) Karteneffekte enqueuen + Queue auflösen\n           triggerCardEffects(newState, player, playedCard);\n           // Migration Helper verwenden\n           migrateLegacyQueue(newState);\n           // Nur noch _effectQueue verwenden\n         if (newState._effectQueue && newState._effectQueue.length > 0) {\n           resolveQueue(newState, newState._effectQueue);\n           newState._effectQueue = [];\n           // Nach Queue-Auflösung: Hand-Arrays immutabel neu zuweisen\n           afterQueueResolved?.();\n         }\n\n           // Check for trap triggers\n           applyTrapsOnCardPlayed(\n             newState,\n             player,\n             playedCard,\n             (e) => (newState._effectQueue ??= []).push(e),\n             (m) => (newState._effectQueue ??= []).push({ type: 'LOG', msg: m })\n           );\n\n           // 🔥 CLUSTER 3: Auren-Flags neu berechnen (nach Kartenspielen)\n          recomputeAuraFlags(newState);\n\n          // 🔥 CLUSTER 3: Ai Weiwei Bonus wird bei Aktivierung angewendet (nicht beim Spielen)\n\n          // 🔥 PASSIVE EFFEKTE NACH INITIATIVE: Mark Zuckerberg & Sam Altman\n\n          // Mark Zuckerberg: \"Nach einer Initiative: +1 Aktionspunkt zurück (einmal pro Runde)\"\n          const markZuckerberg = newState.board[player].innen.find(card =>\n            card.kind === 'spec' && (card as any).name === 'Mark Zuckerberg'\n          );\n          if (markZuckerberg && !newState.effectFlags[player]?.markZuckerbergUsed) {\n            newState.actionPoints[player] += 1;\n            newState.effectFlags[player] = { ...newState.effectFlags[player], markZuckerbergUsed: true };\n            log(`🔥 MARK ZUCKERBERG EFFEKT: +1 AP zurück nach Initiative (${newState.actionPoints[player] - 1} → ${newState.actionPoints[player]})`);\n          }\n\n          // Sam Altman: \"Bei einer KI-bezogenen Initiative: ziehe 1 Karte + 1 Aktionspunkt zurück\"\n          const samAltman = newState.board[player].innen.find(card =>\n            card.kind === 'spec' && (card as any).name === 'Sam Altman'\n          );\n          if (samAltman && (playedCard as any).tag === 'Intelligenz') {\n            // Ziehe 1 Karte\n            if (newState.decks[player].length > 0) {\n              const drawnCard = newState.decks[player].shift();\n              if (drawnCard) {\n                newState.hands[player].push(drawnCard);\n                log(`🔥 SAM ALTMAN EFFEKT: +1 Karte gezogen (${drawnCard.name}) - KI-Initiative`);\n              }\n            }\n            // +1 AP zurück\n            newState.actionPoints[player] += 1;\n            log(`🔥 SAM ALTMAN EFFEKT: +1 AP zurück (${newState.actionPoints[player] - 1} → ${newState.actionPoints[player]}) - KI-Initiative`);\n          }\n\n\n          return newState;\n        }\n\n        // 3) Öffentlichkeit (Public)\n        if (\n          typeStr === 'öffentlichkeitskarte' ||\n          typeStr === 'oeffentlichkeitskarte' ||\n          typeStr === 'öffentlichkeit' ||\n          typeStr === 'public'\n        ) {\n          if (newState.board[player].innen.length < 5) {\n            const innenArray = [...newState.board[player].innen, playedCard];\n            const playerBoardCloned = { ...newState.board[player], innen: innenArray } as any;\n            newState.board = { ...newState.board, [player]: playerBoardCloned } as any;\n            log(`P${player} spielt ${playedCard.name} in Öffentlichkeit`);\n\n            // Sofort Auren prüfen (z.B. JF +1, wenn JF schon liegt)\n            applyAurasForPlayer(newState, player, log);\n\n                         // 6) Karteneffekte enqueuen + Queue auflösen\n             triggerCardEffects(newState, player, playedCard);\n             // Migration Helper verwenden\n             migrateLegacyQueue(newState);\n         if (newState._effectQueue && newState._effectQueue.length > 0) {\n           resolveQueue(newState, newState._effectQueue);\n           newState._effectQueue = [];\n           // Nach Queue-Auflösung: Hand-Arrays immutabel neu zuweisen\n           afterQueueResolved?.();\n         }\n\n             // Check for trap triggers\n             applyTrapsOnCardPlayed(\n               newState,\n               player,\n               playedCard,\n               (e) => (newState._effectQueue ??= []).push(e),\n               (m) => (newState._effectQueue ??= []).push({ type: 'LOG', msg: m })\n             );\n\n\n\n            // 🔥 PUBLIC CARD EFFECTS - Passive effects when played\n\n            // Helper function to draw a card for the player\n            const drawCardForPlayer = (cardName: string) => {\n              if (newState.decks[player].length > 0) {\n                const drawnCard = newState.decks[player].shift();\n                if (drawnCard) {\n                  newState.hands[player].push(drawnCard);\n                  log(`🔥 ${cardName.toUpperCase()} EFFEKT: +1 Karte gezogen (${drawnCard.name})`);\n                  return true;\n                }\n              }\n              return false;\n            };\n\n            if (specCard.name === 'Elon Musk') {\n              // Effect: \"Ziehe 1 Karte. Deine erste Initiative pro Runde kostet 1 Aktionspunkt weniger.\"\n              drawCardForPlayer('Elon Musk');\n              // 🔥 QUEUE-SYSTEM: Erste Initiative pro Runde → Refund wird über triggerCardEffects gehandhabt\n\n            } else if (specCard.name === 'Bill Gates') {\n              // Effect: \"Ziehe 1 Karte. Deine nächste Initiative kostet 1 Aktionspunkt weniger.\"\n              drawCardForPlayer('Bill Gates');\n              // 🔥 QUEUE-SYSTEM: Nächste Initiative → Refund wird über triggerCardEffects gehandhabt\n\n            } else if (specCard.name === 'Jeff Bezos') {\n              // Effect: \"Ziehe 1 Karte beim Ausspielen. Wenn eine Plattform liegt: +1 Aktionspunkt.\"\n              drawCardForPlayer('Jeff Bezos');\n              const hasPlatform = newState.board[player].innen.some(c =>\n                c.kind === 'spec' && (c as any).tag === 'Plattform'\n              );\n              if (hasPlatform) {\n                newState.actionPoints[player] += 1;\n                log(`🔥 JEFF BEZOS: +1 AP durch Plattform-Synergie! (${newState.actionPoints[player] - 1} → ${newState.actionPoints[player]})`);\n              }\n\n            } else if (specCard.name === 'Warren Buffett') {\n              // Effect: \"Ziehe 1 Karte. Bei einer Wirtschafts-Initiative: +1 Effekt.\"\n              drawCardForPlayer('Warren Buffett');\n              // TODO: Implement \"Wirtschafts-Initiative +1 Effect\" logic\n              log(`📊 WARREN BUFFETT: Bei Wirtschafts-Initiativen +1 Effekt! (TODO: Implementierung)`);\n\n            } else if (specCard.name === 'Gautam Adani') {\n              // Effect: \"Ziehe 1 Karte. Bei einer Infrastruktur-Initiative: +1 Effekt.\"\n              drawCardForPlayer('Gautam Adani');\n              // TODO: Implement \"Infrastruktur-Initiative +1 Effect\" logic\n              log(`📊 GAUTAM ADANI: Bei Infrastruktur-Initiativen +1 Effekt! (TODO: Implementierung)`);\n\n            } else if (specCard.name === 'Zhang Yiming') {\n              // Effect: \"Ziehe 1 Karte. Bei Medien auf dem Feld: -1 Aktionspunkt auf deine nächste Initiative.\"\n              drawCardForPlayer('Zhang Yiming');\n              const hasMedia = newState.board[player].innen.some(c =>\n                c.kind === 'spec' && (c as any).tag === 'Medien'\n              );\n              if (hasMedia) {\n                // TODO: Implement \"nächste Initiative -1 AP\" logic\n                log(`🔥 ZHANG YIMING: Nächste Initiative kostet 1 AP weniger durch Medien-Synergie! (TODO: Implementierung)`);\n              }\n\n            } else if (specCard.name === 'George Soros') {\n              // Effect: \"+1 Aktionspunkt wenn der Gegner eine autoritäre Regierungskarte hat.\"\n              const opponent = player === 1 ? 2 : 1;\n              const hasAuthoritarianCard = newState.board[opponent].aussen.some(card => {\n                const polCard = card as any;\n                return polCard.tag === 'Staatsoberhaupt' && polCard.influence >= 8; // High influence leaders\n              });\n\n              if (hasAuthoritarianCard) {\n                newState.actionPoints[player] += 1;\n                log(`🔥 GEORGE SOROS EFFEKT: +1 AP durch autoritäre Regierung des Gegners!`);\n                log(`📊 SOROS: Aktionspunkte ${newState.actionPoints[player] - 1} → ${newState.actionPoints[player]}`);\n              } else {\n                log(`💭 George Soros: Keine autoritären Karten beim Gegner - Effekt nicht ausgelöst`);\n              }\n            }\n\n            // 🔗 NGO-Synergie: Wenn eine NGO gelegt wird und Joschka Fischer liegt, erhält P${player} +1 Einfluss (Rundenauswertung)\n            if ((specCard as any).tag === 'NGO') {\n              const hasJoschka = newState.board[player].aussen.some(c => c.kind === 'pol' && (c as any).name === 'Joschka Fischer' && !(c as any).deactivated);\n              if (hasJoschka) {\n                log(`🔥🔥🔥 SYNERGIE AKTIVIERT! 🔥🔥🔥 Joschka Fischer + ${playedCard.name}[NGO] → +1 Einfluss bei Rundenauswertung`);\n              }\n            }\n          } else {\n            log(`❌ ERROR: Lane full - Öffentlichkeit ist voll (5/5)`);\n          }\n\n          // Simplified AP system: No refunds\n          return newState;\n        }\n\n                  // 4) Default: Traps/Interventions\n                  // Falls Trap-Karte gelegt wird\n          if (playedCard.kind === 'spec' && (playedCard as any).type?.toLowerCase().includes('trap')) {\n            registerTrap(newState, player, playedCard.key || playedCard.name.toLowerCase().replace(/[- ]/g, '_'));\n            // NICHT sofort checken – sie wartet auf den Gegner\n            return newState;\n          }\n\n        newState.traps[player] = [...newState.traps[player], playedCard];\n        log(`P${player} spielt ${playedCard.name} als ${specCard.type}`);\n\n        // 6) Karteneffekte enqueuen + Queue auflösen\n        triggerCardEffects(newState, player, playedCard);\n        // Migration Helper verwenden\n        migrateLegacyQueue(newState);\n        // Nur noch _effectQueue verwenden\n        if (newState._effectQueue && newState._effectQueue.length > 0) {\n          resolveQueue(newState, newState._effectQueue);\n          newState._effectQueue = [];\n          // Nach Queue-Auflösung: Hand-Arrays immutabel neu zuweisen\n          afterQueueResolved?.();\n        }\n\n        // Check for trap triggers\n        applyTrapsOnCardPlayed(\n          newState,\n          player,\n          playedCard,\n          (e) => (newState._effectQueue ??= []).push(e),\n          (m) => (newState._effectQueue ??= []).push({ type: 'LOG', msg: m })\n        );\n\n        // Simplified AP system: No refunds\n        return newState;\n      }\n\n      // 6) Karteneffekte enqueuen + Queue auflösen (fallback für unbekannte Kartentypen)\n      triggerCardEffects(newState, player, selectedCard);\n      // Migration Helper verwenden\n      migrateLegacyQueue(newState);\n      // Nur noch _effectQueue verwenden\n        if (newState._effectQueue && newState._effectQueue.length > 0) {\n          resolveQueue(newState, newState._effectQueue);\n          newState._effectQueue = [];\n          // Nach Queue-Auflösung: Hand-Arrays immutabel neu zuweisen\n          afterQueueResolved?.();\n        }\n\n      // Check for trap triggers\n      applyTrapsOnCardPlayed(\n        newState,\n        player,\n        selectedCard,\n        (e) => (newState._effectQueue ??= []).push(e),\n        (m) => (newState._effectQueue ??= []).push({ type: 'LOG', msg: m })\n      );\n\n      // Simplified AP system: No refunds\n\n      // Kein Aktionenlimit mehr → automatischer Turnwechsel entfällt\n\n\n      return newState;\n    });\n  }, [setGameState, log]);\n\n  const activateInstantInitiative = useCallback((player: Player) => {\n    setGameState(prev => {\n      if (prev.current !== player) {\n        log(`❌ ERROR: Not player turn - Current: ${prev.current}, Attempted: ${player}`);\n        return prev;\n      }\n\n      const instantCard = prev.board[player].sofort[0];\n      if (!instantCard) {\n        log(`❌ ERROR: No Sofort-Initiative in slot for player ${player}`);\n        return prev;\n      }\n\n      const newState = { ...prev };\n\n      // 1) Normale Karten-Effekte der Sofort-Karte feuern\n      triggerCardEffects(newState, player, instantCard);\n\n      // Check for trap triggers\n      applyTrapsOnCardPlayed(\n        newState,\n        player,\n        instantCard,\n        (e) => (newState._effectQueue ??= []).push(e),\n        (m) => (newState._effectQueue ??= []).push({ type: 'LOG', msg: m })\n      );\n\n      // 2) Queue auflösen (BEVOR die Karte entfernt wird)\n      if (newState._effectQueue && newState._effectQueue.length > 0) {\n        resolveQueue(newState, [...newState._effectQueue]);\n        newState._effectQueue = [];\n        // Nach Queue-Auflösung: Hand-Arrays immutabel neu zuweisen\n        afterQueueResolved?.();\n      }\n\n      // 3) Karte NACH Queue-Auflösung in den Ablagestapel\n      const [played] = newState.board[player].sofort.splice(0, 1);\n      newState.discard.push(played);\n\n      return newState;\n    });\n  }, [setGameState, log]);\n\n  const endTurn = useCallback((reason: 'button_end_turn' | 'auto' = 'button_end_turn') => {\n    setGameState((prev): GameState => {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const current = prev.current;\n\n      // 1) Schon im Abschluss? -> Nichts tun (Idempotenz)\n      if (prev.isEndingTurn) {\n        log('🔁 Zugabschluss läuft bereits – warte auf Queue.');\n        return prev;\n      }\n\n      const newState = { ...prev, isEndingTurn: true };\n\n      // 2) Hängen noch Effekte in der Queue? -> Auflösen lassen\n      if (newState._effectQueue && newState._effectQueue.length > 0) {\n        log('⏳ Effekte werden noch aufgelöst – Zugwechsel folgt automatisch.');\n        resolveQueue(newState, [...newState._effectQueue]);\n        newState._effectQueue = [];\n        // Nach Queue-Auflösung: Wenn Flag noch gesetzt, Zug beenden\n        if (newState.isEndingTurn) {\n          return reallyEndTurn(newState, log);\n        }\n        return newState;\n      }\n\n      // 3) Keine Effekte mehr -> sofort beenden\n      return reallyEndTurn(newState, log);\n    });\n  }, [setGameState, log]);\n\n  // Legacy: nextTurn als Alias für endTurn für Kompatibilität\n  const nextTurn = useCallback(() => {\n    endTurn('auto');\n  }, [endTurn]);\n\n    const passTurn = useCallback((player: Player) => {\n    console.log(`🔧 DEBUG: passTurn called for player ${player}`);\n\n    setGameState(prev => {\n      console.log(`🔧 DEBUG: passTurn setState - current: ${prev.current}, player: ${player}`);\n\n      if (prev.current !== player) {\n        console.log(`🔧 DEBUG: Wrong player turn - current: ${prev.current}, attempted: ${player}`);\n        return prev;\n      }\n\n      const newState = { ...prev, passed: { ...prev.passed, [player]: true } };\n      console.log(`🔧 DEBUG: Pass status updated - P1: ${newState.passed[1]}, P2: ${newState.passed[2]}`);\n      log(`🚫 Spieler ${player} passt.`);\n\n      // ❗ Kein Nachziehen bei Pass:\n      // Der passierende Spieler kommt in dieser Runde nicht mehr dran.\n      // Die nächste Runde startet ohnehin mit 5 neuen Handkarten.\n\n      // Check if round should end (both players passed)\n      const shouldEndRound = checkRoundEnd(newState);\n      console.log(`🔧 DEBUG: Should end round? ${shouldEndRound}`);\n\n      if (shouldEndRound) {\n        log(`🏁 Runde ${newState.round} wird beendet und ausgewertet.`);\n        return resolveRound(newState, log);\n      } else {\n        // Switch turn to other player for their final chance\n        const otherPlayer: Player = player === 1 ? 2 : 1;\n        console.log(`🔧 DEBUG: Switching to other player ${otherPlayer}, has passed: ${newState.passed[otherPlayer]}`);\n\n        // Only switch if other player hasn't passed yet\n        if (!newState.passed[otherPlayer]) {\n                     newState.current = otherPlayer;\n           newState.actionPoints = { ...newState.actionPoints, [otherPlayer]: 2 };\n\n          // Apply new start-of-turn hooks\n          applyStartOfTurnFlags(newState, otherPlayer, log);\n\n        // 🔥 CLUSTER 3: Auren-Flags beim Zugstart neu berechnen\n        recomputeAuraFlags(newState);\n\n          log(`⏭️ Spieler ${otherPlayer} hat noch einen letzten Zug.`);\n          console.log(`🔧 DEBUG: Turn switched to player ${otherPlayer}`);\n        } else {\n          // Both players have passed now, end round\n          log(`🏁 Runde ${newState.round} wird beendet (beide Spieler haben gepasst).`);\n          return resolveRound(newState, log);\n        }\n      }\n\n      return newState;\n    });\n  }, [setGameState, log]);\n\n  return {\n    startMatchWithDecks,\n    startMatchVsAI,\n    playCard,\n    activateInstantInitiative,\n    passTurn,\n    nextTurn,\n    endTurn,\n  };\n  }\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}