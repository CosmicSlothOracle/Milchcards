{"ast":null,"code":"var _CardEffectsTestRunner;\nimport { runInitiativeAndPublicTests } from '../__tests__/initiative_public_suite';\n\n/**\r\n * Browser-compatible test runner for card effects\r\n * Can be called from browser console: window.__MILCH_TESTS__.run()\r\n */\nexport class CardEffectsTestRunner {\n  constructor() {\n    this.results = null;\n  }\n  static getInstance() {\n    if (!CardEffectsTestRunner.instance) {\n      CardEffectsTestRunner.instance = new CardEffectsTestRunner();\n    }\n    return CardEffectsTestRunner.instance;\n  }\n  async runTests() {\n    console.log('🧪 Starting Card Effects Test Suite...');\n    this.results = await runInitiativeAndPublicTests();\n    console.log('📊 Test Results Summary:');\n    console.table(this.results.summary);\n    return this.results;\n  }\n  getResults() {\n    return this.results;\n  }\n  getFailedTests() {\n    if (!this.results) return [];\n    return this.results.items.filter(item => item.status === 'FAIL');\n  }\n  getPassedTests() {\n    if (!this.results) return [];\n    return this.results.items.filter(item => item.status === 'PASS');\n  }\n  getPendingTests() {\n    if (!this.results) return [];\n    return this.results.items.filter(item => item.status === 'PENDING');\n  }\n  getNoHandlerTests() {\n    if (!this.results) return [];\n    return this.results.items.filter(item => item.status === 'NO_HANDLER');\n  }\n  logDetailedResults() {\n    if (!this.results) {\n      console.log('❌ No test results available. Run tests first.');\n      return;\n    }\n    console.log('\\n🔍 DETAILED TEST RESULTS:');\n    console.log('========================');\n    this.results.items.forEach((item, index) => {\n      const status = item.status === 'PASS' ? '✅' : item.status === 'FAIL' ? '❌' : item.status === 'PENDING' ? '⏳' : '❓';\n      console.log(`${index + 1}. ${status} ${item.cardName} (${item.effectKey || 'no key'})`);\n      if (item.status === 'FAIL' && item.details) {\n        console.log(`   Details:`, item.details);\n      }\n    });\n  }\n  exportResults() {\n    if (!this.results) {\n      console.log('❌ No test results available. Run tests first.');\n      return;\n    }\n    const data = JSON.stringify(this.results, null, 2);\n    const blob = new Blob([data], {\n      type: 'application/json'\n    });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `card_effects_test_results_${new Date().toISOString().split('T')[0]}.json`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n    console.log('💾 Test results exported to JSON file');\n  }\n}\n\n// Browser global interface\n_CardEffectsTestRunner = CardEffectsTestRunner;\nCardEffectsTestRunner.instance = void 0;\n// Initialize browser interface\nif (typeof window !== 'undefined') {\n  const runner = CardEffectsTestRunner.getInstance();\n  window.__MILCH_TESTS__ = {\n    run: () => runner.runTests(),\n    results: () => runner.getResults(),\n    failed: () => runner.getFailedTests(),\n    passed: () => runner.getPassedTests(),\n    pending: () => runner.getPendingTests(),\n    noHandler: () => runner.getNoHandlerTests(),\n    details: () => runner.logDetailedResults(),\n    export: () => runner.exportResults(),\n    runner\n  };\n  console.log('🧪 Card Effects Test Runner loaded. Use window.__MILCH_TESTS__.run() to start tests.');\n}","map":{"version":3,"names":["runInitiativeAndPublicTests","CardEffectsTestRunner","constructor","results","getInstance","instance","runTests","console","log","table","summary","getResults","getFailedTests","items","filter","item","status","getPassedTests","getPendingTests","getNoHandlerTests","logDetailedResults","forEach","index","cardName","effectKey","details","exportResults","data","JSON","stringify","blob","Blob","type","url","URL","createObjectURL","a","document","createElement","href","download","Date","toISOString","split","body","appendChild","click","removeChild","revokeObjectURL","_CardEffectsTestRunner","window","runner","__MILCH_TESTS__","run","failed","passed","pending","noHandler","export"],"sources":["C:/Users/skank/Videos/Cards/Milchcards/src/utils/testRunner.ts"],"sourcesContent":["import { runInitiativeAndPublicTests, type SuiteResult } from '../__tests__/initiative_public_suite';\r\n\r\n/**\r\n * Browser-compatible test runner for card effects\r\n * Can be called from browser console: window.__MILCH_TESTS__.run()\r\n */\r\nexport class CardEffectsTestRunner {\r\n  private static instance: CardEffectsTestRunner;\r\n  private results: SuiteResult | null = null;\r\n\r\n  static getInstance(): CardEffectsTestRunner {\r\n    if (!CardEffectsTestRunner.instance) {\r\n      CardEffectsTestRunner.instance = new CardEffectsTestRunner();\r\n    }\r\n    return CardEffectsTestRunner.instance;\r\n  }\r\n\r\n  async runTests(): Promise<SuiteResult> {\r\n    console.log('🧪 Starting Card Effects Test Suite...');\r\n    this.results = await runInitiativeAndPublicTests();\r\n\r\n    console.log('📊 Test Results Summary:');\r\n    console.table(this.results.summary);\r\n\r\n    return this.results;\r\n  }\r\n\r\n  getResults(): SuiteResult | null {\r\n    return this.results;\r\n  }\r\n\r\n  getFailedTests(): any[] {\r\n    if (!this.results) return [];\r\n    return this.results.items.filter(item => item.status === 'FAIL');\r\n  }\r\n\r\n  getPassedTests(): any[] {\r\n    if (!this.results) return [];\r\n    return this.results.items.filter(item => item.status === 'PASS');\r\n  }\r\n\r\n  getPendingTests(): any[] {\r\n    if (!this.results) return [];\r\n    return this.results.items.filter(item => item.status === 'PENDING');\r\n  }\r\n\r\n  getNoHandlerTests(): any[] {\r\n    if (!this.results) return [];\r\n    return this.results.items.filter(item => item.status === 'NO_HANDLER');\r\n  }\r\n\r\n  logDetailedResults(): void {\r\n    if (!this.results) {\r\n      console.log('❌ No test results available. Run tests first.');\r\n      return;\r\n    }\r\n\r\n    console.log('\\n🔍 DETAILED TEST RESULTS:');\r\n    console.log('========================');\r\n\r\n    this.results.items.forEach((item, index) => {\r\n      const status = item.status === 'PASS' ? '✅' :\r\n                    item.status === 'FAIL' ? '❌' :\r\n                    item.status === 'PENDING' ? '⏳' : '❓';\r\n\r\n      console.log(`${index + 1}. ${status} ${item.cardName} (${item.effectKey || 'no key'})`);\r\n\r\n      if (item.status === 'FAIL' && item.details) {\r\n        console.log(`   Details:`, item.details);\r\n      }\r\n    });\r\n  }\r\n\r\n  exportResults(): void {\r\n    if (!this.results) {\r\n      console.log('❌ No test results available. Run tests first.');\r\n      return;\r\n    }\r\n\r\n    const data = JSON.stringify(this.results, null, 2);\r\n    const blob = new Blob([data], { type: 'application/json' });\r\n    const url = URL.createObjectURL(blob);\r\n\r\n    const a = document.createElement('a');\r\n    a.href = url;\r\n    a.download = `card_effects_test_results_${new Date().toISOString().split('T')[0]}.json`;\r\n    document.body.appendChild(a);\r\n    a.click();\r\n    document.body.removeChild(a);\r\n    URL.revokeObjectURL(url);\r\n\r\n    console.log('💾 Test results exported to JSON file');\r\n  }\r\n}\r\n\r\n// Browser global interface\r\ndeclare global {\r\n  interface Window {\r\n    __MILCH_TESTS__?: {\r\n      run: () => Promise<SuiteResult>;\r\n      results: () => SuiteResult | null;\r\n      failed: () => any[];\r\n      passed: () => any[];\r\n      pending: () => any[];\r\n      noHandler: () => any[];\r\n      details: () => void;\r\n      export: () => void;\r\n      runner: CardEffectsTestRunner;\r\n    };\r\n  }\r\n}\r\n\r\n// Initialize browser interface\r\nif (typeof window !== 'undefined') {\r\n  const runner = CardEffectsTestRunner.getInstance();\r\n\r\n  window.__MILCH_TESTS__ = {\r\n    run: () => runner.runTests(),\r\n    results: () => runner.getResults(),\r\n    failed: () => runner.getFailedTests(),\r\n    passed: () => runner.getPassedTests(),\r\n    pending: () => runner.getPendingTests(),\r\n    noHandler: () => runner.getNoHandlerTests(),\r\n    details: () => runner.logDetailedResults(),\r\n    export: () => runner.exportResults(),\r\n    runner\r\n  };\r\n\r\n  console.log('🧪 Card Effects Test Runner loaded. Use window.__MILCH_TESTS__.run() to start tests.');\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}