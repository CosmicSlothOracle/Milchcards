{"ast":null,"code":"/**\r\n * Einheitliches Targeting-System\r\n * Zentrale Funktionen für Zielauswahl in Karteneffekten\r\n */\n\n/**\r\n * Ermittelt die stärkste Regierungskarte eines Spielers\r\n * Sortierkriterium: influence absteigend, Tie-Break: UID absteigend (zuletzt gelegt)\r\n */\nexport function getStrongestGovernment(state, player) {\n  var _scored$;\n  const row = state.board[player].aussen.filter(c => c.kind === 'pol');\n  if (!row.length) return undefined;\n\n  // Nur aktive (nicht deaktivierte) Karten berücksichtigen\n  const activeCards = row.filter(c => !c.deactivated);\n  if (activeCards.length === 0) return undefined;\n\n  // Berechne tatsächlichen Einfluss (base + buffs - debuffs)\n  const scored = activeCards.map(c => ({\n    card: c,\n    influence: (c.influence || 0) + (c.tempBuffs || 0) - (c.tempDebuffs || 0),\n    uid: c.uid\n  }));\n\n  // Sortiere: Einfluss absteigend, dann UID absteigend\n  scored.sort((a, b) => {\n    if (b.influence !== a.influence) {\n      return b.influence - a.influence;\n    }\n    return b.uid - a.uid; // Höhere UID = zuletzt gelegt\n  });\n  return (_scored$ = scored[0]) === null || _scored$ === void 0 ? void 0 : _scored$.card;\n}\n\n/**\r\n * Ermittelt die UID der stärksten Regierungskarte\r\n * Wrapper für getStrongestGovernment, gibt nur die UID zurück\r\n */\nexport function getStrongestGovernmentUid(state, player) {\n  const card = getStrongestGovernment(state, player);\n  return card ? card.uid : null;\n}","map":{"version":3,"names":["getStrongestGovernment","state","player","_scored$","row","board","aussen","filter","c","kind","length","undefined","activeCards","deactivated","scored","map","card","influence","tempBuffs","tempDebuffs","uid","sort","a","b","getStrongestGovernmentUid"],"sources":["C:/Users/skank/Videos/Cards/Milchcards/src/utils/targets.ts"],"sourcesContent":["/**\r\n * Einheitliches Targeting-System\r\n * Zentrale Funktionen für Zielauswahl in Karteneffekten\r\n */\r\n\r\nimport { GameState, Player, Card, PoliticianCard } from '../types/game';\r\n\r\n/**\r\n * Ermittelt die stärkste Regierungskarte eines Spielers\r\n * Sortierkriterium: influence absteigend, Tie-Break: UID absteigend (zuletzt gelegt)\r\n */\r\nexport function getStrongestGovernment(state: GameState, player: Player): PoliticianCard | undefined {\r\n  const row = state.board[player].aussen.filter(c => c.kind === 'pol') as PoliticianCard[];\r\n  if (!row.length) return undefined;\r\n\r\n  // Nur aktive (nicht deaktivierte) Karten berücksichtigen\r\n  const activeCards = row.filter(c => !c.deactivated);\r\n  if (activeCards.length === 0) return undefined;\r\n\r\n  // Berechne tatsächlichen Einfluss (base + buffs - debuffs)\r\n  const scored = activeCards.map(c => ({\r\n    card: c,\r\n    influence: (c.influence || 0) + (c.tempBuffs || 0) - (c.tempDebuffs || 0),\r\n    uid: c.uid\r\n  }));\r\n\r\n  // Sortiere: Einfluss absteigend, dann UID absteigend\r\n  scored.sort((a, b) => {\r\n    if (b.influence !== a.influence) {\r\n      return b.influence - a.influence;\r\n    }\r\n    return b.uid - a.uid; // Höhere UID = zuletzt gelegt\r\n  });\r\n\r\n  return scored[0]?.card;\r\n}\r\n\r\n/**\r\n * Ermittelt die UID der stärksten Regierungskarte\r\n * Wrapper für getStrongestGovernment, gibt nur die UID zurück\r\n */\r\nexport function getStrongestGovernmentUid(state: GameState, player: Player): number | null {\r\n  const card = getStrongestGovernment(state, player);\r\n  return card ? card.uid : null;\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA,OAAO,SAASA,sBAAsBA,CAACC,KAAgB,EAAEC,MAAc,EAA8B;EAAA,IAAAC,QAAA;EACnG,MAAMC,GAAG,GAAGH,KAAK,CAACI,KAAK,CAACH,MAAM,CAAC,CAACI,MAAM,CAACC,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACC,IAAI,KAAK,KAAK,CAAqB;EACxF,IAAI,CAACL,GAAG,CAACM,MAAM,EAAE,OAAOC,SAAS;;EAEjC;EACA,MAAMC,WAAW,GAAGR,GAAG,CAACG,MAAM,CAACC,CAAC,IAAI,CAACA,CAAC,CAACK,WAAW,CAAC;EACnD,IAAID,WAAW,CAACF,MAAM,KAAK,CAAC,EAAE,OAAOC,SAAS;;EAE9C;EACA,MAAMG,MAAM,GAAGF,WAAW,CAACG,GAAG,CAACP,CAAC,KAAK;IACnCQ,IAAI,EAAER,CAAC;IACPS,SAAS,EAAE,CAACT,CAAC,CAACS,SAAS,IAAI,CAAC,KAAKT,CAAC,CAACU,SAAS,IAAI,CAAC,CAAC,IAAIV,CAAC,CAACW,WAAW,IAAI,CAAC,CAAC;IACzEC,GAAG,EAAEZ,CAAC,CAACY;EACT,CAAC,CAAC,CAAC;;EAEH;EACAN,MAAM,CAACO,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;IACpB,IAAIA,CAAC,CAACN,SAAS,KAAKK,CAAC,CAACL,SAAS,EAAE;MAC/B,OAAOM,CAAC,CAACN,SAAS,GAAGK,CAAC,CAACL,SAAS;IAClC;IACA,OAAOM,CAAC,CAACH,GAAG,GAAGE,CAAC,CAACF,GAAG,CAAC,CAAC;EACxB,CAAC,CAAC;EAEF,QAAAjB,QAAA,GAAOW,MAAM,CAAC,CAAC,CAAC,cAAAX,QAAA,uBAATA,QAAA,CAAWa,IAAI;AACxB;;AAEA;AACA;AACA;AACA;AACA,OAAO,SAASQ,yBAAyBA,CAACvB,KAAgB,EAAEC,MAAc,EAAiB;EACzF,MAAMc,IAAI,GAAGhB,sBAAsB,CAACC,KAAK,EAAEC,MAAM,CAAC;EAClD,OAAOc,IAAI,GAAGA,IAAI,CAACI,GAAG,GAAG,IAAI;AAC/B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}