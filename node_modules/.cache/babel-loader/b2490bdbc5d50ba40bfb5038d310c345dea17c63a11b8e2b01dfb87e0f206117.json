{"ast":null,"code":"// Row: government = aussen, public = innen, plus sofort lane for instant initiatives\nexport function createDefaultEffectFlags(){return{// Trap system\ntrapTriggered:false,trapProtection:false,// Special flags\nmarkZuckerbergUsed:false,opportunistActive:false,// New initiative activation flags\nzuckOnceAp:false,zuckSpent:false,aiWeiweiOnActivate:false,// Aura flags for initiative bonuses\nauraScience:0,auraHealth:0,auraMilitaryPenalty:0,initiativesLocked:false,doublePublicAura:false,apBonusInitiativeNext:0,apBonusInitiativeOnce:0};}// Effect Event model (used by utils/queue.ts)\n// EffectEvent moved to types/effects.ts\nexport function createEmptyBoardRow(){return{innen:[],aussen:[],sofort:[]};}","map":{"version":3,"names":["createDefaultEffectFlags","trapTriggered","trapProtection","markZuckerbergUsed","opportunistActive","zuckOnceAp","zuckSpent","aiWeiweiOnActivate","auraScience","auraHealth","auraMilitaryPenalty","initiativesLocked","doublePublicAura","apBonusInitiativeNext","apBonusInitiativeOnce","createEmptyBoardRow","innen","aussen","sofort"],"sources":["C:/Users/skank/Videos/Cards/Milchcards/src/types/game.ts"],"sourcesContent":["import type { UID } from './primitives';\nimport type { EffectEvent } from './effects';\n\nexport type Player = 1 | 2;\n\nexport type CardKind = 'pol' | 'spec';\n\nexport interface Card {\n  id: number;\n  key: string;\n  name: string;\n  kind: CardKind;\n  baseId: number;\n  uid: number;\n  // optional card-specific fields\n  deactivated?: boolean;  // runtime disabled status\n  protectedOnce?: boolean;// runtime shield flag (consumed once)\n  // New effectKey field for registry\n  effectKey?: string;     // Registry key for card effects\n}\n\nexport interface PoliticianCard extends Card {\n  kind: 'pol';\n  tag: string;\n  T: number;\n  BP: number;\n  influence: number;\n  effect?: string;\n  protected: boolean;\n  protectedUntil?: number | null;\n  tempDebuffs: number;\n  tempBuffs: number;\n  _activeUsed: boolean;\n  _pledgeDown?: { amount: number; round: number } | null;\n  _hypedRoundFlag?: boolean;\n}\n\nexport interface SpecialCard extends Card {\n  kind: 'spec';\n  type: string;\n  impl: string;\n  bp: number;\n  tag?: string;\n}\n\nexport interface BasePolitician {\n  id: number;\n  key: string;\n  name: string;\n  influence: number;\n  tag?: string;\n  T: number;\n  BP?: number;\n  effect?: string;\n}\n\nexport interface BaseSpecial {\n  id: number;\n  key: string;\n  name: string;\n  type: string;\n  speed?: string;\n  bp: number;\n  effect?: string;\n  tier: number;\n  impl: string;\n  tag?: string;\n  effectKey?: string;\n}\n\n// Row: government = aussen, public = innen, plus sofort lane for instant initiatives\nexport type BoardRow = {\n  innen: Card[];   // PUBLIC\n  aussen: Card[];  // GOVERNMENT\n  sofort: Card[];  // INSTANT (Sofort-Initiativen, warten auf Aktivierung)\n};\n\nexport type Board = {\n  1: BoardRow;\n  2: BoardRow;\n};\n\nexport type PermanentSlots = {\n  1: { government: Card | null; public: Card | null };\n  2: { government: Card | null; public: Card | null };\n};\n\nexport interface EffectFlags {\n  // Trap system flags\n  trapTriggered?: boolean;           // Set when a trap was triggered this turn\n  trapProtection?: boolean;          // Trap protection active for next card\n\n  // Mark Zuckerberg special flag\n  markZuckerbergUsed: boolean;       // Tracks if Mark Zuckerberg's once-per-turn effect was used\n\n  // New initiative activation flags\n  zuckOnceAp?: boolean;              // Mark Zuckerberg once-per-turn AP bonus\n  zuckSpent?: boolean;               // Tracks if Mark Zuckerberg AP was spent this turn\n  aiWeiweiOnActivate?: boolean;      // Ai Weiwei activation bonus flag\n\n  // Aura flags for initiative bonuses\n  auraScience?: number;              // Jennifer Doudna science bonus\n  auraHealth?: number;               // Anthony Fauci health bonus\n  auraMilitaryPenalty?: number;      // Noam Chomsky military penalty\n\n  // Legacy aura flags (for backward compatibility)\n  scienceInitiativeBonus?: boolean;  // Jennifer Doudna: +1 influence on instant initiatives\n  healthInitiativeBonus?: boolean;   // Anthony Fauci: +1 influence on instant initiatives\n  cultureInitiativeBonus?: boolean;  // Ai Weiwei: +1 card +1 AP on instant initiatives\n  militaryInitiativePenalty?: boolean; // Noam Chomsky: -1 influence on opponent instant initiatives\n\n  // NEW advanced initiative-related flags\n  initiativesLocked?: boolean;     // Opponent cannot play initiatives until end of turn\n  doublePublicAura?: boolean;      // Next Public aura effect is doubled\n\n  // AP bonus system for initiatives\n  apBonusInitiativeNext?: number;     // +AP for NEXT initiative this turn (consumed on trigger)\n  apBonusInitiativeOnce?: number;     // +AP ONCE per turn on first initiative (consumed on trigger)\n\n  // Opportunist system\n  opportunistActive?: boolean;       // Opportunist mirror effect active\n\n  // Legacy AP system flags (for backward compatibility)\n  nextGovPlus2?: boolean;             // Next government card gets +2 influence\n  diplomatInfluenceTransferUsed?: boolean; // Diplomat influence transfer used this turn\n  influenceTransferBlocked?: boolean; // Influence transfer is blocked\n  govRefundAvailable?: boolean;       // Government refund available\n  freeInitiativeAvailable?: boolean;  // Free initiative available\n  ngoInitiativeDiscount?: number;     // NGO initiative discount\n  initiativeDiscount?: number;        // Initiative discount (legacy)\n  initiativeRefund?: number;          // Initiative refund (legacy)\n}\n\nexport function createDefaultEffectFlags(): EffectFlags {\n  return {\n    // Trap system\n    trapTriggered: false,\n    trapProtection: false,\n\n    // Special flags\n    markZuckerbergUsed: false,\n    opportunistActive: false,\n\n    // New initiative activation flags\n    zuckOnceAp: false,\n    zuckSpent: false,\n    aiWeiweiOnActivate: false,\n\n    // Aura flags for initiative bonuses\n    auraScience: 0,\n    auraHealth: 0,\n    auraMilitaryPenalty: 0,\n    initiativesLocked: false,\n    doublePublicAura: false,\n    apBonusInitiativeNext: 0,\n    apBonusInitiativeOnce: 0,\n  };\n}\n\nexport interface GameState {\n  round: number;\n  current: Player;\n  passed: { 1: boolean; 2: boolean };\n  actionPoints: { 1: number; 2: number };\n  actionsUsed: { 1: number; 2: number };\n  decks: { 1: Card[]; 2: Card[] };\n  hands: { 1: Card[]; 2: Card[] };\n  traps: { 1: Card[]; 2: Card[] };\n  board: Board;\n  permanentSlots: PermanentSlots;\n  discard: Card[];\n  log: string[];\n  activeRefresh: { 1: number; 2: number };\n  roundsWon: { 1: number; 2: number };\n  aiEnabled?: { 1: boolean; 2: boolean };\n  gameWinner?: 1 | 2 | null;\n  blocked?: { initiatives?: boolean };\n  shields?: Set<UID>;\n  _effectQueue?: EffectEvent[];\n  effectFlags: {\n    1: EffectFlags;\n    2: EffectFlags;\n  };\n  effectQueue?: EffectQueue;\n  activeAbilities?: {\n    1: ActiveAbility[];\n    2: ActiveAbility[];\n  };\n  pendingAbilitySelect?: AbilitySelect;\n  isEndingTurn?: boolean;\n}\n\nexport interface BuilderState {\n  open: boolean;\n  deck: BuilderEntry[];\n}\n\nexport interface BuilderEntry {\n  kind: 'pol' | 'spec';\n  baseId: number;\n  count: number;\n}\n\nexport type BoardSide = {\n  innen: Card[];\n  aussen: Card[];\n  sofort: Card[];\n};\n\nexport interface UIZone {\n  x: number;\n  y: number;\n  w: number;\n  h: number;\n}\n\nexport interface ClickZone {\n  x: number;\n  y: number;\n  w: number;\n  h: number;\n  data: any;\n}\n\nexport interface FXState {\n  p1Activation: ActivationFX | null;\n  p2Activation: ActivationFX | null;\n}\n\nexport interface ActivationFX {\n  card: Card;\n  until: number;\n}\n\nexport interface SelectedState {\n  handIndex: number | null;\n}\n\nexport interface AbilitySelect {\n  type: 'hardliner' | 'putin_double_intervention' | 'oligarch_influence' | 'diplomat_transfer';\n  actorCard: PoliticianCard;\n  actorPlayer: 1 | 2;\n  lane?: 'innen' | 'aussen';\n  targetCard?: PoliticianCard;\n  amount?: number;\n  advanceAfterResolve?: boolean;\n  consumeRefresh?: boolean;\n}\n\nexport interface ActiveAbility {\n  id: string;\n  name: string;\n  description: string;\n  cardName: string;\n  cooldown: number;\n  usedThisRound: boolean;\n  type: AbilitySelect['type'];\n  cost?: number;\n  requirements?: string[];\n}\n\nexport interface EffectQueueItem {\n  id: string;\n  type: 'intervention' | 'sofort' | 'passiv' | 'aktiv';\n  priority: number;\n  source: Card;\n  target?: Card;\n  effect: () => void;\n  description: string;\n  player: Player;\n  round: number;\n}\n\nexport interface EffectQueue {\n  items: EffectQueueItem[];\n  processing: boolean;\n  nextId: number;\n}\n\nexport type Lane = 'innen' | 'aussen';\n\n// Effect Event model (used by utils/queue.ts)\n// EffectEvent moved to types/effects.ts\n\n\nexport function createEmptyBoardRow(): BoardRow {\n  return { innen: [], aussen: [], sofort: [] };\n}"],"mappings":"AAsEA;AA+DA,MAAO,SAAS,CAAAA,wBAAwBA,CAAA,CAAgB,CACtD,MAAO,CACL;AACAC,aAAa,CAAE,KAAK,CACpBC,cAAc,CAAE,KAAK,CAErB;AACAC,kBAAkB,CAAE,KAAK,CACzBC,iBAAiB,CAAE,KAAK,CAExB;AACAC,UAAU,CAAE,KAAK,CACjBC,SAAS,CAAE,KAAK,CAChBC,kBAAkB,CAAE,KAAK,CAEzB;AACAC,WAAW,CAAE,CAAC,CACdC,UAAU,CAAE,CAAC,CACbC,mBAAmB,CAAE,CAAC,CACtBC,iBAAiB,CAAE,KAAK,CACxBC,gBAAgB,CAAE,KAAK,CACvBC,qBAAqB,CAAE,CAAC,CACxBC,qBAAqB,CAAE,CACzB,CAAC,CACH,CA4HA;AACA;AAGA,MAAO,SAAS,CAAAC,mBAAmBA,CAAA,CAAa,CAC9C,MAAO,CAAEC,KAAK,CAAE,EAAE,CAAEC,MAAM,CAAE,EAAE,CAAEC,MAAM,CAAE,EAAG,CAAC,CAC9C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}