{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useCallback } from 'react';\nimport { createDefaultEffectFlags } from '../types/game';\nimport { buildDeckFromEntries, sumGovernmentInfluenceWithAuras } from '../utils/gameUtils';\nimport { PRESET_DECKS } from '../data/gameData';\nimport { getCardActionPointCost, applyApRefundsAfterPlay, getNetApCost, canPlayCard } from '../utils/ap';\nimport { triggerCardEffects } from '../effects/cards';\nimport { ensureTestBaselineAP } from '../utils/testCompat';\nimport { resolveQueue } from '../utils/queue';\nimport { applyStartOfTurnFlags } from '../utils/startOfTurnHooks';\nimport { registerTrap, applyTrapsOnCardPlayed } from '../utils/traps';\nimport { recomputeAuraFlags } from '../state/effects';\nimport { emptyBoard } from '../state/board';\n// Helper function for getting the other player\nconst other = p => p === 1 ? 2 : 1;\n\n// Hilfsfunktion: stellt sicher, dass effectFlags vorhanden sind\nconst ensureFlags = (s, p) => {\n  if (!s.effectFlags) {\n    s.effectFlags = {\n      1: createDefaultEffectFlags(),\n      2: createDefaultEffectFlags()\n    };\n  } else {\n    s.effectFlags[p] = {\n      ...createDefaultEffectFlags(),\n      ...s.effectFlags[p]\n    };\n  }\n};\n\n// Lane-Heuristik wie in playCard\nconst pickLane = c => {\n  const tag = c.tag;\n  if (c.kind === 'pol' && (tag === 'Staatsoberhaupt' || tag === 'Regierungschef' || tag === 'Diplomat')) return 'aussen';\n  return 'innen';\n};\nconst isCardPlayableNow = (state, player, card) => {\n  if (card.deactivated) return false;\n  if (card.kind === 'pol') {\n    const lane = pickLane(card);\n    return state.board[player][lane].length < 5;\n  }\n  if (card.kind === 'spec') {\n    const t = String(card.type || '').toLowerCase();\n    if (t === 'öffentlichkeitskarte' || t === 'oeffentlichkeitskarte' || t === 'public') {\n      return state.board[player].innen.length < 5;\n    }\n    if (t === 'dauerhaft-initiative') {\n      const slot = 'government'; // wie bei dir „simplified\"\n      return !state.permanentSlots[player][slot];\n    }\n    // sonst: Fallen/Interventionen – aktuell immer erlaubt\n    return true;\n  }\n  return false;\n};\nexport const hasPlayableZeroCost = (state, player) => {\n  for (const c of state.hands[player]) {\n    const {\n      cost\n    } = getCardActionPointCost(state, player, c);\n    if (cost === 0 && isCardPlayableNow(state, player, c)) return true;\n  }\n  return false;\n};\n\n// Helper function to apply auras for a player (instant updates for Joschka Fischer + NGO synergy)\nfunction applyAurasForPlayer(state, player, log) {\n  const board = state.board[player];\n  const hasNgo = board.innen.some(c => c.kind === 'spec' && c.type === 'Öffentlichkeitskarte' && c.tag === 'NGO' && !c.deactivated);\n  const newAussen = board.aussen.map(card => {\n    if (card.kind !== 'pol') return card;\n    const pol = {\n      ...card\n    };\n    if (pol.baseInfluence == null) pol.baseInfluence = pol.influence;\n    const prev = pol.influence;\n    let bonus = 0;\n    if (!pol.deactivated && pol.name === 'Joschka Fischer' && pol.effect === 'ngo_boost' && hasNgo) {\n      bonus += 1;\n    }\n    pol.influence = pol.baseInfluence + bonus;\n    if (log && pol.influence > prev) log(`PASSIV: ${pol.name} +${pol.influence - prev} I (jetzt ${pol.influence}).`);\n    return pol;\n  });\n  state.board = {\n    ...state.board,\n    [player]: {\n      ...state.board[player],\n      aussen: newAussen\n    }\n  };\n}\n\n// Helper function to check if round should end\nfunction checkRoundEnd(gameState) {\n  // Round ends if both players have passed\n  const result = gameState.passed[1] && gameState.passed[2];\n  console.log(`🔧 DEBUG: checkRoundEnd - P1 passed: ${gameState.passed[1]}, P2 passed: ${gameState.passed[2]}, result: ${result}`);\n  return result;\n}\n\n// Helper function to draw cards from deck\nfunction drawCardsFromDeck(gameState, player, count) {\n  const deck = [...gameState.decks[player]];\n  const drawnCards = deck.splice(0, Math.min(count, deck.length));\n  return drawnCards;\n}\n\n// Helper function to really end a turn (extracted from nextTurn logic)\nfunction reallyEndTurn(gameState, log) {\n  const current = gameState.current;\n\n  // Flag zurücksetzen - Zug-Ende wird jetzt wirklich durchgeführt\n  gameState.isEndingTurn = false;\n\n  // ✅ Karte nachziehen am Ende eines Zugs (nur wenn NICHT \"pass\")\n  if (!gameState.passed[current]) {\n    const drawnCard = gameState.decks[current].shift();\n    if (drawnCard) {\n      gameState.hands[current].push(drawnCard);\n      log(`🔥 Zug-Ende: +1 Karte gezogen (${drawnCard.name})`);\n    }\n  } else {\n    log(`⏭️ P${current} hat gepasst – kein Nachziehen.`);\n  }\n\n  // Check if round should end\n  const shouldEndRound = checkRoundEnd(gameState);\n  if (shouldEndRound) {\n    log(`🏁 Runde ${gameState.round} wird beendet (Zug-Ende).`);\n    return resolveRound(gameState, log);\n  }\n\n  // Spielerwechsel + AP/Actions reset\n  const newCurrent = current === 1 ? 2 : 1;\n  gameState.current = newCurrent;\n  gameState.actionPoints = {\n    ...gameState.actionPoints,\n    [newCurrent]: 2\n  };\n  gameState.actionsUsed = {\n    ...gameState.actionsUsed,\n    [newCurrent]: 0\n  };\n  gameState.passed = {\n    ...gameState.passed,\n    [newCurrent]: false\n  };\n\n  // Apply new start-of-turn hooks\n  applyStartOfTurnFlags(gameState, newCurrent, log);\n\n  // 🔥 CLUSTER 3: Auren-Flags beim Zugstart neu berechnen\n  recomputeAuraFlags(gameState);\n\n  // Reset turn-bezogener Flag-Nutzungen (handled in applyStartOfTurnFlags)\n\n  log(`🔄 Zug-Ende: Spieler ${newCurrent} ist am Zug (2 AP verfügbar)`);\n  return gameState;\n}\n\n// Helper function to resolve round and start new one\nfunction resolveRound(gameState, log) {\n  // Calculate influence for both players\n  const p1Influence = sumGovernmentInfluenceWithAuras(gameState, 1);\n  const p2Influence = sumGovernmentInfluenceWithAuras(gameState, 2);\n  log(`📊 Rundenauswertung: P1 ${p1Influence} Einfluss vs P2 ${p2Influence} Einfluss`);\n\n  // Determine winner\n  let roundWinner;\n  if (p1Influence > p2Influence) {\n    roundWinner = 1;\n    log(`🏆 Spieler 1 gewinnt die Runde! (${p1Influence} > ${p2Influence})`);\n  } else if (p2Influence > p1Influence) {\n    roundWinner = 2;\n    log(`🏆 Spieler 2 gewinnt die Runde! (${p2Influence} > ${p1Influence})`);\n  } else {\n    // Tie - current player wins\n    roundWinner = gameState.current;\n    log(`🤝 Unentschieden! Spieler ${roundWinner} gewinnt als aktiver Spieler.`);\n  }\n\n  // Collect all cards to move to discard\n  const cardsToDiscard = [...gameState.board[1].innen, ...gameState.board[1].aussen, ...gameState.board[2].innen, ...gameState.board[2].aussen, ...(gameState.permanentSlots[1].government ? [gameState.permanentSlots[1].government] : []), ...(gameState.permanentSlots[1].public ? [gameState.permanentSlots[1].public] : []), ...(gameState.permanentSlots[2].government ? [gameState.permanentSlots[2].government] : []), ...(gameState.permanentSlots[2].public ? [gameState.permanentSlots[2].public] : []), ...gameState.board[1].sofort, ...gameState.board[2].sofort];\n\n  // Draw 5 new cards for each player\n  const newP1Hand = drawCardsFromDeck(gameState, 1, 5);\n  const newP2Hand = drawCardsFromDeck(gameState, 2, 5);\n\n  // Calculate new rounds won\n  const newRoundsWon = {\n    ...gameState.roundsWon,\n    [roundWinner]: gameState.roundsWon[roundWinner] + 1\n  };\n\n  // Check if game should end (Best of 3: first to 2 wins)\n  const p1Wins = newRoundsWon[1];\n  const p2Wins = newRoundsWon[2];\n  if (p1Wins >= 2 || p2Wins >= 2) {\n    const gameWinner = p1Wins >= 2 ? 1 : 2;\n    log(`🏆🎉 SPIEL BEENDET! Spieler ${gameWinner} gewinnt das Match! (${p1Wins}-${p2Wins})`);\n    log(`🔥 Gesamtergebnis: Player ${gameWinner} ist der Sieger!`);\n\n    // Return final state with game winner\n    return {\n      ...gameState,\n      roundsWon: newRoundsWon,\n      gameWinner,\n      // Keep current board state for final display\n      passed: {\n        1: true,\n        2: true\n      } // Both passed to indicate game end\n    };\n  }\n\n  // Create new state for next round\n  const newState = {\n    ...gameState,\n    round: gameState.round + 1,\n    current: roundWinner,\n    // Winner starts next round\n    passed: {\n      1: false,\n      2: false\n    },\n    // Reset pass status\n    actionPoints: {\n      1: 2,\n      2: 2\n    },\n    // Reset AP\n    actionsUsed: {\n      1: 0,\n      2: 0\n    },\n    // Reset actions\n    roundsWon: newRoundsWon,\n    effectFlags: {\n      1: createDefaultEffectFlags(),\n      2: createDefaultEffectFlags()\n    },\n    // Clear all board positions\n    board: emptyBoard(),\n    // Clear permanent slots\n    permanentSlots: {\n      1: {\n        government: null,\n        public: null\n      },\n      2: {\n        government: null,\n        public: null\n      }\n    },\n    // instantSlot wird nicht mehr verwendet - Sofort-Initiativen gehen in board[player].sofort\n    // New hands with 5 cards each\n    hands: {\n      1: newP1Hand,\n      2: newP2Hand\n    },\n    // Update decks (cards were removed during drawing)\n    decks: {\n      1: gameState.decks[1].slice(newP1Hand.length),\n      2: gameState.decks[2].slice(newP2Hand.length)\n    },\n    // Update discard pile\n    discard: [...gameState.discard, ...cardsToDiscard]\n  };\n  log(`🆕 Runde ${newState.round} startet! Spieler ${roundWinner} beginnt. (Rundenstand: P1 ${newState.roundsWon[1]} - P2 ${newState.roundsWon[2]})`);\n  log(`🃏 Beide Spieler erhalten 5 neue Handkarten.`);\n  return newState;\n}\nexport function useGameActions(gameState, setGameState, log, afterQueueResolved) {\n  _s();\n  const startMatchWithDecks = useCallback((p1DeckEntries, p2DeckEntries) => {\n    const p1Cards = buildDeckFromEntries(p1DeckEntries);\n    const p2Cards = buildDeckFromEntries(p2DeckEntries);\n\n    // Debug: Log deck composition with detailed tag analysis\n    const p1NgoCarten = p1Cards.filter(c => c.tag === 'NGO');\n    const p1PlatformCards = p1Cards.filter(c => c.tag === 'Plattform');\n    const p1JoschaCards = p1Cards.filter(c => c.effect === 'ngo_boost');\n    const p1PublicCards = p1Cards.filter(c => c.kind === 'spec' && c.type === 'Öffentlichkeitskarte');\n    log(`🔍 DECK DEBUG P1: ${p1Cards.length} Karten total`);\n    log(`🧪 P1 Public Cards: ${p1PublicCards.map(c => `${c.name}${c.tag ? `[${c.tag}]` : ''}`).join(', ')}`);\n    log(`🌱 P1 NGO-Karten: ${p1NgoCarten.length > 0 ? p1NgoCarten.map(c => c.name).join(', ') : 'Keine'}`);\n    log(`💻 P1 Plattform-Karten: ${p1PlatformCards.length > 0 ? p1PlatformCards.map(c => c.name).join(', ') : 'Keine'}`);\n    log(`🎯 JOSCHKA FISCHER: ${p1JoschaCards.length > 0 ? '✅ IM DECK' : '❌ NICHT IM DECK'}`);\n    const d1 = [...p1Cards];\n    const d2 = [...p2Cards];\n    const h1 = d1.splice(0, Math.min(5, d1.length));\n    const h2 = d2.splice(0, Math.min(5, d2.length));\n    setGameState({\n      ...gameState,\n      round: 1,\n      current: 1,\n      passed: {\n        1: false,\n        2: false\n      },\n      decks: {\n        1: d1,\n        2: d2\n      },\n      hands: {\n        1: h1,\n        2: h2\n      },\n      board: {\n        1: {\n          innen: [],\n          aussen: [],\n          sofort: []\n        },\n        2: {\n          innen: [],\n          aussen: [],\n          sofort: []\n        }\n      },\n      traps: {\n        1: [],\n        2: []\n      },\n      permanentSlots: {\n        1: {\n          government: null,\n          public: null\n        },\n        2: {\n          government: null,\n          public: null\n        }\n      },\n      // instantSlot wird nicht mehr verwendet - Sofort-Initiativen gehen in board[player].sofort\n      discard: [],\n      shields: new Set(),\n      // Set<UID>\n      effectFlags: {\n        1: createDefaultEffectFlags(),\n        2: createDefaultEffectFlags()\n      },\n      log: [`Match gestartet. P1 und P2 erhalten je ${h1.length}/${h2.length} Startkarten.`, `🔍 DECK DEBUG P1: ${p1Cards.length} Karten total`, `🧪 P1 Public Cards: ${p1PublicCards.map(c => `${c.name}${c.tag ? `[${c.tag}]` : ''}`).join(', ')}`, `🌱 P1 NGO-Karten: ${p1NgoCarten.length > 0 ? p1NgoCarten.map(c => c.name).join(', ') : 'Keine'}`, `💻 P1 Plattform-Karten: ${p1PlatformCards.length > 0 ? p1PlatformCards.map(c => c.name).join(', ') : 'Keine'}`, `🎯 JOSCHKA FISCHER: ${p1JoschaCards.length > 0 ? '✅ IM DECK' : '❌ NICHT IM DECK'}`, `📋 INITIAL BOARD P1: Regierung=[] | Öffentlichkeit=[]`, `📋 INITIAL BOARD P2: Regierung=[] | Öffentlichkeit=[]`, `🏠 PERMANENT SLOTS: Alle leer`],\n      activeRefresh: {\n        1: 0,\n        2: 0\n      }\n    });\n  }, [gameState, setGameState, log]);\n  const startMatchVsAI = useCallback((p1DeckEntries, presetKey = 'AUTORITAERER_REALIST') => {\n    const p2DeckEntries = PRESET_DECKS[presetKey];\n    startMatchWithDecks(p1DeckEntries, p2DeckEntries);\n  }, [startMatchWithDecks]);\n  const playCard = useCallback((player, handIndex, lane) => {\n    setGameState(prev => {\n      var _prev$actionsUsed$pla, _type;\n      // Test-only baseline fix – ensures AP=5 at game start inside test runner\n      ensureTestBaselineAP(prev);\n\n      // Validate input parameters\n      if (prev.current !== player) {\n        log(`❌ ERROR: Not player turn - Current: ${prev.current}, Attempted: ${player}`);\n        return prev;\n      }\n      const hand = prev.hands[player];\n      if (handIndex < 0 || handIndex >= hand.length) {\n        log(`❌ ERROR: Invalid hand index - Index: ${handIndex}, Hand length: ${hand.length}`);\n        return prev;\n      }\n\n      // Debug: Log current hand contents with detailed tag info\n      log(`🔍 HAND DEBUG P${player}: ${hand.map((c, i) => `${i}:${c.name}${c.tag ? `[${c.tag}]` : ''}`).join(', ')}`);\n      const ngoCards = hand.filter(c => c.tag === 'NGO');\n      const platformCards = hand.filter(c => c.tag === 'Plattform');\n      if (ngoCards.length > 0) {\n        log(`🌱 NGO-Karten in Hand P${player}: ${ngoCards.map(c => c.name).join(', ')}`);\n      }\n      if (platformCards.length > 0) {\n        log(`💻 Plattform-Karten in Hand P${player}: ${platformCards.map(c => c.name).join(', ')}`);\n      }\n      const selectedCard = hand[handIndex];\n      if (!canPlayCard(prev, player, selectedCard)) {\n        log('🚫 Kann Karte nicht spielen (Aktionslimit & nicht 0-AP).');\n        return prev;\n      }\n      const {\n        cost,\n        refund,\n        net\n      } = getNetApCost(prev, player, selectedCard);\n      const prevAp = prev.actionPoints[player];\n      const prevAct = (_prev$actionsUsed$pla = prev.actionsUsed[player]) !== null && _prev$actionsUsed$pla !== void 0 ? _prev$actionsUsed$pla : 0;\n      const newState = {\n        ...prev\n      };\n\n      // AP abbuchen & refund gutschreiben\n      newState.actionPoints[player] = Math.max(0, newState.actionPoints[player] - cost + refund);\n\n      // Action-Zähler: nur wenn net > 0\n      if (net > 0) {\n        newState.actionsUsed[player] += 1;\n        log(`💳 Kosten verbucht: AP ${prevAp}→${newState.actionPoints[player]} | Aktionen ${prevAct}→${newState.actionsUsed[player]}`);\n      } else {\n        log(`🆓 Netto-0-Zug: −${cost} AP (+${refund} Refund) → keine Aktion verbraucht.`);\n      }\n\n      // Flags KONSUMIEREN (einheitlich, NUR HIER!)\n      ensureFlags(newState, player);\n      const ef = newState.effectFlags[player];\n\n      // Regierung: Refund einmalig pro Zug\n      if (selectedCard.kind === 'pol' && ef.govRefundAvailable) {\n        ef.govRefundAvailable = false;\n      }\n\n      // Initiative: pro Karte je 1 Refund & 1 Discount abbauen, falls vorhanden\n      const isInstant = selectedCard.kind === 'spec' && /Sofort-?Initiative/i.test((_type = selectedCard.type) !== null && _type !== void 0 ? _type : '');\n      if (isInstant) {\n        if (ef.initiativeRefund > 0) ef.initiativeRefund -= 1;\n        if (ef.initiativeDiscount > 0) ef.initiativeDiscount -= 1;\n      }\n\n      // Remove card from hand\n      const newHand = [...newState.hands[player]];\n      const [playedCard] = newHand.splice(handIndex, 1);\n      newState.hands = {\n        ...newState.hands,\n        [player]: newHand\n      };\n\n      // 🔧 CLUSTER 3 DEBUG: Zeige jede gespielte Karte\n      log(`🔧 CLUSTER 3 GLOBAL DEBUG: P${player} spielt ${playedCard.name} (${playedCard.kind}) - Type: ${playedCard.type || 'KEIN TYPE'}`);\n\n      // 🔧 CLUSTER 3 DEBUG: Zeige aktuelles Board\n      const currentBoard = newState.board[player];\n      const publicCardsOnBoard = currentBoard.innen.filter(card => card.kind === 'spec');\n      log(`🔧 CLUSTER 3 GLOBAL DEBUG: Öffentlichkeitskarten auf dem Feld: ${publicCardsOnBoard.map(c => c.name).join(', ')}`);\n\n      // Jennifer Doudna check removed - not needed for current game logic\n\n      // Handle different card types\n      if (playedCard.kind === 'pol') {\n        const polCard = playedCard;\n        const targetLane = lane || (polCard.tag === 'Staatsoberhaupt' || polCard.tag === 'Regierungschef' || polCard.tag === 'Diplomat' ? 'aussen' : 'innen');\n        if (newState.board[player][targetLane].length >= 5) {\n          log(`❌ ERROR: Lane full - Lane: ${targetLane}, Current: ${newState.board[player][targetLane].length}/5`);\n          return prev;\n        }\n\n        // Add to board (immutable clone to avoid accidental double references)\n        const laneArray = [...newState.board[player][targetLane], playedCard];\n        const playerBoardCloned = {\n          ...newState.board[player],\n          [targetLane]: laneArray\n        };\n        newState.board = {\n          ...newState.board,\n          [player]: playerBoardCloned\n        };\n        log(`🃏 Player ${player}: ${playedCard.name} gespielt in ${targetLane === 'aussen' ? 'Regierung' : 'Öffentlichkeit'}`);\n\n        // 3) Nachdem die Karte gelegt wurde: gegnerische Traps prüfen\n        applyTrapsOnCardPlayed(newState, player, playedCard, event => {\n          if (!newState._effectQueue) newState._effectQueue = [];\n          newState._effectQueue.push(event);\n        }, log);\n\n        // 👉 Erst JETZT Auren anwenden (damit +2 Basis erhalten bleibt)\n        applyAurasForPlayer(newState, player, log);\n\n        // 6) Karteneffekte enqueuen + Queue auflösen\n        triggerCardEffects(newState, player, playedCard);\n        // Queue needs array of events\n        if (newState._queue && newState._queue.length > 0) {\n          resolveQueue(newState, newState._queue);\n          newState._queue = [];\n          // Nach Queue-Auflösung: Hand-Arrays immutabel neu zuweisen\n          afterQueueResolved();\n        }\n\n        // Check for trap triggers\n        applyTrapsOnCardPlayed(newState, player, playedCard, e => (newState._effectQueue ??= []).push(e), m => (newState._effectQueue ??= []).push({\n          type: 'LOG',\n          msg: m\n        }));\n\n        // 🔥 ROMAN ABRAMOVICH EFFEKT: Wenn Regierungskarte mit Einfluss ≤5 gespielt wird\n        if (playedCard.kind === 'pol' && playedCard.influence <= 5) {\n          const opponent = player === 1 ? 2 : 1;\n          const opponentBoard = newState.board[opponent];\n          const romanAbramovich = opponentBoard.innen.find(card => card.kind === 'spec' && card.name === 'Roman Abramovich');\n          if (romanAbramovich) {\n            // Ziehe eine Karte für den Gegner\n            if (newState.decks[opponent].length > 0) {\n              const drawnCard = newState.decks[opponent].shift();\n              if (drawnCard) {\n                newState.hands[opponent].push(drawnCard);\n                log(`🔥 ROMAN ABRAMOVICH EFFEKT: P${opponent} zieht 1 Karte (${drawnCard.name}) - Regierungskarte mit Einfluss ≤5 gespielt`);\n              }\n            }\n          }\n        }\n\n        // 🔍 BOARD DEBUG: Zeige aktuelles Board nach dem Spielen\n        const currentBoard = newState.board[player];\n        const regierungKarten = currentBoard.aussen.map(c => `${c.name}[${c.kind === 'pol' ? c.influence + 'I' : 'S'}]`);\n        const öffentlichkeitKarten = currentBoard.innen.map(c => `${c.name}[${c.kind === 'spec' ? c.tag || 'S' : 'P'}]`);\n        log(`📋 P${player} BOARD: Regierung=[${regierungKarten.join(', ')}] | Öffentlichkeit=[${öffentlichkeitKarten.join(', ')}]`);\n\n        // 🔥 JOSCHKA FISCHER NGO-EFFEKT: Jetzt als kontinuierlicher Aura-Effekt in sumRowWithAuras implementiert\n        log(`🔍 DEBUG: Karte gespielt - Name: ${playedCard.name}, Tag: ${playedCard.tag || 'Kein Tag'}, Lane: ${targetLane}, Kind: ${playedCard.kind}`);\n        if (playedCard.tag === 'NGO') {\n          log(`🔍 NGO-Karte gespielt: ${playedCard.name} [NGO] - Kontinuierliche Aura-Effekte werden bei Rundenauswertung berechnet`);\n\n          // 🎯 SOFORTIGE SYNERGIE-PRÜFUNG: Joschka Fischer + NGO\n          const joschaFischer = currentBoard.aussen.find(card => card.kind === 'pol' && card.effect === 'ngo_boost');\n          if (joschaFischer) {\n            log(`🔥🔥🔥 SYNERGIE AKTIVIERT! 🔥🔥🔥 Joschka Fischer + ${playedCard.name}[NGO] → +1 Einfluss bei Rundenauswertung`);\n          }\n        }\n      } else if (playedCard.kind === 'spec') {\n        var _type2, _type3;\n        const specCard = playedCard;\n        const typeStr = String(specCard.type || '').toLowerCase();\n        const isInitiative = /initiative/.test(typeStr); // matcht \"Initiative\", \"Sofort-Initiative\", etc.\n\n        // 1) Falls es eine \"Systemrelevant\" ist (sofortiger Buff auf letzte eigene Regierungskarte)\n        if (playedCard.kind === 'spec' && (_type2 = playedCard.type) !== null && _type2 !== void 0 && _type2.toLowerCase().includes('systemrelevant')) {\n          const ownBoard = newState.board[player];\n          const candidates = [...ownBoard.aussen, ...ownBoard.innen].filter(c => c.kind === 'pol');\n          const target = candidates[candidates.length - 1]; // letzte eigene Regierungskarte\n          if (target) {\n            target.protected = true;\n            log(`🛡️ ${target.name} erhält einmaligen Schutz.`);\n          } else {\n            log('🛈 Systemrelevant: Keine eigene Regierungskarte im Spiel – Effekt verpufft.');\n          }\n          // danach die Spezialkarte normal entsorgen\n          newState.discard.push(playedCard);\n          return newState;\n        }\n\n        // 1) Dauerhaft-Initiative (Ongoing)\n        if (typeStr.includes('dauerhaft')) {\n          const slotType = 'government'; // ggf. später per specCard.slot dynamisch\n          if (!newState.permanentSlots[player][slotType]) {\n            newState.permanentSlots[player][slotType] = playedCard;\n            log(`P${player} spielt ${playedCard.name} als Dauerhafte Initiative`);\n          } else {\n            var _newState$permanentSl;\n            log(`⚠️ WARN: Slot occupied - Slot ${slotType} already has ${(_newState$permanentSl = newState.permanentSlots[player][slotType]) === null || _newState$permanentSl === void 0 ? void 0 : _newState$permanentSl.name}`);\n          }\n\n          // 6) Karteneffekte enqueuen + Queue auflösen\n          triggerCardEffects(newState, player, playedCard);\n          // Queue needs array of events\n          if (newState._queue && newState._queue.length > 0) {\n            resolveQueue(newState, newState._queue);\n            newState._queue = [];\n            // Nach Queue-Auflösung: Hand-Arrays immutabel neu zuweisen\n            afterQueueResolved === null || afterQueueResolved === void 0 ? void 0 : afterQueueResolved();\n          }\n\n          // Check for trap triggers\n          applyTrapsOnCardPlayed(newState, player, playedCard, e => (newState._effectQueue ??= []).push(e), m => (newState._effectQueue ??= []).push({\n            type: 'LOG',\n            msg: m\n          }));\n          return newState;\n        }\n\n        // 2) Sofort-/Sofort-Initiativen (Instant)\n        if (isInitiative) {\n          var _newState$effectFlags;\n          if (!specCard.effectKey) {\n            log(`❌ Initiative ohne effectKey: ${specCard.name}`);\n          } else {\n            log(`🧩 INIT: ${specCard.name} [${String(specCard.effectKey)}] gespielt`);\n          }\n\n          // 🔧 NEU: Sofort-Initiativen werden in das sofort Array gelegt statt sofort aktiviert\n          if (typeStr.includes('sofort')) {\n            // Prüfe ob bereits eine Sofort-Initiative im Slot liegt\n            if (newState.board[player].sofort.length > 0) {\n              var _newState$board$playe;\n              log(`❌ ERROR: Sofort-Initiative-Slot bereits besetzt - ${(_newState$board$playe = newState.board[player].sofort[0]) === null || _newState$board$playe === void 0 ? void 0 : _newState$board$playe.name} muss erst aktiviert werden`);\n              // Karte zurück in die Hand\n              newState.hands[player] = [...newState.hands[player], playedCard];\n              // AP zurückgeben\n              newState.actionPoints[player] += net;\n              // Aktion rückgängig machen\n              if (net > 0) {\n                newState.actionsUsed[player] = Math.max(0, newState.actionsUsed[player] - 1);\n              }\n              return newState;\n            }\n\n            // Sofort-Initiative in das sofort Array legen\n            newState.board[player].sofort = [playedCard];\n            log(`🎯 P${player} legt ${playedCard.name} in Sofort-Initiative-Slot (kann später aktiviert werden)`);\n\n            // Sofort-Initiativen: auf Board.sofort legen (nicht direkt entsorgen)\n            if (!newState._queue) newState._queue = [];\n            newState._queue.push({\n              type: 'LOG',\n              msg: `🔔 Sofort-Initiative bereit: ${playedCard.name} (zum Aktivieren anklicken oder Taste 'A')`\n            });\n            return newState;\n          }\n\n          // Dauerhaft-Initiativen werden weiterhin sofort aktiviert\n          // Initiative in den Ablagestapel\n          newState.discard = [...newState.discard, playedCard];\n          log(`P${player} spielt Initiative: ${playedCard.name}`);\n\n          // 6) Karteneffekte enqueuen + Queue auflösen\n          triggerCardEffects(newState, player, playedCard);\n          // Queue needs array of events\n          if (newState._queue && newState._queue.length > 0) {\n            resolveQueue(newState, newState._queue);\n            newState._queue = [];\n            // Nach Queue-Auflösung: Hand-Arrays immutabel neu zuweisen\n            afterQueueResolved === null || afterQueueResolved === void 0 ? void 0 : afterQueueResolved();\n          }\n\n          // Check for trap triggers\n          applyTrapsOnCardPlayed(newState, player, playedCard, e => (newState._effectQueue ??= []).push(e), m => (newState._effectQueue ??= []).push({\n            type: 'LOG',\n            msg: m\n          }));\n\n          // 🔥 CLUSTER 3: Auren-Flags neu berechnen (nach Kartenspielen)\n          recomputeAuraFlags(newState);\n\n          // 🔥 CLUSTER 3: Ai Weiwei Bonus wird bei Aktivierung angewendet (nicht beim Spielen)\n\n          // 🔥 PASSIVE EFFEKTE NACH INITIATIVE: Mark Zuckerberg & Sam Altman\n\n          // Mark Zuckerberg: \"Nach einer Initiative: +1 Aktionspunkt zurück (einmal pro Runde)\"\n          const markZuckerberg = newState.board[player].innen.find(card => card.kind === 'spec' && card.name === 'Mark Zuckerberg');\n          if (markZuckerberg && !((_newState$effectFlags = newState.effectFlags[player]) !== null && _newState$effectFlags !== void 0 && _newState$effectFlags.markZuckerbergUsed)) {\n            newState.actionPoints[player] += 1;\n            newState.effectFlags[player] = {\n              ...newState.effectFlags[player],\n              markZuckerbergUsed: true\n            };\n            log(`🔥 MARK ZUCKERBERG EFFEKT: +1 AP zurück nach Initiative (${newState.actionPoints[player] - 1} → ${newState.actionPoints[player]})`);\n          }\n\n          // Sam Altman: \"Bei einer KI-bezogenen Initiative: ziehe 1 Karte + 1 Aktionspunkt zurück\"\n          const samAltman = newState.board[player].innen.find(card => card.kind === 'spec' && card.name === 'Sam Altman');\n          if (samAltman && playedCard.tag === 'Intelligenz') {\n            // Ziehe 1 Karte\n            if (newState.decks[player].length > 0) {\n              const drawnCard = newState.decks[player].shift();\n              if (drawnCard) {\n                newState.hands[player].push(drawnCard);\n                log(`🔥 SAM ALTMAN EFFEKT: +1 Karte gezogen (${drawnCard.name}) - KI-Initiative`);\n              }\n            }\n            // +1 AP zurück\n            newState.actionPoints[player] += 1;\n            log(`🔥 SAM ALTMAN EFFEKT: +1 AP zurück (${newState.actionPoints[player] - 1} → ${newState.actionPoints[player]}) - KI-Initiative`);\n          }\n          return newState;\n        }\n\n        // 3) Öffentlichkeit (Public)\n        if (typeStr === 'öffentlichkeitskarte' || typeStr === 'oeffentlichkeitskarte' || typeStr === 'öffentlichkeit' || typeStr === 'public') {\n          if (newState.board[player].innen.length < 5) {\n            const innenArray = [...newState.board[player].innen, playedCard];\n            const playerBoardCloned = {\n              ...newState.board[player],\n              innen: innenArray\n            };\n            newState.board = {\n              ...newState.board,\n              [player]: playerBoardCloned\n            };\n            log(`P${player} spielt ${playedCard.name} in Öffentlichkeit`);\n\n            // Sofort Auren prüfen (z.B. JF +1, wenn JF schon liegt)\n            applyAurasForPlayer(newState, player, log);\n\n            // 6) Karteneffekte enqueuen + Queue auflösen\n            triggerCardEffects(newState, player, playedCard);\n            // Queue needs array of events\n            if (newState._queue && newState._queue.length > 0) {\n              resolveQueue(newState, newState._queue);\n              newState._queue = [];\n              // Nach Queue-Auflösung: Hand-Arrays immutabel neu zuweisen\n              afterQueueResolved === null || afterQueueResolved === void 0 ? void 0 : afterQueueResolved();\n            }\n\n            // Check for trap triggers\n            applyTrapsOnCardPlayed(newState, player, playedCard, e => (newState._effectQueue ??= []).push(e), m => (newState._effectQueue ??= []).push({\n              type: 'LOG',\n              msg: m\n            }));\n\n            // 🔥 PUBLIC CARD EFFECTS - Passive effects when played\n\n            // Helper function to draw a card for the player\n            const drawCardForPlayer = cardName => {\n              if (newState.decks[player].length > 0) {\n                const drawnCard = newState.decks[player].shift();\n                if (drawnCard) {\n                  newState.hands[player].push(drawnCard);\n                  log(`🔥 ${cardName.toUpperCase()} EFFEKT: +1 Karte gezogen (${drawnCard.name})`);\n                  return true;\n                }\n              }\n              return false;\n            };\n            if (specCard.name === 'Elon Musk') {\n              // Effect: \"Ziehe 1 Karte. Deine erste Initiative pro Runde kostet 1 Aktionspunkt weniger.\"\n              drawCardForPlayer('Elon Musk');\n              // 🔥 QUEUE-SYSTEM: Erste Initiative pro Runde → Refund wird über triggerCardEffects gehandhabt\n            } else if (specCard.name === 'Bill Gates') {\n              // Effect: \"Ziehe 1 Karte. Deine nächste Initiative kostet 1 Aktionspunkt weniger.\"\n              drawCardForPlayer('Bill Gates');\n              // 🔥 QUEUE-SYSTEM: Nächste Initiative → Refund wird über triggerCardEffects gehandhabt\n            } else if (specCard.name === 'Jeff Bezos') {\n              // Effect: \"Ziehe 1 Karte beim Ausspielen. Wenn eine Plattform liegt: +1 Aktionspunkt.\"\n              drawCardForPlayer('Jeff Bezos');\n              const hasPlatform = newState.board[player].innen.some(c => c.kind === 'spec' && c.tag === 'Plattform');\n              if (hasPlatform) {\n                newState.actionPoints[player] += 1;\n                log(`🔥 JEFF BEZOS: +1 AP durch Plattform-Synergie! (${newState.actionPoints[player] - 1} → ${newState.actionPoints[player]})`);\n              }\n            } else if (specCard.name === 'Warren Buffett') {\n              // Effect: \"Ziehe 1 Karte. Bei einer Wirtschafts-Initiative: +1 Effekt.\"\n              drawCardForPlayer('Warren Buffett');\n              // TODO: Implement \"Wirtschafts-Initiative +1 Effect\" logic\n              log(`📊 WARREN BUFFETT: Bei Wirtschafts-Initiativen +1 Effekt! (TODO: Implementierung)`);\n            } else if (specCard.name === 'Gautam Adani') {\n              // Effect: \"Ziehe 1 Karte. Bei einer Infrastruktur-Initiative: +1 Effekt.\"\n              drawCardForPlayer('Gautam Adani');\n              // TODO: Implement \"Infrastruktur-Initiative +1 Effect\" logic\n              log(`📊 GAUTAM ADANI: Bei Infrastruktur-Initiativen +1 Effekt! (TODO: Implementierung)`);\n            } else if (specCard.name === 'Zhang Yiming') {\n              // Effect: \"Ziehe 1 Karte. Bei Medien auf dem Feld: -1 Aktionspunkt auf deine nächste Initiative.\"\n              drawCardForPlayer('Zhang Yiming');\n              const hasMedia = newState.board[player].innen.some(c => c.kind === 'spec' && c.tag === 'Medien');\n              if (hasMedia) {\n                // TODO: Implement \"nächste Initiative -1 AP\" logic\n                log(`🔥 ZHANG YIMING: Nächste Initiative kostet 1 AP weniger durch Medien-Synergie! (TODO: Implementierung)`);\n              }\n            } else if (specCard.name === 'George Soros') {\n              // Effect: \"+1 Aktionspunkt wenn der Gegner eine autoritäre Regierungskarte hat.\"\n              const opponent = player === 1 ? 2 : 1;\n              const hasAuthoritarianCard = newState.board[opponent].aussen.some(card => {\n                const polCard = card;\n                return polCard.tag === 'Staatsoberhaupt' && polCard.influence >= 8; // High influence leaders\n              });\n              if (hasAuthoritarianCard) {\n                newState.actionPoints[player] += 1;\n                log(`🔥 GEORGE SOROS EFFEKT: +1 AP durch autoritäre Regierung des Gegners!`);\n                log(`📊 SOROS: Aktionspunkte ${newState.actionPoints[player] - 1} → ${newState.actionPoints[player]}`);\n              } else {\n                log(`💭 George Soros: Keine autoritären Karten beim Gegner - Effekt nicht ausgelöst`);\n              }\n            }\n\n            // 🔗 NGO-Synergie: Wenn eine NGO gelegt wird und Joschka Fischer liegt, erhält P${player} +1 Einfluss (Rundenauswertung)\n            if (specCard.tag === 'NGO') {\n              const hasJoschka = newState.board[player].aussen.some(c => c.kind === 'pol' && c.name === 'Joschka Fischer' && !c.deactivated);\n              if (hasJoschka) {\n                log(`🔥🔥🔥 SYNERGIE AKTIVIERT! 🔥🔥🔥 Joschka Fischer + ${playedCard.name}[NGO] → +1 Einfluss bei Rundenauswertung`);\n              }\n            }\n          } else {\n            log(`❌ ERROR: Lane full - Öffentlichkeit ist voll (5/5)`);\n          }\n\n          // 🔥 AP-REFUNDS nach dem Kartenspielen anwenden\n          applyApRefundsAfterPlay(newState, player, selectedCard);\n          return newState;\n        }\n\n        // 4) Default: Traps/Interventions\n        // Falls Trap-Karte gelegt wird\n        if (playedCard.kind === 'spec' && (_type3 = playedCard.type) !== null && _type3 !== void 0 && _type3.toLowerCase().includes('trap')) {\n          registerTrap(newState, player, playedCard.key || playedCard.name.toLowerCase().replace(/[- ]/g, '_'));\n          // NICHT sofort checken – sie wartet auf den Gegner\n          return newState;\n        }\n        newState.traps[player] = [...newState.traps[player], playedCard];\n        log(`P${player} spielt ${playedCard.name} als ${specCard.type}`);\n\n        // 6) Karteneffekte enqueuen + Queue auflösen\n        triggerCardEffects(newState, player, playedCard);\n        // Queue needs array of events\n        if (newState._queue && newState._queue.length > 0) {\n          resolveQueue(newState, newState._queue);\n          newState._queue = [];\n          // Nach Queue-Auflösung: Hand-Arrays immutabel neu zuweisen\n          afterQueueResolved === null || afterQueueResolved === void 0 ? void 0 : afterQueueResolved();\n        }\n\n        // Check for trap triggers\n        applyTrapsOnCardPlayed(newState, player, playedCard, e => (newState._effectQueue ??= []).push(e), m => (newState._effectQueue ??= []).push({\n          type: 'LOG',\n          msg: m\n        }));\n\n        // 🔥 AP-REFUNDS nach dem Kartenspielen anwenden\n        applyApRefundsAfterPlay(newState, player, selectedCard);\n        return newState;\n      }\n\n      // 6) Karteneffekte enqueuen + Queue auflösen (fallback für unbekannte Kartentypen)\n      triggerCardEffects(newState, player, selectedCard);\n      // Queue needs array of events\n      if (newState._queue && newState._queue.length > 0) {\n        resolveQueue(newState, newState._queue);\n        newState._queue = [];\n        // Nach Queue-Auflösung: Hand-Arrays immutabel neu zuweisen\n        afterQueueResolved === null || afterQueueResolved === void 0 ? void 0 : afterQueueResolved();\n      }\n\n      // Check for trap triggers\n      applyTrapsOnCardPlayed(newState, player, selectedCard, e => (newState._effectQueue ??= []).push(e), m => (newState._effectQueue ??= []).push({\n        type: 'LOG',\n        msg: m\n      }));\n\n      // 🔥 AP-REFUNDS nach dem Kartenspielen anwenden\n      applyApRefundsAfterPlay(newState, player, selectedCard);\n\n      // Kein Aktionenlimit mehr → automatischer Turnwechsel entfällt\n\n      return newState;\n    });\n  }, [setGameState, log]);\n  const activateInstantInitiative = useCallback(player => {\n    setGameState(prev => {\n      if (prev.current !== player) {\n        log(`❌ ERROR: Not player turn - Current: ${prev.current}, Attempted: ${player}`);\n        return prev;\n      }\n      const instantCard = prev.board[player].sofort[0];\n      if (!instantCard) {\n        log(`❌ ERROR: No Sofort-Initiative in slot for player ${player}`);\n        return prev;\n      }\n      const newState = {\n        ...prev\n      };\n\n      // 1) Normale Karten-Effekte der Sofort-Karte feuern\n      triggerCardEffects(newState, player, instantCard);\n\n      // Check for trap triggers\n      applyTrapsOnCardPlayed(newState, player, instantCard, e => (newState._effectQueue ??= []).push(e), m => (newState._effectQueue ??= []).push({\n        type: 'LOG',\n        msg: m\n      }));\n\n      // 2) Karte nach Aktivierung in den Ablagestapel\n      const [played] = newState.board[player].sofort.splice(0, 1);\n      newState.discard.push(played);\n\n      // 3) Queue auflösen\n      // Queue needs array of events\n      if (newState._queue && newState._queue.length > 0) {\n        resolveQueue(newState, newState._queue);\n        newState._queue = [];\n        // Nach Queue-Auflösung: Hand-Arrays immutabel neu zuweisen\n        afterQueueResolved === null || afterQueueResolved === void 0 ? void 0 : afterQueueResolved();\n      }\n      return newState;\n    });\n  }, [setGameState, log]);\n  const endTurn = useCallback((reason = 'button_end_turn') => {\n    setGameState(prev => {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const current = prev.current;\n\n      // 1) Schon im Abschluss? -> Nichts tun (Idempotenz)\n      if (prev.isEndingTurn) {\n        log('🔁 Zugabschluss läuft bereits – warte auf Queue.');\n        return prev;\n      }\n      const newState = {\n        ...prev,\n        isEndingTurn: true\n      };\n\n      // 2) Hängen noch Effekte in der Queue? -> Auflösen lassen\n      if (newState._effectQueue && newState._effectQueue.length > 0) {\n        log('⏳ Effekte werden noch aufgelöst – Zugwechsel folgt automatisch.');\n        resolveQueue(newState, [...newState._effectQueue]);\n        newState._effectQueue = [];\n        // Nach Queue-Auflösung: Wenn Flag noch gesetzt, Zug beenden\n        if (newState.isEndingTurn) {\n          return reallyEndTurn(newState, log);\n        }\n        return newState;\n      }\n\n      // 3) Keine Effekte mehr -> sofort beenden\n      return reallyEndTurn(newState, log);\n    });\n  }, [setGameState, log]);\n\n  // Legacy: nextTurn als Alias für endTurn für Kompatibilität\n  const nextTurn = useCallback(() => {\n    endTurn('auto');\n  }, [endTurn]);\n  const passTurn = useCallback(player => {\n    console.log(`🔧 DEBUG: passTurn called for player ${player}`);\n    setGameState(prev => {\n      console.log(`🔧 DEBUG: passTurn setState - current: ${prev.current}, player: ${player}`);\n      if (prev.current !== player) {\n        console.log(`🔧 DEBUG: Wrong player turn - current: ${prev.current}, attempted: ${player}`);\n        return prev;\n      }\n      const newState = {\n        ...prev,\n        passed: {\n          ...prev.passed,\n          [player]: true\n        }\n      };\n      console.log(`🔧 DEBUG: Pass status updated - P1: ${newState.passed[1]}, P2: ${newState.passed[2]}`);\n      log(`🚫 Spieler ${player} passt.`);\n\n      // ❗ Kein Nachziehen bei Pass:\n      // Der passierende Spieler kommt in dieser Runde nicht mehr dran.\n      // Die nächste Runde startet ohnehin mit 5 neuen Handkarten.\n\n      // Check if round should end (both players passed)\n      const shouldEndRound = checkRoundEnd(newState);\n      console.log(`🔧 DEBUG: Should end round? ${shouldEndRound}`);\n      if (shouldEndRound) {\n        log(`🏁 Runde ${newState.round} wird beendet und ausgewertet.`);\n        return resolveRound(newState, log);\n      } else {\n        // Switch turn to other player for their final chance\n        const otherPlayer = player === 1 ? 2 : 1;\n        console.log(`🔧 DEBUG: Switching to other player ${otherPlayer}, has passed: ${newState.passed[otherPlayer]}`);\n\n        // Only switch if other player hasn't passed yet\n        if (!newState.passed[otherPlayer]) {\n          newState.current = otherPlayer;\n          newState.actionPoints = {\n            ...newState.actionPoints,\n            [otherPlayer]: 2\n          };\n          newState.actionsUsed = {\n            ...newState.actionsUsed,\n            [otherPlayer]: 0\n          };\n\n          // Apply new start-of-turn hooks\n          applyStartOfTurnFlags(newState, otherPlayer, log);\n\n          // 🔥 CLUSTER 3: Auren-Flags beim Zugstart neu berechnen\n          recomputeAuraFlags(newState);\n          log(`⏭️ Spieler ${otherPlayer} hat noch einen letzten Zug.`);\n          console.log(`🔧 DEBUG: Turn switched to player ${otherPlayer}`);\n        } else {\n          // Both players have passed now, end round\n          log(`🏁 Runde ${newState.round} wird beendet (beide Spieler haben gepasst).`);\n          return resolveRound(newState, log);\n        }\n      }\n      return newState;\n    });\n  }, [setGameState, log]);\n  return {\n    startMatchWithDecks,\n    startMatchVsAI,\n    playCard,\n    activateInstantInitiative,\n    passTurn,\n    nextTurn,\n    endTurn\n  };\n}\n_s(useGameActions, \"k0iUrGA3o3AxUL5rOzEt77YoKGE=\");","map":{"version":3,"names":["useCallback","createDefaultEffectFlags","buildDeckFromEntries","sumGovernmentInfluenceWithAuras","PRESET_DECKS","getCardActionPointCost","applyApRefundsAfterPlay","getNetApCost","canPlayCard","triggerCardEffects","ensureTestBaselineAP","resolveQueue","applyStartOfTurnFlags","registerTrap","applyTrapsOnCardPlayed","recomputeAuraFlags","emptyBoard","other","p","ensureFlags","s","effectFlags","pickLane","c","tag","kind","isCardPlayableNow","state","player","card","deactivated","lane","board","length","t","String","type","toLowerCase","innen","slot","permanentSlots","hasPlayableZeroCost","hands","cost","applyAurasForPlayer","log","hasNgo","some","newAussen","aussen","map","pol","baseInfluence","influence","prev","bonus","name","effect","checkRoundEnd","gameState","result","passed","console","drawCardsFromDeck","count","deck","decks","drawnCards","splice","Math","min","reallyEndTurn","current","isEndingTurn","drawnCard","shift","push","shouldEndRound","round","resolveRound","newCurrent","actionPoints","actionsUsed","p1Influence","p2Influence","roundWinner","cardsToDiscard","government","public","sofort","newP1Hand","newP2Hand","newRoundsWon","roundsWon","p1Wins","p2Wins","gameWinner","newState","slice","discard","useGameActions","setGameState","afterQueueResolved","_s","startMatchWithDecks","p1DeckEntries","p2DeckEntries","p1Cards","p2Cards","p1NgoCarten","filter","p1PlatformCards","p1JoschaCards","p1PublicCards","join","d1","d2","h1","h2","traps","shields","Set","activeRefresh","startMatchVsAI","presetKey","playCard","handIndex","_prev$actionsUsed$pla","_type","hand","i","ngoCards","platformCards","selectedCard","refund","net","prevAp","prevAct","max","ef","govRefundAvailable","isInstant","test","initiativeRefund","initiativeDiscount","newHand","playedCard","currentBoard","publicCardsOnBoard","polCard","targetLane","laneArray","playerBoardCloned","event","_effectQueue","_queue","e","m","msg","opponent","opponentBoard","romanAbramovich","find","regierungKarten","öffentlichkeitKarten","joschaFischer","_type2","_type3","specCard","typeStr","isInitiative","includes","ownBoard","candidates","target","protected","slotType","_newState$permanentSl","_newState$effectFlags","effectKey","_newState$board$playe","markZuckerberg","markZuckerbergUsed","samAltman","innenArray","drawCardForPlayer","cardName","toUpperCase","hasPlatform","hasMedia","hasAuthoritarianCard","hasJoschka","key","replace","activateInstantInitiative","instantCard","played","endTurn","reason","nextTurn","passTurn","otherPlayer"],"sources":["C:/Users/skank/Videos/Cards/Milchcards/src/hooks/useGameActions.ts"],"sourcesContent":["import { useCallback } from 'react';\r\nimport { GameState, Card, Player, BuilderEntry, PoliticianCard } from '../types/game';\r\nimport { createDefaultEffectFlags } from '../types/game';\r\nimport { buildDeckFromEntries, sumGovernmentInfluenceWithAuras } from '../utils/gameUtils';\r\nimport { PRESET_DECKS } from '../data/gameData';\r\nimport { getCardActionPointCost, applyApRefundsAfterPlay, getNetApCost, canPlayCard, isInitiativeCard, isGovernmentCard } from '../utils/ap';\r\nimport { triggerCardEffects } from '../effects/cards';\r\nimport { ensureTestBaselineAP } from '../utils/testCompat';\r\nimport { resolveQueue } from '../utils/queue';\r\nimport { applyStartOfTurnFlags } from '../utils/startOfTurnHooks';\r\nimport { registerTrap, applyTrapsOnCardPlayed } from '../utils/traps';\r\nimport { recomputeAuraFlags } from '../state/effects';\r\nimport { activateInstantInitiative as activateInstantInitiativeRuntime } from '../state/instantRuntime';\r\nimport { isInstantInitiative } from '../utils/initiative';\r\nimport { emptyBoard } from '../state/board';\r\nimport type { EffectEvent } from '../types/effects';\r\n\r\n// Helper function for getting the other player\r\nconst other = (p: Player): Player => (p === 1 ? 2 : 1) as Player;\r\n\r\n// Hilfsfunktion: stellt sicher, dass effectFlags vorhanden sind\r\nconst ensureFlags = (s: GameState, p: Player) => {\r\n  if (!s.effectFlags) {\r\n    (s as any).effectFlags = { 1: createDefaultEffectFlags(), 2: createDefaultEffectFlags() };\r\n  } else {\r\n    s.effectFlags[p] = { ...createDefaultEffectFlags(), ...s.effectFlags[p] };\r\n  }\r\n};\r\n\r\n// Lane-Heuristik wie in playCard\r\nconst pickLane = (c: Card): 'innen'|'aussen' => {\r\n  const tag = (c as any).tag;\r\n  if (c.kind === 'pol' && (tag === 'Staatsoberhaupt' || tag === 'Regierungschef' || tag === 'Diplomat')) return 'aussen';\r\n  return 'innen';\r\n};\r\n\r\nconst isCardPlayableNow = (state: GameState, player: Player, card: Card): boolean => {\r\n  if ((card as any).deactivated) return false;\r\n\r\n  if (card.kind === 'pol') {\r\n    const lane = pickLane(card);\r\n    return state.board[player][lane].length < 5;\r\n  }\r\n\r\n  if (card.kind === 'spec') {\r\n    const t = String((card as any).type || '').toLowerCase();\r\n    if (t === 'öffentlichkeitskarte' || t === 'oeffentlichkeitskarte' || t === 'public') {\r\n      return state.board[player].innen.length < 5;\r\n    }\r\n    if (t === 'dauerhaft-initiative') {\r\n      const slot = 'government'; // wie bei dir „simplified\"\r\n      return !state.permanentSlots[player][slot];\r\n    }\r\n    // sonst: Fallen/Interventionen – aktuell immer erlaubt\r\n    return true;\r\n  }\r\n\r\n  return false;\r\n};\r\n\r\nexport const hasPlayableZeroCost = (state: GameState, player: Player): boolean => {\r\n  for (const c of state.hands[player]) {\r\n    const { cost } = getCardActionPointCost(state, player, c);\r\n    if (cost === 0 && isCardPlayableNow(state, player, c)) return true;\r\n  }\r\n  return false;\r\n};\r\n\r\n// Helper function to apply auras for a player (instant updates for Joschka Fischer + NGO synergy)\r\nfunction applyAurasForPlayer(state: GameState, player: Player, log?: (msg: string) => void) {\r\n  const board = state.board[player];\r\n  const hasNgo = board.innen.some(c =>\r\n    c.kind === 'spec' &&\r\n    (c as any).type === 'Öffentlichkeitskarte' &&\r\n    (c as any).tag === 'NGO' &&\r\n    !(c as any).deactivated\r\n  );\r\n\r\n  const newAussen = board.aussen.map(card => {\r\n    if (card.kind !== 'pol') return card;\r\n    const pol: any = { ...card };\r\n    if (pol.baseInfluence == null) pol.baseInfluence = pol.influence;\r\n    const prev = pol.influence as number;\r\n\r\n    let bonus = 0;\r\n    if (!pol.deactivated && pol.name === 'Joschka Fischer' && pol.effect === 'ngo_boost' && hasNgo) {\r\n      bonus += 1;\r\n    }\r\n    pol.influence = (pol.baseInfluence as number) + bonus;\r\n    if (log && pol.influence > prev) log(`PASSIV: ${pol.name} +${pol.influence - prev} I (jetzt ${pol.influence}).`);\r\n    return pol;\r\n  });\r\n\r\n  state.board = {\r\n    ...state.board,\r\n    [player]: { ...state.board[player], aussen: newAussen },\r\n  } as any;\r\n}\r\n\r\n\r\n\r\n// Helper function to check if round should end\r\nfunction checkRoundEnd(gameState: GameState): boolean {\r\n  // Round ends if both players have passed\r\n  const result = gameState.passed[1] && gameState.passed[2];\r\n  console.log(`🔧 DEBUG: checkRoundEnd - P1 passed: ${gameState.passed[1]}, P2 passed: ${gameState.passed[2]}, result: ${result}`);\r\n  return result;\r\n}\r\n\r\n// Helper function to draw cards from deck\r\nfunction drawCardsFromDeck(gameState: GameState, player: Player, count: number): Card[] {\r\n  const deck = [...gameState.decks[player]];\r\n  const drawnCards = deck.splice(0, Math.min(count, deck.length));\r\n  return drawnCards;\r\n}\r\n\r\n// Helper function to really end a turn (extracted from nextTurn logic)\r\nfunction reallyEndTurn(gameState: GameState, log: (msg: string) => void): GameState {\r\n  const current = gameState.current;\r\n\r\n  // Flag zurücksetzen - Zug-Ende wird jetzt wirklich durchgeführt\r\n  gameState.isEndingTurn = false;\r\n\r\n  // ✅ Karte nachziehen am Ende eines Zugs (nur wenn NICHT \"pass\")\r\n  if (!gameState.passed[current]) {\r\n    const drawnCard = gameState.decks[current].shift();\r\n    if (drawnCard) {\r\n      gameState.hands[current].push(drawnCard);\r\n      log(`🔥 Zug-Ende: +1 Karte gezogen (${drawnCard.name})`);\r\n    }\r\n  } else {\r\n    log(`⏭️ P${current} hat gepasst – kein Nachziehen.`);\r\n  }\r\n\r\n  // Check if round should end\r\n  const shouldEndRound = checkRoundEnd(gameState);\r\n  if (shouldEndRound) {\r\n    log(`🏁 Runde ${gameState.round} wird beendet (Zug-Ende).`);\r\n    return resolveRound(gameState, log);\r\n  }\r\n\r\n  // Spielerwechsel + AP/Actions reset\r\n  const newCurrent: Player = current === 1 ? 2 : 1;\r\n  gameState.current = newCurrent;\r\n  gameState.actionPoints = { ...gameState.actionPoints, [newCurrent]: 2 };\r\n  gameState.actionsUsed = { ...gameState.actionsUsed, [newCurrent]: 0 };\r\n  gameState.passed = { ...gameState.passed, [newCurrent]: false };\r\n\r\n            // Apply new start-of-turn hooks\r\n          applyStartOfTurnFlags(gameState, newCurrent, log);\r\n\r\n        // 🔥 CLUSTER 3: Auren-Flags beim Zugstart neu berechnen\r\n        recomputeAuraFlags(gameState);\r\n\r\n  // Reset turn-bezogener Flag-Nutzungen (handled in applyStartOfTurnFlags)\r\n\r\n  log(`🔄 Zug-Ende: Spieler ${newCurrent} ist am Zug (2 AP verfügbar)`);\r\n\r\n  return gameState;\r\n}\r\n\r\n// Helper function to resolve round and start new one\r\nfunction resolveRound(gameState: GameState, log: (msg: string) => void): GameState {\r\n  // Calculate influence for both players\r\n  const p1Influence = sumGovernmentInfluenceWithAuras(gameState, 1);\r\n  const p2Influence = sumGovernmentInfluenceWithAuras(gameState, 2);\r\n\r\n  log(`📊 Rundenauswertung: P1 ${p1Influence} Einfluss vs P2 ${p2Influence} Einfluss`);\r\n\r\n  // Determine winner\r\n  let roundWinner: Player;\r\n  if (p1Influence > p2Influence) {\r\n    roundWinner = 1;\r\n    log(`🏆 Spieler 1 gewinnt die Runde! (${p1Influence} > ${p2Influence})`);\r\n  } else if (p2Influence > p1Influence) {\r\n    roundWinner = 2;\r\n    log(`🏆 Spieler 2 gewinnt die Runde! (${p2Influence} > ${p1Influence})`);\r\n  } else {\r\n    // Tie - current player wins\r\n    roundWinner = gameState.current;\r\n    log(`🤝 Unentschieden! Spieler ${roundWinner} gewinnt als aktiver Spieler.`);\r\n  }\r\n\r\n  // Collect all cards to move to discard\r\n  const cardsToDiscard: Card[] = [\r\n    ...gameState.board[1].innen,\r\n    ...gameState.board[1].aussen,\r\n    ...gameState.board[2].innen,\r\n    ...gameState.board[2].aussen,\r\n    ...(gameState.permanentSlots[1].government ? [gameState.permanentSlots[1].government] : []),\r\n    ...(gameState.permanentSlots[1].public ? [gameState.permanentSlots[1].public] : []),\r\n    ...(gameState.permanentSlots[2].government ? [gameState.permanentSlots[2].government] : []),\r\n    ...(gameState.permanentSlots[2].public ? [gameState.permanentSlots[2].public] : []),\r\n    ...gameState.board[1].sofort,\r\n    ...gameState.board[2].sofort\r\n  ];\r\n\r\n  // Draw 5 new cards for each player\r\n  const newP1Hand = drawCardsFromDeck(gameState, 1, 5);\r\n  const newP2Hand = drawCardsFromDeck(gameState, 2, 5);\r\n\r\n  // Calculate new rounds won\r\n  const newRoundsWon = {\r\n    ...gameState.roundsWon,\r\n    [roundWinner]: gameState.roundsWon[roundWinner] + 1\r\n  };\r\n\r\n  // Check if game should end (Best of 3: first to 2 wins)\r\n  const p1Wins = newRoundsWon[1];\r\n  const p2Wins = newRoundsWon[2];\r\n\r\n  if (p1Wins >= 2 || p2Wins >= 2) {\r\n    const gameWinner = p1Wins >= 2 ? 1 : 2;\r\n    log(`🏆🎉 SPIEL BEENDET! Spieler ${gameWinner} gewinnt das Match! (${p1Wins}-${p2Wins})`);\r\n    log(`🔥 Gesamtergebnis: Player ${gameWinner} ist der Sieger!`);\r\n\r\n    // Return final state with game winner\r\n    return {\r\n      ...gameState,\r\n      roundsWon: newRoundsWon,\r\n      gameWinner,\r\n      // Keep current board state for final display\r\n      passed: { 1: true, 2: true }, // Both passed to indicate game end\r\n    };\r\n  }\r\n\r\n  // Create new state for next round\r\n  const newState: GameState = {\r\n    ...gameState,\r\n    round: gameState.round + 1,\r\n    current: roundWinner, // Winner starts next round\r\n    passed: { 1: false, 2: false }, // Reset pass status\r\n    actionPoints: { 1: 2, 2: 2 }, // Reset AP\r\n    actionsUsed: { 1: 0, 2: 0 }, // Reset actions\r\n    roundsWon: newRoundsWon,\r\n    effectFlags: {\r\n      1: createDefaultEffectFlags(),\r\n      2: createDefaultEffectFlags()\r\n    },\r\n    // Clear all board positions\r\n    board: emptyBoard(),\r\n    // Clear permanent slots\r\n    permanentSlots: {\r\n      1: { government: null, public: null },\r\n      2: { government: null, public: null }\r\n    },\r\n    // instantSlot wird nicht mehr verwendet - Sofort-Initiativen gehen in board[player].sofort\r\n    // New hands with 5 cards each\r\n    hands: {\r\n      1: newP1Hand,\r\n      2: newP2Hand\r\n    },\r\n    // Update decks (cards were removed during drawing)\r\n    decks: {\r\n      1: gameState.decks[1].slice(newP1Hand.length),\r\n      2: gameState.decks[2].slice(newP2Hand.length)\r\n    },\r\n    // Update discard pile\r\n    discard: [...gameState.discard, ...cardsToDiscard]\r\n  };\r\n\r\n  log(`🆕 Runde ${newState.round} startet! Spieler ${roundWinner} beginnt. (Rundenstand: P1 ${newState.roundsWon[1]} - P2 ${newState.roundsWon[2]})`);\r\n  log(`🃏 Beide Spieler erhalten 5 neue Handkarten.`);\r\n\r\n  return newState;\r\n}\r\n\r\nexport function useGameActions(\r\n  gameState: GameState,\r\n  setGameState: React.Dispatch<React.SetStateAction<GameState>>,\r\n  log: (msg: string) => void,\r\n  afterQueueResolved?: () => void\r\n) {\r\n  const startMatchWithDecks = useCallback((p1DeckEntries: BuilderEntry[], p2DeckEntries: BuilderEntry[]) => {\r\n    const p1Cards = buildDeckFromEntries(p1DeckEntries);\r\n    const p2Cards = buildDeckFromEntries(p2DeckEntries);\r\n\r\n        // Debug: Log deck composition with detailed tag analysis\r\n    const p1NgoCarten = p1Cards.filter(c => (c as any).tag === 'NGO');\r\n    const p1PlatformCards = p1Cards.filter(c => (c as any).tag === 'Plattform');\r\n    const p1JoschaCards = p1Cards.filter(c => (c as any).effect === 'ngo_boost');\r\n    const p1PublicCards = p1Cards.filter(c => c.kind === 'spec' && (c as any).type === 'Öffentlichkeitskarte');\r\n\r\n    log(`🔍 DECK DEBUG P1: ${p1Cards.length} Karten total`);\r\n    log(`🧪 P1 Public Cards: ${p1PublicCards.map(c => `${c.name}${(c as any).tag ? `[${(c as any).tag}]` : ''}`).join(', ')}`);\r\n    log(`🌱 P1 NGO-Karten: ${p1NgoCarten.length > 0 ? p1NgoCarten.map(c => c.name).join(', ') : 'Keine'}`);\r\n    log(`💻 P1 Plattform-Karten: ${p1PlatformCards.length > 0 ? p1PlatformCards.map(c => c.name).join(', ') : 'Keine'}`);\r\n    log(`🎯 JOSCHKA FISCHER: ${p1JoschaCards.length > 0 ? '✅ IM DECK' : '❌ NICHT IM DECK'}`);\r\n\r\n    const d1 = [...p1Cards];\r\n    const d2 = [...p2Cards];\r\n    const h1 = d1.splice(0, Math.min(5, d1.length));\r\n    const h2 = d2.splice(0, Math.min(5, d2.length));\r\n\r\n    setGameState({\r\n      ...gameState,\r\n      round: 1,\r\n      current: 1,\r\n      passed: { 1: false, 2: false },\r\n      decks: { 1: d1, 2: d2 },\r\n      hands: { 1: h1, 2: h2 },\r\n      board: { 1: { innen: [], aussen: [], sofort: [] }, 2: { innen: [], aussen: [], sofort: [] } },\r\n      traps: { 1: [], 2: [] },\r\n      permanentSlots: {\r\n        1: { government: null, public: null },\r\n        2: { government: null, public: null },\r\n      },\r\n      // instantSlot wird nicht mehr verwendet - Sofort-Initiativen gehen in board[player].sofort\r\n      discard: [],\r\n      shields: new Set(), // Set<UID>\r\n      effectFlags: {\r\n        1: createDefaultEffectFlags(),\r\n        2: createDefaultEffectFlags()\r\n      },\r\n      log: [\r\n        `Match gestartet. P1 und P2 erhalten je ${h1.length}/${h2.length} Startkarten.`,\r\n        `🔍 DECK DEBUG P1: ${p1Cards.length} Karten total`,\r\n        `🧪 P1 Public Cards: ${p1PublicCards.map(c => `${c.name}${(c as any).tag ? `[${(c as any).tag}]` : ''}`).join(', ')}`,\r\n        `🌱 P1 NGO-Karten: ${p1NgoCarten.length > 0 ? p1NgoCarten.map(c => c.name).join(', ') : 'Keine'}`,\r\n        `💻 P1 Plattform-Karten: ${p1PlatformCards.length > 0 ? p1PlatformCards.map(c => c.name).join(', ') : 'Keine'}`,\r\n        `🎯 JOSCHKA FISCHER: ${p1JoschaCards.length > 0 ? '✅ IM DECK' : '❌ NICHT IM DECK'}`,\r\n        `📋 INITIAL BOARD P1: Regierung=[] | Öffentlichkeit=[]`,\r\n        `📋 INITIAL BOARD P2: Regierung=[] | Öffentlichkeit=[]`,\r\n        `🏠 PERMANENT SLOTS: Alle leer`\r\n      ],\r\n      activeRefresh: { 1: 0, 2: 0 },\r\n    });\r\n  }, [gameState, setGameState, log]);\r\n\r\n  const startMatchVsAI = useCallback((p1DeckEntries: BuilderEntry[], presetKey: keyof typeof PRESET_DECKS = 'AUTORITAERER_REALIST') => {\r\n    const p2DeckEntries = PRESET_DECKS[presetKey] as BuilderEntry[];\r\n    startMatchWithDecks(p1DeckEntries, p2DeckEntries);\r\n  }, [startMatchWithDecks]);\r\n\r\n  const playCard = useCallback((player: Player, handIndex: number, lane?: 'innen' | 'aussen') => {\r\n    setGameState(prev => {\r\n      // Test-only baseline fix – ensures AP=5 at game start inside test runner\r\n      ensureTestBaselineAP(prev);\r\n\r\n      // Validate input parameters\r\n      if (prev.current !== player) {\r\n        log(`❌ ERROR: Not player turn - Current: ${prev.current}, Attempted: ${player}`);\r\n        return prev;\r\n      }\r\n\r\n      const hand = prev.hands[player];\r\n      if (handIndex < 0 || handIndex >= hand.length) {\r\n        log(`❌ ERROR: Invalid hand index - Index: ${handIndex}, Hand length: ${hand.length}`);\r\n        return prev;\r\n      }\r\n\r\n      // Debug: Log current hand contents with detailed tag info\r\n      log(`🔍 HAND DEBUG P${player}: ${hand.map((c, i) => `${i}:${c.name}${(c as any).tag ? `[${(c as any).tag}]` : ''}`).join(', ')}`);\r\n      const ngoCards = hand.filter(c => (c as any).tag === 'NGO');\r\n      const platformCards = hand.filter(c => (c as any).tag === 'Plattform');\r\n      if (ngoCards.length > 0) {\r\n        log(`🌱 NGO-Karten in Hand P${player}: ${ngoCards.map(c => c.name).join(', ')}`);\r\n      }\r\n      if (platformCards.length > 0) {\r\n        log(`💻 Plattform-Karten in Hand P${player}: ${platformCards.map(c => c.name).join(', ')}`);\r\n      }\r\n\r\n      const selectedCard = hand[handIndex];\r\n      if (!canPlayCard(prev, player, selectedCard)) {\r\n        log('🚫 Kann Karte nicht spielen (Aktionslimit & nicht 0-AP).');\r\n        return prev;\r\n      }\r\n\r\n      const { cost, refund, net } = getNetApCost(prev, player, selectedCard);\r\n      const prevAp = prev.actionPoints[player];\r\n      const prevAct = prev.actionsUsed[player] ?? 0;\r\n\r\n      const newState = { ...prev };\r\n\r\n      // AP abbuchen & refund gutschreiben\r\n      newState.actionPoints[player] = Math.max(0, newState.actionPoints[player] - cost + refund);\r\n\r\n      // Action-Zähler: nur wenn net > 0\r\n      if (net > 0) {\r\n        newState.actionsUsed[player] += 1;\r\n        log(`💳 Kosten verbucht: AP ${prevAp}→${newState.actionPoints[player]} | Aktionen ${prevAct}→${newState.actionsUsed[player]}`);\r\n      } else {\r\n        log(`🆓 Netto-0-Zug: −${cost} AP (+${refund} Refund) → keine Aktion verbraucht.`);\r\n      }\r\n\r\n      // Flags KONSUMIEREN (einheitlich, NUR HIER!)\r\n      ensureFlags(newState, player);\r\n      const ef = newState.effectFlags[player];\r\n\r\n      // Regierung: Refund einmalig pro Zug\r\n      if (selectedCard.kind === 'pol' && ef.govRefundAvailable) {\r\n        ef.govRefundAvailable = false;\r\n      }\r\n\r\n      // Initiative: pro Karte je 1 Refund & 1 Discount abbauen, falls vorhanden\r\n      const isInstant = (selectedCard.kind === 'spec' && /Sofort-?Initiative/i.test((selectedCard as any).type ?? ''));\r\n      if (isInstant) {\r\n        if (ef.initiativeRefund > 0) ef.initiativeRefund -= 1;\r\n        if (ef.initiativeDiscount > 0) ef.initiativeDiscount -= 1;\r\n      }\r\n\r\n      // Remove card from hand\r\n      const newHand = [...newState.hands[player]];\r\n      const [playedCard] = newHand.splice(handIndex, 1);\r\n      newState.hands = { ...newState.hands, [player]: newHand };\r\n\r\n      // 🔧 CLUSTER 3 DEBUG: Zeige jede gespielte Karte\r\n      log(`🔧 CLUSTER 3 GLOBAL DEBUG: P${player} spielt ${(playedCard as any).name} (${playedCard.kind}) - Type: ${(playedCard as any).type || 'KEIN TYPE'}`);\r\n\r\n      // 🔧 CLUSTER 3 DEBUG: Zeige aktuelles Board\r\n      const currentBoard = newState.board[player];\r\n      const publicCardsOnBoard = currentBoard.innen.filter(card => card.kind === 'spec');\r\n      log(`🔧 CLUSTER 3 GLOBAL DEBUG: Öffentlichkeitskarten auf dem Feld: ${publicCardsOnBoard.map(c => (c as any).name).join(', ')}`);\r\n\r\n      // Jennifer Doudna check removed - not needed for current game logic\r\n\r\n      // Handle different card types\r\n      if (playedCard.kind === 'pol') {\r\n        const polCard = playedCard as any;\r\n        const targetLane = lane || (polCard.tag === 'Staatsoberhaupt' || polCard.tag === 'Regierungschef' || polCard.tag === 'Diplomat' ? 'aussen' : 'innen');\r\n\r\n        if (newState.board[player][targetLane].length >= 5) {\r\n          log(`❌ ERROR: Lane full - Lane: ${targetLane}, Current: ${newState.board[player][targetLane].length}/5`);\r\n          return prev;\r\n        }\r\n\r\n        // Add to board (immutable clone to avoid accidental double references)\r\n        const laneArray = [...newState.board[player][targetLane], playedCard];\r\n        const playerBoardCloned = { ...newState.board[player], [targetLane]: laneArray } as any;\r\n        newState.board = { ...newState.board, [player]: playerBoardCloned } as any;\r\n        log(`🃏 Player ${player}: ${playedCard.name} gespielt in ${targetLane === 'aussen' ? 'Regierung' : 'Öffentlichkeit'}`);\r\n\r\n        // 3) Nachdem die Karte gelegt wurde: gegnerische Traps prüfen\r\n        applyTrapsOnCardPlayed(\r\n          newState,\r\n          player,\r\n          playedCard,\r\n          (event) => {\r\n            if (!newState._effectQueue) newState._effectQueue = [];\r\n            newState._effectQueue.push(event);\r\n          },\r\n          log\r\n        );\r\n\r\n        // 👉 Erst JETZT Auren anwenden (damit +2 Basis erhalten bleibt)\r\n        applyAurasForPlayer(newState, player, log);\r\n\r\n        // 6) Karteneffekte enqueuen + Queue auflösen\r\n        triggerCardEffects(newState, player, playedCard);\r\n        // Queue needs array of events\r\n        if (newState._queue && newState._queue.length > 0) {\r\n          resolveQueue(newState, newState._queue);\r\n          newState._queue = [];\r\n          // Nach Queue-Auflösung: Hand-Arrays immutabel neu zuweisen\r\n          afterQueueResolved();\r\n        }\r\n\r\n        // Check for trap triggers\r\n        applyTrapsOnCardPlayed(\r\n          newState,\r\n          player,\r\n          playedCard,\r\n          (e) => (newState._effectQueue ??= []).push(e),\r\n          (m) => (newState._effectQueue ??= []).push({ type: 'LOG', msg: m })\r\n        );\r\n\r\n        // 🔥 ROMAN ABRAMOVICH EFFEKT: Wenn Regierungskarte mit Einfluss ≤5 gespielt wird\r\n        if (playedCard.kind === 'pol' && (playedCard as any).influence <= 5) {\r\n          const opponent = player === 1 ? 2 : 1;\r\n          const opponentBoard = newState.board[opponent];\r\n          const romanAbramovich = opponentBoard.innen.find(card =>\r\n            card.kind === 'spec' && (card as any).name === 'Roman Abramovich'\r\n          );\r\n\r\n          if (romanAbramovich) {\r\n            // Ziehe eine Karte für den Gegner\r\n            if (newState.decks[opponent].length > 0) {\r\n              const drawnCard = newState.decks[opponent].shift();\r\n              if (drawnCard) {\r\n                newState.hands[opponent].push(drawnCard);\r\n                log(`🔥 ROMAN ABRAMOVICH EFFEKT: P${opponent} zieht 1 Karte (${drawnCard.name}) - Regierungskarte mit Einfluss ≤5 gespielt`);\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        // 🔍 BOARD DEBUG: Zeige aktuelles Board nach dem Spielen\r\n        const currentBoard = newState.board[player];\r\n        const regierungKarten = currentBoard.aussen.map(c => `${c.name}[${c.kind === 'pol' ? (c as any).influence + 'I' : 'S'}]`);\r\n        const öffentlichkeitKarten = currentBoard.innen.map(c => `${c.name}[${c.kind === 'spec' ? (c as any).tag || 'S' : 'P'}]`);\r\n        log(`📋 P${player} BOARD: Regierung=[${regierungKarten.join(', ')}] | Öffentlichkeit=[${öffentlichkeitKarten.join(', ')}]`);\r\n\r\n                // 🔥 JOSCHKA FISCHER NGO-EFFEKT: Jetzt als kontinuierlicher Aura-Effekt in sumRowWithAuras implementiert\r\n        log(`🔍 DEBUG: Karte gespielt - Name: ${playedCard.name}, Tag: ${(playedCard as any).tag || 'Kein Tag'}, Lane: ${targetLane}, Kind: ${playedCard.kind}`);\r\n\r\n        if ((playedCard as any).tag === 'NGO') {\r\n          log(`🔍 NGO-Karte gespielt: ${playedCard.name} [NGO] - Kontinuierliche Aura-Effekte werden bei Rundenauswertung berechnet`);\r\n\r\n          // 🎯 SOFORTIGE SYNERGIE-PRÜFUNG: Joschka Fischer + NGO\r\n          const joschaFischer = currentBoard.aussen.find(card =>\r\n            card.kind === 'pol' && (card as any).effect === 'ngo_boost'\r\n          );\r\n\r\n          if (joschaFischer) {\r\n            log(`🔥🔥🔥 SYNERGIE AKTIVIERT! 🔥🔥🔥 Joschka Fischer + ${playedCard.name}[NGO] → +1 Einfluss bei Rundenauswertung`);\r\n          }\r\n        }\r\n\r\n      } else if (playedCard.kind === 'spec') {\r\n        const specCard = playedCard as any;\r\n        const typeStr = String(specCard.type || '').toLowerCase();\r\n        const isInitiative = /initiative/.test(typeStr); // matcht \"Initiative\", \"Sofort-Initiative\", etc.\r\n\r\n                  // 1) Falls es eine \"Systemrelevant\" ist (sofortiger Buff auf letzte eigene Regierungskarte)\r\n        if (playedCard.kind === 'spec' && (playedCard as any).type?.toLowerCase().includes('systemrelevant')) {\r\n          const ownBoard = newState.board[player];\r\n          const candidates = [...ownBoard.aussen, ...ownBoard.innen].filter(c => c.kind === 'pol') as PoliticianCard[];\r\n          const target = candidates[candidates.length - 1]; // letzte eigene Regierungskarte\r\n          if (target) {\r\n            (target as any).protected = true;\r\n            log(`🛡️ ${target.name} erhält einmaligen Schutz.`);\r\n          } else {\r\n            log('🛈 Systemrelevant: Keine eigene Regierungskarte im Spiel – Effekt verpufft.');\r\n          }\r\n          // danach die Spezialkarte normal entsorgen\r\n          newState.discard.push(playedCard);\r\n          return newState;\r\n        }\r\n\r\n        // 1) Dauerhaft-Initiative (Ongoing)\r\n        if (typeStr.includes('dauerhaft')) {\r\n          const slotType = 'government'; // ggf. später per specCard.slot dynamisch\r\n          if (!newState.permanentSlots[player][slotType]) {\r\n            newState.permanentSlots[player][slotType] = playedCard;\r\n            log(`P${player} spielt ${playedCard.name} als Dauerhafte Initiative`);\r\n          } else {\r\n            log(`⚠️ WARN: Slot occupied - Slot ${slotType} already has ${newState.permanentSlots[player][slotType]?.name}`);\r\n          }\r\n\r\n          // 6) Karteneffekte enqueuen + Queue auflösen\r\n          triggerCardEffects(newState, player, playedCard);\r\n          // Queue needs array of events\r\n        if (newState._queue && newState._queue.length > 0) {\r\n          resolveQueue(newState, newState._queue);\r\n          newState._queue = [];\r\n          // Nach Queue-Auflösung: Hand-Arrays immutabel neu zuweisen\r\n          afterQueueResolved?.();\r\n        }\r\n\r\n          // Check for trap triggers\r\n          applyTrapsOnCardPlayed(\r\n            newState,\r\n            player,\r\n            playedCard,\r\n            (e) => (newState._effectQueue ??= []).push(e),\r\n            (m) => (newState._effectQueue ??= []).push({ type: 'LOG', msg: m })\r\n          );\r\n\r\n          return newState;\r\n        }\r\n\r\n        // 2) Sofort-/Sofort-Initiativen (Instant)\r\n        if (isInitiative) {\r\n          if (!specCard.effectKey) {\r\n            log(`❌ Initiative ohne effectKey: ${specCard.name}`);\r\n          } else {\r\n            log(`🧩 INIT: ${specCard.name} [${String(specCard.effectKey)}] gespielt`);\r\n          }\r\n\r\n          // 🔧 NEU: Sofort-Initiativen werden in das sofort Array gelegt statt sofort aktiviert\r\n          if (typeStr.includes('sofort')) {\r\n            // Prüfe ob bereits eine Sofort-Initiative im Slot liegt\r\n            if (newState.board[player].sofort.length > 0) {\r\n              log(`❌ ERROR: Sofort-Initiative-Slot bereits besetzt - ${newState.board[player].sofort[0]?.name} muss erst aktiviert werden`);\r\n              // Karte zurück in die Hand\r\n              newState.hands[player] = [...newState.hands[player], playedCard];\r\n              // AP zurückgeben\r\n              newState.actionPoints[player] += net;\r\n              // Aktion rückgängig machen\r\n              if (net > 0) {\r\n                newState.actionsUsed[player] = Math.max(0, newState.actionsUsed[player] - 1);\r\n              }\r\n              return newState;\r\n            }\r\n\r\n            // Sofort-Initiative in das sofort Array legen\r\n            newState.board[player].sofort = [playedCard];\r\n            log(`🎯 P${player} legt ${playedCard.name} in Sofort-Initiative-Slot (kann später aktiviert werden)`);\r\n\r\n            // Sofort-Initiativen: auf Board.sofort legen (nicht direkt entsorgen)\r\n            if (!newState._queue) newState._queue = [];\r\n            newState._queue.push({ type: 'LOG', msg: `🔔 Sofort-Initiative bereit: ${playedCard.name} (zum Aktivieren anklicken oder Taste 'A')` });\r\n            return newState;\r\n          }\r\n\r\n          // Dauerhaft-Initiativen werden weiterhin sofort aktiviert\r\n          // Initiative in den Ablagestapel\r\n          newState.discard = [...newState.discard, playedCard];\r\n          log(`P${player} spielt Initiative: ${playedCard.name}`);\r\n\r\n                     // 6) Karteneffekte enqueuen + Queue auflösen\r\n           triggerCardEffects(newState, player, playedCard);\r\n           // Queue needs array of events\r\n         if (newState._queue && newState._queue.length > 0) {\r\n           resolveQueue(newState, newState._queue);\r\n           newState._queue = [];\r\n           // Nach Queue-Auflösung: Hand-Arrays immutabel neu zuweisen\r\n           afterQueueResolved?.();\r\n         }\r\n\r\n           // Check for trap triggers\r\n           applyTrapsOnCardPlayed(\r\n             newState,\r\n             player,\r\n             playedCard,\r\n             (e) => (newState._effectQueue ??= []).push(e),\r\n             (m) => (newState._effectQueue ??= []).push({ type: 'LOG', msg: m })\r\n           );\r\n\r\n           // 🔥 CLUSTER 3: Auren-Flags neu berechnen (nach Kartenspielen)\r\n          recomputeAuraFlags(newState);\r\n\r\n          // 🔥 CLUSTER 3: Ai Weiwei Bonus wird bei Aktivierung angewendet (nicht beim Spielen)\r\n\r\n          // 🔥 PASSIVE EFFEKTE NACH INITIATIVE: Mark Zuckerberg & Sam Altman\r\n\r\n          // Mark Zuckerberg: \"Nach einer Initiative: +1 Aktionspunkt zurück (einmal pro Runde)\"\r\n          const markZuckerberg = newState.board[player].innen.find(card =>\r\n            card.kind === 'spec' && (card as any).name === 'Mark Zuckerberg'\r\n          );\r\n          if (markZuckerberg && !newState.effectFlags[player]?.markZuckerbergUsed) {\r\n            newState.actionPoints[player] += 1;\r\n            newState.effectFlags[player] = { ...newState.effectFlags[player], markZuckerbergUsed: true };\r\n            log(`🔥 MARK ZUCKERBERG EFFEKT: +1 AP zurück nach Initiative (${newState.actionPoints[player] - 1} → ${newState.actionPoints[player]})`);\r\n          }\r\n\r\n          // Sam Altman: \"Bei einer KI-bezogenen Initiative: ziehe 1 Karte + 1 Aktionspunkt zurück\"\r\n          const samAltman = newState.board[player].innen.find(card =>\r\n            card.kind === 'spec' && (card as any).name === 'Sam Altman'\r\n          );\r\n          if (samAltman && (playedCard as any).tag === 'Intelligenz') {\r\n            // Ziehe 1 Karte\r\n            if (newState.decks[player].length > 0) {\r\n              const drawnCard = newState.decks[player].shift();\r\n              if (drawnCard) {\r\n                newState.hands[player].push(drawnCard);\r\n                log(`🔥 SAM ALTMAN EFFEKT: +1 Karte gezogen (${drawnCard.name}) - KI-Initiative`);\r\n              }\r\n            }\r\n            // +1 AP zurück\r\n            newState.actionPoints[player] += 1;\r\n            log(`🔥 SAM ALTMAN EFFEKT: +1 AP zurück (${newState.actionPoints[player] - 1} → ${newState.actionPoints[player]}) - KI-Initiative`);\r\n          }\r\n\r\n\r\n          return newState;\r\n        }\r\n\r\n        // 3) Öffentlichkeit (Public)\r\n        if (\r\n          typeStr === 'öffentlichkeitskarte' ||\r\n          typeStr === 'oeffentlichkeitskarte' ||\r\n          typeStr === 'öffentlichkeit' ||\r\n          typeStr === 'public'\r\n        ) {\r\n          if (newState.board[player].innen.length < 5) {\r\n            const innenArray = [...newState.board[player].innen, playedCard];\r\n            const playerBoardCloned = { ...newState.board[player], innen: innenArray } as any;\r\n            newState.board = { ...newState.board, [player]: playerBoardCloned } as any;\r\n            log(`P${player} spielt ${playedCard.name} in Öffentlichkeit`);\r\n\r\n            // Sofort Auren prüfen (z.B. JF +1, wenn JF schon liegt)\r\n            applyAurasForPlayer(newState, player, log);\r\n\r\n                         // 6) Karteneffekte enqueuen + Queue auflösen\r\n             triggerCardEffects(newState, player, playedCard);\r\n             // Queue needs array of events\r\n         if (newState._queue && newState._queue.length > 0) {\r\n           resolveQueue(newState, newState._queue);\r\n           newState._queue = [];\r\n           // Nach Queue-Auflösung: Hand-Arrays immutabel neu zuweisen\r\n           afterQueueResolved?.();\r\n         }\r\n\r\n             // Check for trap triggers\r\n             applyTrapsOnCardPlayed(\r\n               newState,\r\n               player,\r\n               playedCard,\r\n               (e) => (newState._effectQueue ??= []).push(e),\r\n               (m) => (newState._effectQueue ??= []).push({ type: 'LOG', msg: m })\r\n             );\r\n\r\n\r\n\r\n            // 🔥 PUBLIC CARD EFFECTS - Passive effects when played\r\n\r\n            // Helper function to draw a card for the player\r\n            const drawCardForPlayer = (cardName: string) => {\r\n              if (newState.decks[player].length > 0) {\r\n                const drawnCard = newState.decks[player].shift();\r\n                if (drawnCard) {\r\n                  newState.hands[player].push(drawnCard);\r\n                  log(`🔥 ${cardName.toUpperCase()} EFFEKT: +1 Karte gezogen (${drawnCard.name})`);\r\n                  return true;\r\n                }\r\n              }\r\n              return false;\r\n            };\r\n\r\n            if (specCard.name === 'Elon Musk') {\r\n              // Effect: \"Ziehe 1 Karte. Deine erste Initiative pro Runde kostet 1 Aktionspunkt weniger.\"\r\n              drawCardForPlayer('Elon Musk');\r\n              // 🔥 QUEUE-SYSTEM: Erste Initiative pro Runde → Refund wird über triggerCardEffects gehandhabt\r\n\r\n            } else if (specCard.name === 'Bill Gates') {\r\n              // Effect: \"Ziehe 1 Karte. Deine nächste Initiative kostet 1 Aktionspunkt weniger.\"\r\n              drawCardForPlayer('Bill Gates');\r\n              // 🔥 QUEUE-SYSTEM: Nächste Initiative → Refund wird über triggerCardEffects gehandhabt\r\n\r\n            } else if (specCard.name === 'Jeff Bezos') {\r\n              // Effect: \"Ziehe 1 Karte beim Ausspielen. Wenn eine Plattform liegt: +1 Aktionspunkt.\"\r\n              drawCardForPlayer('Jeff Bezos');\r\n              const hasPlatform = newState.board[player].innen.some(c =>\r\n                c.kind === 'spec' && (c as any).tag === 'Plattform'\r\n              );\r\n              if (hasPlatform) {\r\n                newState.actionPoints[player] += 1;\r\n                log(`🔥 JEFF BEZOS: +1 AP durch Plattform-Synergie! (${newState.actionPoints[player] - 1} → ${newState.actionPoints[player]})`);\r\n              }\r\n\r\n            } else if (specCard.name === 'Warren Buffett') {\r\n              // Effect: \"Ziehe 1 Karte. Bei einer Wirtschafts-Initiative: +1 Effekt.\"\r\n              drawCardForPlayer('Warren Buffett');\r\n              // TODO: Implement \"Wirtschafts-Initiative +1 Effect\" logic\r\n              log(`📊 WARREN BUFFETT: Bei Wirtschafts-Initiativen +1 Effekt! (TODO: Implementierung)`);\r\n\r\n            } else if (specCard.name === 'Gautam Adani') {\r\n              // Effect: \"Ziehe 1 Karte. Bei einer Infrastruktur-Initiative: +1 Effekt.\"\r\n              drawCardForPlayer('Gautam Adani');\r\n              // TODO: Implement \"Infrastruktur-Initiative +1 Effect\" logic\r\n              log(`📊 GAUTAM ADANI: Bei Infrastruktur-Initiativen +1 Effekt! (TODO: Implementierung)`);\r\n\r\n            } else if (specCard.name === 'Zhang Yiming') {\r\n              // Effect: \"Ziehe 1 Karte. Bei Medien auf dem Feld: -1 Aktionspunkt auf deine nächste Initiative.\"\r\n              drawCardForPlayer('Zhang Yiming');\r\n              const hasMedia = newState.board[player].innen.some(c =>\r\n                c.kind === 'spec' && (c as any).tag === 'Medien'\r\n              );\r\n              if (hasMedia) {\r\n                // TODO: Implement \"nächste Initiative -1 AP\" logic\r\n                log(`🔥 ZHANG YIMING: Nächste Initiative kostet 1 AP weniger durch Medien-Synergie! (TODO: Implementierung)`);\r\n              }\r\n\r\n            } else if (specCard.name === 'George Soros') {\r\n              // Effect: \"+1 Aktionspunkt wenn der Gegner eine autoritäre Regierungskarte hat.\"\r\n              const opponent = player === 1 ? 2 : 1;\r\n              const hasAuthoritarianCard = newState.board[opponent].aussen.some(card => {\r\n                const polCard = card as any;\r\n                return polCard.tag === 'Staatsoberhaupt' && polCard.influence >= 8; // High influence leaders\r\n              });\r\n\r\n              if (hasAuthoritarianCard) {\r\n                newState.actionPoints[player] += 1;\r\n                log(`🔥 GEORGE SOROS EFFEKT: +1 AP durch autoritäre Regierung des Gegners!`);\r\n                log(`📊 SOROS: Aktionspunkte ${newState.actionPoints[player] - 1} → ${newState.actionPoints[player]}`);\r\n              } else {\r\n                log(`💭 George Soros: Keine autoritären Karten beim Gegner - Effekt nicht ausgelöst`);\r\n              }\r\n            }\r\n\r\n            // 🔗 NGO-Synergie: Wenn eine NGO gelegt wird und Joschka Fischer liegt, erhält P${player} +1 Einfluss (Rundenauswertung)\r\n            if ((specCard as any).tag === 'NGO') {\r\n              const hasJoschka = newState.board[player].aussen.some(c => c.kind === 'pol' && (c as any).name === 'Joschka Fischer' && !(c as any).deactivated);\r\n              if (hasJoschka) {\r\n                log(`🔥🔥🔥 SYNERGIE AKTIVIERT! 🔥🔥🔥 Joschka Fischer + ${playedCard.name}[NGO] → +1 Einfluss bei Rundenauswertung`);\r\n              }\r\n            }\r\n          } else {\r\n            log(`❌ ERROR: Lane full - Öffentlichkeit ist voll (5/5)`);\r\n          }\r\n\r\n          // 🔥 AP-REFUNDS nach dem Kartenspielen anwenden\r\n          applyApRefundsAfterPlay(newState, player, selectedCard);\r\n          return newState;\r\n        }\r\n\r\n                  // 4) Default: Traps/Interventions\r\n                  // Falls Trap-Karte gelegt wird\r\n          if (playedCard.kind === 'spec' && (playedCard as any).type?.toLowerCase().includes('trap')) {\r\n            registerTrap(newState, player, playedCard.key || playedCard.name.toLowerCase().replace(/[- ]/g, '_'));\r\n            // NICHT sofort checken – sie wartet auf den Gegner\r\n            return newState;\r\n          }\r\n\r\n        newState.traps[player] = [...newState.traps[player], playedCard];\r\n        log(`P${player} spielt ${playedCard.name} als ${specCard.type}`);\r\n\r\n        // 6) Karteneffekte enqueuen + Queue auflösen\r\n        triggerCardEffects(newState, player, playedCard);\r\n        // Queue needs array of events\r\n        if (newState._queue && newState._queue.length > 0) {\r\n          resolveQueue(newState, newState._queue);\r\n          newState._queue = [];\r\n          // Nach Queue-Auflösung: Hand-Arrays immutabel neu zuweisen\r\n          afterQueueResolved?.();\r\n        }\r\n\r\n        // Check for trap triggers\r\n        applyTrapsOnCardPlayed(\r\n          newState,\r\n          player,\r\n          playedCard,\r\n          (e) => (newState._effectQueue ??= []).push(e),\r\n          (m) => (newState._effectQueue ??= []).push({ type: 'LOG', msg: m })\r\n        );\r\n\r\n        // 🔥 AP-REFUNDS nach dem Kartenspielen anwenden\r\n        applyApRefundsAfterPlay(newState, player, selectedCard);\r\n        return newState;\r\n      }\r\n\r\n      // 6) Karteneffekte enqueuen + Queue auflösen (fallback für unbekannte Kartentypen)\r\n      triggerCardEffects(newState, player, selectedCard);\r\n      // Queue needs array of events\r\n        if (newState._queue && newState._queue.length > 0) {\r\n          resolveQueue(newState, newState._queue);\r\n          newState._queue = [];\r\n          // Nach Queue-Auflösung: Hand-Arrays immutabel neu zuweisen\r\n          afterQueueResolved?.();\r\n        }\r\n\r\n      // Check for trap triggers\r\n      applyTrapsOnCardPlayed(\r\n        newState,\r\n        player,\r\n        selectedCard,\r\n        (e) => (newState._effectQueue ??= []).push(e),\r\n        (m) => (newState._effectQueue ??= []).push({ type: 'LOG', msg: m })\r\n      );\r\n\r\n      // 🔥 AP-REFUNDS nach dem Kartenspielen anwenden\r\n      applyApRefundsAfterPlay(newState, player, selectedCard);\r\n\r\n      // Kein Aktionenlimit mehr → automatischer Turnwechsel entfällt\r\n\r\n\r\n      return newState;\r\n    });\r\n  }, [setGameState, log]);\r\n\r\n  const activateInstantInitiative = useCallback((player: Player) => {\r\n    setGameState(prev => {\r\n      if (prev.current !== player) {\r\n        log(`❌ ERROR: Not player turn - Current: ${prev.current}, Attempted: ${player}`);\r\n        return prev;\r\n      }\r\n\r\n      const instantCard = prev.board[player].sofort[0];\r\n      if (!instantCard) {\r\n        log(`❌ ERROR: No Sofort-Initiative in slot for player ${player}`);\r\n        return prev;\r\n      }\r\n\r\n      const newState = { ...prev };\r\n\r\n      // 1) Normale Karten-Effekte der Sofort-Karte feuern\r\n      triggerCardEffects(newState, player, instantCard);\r\n\r\n      // Check for trap triggers\r\n      applyTrapsOnCardPlayed(\r\n        newState,\r\n        player,\r\n        instantCard,\r\n        (e) => (newState._effectQueue ??= []).push(e),\r\n        (m) => (newState._effectQueue ??= []).push({ type: 'LOG', msg: m })\r\n      );\r\n\r\n      // 2) Karte nach Aktivierung in den Ablagestapel\r\n      const [played] = newState.board[player].sofort.splice(0, 1);\r\n      newState.discard.push(played);\r\n\r\n      // 3) Queue auflösen\r\n      // Queue needs array of events\r\n        if (newState._queue && newState._queue.length > 0) {\r\n          resolveQueue(newState, newState._queue);\r\n          newState._queue = [];\r\n          // Nach Queue-Auflösung: Hand-Arrays immutabel neu zuweisen\r\n          afterQueueResolved?.();\r\n        }\r\n\r\n      return newState;\r\n    });\r\n  }, [setGameState, log]);\r\n\r\n  const endTurn = useCallback((reason: 'button_end_turn' | 'auto' = 'button_end_turn') => {\r\n    setGameState((prev): GameState => {\r\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n      const current = prev.current;\r\n\r\n      // 1) Schon im Abschluss? -> Nichts tun (Idempotenz)\r\n      if (prev.isEndingTurn) {\r\n        log('🔁 Zugabschluss läuft bereits – warte auf Queue.');\r\n        return prev;\r\n      }\r\n\r\n      const newState = { ...prev, isEndingTurn: true };\r\n\r\n      // 2) Hängen noch Effekte in der Queue? -> Auflösen lassen\r\n      if (newState._effectQueue && newState._effectQueue.length > 0) {\r\n        log('⏳ Effekte werden noch aufgelöst – Zugwechsel folgt automatisch.');\r\n        resolveQueue(newState, [...newState._effectQueue]);\r\n        newState._effectQueue = [];\r\n        // Nach Queue-Auflösung: Wenn Flag noch gesetzt, Zug beenden\r\n        if (newState.isEndingTurn) {\r\n          return reallyEndTurn(newState, log);\r\n        }\r\n        return newState;\r\n      }\r\n\r\n      // 3) Keine Effekte mehr -> sofort beenden\r\n      return reallyEndTurn(newState, log);\r\n    });\r\n  }, [setGameState, log]);\r\n\r\n  // Legacy: nextTurn als Alias für endTurn für Kompatibilität\r\n  const nextTurn = useCallback(() => {\r\n    endTurn('auto');\r\n  }, [endTurn]);\r\n\r\n    const passTurn = useCallback((player: Player) => {\r\n    console.log(`🔧 DEBUG: passTurn called for player ${player}`);\r\n\r\n    setGameState(prev => {\r\n      console.log(`🔧 DEBUG: passTurn setState - current: ${prev.current}, player: ${player}`);\r\n\r\n      if (prev.current !== player) {\r\n        console.log(`🔧 DEBUG: Wrong player turn - current: ${prev.current}, attempted: ${player}`);\r\n        return prev;\r\n      }\r\n\r\n      const newState = { ...prev, passed: { ...prev.passed, [player]: true } };\r\n      console.log(`🔧 DEBUG: Pass status updated - P1: ${newState.passed[1]}, P2: ${newState.passed[2]}`);\r\n      log(`🚫 Spieler ${player} passt.`);\r\n\r\n      // ❗ Kein Nachziehen bei Pass:\r\n      // Der passierende Spieler kommt in dieser Runde nicht mehr dran.\r\n      // Die nächste Runde startet ohnehin mit 5 neuen Handkarten.\r\n\r\n      // Check if round should end (both players passed)\r\n      const shouldEndRound = checkRoundEnd(newState);\r\n      console.log(`🔧 DEBUG: Should end round? ${shouldEndRound}`);\r\n\r\n      if (shouldEndRound) {\r\n        log(`🏁 Runde ${newState.round} wird beendet und ausgewertet.`);\r\n        return resolveRound(newState, log);\r\n      } else {\r\n        // Switch turn to other player for their final chance\r\n        const otherPlayer: Player = player === 1 ? 2 : 1;\r\n        console.log(`🔧 DEBUG: Switching to other player ${otherPlayer}, has passed: ${newState.passed[otherPlayer]}`);\r\n\r\n        // Only switch if other player hasn't passed yet\r\n        if (!newState.passed[otherPlayer]) {\r\n          newState.current = otherPlayer;\r\n          newState.actionPoints = { ...newState.actionPoints, [otherPlayer]: 2 };\r\n          newState.actionsUsed = { ...newState.actionsUsed, [otherPlayer]: 0 };\r\n\r\n          // Apply new start-of-turn hooks\r\n          applyStartOfTurnFlags(newState, otherPlayer, log);\r\n\r\n        // 🔥 CLUSTER 3: Auren-Flags beim Zugstart neu berechnen\r\n        recomputeAuraFlags(newState);\r\n\r\n          log(`⏭️ Spieler ${otherPlayer} hat noch einen letzten Zug.`);\r\n          console.log(`🔧 DEBUG: Turn switched to player ${otherPlayer}`);\r\n        } else {\r\n          // Both players have passed now, end round\r\n          log(`🏁 Runde ${newState.round} wird beendet (beide Spieler haben gepasst).`);\r\n          return resolveRound(newState, log);\r\n        }\r\n      }\r\n\r\n      return newState;\r\n    });\r\n  }, [setGameState, log]);\r\n\r\n  return {\r\n    startMatchWithDecks,\r\n    startMatchVsAI,\r\n    playCard,\r\n    activateInstantInitiative,\r\n    passTurn,\r\n    nextTurn,\r\n    endTurn,\r\n  };\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}