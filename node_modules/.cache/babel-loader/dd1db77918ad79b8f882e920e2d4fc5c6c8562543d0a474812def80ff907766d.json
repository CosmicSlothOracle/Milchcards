{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useCallback } from 'react';\nimport { createDefaultEffectFlags } from '../types/game';\nimport { Pols, Specials, PRESET_DECKS } from '../data/gameData';\nimport { sumRow, shuffle, makePolInstance, makeSpecInstance, buildDeckFromEntries, drawCards, drawCardsAtRoundEnd, tryApplyNegativeEffect, adjustInfluence, findCardLocation, sumGovernmentInfluenceWithAuras, EffectQueueManager, ActiveAbilitiesManager } from '../utils/gameUtils';\nimport { getCardDetails } from '../data/cardDetails';\nimport { useGameActions } from './useGameActions';\nimport { useGameAI } from './useGameAI';\nimport { useGameEffects } from './useGameEffects';\nimport { applyStartOfTurnHooks } from '../utils/startOfTurnHooks';\nimport { emptyBoard } from '../state/board';\nconst initialGameState = {\n  round: 1,\n  current: 1,\n  passed: {\n    1: false,\n    2: false\n  },\n  actionPoints: {\n    1: 2,\n    2: 2\n  },\n  actionsUsed: {\n    1: 0,\n    2: 0\n  },\n  decks: {\n    1: [],\n    2: []\n  },\n  hands: {\n    1: [],\n    2: []\n  },\n  traps: {\n    1: [],\n    2: []\n  },\n  board: emptyBoard(),\n  permanentSlots: {\n    1: {\n      government: null,\n      public: null,\n      initiativePermanent: null\n    },\n    2: {\n      government: null,\n      public: null,\n      initiativePermanent: null\n    }\n  },\n  discard: [],\n  log: [],\n  activeRefresh: {\n    1: 0,\n    2: 0\n  },\n  roundsWon: {\n    1: 0,\n    2: 0\n  },\n  gameWinner: null,\n  effectFlags: {\n    1: createDefaultEffectFlags(),\n    2: createDefaultEffectFlags()\n  },\n  effectQueue: EffectQueueManager.initializeQueue(),\n  activeAbilities: {\n    1: [],\n    2: []\n  },\n  pendingAbilitySelect: undefined,\n  aiEnabled: {\n    1: false,\n    2: false\n  }\n};\nexport function useGameState() {\n  _s();\n  const [gameState, setGameState] = useState(initialGameState);\n  const [selectedHandIndex, setSelectedHandIndex] = useState(null);\n  const log = useCallback(msg => {\n    const timestamp = new Date().toLocaleTimeString('de-DE', {\n      hour: '2-digit',\n      minute: '2-digit',\n      second: '2-digit'\n    });\n    const logEntry = `[${timestamp}] ${msg}`;\n    console.log(logEntry); // Also log to console for debugging\n\n    setGameState(prev => ({\n      ...prev,\n      log: [...prev.log, logEntry]\n    }));\n  }, []);\n\n  // Enhanced logging functions for different types of events\n  const logUIInteraction = useCallback((action, details) => {\n    log(`🎯 UI: ${action} - ${details}`);\n  }, [log]);\n  const logGameStateChange = useCallback((change, details) => {\n    log(`🔄 STATE: ${change} - ${details}`);\n  }, [log]);\n  const logAIAction = useCallback((action, details) => {\n    log(`🤖 KI: ${action} - ${details}`);\n  }, [log]);\n  const logCardEffect = useCallback((cardName, effect) => {\n    log(`✨ EFFEKT: ${cardName} - ${effect}`);\n  }, [log]);\n  const logIntervention = useCallback((interventionName, trigger) => {\n    log(`💥 INTERVENTION: ${interventionName} ausgelöst durch ${trigger}`);\n  }, [log]);\n\n  // New detailed logging functions for debugging\n  const logFunctionCall = useCallback((functionName, params, context) => {\n    const paramStr = typeof params === 'object' ? JSON.stringify(params, null, 2) : String(params);\n    log(`🔧 CALL: ${functionName}(${paramStr}) - ${context}`);\n  }, [log]);\n  const logDataFlow = useCallback((from, to, data, action) => {\n    const dataStr = typeof data === 'object' ? JSON.stringify(data, null, 2) : String(data);\n    log(`📊 FLOW: ${from} → ${to} | ${action} | Data: ${dataStr}`);\n  }, [log]);\n  const logConditionCheck = useCallback((condition, result, context) => {\n    log(`🔍 CHECK: ${condition} = ${result} - ${context}`);\n  }, [log]);\n  const logError = useCallback((error, context) => {\n    log(`❌ ERROR: ${error} - ${context}`);\n  }, [log]);\n  const logWarning = useCallback((warning, context) => {\n    log(`⚠️ WARN: ${warning} - ${context}`);\n  }, [log]);\n\n  // Nach Queue-Auflösung: Hand-Arrays immutabel neu zuweisen → Canvas & UI bekommen die neuen UIDs\n  const afterQueueResolved = useCallback(() => {\n    setGameState(s => {\n      var _version;\n      const n = {\n        ...s\n      };\n      n.hands = {\n        1: [...s.hands[1]],\n        2: [...s.hands[2]]\n      };\n      // optional: version bump für Canvas\n      n._version = ((_version = s._version) !== null && _version !== void 0 ? _version : 0) + 1;\n      return n;\n    });\n  }, []);\n\n  // Import functionality from separated hooks\n  const gameActions = useGameActions(gameState, setGameState, log, afterQueueResolved);\n  const gameAI = useGameAI(gameState, setGameState, log);\n  const gameEffects = useGameEffects(gameState, setGameState, log);\n  const dealStartingHands = useCallback(() => {\n    console.log('[DIAG] dealStartingHands called');\n    function buildDeck() {\n      const polPool = [...Pols];\n      const specPool = [...Specials];\n      shuffle(polPool);\n      shuffle(specPool);\n      const deck = [];\n      polPool.slice(0, 14).forEach(p => deck.push(makePolInstance(p)));\n\n      // prefer more useful/implemented specials\n      const implFirst = ['media', 'pledge', 'pledge2', 'sanctions', 'dnc1', 'dnc2', 'dnc3', 'reshuffle', 'mission', 'trap_fakenews', 'trap_protest', 'trap_scandal'];\n      const srt = specPool.slice().sort((a, b) => implFirst.indexOf(a.impl) - implFirst.indexOf(b.impl));\n      srt.slice(0, 11).forEach(s => deck.push(makeSpecInstance(s)));\n      return shuffle(deck).slice(0, 25);\n    }\n    const deck1 = buildDeck();\n    const deck2 = buildDeck();\n    console.log('[DIAG] built decks lengths', deck1.length, deck2.length);\n    setGameState(prev => ({\n      ...prev,\n      decks: {\n        1: deck1,\n        2: deck2\n      },\n      hands: {\n        1: deck1.splice(0, 5),\n        2: deck2.splice(0, 5)\n      }\n    }));\n    console.log('[DIAG] setGameState after deal: hands[1].length', deck1.length >= 5 ? 5 : deck1.length);\n  }, []);\n  const startNewGame = useCallback(() => {\n    setGameState({\n      ...initialGameState,\n      round: 1,\n      current: 1,\n      passed: {\n        1: false,\n        2: false\n      },\n      actionPoints: {\n        1: 2,\n        2: 2\n      },\n      actionsUsed: {\n        1: 0,\n        2: 0\n      },\n      board: emptyBoard(),\n      traps: {\n        1: [],\n        2: []\n      },\n      permanentSlots: {\n        1: {\n          government: null,\n          public: null,\n          initiativePermanent: null\n        },\n        2: {\n          government: null,\n          public: null,\n          initiativePermanent: null\n        }\n      },\n      // instantSlot wird nicht mehr verwendet - Sofort-Initiativen gehen in board[player].sofort\n      discard: [],\n      log: [],\n      activeRefresh: {\n        1: 0,\n        2: 0\n      }\n    });\n    dealStartingHands();\n  }, [dealStartingHands]);\n  const startMatchWithDecks = useCallback((p1DeckEntries, p2DeckEntries) => {\n    console.log('🔧 DEBUG: startMatchWithDecks called - activating AI for player 2');\n    // Automatically enable AI for player 2 when starting with decks\n    console.log('🔧 DEBUG: About to call gameAI.setAiEnabled(true)');\n    gameAI.setAiEnabled(true);\n    console.log('🔧 DEBUG: About to call gameAI.setAiPreset(AUTORITAERER_REALIST)');\n    gameAI.setAiPreset('AUTORITAERER_REALIST');\n    console.log('🔧 DEBUG: AI setup completed');\n    console.log('[DIAG] startMatchWithDecks - p1DeckEntries', p1DeckEntries.length, 'p2DeckEntries', p2DeckEntries.length);\n    console.log('[DIAG] startMatchWithDecks - sample entries:', p1DeckEntries.slice(0, 2), p2DeckEntries.slice(0, 2));\n    const p1Cards = buildDeckFromEntries(p1DeckEntries);\n    const p2Cards = buildDeckFromEntries(p2DeckEntries);\n    const d1 = [...p1Cards];\n    const d2 = [...p2Cards];\n    const h1 = d1.splice(0, Math.min(5, d1.length));\n    const h2 = d2.splice(0, Math.min(5, d2.length));\n    console.log('[DIAG] startMatchWithDecks - p1Cards', p1Cards.length, 'p2Cards', p2Cards.length);\n    console.log('[DIAG] startMatchWithDecks - h1', h1.length, 'h2', h2.length);\n    console.log('[DIAG] startMatchWithDecks - sample cards:', p1Cards.slice(0, 2), p2Cards.slice(0, 2));\n    setGameState({\n      ...initialGameState,\n      round: 1,\n      current: 1,\n      passed: {\n        1: false,\n        2: false\n      },\n      decks: {\n        1: d1,\n        2: d2\n      },\n      hands: {\n        1: h1,\n        2: h2\n      },\n      board: emptyBoard(),\n      traps: {\n        1: [],\n        2: []\n      },\n      permanentSlots: {\n        1: {\n          government: null,\n          public: null,\n          initiativePermanent: null\n        },\n        2: {\n          government: null,\n          public: null,\n          initiativePermanent: null\n        }\n      },\n      // instantSlot wird nicht mehr verwendet - Sofort-Initiativen gehen in board[player].sofort\n      discard: [],\n      log: [`Match gestartet. P1 und P2 erhalten je ${h1.length}/${h2.length} Startkarten.`],\n      activeRefresh: {\n        1: 0,\n        2: 0\n      }\n    });\n    console.log('[DIAG] setGameState called in startMatchWithDecks');\n  }, [gameAI]);\n  const startMatchVsAI = useCallback((p1DeckEntries, presetKey = 'AUTORITAERER_REALIST') => {\n    const p2DeckEntries = PRESET_DECKS[presetKey];\n    gameAI.setAiEnabled(true);\n    gameAI.setAiPreset(presetKey);\n    gameActions.startMatchWithDecks(p1DeckEntries, p2DeckEntries);\n  }, [gameAI, gameActions]);\n\n  // Prüfe ob der Zug automatisch gewechselt werden soll\n  const shouldAdvanceTurn = useCallback((gameState, player) => {\n    // Wenn Spieler gepasst hat\n    if (gameState.passed[player]) return true;\n\n    // Wenn keine AP mehr verfügbar sind\n    if (gameState.actionPoints[player] <= 0) return true;\n\n    // Wenn 2 Aktionen verwendet wurden\n    // if (gameState.actionsUsed[player] >= 2) return true;\n\n    return false;\n  }, []);\n\n  // Karten-Effekte implementieren\n  const executeCardEffect = useCallback((card, player, state, logFunc) => {\n    let newState = {\n      ...state\n    };\n    logFunctionCall('executeCardEffect', {\n      card: card.name,\n      player,\n      type: card.kind\n    }, 'Starting card effect execution');\n    if (card.kind === 'spec') {\n      const specCard = card;\n\n      // === SOFORT-INITIATIVEN ===\n      if (specCard.name === 'Shadow Lobbying') {\n        // Count own board cards with tag Oligarch\n        const boardCards = [...newState.board[player].innen, ...newState.board[player].aussen];\n        const oligarchCount = boardCards.filter(c => {\n          var _details$subcategorie;\n          const details = getCardDetails(c.name);\n          return details === null || details === void 0 ? void 0 : (_details$subcategorie = details.subcategories) === null || _details$subcategorie === void 0 ? void 0 : _details$subcategorie.includes('Oligarch');\n        }).length;\n        const buffAmount = Math.min(oligarchCount, 3);\n        if (buffAmount > 0) {\n          const govCards = newState.board[player].aussen.filter(c => c.kind === 'pol');\n          if (govCards.length) {\n            const target = govCards[0];\n            const oldInfl = target.influence;\n            adjustInfluence(target, buffAmount, 'Shadow Lobbying');\n            logCardEffect(specCard.name, `${target.name} erhält +${buffAmount} Einfluss ( ${oldInfl} → ${target.influence} )`);\n          } else {\n            logWarning('No government cards', 'Shadow Lobbying buff had no target');\n          }\n        } else {\n          logCardEffect(specCard.name, 'Keine Oligarchen – kein Einfluss-Buff');\n        }\n      } else if (specCard.name === 'Spin Doctor') {\n        const govCards = newState.board[player].aussen.filter(c => c.kind === 'pol');\n        logDataFlow('board analysis', 'govCards', {\n          count: govCards.length,\n          cards: govCards.map(c => c.name)\n        }, 'Finding government cards');\n        if (govCards.length > 0) {\n          const targetCard = govCards[0];\n          const oldInfluence = targetCard.influence;\n          adjustInfluence(targetCard, 2, 'Spin Doctor');\n          const newInfluence = targetCard.influence;\n          logCardEffect(specCard.name, `${targetCard.name} erhält +2 Einfluss (${oldInfluence} → ${newInfluence})`);\n          logDataFlow('influence adjustment', 'targetCard', {\n            card: targetCard.name,\n            old: oldInfluence,\n            new: newInfluence,\n            change: 2\n          }, 'Spin Doctor effect applied');\n        } else {\n          logWarning('No government cards found', 'Spin Doctor effect has no target');\n        }\n      } else if (specCard.name === 'Digitaler Wahlkampf') {\n        logCardEffect(specCard.name, 'Ziehe 2 Karten, nächste Initiative -1 AP');\n        const {\n          newHands,\n          newDecks\n        } = drawCards(player, 2, newState, logFunc);\n        newState = {\n          ...newState,\n          hands: newHands,\n          decks: newDecks\n        };\n\n        // Simplified AP system: No discounts\n        logDataFlow('effectFlags', 'newState', {\n          player\n        }, 'Platform effect applied');\n      } else if (specCard.name === 'Partei-Offensive') {\n        const opponent = player === 1 ? 2 : 1;\n        const oppGovCards = newState.board[opponent].aussen.filter(c => c.kind === 'pol' && !c.deactivated);\n        logDataFlow('opponent analysis', 'oppGovCards', {\n          opponent,\n          count: oppGovCards.length,\n          cards: oppGovCards.map(c => c.name)\n        }, 'Finding active opponent government cards');\n        if (oppGovCards.length > 0) {\n          const targetCard = oppGovCards[0];\n          targetCard.deactivated = true;\n          logCardEffect(specCard.name, `${targetCard.name} wird deaktiviert (bis Rundenende)`);\n          logDataFlow('card deactivation', 'targetCard', {\n            card: targetCard.name,\n            deactivated: true\n          }, 'Partei-Offensive effect applied');\n        } else {\n          logWarning('No active opponent government cards found', 'Partei-Offensive effect has no target');\n        }\n      } else if (specCard.name === 'Oppositionsblockade') {\n        const opponent = player === 1 ? 2 : 1;\n        const oppHand = newState.hands[opponent];\n        logDataFlow('opponent hand', 'analysis', {\n          opponent,\n          handSize: oppHand.length,\n          cards: oppHand.map(c => c.name)\n        }, 'Analyzing opponent hand');\n        if (oppHand.length > 0) {\n          const discardedCard = oppHand[Math.floor(Math.random() * oppHand.length)];\n          const newOppHand = oppHand.filter(c => c !== discardedCard);\n          newState.hands = {\n            ...newState.hands,\n            [opponent]: newOppHand\n          };\n          logCardEffect(specCard.name, `Gegner verliert ${discardedCard.name} aus der Hand`);\n          logDataFlow('card discard', 'opponent hand', {\n            card: discardedCard.name,\n            newHandSize: newOppHand.length\n          }, 'Oppositionsblockade effect applied');\n        } else {\n          logWarning('Opponent hand is empty', 'Oppositionsblockade effect has no target');\n        }\n      } else if (specCard.name === 'Opportunist') {\n        const opponent = player === 1 ? 2 : 1;\n        const oppBoard = newState.board[opponent];\n        const totalOppInfluence = sumRow([...oppBoard.innen, ...oppBoard.aussen]);\n        logDataFlow('opponent board analysis', 'influence calculation', {\n          opponent,\n          innen: oppBoard.innen.map(c => ({\n            name: c.name,\n            influence: c.kind === 'pol' ? c.influence : 0\n          })),\n          aussen: oppBoard.aussen.map(c => ({\n            name: c.name,\n            influence: c.kind === 'pol' ? c.influence : 0\n          })),\n          totalInfluence: totalOppInfluence\n        }, 'Calculating opponent total influence');\n        if (totalOppInfluence > 10) {\n          const {\n            newHands,\n            newDecks\n          } = drawCards(player, 1, newState, logFunc);\n          newState = {\n            ...newState,\n            hands: newHands,\n            decks: newDecks\n          };\n          logCardEffect(specCard.name, `Gegner hat ${totalOppInfluence} Einfluss (>10) - ziehe 1 Karte`);\n        } else {\n          logCardEffect(specCard.name, `Gegner hat ${totalOppInfluence} Einfluss (≤10) - kein Effekt`);\n        }\n      } else if (specCard.name === 'Think-tank') {\n        const {\n          newHands,\n          newDecks\n        } = drawCards(player, 1, newState, logFunc);\n        newState = {\n          ...newState,\n          hands: newHands,\n          decks: newDecks\n        };\n        logCardEffect(specCard.name, 'Ziehe 1 Karte');\n      } else if (specCard.name === 'Influencer-Kampagne') {\n        const publicCards = newState.board[player].innen.filter(c => c.kind === 'pol');\n        logDataFlow('public cards analysis', 'influence boost', {\n          count: publicCards.length,\n          cards: publicCards.map(c => c.name)\n        }, 'Finding public cards for influence boost');\n        publicCards.forEach(card => {\n          const oldInfluence = card.influence;\n          adjustInfluence(card, 1, 'Influencer-Kampagne');\n          const newInfluence = card.influence;\n          logCardEffect(specCard.name, `${card.name} erhält +1 Einfluss (${oldInfluence} → ${newInfluence})`);\n        });\n        if (publicCards.length === 0) {\n          logWarning('No public cards found', 'Influencer-Kampagne effect has no targets');\n        }\n      } else if (specCard.name === 'Systemrelevant') {\n        const opponent = player === 1 ? 2 : 1;\n        const oppGovCards = newState.board[opponent].aussen.filter(c => c.kind === 'pol');\n        logDataFlow('opponent government analysis', 'systemrelevant effect', {\n          count: oppGovCards.length,\n          cards: oppGovCards.map(c => c.name)\n        }, 'Finding opponent government cards');\n        if (oppGovCards.length > 0) {\n          const targetCard = oppGovCards[0];\n          const oldInfluence = targetCard.influence;\n          adjustInfluence(targetCard, -2, 'Systemrelevant');\n          const newInfluence = targetCard.influence;\n          logCardEffect(specCard.name, `${targetCard.name} verliert 2 Einfluss (${oldInfluence} → ${newInfluence})`);\n          logDataFlow('influence reduction', 'targetCard', {\n            card: targetCard.name,\n            old: oldInfluence,\n            new: newInfluence,\n            change: -2\n          }, 'Systemrelevant effect applied');\n        } else {\n          logWarning('No opponent government cards found', 'Systemrelevant effect has no target');\n        }\n      } else if (specCard.name === 'Symbolpolitik') {\n        const {\n          newHands,\n          newDecks\n        } = drawCards(player, 1, newState, logFunc);\n        newState = {\n          ...newState,\n          hands: newHands,\n          decks: newDecks\n        };\n        newState.actionPoints = {\n          ...newState.actionPoints,\n          [player]: Math.min(2, newState.actionPoints[player] + 1)\n        };\n        const oldAP = state.actionPoints[player];\n        const newAP = newState.actionPoints[player];\n        logCardEffect(specCard.name, `Ziehe 1 Karte, erhalte +1 AP (${oldAP} → ${newAP})`);\n        logDataFlow('AP gain', 'player', {\n          player,\n          old: oldAP,\n          new: newAP,\n          change: 1\n        }, 'Symbolpolitik effect applied');\n      } else if (specCard.name === 'Alexei Navalny') {\n        logCardEffect(specCard.name, 'Ziehe 1 Karte');\n        const {\n          newHands,\n          newDecks\n        } = drawCards(player, 1, newState, logFunc);\n        newState = {\n          ...newState,\n          hands: newHands,\n          decks: newDecks\n        };\n      } else if (specCard.name === 'Mukesh Ambani') {\n        logCardEffect(specCard.name, 'Ziehe 1 Karte');\n        const {\n          newHands,\n          newDecks\n        } = drawCards(player, 1, newState, logFunc);\n        newState = {\n          ...newState,\n          hands: newHands,\n          decks: newDecks\n        };\n      }\n\n      // Oligarch-Effekte\n      else if (['Elon Musk', 'Bill Gates', 'George Soros', 'Warren Buffett', 'Mukesh Ambani', 'Jeff Bezos', 'Alisher Usmanov', 'Gautam Adani', 'Jack Ma', 'Zhang Yiming', 'Roman Abramovich'].includes(specCard.name)) {\n        logCardEffect(specCard.name, 'Ziehe 1 Karte (Oligarch-Effekt)');\n        const {\n          newHands,\n          newDecks\n        } = drawCards(player, 1, newState, logFunc);\n        newState = {\n          ...newState,\n          hands: newHands,\n          decks: newDecks\n        };\n      }\n    }\n\n    // === DAUERHAFTE INITIATIVEN ===\n    if (card.kind === 'spec' && card.type === 'Dauerhaft-Initiative') {\n      const specCard = card;\n      if (specCard.name === 'Algorithmischer Diskurs') {\n        logCardEffect(specCard.name, 'Dauerhafte Initiative: Alle Medien-Karten geben +1 Einfluss');\n        // This effect will be applied in applyStartOfTurnHooks\n      } else if (specCard.name === 'Alternative Fakten') {\n        logCardEffect(specCard.name, 'Dauerhafte Initiative: Alle Oligarchen geben +1 Einfluss');\n        // This effect will be applied in applyStartOfTurnHooks\n      }\n    }\n\n    // === POLITIKER-KARTEN ===\n    else if (card.kind === 'pol') {\n      const polCard = card;\n      logCardEffect(polCard.name, `Politiker platziert - Basis-Einfluss: ${polCard.influence}`);\n    }\n    logDataFlow('executeCardEffect', 'newState', {\n      card: card.name,\n      effectsApplied: true\n    }, 'Card effect execution completed');\n    return newState;\n  }, [logFunctionCall, logCardEffect, logDataFlow, logWarning]);\n  const nextTurn = useCallback(() => {\n    logFunctionCall('nextTurn', {}, 'Starting turn change');\n    setGameState(prev => {\n      var _prev$aiEnabled$, _prev$aiEnabled, _prev$aiEnabled$2, _prev$aiEnabled2, _prev$aiEnabled$3, _prev$aiEnabled3;\n      logDataFlow('UI', 'nextTurn', {\n        current: prev.current,\n        passed: prev.passed\n      }, 'Turn change request');\n\n      // if both passed -> resolve round\n      logConditionCheck('both players passed', prev.passed[1] && prev.passed[2], 'Round end check');\n      if (prev.passed[1] && prev.passed[2]) {\n        logFunctionCall('resolveRound', {\n          round: prev.round\n        }, 'Both players passed - resolving round');\n        return resolveRound(prev);\n      }\n      const newCurrent = prev.current === 1 ? 2 : 1;\n      logDataFlow('turn change', 'newCurrent', {\n        old: prev.current,\n        new: newCurrent\n      }, 'Player switch');\n\n      // Reset AP for the new current player\n      const newActionPoints = {\n        ...prev.actionPoints\n      };\n      newActionPoints[newCurrent] = 2;\n      logDataFlow('AP reset', 'newCurrent', {\n        player: newCurrent,\n        oldAP: prev.actionPoints[newCurrent],\n        newAP: newActionPoints[newCurrent],\n        oldActions: 0,\n        newActions: 0\n      }, 'Resource reset for new player');\n\n      // Apply start-of-turn hooks for the new current player\n      const newState = {\n        ...prev,\n        current: newCurrent,\n        actionPoints: newActionPoints\n      };\n\n      // Log turn change\n      log(`Spieler ${newCurrent} ist am Zug (2 AP verfügbar)`);\n      logGameStateChange('turn change', `Player ${newCurrent} turn started`);\n      logFunctionCall('applyStartOfTurnHooks', {\n        player: newCurrent\n      }, 'Applying start-of-turn effects');\n      applyStartOfTurnHooks(newState, newCurrent, log);\n\n      // Check if AI should take turn\n      logConditionCheck('AI turn', newCurrent === 2 && ((_prev$aiEnabled$ = (_prev$aiEnabled = prev.aiEnabled) === null || _prev$aiEnabled === void 0 ? void 0 : _prev$aiEnabled[2]) !== null && _prev$aiEnabled$ !== void 0 ? _prev$aiEnabled$ : false), 'AI turn check');\n      if (newCurrent === 2 && ((_prev$aiEnabled$2 = (_prev$aiEnabled2 = prev.aiEnabled) === null || _prev$aiEnabled2 === void 0 ? void 0 : _prev$aiEnabled2[2]) !== null && _prev$aiEnabled$2 !== void 0 ? _prev$aiEnabled$2 : false)) {\n        logFunctionCall('runAITurn', {\n          player: newCurrent\n        }, 'Triggering AI turn');\n        // Use setTimeout to avoid state update conflicts\n        setTimeout(() => {\n          logAIAction('AI turn triggered', 'Starting AI turn execution');\n          gameAI.runAITurn();\n        }, 100);\n      }\n      logDataFlow('nextTurn', 'finalState', {\n        current: newState.current,\n        ap: newState.actionPoints[newCurrent],\n        aiEnabled: (_prev$aiEnabled$3 = (_prev$aiEnabled3 = prev.aiEnabled) === null || _prev$aiEnabled3 === void 0 ? void 0 : _prev$aiEnabled3[2]) !== null && _prev$aiEnabled$3 !== void 0 ? _prev$aiEnabled$3 : false\n      }, 'Turn change completed');\n      return newState;\n    });\n\n    // Nach Zugwechsel ebenfalls spiegeln (z. B. Auto-Draw am EoT)\n    afterQueueResolved();\n  }, [logFunctionCall, logDataFlow, logConditionCheck, logGameStateChange, gameAI, log, logAIAction, afterQueueResolved]);\n\n  // Automatischer Zugwechsel basierend auf AP\n  const checkAndAdvanceTurn = useCallback(gameState => {\n    const currentPlayer = gameState.current;\n    if (shouldAdvanceTurn(gameState, currentPlayer)) {\n      // Nur wechseln wenn der andere Spieler nicht auch fertig ist\n      const otherPlayer = currentPlayer === 1 ? 2 : 1;\n      if (!shouldAdvanceTurn(gameState, otherPlayer) || gameState.passed[otherPlayer]) {\n        nextTurn();\n      }\n    }\n  }, [shouldAdvanceTurn, nextTurn]);\n  const scores = useCallback(state => {\n    // Einheitliche Berechnung über Utils-Helfer\n    const s1 = sumGovernmentInfluenceWithAuras(state, 1);\n    const s2 = sumGovernmentInfluenceWithAuras(state, 2);\n    return [s1, s2];\n  }, []);\n  const resolveRound = useCallback(state => {\n    const [s1, s2] = scores(state);\n    let winner = 1;\n    let note = '';\n    if (s1 > s2) winner = 1;else if (s2 > s1) winner = 2;else {\n      // Gleichstand -> erster Pass gewinnt\n      winner = state.passed[1] && !state.passed[2] ? 1 : 2;\n      note = ' (Gleichstand – früherer Pass)';\n    }\n    log(`Runde ${state.round} endet: P1 ${s1} : P2 ${s2}. Gewinner: P${winner}${note}.`);\n\n    // Rundensieg zählen\n    const newRoundsWon = {\n      ...state.roundsWon\n    };\n    newRoundsWon[winner] += 1;\n\n    // Prüfe Best-of-3 Gewinner\n    let gameWinner = null;\n    if (newRoundsWon[1] >= 2) {\n      gameWinner = 1;\n      log(`🎉 SPIEL ENDE: Spieler 1 gewinnt das Spiel! (${newRoundsWon[1]}:${newRoundsWon[2]})`);\n    } else if (newRoundsWon[2] >= 2) {\n      gameWinner = 2;\n      log(`🎉 SPIEL ENDE: Spieler 2 gewinnt das Spiel! (${newRoundsWon[2]}:${newRoundsWon[1]})`);\n    }\n\n    // clear board (no carryover)\n    const newBoard = emptyBoard();\n    const newTraps = {\n      1: [],\n      2: []\n    };\n\n    // Verbesserte Karten-Nachzieh-Mechanik (ziehe bis Hand voll ist)\n    const {\n      newHands,\n      newDecks\n    } = drawCardsAtRoundEnd(state, log);\n    const newRound = state.round + 1;\n    const newPassed = {\n      1: false,\n      2: false\n    };\n    // alternate starter each round\n    const newCurrent = newRound % 2 === 1 ? 1 : 2;\n\n    // Wenn Spiel zu Ende, stoppe\n    if (gameWinner) {\n      return {\n        ...state,\n        roundsWon: newRoundsWon,\n        gameWinner\n      };\n    }\n    log(`Runde ${newRound} beginnt. P${newCurrent} startet.`);\n\n    // 🔥 CLUSTER 3: Reset temporäre Initiative-Boni am Rundenende\n    const newEffectFlags = {\n      1: {\n        ...state.effectFlags[1],\n        // Reset Cluster 3 Flags\n        scienceInitiativeBonus: false,\n        militaryInitiativePenalty: false,\n        healthInitiativeBonus: false,\n        cultureInitiativeBonus: false,\n        // Reset andere rundenbasierte Flags\n        markZuckerbergUsed: false,\n        opportunistActive: false,\n        publicEffectDoubled: false,\n        cannotPlayInitiatives: false,\n        nextCardProtected: false,\n        platformAfterInitiativeBonus: false,\n        interventionEffectReduced: false\n      },\n      2: {\n        ...state.effectFlags[2],\n        // Reset Cluster 3 Flags\n        scienceInitiativeBonus: false,\n        militaryInitiativePenalty: false,\n        healthInitiativeBonus: false,\n        cultureInitiativeBonus: false,\n        // Reset andere rundenbasierte Flags\n        markZuckerbergUsed: false,\n        opportunistActive: false,\n        publicEffectDoubled: false,\n        cannotPlayInitiatives: false,\n        nextCardProtected: false,\n        platformAfterInitiativeBonus: false,\n        interventionEffectReduced: false\n      }\n    };\n    return {\n      ...state,\n      round: newRound,\n      current: newCurrent,\n      passed: newPassed,\n      board: newBoard,\n      traps: newTraps,\n      hands: newHands,\n      decks: newDecks,\n      roundsWon: newRoundsWon,\n      effectFlags: newEffectFlags\n    };\n  }, [log, scores]);\n\n  // Einfache Interventionsauswertung für einige häufige Trigger\n  const evaluateInterventions = (prev, actingPlayer, event, tentativeBoard) => {\n    const opponent = actingPlayer === 1 ? 2 : 1;\n    const oppTraps = [...(prev.traps[opponent] || [])];\n    let board = tentativeBoard;\n    let trapsChanged = false;\n    for (let i = 0; i < oppTraps.length; i++) {\n      const trap = oppTraps[i];\n      if (trap.kind !== 'spec') continue;\n      const spec = trap;\n      const details = getCardDetails(spec.name);\n      const key = spec.key;\n\n      // Trigger: Karte gespielt\n      if (event.type === 'card_played' && event.card) {\n        const played = event.card;\n        const isMedia = ['Oprah Winfrey'].includes(played.name);\n        const isNGO = ['Bill Gates', 'Jennifer Doudna', 'Noam Chomsky'].includes(played.name);\n        const isPlatform = ['Mark Zuckerberg', 'Tim Cook', 'Jack Ma', 'Zhang Yiming'].includes(played.name);\n        const isDiplomat = ['Joschka Fischer', 'Sergey Lavrov', 'Ursula von der Leyen', 'Jens Stoltenberg', 'Hans Dietrich Genscher', 'Colin Powell', 'Condoleezza Rice', 'Christine Lagarde'].includes(played.name);\n        const isTier2Gov = played.T === 2 && event.lane === 'aussen';\n        const isTier1Gov = played.T === 1 && event.lane === 'aussen';\n        const isWeakGov = played.influence <= 5 && event.lane === 'aussen';\n        const isLowPowerGov = played.influence <= 4 && event.lane === 'aussen';\n\n        // Cancel Culture / Fake News-Kampagne\n        if (((details === null || details === void 0 ? void 0 : details.name) === 'Cancel Culture' || key === 'Cancel_Culture') && event.lane === 'innen') {\n          tryApplyNegativeEffect(played, () => {\n            played.deactivated = true;\n          }, prev.round);\n          oppTraps.splice(i, 1);\n          i--;\n          trapsChanged = true;\n          log(`Intervention ausgelöst: Cancel Culture → ${played.name} deaktiviert.`);\n          logIntervention('Cancel Culture', `Ausgelöst gegen ${played.name} in Öffentlichkeit`);\n          continue;\n        }\n        if (((details === null || details === void 0 ? void 0 : details.name) === 'Fake News-Kampagne' || key === 'Fake_News_Kampagne') && isMedia) {\n          tryApplyNegativeEffect(played, () => {\n            played.deactivated = true;\n          }, prev.round);\n          oppTraps.splice(i, 1);\n          i--;\n          trapsChanged = true;\n          log(`Intervention ausgelöst: Fake News-Kampagne → ${played.name} deaktiviert.`);\n          logIntervention('Fake News-Kampagne', `Ausgelöst gegen ${played.name} (Medien)`);\n          continue;\n        }\n\n        // Whistleblower (Tier 2 Regierung)\n        if (((details === null || details === void 0 ? void 0 : details.name) === 'Whistleblower' || key === 'Whistleblower') && isTier2Gov) {\n          tryApplyNegativeEffect(played, () => {\n            adjustInfluence(played, -2, 'Whistleblower');\n          }, prev.round);\n          oppTraps.splice(i, 1);\n          i--;\n          trapsChanged = true;\n          log(`Intervention ausgelöst: Whistleblower → ${played.name} -2 Einfluss.`);\n          continue;\n        }\n\n        // Berater-Affäre (Tier 1 Regierung)\n        if (((details === null || details === void 0 ? void 0 : details.name) === 'Berater-Affäre' || key === 'Berater_Affaere') && isTier1Gov) {\n          tryApplyNegativeEffect(played, () => {\n            adjustInfluence(played, -2, 'Berater-Affäre');\n          }, prev.round);\n          oppTraps.splice(i, 1);\n          i--;\n          trapsChanged = true;\n          log(`Intervention ausgelöst: Berater-Affäre → ${played.name} -2 Einfluss.`);\n          continue;\n        }\n\n        // Soft Power-Kollaps / Deepfake-Skandal (Diplomat)\n        if (((details === null || details === void 0 ? void 0 : details.name) === 'Soft Power-Kollaps' || key === 'Soft_Power_Kollaps') && isDiplomat) {\n          tryApplyNegativeEffect(played, () => {\n            adjustInfluence(played, -3, 'Soft Power-Kollaps');\n          }, prev.round);\n          oppTraps.splice(i, 1);\n          i--;\n          trapsChanged = true;\n          log(`Intervention ausgelöst: Soft Power-Kollaps → ${played.name} -3 Einfluss.`);\n          continue;\n        }\n        if (((details === null || details === void 0 ? void 0 : details.name) === 'Deepfake-Skandal' || key === 'Deepfake_Skandal') && isDiplomat) {\n          var _prev$effectFlags;\n          // Kein Einflusstransfer möglich - Flag setzen\n          const newFlags = {\n            ...((_prev$effectFlags = prev.effectFlags) === null || _prev$effectFlags === void 0 ? void 0 : _prev$effectFlags[actingPlayer]),\n            influenceTransferBlocked: true\n          };\n          prev.effectFlags = {\n            ...prev.effectFlags,\n            [actingPlayer]: newFlags\n          };\n          oppTraps.splice(i, 1);\n          i--;\n          trapsChanged = true;\n          log(`Intervention ausgelöst: Deepfake-Skandal → ${played.name} kann keinen Einfluss transferieren.`);\n          continue;\n        }\n\n        // Lobby Leak / Boykott-Kampagne (NGO/Bewegung)\n        if (((details === null || details === void 0 ? void 0 : details.name) === 'Lobby Leak' || key === 'Lobby_Leak') && isNGO) {\n          const hands = {\n            ...prev.hands\n          };\n          if (hands[actingPlayer].length > 0) {\n            hands[actingPlayer] = hands[actingPlayer].slice(1);\n            prev.hands = hands;\n          }\n          oppTraps.splice(i, 1);\n          i--;\n          trapsChanged = true;\n          log(`Intervention ausgelöst: Lobby Leak → P${actingPlayer} wirft 1 Karte ab.`);\n          continue;\n        }\n        if (((details === null || details === void 0 ? void 0 : details.name) === 'Boykott-Kampagne' || key === 'Boykott_Kampagne') && (isNGO || ['Greta Thunberg', 'Malala Yousafzai', 'Ai Weiwei', 'Alexei Navalny'].includes(played.name))) {\n          tryApplyNegativeEffect(played, () => {\n            played.deactivated = true;\n          }, prev.round);\n          oppTraps.splice(i, 1);\n          i--;\n          trapsChanged = true;\n          log(`Intervention ausgelöst: Boykott-Kampagne → ${played.name} deaktiviert.`);\n          continue;\n        }\n\n        // Cyber-Attacke (Plattform)\n        if (((details === null || details === void 0 ? void 0 : details.name) === 'Cyber-Attacke' || key === 'Cyber_Attacke') && isPlatform) {\n          const loc = findCardLocation(played, {\n            ...prev,\n            board\n          });\n          if (loc) {\n            const arr = [...board[loc.player][loc.lane]];\n            const idx = arr.findIndex(c => c.uid === played.uid);\n            if (idx >= 0) {\n              arr.splice(idx, 1);\n              board = {\n                ...board,\n                [loc.player]: {\n                  ...board[loc.player],\n                  [loc.lane]: arr\n                }\n              };\n            }\n          }\n          oppTraps.splice(i, 1);\n          i--;\n          trapsChanged = true;\n          log(`Intervention ausgelöst: Cyber-Attacke → ${played.name} zerstört.`);\n          continue;\n        }\n      }\n\n      // Trigger: Board-Zustand\n      if (event.type === 'board_state_check') {\n        var _event$card, _event$card2;\n        const actingPlayerGovCount = tentativeBoard[actingPlayer].aussen.length;\n        const actingPlayerPubCount = tentativeBoard[actingPlayer].innen.length;\n\n        // Strategische Enthüllung (>2 Regierungskarten)\n        if (((details === null || details === void 0 ? void 0 : details.name) === 'Strategische Enthüllung' || key === 'Strategische_Enthuellung') && actingPlayerGovCount > 2) {\n          // Eine Regierungskarte zurück auf Hand (vereinfacht: entferne erste)\n          const govCards = [...tentativeBoard[actingPlayer].aussen];\n          if (govCards.length > 0) {\n            govCards.pop(); // Entferne letzte\n            board = {\n              ...board,\n              [actingPlayer]: {\n                ...board[actingPlayer],\n                aussen: govCards\n              }\n            };\n          }\n          oppTraps.splice(i, 1);\n          i--;\n          trapsChanged = true;\n          log(`Intervention ausgelöst: Strategische Enthüllung → Regierungskarte zurück.`);\n          continue;\n        }\n\n        // Grassroots-Widerstand (>2 Öffentlichkeitskarten)\n        if (((details === null || details === void 0 ? void 0 : details.name) === 'Grassroots-Widerstand' || key === 'Grassroots_Widerstand') && actingPlayerPubCount > 2) {\n          const pubCards = tentativeBoard[actingPlayer].innen.filter(c => c.kind === 'pol');\n          if (pubCards.length > 0) {\n            tryApplyNegativeEffect(pubCards[0], () => {\n              pubCards[0].deactivated = true;\n            }, prev.round);\n          }\n          oppTraps.splice(i, 1);\n          i--;\n          trapsChanged = true;\n          log(`Intervention ausgelöst: Grassroots-Widerstand → Öffentlichkeitskarte deaktiviert.`);\n          continue;\n        }\n\n        // Parlament geschlossen (≥2 Regierungskarten)\n        if (((details === null || details === void 0 ? void 0 : details.name) === 'Parlament geschlossen' || key === 'Parlament_geschlossen') && actingPlayerGovCount >= 2) {\n          var _prev$effectFlags2;\n          // Blockiere weitere Regierungskarten (Flag für diesen Zug)\n          const newFlags = {\n            ...((_prev$effectFlags2 = prev.effectFlags) === null || _prev$effectFlags2 === void 0 ? void 0 : _prev$effectFlags2[actingPlayer]),\n            cannotPlayMoreGovernment: true\n          };\n          prev.effectFlags = {\n            ...prev.effectFlags,\n            [actingPlayer]: newFlags\n          };\n          oppTraps.splice(i, 1);\n          i--;\n          trapsChanged = true;\n          log(`Intervention ausgelöst: Parlament geschlossen → keine weiteren Regierungskarten.`);\n          continue;\n        }\n\n        // Interne Fraktionskämpfe (große Initiative 3-4 HP)\n        if (((details === null || details === void 0 ? void 0 : details.name) === 'Interne Fraktionskämpfe' || key === 'Interne_Fraktionskaempfe') && event.type === 'card_played' && ((_event$card = event.card) === null || _event$card === void 0 ? void 0 : _event$card.kind) === 'spec') {\n          const specCard = event.card;\n          const isLargeInitiative = specCard.type === 'Sofort-Initiative' && specCard.bp >= 3;\n          if (isLargeInitiative) {\n            // Initiative annullieren (vereinfacht: Karte zurück auf Hand)\n            const hands = {\n              ...prev.hands\n            };\n            hands[actingPlayer].push(event.card);\n            prev.hands = hands;\n            oppTraps.splice(i, 1);\n            i--;\n            trapsChanged = true;\n            log(`Intervention ausgelöst: Interne Fraktionskämpfe → ${event.card.name} wird annulliert.`);\n            continue;\n          }\n        }\n\n        // Massenproteste (2 Regierungskarten in der Runde)\n        if (((details === null || details === void 0 ? void 0 : details.name) === 'Massenproteste' || key === 'Massenproteste') && event.type === 'card_played' && event.lane === 'aussen') {\n          // Vereinfacht: Beide Regierungskarten -1 Einfluss\n          const govCards = board[actingPlayer].aussen.filter(c => c.kind === 'pol');\n          if (govCards.length >= 2) {\n            adjustInfluence(govCards[0], -1, 'Massenproteste');\n            adjustInfluence(govCards[1], -1, 'Massenproteste');\n            oppTraps.splice(i, 1);\n            i--;\n            trapsChanged = true;\n            log(`Intervention ausgelöst: Massenproteste → ${govCards[0].name} und ${govCards[1].name} -1 Einfluss.`);\n            continue;\n          }\n        }\n\n        // \"Unabhängige\" Untersuchung (gegen Intervention)\n        if (((details === null || details === void 0 ? void 0 : details.name) === '\"Unabhängige\" Untersuchung' || key === 'Unabhaengige_Untersuchung') && event.type === 'card_played' && ((_event$card2 = event.card) === null || _event$card2 === void 0 ? void 0 : _event$card2.kind) === 'spec') {\n          const specCard = event.card;\n          if (specCard.type === 'Intervention') {\n            // Intervention annullieren (vereinfacht: Karte zurück auf Hand)\n            const hands = {\n              ...prev.hands\n            };\n            hands[actingPlayer].push(event.card);\n            prev.hands = hands;\n            oppTraps.splice(i, 1);\n            i--;\n            trapsChanged = true;\n            log(`Intervention ausgelöst: \"Unabhängige\" Untersuchung → ${event.card.name} wird annulliert.`);\n            continue;\n          }\n        }\n\n        // Maulwurf (kopiere schwächere Regierungskarte des Gegners)\n        if (((details === null || details === void 0 ? void 0 : details.name) === 'Maulwurf' || key === 'Maulwurf') && event.type === 'card_played' && event.lane === 'aussen') {\n          const oppGovCards = board[opponent].aussen.filter(c => c.kind === 'pol');\n          if (oppGovCards.length > 0) {\n            // Finde schwächste Regierungskarte\n            const weakestCard = oppGovCards.reduce((weakest, current) => current.influence < weakest.influence ? current : weakest);\n            // Kopie erstellen (vereinfacht: gleiche Karte auf eigene Hand)\n            const hands = {\n              ...prev.hands\n            };\n            const copyCard = {\n              ...weakestCard,\n              uid: Date.now() + Math.random()\n            };\n            hands[opponent].push(copyCard);\n            prev.hands = hands;\n            oppTraps.splice(i, 1);\n            i--;\n            trapsChanged = true;\n            log(`Intervention ausgelöst: Maulwurf → Kopie von ${weakestCard.name} auf Hand.`);\n            continue;\n          }\n        }\n\n        // Skandalspirale (Initiative + Öffentlichkeitskarte)\n        if (((details === null || details === void 0 ? void 0 : details.name) === 'Skandalspirale' || key === 'Skandalspirale') && event.type === 'card_played') {\n          // Vereinfacht: Prüfe ob Initiative und Öffentlichkeitskarte in dieser Runde gespielt wurden\n          const recentCards = board[actingPlayer].innen.concat(board[actingPlayer].aussen);\n          const hasInitiative = recentCards.some(c => c.kind === 'spec' && c.type === 'Sofort-Initiative');\n          const hasPublic = recentCards.some(c => c.kind === 'spec' && c.type === 'Öffentlichkeitskarte');\n          if (hasInitiative && hasPublic) {\n            // Eine der beiden Karten annullieren (vereinfacht: letzte Öffentlichkeitskarte)\n            const pubCards = board[actingPlayer].innen.filter(c => c.kind === 'spec' && c.type === 'Öffentlichkeitskarte');\n            if (pubCards.length > 0) {\n              const lastPubCard = pubCards[pubCards.length - 1];\n              const arr = [...board[actingPlayer].innen];\n              const idx = arr.findIndex(c => c.uid === lastPubCard.uid);\n              if (idx >= 0) {\n                arr.splice(idx, 1);\n                board = {\n                  ...board,\n                  [actingPlayer]: {\n                    ...board[actingPlayer],\n                    innen: arr\n                  }\n                };\n              }\n            }\n            oppTraps.splice(i, 1);\n            i--;\n            trapsChanged = true;\n            log(`Intervention ausgelöst: Skandalspirale → Öffentlichkeitskarte annulliert.`);\n            continue;\n          }\n        }\n\n        // Satire-Show (bei mehr Einfluss als Gegner)\n        if ((details === null || details === void 0 ? void 0 : details.name) === 'Satire-Show' || key === 'Satire_Show') {\n          const playerInfluence = sumRow([...board[opponent].aussen]);\n          const opponentInfluence = sumRow([...board[actingPlayer].aussen]);\n          if (opponentInfluence > playerInfluence) {\n            const oppGovCards = board[opponent].aussen.filter(c => c.kind === 'pol');\n            if (oppGovCards.length > 0) {\n              // Erste Regierungskarte -2 Einfluss\n              adjustInfluence(oppGovCards[0], -2, 'Satire-Show');\n              oppTraps.splice(i, 1);\n              i--;\n              trapsChanged = true;\n              log(`Intervention ausgelöst: Satire-Show → ${oppGovCards[0].name} -2 Einfluss.`);\n              continue;\n            }\n          }\n        }\n      }\n    }\n    if (trapsChanged) {\n      const newTraps = {\n        ...prev.traps,\n        [opponent]: oppTraps\n      };\n      return [board, newTraps];\n    }\n    return [null, null];\n  };\n\n  // Zentrale Effekt-Queue Verarbeitung\n  const processEffectQueue = useCallback(state => {\n    if (!state.effectQueue || state.effectQueue.items.length === 0) {\n      return state;\n    }\n    const [newQueue, newState] = EffectQueueManager.processQueue(state.effectQueue, state, log);\n    return {\n      ...newState,\n      effectQueue: newQueue\n    };\n  }, [log]);\n\n  // Berechne Einfluss mit dauerhaften Auren-Effekten\n  const sumRowWithAuras = (state, player) => {\n    const govCards = state.board[player].aussen.filter(c => c.kind === 'pol');\n    const opponent = player === 1 ? 2 : 1;\n    let total = 0;\n\n    // 🔍 DEBUG: Log welche Regierungskarten gefunden wurden\n    console.log(`🔍 sumRowWithAuras P${player}: Gefunden ${govCards.length} Regierungskarten:`, govCards.map(c => `${c.name}[${c.influence}I]`).join(', '));\n    govCards.forEach(card => {\n      let influence = card.influence;\n\n      // Dauerhafte Auren anwenden\n      const govSlot = state.permanentSlots[player].government;\n      const pubSlot = state.permanentSlots[player].public;\n\n      // Koalitionszwang: Old Tier 2 bonus removed - now uses complex coalition bonus calculation\n\n      // Napoleon Komplex: Tier 1 Regierungskarten +1 Einfluss\n      if ((govSlot === null || govSlot === void 0 ? void 0 : govSlot.kind) === 'spec' && govSlot.name === 'Napoleon Komplex') {\n        if (card.T === 1) influence += 1;\n      }\n\n      // Zivilgesellschaft: Bewegung-Karten +1 Einfluss\n      if ((pubSlot === null || pubSlot === void 0 ? void 0 : pubSlot.kind) === 'spec' && pubSlot.name === 'Zivilgesellschaft') {\n        const bewegungNames = ['Greta Thunberg', 'Malala Yousafzai', 'Ai Weiwei', 'Alexei Navalny'];\n        const hasBewegung = state.board[player].innen.some(c => c.kind === 'spec' && c.type === 'Öffentlichkeitskarte' && bewegungNames.includes(c.name));\n        if (hasBewegung) influence += 1;\n      }\n\n      // 🔥 JOSCHKA FISCHER NGO-BOOST: +1 Einfluss wenn NGO auf dem Board liegt\n      if (card.name === 'Joschka Fischer' && card.effect === 'ngo_boost') {\n        const hasNgoCard = state.board[player].innen.some(c => c.kind === 'spec' && c.type === 'Öffentlichkeitskarte' && c.tag === 'NGO');\n        if (hasNgoCard) {\n          influence += 1;\n          // Log nur beim ersten Mal, um Spam zu vermeiden\n          if (!card._ngoBoostLogged) {\n            console.log(`🔥 JOSCHKA FISCHER KONTINUIERLICHER NGO-BOOST: +1 Einfluss`);\n            card._ngoBoostLogged = true;\n          }\n        } else {\n          card._ngoBoostLogged = false;\n        }\n      }\n\n      // Milchglas Transparenz: +1 Einfluss wenn keine NGO/Bewegung liegt\n      if ((govSlot === null || govSlot === void 0 ? void 0 : govSlot.kind) === 'spec' && govSlot.name === 'Milchglas Transparenz') {\n        const ngoMovementNames = ['Jennifer Doudna', 'Noam Chomsky', 'Bill Gates', 'Greta Thunberg', 'Malala Yousafzai', 'Ai Weiwei', 'Alexei Navalny'];\n        const hasNgoMovement = state.board[player].innen.some(c => c.kind === 'spec' && c.type === 'Öffentlichkeitskarte' && ngoMovementNames.includes(c.name));\n        if (!hasNgoMovement) influence += 1;\n      }\n\n      // Alternative Fakten: Gegner-Interventionen -1 Wirkung\n      const oppPubSlot = state.permanentSlots[opponent].public;\n      if ((oppPubSlot === null || oppPubSlot === void 0 ? void 0 : oppPubSlot.kind) === 'spec' && oppPubSlot.name === 'Alternative Fakten') {\n        // Reduziere Effekt von Interventionen (vereinfacht: -1 Einfluss weniger)\n        // Wird in der Intervention-Auswertung berücksichtigt\n      }\n      total += influence;\n    });\n\n    // 🔍 DEBUG: Final influence calculation\n    console.log(`🎯 sumRowWithAuras P${player}: Gesamt-Einfluss = ${total}`);\n    return total;\n  };\n\n  // playCard is now handled by useGameActions hook\n\n  // runAITurn is now handled by useGameAI hook - removed duplicate implementation\n\n  const applyStartOfTurnHooksLegacy = useCallback((player, state) => {\n    logFunctionCall('applyStartOfTurnHooksLegacy', {\n      player,\n      round: state.round\n    }, 'Starting legacy turn hooks');\n    const pool = [...state.board[player].innen, ...state.board[player].aussen];\n    pool.forEach(c => {\n      if (c.kind === 'pol') {\n        const polCard = c;\n        if (polCard._pledgeDown && polCard._pledgeDown.round === state.round) {\n          const oldInfluence = polCard.influence;\n          adjustInfluence(polCard, polCard._pledgeDown.amount, 'Wahlversprechen');\n          const newInfluence = polCard.influence;\n          log(`Wahlversprechen Abzug auf ${polCard.name}: ${oldInfluence} → ${newInfluence}`);\n          polCard._pledgeDown = null;\n        }\n        // reset once-per-round flags\n        polCard._hypedRoundFlag = false;\n      }\n    });\n\n    // Apply permanent initiative effects\n    const govSlot = state.permanentSlots[player].government;\n    const pubSlot = state.permanentSlots[player].public;\n    if (govSlot && govSlot.kind === 'spec') {\n      const govInitiative = govSlot;\n      logFunctionCall('applyPermanentInitiative', {\n        slot: 'government',\n        initiative: govInitiative.name\n      }, 'Processing government permanent initiative');\n      if (govInitiative.name === 'Alternative Fakten') {\n        // Alle Oligarchen geben +1 Einfluss\n        const oligarchCards = pool.filter(c => c.kind === 'pol' && ['Elon Musk', 'Bill Gates', 'George Soros', 'Warren Buffett', 'Mukesh Ambani', 'Jeff Bezos', 'Alisher Usmanov', 'Gautam Adani', 'Jack Ma', 'Zhang Yiming', 'Roman Abramovich'].includes(c.name));\n        logDataFlow('board analysis', 'oligarch cards', {\n          count: oligarchCards.length,\n          cards: oligarchCards.map(c => ({\n            name: c.name,\n            influence: c.kind === 'pol' ? c.influence : 0\n          }))\n        }, 'Finding oligarch cards for Alternative Fakten effect');\n        let totalInfluenceGained = 0;\n        oligarchCards.forEach(card => {\n          const oldInfluence = card.influence;\n          adjustInfluence(card, 1, 'Alternative Fakten');\n          const newInfluence = card.influence;\n          totalInfluenceGained += 1;\n          logCardEffect('Alternative Fakten', `${card.name} erhält +1 Einfluss (${oldInfluence} → ${newInfluence})`);\n        });\n        if (oligarchCards.length > 0) {\n          logCardEffect('Alternative Fakten', `${oligarchCards.length} Oligarchen gefunden - ${totalInfluenceGained} Punkte zum Gesamteinfluss hinzugefügt`);\n        } else {\n          logWarning('No oligarch cards found', 'Alternative Fakten effect has no targets');\n        }\n      }\n    }\n    if (pubSlot && pubSlot.kind === 'spec') {\n      const pubInitiative = pubSlot;\n      logFunctionCall('applyPermanentInitiative', {\n        slot: 'public',\n        initiative: pubInitiative.name\n      }, 'Processing public permanent initiative');\n      if (pubInitiative.name === 'Algorithmischer Diskurs') {\n        // Alle Medien-Karten geben +1 Einfluss\n        const mediaCards = pool.filter(c => c.kind === 'pol' && ['Oprah Winfrey', 'Mark Zuckerberg', 'Tim Cook', 'Sam Altman'].includes(c.name));\n        logDataFlow('board analysis', 'media cards', {\n          count: mediaCards.length,\n          cards: mediaCards.map(c => ({\n            name: c.name,\n            influence: c.kind === 'pol' ? c.influence : 0\n          }))\n        }, 'Finding media cards for Algorithmischer Diskurs effect');\n        let totalInfluenceGained = 0;\n        mediaCards.forEach(card => {\n          const oldInfluence = card.influence;\n          adjustInfluence(card, 1, 'Algorithmischer Diskurs');\n          const newInfluence = card.influence;\n          totalInfluenceGained += 1;\n          logCardEffect('Algorithmischer Diskurs', `${card.name} erhält +1 Einfluss (${oldInfluence} → ${newInfluence})`);\n        });\n        if (mediaCards.length > 0) {\n          logCardEffect('Algorithmischer Diskurs', `${mediaCards.length} Medien-Karten gefunden - ${totalInfluenceGained} Punkte zum Gesamteinfluss hinzugefügt`);\n        } else {\n          logWarning('No media cards found', 'Algorithmischer Diskurs effect has no targets');\n        }\n      }\n    }\n\n    // Legacy flags reset is replaced by the new applyStartOfTurnHooks implementation\n\n    logFunctionCall('applyStartOfTurnHooksLegacy', {\n      player\n    }, 'Legacy turn hooks completed');\n  }, [logFunctionCall, logDataFlow, logCardEffect, logWarning]);\n\n  // Helper: Leadership vorhanden?\n  const hasLeadershipCard = (player, state) => {\n    const gov = state.board[player].aussen;\n    const names = ['Justin Trudeau'];\n    return gov.some(c => c.kind === 'pol' && names.includes(c.name) && !c.deactivated);\n  };\n\n  // Helper: Bewegung vorhanden? (Öffentlichkeitsreihe)\n  const hasMovementCard = (player, state) => {\n    const pub = state.board[player].innen;\n    const names = ['Greta Thunberg', 'Malala Yousafzai', 'Ai Weiwei', 'Alexei Navalny'];\n    return pub.some(c => c.kind === 'pol' && names.includes(c.name) && !c.deactivated);\n  };\n\n  // Helper: Plattform vorhanden? (Öffentlichkeitsreihe)\n  const hasPlatformCard = (player, state) => {\n    const pub = state.board[player].innen;\n    const names = ['Mark Zuckerberg', 'Tim Cook', 'Jack Ma', 'Zhang Yiming'];\n    return pub.some(c => c.kind === 'pol' && names.includes(c.name) && !c.deactivated);\n  };\n\n  // Helper: Diplomat vorhanden? (Regierungsreihe)\n  const hasDiplomatCard = (player, state) => {\n    const gov = state.board[player].aussen;\n    const names = ['Joschka Fischer', 'Sergey Lavrov', 'Ursula von der Leyen', 'Jens Stoltenberg', 'Horst Köhler', 'Walter Scheel', 'Hans Dietrich Genscher', 'Colin Powell', 'Condoleezza Rice', 'Christine Lagarde'];\n    return gov.some(c => c.kind === 'pol' && names.includes(c.name) && !c.deactivated);\n  };\n\n  // Helper: Einfluss-Transfer durch Dauerhaft-Initiativen blockiert? (Koalitionszwang, Napoleon Komplex)\n  const hasInfluenceTransferBlock = (player, state) => {\n    const govSlot = state.permanentSlots[player].government;\n    if (!govSlot || govSlot.kind !== 'spec') return false;\n    const spec = govSlot;\n    return ['Koalitionszwang', 'Napoleon Komplex'].includes(spec.name);\n  };\n\n  // Helper: Kann Spieler mehrere Interventionen spielen? (Putin-Fähigkeit)\n  const canPlayMultipleInterventions = (player, state) => {\n    const govCards = state.board[player].aussen.filter(c => c.kind === 'pol');\n    return govCards.some(c => c.name === 'Vladimir Putin' && !c.deactivated);\n  };\n  const selectHandCard = useCallback(index => {\n    setSelectedHandIndex(index);\n  }, []);\n  const passTurn = useCallback(player => {\n    setGameState(prev => {\n      if (prev.current !== player) return prev;\n      const newState = {\n        ...prev,\n        passed: {\n          ...prev.passed,\n          [player]: true\n        }\n      };\n      log(`Spieler ${player} passt.`);\n\n      // If both players have passed, resolve the round\n      if (newState.passed[1] && newState.passed[2]) {\n        return resolveRound(newState);\n      }\n      return newState;\n    });\n  }, [log, resolveRound]);\n\n  // Diplomat-Einfluss-Transfer Funktion\n  const transferInfluence = useCallback((player, fromCardUid, toCardUid, amount) => {\n    setGameState(prev => {\n      var _prev$effectFlags3;\n      if (prev.current !== player) return prev;\n      const flags = (_prev$effectFlags3 = prev.effectFlags) === null || _prev$effectFlags3 === void 0 ? void 0 : _prev$effectFlags3[player];\n      if (!flags || flags.diplomatInfluenceTransferUsed || flags.influenceTransferBlocked) return prev;\n      if (!hasDiplomatCard(player, prev)) return prev;\n\n      // Finde beide Karten in der Regierungsreihe\n      const govCards = prev.board[player].aussen;\n      const fromCard = govCards.find(c => c.uid === fromCardUid && c.kind === 'pol');\n      const toCard = govCards.find(c => c.uid === toCardUid && c.kind === 'pol');\n      if (!fromCard || !toCard || fromCard.influence < amount) return prev;\n\n      // Transfer durchführen\n      adjustInfluence(fromCard, -amount, 'Diplomat-Transfer');\n      adjustInfluence(toCard, amount, 'Diplomat-Transfer');\n\n      // Flag setzen\n      const newFlags = {\n        ...flags,\n        diplomatInfluenceTransferUsed: true\n      };\n      const newEffectFlags = {\n        ...prev.effectFlags,\n        [player]: newFlags\n      };\n      log(`P${player} transferiert ${amount} Einfluss von ${fromCard.name} zu ${toCard.name} (Diplomat).`);\n      return {\n        ...prev,\n        effectFlags: newEffectFlags\n      };\n    });\n  }, [log]);\n\n  // Active Abilities Management\n  const getActiveAbilities = useCallback(player => {\n    return ActiveAbilitiesManager.getAvailableAbilities(player, gameState);\n  }, []);\n  const useActiveAbility = useCallback((abilityId, targetCardUid) => {\n    setGameState(prev => {\n      const player = prev.current;\n      const abilities = ActiveAbilitiesManager.getAvailableAbilities(player, prev);\n      const ability = abilities.find(a => a.id === abilityId);\n      if (!ability || !ActiveAbilitiesManager.canUseAbility(ability, player, prev)) {\n        return prev;\n      }\n\n      // Finde Actor Card\n      const allCards = [...prev.board[player].innen, ...prev.board[player].aussen].filter(c => c.kind === 'pol');\n      const actorCard = allCards.find(c => ability.id.includes(c.uid.toString()));\n      if (!actorCard) return prev;\n\n      // Finde Target Card wenn nötig\n      let targetCard;\n      if (targetCardUid) {\n        const allTargets = [...prev.board[1].innen, ...prev.board[1].aussen, ...prev.board[2].innen, ...prev.board[2].aussen].filter(c => c.kind === 'pol');\n        targetCard = allTargets.find(c => c.uid === targetCardUid);\n      }\n      const select = {\n        type: ability.type,\n        actorCard,\n        actorPlayer: player,\n        targetCard\n      };\n      const newState = ActiveAbilitiesManager.executeAbility(ability, select, prev);\n      log(`${actorCard.name} nutzt ${ability.name}${targetCard ? ` auf ${targetCard.name}` : ''}.`);\n      return newState;\n    });\n  }, [gameState, log]);\n\n  // Reset aktive Fähigkeiten zu Rundenbeginn\n  const resetActiveAbilities = useCallback(state => {\n    const newState = {\n      ...state\n    };\n\n    // Reset _activeUsed für alle Politikerkarten\n    [1, 2].forEach(player => {\n      const allCards = [...newState.board[player].innen, ...newState.board[player].aussen].filter(c => c.kind === 'pol');\n      allCards.forEach(card => {\n        card._activeUsed = false;\n      });\n    });\n    return newState;\n  }, []);\n\n  // Putin Doppelte Interventionen\n  const executePutinDoubleIntervention = useCallback(interventionCardIds => {\n    setGameState(prev => {\n      const player = prev.current;\n      const newState = ActiveAbilitiesManager.executePutinDoubleIntervention(prev, player, interventionCardIds, log);\n      return newState;\n    });\n  }, [log]);\n\n  // Check ob Putin Doppel-Intervention verfügbar ist\n  const canUsePutinDoubleIntervention = useCallback(player => {\n    const board = gameState.board[player];\n    const allCards = [...board.innen, ...board.aussen].filter(c => c.kind === 'pol');\n    const putin = allCards.find(c => c.name === 'Vladimir Putin');\n    if (!putin || putin.deactivated || putin._activeUsed) return false;\n    const interventions = gameState.hands[player].filter(c => c.kind === 'spec');\n    return interventions.length >= 2;\n  }, [gameState]);\n\n  // Manual turn advancement for testing\n  const manualAdvanceTurn = useCallback(() => {\n    console.log('🔧 DEBUG: Manual turn advancement triggered');\n    log('🔧 DEBUG: Manual turn advancement triggered');\n    nextTurn();\n  }, [nextTurn, log]);\n  return {\n    gameState,\n    selectedHandIndex,\n    log,\n    startNewGame,\n    selectHandCard: setSelectedHandIndex,\n    scores,\n    manualAdvanceTurn,\n    // Manual turn advancement for testing\n\n    // Core game state functions\n    dealStartingHands,\n    resolveRound,\n    nextTurn: gameActions.nextTurn,\n    endTurn: gameActions.endTurn,\n    checkAndAdvanceTurn,\n    shouldAdvanceTurn,\n    // Helper functions kept for compatibility\n    hasLeadershipCard,\n    hasMovementCard,\n    hasPlatformCard,\n    hasDiplomatCard,\n    hasInfluenceTransferBlock,\n    canPlayMultipleInterventions,\n    sumRowWithAuras,\n    applyStartOfTurnHooksLegacy,\n    // Functions that were migrated to separate hooks\n    passTurn: gameActions.passTurn,\n    transferInfluence,\n    getActiveAbilities,\n    useActiveAbility,\n    resetActiveAbilities,\n    executePutinDoubleIntervention,\n    canUsePutinDoubleIntervention,\n    // Delegate primary functionality to separated hooks\n    startMatchWithDecks: gameActions.startMatchWithDecks,\n    startMatchVsAI: gameActions.startMatchVsAI,\n    playCard: gameActions.playCard,\n    activateInstantInitiative: gameActions.activateInstantInitiative,\n    // AI functionality\n    runAITurn: gameAI.runAITurn,\n    aiEnabled: gameAI.aiEnabled,\n    setAiEnabled: gameAI.setAiEnabled,\n    aiPreset: gameAI.aiPreset,\n    setAiPreset: gameAI.setAiPreset,\n    // Effects functionality\n    executeCardEffect,\n    processEffectQueue,\n    afterQueueResolved\n  };\n}\n_s(useGameState, \"fDGYkmFjbjRemXOCqVmccBw85Xs=\", false, function () {\n  return [useGameActions, useGameAI, useGameEffects];\n});","map":{"version":3,"names":["useState","useCallback","createDefaultEffectFlags","Pols","Specials","PRESET_DECKS","sumRow","shuffle","makePolInstance","makeSpecInstance","buildDeckFromEntries","drawCards","drawCardsAtRoundEnd","tryApplyNegativeEffect","adjustInfluence","findCardLocation","sumGovernmentInfluenceWithAuras","EffectQueueManager","ActiveAbilitiesManager","getCardDetails","useGameActions","useGameAI","useGameEffects","applyStartOfTurnHooks","emptyBoard","initialGameState","round","current","passed","actionPoints","actionsUsed","decks","hands","traps","board","permanentSlots","government","public","initiativePermanent","discard","log","activeRefresh","roundsWon","gameWinner","effectFlags","effectQueue","initializeQueue","activeAbilities","pendingAbilitySelect","undefined","aiEnabled","useGameState","_s","gameState","setGameState","selectedHandIndex","setSelectedHandIndex","msg","timestamp","Date","toLocaleTimeString","hour","minute","second","logEntry","console","prev","logUIInteraction","action","details","logGameStateChange","change","logAIAction","logCardEffect","cardName","effect","logIntervention","interventionName","trigger","logFunctionCall","functionName","params","context","paramStr","JSON","stringify","String","logDataFlow","from","to","data","dataStr","logConditionCheck","condition","result","logError","error","logWarning","warning","afterQueueResolved","s","_version","n","gameActions","gameAI","gameEffects","dealStartingHands","buildDeck","polPool","specPool","deck","slice","forEach","p","push","implFirst","srt","sort","a","b","indexOf","impl","deck1","deck2","length","splice","startNewGame","startMatchWithDecks","p1DeckEntries","p2DeckEntries","setAiEnabled","setAiPreset","p1Cards","p2Cards","d1","d2","h1","Math","min","h2","startMatchVsAI","presetKey","shouldAdvanceTurn","player","executeCardEffect","card","state","logFunc","newState","name","type","kind","specCard","boardCards","innen","aussen","oligarchCount","filter","c","_details$subcategorie","subcategories","includes","buffAmount","govCards","target","oldInfl","influence","count","cards","map","targetCard","oldInfluence","newInfluence","old","new","newHands","newDecks","opponent","oppGovCards","deactivated","oppHand","handSize","discardedCard","floor","random","newOppHand","newHandSize","oppBoard","totalOppInfluence","totalInfluence","publicCards","oldAP","newAP","polCard","effectsApplied","nextTurn","_prev$aiEnabled$","_prev$aiEnabled","_prev$aiEnabled$2","_prev$aiEnabled2","_prev$aiEnabled$3","_prev$aiEnabled3","resolveRound","newCurrent","newActionPoints","oldActions","newActions","setTimeout","runAITurn","ap","checkAndAdvanceTurn","currentPlayer","otherPlayer","scores","s1","s2","winner","note","newRoundsWon","newBoard","newTraps","newRound","newPassed","newEffectFlags","scienceInitiativeBonus","militaryInitiativePenalty","healthInitiativeBonus","cultureInitiativeBonus","markZuckerbergUsed","opportunistActive","publicEffectDoubled","cannotPlayInitiatives","nextCardProtected","platformAfterInitiativeBonus","interventionEffectReduced","evaluateInterventions","actingPlayer","event","tentativeBoard","oppTraps","trapsChanged","i","trap","spec","key","played","isMedia","isNGO","isPlatform","isDiplomat","isTier2Gov","T","lane","isTier1Gov","isWeakGov","isLowPowerGov","_prev$effectFlags","newFlags","influenceTransferBlocked","loc","arr","idx","findIndex","uid","_event$card","_event$card2","actingPlayerGovCount","actingPlayerPubCount","pop","pubCards","_prev$effectFlags2","cannotPlayMoreGovernment","isLargeInitiative","bp","weakestCard","reduce","weakest","copyCard","now","recentCards","concat","hasInitiative","some","hasPublic","lastPubCard","playerInfluence","opponentInfluence","processEffectQueue","items","newQueue","processQueue","sumRowWithAuras","total","join","govSlot","pubSlot","bewegungNames","hasBewegung","hasNgoCard","tag","_ngoBoostLogged","ngoMovementNames","hasNgoMovement","oppPubSlot","applyStartOfTurnHooksLegacy","pool","_pledgeDown","amount","_hypedRoundFlag","govInitiative","slot","initiative","oligarchCards","totalInfluenceGained","pubInitiative","mediaCards","hasLeadershipCard","gov","names","hasMovementCard","pub","hasPlatformCard","hasDiplomatCard","hasInfluenceTransferBlock","canPlayMultipleInterventions","selectHandCard","index","passTurn","transferInfluence","fromCardUid","toCardUid","_prev$effectFlags3","flags","diplomatInfluenceTransferUsed","fromCard","find","toCard","getActiveAbilities","getAvailableAbilities","useActiveAbility","abilityId","targetCardUid","abilities","ability","id","canUseAbility","allCards","actorCard","toString","allTargets","select","actorPlayer","executeAbility","resetActiveAbilities","_activeUsed","executePutinDoubleIntervention","interventionCardIds","canUsePutinDoubleIntervention","putin","interventions","manualAdvanceTurn","endTurn","playCard","activateInstantInitiative","aiPreset"],"sources":["C:/Users/skank/Videos/Cards/Milchcards/src/hooks/useGameState.ts"],"sourcesContent":["import { useState, useCallback } from 'react';\nimport { GameState, Card, PoliticianCard, SpecialCard, Player, BuilderEntry, createDefaultEffectFlags } from '../types/game';\nimport { Pols, Specials, PRESET_DECKS } from '../data/gameData';\nimport {\n  sumRow,\n  shuffle,\n  makePolInstance,\n  makeSpecInstance,\n  buildDeckFromEntries,\n  drawCards,\n  drawCardsAtRoundEnd,\n  tryApplyNegativeEffect,\n  adjustInfluence,\n  findCardLocation,\n  sumGovernmentInfluenceWithAuras,\n  EffectQueueManager,\n  ActiveAbilitiesManager\n} from '../utils/gameUtils';\nimport { getCardDetails } from '../data/cardDetails';\nimport { useGameActions } from './useGameActions';\nimport { useGameAI } from './useGameAI';\nimport { useGameEffects } from './useGameEffects';\nimport { applyStartOfTurnHooks } from '../utils/startOfTurnHooks';\nimport { emptyBoard, emptyBoardSide, ensureSofortBoard } from '../state/board';\n\nconst initialGameState: GameState = {\n  round: 1,\n  current: 1,\n  passed: { 1: false, 2: false },\n  actionPoints: { 1: 2, 2: 2 },\n  actionsUsed: { 1: 0, 2: 0 },\n  decks: { 1: [], 2: [] },\n  hands: { 1: [], 2: [] },\n  traps: { 1: [], 2: [] },\n  board: emptyBoard(),\n  permanentSlots: {\n    1: { government: null, public: null, initiativePermanent: null },\n    2: { government: null, public: null, initiativePermanent: null },\n  },\n  discard: [],\n  log: [],\n  activeRefresh: { 1: 0, 2: 0 },\n  roundsWon: { 1: 0, 2: 0 },\n  gameWinner: null,\n  effectFlags: {\n    1: createDefaultEffectFlags(),\n    2: createDefaultEffectFlags()\n  },\n  effectQueue: EffectQueueManager.initializeQueue(),\n  activeAbilities: {\n    1: [],\n    2: []\n  },\n  pendingAbilitySelect: undefined,\n  aiEnabled: { 1: false, 2: false },\n};\n\nexport function useGameState() {\n  const [gameState, setGameState] = useState<GameState>(initialGameState);\n  const [selectedHandIndex, setSelectedHandIndex] = useState<number | null>(null);\n\n  const log = useCallback((msg: string) => {\n    const timestamp = new Date().toLocaleTimeString('de-DE', {\n      hour: '2-digit',\n      minute: '2-digit',\n      second: '2-digit'\n    });\n    const logEntry = `[${timestamp}] ${msg}`;\n\n    console.log(logEntry); // Also log to console for debugging\n\n    setGameState(prev => ({\n      ...prev,\n      log: [...prev.log, logEntry]\n    }));\n  }, []);\n\n  // Enhanced logging functions for different types of events\n  const logUIInteraction = useCallback((action: string, details: string) => {\n    log(`🎯 UI: ${action} - ${details}`);\n  }, [log]);\n\n  const logGameStateChange = useCallback((change: string, details: string) => {\n    log(`🔄 STATE: ${change} - ${details}`);\n  }, [log]);\n\n  const logAIAction = useCallback((action: string, details: string) => {\n    log(`🤖 KI: ${action} - ${details}`);\n  }, [log]);\n\n  const logCardEffect = useCallback((cardName: string, effect: string) => {\n    log(`✨ EFFEKT: ${cardName} - ${effect}`);\n  }, [log]);\n\n  const logIntervention = useCallback((interventionName: string, trigger: string) => {\n    log(`💥 INTERVENTION: ${interventionName} ausgelöst durch ${trigger}`);\n  }, [log]);\n\n  // New detailed logging functions for debugging\n  const logFunctionCall = useCallback((functionName: string, params: any, context: string) => {\n    const paramStr = typeof params === 'object' ? JSON.stringify(params, null, 2) : String(params);\n    log(`🔧 CALL: ${functionName}(${paramStr}) - ${context}`);\n  }, [log]);\n\n  const logDataFlow = useCallback((from: string, to: string, data: any, action: string) => {\n    const dataStr = typeof data === 'object' ? JSON.stringify(data, null, 2) : String(data);\n    log(`📊 FLOW: ${from} → ${to} | ${action} | Data: ${dataStr}`);\n  }, [log]);\n\n  const logConditionCheck = useCallback((condition: string, result: boolean, context: string) => {\n    log(`🔍 CHECK: ${condition} = ${result} - ${context}`);\n  }, [log]);\n\n  const logError = useCallback((error: string, context: string) => {\n    log(`❌ ERROR: ${error} - ${context}`);\n  }, [log]);\n\n  const logWarning = useCallback((warning: string, context: string) => {\n    log(`⚠️ WARN: ${warning} - ${context}`);\n  }, [log]);\n\n  // Nach Queue-Auflösung: Hand-Arrays immutabel neu zuweisen → Canvas & UI bekommen die neuen UIDs\n  const afterQueueResolved = useCallback(() => {\n    setGameState(s => {\n      const n = { ...s };\n      n.hands = {\n        1: [...s.hands[1]],\n        2: [...s.hands[2]],\n      } as any;\n      // optional: version bump für Canvas\n      (n as any)._version = ((s as any)._version ?? 0) + 1;\n      return n;\n    });\n  }, []);\n\n  // Import functionality from separated hooks\n  const gameActions = useGameActions(gameState, setGameState, log, afterQueueResolved);\n  const gameAI = useGameAI(gameState, setGameState, log);\n  const gameEffects = useGameEffects(gameState, setGameState, log);\n\n  const dealStartingHands = useCallback(() => {\n    console.log('[DIAG] dealStartingHands called');\n    function buildDeck(): Card[] {\n      const polPool = [...Pols];\n      const specPool = [...Specials];\n      shuffle(polPool);\n      shuffle(specPool);\n      const deck: Card[] = [];\n      polPool.slice(0, 14).forEach(p => deck.push(makePolInstance(p)));\n\n      // prefer more useful/implemented specials\n      const implFirst = ['media', 'pledge', 'pledge2', 'sanctions', 'dnc1', 'dnc2', 'dnc3', 'reshuffle', 'mission', 'trap_fakenews', 'trap_protest', 'trap_scandal'];\n      const srt = specPool.slice().sort((a, b) => implFirst.indexOf(a.impl) - implFirst.indexOf(b.impl));\n      srt.slice(0, 11).forEach(s => deck.push(makeSpecInstance(s)));\n      return shuffle(deck).slice(0, 25);\n    }\n\n    const deck1 = buildDeck();\n    const deck2 = buildDeck();\n\n    console.log('[DIAG] built decks lengths', deck1.length, deck2.length);\n\n    setGameState(prev => ({\n      ...prev,\n      decks: { 1: deck1, 2: deck2 },\n      hands: {\n        1: deck1.splice(0, 5),\n        2: deck2.splice(0, 5)\n      }\n    }));\n    console.log('[DIAG] setGameState after deal: hands[1].length', (deck1.length >= 5 ? 5 : deck1.length));\n  }, []);\n\n  const startNewGame = useCallback(() => {\n    setGameState({\n      ...initialGameState,\n      round: 1,\n      current: 1,\n      passed: { 1: false, 2: false },\n      actionPoints: { 1: 2, 2: 2 },\n      actionsUsed: { 1: 0, 2: 0 },\n      board: emptyBoard(),\n      traps: { 1: [], 2: [] },\n      permanentSlots: {\n        1: { government: null, public: null, initiativePermanent: null },\n        2: { government: null, public: null, initiativePermanent: null },\n      },\n      // instantSlot wird nicht mehr verwendet - Sofort-Initiativen gehen in board[player].sofort\n      discard: [],\n      log: [],\n      activeRefresh: { 1: 0, 2: 0 },\n    });\n    dealStartingHands();\n  }, [dealStartingHands]);\n\n  const startMatchWithDecks = useCallback((p1DeckEntries: BuilderEntry[], p2DeckEntries: BuilderEntry[]) => {\n    console.log('🔧 DEBUG: startMatchWithDecks called - activating AI for player 2');\n    // Automatically enable AI for player 2 when starting with decks\n    console.log('🔧 DEBUG: About to call gameAI.setAiEnabled(true)');\n    gameAI.setAiEnabled(true);\n    console.log('🔧 DEBUG: About to call gameAI.setAiPreset(AUTORITAERER_REALIST)');\n    gameAI.setAiPreset('AUTORITAERER_REALIST');\n    console.log('🔧 DEBUG: AI setup completed');\n\n    console.log('[DIAG] startMatchWithDecks - p1DeckEntries', p1DeckEntries.length, 'p2DeckEntries', p2DeckEntries.length);\n    console.log('[DIAG] startMatchWithDecks - sample entries:', p1DeckEntries.slice(0, 2), p2DeckEntries.slice(0, 2));\n\n    const p1Cards = buildDeckFromEntries(p1DeckEntries);\n    const p2Cards = buildDeckFromEntries(p2DeckEntries);\n\n    const d1 = [...p1Cards];\n    const d2 = [...p2Cards];\n    const h1 = d1.splice(0, Math.min(5, d1.length));\n    const h2 = d2.splice(0, Math.min(5, d2.length));\n\n    console.log('[DIAG] startMatchWithDecks - p1Cards', p1Cards.length, 'p2Cards', p2Cards.length);\n    console.log('[DIAG] startMatchWithDecks - h1', h1.length, 'h2', h2.length);\n    console.log('[DIAG] startMatchWithDecks - sample cards:', p1Cards.slice(0, 2), p2Cards.slice(0, 2));\n\n    setGameState({\n      ...initialGameState,\n      round: 1,\n      current: 1,\n      passed: { 1: false, 2: false },\n      decks: { 1: d1, 2: d2 },\n      hands: { 1: h1, 2: h2 },\n      board: emptyBoard(),\n      traps: { 1: [], 2: [] },\n      permanentSlots: {\n        1: { government: null, public: null, initiativePermanent: null },\n        2: { government: null, public: null, initiativePermanent: null },\n      },\n      // instantSlot wird nicht mehr verwendet - Sofort-Initiativen gehen in board[player].sofort\n      discard: [],\n      log: [`Match gestartet. P1 und P2 erhalten je ${h1.length}/${h2.length} Startkarten.`],\n      activeRefresh: { 1: 0, 2: 0 },\n    });\n    console.log('[DIAG] setGameState called in startMatchWithDecks');\n  }, [gameAI]);\n\n  const startMatchVsAI = useCallback((p1DeckEntries: BuilderEntry[], presetKey: keyof typeof PRESET_DECKS = 'AUTORITAERER_REALIST') => {\n    const p2DeckEntries = PRESET_DECKS[presetKey] as BuilderEntry[];\n    gameAI.setAiEnabled(true);\n    gameAI.setAiPreset(presetKey);\n    gameActions.startMatchWithDecks(p1DeckEntries, p2DeckEntries);\n  }, [gameAI, gameActions]);\n\n  // Prüfe ob der Zug automatisch gewechselt werden soll\n  const shouldAdvanceTurn = useCallback((gameState: GameState, player: Player): boolean => {\n    // Wenn Spieler gepasst hat\n    if (gameState.passed[player]) return true;\n\n    // Wenn keine AP mehr verfügbar sind\n    if (gameState.actionPoints[player] <= 0) return true;\n\n    // Wenn 2 Aktionen verwendet wurden\n    // if (gameState.actionsUsed[player] >= 2) return true;\n\n    return false;\n  }, []);\n\n  // Karten-Effekte implementieren\n  const executeCardEffect = useCallback((\n    card: Card,\n    player: Player,\n    state: GameState,\n    logFunc: (msg: string) => void\n  ): GameState => {\n    let newState = { ...state };\n\n    logFunctionCall('executeCardEffect', { card: card.name, player, type: card.kind }, 'Starting card effect execution');\n\n    if (card.kind === 'spec') {\n      const specCard = card as SpecialCard;\n\n      // === SOFORT-INITIATIVEN ===\n      if (specCard.name === 'Shadow Lobbying') {\n        // Count own board cards with tag Oligarch\n        const boardCards = [\n          ...newState.board[player].innen,\n          ...newState.board[player].aussen,\n        ];\n        const oligarchCount = boardCards.filter(c => {\n          const details = getCardDetails(c.name);\n          return details?.subcategories?.includes('Oligarch');\n        }).length;\n\n        const buffAmount = Math.min(oligarchCount, 3);\n\n        if (buffAmount > 0) {\n          const govCards = newState.board[player].aussen.filter(c => c.kind === 'pol') as PoliticianCard[];\n          if (govCards.length) {\n            const target = govCards[0];\n            const oldInfl = target.influence;\n            adjustInfluence(target, buffAmount, 'Shadow Lobbying');\n            logCardEffect(specCard.name, `${target.name} erhält +${buffAmount} Einfluss ( ${oldInfl} → ${target.influence} )`);\n          } else {\n            logWarning('No government cards', 'Shadow Lobbying buff had no target');\n          }\n        } else {\n          logCardEffect(specCard.name, 'Keine Oligarchen – kein Einfluss-Buff');\n        }\n      }\n      else if (specCard.name === 'Spin Doctor') {\n        const govCards = newState.board[player].aussen.filter(c => c.kind === 'pol') as PoliticianCard[];\n        logDataFlow('board analysis', 'govCards', { count: govCards.length, cards: govCards.map(c => c.name) }, 'Finding government cards');\n\n        if (govCards.length > 0) {\n          const targetCard = govCards[0];\n          const oldInfluence = targetCard.influence;\n          adjustInfluence(targetCard, 2, 'Spin Doctor');\n          const newInfluence = targetCard.influence;\n\n          logCardEffect(specCard.name, `${targetCard.name} erhält +2 Einfluss (${oldInfluence} → ${newInfluence})`);\n          logDataFlow('influence adjustment', 'targetCard', { card: targetCard.name, old: oldInfluence, new: newInfluence, change: 2 }, 'Spin Doctor effect applied');\n        } else {\n          logWarning('No government cards found', 'Spin Doctor effect has no target');\n        }\n      }\n      else if (specCard.name === 'Digitaler Wahlkampf') {\n        logCardEffect(specCard.name, 'Ziehe 2 Karten, nächste Initiative -1 AP');\n        const { newHands, newDecks } = drawCards(player, 2, newState, logFunc);\n        newState = { ...newState, hands: newHands, decks: newDecks };\n\n        // Simplified AP system: No discounts\n        logDataFlow('effectFlags', 'newState', { player }, 'Platform effect applied');\n      }\n      else if (specCard.name === 'Partei-Offensive') {\n        const opponent: Player = player === 1 ? 2 : 1;\n        const oppGovCards = newState.board[opponent].aussen.filter(c => c.kind === 'pol' && !(c as PoliticianCard).deactivated) as PoliticianCard[];\n        logDataFlow('opponent analysis', 'oppGovCards', { opponent, count: oppGovCards.length, cards: oppGovCards.map(c => c.name) }, 'Finding active opponent government cards');\n\n        if (oppGovCards.length > 0) {\n          const targetCard = oppGovCards[0];\n          targetCard.deactivated = true;\n          logCardEffect(specCard.name, `${targetCard.name} wird deaktiviert (bis Rundenende)`);\n          logDataFlow('card deactivation', 'targetCard', { card: targetCard.name, deactivated: true }, 'Partei-Offensive effect applied');\n        } else {\n          logWarning('No active opponent government cards found', 'Partei-Offensive effect has no target');\n        }\n      }\n      else if (specCard.name === 'Oppositionsblockade') {\n        const opponent: Player = player === 1 ? 2 : 1;\n        const oppHand = newState.hands[opponent];\n        logDataFlow('opponent hand', 'analysis', { opponent, handSize: oppHand.length, cards: oppHand.map(c => c.name) }, 'Analyzing opponent hand');\n\n        if (oppHand.length > 0) {\n          const discardedCard = oppHand[Math.floor(Math.random() * oppHand.length)];\n          const newOppHand = oppHand.filter(c => c !== discardedCard);\n          newState.hands = { ...newState.hands, [opponent]: newOppHand };\n\n          logCardEffect(specCard.name, `Gegner verliert ${discardedCard.name} aus der Hand`);\n          logDataFlow('card discard', 'opponent hand', { card: discardedCard.name, newHandSize: newOppHand.length }, 'Oppositionsblockade effect applied');\n        } else {\n          logWarning('Opponent hand is empty', 'Oppositionsblockade effect has no target');\n        }\n      }\n      else if (specCard.name === 'Opportunist') {\n        const opponent: Player = player === 1 ? 2 : 1;\n        const oppBoard = newState.board[opponent];\n        const totalOppInfluence = sumRow([...oppBoard.innen, ...oppBoard.aussen]);\n\n        logDataFlow('opponent board analysis', 'influence calculation', {\n          opponent,\n          innen: oppBoard.innen.map(c => ({ name: c.name, influence: c.kind === 'pol' ? (c as any).influence : 0 })),\n          aussen: oppBoard.aussen.map(c => ({ name: c.name, influence: c.kind === 'pol' ? (c as any).influence : 0 })),\n          totalInfluence: totalOppInfluence\n        }, 'Calculating opponent total influence');\n\n        if (totalOppInfluence > 10) {\n          const { newHands, newDecks } = drawCards(player, 1, newState, logFunc);\n          newState = { ...newState, hands: newHands, decks: newDecks };\n          logCardEffect(specCard.name, `Gegner hat ${totalOppInfluence} Einfluss (>10) - ziehe 1 Karte`);\n        } else {\n          logCardEffect(specCard.name, `Gegner hat ${totalOppInfluence} Einfluss (≤10) - kein Effekt`);\n        }\n      }\n      else if (specCard.name === 'Think-tank') {\n        const { newHands, newDecks } = drawCards(player, 1, newState, logFunc);\n        newState = { ...newState, hands: newHands, decks: newDecks };\n        logCardEffect(specCard.name, 'Ziehe 1 Karte');\n      }\n      else if (specCard.name === 'Influencer-Kampagne') {\n        const publicCards = newState.board[player].innen.filter(c => c.kind === 'pol') as PoliticianCard[];\n        logDataFlow('public cards analysis', 'influence boost', { count: publicCards.length, cards: publicCards.map(c => c.name) }, 'Finding public cards for influence boost');\n\n        publicCards.forEach(card => {\n          const oldInfluence = card.influence;\n          adjustInfluence(card, 1, 'Influencer-Kampagne');\n          const newInfluence = card.influence;\n          logCardEffect(specCard.name, `${card.name} erhält +1 Einfluss (${oldInfluence} → ${newInfluence})`);\n        });\n\n        if (publicCards.length === 0) {\n          logWarning('No public cards found', 'Influencer-Kampagne effect has no targets');\n        }\n      }\n      else if (specCard.name === 'Systemrelevant') {\n        const opponent: Player = player === 1 ? 2 : 1;\n        const oppGovCards = newState.board[opponent].aussen.filter(c => c.kind === 'pol') as PoliticianCard[];\n        logDataFlow('opponent government analysis', 'systemrelevant effect', { count: oppGovCards.length, cards: oppGovCards.map(c => c.name) }, 'Finding opponent government cards');\n\n        if (oppGovCards.length > 0) {\n          const targetCard = oppGovCards[0];\n          const oldInfluence = targetCard.influence;\n          adjustInfluence(targetCard, -2, 'Systemrelevant');\n          const newInfluence = targetCard.influence;\n\n          logCardEffect(specCard.name, `${targetCard.name} verliert 2 Einfluss (${oldInfluence} → ${newInfluence})`);\n          logDataFlow('influence reduction', 'targetCard', { card: targetCard.name, old: oldInfluence, new: newInfluence, change: -2 }, 'Systemrelevant effect applied');\n        } else {\n          logWarning('No opponent government cards found', 'Systemrelevant effect has no target');\n        }\n      }\n      else if (specCard.name === 'Symbolpolitik') {\n        const { newHands, newDecks } = drawCards(player, 1, newState, logFunc);\n        newState = { ...newState, hands: newHands, decks: newDecks };\n\n        newState.actionPoints = {\n          ...newState.actionPoints,\n          [player]: Math.min(2, newState.actionPoints[player] + 1)\n        };\n\n        const oldAP = state.actionPoints[player];\n        const newAP = newState.actionPoints[player];\n        logCardEffect(specCard.name, `Ziehe 1 Karte, erhalte +1 AP (${oldAP} → ${newAP})`);\n        logDataFlow('AP gain', 'player', { player, old: oldAP, new: newAP, change: 1 }, 'Symbolpolitik effect applied');\n      }\n      else if (specCard.name === 'Alexei Navalny') {\n        logCardEffect(specCard.name, 'Ziehe 1 Karte');\n        const { newHands, newDecks } = drawCards(player, 1, newState, logFunc);\n        newState = { ...newState, hands: newHands, decks: newDecks };\n      }\n      else if (specCard.name === 'Mukesh Ambani') {\n        logCardEffect(specCard.name, 'Ziehe 1 Karte');\n        const { newHands, newDecks } = drawCards(player, 1, newState, logFunc);\n        newState = { ...newState, hands: newHands, decks: newDecks };\n      }\n\n      // Oligarch-Effekte\n      else if (['Elon Musk', 'Bill Gates', 'George Soros', 'Warren Buffett', 'Mukesh Ambani', 'Jeff Bezos', 'Alisher Usmanov', 'Gautam Adani', 'Jack Ma', 'Zhang Yiming', 'Roman Abramovich'].includes(specCard.name)) {\n        logCardEffect(specCard.name, 'Ziehe 1 Karte (Oligarch-Effekt)');\n        const { newHands, newDecks } = drawCards(player, 1, newState, logFunc);\n        newState = { ...newState, hands: newHands, decks: newDecks };\n      }\n    }\n\n    // === DAUERHAFTE INITIATIVEN ===\n    if (card.kind === 'spec' && (card as SpecialCard).type === 'Dauerhaft-Initiative') {\n      const specCard = card as SpecialCard;\n\n      if (specCard.name === 'Algorithmischer Diskurs') {\n        logCardEffect(specCard.name, 'Dauerhafte Initiative: Alle Medien-Karten geben +1 Einfluss');\n        // This effect will be applied in applyStartOfTurnHooks\n      }\n      else if (specCard.name === 'Alternative Fakten') {\n        logCardEffect(specCard.name, 'Dauerhafte Initiative: Alle Oligarchen geben +1 Einfluss');\n        // This effect will be applied in applyStartOfTurnHooks\n      }\n    }\n\n    // === POLITIKER-KARTEN ===\n    else if (card.kind === 'pol') {\n      const polCard = card as PoliticianCard;\n      logCardEffect(polCard.name, `Politiker platziert - Basis-Einfluss: ${polCard.influence}`);\n    }\n\n    logDataFlow('executeCardEffect', 'newState', { card: card.name, effectsApplied: true }, 'Card effect execution completed');\n    return newState;\n  }, [logFunctionCall, logCardEffect, logDataFlow, logWarning]);\n\n  const nextTurn = useCallback(() => {\n    logFunctionCall('nextTurn', {}, 'Starting turn change');\n\n    setGameState((prev): GameState => {\n      logDataFlow('UI', 'nextTurn', { current: prev.current, passed: prev.passed }, 'Turn change request');\n\n      // if both passed -> resolve round\n      logConditionCheck('both players passed', prev.passed[1] && prev.passed[2], 'Round end check');\n      if (prev.passed[1] && prev.passed[2]) {\n        logFunctionCall('resolveRound', { round: prev.round }, 'Both players passed - resolving round');\n        return resolveRound(prev);\n      }\n\n      const newCurrent: Player = prev.current === 1 ? 2 : 1;\n      logDataFlow('turn change', 'newCurrent', { old: prev.current, new: newCurrent }, 'Player switch');\n\n      // Reset AP for the new current player\n      const newActionPoints = { ...prev.actionPoints };\n      newActionPoints[newCurrent] = 2;\n\n      logDataFlow('AP reset', 'newCurrent', {\n        player: newCurrent,\n        oldAP: prev.actionPoints[newCurrent],\n        newAP: newActionPoints[newCurrent],\n        oldActions: 0,\n        newActions: 0\n      }, 'Resource reset for new player');\n\n      // Apply start-of-turn hooks for the new current player\n      const newState: GameState = {\n        ...prev,\n        current: newCurrent,\n        actionPoints: newActionPoints\n      };\n\n      // Log turn change\n      log(`Spieler ${newCurrent} ist am Zug (2 AP verfügbar)`);\n      logGameStateChange('turn change', `Player ${newCurrent} turn started`);\n\n      logFunctionCall('applyStartOfTurnHooks', { player: newCurrent }, 'Applying start-of-turn effects');\n      applyStartOfTurnHooks(newState, newCurrent, log);\n\n      // Check if AI should take turn\n      logConditionCheck('AI turn', newCurrent === 2 && (prev.aiEnabled?.[2] ?? false), 'AI turn check');\n      if (newCurrent === 2 && (prev.aiEnabled?.[2] ?? false)) {\n        logFunctionCall('runAITurn', { player: newCurrent }, 'Triggering AI turn');\n        // Use setTimeout to avoid state update conflicts\n        setTimeout(() => {\n          logAIAction('AI turn triggered', 'Starting AI turn execution');\n          gameAI.runAITurn();\n        }, 100);\n      }\n\n      logDataFlow('nextTurn', 'finalState', {\n        current: newState.current,\n        ap: newState.actionPoints[newCurrent],\n        aiEnabled: prev.aiEnabled?.[2] ?? false\n      }, 'Turn change completed');\n\n      return newState;\n    });\n\n    // Nach Zugwechsel ebenfalls spiegeln (z. B. Auto-Draw am EoT)\n    afterQueueResolved();\n  }, [logFunctionCall, logDataFlow, logConditionCheck, logGameStateChange, gameAI, log, logAIAction, afterQueueResolved]);\n\n  // Automatischer Zugwechsel basierend auf AP\n  const checkAndAdvanceTurn = useCallback((gameState: GameState) => {\n    const currentPlayer = gameState.current;\n    if (shouldAdvanceTurn(gameState, currentPlayer)) {\n      // Nur wechseln wenn der andere Spieler nicht auch fertig ist\n      const otherPlayer: Player = currentPlayer === 1 ? 2 : 1;\n      if (!shouldAdvanceTurn(gameState, otherPlayer) || gameState.passed[otherPlayer]) {\n        nextTurn();\n      }\n    }\n  }, [shouldAdvanceTurn, nextTurn]);\n\n  const scores = useCallback((state: GameState): [number, number] => {\n    // Einheitliche Berechnung über Utils-Helfer\n    const s1 = sumGovernmentInfluenceWithAuras(state, 1);\n    const s2 = sumGovernmentInfluenceWithAuras(state, 2);\n    return [s1, s2];\n  }, []);\n\n  const resolveRound = useCallback((state: GameState): GameState => {\n    const [s1, s2] = scores(state);\n    let winner: 1 | 2 = 1;\n    let note = '';\n\n    if (s1 > s2) winner = 1;\n    else if (s2 > s1) winner = 2;\n    else {\n      // Gleichstand -> erster Pass gewinnt\n      winner = state.passed[1] && !state.passed[2] ? 1 : 2;\n      note = ' (Gleichstand – früherer Pass)';\n    }\n\n    log(`Runde ${state.round} endet: P1 ${s1} : P2 ${s2}. Gewinner: P${winner}${note}.`);\n\n    // Rundensieg zählen\n    const newRoundsWon = { ...state.roundsWon };\n    newRoundsWon[winner] += 1;\n\n    // Prüfe Best-of-3 Gewinner\n    let gameWinner: 1 | 2 | null = null;\n    if (newRoundsWon[1] >= 2) {\n      gameWinner = 1;\n      log(`🎉 SPIEL ENDE: Spieler 1 gewinnt das Spiel! (${newRoundsWon[1]}:${newRoundsWon[2]})`);\n    } else if (newRoundsWon[2] >= 2) {\n      gameWinner = 2;\n      log(`🎉 SPIEL ENDE: Spieler 2 gewinnt das Spiel! (${newRoundsWon[2]}:${newRoundsWon[1]})`);\n    }\n\n    // clear board (no carryover)\n    const newBoard = emptyBoard();\n    const newTraps = { 1: [], 2: [] };\n\n    // Verbesserte Karten-Nachzieh-Mechanik (ziehe bis Hand voll ist)\n    const { newHands, newDecks } = drawCardsAtRoundEnd(state, log);\n\n    const newRound = state.round + 1;\n    const newPassed = { 1: false, 2: false };\n    // alternate starter each round\n    const newCurrent = (newRound % 2 === 1) ? 1 : 2;\n\n    // Wenn Spiel zu Ende, stoppe\n    if (gameWinner) {\n      return {\n        ...state,\n        roundsWon: newRoundsWon,\n        gameWinner,\n      };\n    }\n\n    log(`Runde ${newRound} beginnt. P${newCurrent} startet.`);\n\n    // 🔥 CLUSTER 3: Reset temporäre Initiative-Boni am Rundenende\n    const newEffectFlags = {\n      1: {\n        ...state.effectFlags[1],\n        // Reset Cluster 3 Flags\n        scienceInitiativeBonus: false,\n        militaryInitiativePenalty: false,\n        healthInitiativeBonus: false,\n        cultureInitiativeBonus: false,\n        // Reset andere rundenbasierte Flags\n        markZuckerbergUsed: false,\n        opportunistActive: false,\n        publicEffectDoubled: false,\n        cannotPlayInitiatives: false,\n        nextCardProtected: false,\n        platformAfterInitiativeBonus: false,\n        interventionEffectReduced: false,\n      },\n      2: {\n        ...state.effectFlags[2],\n        // Reset Cluster 3 Flags\n        scienceInitiativeBonus: false,\n        militaryInitiativePenalty: false,\n        healthInitiativeBonus: false,\n        cultureInitiativeBonus: false,\n        // Reset andere rundenbasierte Flags\n        markZuckerbergUsed: false,\n        opportunistActive: false,\n        publicEffectDoubled: false,\n        cannotPlayInitiatives: false,\n        nextCardProtected: false,\n        platformAfterInitiativeBonus: false,\n        interventionEffectReduced: false,\n      }\n    };\n\n    return {\n      ...state,\n      round: newRound,\n      current: newCurrent,\n      passed: newPassed,\n      board: newBoard,\n      traps: newTraps,\n      hands: newHands,\n      decks: newDecks,\n      roundsWon: newRoundsWon,\n      effectFlags: newEffectFlags,\n    };\n  }, [log, scores]);\n\n  // Einfache Interventionsauswertung für einige häufige Trigger\n  const evaluateInterventions = (\n    prev: GameState,\n    actingPlayer: Player,\n    event: any,\n    tentativeBoard: GameState['board']\n  ): [GameState['board'] | null, GameState['traps'] | null] => {\n    const opponent: Player = actingPlayer === 1 ? 2 : 1;\n    const oppTraps = [...(prev.traps[opponent] || [])];\n    let board = tentativeBoard;\n    let trapsChanged = false;\n\n    for (let i = 0; i < oppTraps.length; i++) {\n      const trap = oppTraps[i];\n      if (trap.kind !== 'spec') continue;\n      const spec = trap as SpecialCard;\n      const details = getCardDetails(spec.name);\n      const key = spec.key;\n\n      // Trigger: Karte gespielt\n      if (event.type === 'card_played' && (event.card as PoliticianCard)) {\n        const played = event.card as PoliticianCard;\n        const isMedia = ['Oprah Winfrey'].includes(played.name);\n        const isNGO = ['Bill Gates', 'Jennifer Doudna', 'Noam Chomsky'].includes(played.name);\n        const isPlatform = ['Mark Zuckerberg', 'Tim Cook', 'Jack Ma', 'Zhang Yiming'].includes(played.name);\n        const isDiplomat = ['Joschka Fischer', 'Sergey Lavrov', 'Ursula von der Leyen', 'Jens Stoltenberg', 'Hans Dietrich Genscher', 'Colin Powell', 'Condoleezza Rice', 'Christine Lagarde'].includes(played.name);\n        const isTier2Gov = (played.T === 2 && event.lane === 'aussen');\n        const isTier1Gov = (played.T === 1 && event.lane === 'aussen');\n        const isWeakGov = (played.influence <= 5 && event.lane === 'aussen');\n        const isLowPowerGov = (played.influence <= 4 && event.lane === 'aussen');\n\n        // Cancel Culture / Fake News-Kampagne\n        if ((details?.name === 'Cancel Culture' || key === 'Cancel_Culture') && event.lane === 'innen') {\n          tryApplyNegativeEffect(played, () => { played.deactivated = true; }, prev.round);\n          oppTraps.splice(i, 1); i--; trapsChanged = true;\n          log(`Intervention ausgelöst: Cancel Culture → ${played.name} deaktiviert.`);\n          logIntervention('Cancel Culture', `Ausgelöst gegen ${played.name} in Öffentlichkeit`);\n          continue;\n        }\n        if ((details?.name === 'Fake News-Kampagne' || key === 'Fake_News_Kampagne') && isMedia) {\n          tryApplyNegativeEffect(played, () => { played.deactivated = true; }, prev.round);\n          oppTraps.splice(i, 1); i--; trapsChanged = true;\n          log(`Intervention ausgelöst: Fake News-Kampagne → ${played.name} deaktiviert.`);\n          logIntervention('Fake News-Kampagne', `Ausgelöst gegen ${played.name} (Medien)`);\n          continue;\n        }\n\n        // Whistleblower (Tier 2 Regierung)\n        if ((details?.name === 'Whistleblower' || key === 'Whistleblower') && isTier2Gov) {\n          tryApplyNegativeEffect(played, () => { adjustInfluence(played, -2, 'Whistleblower'); }, prev.round);\n          oppTraps.splice(i, 1); i--; trapsChanged = true;\n          log(`Intervention ausgelöst: Whistleblower → ${played.name} -2 Einfluss.`);\n          continue;\n        }\n\n        // Berater-Affäre (Tier 1 Regierung)\n        if ((details?.name === 'Berater-Affäre' || key === 'Berater_Affaere') && isTier1Gov) {\n          tryApplyNegativeEffect(played, () => { adjustInfluence(played, -2, 'Berater-Affäre'); }, prev.round);\n          oppTraps.splice(i, 1); i--; trapsChanged = true;\n          log(`Intervention ausgelöst: Berater-Affäre → ${played.name} -2 Einfluss.`);\n          continue;\n        }\n\n        // Soft Power-Kollaps / Deepfake-Skandal (Diplomat)\n        if ((details?.name === 'Soft Power-Kollaps' || key === 'Soft_Power_Kollaps') && isDiplomat) {\n          tryApplyNegativeEffect(played, () => { adjustInfluence(played, -3, 'Soft Power-Kollaps'); }, prev.round);\n          oppTraps.splice(i, 1); i--; trapsChanged = true;\n          log(`Intervention ausgelöst: Soft Power-Kollaps → ${played.name} -3 Einfluss.`);\n          continue;\n        }\n        if ((details?.name === 'Deepfake-Skandal' || key === 'Deepfake_Skandal') && isDiplomat) {\n          // Kein Einflusstransfer möglich - Flag setzen\n          const newFlags = { ...prev.effectFlags?.[actingPlayer], influenceTransferBlocked: true };\n          prev.effectFlags = { ...prev.effectFlags, [actingPlayer]: newFlags } as GameState['effectFlags'];\n          oppTraps.splice(i, 1); i--; trapsChanged = true;\n          log(`Intervention ausgelöst: Deepfake-Skandal → ${played.name} kann keinen Einfluss transferieren.`);\n          continue;\n        }\n\n        // Lobby Leak / Boykott-Kampagne (NGO/Bewegung)\n        if ((details?.name === 'Lobby Leak' || key === 'Lobby_Leak') && isNGO) {\n          const hands = { ...prev.hands } as GameState['hands'];\n          if (hands[actingPlayer].length > 0) {\n            hands[actingPlayer] = hands[actingPlayer].slice(1);\n            prev.hands = hands;\n          }\n          oppTraps.splice(i, 1); i--; trapsChanged = true;\n          log(`Intervention ausgelöst: Lobby Leak → P${actingPlayer} wirft 1 Karte ab.`);\n          continue;\n        }\n        if ((details?.name === 'Boykott-Kampagne' || key === 'Boykott_Kampagne') && (isNGO || ['Greta Thunberg', 'Malala Yousafzai', 'Ai Weiwei', 'Alexei Navalny'].includes(played.name))) {\n          tryApplyNegativeEffect(played, () => { played.deactivated = true; }, prev.round);\n          oppTraps.splice(i, 1); i--; trapsChanged = true;\n          log(`Intervention ausgelöst: Boykott-Kampagne → ${played.name} deaktiviert.`);\n          continue;\n        }\n\n        // Cyber-Attacke (Plattform)\n        if ((details?.name === 'Cyber-Attacke' || key === 'Cyber_Attacke') && isPlatform) {\n          const loc = findCardLocation(played as any, { ...prev, board } as GameState);\n          if (loc) {\n            const arr = [...board[loc.player][loc.lane]];\n            const idx = arr.findIndex(c => c.uid === played.uid);\n            if (idx >= 0) {\n              arr.splice(idx, 1);\n              board = {\n                ...board,\n                [loc.player]: {\n                  ...board[loc.player],\n                  [loc.lane]: arr\n                }\n              } as GameState['board'];\n            }\n          }\n          oppTraps.splice(i, 1); i--; trapsChanged = true;\n          log(`Intervention ausgelöst: Cyber-Attacke → ${played.name} zerstört.`);\n          continue;\n        }\n\n\n      }\n\n      // Trigger: Board-Zustand\n      if (event.type === 'board_state_check') {\n        const actingPlayerGovCount = tentativeBoard[actingPlayer].aussen.length;\n        const actingPlayerPubCount = tentativeBoard[actingPlayer].innen.length;\n\n        // Strategische Enthüllung (>2 Regierungskarten)\n        if ((details?.name === 'Strategische Enthüllung' || key === 'Strategische_Enthuellung') && actingPlayerGovCount > 2) {\n          // Eine Regierungskarte zurück auf Hand (vereinfacht: entferne erste)\n          const govCards = [...tentativeBoard[actingPlayer].aussen];\n          if (govCards.length > 0) {\n            govCards.pop(); // Entferne letzte\n            board = { ...board, [actingPlayer]: { ...board[actingPlayer], aussen: govCards } } as GameState['board'];\n          }\n          oppTraps.splice(i, 1); i--; trapsChanged = true;\n          log(`Intervention ausgelöst: Strategische Enthüllung → Regierungskarte zurück.`);\n          continue;\n        }\n\n        // Grassroots-Widerstand (>2 Öffentlichkeitskarten)\n        if ((details?.name === 'Grassroots-Widerstand' || key === 'Grassroots_Widerstand') && actingPlayerPubCount > 2) {\n          const pubCards = tentativeBoard[actingPlayer].innen.filter(c => c.kind === 'pol') as PoliticianCard[];\n          if (pubCards.length > 0) {\n            tryApplyNegativeEffect(pubCards[0], () => { pubCards[0].deactivated = true; }, prev.round);\n          }\n          oppTraps.splice(i, 1); i--; trapsChanged = true;\n          log(`Intervention ausgelöst: Grassroots-Widerstand → Öffentlichkeitskarte deaktiviert.`);\n          continue;\n        }\n\n        // Parlament geschlossen (≥2 Regierungskarten)\n        if ((details?.name === 'Parlament geschlossen' || key === 'Parlament_geschlossen') && actingPlayerGovCount >= 2) {\n          // Blockiere weitere Regierungskarten (Flag für diesen Zug)\n          const newFlags = { ...prev.effectFlags?.[actingPlayer], cannotPlayMoreGovernment: true };\n          prev.effectFlags = { ...prev.effectFlags, [actingPlayer]: newFlags } as GameState['effectFlags'];\n          oppTraps.splice(i, 1); i--; trapsChanged = true;\n          log(`Intervention ausgelöst: Parlament geschlossen → keine weiteren Regierungskarten.`);\n          continue;\n        }\n\n        // Interne Fraktionskämpfe (große Initiative 3-4 HP)\n        if ((details?.name === 'Interne Fraktionskämpfe' || key === 'Interne_Fraktionskaempfe') && event.type === 'card_played' && event.card?.kind === 'spec') {\n          const specCard = event.card as SpecialCard;\n          const isLargeInitiative = specCard.type === 'Sofort-Initiative' && (specCard.bp >= 3);\n          if (isLargeInitiative) {\n            // Initiative annullieren (vereinfacht: Karte zurück auf Hand)\n            const hands = { ...prev.hands } as GameState['hands'];\n            hands[actingPlayer].push(event.card);\n            prev.hands = hands;\n            oppTraps.splice(i, 1); i--; trapsChanged = true;\n            log(`Intervention ausgelöst: Interne Fraktionskämpfe → ${event.card.name} wird annulliert.`);\n            continue;\n          }\n        }\n\n        // Massenproteste (2 Regierungskarten in der Runde)\n        if ((details?.name === 'Massenproteste' || key === 'Massenproteste') && event.type === 'card_played' && event.lane === 'aussen') {\n          // Vereinfacht: Beide Regierungskarten -1 Einfluss\n          const govCards = board[actingPlayer].aussen.filter(c => c.kind === 'pol') as PoliticianCard[];\n          if (govCards.length >= 2) {\n            adjustInfluence(govCards[0], -1, 'Massenproteste');\n            adjustInfluence(govCards[1], -1, 'Massenproteste');\n            oppTraps.splice(i, 1); i--; trapsChanged = true;\n            log(`Intervention ausgelöst: Massenproteste → ${govCards[0].name} und ${govCards[1].name} -1 Einfluss.`);\n            continue;\n          }\n        }\n\n        // \"Unabhängige\" Untersuchung (gegen Intervention)\n        if ((details?.name === '\"Unabhängige\" Untersuchung' || key === 'Unabhaengige_Untersuchung') && event.type === 'card_played' && event.card?.kind === 'spec') {\n          const specCard = event.card as SpecialCard;\n          if (specCard.type === 'Intervention') {\n            // Intervention annullieren (vereinfacht: Karte zurück auf Hand)\n            const hands = { ...prev.hands } as GameState['hands'];\n            hands[actingPlayer].push(event.card);\n            prev.hands = hands;\n            oppTraps.splice(i, 1); i--; trapsChanged = true;\n            log(`Intervention ausgelöst: \"Unabhängige\" Untersuchung → ${event.card.name} wird annulliert.`);\n            continue;\n          }\n        }\n\n        // Maulwurf (kopiere schwächere Regierungskarte des Gegners)\n        if ((details?.name === 'Maulwurf' || key === 'Maulwurf') && event.type === 'card_played' && event.lane === 'aussen') {\n          const oppGovCards = board[opponent].aussen.filter(c => c.kind === 'pol') as PoliticianCard[];\n          if (oppGovCards.length > 0) {\n            // Finde schwächste Regierungskarte\n            const weakestCard = oppGovCards.reduce((weakest, current) =>\n              (current.influence < weakest.influence) ? current : weakest\n            );\n            // Kopie erstellen (vereinfacht: gleiche Karte auf eigene Hand)\n            const hands = { ...prev.hands } as GameState['hands'];\n            const copyCard = { ...weakestCard, uid: Date.now() + Math.random() };\n            hands[opponent].push(copyCard);\n            prev.hands = hands;\n            oppTraps.splice(i, 1); i--; trapsChanged = true;\n            log(`Intervention ausgelöst: Maulwurf → Kopie von ${weakestCard.name} auf Hand.`);\n            continue;\n          }\n        }\n\n        // Skandalspirale (Initiative + Öffentlichkeitskarte)\n        if ((details?.name === 'Skandalspirale' || key === 'Skandalspirale') && event.type === 'card_played') {\n          // Vereinfacht: Prüfe ob Initiative und Öffentlichkeitskarte in dieser Runde gespielt wurden\n          const recentCards = board[actingPlayer].innen.concat(board[actingPlayer].aussen);\n          const hasInitiative = recentCards.some(c => c.kind === 'spec' && (c as SpecialCard).type === 'Sofort-Initiative');\n          const hasPublic = recentCards.some(c => c.kind === 'spec' && (c as SpecialCard).type === 'Öffentlichkeitskarte');\n          if (hasInitiative && hasPublic) {\n            // Eine der beiden Karten annullieren (vereinfacht: letzte Öffentlichkeitskarte)\n            const pubCards = board[actingPlayer].innen.filter(c => c.kind === 'spec' && (c as SpecialCard).type === 'Öffentlichkeitskarte');\n            if (pubCards.length > 0) {\n              const lastPubCard = pubCards[pubCards.length - 1];\n              const arr = [...board[actingPlayer].innen];\n              const idx = arr.findIndex(c => c.uid === lastPubCard.uid);\n              if (idx >= 0) {\n                arr.splice(idx, 1);\n                board = {\n                  ...board,\n                  [actingPlayer]: { ...board[actingPlayer], innen: arr }\n                } as GameState['board'];\n              }\n            }\n            oppTraps.splice(i, 1); i--; trapsChanged = true;\n            log(`Intervention ausgelöst: Skandalspirale → Öffentlichkeitskarte annulliert.`);\n            continue;\n          }\n        }\n\n        // Satire-Show (bei mehr Einfluss als Gegner)\n        if ((details?.name === 'Satire-Show' || key === 'Satire_Show')) {\n          const playerInfluence = sumRow([...board[opponent].aussen]);\n          const opponentInfluence = sumRow([...board[actingPlayer].aussen]);\n          if (opponentInfluence > playerInfluence) {\n            const oppGovCards = board[opponent].aussen.filter(c => c.kind === 'pol') as PoliticianCard[];\n            if (oppGovCards.length > 0) {\n              // Erste Regierungskarte -2 Einfluss\n              adjustInfluence(oppGovCards[0], -2, 'Satire-Show');\n              oppTraps.splice(i, 1); i--; trapsChanged = true;\n              log(`Intervention ausgelöst: Satire-Show → ${oppGovCards[0].name} -2 Einfluss.`);\n              continue;\n            }\n          }\n        }\n      }\n    }\n\n    if (trapsChanged) {\n      const newTraps = { ...prev.traps, [opponent]: oppTraps } as GameState['traps'];\n      return [board, newTraps];\n    }\n    return [null, null];\n  };\n\n  // Zentrale Effekt-Queue Verarbeitung\n  const processEffectQueue = useCallback((state: GameState): GameState => {\n    if (!state.effectQueue || state.effectQueue.items.length === 0) {\n      return state;\n    }\n\n    const [newQueue, newState] = EffectQueueManager.processQueue(\n      state.effectQueue,\n      state,\n      log\n    );\n\n    return {\n      ...newState,\n      effectQueue: newQueue\n    };\n  }, [log]);\n\n  // Berechne Einfluss mit dauerhaften Auren-Effekten\n  const sumRowWithAuras = (state: GameState, player: Player): number => {\n    const govCards = state.board[player].aussen.filter(c => c.kind === 'pol') as PoliticianCard[];\n    const opponent: Player = player === 1 ? 2 : 1;\n    let total = 0;\n\n    // 🔍 DEBUG: Log welche Regierungskarten gefunden wurden\n    console.log(`🔍 sumRowWithAuras P${player}: Gefunden ${govCards.length} Regierungskarten:`,\n      govCards.map(c => `${c.name}[${c.influence}I]`).join(', '));\n\n    govCards.forEach(card => {\n      let influence = card.influence;\n\n      // Dauerhafte Auren anwenden\n      const govSlot = state.permanentSlots[player].government;\n      const pubSlot = state.permanentSlots[player].public;\n\n      // Koalitionszwang: Old Tier 2 bonus removed - now uses complex coalition bonus calculation\n\n      // Napoleon Komplex: Tier 1 Regierungskarten +1 Einfluss\n      if (govSlot?.kind === 'spec' && (govSlot as SpecialCard).name === 'Napoleon Komplex') {\n        if (card.T === 1) influence += 1;\n      }\n\n      // Zivilgesellschaft: Bewegung-Karten +1 Einfluss\n      if (pubSlot?.kind === 'spec' && (pubSlot as SpecialCard).name === 'Zivilgesellschaft') {\n        const bewegungNames = ['Greta Thunberg', 'Malala Yousafzai', 'Ai Weiwei', 'Alexei Navalny'];\n        const hasBewegung = state.board[player].innen.some(c => c.kind === 'spec' && (c as SpecialCard).type === 'Öffentlichkeitskarte' && bewegungNames.includes(c.name));\n        if (hasBewegung) influence += 1;\n      }\n\n      // 🔥 JOSCHKA FISCHER NGO-BOOST: +1 Einfluss wenn NGO auf dem Board liegt\n      if (card.name === 'Joschka Fischer' && (card as any).effect === 'ngo_boost') {\n        const hasNgoCard = state.board[player].innen.some(c =>\n          c.kind === 'spec' &&\n          (c as SpecialCard).type === 'Öffentlichkeitskarte' &&\n          (c as any).tag === 'NGO'\n        );\n        if (hasNgoCard) {\n          influence += 1;\n          // Log nur beim ersten Mal, um Spam zu vermeiden\n          if (!(card as any)._ngoBoostLogged) {\n            console.log(`🔥 JOSCHKA FISCHER KONTINUIERLICHER NGO-BOOST: +1 Einfluss`);\n            (card as any)._ngoBoostLogged = true;\n          }\n        } else {\n          (card as any)._ngoBoostLogged = false;\n        }\n      }\n\n      // Milchglas Transparenz: +1 Einfluss wenn keine NGO/Bewegung liegt\n      if (govSlot?.kind === 'spec' && (govSlot as SpecialCard).name === 'Milchglas Transparenz') {\n        const ngoMovementNames = ['Jennifer Doudna', 'Noam Chomsky', 'Bill Gates', 'Greta Thunberg', 'Malala Yousafzai', 'Ai Weiwei', 'Alexei Navalny'];\n        const hasNgoMovement = state.board[player].innen.some(c => c.kind === 'spec' && (c as SpecialCard).type === 'Öffentlichkeitskarte' && ngoMovementNames.includes(c.name));\n        if (!hasNgoMovement) influence += 1;\n      }\n\n      // Alternative Fakten: Gegner-Interventionen -1 Wirkung\n      const oppPubSlot = state.permanentSlots[opponent].public;\n      if (oppPubSlot?.kind === 'spec' && (oppPubSlot as SpecialCard).name === 'Alternative Fakten') {\n        // Reduziere Effekt von Interventionen (vereinfacht: -1 Einfluss weniger)\n        // Wird in der Intervention-Auswertung berücksichtigt\n      }\n\n      total += influence;\n    });\n\n    // 🔍 DEBUG: Final influence calculation\n    console.log(`🎯 sumRowWithAuras P${player}: Gesamt-Einfluss = ${total}`);\n    return total;\n  };\n\n  // playCard is now handled by useGameActions hook\n\n  // runAITurn is now handled by useGameAI hook - removed duplicate implementation\n\n  const applyStartOfTurnHooksLegacy = useCallback((player: Player, state: GameState) => {\n    logFunctionCall('applyStartOfTurnHooksLegacy', { player, round: state.round }, 'Starting legacy turn hooks');\n\n    const pool = [...state.board[player].innen, ...state.board[player].aussen];\n    pool.forEach(c => {\n        if (c.kind === 'pol') {\n        const polCard = c as PoliticianCard;\n        if (polCard._pledgeDown && polCard._pledgeDown.round === state.round) {\n          const oldInfluence = polCard.influence;\n          adjustInfluence(polCard, polCard._pledgeDown.amount, 'Wahlversprechen');\n          const newInfluence = polCard.influence;\n          log(`Wahlversprechen Abzug auf ${polCard.name}: ${oldInfluence} → ${newInfluence}`);\n          polCard._pledgeDown = null;\n        }\n        // reset once-per-round flags\n        polCard._hypedRoundFlag = false;\n      }\n    });\n\n    // Apply permanent initiative effects\n    const govSlot = state.permanentSlots[player].government;\n    const pubSlot = state.permanentSlots[player].public;\n\n    if (govSlot && govSlot.kind === 'spec') {\n      const govInitiative = govSlot as SpecialCard;\n      logFunctionCall('applyPermanentInitiative', { slot: 'government', initiative: govInitiative.name }, 'Processing government permanent initiative');\n\n      if (govInitiative.name === 'Alternative Fakten') {\n        // Alle Oligarchen geben +1 Einfluss\n        const oligarchCards = pool.filter(c =>\n          c.kind === 'pol' &&\n          ['Elon Musk', 'Bill Gates', 'George Soros', 'Warren Buffett', 'Mukesh Ambani', 'Jeff Bezos', 'Alisher Usmanov', 'Gautam Adani', 'Jack Ma', 'Zhang Yiming', 'Roman Abramovich'].includes(c.name)\n        ) as PoliticianCard[];\n\n        logDataFlow('board analysis', 'oligarch cards', {\n          count: oligarchCards.length,\n          cards: oligarchCards.map(c => ({ name: c.name, influence: c.kind === 'pol' ? (c as any).influence : 0 }))\n        }, 'Finding oligarch cards for Alternative Fakten effect');\n\n        let totalInfluenceGained = 0;\n        oligarchCards.forEach(card => {\n          const oldInfluence = card.influence;\n          adjustInfluence(card, 1, 'Alternative Fakten');\n          const newInfluence = card.influence;\n          totalInfluenceGained += 1;\n          logCardEffect('Alternative Fakten', `${card.name} erhält +1 Einfluss (${oldInfluence} → ${newInfluence})`);\n        });\n\n        if (oligarchCards.length > 0) {\n          logCardEffect('Alternative Fakten', `${oligarchCards.length} Oligarchen gefunden - ${totalInfluenceGained} Punkte zum Gesamteinfluss hinzugefügt`);\n        } else {\n          logWarning('No oligarch cards found', 'Alternative Fakten effect has no targets');\n        }\n      }\n    }\n\n    if (pubSlot && pubSlot.kind === 'spec') {\n      const pubInitiative = pubSlot as SpecialCard;\n      logFunctionCall('applyPermanentInitiative', { slot: 'public', initiative: pubInitiative.name }, 'Processing public permanent initiative');\n\n      if (pubInitiative.name === 'Algorithmischer Diskurs') {\n        // Alle Medien-Karten geben +1 Einfluss\n        const mediaCards = pool.filter(c =>\n          c.kind === 'pol' &&\n          ['Oprah Winfrey', 'Mark Zuckerberg', 'Tim Cook', 'Sam Altman'].includes(c.name)\n        ) as PoliticianCard[];\n\n        logDataFlow('board analysis', 'media cards', {\n          count: mediaCards.length,\n          cards: mediaCards.map(c => ({ name: c.name, influence: c.kind === 'pol' ? (c as any).influence : 0 }))\n        }, 'Finding media cards for Algorithmischer Diskurs effect');\n\n        let totalInfluenceGained = 0;\n        mediaCards.forEach(card => {\n          const oldInfluence = card.influence;\n          adjustInfluence(card, 1, 'Algorithmischer Diskurs');\n          const newInfluence = card.influence;\n          totalInfluenceGained += 1;\n          logCardEffect('Algorithmischer Diskurs', `${card.name} erhält +1 Einfluss (${oldInfluence} → ${newInfluence})`);\n        });\n\n        if (mediaCards.length > 0) {\n          logCardEffect('Algorithmischer Diskurs', `${mediaCards.length} Medien-Karten gefunden - ${totalInfluenceGained} Punkte zum Gesamteinfluss hinzugefügt`);\n        } else {\n          logWarning('No media cards found', 'Algorithmischer Diskurs effect has no targets');\n        }\n      }\n    }\n\n    // Legacy flags reset is replaced by the new applyStartOfTurnHooks implementation\n\n    logFunctionCall('applyStartOfTurnHooksLegacy', { player }, 'Legacy turn hooks completed');\n  }, [logFunctionCall, logDataFlow, logCardEffect, logWarning]);\n\n  // Helper: Leadership vorhanden?\n  const hasLeadershipCard = (player: Player, state: GameState): boolean => {\n    const gov = state.board[player].aussen;\n    const names = ['Justin Trudeau'];\n    return gov.some(c => c.kind === 'pol' && names.includes(c.name) && !(c as PoliticianCard).deactivated);\n  };\n\n  // Helper: Bewegung vorhanden? (Öffentlichkeitsreihe)\n  const hasMovementCard = (player: Player, state: GameState): boolean => {\n    const pub = state.board[player].innen;\n    const names = ['Greta Thunberg', 'Malala Yousafzai', 'Ai Weiwei', 'Alexei Navalny'];\n    return pub.some(c => c.kind === 'pol' && names.includes(c.name) && !(c as PoliticianCard).deactivated);\n  };\n\n  // Helper: Plattform vorhanden? (Öffentlichkeitsreihe)\n  const hasPlatformCard = (player: Player, state: GameState): boolean => {\n    const pub = state.board[player].innen;\n    const names = ['Mark Zuckerberg', 'Tim Cook', 'Jack Ma', 'Zhang Yiming'];\n    return pub.some(c => c.kind === 'pol' && names.includes(c.name) && !(c as PoliticianCard).deactivated);\n  };\n\n  // Helper: Diplomat vorhanden? (Regierungsreihe)\n  const hasDiplomatCard = (player: Player, state: GameState): boolean => {\n    const gov = state.board[player].aussen;\n    const names = ['Joschka Fischer', 'Sergey Lavrov', 'Ursula von der Leyen', 'Jens Stoltenberg', 'Horst Köhler', 'Walter Scheel', 'Hans Dietrich Genscher', 'Colin Powell', 'Condoleezza Rice', 'Christine Lagarde'];\n    return gov.some(c => c.kind === 'pol' && names.includes(c.name) && !(c as PoliticianCard).deactivated);\n  };\n\n  // Helper: Einfluss-Transfer durch Dauerhaft-Initiativen blockiert? (Koalitionszwang, Napoleon Komplex)\n  const hasInfluenceTransferBlock = (player: Player, state: GameState): boolean => {\n    const govSlot = state.permanentSlots[player].government;\n    if (!govSlot || govSlot.kind !== 'spec') return false;\n    const spec = govSlot as SpecialCard;\n    return ['Koalitionszwang', 'Napoleon Komplex'].includes(spec.name);\n  };\n\n  // Helper: Kann Spieler mehrere Interventionen spielen? (Putin-Fähigkeit)\n  const canPlayMultipleInterventions = (player: Player, state: GameState): boolean => {\n    const govCards = state.board[player].aussen.filter(c => c.kind === 'pol') as PoliticianCard[];\n    return govCards.some(c => c.name === 'Vladimir Putin' && !c.deactivated);\n  };\n\n  const selectHandCard = useCallback((index: number | null) => {\n    setSelectedHandIndex(index);\n  }, []);\n\n  const passTurn = useCallback((player: Player) => {\n    setGameState(prev => {\n      if (prev.current !== player) return prev;\n\n      const newState = { ...prev, passed: { ...prev.passed, [player]: true } };\n      log(`Spieler ${player} passt.`);\n\n      // If both players have passed, resolve the round\n      if (newState.passed[1] && newState.passed[2]) {\n        return resolveRound(newState);\n      }\n\n      return newState;\n    });\n  }, [log, resolveRound]);\n\n  // Diplomat-Einfluss-Transfer Funktion\n  const transferInfluence = useCallback((player: Player, fromCardUid: number, toCardUid: number, amount: number) => {\n    setGameState(prev => {\n      if (prev.current !== player) return prev;\n\n      const flags = prev.effectFlags?.[player];\n      if (!flags || flags.diplomatInfluenceTransferUsed || flags.influenceTransferBlocked) return prev;\n      if (!hasDiplomatCard(player, prev)) return prev;\n\n      // Finde beide Karten in der Regierungsreihe\n      const govCards = prev.board[player].aussen;\n      const fromCard = govCards.find(c => c.uid === fromCardUid && c.kind === 'pol') as PoliticianCard;\n      const toCard = govCards.find(c => c.uid === toCardUid && c.kind === 'pol') as PoliticianCard;\n\n      if (!fromCard || !toCard || fromCard.influence < amount) return prev;\n\n      // Transfer durchführen\n      adjustInfluence(fromCard, -amount, 'Diplomat-Transfer');\n      adjustInfluence(toCard, amount, 'Diplomat-Transfer');\n\n      // Flag setzen\n      const newFlags = { ...flags, diplomatInfluenceTransferUsed: true };\n      const newEffectFlags = { ...prev.effectFlags, [player]: newFlags } as GameState['effectFlags'];\n\n      log(`P${player} transferiert ${amount} Einfluss von ${fromCard.name} zu ${toCard.name} (Diplomat).`);\n\n      return {\n        ...prev,\n        effectFlags: newEffectFlags\n      };\n    });\n  }, [log]);\n\n  // Active Abilities Management\n  const getActiveAbilities = useCallback((player: Player) => {\n    return ActiveAbilitiesManager.getAvailableAbilities(player, gameState);\n  }, []);\n\n  const useActiveAbility = useCallback((abilityId: string, targetCardUid?: number) => {\n    setGameState(prev => {\n      const player = prev.current;\n      const abilities = ActiveAbilitiesManager.getAvailableAbilities(player, prev);\n      const ability = abilities.find(a => a.id === abilityId);\n\n      if (!ability || !ActiveAbilitiesManager.canUseAbility(ability, player, prev)) {\n        return prev;\n      }\n\n      // Finde Actor Card\n      const allCards = [...prev.board[player].innen, ...prev.board[player].aussen].filter(c => c.kind === 'pol') as PoliticianCard[];\n      const actorCard = allCards.find(c => ability.id.includes(c.uid.toString()));\n\n      if (!actorCard) return prev;\n\n      // Finde Target Card wenn nötig\n      let targetCard: PoliticianCard | undefined;\n      if (targetCardUid) {\n        const allTargets = [...prev.board[1].innen, ...prev.board[1].aussen, ...prev.board[2].innen, ...prev.board[2].aussen].filter(c => c.kind === 'pol') as PoliticianCard[];\n        targetCard = allTargets.find(c => c.uid === targetCardUid);\n      }\n\n      const select = {\n        type: ability.type,\n        actorCard,\n        actorPlayer: player,\n        targetCard\n      } as any;\n\n      const newState = ActiveAbilitiesManager.executeAbility(ability, select, prev);\n\n      log(`${actorCard.name} nutzt ${ability.name}${targetCard ? ` auf ${targetCard.name}` : ''}.`);\n\n      return newState;\n    });\n  }, [gameState, log]);\n\n  // Reset aktive Fähigkeiten zu Rundenbeginn\n  const resetActiveAbilities = useCallback((state: GameState): GameState => {\n    const newState = { ...state };\n\n    // Reset _activeUsed für alle Politikerkarten\n    [1, 2].forEach(player => {\n      const allCards = [...newState.board[player as Player].innen, ...newState.board[player as Player].aussen].filter(c => c.kind === 'pol') as PoliticianCard[];\n      allCards.forEach(card => {\n        card._activeUsed = false;\n      });\n    });\n\n    return newState;\n  }, []);\n\n  // Putin Doppelte Interventionen\n  const executePutinDoubleIntervention = useCallback((interventionCardIds: number[]) => {\n    setGameState(prev => {\n      const player = prev.current;\n      const newState = ActiveAbilitiesManager.executePutinDoubleIntervention(prev, player, interventionCardIds, log);\n      return newState;\n    });\n  }, [log]);\n\n  // Check ob Putin Doppel-Intervention verfügbar ist\n  const canUsePutinDoubleIntervention = useCallback((player: Player): boolean => {\n    const board = gameState.board[player];\n    const allCards = [...board.innen, ...board.aussen].filter(c => c.kind === 'pol') as PoliticianCard[];\n    const putin = allCards.find(c => c.name === 'Vladimir Putin');\n\n    if (!putin || putin.deactivated || putin._activeUsed) return false;\n\n    const interventions = gameState.hands[player].filter(c => c.kind === 'spec');\n    return interventions.length >= 2;\n  }, [gameState]);\n\n  // Manual turn advancement for testing\n  const manualAdvanceTurn = useCallback(() => {\n    console.log('🔧 DEBUG: Manual turn advancement triggered');\n    log('🔧 DEBUG: Manual turn advancement triggered');\n    nextTurn();\n  }, [nextTurn, log]);\n\n  return {\n    gameState,\n    selectedHandIndex,\n    log,\n    startNewGame,\n    selectHandCard: setSelectedHandIndex,\n    scores,\n    manualAdvanceTurn, // Manual turn advancement for testing\n\n    // Core game state functions\n    dealStartingHands,\n    resolveRound,\n    nextTurn: gameActions.nextTurn,\n    endTurn: gameActions.endTurn,\n    checkAndAdvanceTurn,\n    shouldAdvanceTurn,\n\n    // Helper functions kept for compatibility\n    hasLeadershipCard,\n    hasMovementCard,\n    hasPlatformCard,\n    hasDiplomatCard,\n    hasInfluenceTransferBlock,\n    canPlayMultipleInterventions,\n    sumRowWithAuras,\n    applyStartOfTurnHooksLegacy,\n\n    // Functions that were migrated to separate hooks\n    passTurn: gameActions.passTurn,\n    transferInfluence,\n    getActiveAbilities,\n    useActiveAbility,\n    resetActiveAbilities,\n    executePutinDoubleIntervention,\n    canUsePutinDoubleIntervention,\n\n    // Delegate primary functionality to separated hooks\n    startMatchWithDecks: gameActions.startMatchWithDecks,\n    startMatchVsAI: gameActions.startMatchVsAI,\n    playCard: gameActions.playCard,\n    activateInstantInitiative: gameActions.activateInstantInitiative,\n\n    // AI functionality\n    runAITurn: gameAI.runAITurn,\n    aiEnabled: gameAI.aiEnabled,\n    setAiEnabled: gameAI.setAiEnabled,\n    aiPreset: gameAI.aiPreset,\n    setAiPreset: gameAI.setAiPreset,\n\n    // Effects functionality\n    executeCardEffect,\n    processEffectQueue,\n    afterQueueResolved,\n  };\n}\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AAC7C,SAA6EC,wBAAwB,QAAQ,eAAe;AAC5H,SAASC,IAAI,EAAEC,QAAQ,EAAEC,YAAY,QAAQ,kBAAkB;AAC/D,SACEC,MAAM,EACNC,OAAO,EACPC,eAAe,EACfC,gBAAgB,EAChBC,oBAAoB,EACpBC,SAAS,EACTC,mBAAmB,EACnBC,sBAAsB,EACtBC,eAAe,EACfC,gBAAgB,EAChBC,+BAA+B,EAC/BC,kBAAkB,EAClBC,sBAAsB,QACjB,oBAAoB;AAC3B,SAASC,cAAc,QAAQ,qBAAqB;AACpD,SAASC,cAAc,QAAQ,kBAAkB;AACjD,SAASC,SAAS,QAAQ,aAAa;AACvC,SAASC,cAAc,QAAQ,kBAAkB;AACjD,SAASC,qBAAqB,QAAQ,2BAA2B;AACjE,SAASC,UAAU,QAA2C,gBAAgB;AAE9E,MAAMC,gBAA2B,GAAG;EAClCC,KAAK,EAAE,CAAC;EACRC,OAAO,EAAE,CAAC;EACVC,MAAM,EAAE;IAAE,CAAC,EAAE,KAAK;IAAE,CAAC,EAAE;EAAM,CAAC;EAC9BC,YAAY,EAAE;IAAE,CAAC,EAAE,CAAC;IAAE,CAAC,EAAE;EAAE,CAAC;EAC5BC,WAAW,EAAE;IAAE,CAAC,EAAE,CAAC;IAAE,CAAC,EAAE;EAAE,CAAC;EAC3BC,KAAK,EAAE;IAAE,CAAC,EAAE,EAAE;IAAE,CAAC,EAAE;EAAG,CAAC;EACvBC,KAAK,EAAE;IAAE,CAAC,EAAE,EAAE;IAAE,CAAC,EAAE;EAAG,CAAC;EACvBC,KAAK,EAAE;IAAE,CAAC,EAAE,EAAE;IAAE,CAAC,EAAE;EAAG,CAAC;EACvBC,KAAK,EAAEV,UAAU,CAAC,CAAC;EACnBW,cAAc,EAAE;IACd,CAAC,EAAE;MAAEC,UAAU,EAAE,IAAI;MAAEC,MAAM,EAAE,IAAI;MAAEC,mBAAmB,EAAE;IAAK,CAAC;IAChE,CAAC,EAAE;MAAEF,UAAU,EAAE,IAAI;MAAEC,MAAM,EAAE,IAAI;MAAEC,mBAAmB,EAAE;IAAK;EACjE,CAAC;EACDC,OAAO,EAAE,EAAE;EACXC,GAAG,EAAE,EAAE;EACPC,aAAa,EAAE;IAAE,CAAC,EAAE,CAAC;IAAE,CAAC,EAAE;EAAE,CAAC;EAC7BC,SAAS,EAAE;IAAE,CAAC,EAAE,CAAC;IAAE,CAAC,EAAE;EAAE,CAAC;EACzBC,UAAU,EAAE,IAAI;EAChBC,WAAW,EAAE;IACX,CAAC,EAAE1C,wBAAwB,CAAC,CAAC;IAC7B,CAAC,EAAEA,wBAAwB,CAAC;EAC9B,CAAC;EACD2C,WAAW,EAAE5B,kBAAkB,CAAC6B,eAAe,CAAC,CAAC;EACjDC,eAAe,EAAE;IACf,CAAC,EAAE,EAAE;IACL,CAAC,EAAE;EACL,CAAC;EACDC,oBAAoB,EAAEC,SAAS;EAC/BC,SAAS,EAAE;IAAE,CAAC,EAAE,KAAK;IAAE,CAAC,EAAE;EAAM;AAClC,CAAC;AAED,OAAO,SAASC,YAAYA,CAAA,EAAG;EAAAC,EAAA;EAC7B,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGtD,QAAQ,CAAYyB,gBAAgB,CAAC;EACvE,MAAM,CAAC8B,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGxD,QAAQ,CAAgB,IAAI,CAAC;EAE/E,MAAMwC,GAAG,GAAGvC,WAAW,CAAEwD,GAAW,IAAK;IACvC,MAAMC,SAAS,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,kBAAkB,CAAC,OAAO,EAAE;MACvDC,IAAI,EAAE,SAAS;MACfC,MAAM,EAAE,SAAS;MACjBC,MAAM,EAAE;IACV,CAAC,CAAC;IACF,MAAMC,QAAQ,GAAG,IAAIN,SAAS,KAAKD,GAAG,EAAE;IAExCQ,OAAO,CAACzB,GAAG,CAACwB,QAAQ,CAAC,CAAC,CAAC;;IAEvBV,YAAY,CAACY,IAAI,KAAK;MACpB,GAAGA,IAAI;MACP1B,GAAG,EAAE,CAAC,GAAG0B,IAAI,CAAC1B,GAAG,EAAEwB,QAAQ;IAC7B,CAAC,CAAC,CAAC;EACL,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMG,gBAAgB,GAAGlE,WAAW,CAAC,CAACmE,MAAc,EAAEC,OAAe,KAAK;IACxE7B,GAAG,CAAC,UAAU4B,MAAM,MAAMC,OAAO,EAAE,CAAC;EACtC,CAAC,EAAE,CAAC7B,GAAG,CAAC,CAAC;EAET,MAAM8B,kBAAkB,GAAGrE,WAAW,CAAC,CAACsE,MAAc,EAAEF,OAAe,KAAK;IAC1E7B,GAAG,CAAC,aAAa+B,MAAM,MAAMF,OAAO,EAAE,CAAC;EACzC,CAAC,EAAE,CAAC7B,GAAG,CAAC,CAAC;EAET,MAAMgC,WAAW,GAAGvE,WAAW,CAAC,CAACmE,MAAc,EAAEC,OAAe,KAAK;IACnE7B,GAAG,CAAC,UAAU4B,MAAM,MAAMC,OAAO,EAAE,CAAC;EACtC,CAAC,EAAE,CAAC7B,GAAG,CAAC,CAAC;EAET,MAAMiC,aAAa,GAAGxE,WAAW,CAAC,CAACyE,QAAgB,EAAEC,MAAc,KAAK;IACtEnC,GAAG,CAAC,aAAakC,QAAQ,MAAMC,MAAM,EAAE,CAAC;EAC1C,CAAC,EAAE,CAACnC,GAAG,CAAC,CAAC;EAET,MAAMoC,eAAe,GAAG3E,WAAW,CAAC,CAAC4E,gBAAwB,EAAEC,OAAe,KAAK;IACjFtC,GAAG,CAAC,oBAAoBqC,gBAAgB,oBAAoBC,OAAO,EAAE,CAAC;EACxE,CAAC,EAAE,CAACtC,GAAG,CAAC,CAAC;;EAET;EACA,MAAMuC,eAAe,GAAG9E,WAAW,CAAC,CAAC+E,YAAoB,EAAEC,MAAW,EAAEC,OAAe,KAAK;IAC1F,MAAMC,QAAQ,GAAG,OAAOF,MAAM,KAAK,QAAQ,GAAGG,IAAI,CAACC,SAAS,CAACJ,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC,GAAGK,MAAM,CAACL,MAAM,CAAC;IAC9FzC,GAAG,CAAC,YAAYwC,YAAY,IAAIG,QAAQ,OAAOD,OAAO,EAAE,CAAC;EAC3D,CAAC,EAAE,CAAC1C,GAAG,CAAC,CAAC;EAET,MAAM+C,WAAW,GAAGtF,WAAW,CAAC,CAACuF,IAAY,EAAEC,EAAU,EAAEC,IAAS,EAAEtB,MAAc,KAAK;IACvF,MAAMuB,OAAO,GAAG,OAAOD,IAAI,KAAK,QAAQ,GAAGN,IAAI,CAACC,SAAS,CAACK,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,GAAGJ,MAAM,CAACI,IAAI,CAAC;IACvFlD,GAAG,CAAC,YAAYgD,IAAI,MAAMC,EAAE,MAAMrB,MAAM,YAAYuB,OAAO,EAAE,CAAC;EAChE,CAAC,EAAE,CAACnD,GAAG,CAAC,CAAC;EAET,MAAMoD,iBAAiB,GAAG3F,WAAW,CAAC,CAAC4F,SAAiB,EAAEC,MAAe,EAAEZ,OAAe,KAAK;IAC7F1C,GAAG,CAAC,aAAaqD,SAAS,MAAMC,MAAM,MAAMZ,OAAO,EAAE,CAAC;EACxD,CAAC,EAAE,CAAC1C,GAAG,CAAC,CAAC;EAET,MAAMuD,QAAQ,GAAG9F,WAAW,CAAC,CAAC+F,KAAa,EAAEd,OAAe,KAAK;IAC/D1C,GAAG,CAAC,YAAYwD,KAAK,MAAMd,OAAO,EAAE,CAAC;EACvC,CAAC,EAAE,CAAC1C,GAAG,CAAC,CAAC;EAET,MAAMyD,UAAU,GAAGhG,WAAW,CAAC,CAACiG,OAAe,EAAEhB,OAAe,KAAK;IACnE1C,GAAG,CAAC,YAAY0D,OAAO,MAAMhB,OAAO,EAAE,CAAC;EACzC,CAAC,EAAE,CAAC1C,GAAG,CAAC,CAAC;;EAET;EACA,MAAM2D,kBAAkB,GAAGlG,WAAW,CAAC,MAAM;IAC3CqD,YAAY,CAAC8C,CAAC,IAAI;MAAA,IAAAC,QAAA;MAChB,MAAMC,CAAC,GAAG;QAAE,GAAGF;MAAE,CAAC;MAClBE,CAAC,CAACtE,KAAK,GAAG;QACR,CAAC,EAAE,CAAC,GAAGoE,CAAC,CAACpE,KAAK,CAAC,CAAC,CAAC,CAAC;QAClB,CAAC,EAAE,CAAC,GAAGoE,CAAC,CAACpE,KAAK,CAAC,CAAC,CAAC;MACnB,CAAQ;MACR;MACCsE,CAAC,CAASD,QAAQ,GAAG,EAAAA,QAAA,GAAED,CAAC,CAASC,QAAQ,cAAAA,QAAA,cAAAA,QAAA,GAAI,CAAC,IAAI,CAAC;MACpD,OAAOC,CAAC;IACV,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMC,WAAW,GAAGnF,cAAc,CAACiC,SAAS,EAAEC,YAAY,EAAEd,GAAG,EAAE2D,kBAAkB,CAAC;EACpF,MAAMK,MAAM,GAAGnF,SAAS,CAACgC,SAAS,EAAEC,YAAY,EAAEd,GAAG,CAAC;EACtD,MAAMiE,WAAW,GAAGnF,cAAc,CAAC+B,SAAS,EAAEC,YAAY,EAAEd,GAAG,CAAC;EAEhE,MAAMkE,iBAAiB,GAAGzG,WAAW,CAAC,MAAM;IAC1CgE,OAAO,CAACzB,GAAG,CAAC,iCAAiC,CAAC;IAC9C,SAASmE,SAASA,CAAA,EAAW;MAC3B,MAAMC,OAAO,GAAG,CAAC,GAAGzG,IAAI,CAAC;MACzB,MAAM0G,QAAQ,GAAG,CAAC,GAAGzG,QAAQ,CAAC;MAC9BG,OAAO,CAACqG,OAAO,CAAC;MAChBrG,OAAO,CAACsG,QAAQ,CAAC;MACjB,MAAMC,IAAY,GAAG,EAAE;MACvBF,OAAO,CAACG,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAACC,OAAO,CAACC,CAAC,IAAIH,IAAI,CAACI,IAAI,CAAC1G,eAAe,CAACyG,CAAC,CAAC,CAAC,CAAC;;MAEhE;MACA,MAAME,SAAS,GAAG,CAAC,OAAO,EAAE,QAAQ,EAAE,SAAS,EAAE,WAAW,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,WAAW,EAAE,SAAS,EAAE,eAAe,EAAE,cAAc,EAAE,cAAc,CAAC;MAC9J,MAAMC,GAAG,GAAGP,QAAQ,CAACE,KAAK,CAAC,CAAC,CAACM,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKJ,SAAS,CAACK,OAAO,CAACF,CAAC,CAACG,IAAI,CAAC,GAAGN,SAAS,CAACK,OAAO,CAACD,CAAC,CAACE,IAAI,CAAC,CAAC;MAClGL,GAAG,CAACL,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAACC,OAAO,CAACZ,CAAC,IAAIU,IAAI,CAACI,IAAI,CAACzG,gBAAgB,CAAC2F,CAAC,CAAC,CAAC,CAAC;MAC7D,OAAO7F,OAAO,CAACuG,IAAI,CAAC,CAACC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC;IACnC;IAEA,MAAMW,KAAK,GAAGf,SAAS,CAAC,CAAC;IACzB,MAAMgB,KAAK,GAAGhB,SAAS,CAAC,CAAC;IAEzB1C,OAAO,CAACzB,GAAG,CAAC,4BAA4B,EAAEkF,KAAK,CAACE,MAAM,EAAED,KAAK,CAACC,MAAM,CAAC;IAErEtE,YAAY,CAACY,IAAI,KAAK;MACpB,GAAGA,IAAI;MACPnC,KAAK,EAAE;QAAE,CAAC,EAAE2F,KAAK;QAAE,CAAC,EAAEC;MAAM,CAAC;MAC7B3F,KAAK,EAAE;QACL,CAAC,EAAE0F,KAAK,CAACG,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC;QACrB,CAAC,EAAEF,KAAK,CAACE,MAAM,CAAC,CAAC,EAAE,CAAC;MACtB;IACF,CAAC,CAAC,CAAC;IACH5D,OAAO,CAACzB,GAAG,CAAC,iDAAiD,EAAGkF,KAAK,CAACE,MAAM,IAAI,CAAC,GAAG,CAAC,GAAGF,KAAK,CAACE,MAAO,CAAC;EACxG,CAAC,EAAE,EAAE,CAAC;EAEN,MAAME,YAAY,GAAG7H,WAAW,CAAC,MAAM;IACrCqD,YAAY,CAAC;MACX,GAAG7B,gBAAgB;MACnBC,KAAK,EAAE,CAAC;MACRC,OAAO,EAAE,CAAC;MACVC,MAAM,EAAE;QAAE,CAAC,EAAE,KAAK;QAAE,CAAC,EAAE;MAAM,CAAC;MAC9BC,YAAY,EAAE;QAAE,CAAC,EAAE,CAAC;QAAE,CAAC,EAAE;MAAE,CAAC;MAC5BC,WAAW,EAAE;QAAE,CAAC,EAAE,CAAC;QAAE,CAAC,EAAE;MAAE,CAAC;MAC3BI,KAAK,EAAEV,UAAU,CAAC,CAAC;MACnBS,KAAK,EAAE;QAAE,CAAC,EAAE,EAAE;QAAE,CAAC,EAAE;MAAG,CAAC;MACvBE,cAAc,EAAE;QACd,CAAC,EAAE;UAAEC,UAAU,EAAE,IAAI;UAAEC,MAAM,EAAE,IAAI;UAAEC,mBAAmB,EAAE;QAAK,CAAC;QAChE,CAAC,EAAE;UAAEF,UAAU,EAAE,IAAI;UAAEC,MAAM,EAAE,IAAI;UAAEC,mBAAmB,EAAE;QAAK;MACjE,CAAC;MACD;MACAC,OAAO,EAAE,EAAE;MACXC,GAAG,EAAE,EAAE;MACPC,aAAa,EAAE;QAAE,CAAC,EAAE,CAAC;QAAE,CAAC,EAAE;MAAE;IAC9B,CAAC,CAAC;IACFiE,iBAAiB,CAAC,CAAC;EACrB,CAAC,EAAE,CAACA,iBAAiB,CAAC,CAAC;EAEvB,MAAMqB,mBAAmB,GAAG9H,WAAW,CAAC,CAAC+H,aAA6B,EAAEC,aAA6B,KAAK;IACxGhE,OAAO,CAACzB,GAAG,CAAC,mEAAmE,CAAC;IAChF;IACAyB,OAAO,CAACzB,GAAG,CAAC,mDAAmD,CAAC;IAChEgE,MAAM,CAAC0B,YAAY,CAAC,IAAI,CAAC;IACzBjE,OAAO,CAACzB,GAAG,CAAC,kEAAkE,CAAC;IAC/EgE,MAAM,CAAC2B,WAAW,CAAC,sBAAsB,CAAC;IAC1ClE,OAAO,CAACzB,GAAG,CAAC,8BAA8B,CAAC;IAE3CyB,OAAO,CAACzB,GAAG,CAAC,4CAA4C,EAAEwF,aAAa,CAACJ,MAAM,EAAE,eAAe,EAAEK,aAAa,CAACL,MAAM,CAAC;IACtH3D,OAAO,CAACzB,GAAG,CAAC,8CAA8C,EAAEwF,aAAa,CAACjB,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,EAAEkB,aAAa,CAAClB,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAEjH,MAAMqB,OAAO,GAAG1H,oBAAoB,CAACsH,aAAa,CAAC;IACnD,MAAMK,OAAO,GAAG3H,oBAAoB,CAACuH,aAAa,CAAC;IAEnD,MAAMK,EAAE,GAAG,CAAC,GAAGF,OAAO,CAAC;IACvB,MAAMG,EAAE,GAAG,CAAC,GAAGF,OAAO,CAAC;IACvB,MAAMG,EAAE,GAAGF,EAAE,CAACT,MAAM,CAAC,CAAC,EAAEY,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEJ,EAAE,CAACV,MAAM,CAAC,CAAC;IAC/C,MAAMe,EAAE,GAAGJ,EAAE,CAACV,MAAM,CAAC,CAAC,EAAEY,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEH,EAAE,CAACX,MAAM,CAAC,CAAC;IAE/C3D,OAAO,CAACzB,GAAG,CAAC,sCAAsC,EAAE4F,OAAO,CAACR,MAAM,EAAE,SAAS,EAAES,OAAO,CAACT,MAAM,CAAC;IAC9F3D,OAAO,CAACzB,GAAG,CAAC,iCAAiC,EAAEgG,EAAE,CAACZ,MAAM,EAAE,IAAI,EAAEe,EAAE,CAACf,MAAM,CAAC;IAC1E3D,OAAO,CAACzB,GAAG,CAAC,4CAA4C,EAAE4F,OAAO,CAACrB,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,EAAEsB,OAAO,CAACtB,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAEnGzD,YAAY,CAAC;MACX,GAAG7B,gBAAgB;MACnBC,KAAK,EAAE,CAAC;MACRC,OAAO,EAAE,CAAC;MACVC,MAAM,EAAE;QAAE,CAAC,EAAE,KAAK;QAAE,CAAC,EAAE;MAAM,CAAC;MAC9BG,KAAK,EAAE;QAAE,CAAC,EAAEuG,EAAE;QAAE,CAAC,EAAEC;MAAG,CAAC;MACvBvG,KAAK,EAAE;QAAE,CAAC,EAAEwG,EAAE;QAAE,CAAC,EAAEG;MAAG,CAAC;MACvBzG,KAAK,EAAEV,UAAU,CAAC,CAAC;MACnBS,KAAK,EAAE;QAAE,CAAC,EAAE,EAAE;QAAE,CAAC,EAAE;MAAG,CAAC;MACvBE,cAAc,EAAE;QACd,CAAC,EAAE;UAAEC,UAAU,EAAE,IAAI;UAAEC,MAAM,EAAE,IAAI;UAAEC,mBAAmB,EAAE;QAAK,CAAC;QAChE,CAAC,EAAE;UAAEF,UAAU,EAAE,IAAI;UAAEC,MAAM,EAAE,IAAI;UAAEC,mBAAmB,EAAE;QAAK;MACjE,CAAC;MACD;MACAC,OAAO,EAAE,EAAE;MACXC,GAAG,EAAE,CAAC,0CAA0CgG,EAAE,CAACZ,MAAM,IAAIe,EAAE,CAACf,MAAM,eAAe,CAAC;MACtFnF,aAAa,EAAE;QAAE,CAAC,EAAE,CAAC;QAAE,CAAC,EAAE;MAAE;IAC9B,CAAC,CAAC;IACFwB,OAAO,CAACzB,GAAG,CAAC,mDAAmD,CAAC;EAClE,CAAC,EAAE,CAACgE,MAAM,CAAC,CAAC;EAEZ,MAAMoC,cAAc,GAAG3I,WAAW,CAAC,CAAC+H,aAA6B,EAAEa,SAAoC,GAAG,sBAAsB,KAAK;IACnI,MAAMZ,aAAa,GAAG5H,YAAY,CAACwI,SAAS,CAAmB;IAC/DrC,MAAM,CAAC0B,YAAY,CAAC,IAAI,CAAC;IACzB1B,MAAM,CAAC2B,WAAW,CAACU,SAAS,CAAC;IAC7BtC,WAAW,CAACwB,mBAAmB,CAACC,aAAa,EAAEC,aAAa,CAAC;EAC/D,CAAC,EAAE,CAACzB,MAAM,EAAED,WAAW,CAAC,CAAC;;EAEzB;EACA,MAAMuC,iBAAiB,GAAG7I,WAAW,CAAC,CAACoD,SAAoB,EAAE0F,MAAc,KAAc;IACvF;IACA,IAAI1F,SAAS,CAACzB,MAAM,CAACmH,MAAM,CAAC,EAAE,OAAO,IAAI;;IAEzC;IACA,IAAI1F,SAAS,CAACxB,YAAY,CAACkH,MAAM,CAAC,IAAI,CAAC,EAAE,OAAO,IAAI;;IAEpD;IACA;;IAEA,OAAO,KAAK;EACd,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMC,iBAAiB,GAAG/I,WAAW,CAAC,CACpCgJ,IAAU,EACVF,MAAc,EACdG,KAAgB,EAChBC,OAA8B,KAChB;IACd,IAAIC,QAAQ,GAAG;MAAE,GAAGF;IAAM,CAAC;IAE3BnE,eAAe,CAAC,mBAAmB,EAAE;MAAEkE,IAAI,EAAEA,IAAI,CAACI,IAAI;MAAEN,MAAM;MAAEO,IAAI,EAAEL,IAAI,CAACM;IAAK,CAAC,EAAE,gCAAgC,CAAC;IAEpH,IAAIN,IAAI,CAACM,IAAI,KAAK,MAAM,EAAE;MACxB,MAAMC,QAAQ,GAAGP,IAAmB;;MAEpC;MACA,IAAIO,QAAQ,CAACH,IAAI,KAAK,iBAAiB,EAAE;QACvC;QACA,MAAMI,UAAU,GAAG,CACjB,GAAGL,QAAQ,CAAClH,KAAK,CAAC6G,MAAM,CAAC,CAACW,KAAK,EAC/B,GAAGN,QAAQ,CAAClH,KAAK,CAAC6G,MAAM,CAAC,CAACY,MAAM,CACjC;QACD,MAAMC,aAAa,GAAGH,UAAU,CAACI,MAAM,CAACC,CAAC,IAAI;UAAA,IAAAC,qBAAA;UAC3C,MAAM1F,OAAO,GAAGlD,cAAc,CAAC2I,CAAC,CAACT,IAAI,CAAC;UACtC,OAAOhF,OAAO,aAAPA,OAAO,wBAAA0F,qBAAA,GAAP1F,OAAO,CAAE2F,aAAa,cAAAD,qBAAA,uBAAtBA,qBAAA,CAAwBE,QAAQ,CAAC,UAAU,CAAC;QACrD,CAAC,CAAC,CAACrC,MAAM;QAET,MAAMsC,UAAU,GAAGzB,IAAI,CAACC,GAAG,CAACkB,aAAa,EAAE,CAAC,CAAC;QAE7C,IAAIM,UAAU,GAAG,CAAC,EAAE;UAClB,MAAMC,QAAQ,GAAGf,QAAQ,CAAClH,KAAK,CAAC6G,MAAM,CAAC,CAACY,MAAM,CAACE,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACP,IAAI,KAAK,KAAK,CAAqB;UAChG,IAAIY,QAAQ,CAACvC,MAAM,EAAE;YACnB,MAAMwC,MAAM,GAAGD,QAAQ,CAAC,CAAC,CAAC;YAC1B,MAAME,OAAO,GAAGD,MAAM,CAACE,SAAS;YAChCxJ,eAAe,CAACsJ,MAAM,EAAEF,UAAU,EAAE,iBAAiB,CAAC;YACtDzF,aAAa,CAAC+E,QAAQ,CAACH,IAAI,EAAE,GAAGe,MAAM,CAACf,IAAI,YAAYa,UAAU,eAAeG,OAAO,MAAMD,MAAM,CAACE,SAAS,IAAI,CAAC;UACpH,CAAC,MAAM;YACLrE,UAAU,CAAC,qBAAqB,EAAE,oCAAoC,CAAC;UACzE;QACF,CAAC,MAAM;UACLxB,aAAa,CAAC+E,QAAQ,CAACH,IAAI,EAAE,uCAAuC,CAAC;QACvE;MACF,CAAC,MACI,IAAIG,QAAQ,CAACH,IAAI,KAAK,aAAa,EAAE;QACxC,MAAMc,QAAQ,GAAGf,QAAQ,CAAClH,KAAK,CAAC6G,MAAM,CAAC,CAACY,MAAM,CAACE,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACP,IAAI,KAAK,KAAK,CAAqB;QAChGhE,WAAW,CAAC,gBAAgB,EAAE,UAAU,EAAE;UAAEgF,KAAK,EAAEJ,QAAQ,CAACvC,MAAM;UAAE4C,KAAK,EAAEL,QAAQ,CAACM,GAAG,CAACX,CAAC,IAAIA,CAAC,CAACT,IAAI;QAAE,CAAC,EAAE,0BAA0B,CAAC;QAEnI,IAAIc,QAAQ,CAACvC,MAAM,GAAG,CAAC,EAAE;UACvB,MAAM8C,UAAU,GAAGP,QAAQ,CAAC,CAAC,CAAC;UAC9B,MAAMQ,YAAY,GAAGD,UAAU,CAACJ,SAAS;UACzCxJ,eAAe,CAAC4J,UAAU,EAAE,CAAC,EAAE,aAAa,CAAC;UAC7C,MAAME,YAAY,GAAGF,UAAU,CAACJ,SAAS;UAEzC7F,aAAa,CAAC+E,QAAQ,CAACH,IAAI,EAAE,GAAGqB,UAAU,CAACrB,IAAI,wBAAwBsB,YAAY,MAAMC,YAAY,GAAG,CAAC;UACzGrF,WAAW,CAAC,sBAAsB,EAAE,YAAY,EAAE;YAAE0D,IAAI,EAAEyB,UAAU,CAACrB,IAAI;YAAEwB,GAAG,EAAEF,YAAY;YAAEG,GAAG,EAAEF,YAAY;YAAErG,MAAM,EAAE;UAAE,CAAC,EAAE,4BAA4B,CAAC;QAC7J,CAAC,MAAM;UACL0B,UAAU,CAAC,2BAA2B,EAAE,kCAAkC,CAAC;QAC7E;MACF,CAAC,MACI,IAAIuD,QAAQ,CAACH,IAAI,KAAK,qBAAqB,EAAE;QAChD5E,aAAa,CAAC+E,QAAQ,CAACH,IAAI,EAAE,0CAA0C,CAAC;QACxE,MAAM;UAAE0B,QAAQ;UAAEC;QAAS,CAAC,GAAGrK,SAAS,CAACoI,MAAM,EAAE,CAAC,EAAEK,QAAQ,EAAED,OAAO,CAAC;QACtEC,QAAQ,GAAG;UAAE,GAAGA,QAAQ;UAAEpH,KAAK,EAAE+I,QAAQ;UAAEhJ,KAAK,EAAEiJ;QAAS,CAAC;;QAE5D;QACAzF,WAAW,CAAC,aAAa,EAAE,UAAU,EAAE;UAAEwD;QAAO,CAAC,EAAE,yBAAyB,CAAC;MAC/E,CAAC,MACI,IAAIS,QAAQ,CAACH,IAAI,KAAK,kBAAkB,EAAE;QAC7C,MAAM4B,QAAgB,GAAGlC,MAAM,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC;QAC7C,MAAMmC,WAAW,GAAG9B,QAAQ,CAAClH,KAAK,CAAC+I,QAAQ,CAAC,CAACtB,MAAM,CAACE,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACP,IAAI,KAAK,KAAK,IAAI,CAAEO,CAAC,CAAoBqB,WAAW,CAAqB;QAC3I5F,WAAW,CAAC,mBAAmB,EAAE,aAAa,EAAE;UAAE0F,QAAQ;UAAEV,KAAK,EAAEW,WAAW,CAACtD,MAAM;UAAE4C,KAAK,EAAEU,WAAW,CAACT,GAAG,CAACX,CAAC,IAAIA,CAAC,CAACT,IAAI;QAAE,CAAC,EAAE,0CAA0C,CAAC;QAEzK,IAAI6B,WAAW,CAACtD,MAAM,GAAG,CAAC,EAAE;UAC1B,MAAM8C,UAAU,GAAGQ,WAAW,CAAC,CAAC,CAAC;UACjCR,UAAU,CAACS,WAAW,GAAG,IAAI;UAC7B1G,aAAa,CAAC+E,QAAQ,CAACH,IAAI,EAAE,GAAGqB,UAAU,CAACrB,IAAI,oCAAoC,CAAC;UACpF9D,WAAW,CAAC,mBAAmB,EAAE,YAAY,EAAE;YAAE0D,IAAI,EAAEyB,UAAU,CAACrB,IAAI;YAAE8B,WAAW,EAAE;UAAK,CAAC,EAAE,iCAAiC,CAAC;QACjI,CAAC,MAAM;UACLlF,UAAU,CAAC,2CAA2C,EAAE,uCAAuC,CAAC;QAClG;MACF,CAAC,MACI,IAAIuD,QAAQ,CAACH,IAAI,KAAK,qBAAqB,EAAE;QAChD,MAAM4B,QAAgB,GAAGlC,MAAM,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC;QAC7C,MAAMqC,OAAO,GAAGhC,QAAQ,CAACpH,KAAK,CAACiJ,QAAQ,CAAC;QACxC1F,WAAW,CAAC,eAAe,EAAE,UAAU,EAAE;UAAE0F,QAAQ;UAAEI,QAAQ,EAAED,OAAO,CAACxD,MAAM;UAAE4C,KAAK,EAAEY,OAAO,CAACX,GAAG,CAACX,CAAC,IAAIA,CAAC,CAACT,IAAI;QAAE,CAAC,EAAE,yBAAyB,CAAC;QAE5I,IAAI+B,OAAO,CAACxD,MAAM,GAAG,CAAC,EAAE;UACtB,MAAM0D,aAAa,GAAGF,OAAO,CAAC3C,IAAI,CAAC8C,KAAK,CAAC9C,IAAI,CAAC+C,MAAM,CAAC,CAAC,GAAGJ,OAAO,CAACxD,MAAM,CAAC,CAAC;UACzE,MAAM6D,UAAU,GAAGL,OAAO,CAACvB,MAAM,CAACC,CAAC,IAAIA,CAAC,KAAKwB,aAAa,CAAC;UAC3DlC,QAAQ,CAACpH,KAAK,GAAG;YAAE,GAAGoH,QAAQ,CAACpH,KAAK;YAAE,CAACiJ,QAAQ,GAAGQ;UAAW,CAAC;UAE9DhH,aAAa,CAAC+E,QAAQ,CAACH,IAAI,EAAE,mBAAmBiC,aAAa,CAACjC,IAAI,eAAe,CAAC;UAClF9D,WAAW,CAAC,cAAc,EAAE,eAAe,EAAE;YAAE0D,IAAI,EAAEqC,aAAa,CAACjC,IAAI;YAAEqC,WAAW,EAAED,UAAU,CAAC7D;UAAO,CAAC,EAAE,oCAAoC,CAAC;QAClJ,CAAC,MAAM;UACL3B,UAAU,CAAC,wBAAwB,EAAE,0CAA0C,CAAC;QAClF;MACF,CAAC,MACI,IAAIuD,QAAQ,CAACH,IAAI,KAAK,aAAa,EAAE;QACxC,MAAM4B,QAAgB,GAAGlC,MAAM,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC;QAC7C,MAAM4C,QAAQ,GAAGvC,QAAQ,CAAClH,KAAK,CAAC+I,QAAQ,CAAC;QACzC,MAAMW,iBAAiB,GAAGtL,MAAM,CAAC,CAAC,GAAGqL,QAAQ,CAACjC,KAAK,EAAE,GAAGiC,QAAQ,CAAChC,MAAM,CAAC,CAAC;QAEzEpE,WAAW,CAAC,yBAAyB,EAAE,uBAAuB,EAAE;UAC9D0F,QAAQ;UACRvB,KAAK,EAAEiC,QAAQ,CAACjC,KAAK,CAACe,GAAG,CAACX,CAAC,KAAK;YAAET,IAAI,EAAES,CAAC,CAACT,IAAI;YAAEiB,SAAS,EAAER,CAAC,CAACP,IAAI,KAAK,KAAK,GAAIO,CAAC,CAASQ,SAAS,GAAG;UAAE,CAAC,CAAC,CAAC;UAC1GX,MAAM,EAAEgC,QAAQ,CAAChC,MAAM,CAACc,GAAG,CAACX,CAAC,KAAK;YAAET,IAAI,EAAES,CAAC,CAACT,IAAI;YAAEiB,SAAS,EAAER,CAAC,CAACP,IAAI,KAAK,KAAK,GAAIO,CAAC,CAASQ,SAAS,GAAG;UAAE,CAAC,CAAC,CAAC;UAC5GuB,cAAc,EAAED;QAClB,CAAC,EAAE,sCAAsC,CAAC;QAE1C,IAAIA,iBAAiB,GAAG,EAAE,EAAE;UAC1B,MAAM;YAAEb,QAAQ;YAAEC;UAAS,CAAC,GAAGrK,SAAS,CAACoI,MAAM,EAAE,CAAC,EAAEK,QAAQ,EAAED,OAAO,CAAC;UACtEC,QAAQ,GAAG;YAAE,GAAGA,QAAQ;YAAEpH,KAAK,EAAE+I,QAAQ;YAAEhJ,KAAK,EAAEiJ;UAAS,CAAC;UAC5DvG,aAAa,CAAC+E,QAAQ,CAACH,IAAI,EAAE,cAAcuC,iBAAiB,iCAAiC,CAAC;QAChG,CAAC,MAAM;UACLnH,aAAa,CAAC+E,QAAQ,CAACH,IAAI,EAAE,cAAcuC,iBAAiB,+BAA+B,CAAC;QAC9F;MACF,CAAC,MACI,IAAIpC,QAAQ,CAACH,IAAI,KAAK,YAAY,EAAE;QACvC,MAAM;UAAE0B,QAAQ;UAAEC;QAAS,CAAC,GAAGrK,SAAS,CAACoI,MAAM,EAAE,CAAC,EAAEK,QAAQ,EAAED,OAAO,CAAC;QACtEC,QAAQ,GAAG;UAAE,GAAGA,QAAQ;UAAEpH,KAAK,EAAE+I,QAAQ;UAAEhJ,KAAK,EAAEiJ;QAAS,CAAC;QAC5DvG,aAAa,CAAC+E,QAAQ,CAACH,IAAI,EAAE,eAAe,CAAC;MAC/C,CAAC,MACI,IAAIG,QAAQ,CAACH,IAAI,KAAK,qBAAqB,EAAE;QAChD,MAAMyC,WAAW,GAAG1C,QAAQ,CAAClH,KAAK,CAAC6G,MAAM,CAAC,CAACW,KAAK,CAACG,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACP,IAAI,KAAK,KAAK,CAAqB;QAClGhE,WAAW,CAAC,uBAAuB,EAAE,iBAAiB,EAAE;UAAEgF,KAAK,EAAEuB,WAAW,CAAClE,MAAM;UAAE4C,KAAK,EAAEsB,WAAW,CAACrB,GAAG,CAACX,CAAC,IAAIA,CAAC,CAACT,IAAI;QAAE,CAAC,EAAE,0CAA0C,CAAC;QAEvKyC,WAAW,CAAC9E,OAAO,CAACiC,IAAI,IAAI;UAC1B,MAAM0B,YAAY,GAAG1B,IAAI,CAACqB,SAAS;UACnCxJ,eAAe,CAACmI,IAAI,EAAE,CAAC,EAAE,qBAAqB,CAAC;UAC/C,MAAM2B,YAAY,GAAG3B,IAAI,CAACqB,SAAS;UACnC7F,aAAa,CAAC+E,QAAQ,CAACH,IAAI,EAAE,GAAGJ,IAAI,CAACI,IAAI,wBAAwBsB,YAAY,MAAMC,YAAY,GAAG,CAAC;QACrG,CAAC,CAAC;QAEF,IAAIkB,WAAW,CAAClE,MAAM,KAAK,CAAC,EAAE;UAC5B3B,UAAU,CAAC,uBAAuB,EAAE,2CAA2C,CAAC;QAClF;MACF,CAAC,MACI,IAAIuD,QAAQ,CAACH,IAAI,KAAK,gBAAgB,EAAE;QAC3C,MAAM4B,QAAgB,GAAGlC,MAAM,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC;QAC7C,MAAMmC,WAAW,GAAG9B,QAAQ,CAAClH,KAAK,CAAC+I,QAAQ,CAAC,CAACtB,MAAM,CAACE,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACP,IAAI,KAAK,KAAK,CAAqB;QACrGhE,WAAW,CAAC,8BAA8B,EAAE,uBAAuB,EAAE;UAAEgF,KAAK,EAAEW,WAAW,CAACtD,MAAM;UAAE4C,KAAK,EAAEU,WAAW,CAACT,GAAG,CAACX,CAAC,IAAIA,CAAC,CAACT,IAAI;QAAE,CAAC,EAAE,mCAAmC,CAAC;QAE7K,IAAI6B,WAAW,CAACtD,MAAM,GAAG,CAAC,EAAE;UAC1B,MAAM8C,UAAU,GAAGQ,WAAW,CAAC,CAAC,CAAC;UACjC,MAAMP,YAAY,GAAGD,UAAU,CAACJ,SAAS;UACzCxJ,eAAe,CAAC4J,UAAU,EAAE,CAAC,CAAC,EAAE,gBAAgB,CAAC;UACjD,MAAME,YAAY,GAAGF,UAAU,CAACJ,SAAS;UAEzC7F,aAAa,CAAC+E,QAAQ,CAACH,IAAI,EAAE,GAAGqB,UAAU,CAACrB,IAAI,yBAAyBsB,YAAY,MAAMC,YAAY,GAAG,CAAC;UAC1GrF,WAAW,CAAC,qBAAqB,EAAE,YAAY,EAAE;YAAE0D,IAAI,EAAEyB,UAAU,CAACrB,IAAI;YAAEwB,GAAG,EAAEF,YAAY;YAAEG,GAAG,EAAEF,YAAY;YAAErG,MAAM,EAAE,CAAC;UAAE,CAAC,EAAE,+BAA+B,CAAC;QAChK,CAAC,MAAM;UACL0B,UAAU,CAAC,oCAAoC,EAAE,qCAAqC,CAAC;QACzF;MACF,CAAC,MACI,IAAIuD,QAAQ,CAACH,IAAI,KAAK,eAAe,EAAE;QAC1C,MAAM;UAAE0B,QAAQ;UAAEC;QAAS,CAAC,GAAGrK,SAAS,CAACoI,MAAM,EAAE,CAAC,EAAEK,QAAQ,EAAED,OAAO,CAAC;QACtEC,QAAQ,GAAG;UAAE,GAAGA,QAAQ;UAAEpH,KAAK,EAAE+I,QAAQ;UAAEhJ,KAAK,EAAEiJ;QAAS,CAAC;QAE5D5B,QAAQ,CAACvH,YAAY,GAAG;UACtB,GAAGuH,QAAQ,CAACvH,YAAY;UACxB,CAACkH,MAAM,GAAGN,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEU,QAAQ,CAACvH,YAAY,CAACkH,MAAM,CAAC,GAAG,CAAC;QACzD,CAAC;QAED,MAAMgD,KAAK,GAAG7C,KAAK,CAACrH,YAAY,CAACkH,MAAM,CAAC;QACxC,MAAMiD,KAAK,GAAG5C,QAAQ,CAACvH,YAAY,CAACkH,MAAM,CAAC;QAC3CtE,aAAa,CAAC+E,QAAQ,CAACH,IAAI,EAAE,iCAAiC0C,KAAK,MAAMC,KAAK,GAAG,CAAC;QAClFzG,WAAW,CAAC,SAAS,EAAE,QAAQ,EAAE;UAAEwD,MAAM;UAAE8B,GAAG,EAAEkB,KAAK;UAAEjB,GAAG,EAAEkB,KAAK;UAAEzH,MAAM,EAAE;QAAE,CAAC,EAAE,8BAA8B,CAAC;MACjH,CAAC,MACI,IAAIiF,QAAQ,CAACH,IAAI,KAAK,gBAAgB,EAAE;QAC3C5E,aAAa,CAAC+E,QAAQ,CAACH,IAAI,EAAE,eAAe,CAAC;QAC7C,MAAM;UAAE0B,QAAQ;UAAEC;QAAS,CAAC,GAAGrK,SAAS,CAACoI,MAAM,EAAE,CAAC,EAAEK,QAAQ,EAAED,OAAO,CAAC;QACtEC,QAAQ,GAAG;UAAE,GAAGA,QAAQ;UAAEpH,KAAK,EAAE+I,QAAQ;UAAEhJ,KAAK,EAAEiJ;QAAS,CAAC;MAC9D,CAAC,MACI,IAAIxB,QAAQ,CAACH,IAAI,KAAK,eAAe,EAAE;QAC1C5E,aAAa,CAAC+E,QAAQ,CAACH,IAAI,EAAE,eAAe,CAAC;QAC7C,MAAM;UAAE0B,QAAQ;UAAEC;QAAS,CAAC,GAAGrK,SAAS,CAACoI,MAAM,EAAE,CAAC,EAAEK,QAAQ,EAAED,OAAO,CAAC;QACtEC,QAAQ,GAAG;UAAE,GAAGA,QAAQ;UAAEpH,KAAK,EAAE+I,QAAQ;UAAEhJ,KAAK,EAAEiJ;QAAS,CAAC;MAC9D;;MAEA;MAAA,KACK,IAAI,CAAC,WAAW,EAAE,YAAY,EAAE,cAAc,EAAE,gBAAgB,EAAE,eAAe,EAAE,YAAY,EAAE,iBAAiB,EAAE,cAAc,EAAE,SAAS,EAAE,cAAc,EAAE,kBAAkB,CAAC,CAACf,QAAQ,CAACT,QAAQ,CAACH,IAAI,CAAC,EAAE;QAC/M5E,aAAa,CAAC+E,QAAQ,CAACH,IAAI,EAAE,iCAAiC,CAAC;QAC/D,MAAM;UAAE0B,QAAQ;UAAEC;QAAS,CAAC,GAAGrK,SAAS,CAACoI,MAAM,EAAE,CAAC,EAAEK,QAAQ,EAAED,OAAO,CAAC;QACtEC,QAAQ,GAAG;UAAE,GAAGA,QAAQ;UAAEpH,KAAK,EAAE+I,QAAQ;UAAEhJ,KAAK,EAAEiJ;QAAS,CAAC;MAC9D;IACF;;IAEA;IACA,IAAI/B,IAAI,CAACM,IAAI,KAAK,MAAM,IAAKN,IAAI,CAAiBK,IAAI,KAAK,sBAAsB,EAAE;MACjF,MAAME,QAAQ,GAAGP,IAAmB;MAEpC,IAAIO,QAAQ,CAACH,IAAI,KAAK,yBAAyB,EAAE;QAC/C5E,aAAa,CAAC+E,QAAQ,CAACH,IAAI,EAAE,6DAA6D,CAAC;QAC3F;MACF,CAAC,MACI,IAAIG,QAAQ,CAACH,IAAI,KAAK,oBAAoB,EAAE;QAC/C5E,aAAa,CAAC+E,QAAQ,CAACH,IAAI,EAAE,0DAA0D,CAAC;QACxF;MACF;IACF;;IAEA;IAAA,KACK,IAAIJ,IAAI,CAACM,IAAI,KAAK,KAAK,EAAE;MAC5B,MAAM0C,OAAO,GAAGhD,IAAsB;MACtCxE,aAAa,CAACwH,OAAO,CAAC5C,IAAI,EAAE,yCAAyC4C,OAAO,CAAC3B,SAAS,EAAE,CAAC;IAC3F;IAEA/E,WAAW,CAAC,mBAAmB,EAAE,UAAU,EAAE;MAAE0D,IAAI,EAAEA,IAAI,CAACI,IAAI;MAAE6C,cAAc,EAAE;IAAK,CAAC,EAAE,iCAAiC,CAAC;IAC1H,OAAO9C,QAAQ;EACjB,CAAC,EAAE,CAACrE,eAAe,EAAEN,aAAa,EAAEc,WAAW,EAAEU,UAAU,CAAC,CAAC;EAE7D,MAAMkG,QAAQ,GAAGlM,WAAW,CAAC,MAAM;IACjC8E,eAAe,CAAC,UAAU,EAAE,CAAC,CAAC,EAAE,sBAAsB,CAAC;IAEvDzB,YAAY,CAAEY,IAAI,IAAgB;MAAA,IAAAkI,gBAAA,EAAAC,eAAA,EAAAC,iBAAA,EAAAC,gBAAA,EAAAC,iBAAA,EAAAC,gBAAA;MAChClH,WAAW,CAAC,IAAI,EAAE,UAAU,EAAE;QAAE5D,OAAO,EAAEuC,IAAI,CAACvC,OAAO;QAAEC,MAAM,EAAEsC,IAAI,CAACtC;MAAO,CAAC,EAAE,qBAAqB,CAAC;;MAEpG;MACAgE,iBAAiB,CAAC,qBAAqB,EAAE1B,IAAI,CAACtC,MAAM,CAAC,CAAC,CAAC,IAAIsC,IAAI,CAACtC,MAAM,CAAC,CAAC,CAAC,EAAE,iBAAiB,CAAC;MAC7F,IAAIsC,IAAI,CAACtC,MAAM,CAAC,CAAC,CAAC,IAAIsC,IAAI,CAACtC,MAAM,CAAC,CAAC,CAAC,EAAE;QACpCmD,eAAe,CAAC,cAAc,EAAE;UAAErD,KAAK,EAAEwC,IAAI,CAACxC;QAAM,CAAC,EAAE,uCAAuC,CAAC;QAC/F,OAAOgL,YAAY,CAACxI,IAAI,CAAC;MAC3B;MAEA,MAAMyI,UAAkB,GAAGzI,IAAI,CAACvC,OAAO,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC;MACrD4D,WAAW,CAAC,aAAa,EAAE,YAAY,EAAE;QAAEsF,GAAG,EAAE3G,IAAI,CAACvC,OAAO;QAAEmJ,GAAG,EAAE6B;MAAW,CAAC,EAAE,eAAe,CAAC;;MAEjG;MACA,MAAMC,eAAe,GAAG;QAAE,GAAG1I,IAAI,CAACrC;MAAa,CAAC;MAChD+K,eAAe,CAACD,UAAU,CAAC,GAAG,CAAC;MAE/BpH,WAAW,CAAC,UAAU,EAAE,YAAY,EAAE;QACpCwD,MAAM,EAAE4D,UAAU;QAClBZ,KAAK,EAAE7H,IAAI,CAACrC,YAAY,CAAC8K,UAAU,CAAC;QACpCX,KAAK,EAAEY,eAAe,CAACD,UAAU,CAAC;QAClCE,UAAU,EAAE,CAAC;QACbC,UAAU,EAAE;MACd,CAAC,EAAE,+BAA+B,CAAC;;MAEnC;MACA,MAAM1D,QAAmB,GAAG;QAC1B,GAAGlF,IAAI;QACPvC,OAAO,EAAEgL,UAAU;QACnB9K,YAAY,EAAE+K;MAChB,CAAC;;MAED;MACApK,GAAG,CAAC,WAAWmK,UAAU,8BAA8B,CAAC;MACxDrI,kBAAkB,CAAC,aAAa,EAAE,UAAUqI,UAAU,eAAe,CAAC;MAEtE5H,eAAe,CAAC,uBAAuB,EAAE;QAAEgE,MAAM,EAAE4D;MAAW,CAAC,EAAE,gCAAgC,CAAC;MAClGpL,qBAAqB,CAAC6H,QAAQ,EAAEuD,UAAU,EAAEnK,GAAG,CAAC;;MAEhD;MACAoD,iBAAiB,CAAC,SAAS,EAAE+G,UAAU,KAAK,CAAC,MAAAP,gBAAA,IAAAC,eAAA,GAAKnI,IAAI,CAAChB,SAAS,cAAAmJ,eAAA,uBAAdA,eAAA,CAAiB,CAAC,CAAC,cAAAD,gBAAA,cAAAA,gBAAA,GAAI,KAAK,CAAC,EAAE,eAAe,CAAC;MACjG,IAAIO,UAAU,KAAK,CAAC,MAAAL,iBAAA,IAAAC,gBAAA,GAAKrI,IAAI,CAAChB,SAAS,cAAAqJ,gBAAA,uBAAdA,gBAAA,CAAiB,CAAC,CAAC,cAAAD,iBAAA,cAAAA,iBAAA,GAAI,KAAK,CAAC,EAAE;QACtDvH,eAAe,CAAC,WAAW,EAAE;UAAEgE,MAAM,EAAE4D;QAAW,CAAC,EAAE,oBAAoB,CAAC;QAC1E;QACAI,UAAU,CAAC,MAAM;UACfvI,WAAW,CAAC,mBAAmB,EAAE,4BAA4B,CAAC;UAC9DgC,MAAM,CAACwG,SAAS,CAAC,CAAC;QACpB,CAAC,EAAE,GAAG,CAAC;MACT;MAEAzH,WAAW,CAAC,UAAU,EAAE,YAAY,EAAE;QACpC5D,OAAO,EAAEyH,QAAQ,CAACzH,OAAO;QACzBsL,EAAE,EAAE7D,QAAQ,CAACvH,YAAY,CAAC8K,UAAU,CAAC;QACrCzJ,SAAS,GAAAsJ,iBAAA,IAAAC,gBAAA,GAAEvI,IAAI,CAAChB,SAAS,cAAAuJ,gBAAA,uBAAdA,gBAAA,CAAiB,CAAC,CAAC,cAAAD,iBAAA,cAAAA,iBAAA,GAAI;MACpC,CAAC,EAAE,uBAAuB,CAAC;MAE3B,OAAOpD,QAAQ;IACjB,CAAC,CAAC;;IAEF;IACAjD,kBAAkB,CAAC,CAAC;EACtB,CAAC,EAAE,CAACpB,eAAe,EAAEQ,WAAW,EAAEK,iBAAiB,EAAEtB,kBAAkB,EAAEkC,MAAM,EAAEhE,GAAG,EAAEgC,WAAW,EAAE2B,kBAAkB,CAAC,CAAC;;EAEvH;EACA,MAAM+G,mBAAmB,GAAGjN,WAAW,CAAEoD,SAAoB,IAAK;IAChE,MAAM8J,aAAa,GAAG9J,SAAS,CAAC1B,OAAO;IACvC,IAAImH,iBAAiB,CAACzF,SAAS,EAAE8J,aAAa,CAAC,EAAE;MAC/C;MACA,MAAMC,WAAmB,GAAGD,aAAa,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC;MACvD,IAAI,CAACrE,iBAAiB,CAACzF,SAAS,EAAE+J,WAAW,CAAC,IAAI/J,SAAS,CAACzB,MAAM,CAACwL,WAAW,CAAC,EAAE;QAC/EjB,QAAQ,CAAC,CAAC;MACZ;IACF;EACF,CAAC,EAAE,CAACrD,iBAAiB,EAAEqD,QAAQ,CAAC,CAAC;EAEjC,MAAMkB,MAAM,GAAGpN,WAAW,CAAEiJ,KAAgB,IAAuB;IACjE;IACA,MAAMoE,EAAE,GAAGtM,+BAA+B,CAACkI,KAAK,EAAE,CAAC,CAAC;IACpD,MAAMqE,EAAE,GAAGvM,+BAA+B,CAACkI,KAAK,EAAE,CAAC,CAAC;IACpD,OAAO,CAACoE,EAAE,EAAEC,EAAE,CAAC;EACjB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMb,YAAY,GAAGzM,WAAW,CAAEiJ,KAAgB,IAAgB;IAChE,MAAM,CAACoE,EAAE,EAAEC,EAAE,CAAC,GAAGF,MAAM,CAACnE,KAAK,CAAC;IAC9B,IAAIsE,MAAa,GAAG,CAAC;IACrB,IAAIC,IAAI,GAAG,EAAE;IAEb,IAAIH,EAAE,GAAGC,EAAE,EAAEC,MAAM,GAAG,CAAC,CAAC,KACnB,IAAID,EAAE,GAAGD,EAAE,EAAEE,MAAM,GAAG,CAAC,CAAC,KACxB;MACH;MACAA,MAAM,GAAGtE,KAAK,CAACtH,MAAM,CAAC,CAAC,CAAC,IAAI,CAACsH,KAAK,CAACtH,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC;MACpD6L,IAAI,GAAG,gCAAgC;IACzC;IAEAjL,GAAG,CAAC,SAAS0G,KAAK,CAACxH,KAAK,cAAc4L,EAAE,SAASC,EAAE,gBAAgBC,MAAM,GAAGC,IAAI,GAAG,CAAC;;IAEpF;IACA,MAAMC,YAAY,GAAG;MAAE,GAAGxE,KAAK,CAACxG;IAAU,CAAC;IAC3CgL,YAAY,CAACF,MAAM,CAAC,IAAI,CAAC;;IAEzB;IACA,IAAI7K,UAAwB,GAAG,IAAI;IACnC,IAAI+K,YAAY,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE;MACxB/K,UAAU,GAAG,CAAC;MACdH,GAAG,CAAC,gDAAgDkL,YAAY,CAAC,CAAC,CAAC,IAAIA,YAAY,CAAC,CAAC,CAAC,GAAG,CAAC;IAC5F,CAAC,MAAM,IAAIA,YAAY,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE;MAC/B/K,UAAU,GAAG,CAAC;MACdH,GAAG,CAAC,gDAAgDkL,YAAY,CAAC,CAAC,CAAC,IAAIA,YAAY,CAAC,CAAC,CAAC,GAAG,CAAC;IAC5F;;IAEA;IACA,MAAMC,QAAQ,GAAGnM,UAAU,CAAC,CAAC;IAC7B,MAAMoM,QAAQ,GAAG;MAAE,CAAC,EAAE,EAAE;MAAE,CAAC,EAAE;IAAG,CAAC;;IAEjC;IACA,MAAM;MAAE7C,QAAQ;MAAEC;IAAS,CAAC,GAAGpK,mBAAmB,CAACsI,KAAK,EAAE1G,GAAG,CAAC;IAE9D,MAAMqL,QAAQ,GAAG3E,KAAK,CAACxH,KAAK,GAAG,CAAC;IAChC,MAAMoM,SAAS,GAAG;MAAE,CAAC,EAAE,KAAK;MAAE,CAAC,EAAE;IAAM,CAAC;IACxC;IACA,MAAMnB,UAAU,GAAIkB,QAAQ,GAAG,CAAC,KAAK,CAAC,GAAI,CAAC,GAAG,CAAC;;IAE/C;IACA,IAAIlL,UAAU,EAAE;MACd,OAAO;QACL,GAAGuG,KAAK;QACRxG,SAAS,EAAEgL,YAAY;QACvB/K;MACF,CAAC;IACH;IAEAH,GAAG,CAAC,SAASqL,QAAQ,cAAclB,UAAU,WAAW,CAAC;;IAEzD;IACA,MAAMoB,cAAc,GAAG;MACrB,CAAC,EAAE;QACD,GAAG7E,KAAK,CAACtG,WAAW,CAAC,CAAC,CAAC;QACvB;QACAoL,sBAAsB,EAAE,KAAK;QAC7BC,yBAAyB,EAAE,KAAK;QAChCC,qBAAqB,EAAE,KAAK;QAC5BC,sBAAsB,EAAE,KAAK;QAC7B;QACAC,kBAAkB,EAAE,KAAK;QACzBC,iBAAiB,EAAE,KAAK;QACxBC,mBAAmB,EAAE,KAAK;QAC1BC,qBAAqB,EAAE,KAAK;QAC5BC,iBAAiB,EAAE,KAAK;QACxBC,4BAA4B,EAAE,KAAK;QACnCC,yBAAyB,EAAE;MAC7B,CAAC;MACD,CAAC,EAAE;QACD,GAAGxF,KAAK,CAACtG,WAAW,CAAC,CAAC,CAAC;QACvB;QACAoL,sBAAsB,EAAE,KAAK;QAC7BC,yBAAyB,EAAE,KAAK;QAChCC,qBAAqB,EAAE,KAAK;QAC5BC,sBAAsB,EAAE,KAAK;QAC7B;QACAC,kBAAkB,EAAE,KAAK;QACzBC,iBAAiB,EAAE,KAAK;QACxBC,mBAAmB,EAAE,KAAK;QAC1BC,qBAAqB,EAAE,KAAK;QAC5BC,iBAAiB,EAAE,KAAK;QACxBC,4BAA4B,EAAE,KAAK;QACnCC,yBAAyB,EAAE;MAC7B;IACF,CAAC;IAED,OAAO;MACL,GAAGxF,KAAK;MACRxH,KAAK,EAAEmM,QAAQ;MACflM,OAAO,EAAEgL,UAAU;MACnB/K,MAAM,EAAEkM,SAAS;MACjB5L,KAAK,EAAEyL,QAAQ;MACf1L,KAAK,EAAE2L,QAAQ;MACf5L,KAAK,EAAE+I,QAAQ;MACfhJ,KAAK,EAAEiJ,QAAQ;MACftI,SAAS,EAAEgL,YAAY;MACvB9K,WAAW,EAAEmL;IACf,CAAC;EACH,CAAC,EAAE,CAACvL,GAAG,EAAE6K,MAAM,CAAC,CAAC;;EAEjB;EACA,MAAMsB,qBAAqB,GAAGA,CAC5BzK,IAAe,EACf0K,YAAoB,EACpBC,KAAU,EACVC,cAAkC,KACyB;IAC3D,MAAM7D,QAAgB,GAAG2D,YAAY,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC;IACnD,MAAMG,QAAQ,GAAG,CAAC,IAAI7K,IAAI,CAACjC,KAAK,CAACgJ,QAAQ,CAAC,IAAI,EAAE,CAAC,CAAC;IAClD,IAAI/I,KAAK,GAAG4M,cAAc;IAC1B,IAAIE,YAAY,GAAG,KAAK;IAExB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,QAAQ,CAACnH,MAAM,EAAEqH,CAAC,EAAE,EAAE;MACxC,MAAMC,IAAI,GAAGH,QAAQ,CAACE,CAAC,CAAC;MACxB,IAAIC,IAAI,CAAC3F,IAAI,KAAK,MAAM,EAAE;MAC1B,MAAM4F,IAAI,GAAGD,IAAmB;MAChC,MAAM7K,OAAO,GAAGlD,cAAc,CAACgO,IAAI,CAAC9F,IAAI,CAAC;MACzC,MAAM+F,GAAG,GAAGD,IAAI,CAACC,GAAG;;MAEpB;MACA,IAAIP,KAAK,CAACvF,IAAI,KAAK,aAAa,IAAKuF,KAAK,CAAC5F,IAAuB,EAAE;QAClE,MAAMoG,MAAM,GAAGR,KAAK,CAAC5F,IAAsB;QAC3C,MAAMqG,OAAO,GAAG,CAAC,eAAe,CAAC,CAACrF,QAAQ,CAACoF,MAAM,CAAChG,IAAI,CAAC;QACvD,MAAMkG,KAAK,GAAG,CAAC,YAAY,EAAE,iBAAiB,EAAE,cAAc,CAAC,CAACtF,QAAQ,CAACoF,MAAM,CAAChG,IAAI,CAAC;QACrF,MAAMmG,UAAU,GAAG,CAAC,iBAAiB,EAAE,UAAU,EAAE,SAAS,EAAE,cAAc,CAAC,CAACvF,QAAQ,CAACoF,MAAM,CAAChG,IAAI,CAAC;QACnG,MAAMoG,UAAU,GAAG,CAAC,iBAAiB,EAAE,eAAe,EAAE,sBAAsB,EAAE,kBAAkB,EAAE,wBAAwB,EAAE,cAAc,EAAE,kBAAkB,EAAE,mBAAmB,CAAC,CAACxF,QAAQ,CAACoF,MAAM,CAAChG,IAAI,CAAC;QAC5M,MAAMqG,UAAU,GAAIL,MAAM,CAACM,CAAC,KAAK,CAAC,IAAId,KAAK,CAACe,IAAI,KAAK,QAAS;QAC9D,MAAMC,UAAU,GAAIR,MAAM,CAACM,CAAC,KAAK,CAAC,IAAId,KAAK,CAACe,IAAI,KAAK,QAAS;QAC9D,MAAME,SAAS,GAAIT,MAAM,CAAC/E,SAAS,IAAI,CAAC,IAAIuE,KAAK,CAACe,IAAI,KAAK,QAAS;QACpE,MAAMG,aAAa,GAAIV,MAAM,CAAC/E,SAAS,IAAI,CAAC,IAAIuE,KAAK,CAACe,IAAI,KAAK,QAAS;;QAExE;QACA,IAAI,CAAC,CAAAvL,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEgF,IAAI,MAAK,gBAAgB,IAAI+F,GAAG,KAAK,gBAAgB,KAAKP,KAAK,CAACe,IAAI,KAAK,OAAO,EAAE;UAC9F/O,sBAAsB,CAACwO,MAAM,EAAE,MAAM;YAAEA,MAAM,CAAClE,WAAW,GAAG,IAAI;UAAE,CAAC,EAAEjH,IAAI,CAACxC,KAAK,CAAC;UAChFqN,QAAQ,CAAClH,MAAM,CAACoH,CAAC,EAAE,CAAC,CAAC;UAAEA,CAAC,EAAE;UAAED,YAAY,GAAG,IAAI;UAC/CxM,GAAG,CAAC,4CAA4C6M,MAAM,CAAChG,IAAI,eAAe,CAAC;UAC3EzE,eAAe,CAAC,gBAAgB,EAAE,mBAAmByK,MAAM,CAAChG,IAAI,oBAAoB,CAAC;UACrF;QACF;QACA,IAAI,CAAC,CAAAhF,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEgF,IAAI,MAAK,oBAAoB,IAAI+F,GAAG,KAAK,oBAAoB,KAAKE,OAAO,EAAE;UACvFzO,sBAAsB,CAACwO,MAAM,EAAE,MAAM;YAAEA,MAAM,CAAClE,WAAW,GAAG,IAAI;UAAE,CAAC,EAAEjH,IAAI,CAACxC,KAAK,CAAC;UAChFqN,QAAQ,CAAClH,MAAM,CAACoH,CAAC,EAAE,CAAC,CAAC;UAAEA,CAAC,EAAE;UAAED,YAAY,GAAG,IAAI;UAC/CxM,GAAG,CAAC,gDAAgD6M,MAAM,CAAChG,IAAI,eAAe,CAAC;UAC/EzE,eAAe,CAAC,oBAAoB,EAAE,mBAAmByK,MAAM,CAAChG,IAAI,WAAW,CAAC;UAChF;QACF;;QAEA;QACA,IAAI,CAAC,CAAAhF,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEgF,IAAI,MAAK,eAAe,IAAI+F,GAAG,KAAK,eAAe,KAAKM,UAAU,EAAE;UAChF7O,sBAAsB,CAACwO,MAAM,EAAE,MAAM;YAAEvO,eAAe,CAACuO,MAAM,EAAE,CAAC,CAAC,EAAE,eAAe,CAAC;UAAE,CAAC,EAAEnL,IAAI,CAACxC,KAAK,CAAC;UACnGqN,QAAQ,CAAClH,MAAM,CAACoH,CAAC,EAAE,CAAC,CAAC;UAAEA,CAAC,EAAE;UAAED,YAAY,GAAG,IAAI;UAC/CxM,GAAG,CAAC,2CAA2C6M,MAAM,CAAChG,IAAI,eAAe,CAAC;UAC1E;QACF;;QAEA;QACA,IAAI,CAAC,CAAAhF,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEgF,IAAI,MAAK,gBAAgB,IAAI+F,GAAG,KAAK,iBAAiB,KAAKS,UAAU,EAAE;UACnFhP,sBAAsB,CAACwO,MAAM,EAAE,MAAM;YAAEvO,eAAe,CAACuO,MAAM,EAAE,CAAC,CAAC,EAAE,gBAAgB,CAAC;UAAE,CAAC,EAAEnL,IAAI,CAACxC,KAAK,CAAC;UACpGqN,QAAQ,CAAClH,MAAM,CAACoH,CAAC,EAAE,CAAC,CAAC;UAAEA,CAAC,EAAE;UAAED,YAAY,GAAG,IAAI;UAC/CxM,GAAG,CAAC,4CAA4C6M,MAAM,CAAChG,IAAI,eAAe,CAAC;UAC3E;QACF;;QAEA;QACA,IAAI,CAAC,CAAAhF,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEgF,IAAI,MAAK,oBAAoB,IAAI+F,GAAG,KAAK,oBAAoB,KAAKK,UAAU,EAAE;UAC1F5O,sBAAsB,CAACwO,MAAM,EAAE,MAAM;YAAEvO,eAAe,CAACuO,MAAM,EAAE,CAAC,CAAC,EAAE,oBAAoB,CAAC;UAAE,CAAC,EAAEnL,IAAI,CAACxC,KAAK,CAAC;UACxGqN,QAAQ,CAAClH,MAAM,CAACoH,CAAC,EAAE,CAAC,CAAC;UAAEA,CAAC,EAAE;UAAED,YAAY,GAAG,IAAI;UAC/CxM,GAAG,CAAC,gDAAgD6M,MAAM,CAAChG,IAAI,eAAe,CAAC;UAC/E;QACF;QACA,IAAI,CAAC,CAAAhF,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEgF,IAAI,MAAK,kBAAkB,IAAI+F,GAAG,KAAK,kBAAkB,KAAKK,UAAU,EAAE;UAAA,IAAAO,iBAAA;UACtF;UACA,MAAMC,QAAQ,GAAG;YAAE,KAAAD,iBAAA,GAAG9L,IAAI,CAACtB,WAAW,cAAAoN,iBAAA,uBAAhBA,iBAAA,CAAmBpB,YAAY,CAAC;YAAEsB,wBAAwB,EAAE;UAAK,CAAC;UACxFhM,IAAI,CAACtB,WAAW,GAAG;YAAE,GAAGsB,IAAI,CAACtB,WAAW;YAAE,CAACgM,YAAY,GAAGqB;UAAS,CAA6B;UAChGlB,QAAQ,CAAClH,MAAM,CAACoH,CAAC,EAAE,CAAC,CAAC;UAAEA,CAAC,EAAE;UAAED,YAAY,GAAG,IAAI;UAC/CxM,GAAG,CAAC,8CAA8C6M,MAAM,CAAChG,IAAI,sCAAsC,CAAC;UACpG;QACF;;QAEA;QACA,IAAI,CAAC,CAAAhF,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEgF,IAAI,MAAK,YAAY,IAAI+F,GAAG,KAAK,YAAY,KAAKG,KAAK,EAAE;UACrE,MAAMvN,KAAK,GAAG;YAAE,GAAGkC,IAAI,CAAClC;UAAM,CAAuB;UACrD,IAAIA,KAAK,CAAC4M,YAAY,CAAC,CAAChH,MAAM,GAAG,CAAC,EAAE;YAClC5F,KAAK,CAAC4M,YAAY,CAAC,GAAG5M,KAAK,CAAC4M,YAAY,CAAC,CAAC7H,KAAK,CAAC,CAAC,CAAC;YAClD7C,IAAI,CAAClC,KAAK,GAAGA,KAAK;UACpB;UACA+M,QAAQ,CAAClH,MAAM,CAACoH,CAAC,EAAE,CAAC,CAAC;UAAEA,CAAC,EAAE;UAAED,YAAY,GAAG,IAAI;UAC/CxM,GAAG,CAAC,yCAAyCoM,YAAY,oBAAoB,CAAC;UAC9E;QACF;QACA,IAAI,CAAC,CAAAvK,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEgF,IAAI,MAAK,kBAAkB,IAAI+F,GAAG,KAAK,kBAAkB,MAAMG,KAAK,IAAI,CAAC,gBAAgB,EAAE,kBAAkB,EAAE,WAAW,EAAE,gBAAgB,CAAC,CAACtF,QAAQ,CAACoF,MAAM,CAAChG,IAAI,CAAC,CAAC,EAAE;UAClLxI,sBAAsB,CAACwO,MAAM,EAAE,MAAM;YAAEA,MAAM,CAAClE,WAAW,GAAG,IAAI;UAAE,CAAC,EAAEjH,IAAI,CAACxC,KAAK,CAAC;UAChFqN,QAAQ,CAAClH,MAAM,CAACoH,CAAC,EAAE,CAAC,CAAC;UAAEA,CAAC,EAAE;UAAED,YAAY,GAAG,IAAI;UAC/CxM,GAAG,CAAC,8CAA8C6M,MAAM,CAAChG,IAAI,eAAe,CAAC;UAC7E;QACF;;QAEA;QACA,IAAI,CAAC,CAAAhF,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEgF,IAAI,MAAK,eAAe,IAAI+F,GAAG,KAAK,eAAe,KAAKI,UAAU,EAAE;UAChF,MAAMW,GAAG,GAAGpP,gBAAgB,CAACsO,MAAM,EAAS;YAAE,GAAGnL,IAAI;YAAEhC;UAAM,CAAc,CAAC;UAC5E,IAAIiO,GAAG,EAAE;YACP,MAAMC,GAAG,GAAG,CAAC,GAAGlO,KAAK,CAACiO,GAAG,CAACpH,MAAM,CAAC,CAACoH,GAAG,CAACP,IAAI,CAAC,CAAC;YAC5C,MAAMS,GAAG,GAAGD,GAAG,CAACE,SAAS,CAACxG,CAAC,IAAIA,CAAC,CAACyG,GAAG,KAAKlB,MAAM,CAACkB,GAAG,CAAC;YACpD,IAAIF,GAAG,IAAI,CAAC,EAAE;cACZD,GAAG,CAACvI,MAAM,CAACwI,GAAG,EAAE,CAAC,CAAC;cAClBnO,KAAK,GAAG;gBACN,GAAGA,KAAK;gBACR,CAACiO,GAAG,CAACpH,MAAM,GAAG;kBACZ,GAAG7G,KAAK,CAACiO,GAAG,CAACpH,MAAM,CAAC;kBACpB,CAACoH,GAAG,CAACP,IAAI,GAAGQ;gBACd;cACF,CAAuB;YACzB;UACF;UACArB,QAAQ,CAAClH,MAAM,CAACoH,CAAC,EAAE,CAAC,CAAC;UAAEA,CAAC,EAAE;UAAED,YAAY,GAAG,IAAI;UAC/CxM,GAAG,CAAC,2CAA2C6M,MAAM,CAAChG,IAAI,YAAY,CAAC;UACvE;QACF;MAGF;;MAEA;MACA,IAAIwF,KAAK,CAACvF,IAAI,KAAK,mBAAmB,EAAE;QAAA,IAAAkH,WAAA,EAAAC,YAAA;QACtC,MAAMC,oBAAoB,GAAG5B,cAAc,CAACF,YAAY,CAAC,CAACjF,MAAM,CAAC/B,MAAM;QACvE,MAAM+I,oBAAoB,GAAG7B,cAAc,CAACF,YAAY,CAAC,CAAClF,KAAK,CAAC9B,MAAM;;QAEtE;QACA,IAAI,CAAC,CAAAvD,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEgF,IAAI,MAAK,yBAAyB,IAAI+F,GAAG,KAAK,0BAA0B,KAAKsB,oBAAoB,GAAG,CAAC,EAAE;UACnH;UACA,MAAMvG,QAAQ,GAAG,CAAC,GAAG2E,cAAc,CAACF,YAAY,CAAC,CAACjF,MAAM,CAAC;UACzD,IAAIQ,QAAQ,CAACvC,MAAM,GAAG,CAAC,EAAE;YACvBuC,QAAQ,CAACyG,GAAG,CAAC,CAAC,CAAC,CAAC;YAChB1O,KAAK,GAAG;cAAE,GAAGA,KAAK;cAAE,CAAC0M,YAAY,GAAG;gBAAE,GAAG1M,KAAK,CAAC0M,YAAY,CAAC;gBAAEjF,MAAM,EAAEQ;cAAS;YAAE,CAAuB;UAC1G;UACA4E,QAAQ,CAAClH,MAAM,CAACoH,CAAC,EAAE,CAAC,CAAC;UAAEA,CAAC,EAAE;UAAED,YAAY,GAAG,IAAI;UAC/CxM,GAAG,CAAC,2EAA2E,CAAC;UAChF;QACF;;QAEA;QACA,IAAI,CAAC,CAAA6B,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEgF,IAAI,MAAK,uBAAuB,IAAI+F,GAAG,KAAK,uBAAuB,KAAKuB,oBAAoB,GAAG,CAAC,EAAE;UAC9G,MAAME,QAAQ,GAAG/B,cAAc,CAACF,YAAY,CAAC,CAAClF,KAAK,CAACG,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACP,IAAI,KAAK,KAAK,CAAqB;UACrG,IAAIsH,QAAQ,CAACjJ,MAAM,GAAG,CAAC,EAAE;YACvB/G,sBAAsB,CAACgQ,QAAQ,CAAC,CAAC,CAAC,EAAE,MAAM;cAAEA,QAAQ,CAAC,CAAC,CAAC,CAAC1F,WAAW,GAAG,IAAI;YAAE,CAAC,EAAEjH,IAAI,CAACxC,KAAK,CAAC;UAC5F;UACAqN,QAAQ,CAAClH,MAAM,CAACoH,CAAC,EAAE,CAAC,CAAC;UAAEA,CAAC,EAAE;UAAED,YAAY,GAAG,IAAI;UAC/CxM,GAAG,CAAC,mFAAmF,CAAC;UACxF;QACF;;QAEA;QACA,IAAI,CAAC,CAAA6B,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEgF,IAAI,MAAK,uBAAuB,IAAI+F,GAAG,KAAK,uBAAuB,KAAKsB,oBAAoB,IAAI,CAAC,EAAE;UAAA,IAAAI,kBAAA;UAC/G;UACA,MAAMb,QAAQ,GAAG;YAAE,KAAAa,kBAAA,GAAG5M,IAAI,CAACtB,WAAW,cAAAkO,kBAAA,uBAAhBA,kBAAA,CAAmBlC,YAAY,CAAC;YAAEmC,wBAAwB,EAAE;UAAK,CAAC;UACxF7M,IAAI,CAACtB,WAAW,GAAG;YAAE,GAAGsB,IAAI,CAACtB,WAAW;YAAE,CAACgM,YAAY,GAAGqB;UAAS,CAA6B;UAChGlB,QAAQ,CAAClH,MAAM,CAACoH,CAAC,EAAE,CAAC,CAAC;UAAEA,CAAC,EAAE;UAAED,YAAY,GAAG,IAAI;UAC/CxM,GAAG,CAAC,kFAAkF,CAAC;UACvF;QACF;;QAEA;QACA,IAAI,CAAC,CAAA6B,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEgF,IAAI,MAAK,yBAAyB,IAAI+F,GAAG,KAAK,0BAA0B,KAAKP,KAAK,CAACvF,IAAI,KAAK,aAAa,IAAI,EAAAkH,WAAA,GAAA3B,KAAK,CAAC5F,IAAI,cAAAuH,WAAA,uBAAVA,WAAA,CAAYjH,IAAI,MAAK,MAAM,EAAE;UACtJ,MAAMC,QAAQ,GAAGqF,KAAK,CAAC5F,IAAmB;UAC1C,MAAM+H,iBAAiB,GAAGxH,QAAQ,CAACF,IAAI,KAAK,mBAAmB,IAAKE,QAAQ,CAACyH,EAAE,IAAI,CAAE;UACrF,IAAID,iBAAiB,EAAE;YACrB;YACA,MAAMhP,KAAK,GAAG;cAAE,GAAGkC,IAAI,CAAClC;YAAM,CAAuB;YACrDA,KAAK,CAAC4M,YAAY,CAAC,CAAC1H,IAAI,CAAC2H,KAAK,CAAC5F,IAAI,CAAC;YACpC/E,IAAI,CAAClC,KAAK,GAAGA,KAAK;YAClB+M,QAAQ,CAAClH,MAAM,CAACoH,CAAC,EAAE,CAAC,CAAC;YAAEA,CAAC,EAAE;YAAED,YAAY,GAAG,IAAI;YAC/CxM,GAAG,CAAC,qDAAqDqM,KAAK,CAAC5F,IAAI,CAACI,IAAI,mBAAmB,CAAC;YAC5F;UACF;QACF;;QAEA;QACA,IAAI,CAAC,CAAAhF,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEgF,IAAI,MAAK,gBAAgB,IAAI+F,GAAG,KAAK,gBAAgB,KAAKP,KAAK,CAACvF,IAAI,KAAK,aAAa,IAAIuF,KAAK,CAACe,IAAI,KAAK,QAAQ,EAAE;UAC/H;UACA,MAAMzF,QAAQ,GAAGjI,KAAK,CAAC0M,YAAY,CAAC,CAACjF,MAAM,CAACE,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACP,IAAI,KAAK,KAAK,CAAqB;UAC7F,IAAIY,QAAQ,CAACvC,MAAM,IAAI,CAAC,EAAE;YACxB9G,eAAe,CAACqJ,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,gBAAgB,CAAC;YAClDrJ,eAAe,CAACqJ,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,gBAAgB,CAAC;YAClD4E,QAAQ,CAAClH,MAAM,CAACoH,CAAC,EAAE,CAAC,CAAC;YAAEA,CAAC,EAAE;YAAED,YAAY,GAAG,IAAI;YAC/CxM,GAAG,CAAC,4CAA4C2H,QAAQ,CAAC,CAAC,CAAC,CAACd,IAAI,QAAQc,QAAQ,CAAC,CAAC,CAAC,CAACd,IAAI,eAAe,CAAC;YACxG;UACF;QACF;;QAEA;QACA,IAAI,CAAC,CAAAhF,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEgF,IAAI,MAAK,4BAA4B,IAAI+F,GAAG,KAAK,2BAA2B,KAAKP,KAAK,CAACvF,IAAI,KAAK,aAAa,IAAI,EAAAmH,YAAA,GAAA5B,KAAK,CAAC5F,IAAI,cAAAwH,YAAA,uBAAVA,YAAA,CAAYlH,IAAI,MAAK,MAAM,EAAE;UAC1J,MAAMC,QAAQ,GAAGqF,KAAK,CAAC5F,IAAmB;UAC1C,IAAIO,QAAQ,CAACF,IAAI,KAAK,cAAc,EAAE;YACpC;YACA,MAAMtH,KAAK,GAAG;cAAE,GAAGkC,IAAI,CAAClC;YAAM,CAAuB;YACrDA,KAAK,CAAC4M,YAAY,CAAC,CAAC1H,IAAI,CAAC2H,KAAK,CAAC5F,IAAI,CAAC;YACpC/E,IAAI,CAAClC,KAAK,GAAGA,KAAK;YAClB+M,QAAQ,CAAClH,MAAM,CAACoH,CAAC,EAAE,CAAC,CAAC;YAAEA,CAAC,EAAE;YAAED,YAAY,GAAG,IAAI;YAC/CxM,GAAG,CAAC,wDAAwDqM,KAAK,CAAC5F,IAAI,CAACI,IAAI,mBAAmB,CAAC;YAC/F;UACF;QACF;;QAEA;QACA,IAAI,CAAC,CAAAhF,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEgF,IAAI,MAAK,UAAU,IAAI+F,GAAG,KAAK,UAAU,KAAKP,KAAK,CAACvF,IAAI,KAAK,aAAa,IAAIuF,KAAK,CAACe,IAAI,KAAK,QAAQ,EAAE;UACnH,MAAM1E,WAAW,GAAGhJ,KAAK,CAAC+I,QAAQ,CAAC,CAACtB,MAAM,CAACE,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACP,IAAI,KAAK,KAAK,CAAqB;UAC5F,IAAI2B,WAAW,CAACtD,MAAM,GAAG,CAAC,EAAE;YAC1B;YACA,MAAMsJ,WAAW,GAAGhG,WAAW,CAACiG,MAAM,CAAC,CAACC,OAAO,EAAEzP,OAAO,KACrDA,OAAO,CAAC2I,SAAS,GAAG8G,OAAO,CAAC9G,SAAS,GAAI3I,OAAO,GAAGyP,OACtD,CAAC;YACD;YACA,MAAMpP,KAAK,GAAG;cAAE,GAAGkC,IAAI,CAAClC;YAAM,CAAuB;YACrD,MAAMqP,QAAQ,GAAG;cAAE,GAAGH,WAAW;cAAEX,GAAG,EAAE5M,IAAI,CAAC2N,GAAG,CAAC,CAAC,GAAG7I,IAAI,CAAC+C,MAAM,CAAC;YAAE,CAAC;YACpExJ,KAAK,CAACiJ,QAAQ,CAAC,CAAC/D,IAAI,CAACmK,QAAQ,CAAC;YAC9BnN,IAAI,CAAClC,KAAK,GAAGA,KAAK;YAClB+M,QAAQ,CAAClH,MAAM,CAACoH,CAAC,EAAE,CAAC,CAAC;YAAEA,CAAC,EAAE;YAAED,YAAY,GAAG,IAAI;YAC/CxM,GAAG,CAAC,gDAAgD0O,WAAW,CAAC7H,IAAI,YAAY,CAAC;YACjF;UACF;QACF;;QAEA;QACA,IAAI,CAAC,CAAAhF,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEgF,IAAI,MAAK,gBAAgB,IAAI+F,GAAG,KAAK,gBAAgB,KAAKP,KAAK,CAACvF,IAAI,KAAK,aAAa,EAAE;UACpG;UACA,MAAMiI,WAAW,GAAGrP,KAAK,CAAC0M,YAAY,CAAC,CAAClF,KAAK,CAAC8H,MAAM,CAACtP,KAAK,CAAC0M,YAAY,CAAC,CAACjF,MAAM,CAAC;UAChF,MAAM8H,aAAa,GAAGF,WAAW,CAACG,IAAI,CAAC5H,CAAC,IAAIA,CAAC,CAACP,IAAI,KAAK,MAAM,IAAKO,CAAC,CAAiBR,IAAI,KAAK,mBAAmB,CAAC;UACjH,MAAMqI,SAAS,GAAGJ,WAAW,CAACG,IAAI,CAAC5H,CAAC,IAAIA,CAAC,CAACP,IAAI,KAAK,MAAM,IAAKO,CAAC,CAAiBR,IAAI,KAAK,sBAAsB,CAAC;UAChH,IAAImI,aAAa,IAAIE,SAAS,EAAE;YAC9B;YACA,MAAMd,QAAQ,GAAG3O,KAAK,CAAC0M,YAAY,CAAC,CAAClF,KAAK,CAACG,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACP,IAAI,KAAK,MAAM,IAAKO,CAAC,CAAiBR,IAAI,KAAK,sBAAsB,CAAC;YAC/H,IAAIuH,QAAQ,CAACjJ,MAAM,GAAG,CAAC,EAAE;cACvB,MAAMgK,WAAW,GAAGf,QAAQ,CAACA,QAAQ,CAACjJ,MAAM,GAAG,CAAC,CAAC;cACjD,MAAMwI,GAAG,GAAG,CAAC,GAAGlO,KAAK,CAAC0M,YAAY,CAAC,CAAClF,KAAK,CAAC;cAC1C,MAAM2G,GAAG,GAAGD,GAAG,CAACE,SAAS,CAACxG,CAAC,IAAIA,CAAC,CAACyG,GAAG,KAAKqB,WAAW,CAACrB,GAAG,CAAC;cACzD,IAAIF,GAAG,IAAI,CAAC,EAAE;gBACZD,GAAG,CAACvI,MAAM,CAACwI,GAAG,EAAE,CAAC,CAAC;gBAClBnO,KAAK,GAAG;kBACN,GAAGA,KAAK;kBACR,CAAC0M,YAAY,GAAG;oBAAE,GAAG1M,KAAK,CAAC0M,YAAY,CAAC;oBAAElF,KAAK,EAAE0G;kBAAI;gBACvD,CAAuB;cACzB;YACF;YACArB,QAAQ,CAAClH,MAAM,CAACoH,CAAC,EAAE,CAAC,CAAC;YAAEA,CAAC,EAAE;YAAED,YAAY,GAAG,IAAI;YAC/CxM,GAAG,CAAC,2EAA2E,CAAC;YAChF;UACF;QACF;;QAEA;QACA,IAAK,CAAA6B,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEgF,IAAI,MAAK,aAAa,IAAI+F,GAAG,KAAK,aAAa,EAAG;UAC9D,MAAMyC,eAAe,GAAGvR,MAAM,CAAC,CAAC,GAAG4B,KAAK,CAAC+I,QAAQ,CAAC,CAACtB,MAAM,CAAC,CAAC;UAC3D,MAAMmI,iBAAiB,GAAGxR,MAAM,CAAC,CAAC,GAAG4B,KAAK,CAAC0M,YAAY,CAAC,CAACjF,MAAM,CAAC,CAAC;UACjE,IAAImI,iBAAiB,GAAGD,eAAe,EAAE;YACvC,MAAM3G,WAAW,GAAGhJ,KAAK,CAAC+I,QAAQ,CAAC,CAACtB,MAAM,CAACE,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACP,IAAI,KAAK,KAAK,CAAqB;YAC5F,IAAI2B,WAAW,CAACtD,MAAM,GAAG,CAAC,EAAE;cAC1B;cACA9G,eAAe,CAACoK,WAAW,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,aAAa,CAAC;cAClD6D,QAAQ,CAAClH,MAAM,CAACoH,CAAC,EAAE,CAAC,CAAC;cAAEA,CAAC,EAAE;cAAED,YAAY,GAAG,IAAI;cAC/CxM,GAAG,CAAC,yCAAyC0I,WAAW,CAAC,CAAC,CAAC,CAAC7B,IAAI,eAAe,CAAC;cAChF;YACF;UACF;QACF;MACF;IACF;IAEA,IAAI2F,YAAY,EAAE;MAChB,MAAMpB,QAAQ,GAAG;QAAE,GAAG1J,IAAI,CAACjC,KAAK;QAAE,CAACgJ,QAAQ,GAAG8D;MAAS,CAAuB;MAC9E,OAAO,CAAC7M,KAAK,EAAE0L,QAAQ,CAAC;IAC1B;IACA,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC;EACrB,CAAC;;EAED;EACA,MAAMmE,kBAAkB,GAAG9R,WAAW,CAAEiJ,KAAgB,IAAgB;IACtE,IAAI,CAACA,KAAK,CAACrG,WAAW,IAAIqG,KAAK,CAACrG,WAAW,CAACmP,KAAK,CAACpK,MAAM,KAAK,CAAC,EAAE;MAC9D,OAAOsB,KAAK;IACd;IAEA,MAAM,CAAC+I,QAAQ,EAAE7I,QAAQ,CAAC,GAAGnI,kBAAkB,CAACiR,YAAY,CAC1DhJ,KAAK,CAACrG,WAAW,EACjBqG,KAAK,EACL1G,GACF,CAAC;IAED,OAAO;MACL,GAAG4G,QAAQ;MACXvG,WAAW,EAAEoP;IACf,CAAC;EACH,CAAC,EAAE,CAACzP,GAAG,CAAC,CAAC;;EAET;EACA,MAAM2P,eAAe,GAAGA,CAACjJ,KAAgB,EAAEH,MAAc,KAAa;IACpE,MAAMoB,QAAQ,GAAGjB,KAAK,CAAChH,KAAK,CAAC6G,MAAM,CAAC,CAACY,MAAM,CAACE,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACP,IAAI,KAAK,KAAK,CAAqB;IAC7F,MAAM0B,QAAgB,GAAGlC,MAAM,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC;IAC7C,IAAIqJ,KAAK,GAAG,CAAC;;IAEb;IACAnO,OAAO,CAACzB,GAAG,CAAC,uBAAuBuG,MAAM,cAAcoB,QAAQ,CAACvC,MAAM,oBAAoB,EACxFuC,QAAQ,CAACM,GAAG,CAACX,CAAC,IAAI,GAAGA,CAAC,CAACT,IAAI,IAAIS,CAAC,CAACQ,SAAS,IAAI,CAAC,CAAC+H,IAAI,CAAC,IAAI,CAAC,CAAC;IAE7DlI,QAAQ,CAACnD,OAAO,CAACiC,IAAI,IAAI;MACvB,IAAIqB,SAAS,GAAGrB,IAAI,CAACqB,SAAS;;MAE9B;MACA,MAAMgI,OAAO,GAAGpJ,KAAK,CAAC/G,cAAc,CAAC4G,MAAM,CAAC,CAAC3G,UAAU;MACvD,MAAMmQ,OAAO,GAAGrJ,KAAK,CAAC/G,cAAc,CAAC4G,MAAM,CAAC,CAAC1G,MAAM;;MAEnD;;MAEA;MACA,IAAI,CAAAiQ,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAE/I,IAAI,MAAK,MAAM,IAAK+I,OAAO,CAAiBjJ,IAAI,KAAK,kBAAkB,EAAE;QACpF,IAAIJ,IAAI,CAAC0G,CAAC,KAAK,CAAC,EAAErF,SAAS,IAAI,CAAC;MAClC;;MAEA;MACA,IAAI,CAAAiI,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEhJ,IAAI,MAAK,MAAM,IAAKgJ,OAAO,CAAiBlJ,IAAI,KAAK,mBAAmB,EAAE;QACrF,MAAMmJ,aAAa,GAAG,CAAC,gBAAgB,EAAE,kBAAkB,EAAE,WAAW,EAAE,gBAAgB,CAAC;QAC3F,MAAMC,WAAW,GAAGvJ,KAAK,CAAChH,KAAK,CAAC6G,MAAM,CAAC,CAACW,KAAK,CAACgI,IAAI,CAAC5H,CAAC,IAAIA,CAAC,CAACP,IAAI,KAAK,MAAM,IAAKO,CAAC,CAAiBR,IAAI,KAAK,sBAAsB,IAAIkJ,aAAa,CAACvI,QAAQ,CAACH,CAAC,CAACT,IAAI,CAAC,CAAC;QAClK,IAAIoJ,WAAW,EAAEnI,SAAS,IAAI,CAAC;MACjC;;MAEA;MACA,IAAIrB,IAAI,CAACI,IAAI,KAAK,iBAAiB,IAAKJ,IAAI,CAAStE,MAAM,KAAK,WAAW,EAAE;QAC3E,MAAM+N,UAAU,GAAGxJ,KAAK,CAAChH,KAAK,CAAC6G,MAAM,CAAC,CAACW,KAAK,CAACgI,IAAI,CAAC5H,CAAC,IACjDA,CAAC,CAACP,IAAI,KAAK,MAAM,IAChBO,CAAC,CAAiBR,IAAI,KAAK,sBAAsB,IACjDQ,CAAC,CAAS6I,GAAG,KAAK,KACrB,CAAC;QACD,IAAID,UAAU,EAAE;UACdpI,SAAS,IAAI,CAAC;UACd;UACA,IAAI,CAAErB,IAAI,CAAS2J,eAAe,EAAE;YAClC3O,OAAO,CAACzB,GAAG,CAAC,4DAA4D,CAAC;YACxEyG,IAAI,CAAS2J,eAAe,GAAG,IAAI;UACtC;QACF,CAAC,MAAM;UACJ3J,IAAI,CAAS2J,eAAe,GAAG,KAAK;QACvC;MACF;;MAEA;MACA,IAAI,CAAAN,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAE/I,IAAI,MAAK,MAAM,IAAK+I,OAAO,CAAiBjJ,IAAI,KAAK,uBAAuB,EAAE;QACzF,MAAMwJ,gBAAgB,GAAG,CAAC,iBAAiB,EAAE,cAAc,EAAE,YAAY,EAAE,gBAAgB,EAAE,kBAAkB,EAAE,WAAW,EAAE,gBAAgB,CAAC;QAC/I,MAAMC,cAAc,GAAG5J,KAAK,CAAChH,KAAK,CAAC6G,MAAM,CAAC,CAACW,KAAK,CAACgI,IAAI,CAAC5H,CAAC,IAAIA,CAAC,CAACP,IAAI,KAAK,MAAM,IAAKO,CAAC,CAAiBR,IAAI,KAAK,sBAAsB,IAAIuJ,gBAAgB,CAAC5I,QAAQ,CAACH,CAAC,CAACT,IAAI,CAAC,CAAC;QACxK,IAAI,CAACyJ,cAAc,EAAExI,SAAS,IAAI,CAAC;MACrC;;MAEA;MACA,MAAMyI,UAAU,GAAG7J,KAAK,CAAC/G,cAAc,CAAC8I,QAAQ,CAAC,CAAC5I,MAAM;MACxD,IAAI,CAAA0Q,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAExJ,IAAI,MAAK,MAAM,IAAKwJ,UAAU,CAAiB1J,IAAI,KAAK,oBAAoB,EAAE;QAC5F;QACA;MAAA;MAGF+I,KAAK,IAAI9H,SAAS;IACpB,CAAC,CAAC;;IAEF;IACArG,OAAO,CAACzB,GAAG,CAAC,uBAAuBuG,MAAM,uBAAuBqJ,KAAK,EAAE,CAAC;IACxE,OAAOA,KAAK;EACd,CAAC;;EAED;;EAEA;;EAEA,MAAMY,2BAA2B,GAAG/S,WAAW,CAAC,CAAC8I,MAAc,EAAEG,KAAgB,KAAK;IACpFnE,eAAe,CAAC,6BAA6B,EAAE;MAAEgE,MAAM;MAAErH,KAAK,EAAEwH,KAAK,CAACxH;IAAM,CAAC,EAAE,4BAA4B,CAAC;IAE5G,MAAMuR,IAAI,GAAG,CAAC,GAAG/J,KAAK,CAAChH,KAAK,CAAC6G,MAAM,CAAC,CAACW,KAAK,EAAE,GAAGR,KAAK,CAAChH,KAAK,CAAC6G,MAAM,CAAC,CAACY,MAAM,CAAC;IAC1EsJ,IAAI,CAACjM,OAAO,CAAC8C,CAAC,IAAI;MACd,IAAIA,CAAC,CAACP,IAAI,KAAK,KAAK,EAAE;QACtB,MAAM0C,OAAO,GAAGnC,CAAmB;QACnC,IAAImC,OAAO,CAACiH,WAAW,IAAIjH,OAAO,CAACiH,WAAW,CAACxR,KAAK,KAAKwH,KAAK,CAACxH,KAAK,EAAE;UACpE,MAAMiJ,YAAY,GAAGsB,OAAO,CAAC3B,SAAS;UACtCxJ,eAAe,CAACmL,OAAO,EAAEA,OAAO,CAACiH,WAAW,CAACC,MAAM,EAAE,iBAAiB,CAAC;UACvE,MAAMvI,YAAY,GAAGqB,OAAO,CAAC3B,SAAS;UACtC9H,GAAG,CAAC,6BAA6ByJ,OAAO,CAAC5C,IAAI,KAAKsB,YAAY,MAAMC,YAAY,EAAE,CAAC;UACnFqB,OAAO,CAACiH,WAAW,GAAG,IAAI;QAC5B;QACA;QACAjH,OAAO,CAACmH,eAAe,GAAG,KAAK;MACjC;IACF,CAAC,CAAC;;IAEF;IACA,MAAMd,OAAO,GAAGpJ,KAAK,CAAC/G,cAAc,CAAC4G,MAAM,CAAC,CAAC3G,UAAU;IACvD,MAAMmQ,OAAO,GAAGrJ,KAAK,CAAC/G,cAAc,CAAC4G,MAAM,CAAC,CAAC1G,MAAM;IAEnD,IAAIiQ,OAAO,IAAIA,OAAO,CAAC/I,IAAI,KAAK,MAAM,EAAE;MACtC,MAAM8J,aAAa,GAAGf,OAAsB;MAC5CvN,eAAe,CAAC,0BAA0B,EAAE;QAAEuO,IAAI,EAAE,YAAY;QAAEC,UAAU,EAAEF,aAAa,CAAChK;MAAK,CAAC,EAAE,4CAA4C,CAAC;MAEjJ,IAAIgK,aAAa,CAAChK,IAAI,KAAK,oBAAoB,EAAE;QAC/C;QACA,MAAMmK,aAAa,GAAGP,IAAI,CAACpJ,MAAM,CAACC,CAAC,IACjCA,CAAC,CAACP,IAAI,KAAK,KAAK,IAChB,CAAC,WAAW,EAAE,YAAY,EAAE,cAAc,EAAE,gBAAgB,EAAE,eAAe,EAAE,YAAY,EAAE,iBAAiB,EAAE,cAAc,EAAE,SAAS,EAAE,cAAc,EAAE,kBAAkB,CAAC,CAACU,QAAQ,CAACH,CAAC,CAACT,IAAI,CAChM,CAAqB;QAErB9D,WAAW,CAAC,gBAAgB,EAAE,gBAAgB,EAAE;UAC9CgF,KAAK,EAAEiJ,aAAa,CAAC5L,MAAM;UAC3B4C,KAAK,EAAEgJ,aAAa,CAAC/I,GAAG,CAACX,CAAC,KAAK;YAAET,IAAI,EAAES,CAAC,CAACT,IAAI;YAAEiB,SAAS,EAAER,CAAC,CAACP,IAAI,KAAK,KAAK,GAAIO,CAAC,CAASQ,SAAS,GAAG;UAAE,CAAC,CAAC;QAC1G,CAAC,EAAE,sDAAsD,CAAC;QAE1D,IAAImJ,oBAAoB,GAAG,CAAC;QAC5BD,aAAa,CAACxM,OAAO,CAACiC,IAAI,IAAI;UAC5B,MAAM0B,YAAY,GAAG1B,IAAI,CAACqB,SAAS;UACnCxJ,eAAe,CAACmI,IAAI,EAAE,CAAC,EAAE,oBAAoB,CAAC;UAC9C,MAAM2B,YAAY,GAAG3B,IAAI,CAACqB,SAAS;UACnCmJ,oBAAoB,IAAI,CAAC;UACzBhP,aAAa,CAAC,oBAAoB,EAAE,GAAGwE,IAAI,CAACI,IAAI,wBAAwBsB,YAAY,MAAMC,YAAY,GAAG,CAAC;QAC5G,CAAC,CAAC;QAEF,IAAI4I,aAAa,CAAC5L,MAAM,GAAG,CAAC,EAAE;UAC5BnD,aAAa,CAAC,oBAAoB,EAAE,GAAG+O,aAAa,CAAC5L,MAAM,0BAA0B6L,oBAAoB,wCAAwC,CAAC;QACpJ,CAAC,MAAM;UACLxN,UAAU,CAAC,yBAAyB,EAAE,0CAA0C,CAAC;QACnF;MACF;IACF;IAEA,IAAIsM,OAAO,IAAIA,OAAO,CAAChJ,IAAI,KAAK,MAAM,EAAE;MACtC,MAAMmK,aAAa,GAAGnB,OAAsB;MAC5CxN,eAAe,CAAC,0BAA0B,EAAE;QAAEuO,IAAI,EAAE,QAAQ;QAAEC,UAAU,EAAEG,aAAa,CAACrK;MAAK,CAAC,EAAE,wCAAwC,CAAC;MAEzI,IAAIqK,aAAa,CAACrK,IAAI,KAAK,yBAAyB,EAAE;QACpD;QACA,MAAMsK,UAAU,GAAGV,IAAI,CAACpJ,MAAM,CAACC,CAAC,IAC9BA,CAAC,CAACP,IAAI,KAAK,KAAK,IAChB,CAAC,eAAe,EAAE,iBAAiB,EAAE,UAAU,EAAE,YAAY,CAAC,CAACU,QAAQ,CAACH,CAAC,CAACT,IAAI,CAChF,CAAqB;QAErB9D,WAAW,CAAC,gBAAgB,EAAE,aAAa,EAAE;UAC3CgF,KAAK,EAAEoJ,UAAU,CAAC/L,MAAM;UACxB4C,KAAK,EAAEmJ,UAAU,CAAClJ,GAAG,CAACX,CAAC,KAAK;YAAET,IAAI,EAAES,CAAC,CAACT,IAAI;YAAEiB,SAAS,EAAER,CAAC,CAACP,IAAI,KAAK,KAAK,GAAIO,CAAC,CAASQ,SAAS,GAAG;UAAE,CAAC,CAAC;QACvG,CAAC,EAAE,wDAAwD,CAAC;QAE5D,IAAImJ,oBAAoB,GAAG,CAAC;QAC5BE,UAAU,CAAC3M,OAAO,CAACiC,IAAI,IAAI;UACzB,MAAM0B,YAAY,GAAG1B,IAAI,CAACqB,SAAS;UACnCxJ,eAAe,CAACmI,IAAI,EAAE,CAAC,EAAE,yBAAyB,CAAC;UACnD,MAAM2B,YAAY,GAAG3B,IAAI,CAACqB,SAAS;UACnCmJ,oBAAoB,IAAI,CAAC;UACzBhP,aAAa,CAAC,yBAAyB,EAAE,GAAGwE,IAAI,CAACI,IAAI,wBAAwBsB,YAAY,MAAMC,YAAY,GAAG,CAAC;QACjH,CAAC,CAAC;QAEF,IAAI+I,UAAU,CAAC/L,MAAM,GAAG,CAAC,EAAE;UACzBnD,aAAa,CAAC,yBAAyB,EAAE,GAAGkP,UAAU,CAAC/L,MAAM,6BAA6B6L,oBAAoB,wCAAwC,CAAC;QACzJ,CAAC,MAAM;UACLxN,UAAU,CAAC,sBAAsB,EAAE,+CAA+C,CAAC;QACrF;MACF;IACF;;IAEA;;IAEAlB,eAAe,CAAC,6BAA6B,EAAE;MAAEgE;IAAO,CAAC,EAAE,6BAA6B,CAAC;EAC3F,CAAC,EAAE,CAAChE,eAAe,EAAEQ,WAAW,EAAEd,aAAa,EAAEwB,UAAU,CAAC,CAAC;;EAE7D;EACA,MAAM2N,iBAAiB,GAAGA,CAAC7K,MAAc,EAAEG,KAAgB,KAAc;IACvE,MAAM2K,GAAG,GAAG3K,KAAK,CAAChH,KAAK,CAAC6G,MAAM,CAAC,CAACY,MAAM;IACtC,MAAMmK,KAAK,GAAG,CAAC,gBAAgB,CAAC;IAChC,OAAOD,GAAG,CAACnC,IAAI,CAAC5H,CAAC,IAAIA,CAAC,CAACP,IAAI,KAAK,KAAK,IAAIuK,KAAK,CAAC7J,QAAQ,CAACH,CAAC,CAACT,IAAI,CAAC,IAAI,CAAES,CAAC,CAAoBqB,WAAW,CAAC;EACxG,CAAC;;EAED;EACA,MAAM4I,eAAe,GAAGA,CAAChL,MAAc,EAAEG,KAAgB,KAAc;IACrE,MAAM8K,GAAG,GAAG9K,KAAK,CAAChH,KAAK,CAAC6G,MAAM,CAAC,CAACW,KAAK;IACrC,MAAMoK,KAAK,GAAG,CAAC,gBAAgB,EAAE,kBAAkB,EAAE,WAAW,EAAE,gBAAgB,CAAC;IACnF,OAAOE,GAAG,CAACtC,IAAI,CAAC5H,CAAC,IAAIA,CAAC,CAACP,IAAI,KAAK,KAAK,IAAIuK,KAAK,CAAC7J,QAAQ,CAACH,CAAC,CAACT,IAAI,CAAC,IAAI,CAAES,CAAC,CAAoBqB,WAAW,CAAC;EACxG,CAAC;;EAED;EACA,MAAM8I,eAAe,GAAGA,CAAClL,MAAc,EAAEG,KAAgB,KAAc;IACrE,MAAM8K,GAAG,GAAG9K,KAAK,CAAChH,KAAK,CAAC6G,MAAM,CAAC,CAACW,KAAK;IACrC,MAAMoK,KAAK,GAAG,CAAC,iBAAiB,EAAE,UAAU,EAAE,SAAS,EAAE,cAAc,CAAC;IACxE,OAAOE,GAAG,CAACtC,IAAI,CAAC5H,CAAC,IAAIA,CAAC,CAACP,IAAI,KAAK,KAAK,IAAIuK,KAAK,CAAC7J,QAAQ,CAACH,CAAC,CAACT,IAAI,CAAC,IAAI,CAAES,CAAC,CAAoBqB,WAAW,CAAC;EACxG,CAAC;;EAED;EACA,MAAM+I,eAAe,GAAGA,CAACnL,MAAc,EAAEG,KAAgB,KAAc;IACrE,MAAM2K,GAAG,GAAG3K,KAAK,CAAChH,KAAK,CAAC6G,MAAM,CAAC,CAACY,MAAM;IACtC,MAAMmK,KAAK,GAAG,CAAC,iBAAiB,EAAE,eAAe,EAAE,sBAAsB,EAAE,kBAAkB,EAAE,cAAc,EAAE,eAAe,EAAE,wBAAwB,EAAE,cAAc,EAAE,kBAAkB,EAAE,mBAAmB,CAAC;IAClN,OAAOD,GAAG,CAACnC,IAAI,CAAC5H,CAAC,IAAIA,CAAC,CAACP,IAAI,KAAK,KAAK,IAAIuK,KAAK,CAAC7J,QAAQ,CAACH,CAAC,CAACT,IAAI,CAAC,IAAI,CAAES,CAAC,CAAoBqB,WAAW,CAAC;EACxG,CAAC;;EAED;EACA,MAAMgJ,yBAAyB,GAAGA,CAACpL,MAAc,EAAEG,KAAgB,KAAc;IAC/E,MAAMoJ,OAAO,GAAGpJ,KAAK,CAAC/G,cAAc,CAAC4G,MAAM,CAAC,CAAC3G,UAAU;IACvD,IAAI,CAACkQ,OAAO,IAAIA,OAAO,CAAC/I,IAAI,KAAK,MAAM,EAAE,OAAO,KAAK;IACrD,MAAM4F,IAAI,GAAGmD,OAAsB;IACnC,OAAO,CAAC,iBAAiB,EAAE,kBAAkB,CAAC,CAACrI,QAAQ,CAACkF,IAAI,CAAC9F,IAAI,CAAC;EACpE,CAAC;;EAED;EACA,MAAM+K,4BAA4B,GAAGA,CAACrL,MAAc,EAAEG,KAAgB,KAAc;IAClF,MAAMiB,QAAQ,GAAGjB,KAAK,CAAChH,KAAK,CAAC6G,MAAM,CAAC,CAACY,MAAM,CAACE,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACP,IAAI,KAAK,KAAK,CAAqB;IAC7F,OAAOY,QAAQ,CAACuH,IAAI,CAAC5H,CAAC,IAAIA,CAAC,CAACT,IAAI,KAAK,gBAAgB,IAAI,CAACS,CAAC,CAACqB,WAAW,CAAC;EAC1E,CAAC;EAED,MAAMkJ,cAAc,GAAGpU,WAAW,CAAEqU,KAAoB,IAAK;IAC3D9Q,oBAAoB,CAAC8Q,KAAK,CAAC;EAC7B,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,QAAQ,GAAGtU,WAAW,CAAE8I,MAAc,IAAK;IAC/CzF,YAAY,CAACY,IAAI,IAAI;MACnB,IAAIA,IAAI,CAACvC,OAAO,KAAKoH,MAAM,EAAE,OAAO7E,IAAI;MAExC,MAAMkF,QAAQ,GAAG;QAAE,GAAGlF,IAAI;QAAEtC,MAAM,EAAE;UAAE,GAAGsC,IAAI,CAACtC,MAAM;UAAE,CAACmH,MAAM,GAAG;QAAK;MAAE,CAAC;MACxEvG,GAAG,CAAC,WAAWuG,MAAM,SAAS,CAAC;;MAE/B;MACA,IAAIK,QAAQ,CAACxH,MAAM,CAAC,CAAC,CAAC,IAAIwH,QAAQ,CAACxH,MAAM,CAAC,CAAC,CAAC,EAAE;QAC5C,OAAO8K,YAAY,CAACtD,QAAQ,CAAC;MAC/B;MAEA,OAAOA,QAAQ;IACjB,CAAC,CAAC;EACJ,CAAC,EAAE,CAAC5G,GAAG,EAAEkK,YAAY,CAAC,CAAC;;EAEvB;EACA,MAAM8H,iBAAiB,GAAGvU,WAAW,CAAC,CAAC8I,MAAc,EAAE0L,WAAmB,EAAEC,SAAiB,EAAEvB,MAAc,KAAK;IAChH7P,YAAY,CAACY,IAAI,IAAI;MAAA,IAAAyQ,kBAAA;MACnB,IAAIzQ,IAAI,CAACvC,OAAO,KAAKoH,MAAM,EAAE,OAAO7E,IAAI;MAExC,MAAM0Q,KAAK,IAAAD,kBAAA,GAAGzQ,IAAI,CAACtB,WAAW,cAAA+R,kBAAA,uBAAhBA,kBAAA,CAAmB5L,MAAM,CAAC;MACxC,IAAI,CAAC6L,KAAK,IAAIA,KAAK,CAACC,6BAA6B,IAAID,KAAK,CAAC1E,wBAAwB,EAAE,OAAOhM,IAAI;MAChG,IAAI,CAACgQ,eAAe,CAACnL,MAAM,EAAE7E,IAAI,CAAC,EAAE,OAAOA,IAAI;;MAE/C;MACA,MAAMiG,QAAQ,GAAGjG,IAAI,CAAChC,KAAK,CAAC6G,MAAM,CAAC,CAACY,MAAM;MAC1C,MAAMmL,QAAQ,GAAG3K,QAAQ,CAAC4K,IAAI,CAACjL,CAAC,IAAIA,CAAC,CAACyG,GAAG,KAAKkE,WAAW,IAAI3K,CAAC,CAACP,IAAI,KAAK,KAAK,CAAmB;MAChG,MAAMyL,MAAM,GAAG7K,QAAQ,CAAC4K,IAAI,CAACjL,CAAC,IAAIA,CAAC,CAACyG,GAAG,KAAKmE,SAAS,IAAI5K,CAAC,CAACP,IAAI,KAAK,KAAK,CAAmB;MAE5F,IAAI,CAACuL,QAAQ,IAAI,CAACE,MAAM,IAAIF,QAAQ,CAACxK,SAAS,GAAG6I,MAAM,EAAE,OAAOjP,IAAI;;MAEpE;MACApD,eAAe,CAACgU,QAAQ,EAAE,CAAC3B,MAAM,EAAE,mBAAmB,CAAC;MACvDrS,eAAe,CAACkU,MAAM,EAAE7B,MAAM,EAAE,mBAAmB,CAAC;;MAEpD;MACA,MAAMlD,QAAQ,GAAG;QAAE,GAAG2E,KAAK;QAAEC,6BAA6B,EAAE;MAAK,CAAC;MAClE,MAAM9G,cAAc,GAAG;QAAE,GAAG7J,IAAI,CAACtB,WAAW;QAAE,CAACmG,MAAM,GAAGkH;MAAS,CAA6B;MAE9FzN,GAAG,CAAC,IAAIuG,MAAM,iBAAiBoK,MAAM,iBAAiB2B,QAAQ,CAACzL,IAAI,OAAO2L,MAAM,CAAC3L,IAAI,cAAc,CAAC;MAEpG,OAAO;QACL,GAAGnF,IAAI;QACPtB,WAAW,EAAEmL;MACf,CAAC;IACH,CAAC,CAAC;EACJ,CAAC,EAAE,CAACvL,GAAG,CAAC,CAAC;;EAET;EACA,MAAMyS,kBAAkB,GAAGhV,WAAW,CAAE8I,MAAc,IAAK;IACzD,OAAO7H,sBAAsB,CAACgU,qBAAqB,CAACnM,MAAM,EAAE1F,SAAS,CAAC;EACxE,CAAC,EAAE,EAAE,CAAC;EAEN,MAAM8R,gBAAgB,GAAGlV,WAAW,CAAC,CAACmV,SAAiB,EAAEC,aAAsB,KAAK;IAClF/R,YAAY,CAACY,IAAI,IAAI;MACnB,MAAM6E,MAAM,GAAG7E,IAAI,CAACvC,OAAO;MAC3B,MAAM2T,SAAS,GAAGpU,sBAAsB,CAACgU,qBAAqB,CAACnM,MAAM,EAAE7E,IAAI,CAAC;MAC5E,MAAMqR,OAAO,GAAGD,SAAS,CAACP,IAAI,CAACzN,CAAC,IAAIA,CAAC,CAACkO,EAAE,KAAKJ,SAAS,CAAC;MAEvD,IAAI,CAACG,OAAO,IAAI,CAACrU,sBAAsB,CAACuU,aAAa,CAACF,OAAO,EAAExM,MAAM,EAAE7E,IAAI,CAAC,EAAE;QAC5E,OAAOA,IAAI;MACb;;MAEA;MACA,MAAMwR,QAAQ,GAAG,CAAC,GAAGxR,IAAI,CAAChC,KAAK,CAAC6G,MAAM,CAAC,CAACW,KAAK,EAAE,GAAGxF,IAAI,CAAChC,KAAK,CAAC6G,MAAM,CAAC,CAACY,MAAM,CAAC,CAACE,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACP,IAAI,KAAK,KAAK,CAAqB;MAC9H,MAAMoM,SAAS,GAAGD,QAAQ,CAACX,IAAI,CAACjL,CAAC,IAAIyL,OAAO,CAACC,EAAE,CAACvL,QAAQ,CAACH,CAAC,CAACyG,GAAG,CAACqF,QAAQ,CAAC,CAAC,CAAC,CAAC;MAE3E,IAAI,CAACD,SAAS,EAAE,OAAOzR,IAAI;;MAE3B;MACA,IAAIwG,UAAsC;MAC1C,IAAI2K,aAAa,EAAE;QACjB,MAAMQ,UAAU,GAAG,CAAC,GAAG3R,IAAI,CAAChC,KAAK,CAAC,CAAC,CAAC,CAACwH,KAAK,EAAE,GAAGxF,IAAI,CAAChC,KAAK,CAAC,CAAC,CAAC,CAACyH,MAAM,EAAE,GAAGzF,IAAI,CAAChC,KAAK,CAAC,CAAC,CAAC,CAACwH,KAAK,EAAE,GAAGxF,IAAI,CAAChC,KAAK,CAAC,CAAC,CAAC,CAACyH,MAAM,CAAC,CAACE,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACP,IAAI,KAAK,KAAK,CAAqB;QACvKmB,UAAU,GAAGmL,UAAU,CAACd,IAAI,CAACjL,CAAC,IAAIA,CAAC,CAACyG,GAAG,KAAK8E,aAAa,CAAC;MAC5D;MAEA,MAAMS,MAAM,GAAG;QACbxM,IAAI,EAAEiM,OAAO,CAACjM,IAAI;QAClBqM,SAAS;QACTI,WAAW,EAAEhN,MAAM;QACnB2B;MACF,CAAQ;MAER,MAAMtB,QAAQ,GAAGlI,sBAAsB,CAAC8U,cAAc,CAACT,OAAO,EAAEO,MAAM,EAAE5R,IAAI,CAAC;MAE7E1B,GAAG,CAAC,GAAGmT,SAAS,CAACtM,IAAI,UAAUkM,OAAO,CAAClM,IAAI,GAAGqB,UAAU,GAAG,QAAQA,UAAU,CAACrB,IAAI,EAAE,GAAG,EAAE,GAAG,CAAC;MAE7F,OAAOD,QAAQ;IACjB,CAAC,CAAC;EACJ,CAAC,EAAE,CAAC/F,SAAS,EAAEb,GAAG,CAAC,CAAC;;EAEpB;EACA,MAAMyT,oBAAoB,GAAGhW,WAAW,CAAEiJ,KAAgB,IAAgB;IACxE,MAAME,QAAQ,GAAG;MAAE,GAAGF;IAAM,CAAC;;IAE7B;IACA,CAAC,CAAC,EAAE,CAAC,CAAC,CAAClC,OAAO,CAAC+B,MAAM,IAAI;MACvB,MAAM2M,QAAQ,GAAG,CAAC,GAAGtM,QAAQ,CAAClH,KAAK,CAAC6G,MAAM,CAAW,CAACW,KAAK,EAAE,GAAGN,QAAQ,CAAClH,KAAK,CAAC6G,MAAM,CAAW,CAACY,MAAM,CAAC,CAACE,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACP,IAAI,KAAK,KAAK,CAAqB;MAC1JmM,QAAQ,CAAC1O,OAAO,CAACiC,IAAI,IAAI;QACvBA,IAAI,CAACiN,WAAW,GAAG,KAAK;MAC1B,CAAC,CAAC;IACJ,CAAC,CAAC;IAEF,OAAO9M,QAAQ;EACjB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAM+M,8BAA8B,GAAGlW,WAAW,CAAEmW,mBAA6B,IAAK;IACpF9S,YAAY,CAACY,IAAI,IAAI;MACnB,MAAM6E,MAAM,GAAG7E,IAAI,CAACvC,OAAO;MAC3B,MAAMyH,QAAQ,GAAGlI,sBAAsB,CAACiV,8BAA8B,CAACjS,IAAI,EAAE6E,MAAM,EAAEqN,mBAAmB,EAAE5T,GAAG,CAAC;MAC9G,OAAO4G,QAAQ;IACjB,CAAC,CAAC;EACJ,CAAC,EAAE,CAAC5G,GAAG,CAAC,CAAC;;EAET;EACA,MAAM6T,6BAA6B,GAAGpW,WAAW,CAAE8I,MAAc,IAAc;IAC7E,MAAM7G,KAAK,GAAGmB,SAAS,CAACnB,KAAK,CAAC6G,MAAM,CAAC;IACrC,MAAM2M,QAAQ,GAAG,CAAC,GAAGxT,KAAK,CAACwH,KAAK,EAAE,GAAGxH,KAAK,CAACyH,MAAM,CAAC,CAACE,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACP,IAAI,KAAK,KAAK,CAAqB;IACpG,MAAM+M,KAAK,GAAGZ,QAAQ,CAACX,IAAI,CAACjL,CAAC,IAAIA,CAAC,CAACT,IAAI,KAAK,gBAAgB,CAAC;IAE7D,IAAI,CAACiN,KAAK,IAAIA,KAAK,CAACnL,WAAW,IAAImL,KAAK,CAACJ,WAAW,EAAE,OAAO,KAAK;IAElE,MAAMK,aAAa,GAAGlT,SAAS,CAACrB,KAAK,CAAC+G,MAAM,CAAC,CAACc,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACP,IAAI,KAAK,MAAM,CAAC;IAC5E,OAAOgN,aAAa,CAAC3O,MAAM,IAAI,CAAC;EAClC,CAAC,EAAE,CAACvE,SAAS,CAAC,CAAC;;EAEf;EACA,MAAMmT,iBAAiB,GAAGvW,WAAW,CAAC,MAAM;IAC1CgE,OAAO,CAACzB,GAAG,CAAC,6CAA6C,CAAC;IAC1DA,GAAG,CAAC,6CAA6C,CAAC;IAClD2J,QAAQ,CAAC,CAAC;EACZ,CAAC,EAAE,CAACA,QAAQ,EAAE3J,GAAG,CAAC,CAAC;EAEnB,OAAO;IACLa,SAAS;IACTE,iBAAiB;IACjBf,GAAG;IACHsF,YAAY;IACZuM,cAAc,EAAE7Q,oBAAoB;IACpC6J,MAAM;IACNmJ,iBAAiB;IAAE;;IAEnB;IACA9P,iBAAiB;IACjBgG,YAAY;IACZP,QAAQ,EAAE5F,WAAW,CAAC4F,QAAQ;IAC9BsK,OAAO,EAAElQ,WAAW,CAACkQ,OAAO;IAC5BvJ,mBAAmB;IACnBpE,iBAAiB;IAEjB;IACA8K,iBAAiB;IACjBG,eAAe;IACfE,eAAe;IACfC,eAAe;IACfC,yBAAyB;IACzBC,4BAA4B;IAC5BjC,eAAe;IACfa,2BAA2B;IAE3B;IACAuB,QAAQ,EAAEhO,WAAW,CAACgO,QAAQ;IAC9BC,iBAAiB;IACjBS,kBAAkB;IAClBE,gBAAgB;IAChBc,oBAAoB;IACpBE,8BAA8B;IAC9BE,6BAA6B;IAE7B;IACAtO,mBAAmB,EAAExB,WAAW,CAACwB,mBAAmB;IACpDa,cAAc,EAAErC,WAAW,CAACqC,cAAc;IAC1C8N,QAAQ,EAAEnQ,WAAW,CAACmQ,QAAQ;IAC9BC,yBAAyB,EAAEpQ,WAAW,CAACoQ,yBAAyB;IAEhE;IACA3J,SAAS,EAAExG,MAAM,CAACwG,SAAS;IAC3B9J,SAAS,EAAEsD,MAAM,CAACtD,SAAS;IAC3BgF,YAAY,EAAE1B,MAAM,CAAC0B,YAAY;IACjC0O,QAAQ,EAAEpQ,MAAM,CAACoQ,QAAQ;IACzBzO,WAAW,EAAE3B,MAAM,CAAC2B,WAAW;IAE/B;IACAa,iBAAiB;IACjB+I,kBAAkB;IAClB5L;EACF,CAAC;AACH;AAAC/C,EAAA,CAlxCeD,YAAY;EAAA,QA+EN/B,cAAc,EACnBC,SAAS,EACJC,cAAc;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}