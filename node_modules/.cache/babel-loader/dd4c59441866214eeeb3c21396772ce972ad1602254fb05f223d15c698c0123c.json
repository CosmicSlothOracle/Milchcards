{"ast":null,"code":"import{CARD_BY_ID}from'../data/cards';export function registerTrap(state,player,key){if(!state.traps)state.traps={1:[],2:[]};const list=state.traps[player];if(!Array.isArray(list))state.traps[player]=[];state.traps[player].push({owner:player,key});}export function applyTrapsOnCardPlayed(state,playedBy,card,enqueue,log){var _state$traps,_state$effectFlags$pl,_cardDef$tags,_cardDef$tags2;const opp=playedBy===1?2:1;const traps=(_state$traps=state.traps)===null||_state$traps===void 0?void 0:_state$traps[opp];if(!traps||traps.length===0)return;// Hard rule: Opposition Blockade – if current player is locked, cancel initiative card immediately\nif((card===null||card===void 0?void 0:card.type)==='initiative'&&(_state$effectFlags$pl=state.effectFlags[playedBy])!==null&&_state$effectFlags$pl!==void 0&&_state$effectFlags$pl.initiativesLocked){if(card.uid!=null){enqueue({type:'CANCEL_CARD',player:playedBy,targetUid:card.uid});}enqueue({type:'LOG',msg:'Blocked: initiatives are locked (Opposition Blockade).'});return;// skip further trap processing\n}// Get card definition to access type and tags\nconst cardDef=CARD_BY_ID[card.key];const isInitiative=(cardDef===null||cardDef===void 0?void 0:cardDef.type)==='initiative';const isPublic=(cardDef===null||cardDef===void 0?void 0:cardDef.type)==='public';const isGovernment=(cardDef===null||cardDef===void 0?void 0:cardDef.type)==='government';const isMediaLike=(cardDef===null||cardDef===void 0?void 0:(_cardDef$tags=cardDef.tags)===null||_cardDef$tags===void 0?void 0:_cardDef$tags.includes('Media'))||(cardDef===null||cardDef===void 0?void 0:(_cardDef$tags2=cardDef.tags)===null||_cardDef$tags2===void 0?void 0:_cardDef$tags2.includes('Platform'))||(card===null||card===void 0?void 0:card.tag)==='Media';// Fallback für Legacy-Karten\ntraps.forEach(t=>{switch(t.key){// bereits live benutzt\ncase'trap.fake_news.deactivate_media':if(isMediaLike&&card.uid!=null){enqueue({type:'DEACTIVATE_CARD',player:opp,targetUid:card.uid});log('Trap: Fake News – deactivated media/platform card.');}break;// neu: Initiative canceln (sofort beim Ausspielen der Initiative)\ncase'trap.legal_injunction.cancel_next_initiative':if(isInitiative&&card.uid!=null){enqueue({type:'CANCEL_CARD',player:opp,targetUid:card.uid});log('Trap: Legal Injunction – cancelled initiative.');}break;// neu: Karte zurück auf Hand (egal welcher Typ)\ncase'trap.whistleblower.return_last_played':if(card.uid!=null){enqueue({type:'RETURN_TO_HAND',player:playedBy,targetUid:card.uid});log('Trap: Whistleblower – returned played card to hand.');}break;// neu: Gegner discards 2 bei nächstem Play\ncase'trap.data_breach.opp_discard2':enqueue({type:'DISCARD_RANDOM_FROM_HAND',player:playedBy===1?2:1,amount:2});log('Trap: Data Breach – opponent discards 2.');break;// neu: Public deaktivieren\ncase'trap.media_blackout.deactivate_public':if(isPublic&&card.uid!=null){enqueue({type:'DEACTIVATE_CARD',player:opp,targetUid:card.uid});log('Trap: Media Blackout – deactivated public card.');}break;// neu: AP -2 für Gegner beim nächsten Play\ncase'trap.budget_freeze.opp_ap_minus2':enqueue({type:'ADD_AP',player:playedBy,amount:-2});log('Trap: Budget Freeze – opponent AP -2.');break;// neu: Government deaktivieren\ncase'trap.sabotage.deactivate_gov':if(isGovernment&&card.uid!=null){enqueue({type:'DEACTIVATE_CARD',player:opp,targetUid:card.uid});log('Trap: Sabotage – deactivated government card.');}break;// Strategic Disclosure: Government-Karte zurückgeben\ncase'trap.strategic_disclosure.return_gov':if(isGovernment&&card.uid!=null){enqueue({type:'RETURN_TO_HAND',player:playedBy,targetUid:card.uid});log('Trap: Strategic Disclosure – returned government card to hand.');}break;default:break;}});// OPTIONAL: one-shot Traps löschen – wenn gewünscht:\n// (state.traps as any)[opp] = (state.traps as any)[opp].filter(t => t.key !== '...');\n// (Kannst du später feingranular per Key entscheiden.)\n}","map":{"version":3,"names":["CARD_BY_ID","registerTrap","state","player","key","traps","list","Array","isArray","push","owner","applyTrapsOnCardPlayed","playedBy","card","enqueue","log","_state$traps","_state$effectFlags$pl","_cardDef$tags","_cardDef$tags2","opp","length","type","effectFlags","initiativesLocked","uid","targetUid","msg","cardDef","isInitiative","isPublic","isGovernment","isMediaLike","tags","includes","tag","forEach","t","amount"],"sources":["C:/Users/skank/Videos/Cards/Milchcards/src/utils/traps.ts"],"sourcesContent":["import type { GameState, Player, Card } from '../types/game';\r\nimport type { EffectEvent } from '../types/effects';\r\nimport { CARD_BY_ID } from '../data/cards';\r\n\r\nexport function registerTrap(state: GameState, player: Player, key: string) {\r\n  if (!state.traps) state.traps = { 1: [], 2: [] } as any;\r\n  const list = (state.traps as any)[player] as Array<{ owner: Player; key: string }>;\r\n  if (!Array.isArray(list)) (state.traps as any)[player] = [];\r\n  (state.traps as any)[player].push({ owner: player, key });\r\n}\r\n\r\nexport function applyTrapsOnCardPlayed(\r\n  state: GameState,\r\n  playedBy: Player,\r\n  card: Card,\r\n  enqueue: (e: EffectEvent) => void,\r\n  log: (m: string) => void\r\n) {\r\n  const opp: Player = playedBy === 1 ? 2 : 1;\r\n  const traps = (state.traps as any)?.[opp] as Array<{ owner: Player; key: string }> | undefined;\r\n  if (!traps || traps.length === 0) return;\r\n\r\n  // Hard rule: Opposition Blockade – if current player is locked, cancel initiative card immediately\r\n  if ((card as any)?.type === 'initiative' && state.effectFlags[playedBy]?.initiativesLocked) {\r\n    if ((card as any).uid != null) {\r\n      enqueue({ type: 'CANCEL_CARD', player: playedBy, targetUid: (card as any).uid } as any);\r\n    }\r\n    enqueue({ type: 'LOG', msg: 'Blocked: initiatives are locked (Opposition Blockade).' });\r\n    return; // skip further trap processing\r\n  }\r\n\r\n  // Get card definition to access type and tags\r\n  const cardDef = CARD_BY_ID[card.key];\r\n  const isInitiative = cardDef?.type === 'initiative';\r\n  const isPublic = cardDef?.type === 'public';\r\n  const isGovernment = cardDef?.type === 'government';\r\n  const isMediaLike = cardDef?.tags?.includes('Media') || \r\n                     cardDef?.tags?.includes('Platform') ||\r\n                     (card as any)?.tag === 'Media'; // Fallback für Legacy-Karten\r\n\r\n  traps.forEach(t => {\r\n    switch (t.key) {\r\n      // bereits live benutzt\r\n      case 'trap.fake_news.deactivate_media':\r\n        if (isMediaLike && (card as any).uid != null) {\r\n          enqueue({ type: 'DEACTIVATE_CARD', player: opp, targetUid: (card as any).uid });\r\n          log('Trap: Fake News – deactivated media/platform card.');\r\n        }\r\n        break;\r\n\r\n      // neu: Initiative canceln (sofort beim Ausspielen der Initiative)\r\n      case 'trap.legal_injunction.cancel_next_initiative':\r\n        if (isInitiative && (card as any).uid != null) {\r\n          enqueue({ type: 'CANCEL_CARD', player: opp, targetUid: (card as any).uid });\r\n          log('Trap: Legal Injunction – cancelled initiative.');\r\n        }\r\n        break;\r\n\r\n      // neu: Karte zurück auf Hand (egal welcher Typ)\r\n      case 'trap.whistleblower.return_last_played':\r\n        if ((card as any).uid != null) {\r\n          enqueue({ type: 'RETURN_TO_HAND', player: playedBy, targetUid: (card as any).uid });\r\n          log('Trap: Whistleblower – returned played card to hand.');\r\n        }\r\n        break;\r\n\r\n      // neu: Gegner discards 2 bei nächstem Play\r\n      case 'trap.data_breach.opp_discard2':\r\n        enqueue({ type: 'DISCARD_RANDOM_FROM_HAND', player: playedBy === 1 ? 2 : 1, amount: 2 });\r\n        log('Trap: Data Breach – opponent discards 2.');\r\n        break;\r\n\r\n      // neu: Public deaktivieren\r\n      case 'trap.media_blackout.deactivate_public':\r\n        if (isPublic && (card as any).uid != null) {\r\n          enqueue({ type: 'DEACTIVATE_CARD', player: opp, targetUid: (card as any).uid });\r\n          log('Trap: Media Blackout – deactivated public card.');\r\n        }\r\n        break;\r\n\r\n      // neu: AP -2 für Gegner beim nächsten Play\r\n      case 'trap.budget_freeze.opp_ap_minus2':\r\n        enqueue({ type: 'ADD_AP', player: playedBy, amount: -2 });\r\n        log('Trap: Budget Freeze – opponent AP -2.');\r\n        break;\r\n\r\n      // neu: Government deaktivieren\r\n      case 'trap.sabotage.deactivate_gov':\r\n        if (isGovernment && (card as any).uid != null) {\r\n          enqueue({ type: 'DEACTIVATE_CARD', player: opp, targetUid: (card as any).uid });\r\n          log('Trap: Sabotage – deactivated government card.');\r\n        }\r\n        break;\r\n\r\n      // Strategic Disclosure: Government-Karte zurückgeben\r\n      case 'trap.strategic_disclosure.return_gov':\r\n        if (isGovernment && (card as any).uid != null) {\r\n          enqueue({ type: 'RETURN_TO_HAND', player: playedBy, targetUid: (card as any).uid });\r\n          log('Trap: Strategic Disclosure – returned government card to hand.');\r\n        }\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n  });\r\n\r\n  // OPTIONAL: one-shot Traps löschen – wenn gewünscht:\r\n  // (state.traps as any)[opp] = (state.traps as any)[opp].filter(t => t.key !== '...');\r\n  // (Kannst du später feingranular per Key entscheiden.)\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}