{"ast":null,"code":"// Simplified AP system (2025-08-25)\n// ------------------------------------------------------------\n// Rules:\n// 1. Each card costs exactly 1 AP to play.\n// 2. Players start every turn with 2 AP (handled in game logic).\n// 3. AP effects simply ADD to the current AP via queued ADD_AP events.\n// 4. There is **no upper AP cap**. Values may exceed previous MAX_AP of 4.\nexport const START_AP=2;export const MAX_AP=Number.MAX_SAFE_INTEGER;// unlimited cap used for legacy code\nexport const BASE_AP_COST=1;// fixed cost for every card\n// Cache for AP calculations to prevent redundant calls\nconst apCache=new Map();function getCacheKey(state,player,card,lane){const flags=state.effectFlags[player];return\"\".concat(player,\"-\").concat(card.uid,\"-\").concat(lane,\"-\").concat(flags===null||flags===void 0?void 0:flags.initiativeDiscount,\"-\").concat(flags===null||flags===void 0?void 0:flags.initiativeRefund,\"-\").concat(flags===null||flags===void 0?void 0:flags.govRefundAvailable);}function clearApCache(){apCache.clear();}function isInitiative(card){var _type;const typeStr=(_type=card.type)!==null&&_type!==void 0?_type:'';return card.kind==='spec'&&/Sofort-?Initiative/i.test(typeStr);}function isGovernment(card){return card.kind==='pol';}/**\r\n * Returns the (fixed) AP cost for playing a card.\r\n * The new simplified system ignores all discounts – those abilities should now\r\n * enqueue an ADD_AP event instead. We still keep the signature to avoid large\r\n * refactors elsewhere.\r\n */export function getCardActionPointCost(_state,_player,_card,_lane){return{cost:BASE_AP_COST,reasons:[]};}export function getNetApCost(state,player,card,lane){// The net cost is always equal to the fixed cost. Refund-style abilities\n// should enqueue ADD_AP events separately; therefore refund is **always 0**\n// here.\nconst cost=BASE_AP_COST;const refund=0;const net=cost;// always 1\nreturn{cost,refund,net,reasons:[]};}// Clear cache when game state changes significantly\nexport function clearApCacheOnStateChange(){clearApCache();}export function wouldBeNetZero(state,player,card,lane){return getNetApCost(state,player,card,lane).net<=0;}export const isInitiativeCard=isInitiative;export const isGovernmentCard=isGovernment;export const isNetZeroMove=wouldBeNetZero;export const canPlayCard=(state,p,card)=>{// In the simplified AP system we only check that the player still has AP.\nreturn state.actionPoints[p]>0;};export const hasGretaOnBoard=(state,p)=>state.board[p].innen.some(c=>(c===null||c===void 0?void 0:c.kind)==='pol'&&(c===null||c===void 0?void 0:c.name)==='Greta Thunberg'&&!(c!==null&&c!==void 0&&c.deactivated));export const hasAnyZeroApPlay=(state,p)=>{var _state$hands$p;return((_state$hands$p=state.hands[p])!==null&&_state$hands$p!==void 0?_state$hands$p:[]).some(c=>wouldBeNetZero(state,p,c));};export function resetTurnApRefundFlags(state,p){}export function applyApRefundsAfterPlay(_state,_p,_card){}","map":{"version":3,"names":["START_AP","MAX_AP","Number","MAX_SAFE_INTEGER","BASE_AP_COST","apCache","Map","getCacheKey","state","player","card","lane","flags","effectFlags","concat","uid","initiativeDiscount","initiativeRefund","govRefundAvailable","clearApCache","clear","isInitiative","_type","typeStr","type","kind","test","isGovernment","getCardActionPointCost","_state","_player","_card","_lane","cost","reasons","getNetApCost","refund","net","clearApCacheOnStateChange","wouldBeNetZero","isInitiativeCard","isGovernmentCard","isNetZeroMove","canPlayCard","p","actionPoints","hasGretaOnBoard","board","innen","some","c","name","deactivated","hasAnyZeroApPlay","_state$hands$p","hands","resetTurnApRefundFlags","applyApRefundsAfterPlay","_p"],"sources":["C:/Users/skank/Videos/Cards/Milchcards/src/utils/ap.ts"],"sourcesContent":["import { Card, GameState, Player } from '../types/game';\r\n\r\n// Simplified AP system (2025-08-25)\r\n// ------------------------------------------------------------\r\n// Rules:\r\n// 1. Each card costs exactly 1 AP to play.\r\n// 2. Players start every turn with 2 AP (handled in game logic).\r\n// 3. AP effects simply ADD to the current AP via queued ADD_AP events.\r\n// 4. There is **no upper AP cap**. Values may exceed previous MAX_AP of 4.\r\n\r\nexport const START_AP = 2;\r\nexport const MAX_AP = Number.MAX_SAFE_INTEGER; // unlimited cap used for legacy code\r\nexport const BASE_AP_COST = 1; // fixed cost for every card\r\n\r\n// Cache for AP calculations to prevent redundant calls\r\nconst apCache = new Map<string, { cost: number; refund: number; net: number; reasons: string[] }>();\r\n\r\nfunction getCacheKey(state: GameState, player: Player, card: Card, lane?: string): string {\r\n  const flags = state.effectFlags[player];\r\n  return `${player}-${card.uid}-${lane}-${flags?.initiativeDiscount}-${flags?.initiativeRefund}-${flags?.govRefundAvailable}`;\r\n}\r\n\r\nfunction clearApCache(): void {\r\n  apCache.clear();\r\n}\r\n\r\nfunction isInitiative(card: Card): boolean {\r\n  const typeStr = (card as any).type ?? '';\r\n  return card.kind === 'spec' && /Sofort-?Initiative/i.test(typeStr);\r\n}\r\n\r\nfunction isGovernment(card: Card): boolean {\r\n  return card.kind === 'pol';\r\n}\r\n\r\n/**\r\n * Returns the (fixed) AP cost for playing a card.\r\n * The new simplified system ignores all discounts – those abilities should now\r\n * enqueue an ADD_AP event instead. We still keep the signature to avoid large\r\n * refactors elsewhere.\r\n */\r\nexport function getCardActionPointCost(\r\n  _state: GameState,\r\n  _player: Player,\r\n  _card: Card,\r\n  _lane?: 'innen' | 'aussen' | 'sofort'\r\n): { cost: number; reasons: string[] } {\r\n  return { cost: BASE_AP_COST, reasons: [] };\r\n}\r\n\r\nexport function getNetApCost(\r\n  state: GameState,\r\n  player: Player,\r\n  card: Card,\r\n  lane?: 'innen' | 'aussen' | 'sofort'\r\n): { cost: number; refund: number; net: number; reasons: string[] } {\r\n  // The net cost is always equal to the fixed cost. Refund-style abilities\r\n  // should enqueue ADD_AP events separately; therefore refund is **always 0**\r\n  // here.\r\n\r\n  const cost = BASE_AP_COST;\r\n  const refund = 0;\r\n  const net = cost; // always 1\r\n\r\n  return { cost, refund, net, reasons: [] };\r\n}\r\n\r\n// Clear cache when game state changes significantly\r\nexport function clearApCacheOnStateChange(): void {\r\n  clearApCache();\r\n}\r\n\r\nexport function wouldBeNetZero(\r\n  state: GameState,\r\n  player: Player,\r\n  card: Card,\r\n  lane?: 'innen' | 'aussen' | 'sofort'\r\n): boolean {\r\n  return getNetApCost(state, player, card, lane).net <= 0;\r\n}\r\n\r\nexport const isInitiativeCard = isInitiative;\r\nexport const isGovernmentCard = isGovernment;\r\nexport const isNetZeroMove = wouldBeNetZero;\r\nexport const canPlayCard = (state: GameState, p: Player, card: Card): boolean => {\r\n  // In the simplified AP system we only check that the player still has AP.\r\n  return state.actionPoints[p] > 0;\r\n};\r\n\r\nexport const hasGretaOnBoard = (state: GameState, p: Player) =>\r\n  state.board[p].innen.some(\r\n    (c) => (c as any)?.kind === 'pol' && (c as any)?.name === 'Greta Thunberg' && !(c as any)?.deactivated\r\n  );\r\nexport const hasAnyZeroApPlay = (state: GameState, p: Player) =>\r\n  (state.hands[p] ?? []).some((c) => wouldBeNetZero(state, p, c));\r\nexport function resetTurnApRefundFlags(state: GameState, p: Player) {}\r\nexport function applyApRefundsAfterPlay(_state: GameState, _p: Player, _card: Card) {}"],"mappings":"AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,MAAO,MAAM,CAAAA,QAAQ,CAAG,CAAC,CACzB,MAAO,MAAM,CAAAC,MAAM,CAAGC,MAAM,CAACC,gBAAgB,CAAE;AAC/C,MAAO,MAAM,CAAAC,YAAY,CAAG,CAAC,CAAE;AAE/B;AACA,KAAM,CAAAC,OAAO,CAAG,GAAI,CAAAC,GAAG,CAA2E,CAAC,CAEnG,QAAS,CAAAC,WAAWA,CAACC,KAAgB,CAAEC,MAAc,CAAEC,IAAU,CAAEC,IAAa,CAAU,CACxF,KAAM,CAAAC,KAAK,CAAGJ,KAAK,CAACK,WAAW,CAACJ,MAAM,CAAC,CACvC,SAAAK,MAAA,CAAUL,MAAM,MAAAK,MAAA,CAAIJ,IAAI,CAACK,GAAG,MAAAD,MAAA,CAAIH,IAAI,MAAAG,MAAA,CAAIF,KAAK,SAALA,KAAK,iBAALA,KAAK,CAAEI,kBAAkB,MAAAF,MAAA,CAAIF,KAAK,SAALA,KAAK,iBAALA,KAAK,CAAEK,gBAAgB,MAAAH,MAAA,CAAIF,KAAK,SAALA,KAAK,iBAALA,KAAK,CAAEM,kBAAkB,EAC3H,CAEA,QAAS,CAAAC,YAAYA,CAAA,CAAS,CAC5Bd,OAAO,CAACe,KAAK,CAAC,CAAC,CACjB,CAEA,QAAS,CAAAC,YAAYA,CAACX,IAAU,CAAW,KAAAY,KAAA,CACzC,KAAM,CAAAC,OAAO,EAAAD,KAAA,CAAIZ,IAAI,CAASc,IAAI,UAAAF,KAAA,UAAAA,KAAA,CAAI,EAAE,CACxC,MAAO,CAAAZ,IAAI,CAACe,IAAI,GAAK,MAAM,EAAI,qBAAqB,CAACC,IAAI,CAACH,OAAO,CAAC,CACpE,CAEA,QAAS,CAAAI,YAAYA,CAACjB,IAAU,CAAW,CACzC,MAAO,CAAAA,IAAI,CAACe,IAAI,GAAK,KAAK,CAC5B,CAEA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAAG,sBAAsBA,CACpCC,MAAiB,CACjBC,OAAe,CACfC,KAAW,CACXC,KAAqC,CACA,CACrC,MAAO,CAAEC,IAAI,CAAE7B,YAAY,CAAE8B,OAAO,CAAE,EAAG,CAAC,CAC5C,CAEA,MAAO,SAAS,CAAAC,YAAYA,CAC1B3B,KAAgB,CAChBC,MAAc,CACdC,IAAU,CACVC,IAAoC,CAC8B,CAClE;AACA;AACA;AAEA,KAAM,CAAAsB,IAAI,CAAG7B,YAAY,CACzB,KAAM,CAAAgC,MAAM,CAAG,CAAC,CAChB,KAAM,CAAAC,GAAG,CAAGJ,IAAI,CAAE;AAElB,MAAO,CAAEA,IAAI,CAAEG,MAAM,CAAEC,GAAG,CAAEH,OAAO,CAAE,EAAG,CAAC,CAC3C,CAEA;AACA,MAAO,SAAS,CAAAI,yBAAyBA,CAAA,CAAS,CAChDnB,YAAY,CAAC,CAAC,CAChB,CAEA,MAAO,SAAS,CAAAoB,cAAcA,CAC5B/B,KAAgB,CAChBC,MAAc,CACdC,IAAU,CACVC,IAAoC,CAC3B,CACT,MAAO,CAAAwB,YAAY,CAAC3B,KAAK,CAAEC,MAAM,CAAEC,IAAI,CAAEC,IAAI,CAAC,CAAC0B,GAAG,EAAI,CAAC,CACzD,CAEA,MAAO,MAAM,CAAAG,gBAAgB,CAAGnB,YAAY,CAC5C,MAAO,MAAM,CAAAoB,gBAAgB,CAAGd,YAAY,CAC5C,MAAO,MAAM,CAAAe,aAAa,CAAGH,cAAc,CAC3C,MAAO,MAAM,CAAAI,WAAW,CAAGA,CAACnC,KAAgB,CAAEoC,CAAS,CAAElC,IAAU,GAAc,CAC/E;AACA,MAAO,CAAAF,KAAK,CAACqC,YAAY,CAACD,CAAC,CAAC,CAAG,CAAC,CAClC,CAAC,CAED,MAAO,MAAM,CAAAE,eAAe,CAAGA,CAACtC,KAAgB,CAAEoC,CAAS,GACzDpC,KAAK,CAACuC,KAAK,CAACH,CAAC,CAAC,CAACI,KAAK,CAACC,IAAI,CACtBC,CAAC,EAAK,CAACA,CAAC,SAADA,CAAC,iBAADA,CAAC,CAAUzB,IAAI,IAAK,KAAK,EAAI,CAACyB,CAAC,SAADA,CAAC,iBAADA,CAAC,CAAUC,IAAI,IAAK,gBAAgB,EAAI,EAAED,CAAC,SAADA,CAAC,WAADA,CAAC,CAAUE,WAAW,CACxG,CAAC,CACH,MAAO,MAAM,CAAAC,gBAAgB,CAAGA,CAAC7C,KAAgB,CAAEoC,CAAS,QAAAU,cAAA,OAC1D,EAAAA,cAAA,CAAC9C,KAAK,CAAC+C,KAAK,CAACX,CAAC,CAAC,UAAAU,cAAA,UAAAA,cAAA,CAAI,EAAE,EAAEL,IAAI,CAAEC,CAAC,EAAKX,cAAc,CAAC/B,KAAK,CAAEoC,CAAC,CAAEM,CAAC,CAAC,CAAC,GACjE,MAAO,SAAS,CAAAM,sBAAsBA,CAAChD,KAAgB,CAAEoC,CAAS,CAAE,CAAC,CACrE,MAAO,SAAS,CAAAa,uBAAuBA,CAAC5B,MAAiB,CAAE6B,EAAU,CAAE3B,KAAW,CAAE,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}