{"ast":null,"code":"// Legacy name to effect key mapping for backward compatibility\nexport const LEGACY_NAME_TO_KEY={'Elon Musk':'elon_musk','Bill Gates':'bill_gates','Mark Zuckerberg':'mark_zuckerberg','Jack Ma':'jack_ma','Zhang Yiming':'zhang_yiming','Mukesh Ambani':'mukesh_ambani','Roman Abramovich':'roman_abramovich','Alisher Usmanov':'alisher_usmanov','Oprah Winfrey':'oprah_winfrey','George Soros':'george_soros','Warren Buffett':'warren_buffett','Jeff Bezos':'jeff_bezos','Larry Page':'larry_page','Sergey Brin':'sergey_brin','Tim Cook':'tim_cook','Vladimir Putin':'vladimir_putin'};// Effect registry - maps effect keys to their implementations\nexport const EFFECT_REGISTRY={// Public figures\nelon_musk:(state,player,card)=>{if(!state._effectQueue)state._effectQueue=[];state._effectQueue.push({type:'DRAW_CARDS',player,amount:1});state._effectQueue.push({type:'ADD_AP',player,amount:1});// Simplified: direct AP instead of discount\nstate._effectQueue.push({type:'LOG',msg:'Elon Musk: +1 Karte, +1 AP'});},bill_gates:(state,player,card)=>{if(!state._effectQueue)state._effectQueue=[];state._effectQueue.push({type:'DRAW_CARDS',player,amount:1});state._effectQueue.push({type:'ADD_AP',player,amount:1});state._effectQueue.push({type:'LOG',msg:'Bill Gates: +1 Karte, +1 AP'});},mark_zuckerberg:(state,player,card)=>{if(!state._effectQueue)state._effectQueue=[];state._effectQueue.push({type:'ADD_AP',player,amount:1});// Simplified: direct AP instead of refund\nstate._effectQueue.push({type:'LOG',msg:'Mark Zuckerberg: +1 AP'});},jack_ma:(state,player,card)=>{if(!state._effectQueue)state._effectQueue=[];state._effectQueue.push({type:'DRAW_CARDS',player,amount:1});state._effectQueue.push({type:'LOG',msg:'Jack Ma: +1 Karte'});},zhang_yiming:(state,player,card)=>{if(!state._effectQueue)state._effectQueue=[];state._effectQueue.push({type:'ADD_AP',player,amount:1});state._effectQueue.push({type:'LOG',msg:'Zhang Yiming: +1 AP'});},mukesh_ambani:(state,player,card)=>{if(!state._effectQueue)state._effectQueue=[];state._effectQueue.push({type:'ADD_AP',player,amount:1});state._effectQueue.push({type:'LOG',msg:'Mukesh Ambani: +1 AP'});},roman_abramovich:(state,player,card)=>{if(!state._effectQueue)state._effectQueue=[];state._effectQueue.push({type:'ADD_AP',player,amount:1});state._effectQueue.push({type:'LOG',msg:'Roman Abramovich: +1 AP'});},alisher_usmanov:(state,player,card)=>{if(!state._effectQueue)state._effectQueue=[];state._effectQueue.push({type:'DRAW_CARDS',player,amount:1});state._effectQueue.push({type:'LOG',msg:'Alisher Usmanov: +1 Karte'});},oprah_winfrey:(state,player,card)=>{if(!state._effectQueue)state._effectQueue=[];const otherPlayer=player===1?2:1;state._effectQueue.push({type:'DEACTIVATE_RANDOM_HAND',player,amount:1});state._effectQueue.push({type:'DEACTIVATE_RANDOM_HAND',player:otherPlayer,amount:1});state._effectQueue.push({type:'LOG',msg:'Oprah Winfrey: jeweils 1 zufällige Handkarte beider Spieler deaktiviert'});},george_soros:(state,player,card)=>{if(!state._effectQueue)state._effectQueue=[];state._effectQueue.push({type:'ADD_AP',player,amount:1});state._effectQueue.push({type:'LOG',msg:'George Soros: +1 AP'});},// New cards\nwarren_buffett:(state,player,card)=>{if(!state._effectQueue)state._effectQueue=[];state._effectQueue.push({type:'DRAW_CARDS',player,amount:2});state._effectQueue.push({type:'ADD_AP',player,amount:1});state._effectQueue.push({type:'LOG',msg:'Warren Buffett: +2 Karten, +1 AP'});},jeff_bezos:(state,player,card)=>{if(!state._effectQueue)state._effectQueue=[];state._effectQueue.push({type:'ADD_AP',player,amount:2});state._effectQueue.push({type:'LOG',msg:'Jeff Bezos: +2 AP'});},larry_page:(state,player,card)=>{if(!state._effectQueue)state._effectQueue=[];state._effectQueue.push({type:'DRAW_CARDS',player,amount:1});state._effectQueue.push({type:'ADD_AP',player,amount:1});state._effectQueue.push({type:'LOG',msg:'Larry Page: +1 Karte, +1 AP'});},sergey_brin:(state,player,card)=>{if(!state._effectQueue)state._effectQueue=[];state._effectQueue.push({type:'DRAW_CARDS',player,amount:1});state._effectQueue.push({type:'ADD_AP',player,amount:1});state._effectQueue.push({type:'LOG',msg:'Sergey Brin: +1 Karte, +1 AP'});},tim_cook:(state,player,card)=>{if(!state._effectQueue)state._effectQueue=[];state._effectQueue.push({type:'ADD_AP',player,amount:2});state._effectQueue.push({type:'LOG',msg:'Tim Cook: +2 AP'});},// Government cards\nvladimir_putin:(state,player,card)=>{if(!state._effectQueue)state._effectQueue=[];state._effectQueue.push({type:'BUFF_STRONGEST_GOV',player,amount:1});state._effectQueue.push({type:'LOG',msg:'Vladimir Putin: +1 I auf stärkste Regierung'});}};// Main function to trigger card effects via registry\nexport function triggerCardEffect(state,player,card){// Try to get effect key from legacy name mapping\nconst effectKey=LEGACY_NAME_TO_KEY[card.name];if(!effectKey){console.warn(\"No effect key found for card: \".concat(card.name));return;}const effectFn=EFFECT_REGISTRY[effectKey];if(!effectFn){console.warn(\"No effect implementation found for key: \".concat(effectKey));return;}effectFn(state,player,card);}","map":{"version":3,"names":["LEGACY_NAME_TO_KEY","EFFECT_REGISTRY","elon_musk","state","player","card","_effectQueue","push","type","amount","msg","bill_gates","mark_zuckerberg","jack_ma","zhang_yiming","mukesh_ambani","roman_abramovich","alisher_usmanov","oprah_winfrey","otherPlayer","george_soros","warren_buffett","jeff_bezos","larry_page","sergey_brin","tim_cook","vladimir_putin","triggerCardEffect","effectKey","name","console","warn","concat","effectFn"],"sources":["C:/Users/skank/Videos/Cards/Milchcards/src/effects/registry.ts"],"sourcesContent":["import { GameState, Player, Card } from '../types/game';\r\nimport { EffectEvent } from '../types/effects';\r\n\r\n// Legacy name to effect key mapping for backward compatibility\r\nexport const LEGACY_NAME_TO_KEY: Record<string, string> = {\r\n  'Elon Musk': 'elon_musk',\r\n  'Bill Gates': 'bill_gates',\r\n  'Mark Zuckerberg': 'mark_zuckerberg',\r\n  'Jack Ma': 'jack_ma',\r\n  'Zhang Yiming': 'zhang_yiming',\r\n  'Mukesh Ambani': 'mukesh_ambani',\r\n  'Roman Abramovich': 'roman_abramovich',\r\n  'Alisher Usmanov': 'alisher_usmanov',\r\n  'Oprah Winfrey': 'oprah_winfrey',\r\n  'George Soros': 'george_soros',\r\n  'Warren Buffett': 'warren_buffett',\r\n  'Jeff Bezos': 'jeff_bezos',\r\n  'Larry Page': 'larry_page',\r\n  'Sergey Brin': 'sergey_brin',\r\n  'Tim Cook': 'tim_cook',\r\n  'Vladimir Putin': 'vladimir_putin'\r\n};\r\n\r\n// Effect registry - maps effect keys to their implementations\r\nexport const EFFECT_REGISTRY: Record<string, (state: GameState, player: Player, card: Card) => void> = {\r\n  // Public figures\r\n  elon_musk: (state, player, card) => {\r\n    if (!state._effectQueue) state._effectQueue = [];\r\n    state._effectQueue.push({ type: 'DRAW_CARDS', player, amount: 1 });\r\n    state._effectQueue.push({ type: 'ADD_AP', player, amount: 1 }); // Simplified: direct AP instead of discount\r\n    state._effectQueue.push({ type: 'LOG', msg: 'Elon Musk: +1 Karte, +1 AP' });\r\n  },\r\n\r\n  bill_gates: (state, player, card) => {\r\n    if (!state._effectQueue) state._effectQueue = [];\r\n    state._effectQueue.push({ type: 'DRAW_CARDS', player, amount: 1 });\r\n    state._effectQueue.push({ type: 'ADD_AP', player, amount: 1 });\r\n    state._effectQueue.push({ type: 'LOG', msg: 'Bill Gates: +1 Karte, +1 AP' });\r\n  },\r\n\r\n  mark_zuckerberg: (state, player, card) => {\r\n    if (!state._effectQueue) state._effectQueue = [];\r\n    state._effectQueue.push({ type: 'ADD_AP', player, amount: 1 }); // Simplified: direct AP instead of refund\r\n    state._effectQueue.push({ type: 'LOG', msg: 'Mark Zuckerberg: +1 AP' });\r\n  },\r\n\r\n  jack_ma: (state, player, card) => {\r\n    if (!state._effectQueue) state._effectQueue = [];\r\n    state._effectQueue.push({ type: 'DRAW_CARDS', player, amount: 1 });\r\n    state._effectQueue.push({ type: 'LOG', msg: 'Jack Ma: +1 Karte' });\r\n  },\r\n\r\n  zhang_yiming: (state, player, card) => {\r\n    if (!state._effectQueue) state._effectQueue = [];\r\n    state._effectQueue.push({ type: 'ADD_AP', player, amount: 1 });\r\n    state._effectQueue.push({ type: 'LOG', msg: 'Zhang Yiming: +1 AP' });\r\n  },\r\n\r\n  mukesh_ambani: (state, player, card) => {\r\n    if (!state._effectQueue) state._effectQueue = [];\r\n    state._effectQueue.push({ type: 'ADD_AP', player, amount: 1 });\r\n    state._effectQueue.push({ type: 'LOG', msg: 'Mukesh Ambani: +1 AP' });\r\n  },\r\n\r\n  roman_abramovich: (state, player, card) => {\r\n    if (!state._effectQueue) state._effectQueue = [];\r\n    state._effectQueue.push({ type: 'ADD_AP', player, amount: 1 });\r\n    state._effectQueue.push({ type: 'LOG', msg: 'Roman Abramovich: +1 AP' });\r\n  },\r\n\r\n  alisher_usmanov: (state, player, card) => {\r\n    if (!state._effectQueue) state._effectQueue = [];\r\n    state._effectQueue.push({ type: 'DRAW_CARDS', player, amount: 1 });\r\n    state._effectQueue.push({ type: 'LOG', msg: 'Alisher Usmanov: +1 Karte' });\r\n  },\r\n\r\n  oprah_winfrey: (state, player, card) => {\r\n    if (!state._effectQueue) state._effectQueue = [];\r\n    const otherPlayer = player === 1 ? 2 : 1;\r\n    state._effectQueue.push({ type: 'DEACTIVATE_RANDOM_HAND', player, amount: 1 });\r\n    state._effectQueue.push({ type: 'DEACTIVATE_RANDOM_HAND', player: otherPlayer, amount: 1 });\r\n    state._effectQueue.push({ type: 'LOG', msg: 'Oprah Winfrey: jeweils 1 zufällige Handkarte beider Spieler deaktiviert' });\r\n  },\r\n\r\n  george_soros: (state, player, card) => {\r\n    if (!state._effectQueue) state._effectQueue = [];\r\n    state._effectQueue.push({ type: 'ADD_AP', player, amount: 1 });\r\n    state._effectQueue.push({ type: 'LOG', msg: 'George Soros: +1 AP' });\r\n  },\r\n\r\n  // New cards\r\n  warren_buffett: (state, player, card) => {\r\n    if (!state._effectQueue) state._effectQueue = [];\r\n    state._effectQueue.push({ type: 'DRAW_CARDS', player, amount: 2 });\r\n    state._effectQueue.push({ type: 'ADD_AP', player, amount: 1 });\r\n    state._effectQueue.push({ type: 'LOG', msg: 'Warren Buffett: +2 Karten, +1 AP' });\r\n  },\r\n\r\n  jeff_bezos: (state, player, card) => {\r\n    if (!state._effectQueue) state._effectQueue = [];\r\n    state._effectQueue.push({ type: 'ADD_AP', player, amount: 2 });\r\n    state._effectQueue.push({ type: 'LOG', msg: 'Jeff Bezos: +2 AP' });\r\n  },\r\n\r\n  larry_page: (state, player, card) => {\r\n    if (!state._effectQueue) state._effectQueue = [];\r\n    state._effectQueue.push({ type: 'DRAW_CARDS', player, amount: 1 });\r\n    state._effectQueue.push({ type: 'ADD_AP', player, amount: 1 });\r\n    state._effectQueue.push({ type: 'LOG', msg: 'Larry Page: +1 Karte, +1 AP' });\r\n  },\r\n\r\n  sergey_brin: (state, player, card) => {\r\n    if (!state._effectQueue) state._effectQueue = [];\r\n    state._effectQueue.push({ type: 'DRAW_CARDS', player, amount: 1 });\r\n    state._effectQueue.push({ type: 'ADD_AP', player, amount: 1 });\r\n    state._effectQueue.push({ type: 'LOG', msg: 'Sergey Brin: +1 Karte, +1 AP' });\r\n  },\r\n\r\n  tim_cook: (state, player, card) => {\r\n    if (!state._effectQueue) state._effectQueue = [];\r\n    state._effectQueue.push({ type: 'ADD_AP', player, amount: 2 });\r\n    state._effectQueue.push({ type: 'LOG', msg: 'Tim Cook: +2 AP' });\r\n  },\r\n\r\n  // Government cards\r\n  vladimir_putin: (state, player, card) => {\r\n    if (!state._effectQueue) state._effectQueue = [];\r\n    state._effectQueue.push({ type: 'BUFF_STRONGEST_GOV', player, amount: 1 });\r\n    state._effectQueue.push({ type: 'LOG', msg: 'Vladimir Putin: +1 I auf stärkste Regierung' });\r\n  }\r\n};\r\n\r\n// Main function to trigger card effects via registry\r\nexport function triggerCardEffect(state: GameState, player: Player, card: Card): void {\r\n  // Try to get effect key from legacy name mapping\r\n  const effectKey = LEGACY_NAME_TO_KEY[card.name];\r\n\r\n  if (!effectKey) {\r\n    console.warn(`No effect key found for card: ${card.name}`);\r\n    return;\r\n  }\r\n\r\n  const effectFn = EFFECT_REGISTRY[effectKey];\r\n  if (!effectFn) {\r\n    console.warn(`No effect implementation found for key: ${effectKey}`);\r\n    return;\r\n  }\r\n\r\n  effectFn(state, player, card);\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}