{"ast":null,"code":"import _objectSpread from\"C:/Users/skank/Videos/Cards/Milchcards/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{useCallback}from'react';import{createDefaultEffectFlags}from'../types/game';import{buildDeckFromEntries,sumGovernmentInfluenceWithAuras}from'../utils/gameUtils';import{PRESET_DECKS}from'../data/gameData';import{getCardActionPointCost,applyApRefundsAfterPlay,getNetApCost,canPlayCard}from'../utils/ap';import{triggerCardEffects}from'../effects/cards';import{ensureTestBaselineAP}from'../utils/testCompat';import{resolveQueue}from'../utils/queue';import{applyStartOfTurnFlags}from'../utils/startOfTurnHooks';import{checkTrapsOnOpponentPlay,registerTrap,isSystemrelevant,grantOneTimeProtection,isBoycottTrap}from'../utils/traps';import{recomputeAuraFlags}from'../state/effects';import{emptyBoard}from'../state/board';// Helper function for getting the other player\nconst other=p=>p===1?2:1;// Hilfsfunktion: stellt sicher, dass effectFlags vorhanden sind\nconst ensureFlags=(s,p)=>{if(!s.effectFlags){s.effectFlags={1:createDefaultEffectFlags(),2:createDefaultEffectFlags()};}else{s.effectFlags[p]=_objectSpread(_objectSpread({},createDefaultEffectFlags()),s.effectFlags[p]);}};// Lane-Heuristik wie in playCard\nconst pickLane=c=>{const tag=c.tag;if(c.kind==='pol'&&(tag==='Staatsoberhaupt'||tag==='Regierungschef'||tag==='Diplomat'))return'aussen';return'innen';};const isCardPlayableNow=(state,player,card)=>{if(card.deactivated)return false;if(card.kind==='pol'){const lane=pickLane(card);return state.board[player][lane].length<5;}if(card.kind==='spec'){const t=String(card.type||'').toLowerCase();if(t==='öffentlichkeitskarte'||t==='oeffentlichkeitskarte'||t==='public'){return state.board[player].innen.length<5;}if(t==='dauerhaft-initiative'){const slot='government';// wie bei dir „simplified\"\nreturn!state.permanentSlots[player][slot];}// sonst: Fallen/Interventionen – aktuell immer erlaubt\nreturn true;}return false;};export const hasPlayableZeroCost=(state,player)=>{for(const c of state.hands[player]){const{cost}=getCardActionPointCost(state,player,c);if(cost===0&&isCardPlayableNow(state,player,c))return true;}return false;};// Helper function to apply auras for a player (instant updates for Joschka Fischer + NGO synergy)\nfunction applyAurasForPlayer(state,player,log){const board=state.board[player];const hasNgo=board.innen.some(c=>c.kind==='spec'&&c.type==='Öffentlichkeitskarte'&&c.tag==='NGO'&&!c.deactivated);const newAussen=board.aussen.map(card=>{if(card.kind!=='pol')return card;const pol=_objectSpread({},card);if(pol.baseInfluence==null)pol.baseInfluence=pol.influence;const prev=pol.influence;let bonus=0;if(!pol.deactivated&&pol.name==='Joschka Fischer'&&pol.effect==='ngo_boost'&&hasNgo){bonus+=1;}pol.influence=pol.baseInfluence+bonus;if(log&&pol.influence>prev)log(\"PASSIV: \".concat(pol.name,\" +\").concat(pol.influence-prev,\" I (jetzt \").concat(pol.influence,\").\"));return pol;});state.board=_objectSpread(_objectSpread({},state.board),{},{[player]:_objectSpread(_objectSpread({},state.board[player]),{},{aussen:newAussen})});}// Helper function to check if round should end\nfunction checkRoundEnd(gameState){// Round ends if both players have passed\nconst result=gameState.passed[1]&&gameState.passed[2];console.log(\"\\uD83D\\uDD27 DEBUG: checkRoundEnd - P1 passed: \".concat(gameState.passed[1],\", P2 passed: \").concat(gameState.passed[2],\", result: \").concat(result));return result;}// Helper function to draw cards from deck\nfunction drawCardsFromDeck(gameState,player,count){const deck=[...gameState.decks[player]];const drawnCards=deck.splice(0,Math.min(count,deck.length));return drawnCards;}// Helper function to really end a turn (extracted from nextTurn logic)\nfunction reallyEndTurn(gameState,log){const current=gameState.current;// Flag zurücksetzen - Zug-Ende wird jetzt wirklich durchgeführt\ngameState.isEndingTurn=false;// ✅ Karte nachziehen am Ende eines Zugs (nur wenn NICHT \"pass\")\nif(!gameState.passed[current]){const drawnCard=gameState.decks[current].shift();if(drawnCard){gameState.hands[current].push(drawnCard);log(\"\\uD83D\\uDD25 Zug-Ende: +1 Karte gezogen (\".concat(drawnCard.name,\")\"));}}else{log(\"\\u23ED\\uFE0F P\".concat(current,\" hat gepasst \\u2013 kein Nachziehen.\"));}// Check if round should end\nconst shouldEndRound=checkRoundEnd(gameState);if(shouldEndRound){log(\"\\uD83C\\uDFC1 Runde \".concat(gameState.round,\" wird beendet (Zug-Ende).\"));return resolveRound(gameState,log);}// Spielerwechsel + AP/Actions reset\nconst newCurrent=current===1?2:1;gameState.current=newCurrent;gameState.actionPoints=_objectSpread(_objectSpread({},gameState.actionPoints),{},{[newCurrent]:2});gameState.actionsUsed=_objectSpread(_objectSpread({},gameState.actionsUsed),{},{[newCurrent]:0});gameState.passed=_objectSpread(_objectSpread({},gameState.passed),{},{[newCurrent]:false});// Apply new start-of-turn hooks\napplyStartOfTurnFlags(gameState,newCurrent,log);// 🔥 CLUSTER 3: Auren-Flags beim Zugstart neu berechnen\nrecomputeAuraFlags(gameState);// Reset turn-bezogener Flag-Nutzungen (handled in applyStartOfTurnFlags)\nlog(\"\\uD83D\\uDD04 Zug-Ende: Spieler \".concat(newCurrent,\" ist am Zug (2 AP verf\\xFCgbar)\"));return gameState;}// Helper function to resolve round and start new one\nfunction resolveRound(gameState,log){// Calculate influence for both players\nconst p1Influence=sumGovernmentInfluenceWithAuras(gameState,1);const p2Influence=sumGovernmentInfluenceWithAuras(gameState,2);log(\"\\uD83D\\uDCCA Rundenauswertung: P1 \".concat(p1Influence,\" Einfluss vs P2 \").concat(p2Influence,\" Einfluss\"));// Determine winner\nlet roundWinner;if(p1Influence>p2Influence){roundWinner=1;log(\"\\uD83C\\uDFC6 Spieler 1 gewinnt die Runde! (\".concat(p1Influence,\" > \").concat(p2Influence,\")\"));}else if(p2Influence>p1Influence){roundWinner=2;log(\"\\uD83C\\uDFC6 Spieler 2 gewinnt die Runde! (\".concat(p2Influence,\" > \").concat(p1Influence,\")\"));}else{// Tie - current player wins\nroundWinner=gameState.current;log(\"\\uD83E\\uDD1D Unentschieden! Spieler \".concat(roundWinner,\" gewinnt als aktiver Spieler.\"));}// Collect all cards to move to discard\nconst cardsToDiscard=[...gameState.board[1].innen,...gameState.board[1].aussen,...gameState.board[2].innen,...gameState.board[2].aussen,...(gameState.permanentSlots[1].government?[gameState.permanentSlots[1].government]:[]),...(gameState.permanentSlots[1].public?[gameState.permanentSlots[1].public]:[]),...(gameState.permanentSlots[2].government?[gameState.permanentSlots[2].government]:[]),...(gameState.permanentSlots[2].public?[gameState.permanentSlots[2].public]:[]),...gameState.board[1].sofort,...gameState.board[2].sofort];// Draw 5 new cards for each player\nconst newP1Hand=drawCardsFromDeck(gameState,1,5);const newP2Hand=drawCardsFromDeck(gameState,2,5);// Calculate new rounds won\nconst newRoundsWon=_objectSpread(_objectSpread({},gameState.roundsWon),{},{[roundWinner]:gameState.roundsWon[roundWinner]+1});// Check if game should end (Best of 3: first to 2 wins)\nconst p1Wins=newRoundsWon[1];const p2Wins=newRoundsWon[2];if(p1Wins>=2||p2Wins>=2){const gameWinner=p1Wins>=2?1:2;log(\"\\uD83C\\uDFC6\\uD83C\\uDF89 SPIEL BEENDET! Spieler \".concat(gameWinner,\" gewinnt das Match! (\").concat(p1Wins,\"-\").concat(p2Wins,\")\"));log(\"\\uD83D\\uDD25 Gesamtergebnis: Player \".concat(gameWinner,\" ist der Sieger!\"));// Return final state with game winner\nreturn _objectSpread(_objectSpread({},gameState),{},{roundsWon:newRoundsWon,gameWinner,// Keep current board state for final display\npassed:{1:true,2:true}// Both passed to indicate game end\n});}// Create new state for next round\nconst newState=_objectSpread(_objectSpread({},gameState),{},{round:gameState.round+1,current:roundWinner,// Winner starts next round\npassed:{1:false,2:false},// Reset pass status\nactionPoints:{1:2,2:2},// Reset AP\nactionsUsed:{1:0,2:0},// Reset actions\nroundsWon:newRoundsWon,effectFlags:{1:createDefaultEffectFlags(),2:createDefaultEffectFlags()},// Clear all board positions\nboard:emptyBoard(),// Clear permanent slots\npermanentSlots:{1:{government:null,public:null},2:{government:null,public:null}},// instantSlot wird nicht mehr verwendet - Sofort-Initiativen gehen in board[player].sofort\n// New hands with 5 cards each\nhands:{1:newP1Hand,2:newP2Hand},// Update decks (cards were removed during drawing)\ndecks:{1:gameState.decks[1].slice(newP1Hand.length),2:gameState.decks[2].slice(newP2Hand.length)},// Update discard pile\ndiscard:[...gameState.discard,...cardsToDiscard]});log(\"\\uD83C\\uDD95 Runde \".concat(newState.round,\" startet! Spieler \").concat(roundWinner,\" beginnt. (Rundenstand: P1 \").concat(newState.roundsWon[1],\" - P2 \").concat(newState.roundsWon[2],\")\"));log(\"\\uD83C\\uDCCF Beide Spieler erhalten 5 neue Handkarten.\");return newState;}export function useGameActions(gameState,setGameState,log){const startMatchWithDecks=useCallback((p1DeckEntries,p2DeckEntries)=>{const p1Cards=buildDeckFromEntries(p1DeckEntries);const p2Cards=buildDeckFromEntries(p2DeckEntries);// Debug: Log deck composition with detailed tag analysis\nconst p1NgoCarten=p1Cards.filter(c=>c.tag==='NGO');const p1PlatformCards=p1Cards.filter(c=>c.tag==='Plattform');const p1JoschaCards=p1Cards.filter(c=>c.effect==='ngo_boost');const p1PublicCards=p1Cards.filter(c=>c.kind==='spec'&&c.type==='Öffentlichkeitskarte');log(\"\\uD83D\\uDD0D DECK DEBUG P1: \".concat(p1Cards.length,\" Karten total\"));log(\"\\uD83E\\uDDEA P1 Public Cards: \".concat(p1PublicCards.map(c=>\"\".concat(c.name).concat(c.tag?\"[\".concat(c.tag,\"]\"):'')).join(', ')));log(\"\\uD83C\\uDF31 P1 NGO-Karten: \".concat(p1NgoCarten.length>0?p1NgoCarten.map(c=>c.name).join(', '):'Keine'));log(\"\\uD83D\\uDCBB P1 Plattform-Karten: \".concat(p1PlatformCards.length>0?p1PlatformCards.map(c=>c.name).join(', '):'Keine'));log(\"\\uD83C\\uDFAF JOSCHKA FISCHER: \".concat(p1JoschaCards.length>0?'✅ IM DECK':'❌ NICHT IM DECK'));const d1=[...p1Cards];const d2=[...p2Cards];const h1=d1.splice(0,Math.min(5,d1.length));const h2=d2.splice(0,Math.min(5,d2.length));setGameState(_objectSpread(_objectSpread({},gameState),{},{round:1,current:1,passed:{1:false,2:false},decks:{1:d1,2:d2},hands:{1:h1,2:h2},board:{1:{innen:[],aussen:[],sofort:[]},2:{innen:[],aussen:[],sofort:[]}},traps:{1:[],2:[]},permanentSlots:{1:{government:null,public:null},2:{government:null,public:null}},// instantSlot wird nicht mehr verwendet - Sofort-Initiativen gehen in board[player].sofort\ndiscard:[],shields:new Set(),// Set<UID>\neffectFlags:{1:createDefaultEffectFlags(),2:createDefaultEffectFlags()},log:[\"Match gestartet. P1 und P2 erhalten je \".concat(h1.length,\"/\").concat(h2.length,\" Startkarten.\"),\"\\uD83D\\uDD0D DECK DEBUG P1: \".concat(p1Cards.length,\" Karten total\"),\"\\uD83E\\uDDEA P1 Public Cards: \".concat(p1PublicCards.map(c=>\"\".concat(c.name).concat(c.tag?\"[\".concat(c.tag,\"]\"):'')).join(', ')),\"\\uD83C\\uDF31 P1 NGO-Karten: \".concat(p1NgoCarten.length>0?p1NgoCarten.map(c=>c.name).join(', '):'Keine'),\"\\uD83D\\uDCBB P1 Plattform-Karten: \".concat(p1PlatformCards.length>0?p1PlatformCards.map(c=>c.name).join(', '):'Keine'),\"\\uD83C\\uDFAF JOSCHKA FISCHER: \".concat(p1JoschaCards.length>0?'✅ IM DECK':'❌ NICHT IM DECK'),\"\\uD83D\\uDCCB INITIAL BOARD P1: Regierung=[] | \\xD6ffentlichkeit=[]\",\"\\uD83D\\uDCCB INITIAL BOARD P2: Regierung=[] | \\xD6ffentlichkeit=[]\",\"\\uD83C\\uDFE0 PERMANENT SLOTS: Alle leer\"],activeRefresh:{1:0,2:0}}));},[gameState,setGameState,log]);const startMatchVsAI=useCallback(function(p1DeckEntries){let presetKey=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'AUTORITAERER_REALIST';const p2DeckEntries=PRESET_DECKS[presetKey];startMatchWithDecks(p1DeckEntries,p2DeckEntries);},[startMatchWithDecks]);const playCard=useCallback((player,handIndex,lane)=>{setGameState(prev=>{var _prev$actionsUsed$pla,_type;// Test-only baseline fix – ensures AP=5 at game start inside test runner\nensureTestBaselineAP(prev);// Validate input parameters\nif(prev.current!==player){log(\"\\u274C ERROR: Not player turn - Current: \".concat(prev.current,\", Attempted: \").concat(player));return prev;}const hand=prev.hands[player];if(handIndex<0||handIndex>=hand.length){log(\"\\u274C ERROR: Invalid hand index - Index: \".concat(handIndex,\", Hand length: \").concat(hand.length));return prev;}// Debug: Log current hand contents with detailed tag info\nlog(\"\\uD83D\\uDD0D HAND DEBUG P\".concat(player,\": \").concat(hand.map((c,i)=>\"\".concat(i,\":\").concat(c.name).concat(c.tag?\"[\".concat(c.tag,\"]\"):'')).join(', ')));const ngoCards=hand.filter(c=>c.tag==='NGO');const platformCards=hand.filter(c=>c.tag==='Plattform');if(ngoCards.length>0){log(\"\\uD83C\\uDF31 NGO-Karten in Hand P\".concat(player,\": \").concat(ngoCards.map(c=>c.name).join(', ')));}if(platformCards.length>0){log(\"\\uD83D\\uDCBB Plattform-Karten in Hand P\".concat(player,\": \").concat(platformCards.map(c=>c.name).join(', ')));}const selectedCard=hand[handIndex];if(!canPlayCard(prev,player,selectedCard)){log('🚫 Kann Karte nicht spielen (Aktionslimit & nicht 0-AP).');return prev;}const{cost,refund,net}=getNetApCost(prev,player,selectedCard);const prevAp=prev.actionPoints[player];const prevAct=(_prev$actionsUsed$pla=prev.actionsUsed[player])!==null&&_prev$actionsUsed$pla!==void 0?_prev$actionsUsed$pla:0;const newState=_objectSpread({},prev);// AP abbuchen & refund gutschreiben\nnewState.actionPoints[player]=Math.max(0,newState.actionPoints[player]-cost+refund);// Action-Zähler: nur wenn net > 0\nif(net>0){newState.actionsUsed[player]+=1;log(\"\\uD83D\\uDCB3 Kosten verbucht: AP \".concat(prevAp,\"\\u2192\").concat(newState.actionPoints[player],\" | Aktionen \").concat(prevAct,\"\\u2192\").concat(newState.actionsUsed[player]));}else{log(\"\\uD83C\\uDD93 Netto-0-Zug: \\u2212\".concat(cost,\" AP (+\").concat(refund,\" Refund) \\u2192 keine Aktion verbraucht.\"));}// Flags KONSUMIEREN (einheitlich, NUR HIER!)\nensureFlags(newState,player);const ef=newState.effectFlags[player];// Regierung: Refund einmalig pro Zug\nif(selectedCard.kind==='pol'&&ef.govRefundAvailable){ef.govRefundAvailable=false;}// Initiative: pro Karte je 1 Refund & 1 Discount abbauen, falls vorhanden\nconst isInstant=selectedCard.kind==='spec'&&/Sofort-?Initiative/i.test((_type=selectedCard.type)!==null&&_type!==void 0?_type:'');if(isInstant){if(ef.initiativeRefund>0)ef.initiativeRefund-=1;if(ef.initiativeDiscount>0)ef.initiativeDiscount-=1;}// Remove card from hand\nconst newHand=[...newState.hands[player]];const[playedCard]=newHand.splice(handIndex,1);newState.hands=_objectSpread(_objectSpread({},newState.hands),{},{[player]:newHand});// 🔧 CLUSTER 3 DEBUG: Zeige jede gespielte Karte\nlog(\"\\uD83D\\uDD27 CLUSTER 3 GLOBAL DEBUG: P\".concat(player,\" spielt \").concat(playedCard.name,\" (\").concat(playedCard.kind,\") - Type: \").concat(playedCard.type||'KEIN TYPE'));// 🔧 CLUSTER 3 DEBUG: Zeige aktuelles Board\nconst currentBoard=newState.board[player];const publicCardsOnBoard=currentBoard.innen.filter(card=>card.kind==='spec');log(\"\\uD83D\\uDD27 CLUSTER 3 GLOBAL DEBUG: \\xD6ffentlichkeitskarten auf dem Feld: \".concat(publicCardsOnBoard.map(c=>c.name).join(', ')));// Jennifer Doudna check removed - not needed for current game logic\n// Handle different card types\nif(playedCard.kind==='pol'){var _tag;const polCard=playedCard;const targetLane=lane||(polCard.tag==='Staatsoberhaupt'||polCard.tag==='Regierungschef'||polCard.tag==='Diplomat'?'aussen':'innen');if(newState.board[player][targetLane].length>=5){log(\"\\u274C ERROR: Lane full - Lane: \".concat(targetLane,\", Current: \").concat(newState.board[player][targetLane].length,\"/5\"));return prev;}// Add to board (immutable clone to avoid accidental double references)\nconst laneArray=[...newState.board[player][targetLane],playedCard];const playerBoardCloned=_objectSpread(_objectSpread({},newState.board[player]),{},{[targetLane]:laneArray});newState.board=_objectSpread(_objectSpread({},newState.board),{},{[player]:playerBoardCloned});log(\"\\uD83C\\uDCCF Player \".concat(player,\": \").concat(playedCard.name,\" gespielt in \").concat(targetLane==='aussen'?'Regierung':'Öffentlichkeit'));// 3) Nachdem die Karte gelegt wurde: gegnerische Traps prüfen\nconst tag=(_tag=playedCard.tag)!==null&&_tag!==void 0?_tag:'';const isNGOorPlatform=['NGO','Plattform'].includes(tag);checkTrapsOnOpponentPlay(newState,player===1?2:1,playedCard.uid,isNGOorPlatform,log);// 👉 Erst JETZT Auren anwenden (damit +2 Basis erhalten bleibt)\napplyAurasForPlayer(newState,player,log);// 6) Karteneffekte enqueuen + Queue auflösen\ntriggerCardEffects(newState,player,playedCard);// Queue needs array of events\nif(newState._queue&&newState._queue.length>0){resolveQueue(newState,newState._queue);newState._queue=[];}// 🔥 ROMAN ABRAMOVICH EFFEKT: Wenn Regierungskarte mit Einfluss ≤5 gespielt wird\nif(playedCard.kind==='pol'&&playedCard.influence<=5){const opponent=player===1?2:1;const opponentBoard=newState.board[opponent];const romanAbramovich=opponentBoard.innen.find(card=>card.kind==='spec'&&card.name==='Roman Abramovich');if(romanAbramovich){// Ziehe eine Karte für den Gegner\nif(newState.decks[opponent].length>0){const drawnCard=newState.decks[opponent].shift();if(drawnCard){newState.hands[opponent].push(drawnCard);log(\"\\uD83D\\uDD25 ROMAN ABRAMOVICH EFFEKT: P\".concat(opponent,\" zieht 1 Karte (\").concat(drawnCard.name,\") - Regierungskarte mit Einfluss \\u22645 gespielt\"));}}}}// 🔍 BOARD DEBUG: Zeige aktuelles Board nach dem Spielen\nconst currentBoard=newState.board[player];const regierungKarten=currentBoard.aussen.map(c=>\"\".concat(c.name,\"[\").concat(c.kind==='pol'?c.influence+'I':'S',\"]\"));const öffentlichkeitKarten=currentBoard.innen.map(c=>\"\".concat(c.name,\"[\").concat(c.kind==='spec'?c.tag||'S':'P',\"]\"));log(\"\\uD83D\\uDCCB P\".concat(player,\" BOARD: Regierung=[\").concat(regierungKarten.join(', '),\"] | \\xD6ffentlichkeit=[\").concat(öffentlichkeitKarten.join(', '),\"]\"));// 🔥 JOSCHKA FISCHER NGO-EFFEKT: Jetzt als kontinuierlicher Aura-Effekt in sumRowWithAuras implementiert\nlog(\"\\uD83D\\uDD0D DEBUG: Karte gespielt - Name: \".concat(playedCard.name,\", Tag: \").concat(playedCard.tag||'Kein Tag',\", Lane: \").concat(targetLane,\", Kind: \").concat(playedCard.kind));if(playedCard.tag==='NGO'){log(\"\\uD83D\\uDD0D NGO-Karte gespielt: \".concat(playedCard.name,\" [NGO] - Kontinuierliche Aura-Effekte werden bei Rundenauswertung berechnet\"));// 🎯 SOFORTIGE SYNERGIE-PRÜFUNG: Joschka Fischer + NGO\nconst joschaFischer=currentBoard.aussen.find(card=>card.kind==='pol'&&card.effect==='ngo_boost');if(joschaFischer){log(\"\\uD83D\\uDD25\\uD83D\\uDD25\\uD83D\\uDD25 SYNERGIE AKTIVIERT! \\uD83D\\uDD25\\uD83D\\uDD25\\uD83D\\uDD25 Joschka Fischer + \".concat(playedCard.name,\"[NGO] \\u2192 +1 Einfluss bei Rundenauswertung\"));}}}else if(playedCard.kind==='spec'){const specCard=playedCard;const typeStr=String(specCard.type||'').toLowerCase();const isInitiative=/initiative/.test(typeStr);// matcht \"Initiative\", \"Sofort-Initiative\", etc.\n// 1) Falls es eine \"Systemrelevant\" ist (sofortiger Buff auf letzte eigene Regierungskarte)\nif(isSystemrelevant(playedCard)){const ownBoard=newState.board[player];const candidates=[...ownBoard.aussen,...ownBoard.innen].filter(c=>c.kind==='pol');const target=candidates[candidates.length-1];// letzte eigene Regierungskarte\nif(target){grantOneTimeProtection(target,log);}else{log('🛈 Systemrelevant: Keine eigene Regierungskarte im Spiel – Effekt verpufft.');}// danach die Spezialkarte normal entsorgen\nnewState.discard.push(playedCard);return newState;}// 1) Dauerhaft-Initiative (Ongoing)\nif(typeStr.includes('dauerhaft')){const slotType='government';// ggf. später per specCard.slot dynamisch\nif(!newState.permanentSlots[player][slotType]){newState.permanentSlots[player][slotType]=playedCard;log(\"P\".concat(player,\" spielt \").concat(playedCard.name,\" als Dauerhafte Initiative\"));}else{var _newState$permanentSl;log(\"\\u26A0\\uFE0F WARN: Slot occupied - Slot \".concat(slotType,\" already has \").concat((_newState$permanentSl=newState.permanentSlots[player][slotType])===null||_newState$permanentSl===void 0?void 0:_newState$permanentSl.name));}// 6) Karteneffekte enqueuen + Queue auflösen\ntriggerCardEffects(newState,player,playedCard);// Queue needs array of events\nif(newState._queue&&newState._queue.length>0){resolveQueue(newState,newState._queue);newState._queue=[];}return newState;}// 2) Sofort-/Sofort-Initiativen (Instant)\nif(isInitiative){var _newState$effectFlags;if(!specCard.effectKey){log(\"\\u274C Initiative ohne effectKey: \".concat(specCard.name));}else{log(\"\\uD83E\\uDDE9 INIT: \".concat(specCard.name,\" [\").concat(String(specCard.effectKey),\"] gespielt\"));}// 🔧 NEU: Sofort-Initiativen werden in das sofort Array gelegt statt sofort aktiviert\nif(typeStr.includes('sofort')){// Prüfe ob bereits eine Sofort-Initiative im Slot liegt\nif(newState.board[player].sofort.length>0){var _newState$board$playe;log(\"\\u274C ERROR: Sofort-Initiative-Slot bereits besetzt - \".concat((_newState$board$playe=newState.board[player].sofort[0])===null||_newState$board$playe===void 0?void 0:_newState$board$playe.name,\" muss erst aktiviert werden\"));// Karte zurück in die Hand\nnewState.hands[player]=[...newState.hands[player],playedCard];// AP zurückgeben\nnewState.actionPoints[player]+=net;// Aktion rückgängig machen\nif(net>0){newState.actionsUsed[player]=Math.max(0,newState.actionsUsed[player]-1);}return newState;}// Sofort-Initiative in das sofort Array legen\nnewState.board[player].sofort=[playedCard];log(\"\\uD83C\\uDFAF P\".concat(player,\" legt \").concat(playedCard.name,\" in Sofort-Initiative-Slot (kann sp\\xE4ter aktiviert werden)\"));// Sofort-Initiativen: auf Board.sofort legen (nicht direkt entsorgen)\nif(!newState._queue)newState._queue=[];newState._queue.push({type:'LOG',msg:\"\\uD83D\\uDD14 Sofort-Initiative bereit: \".concat(playedCard.name,\" (zum Aktivieren anklicken oder Taste 'A')\")});return newState;}// Dauerhaft-Initiativen werden weiterhin sofort aktiviert\n// Initiative in den Ablagestapel\nnewState.discard=[...newState.discard,playedCard];log(\"P\".concat(player,\" spielt Initiative: \").concat(playedCard.name));// 6) Karteneffekte enqueuen + Queue auflösen\ntriggerCardEffects(newState,player,playedCard);// Queue needs array of events\nif(newState._queue&&newState._queue.length>0){resolveQueue(newState,newState._queue);newState._queue=[];}// 🔥 CLUSTER 3: Auren-Flags neu berechnen (nach Kartenspielen)\nrecomputeAuraFlags(newState);// 🔥 CLUSTER 3: Ai Weiwei Bonus wird bei Aktivierung angewendet (nicht beim Spielen)\n// 🔥 PASSIVE EFFEKTE NACH INITIATIVE: Mark Zuckerberg & Sam Altman\n// Mark Zuckerberg: \"Nach einer Initiative: +1 Aktionspunkt zurück (einmal pro Runde)\"\nconst markZuckerberg=newState.board[player].innen.find(card=>card.kind==='spec'&&card.name==='Mark Zuckerberg');if(markZuckerberg&&!((_newState$effectFlags=newState.effectFlags[player])!==null&&_newState$effectFlags!==void 0&&_newState$effectFlags.markZuckerbergUsed)){newState.actionPoints[player]+=1;newState.effectFlags[player]=_objectSpread(_objectSpread({},newState.effectFlags[player]),{},{markZuckerbergUsed:true});log(\"\\uD83D\\uDD25 MARK ZUCKERBERG EFFEKT: +1 AP zur\\xFCck nach Initiative (\".concat(newState.actionPoints[player]-1,\" \\u2192 \").concat(newState.actionPoints[player],\")\"));}// Sam Altman: \"Bei einer KI-bezogenen Initiative: ziehe 1 Karte + 1 Aktionspunkt zurück\"\nconst samAltman=newState.board[player].innen.find(card=>card.kind==='spec'&&card.name==='Sam Altman');if(samAltman&&playedCard.tag==='Intelligenz'){// Ziehe 1 Karte\nif(newState.decks[player].length>0){const drawnCard=newState.decks[player].shift();if(drawnCard){newState.hands[player].push(drawnCard);log(\"\\uD83D\\uDD25 SAM ALTMAN EFFEKT: +1 Karte gezogen (\".concat(drawnCard.name,\") - KI-Initiative\"));}}// +1 AP zurück\nnewState.actionPoints[player]+=1;log(\"\\uD83D\\uDD25 SAM ALTMAN EFFEKT: +1 AP zur\\xFCck (\".concat(newState.actionPoints[player]-1,\" \\u2192 \").concat(newState.actionPoints[player],\") - KI-Initiative\"));}return newState;}// 3) Öffentlichkeit (Public)\nif(typeStr==='öffentlichkeitskarte'||typeStr==='oeffentlichkeitskarte'||typeStr==='öffentlichkeit'||typeStr==='public'){if(newState.board[player].innen.length<5){var _tag2;const innenArray=[...newState.board[player].innen,playedCard];const playerBoardCloned=_objectSpread(_objectSpread({},newState.board[player]),{},{innen:innenArray});newState.board=_objectSpread(_objectSpread({},newState.board),{},{[player]:playerBoardCloned});log(\"P\".concat(player,\" spielt \").concat(playedCard.name,\" in \\xD6ffentlichkeit\"));// Sofort Auren prüfen (z.B. JF +1, wenn JF schon liegt)\napplyAurasForPlayer(newState,player,log);// 6) Karteneffekte enqueuen + Queue auflösen\ntriggerCardEffects(newState,player,playedCard);// Queue needs array of events\nif(newState._queue&&newState._queue.length>0){resolveQueue(newState,newState._queue);newState._queue=[];}// 3) Nachdem die Karte gelegt wurde: gegnerische Traps prüfen\nconst tag=(_tag2=playedCard.tag)!==null&&_tag2!==void 0?_tag2:'';const isNGOorPlatform=['NGO','Plattform'].includes(tag);checkTrapsOnOpponentPlay(newState,player===1?2:1,playedCard.uid,isNGOorPlatform,log);// 🔥 PUBLIC CARD EFFECTS - Passive effects when played\n// Helper function to draw a card for the player\nconst drawCardForPlayer=cardName=>{if(newState.decks[player].length>0){const drawnCard=newState.decks[player].shift();if(drawnCard){newState.hands[player].push(drawnCard);log(\"\\uD83D\\uDD25 \".concat(cardName.toUpperCase(),\" EFFEKT: +1 Karte gezogen (\").concat(drawnCard.name,\")\"));return true;}}return false;};if(specCard.name==='Elon Musk'){// Effect: \"Ziehe 1 Karte. Deine erste Initiative pro Runde kostet 1 Aktionspunkt weniger.\"\ndrawCardForPlayer('Elon Musk');// 🔥 QUEUE-SYSTEM: Erste Initiative pro Runde → Refund wird über triggerCardEffects gehandhabt\n}else if(specCard.name==='Bill Gates'){// Effect: \"Ziehe 1 Karte. Deine nächste Initiative kostet 1 Aktionspunkt weniger.\"\ndrawCardForPlayer('Bill Gates');// 🔥 QUEUE-SYSTEM: Nächste Initiative → Refund wird über triggerCardEffects gehandhabt\n}else if(specCard.name==='Jeff Bezos'){// Effect: \"Ziehe 1 Karte beim Ausspielen. Wenn eine Plattform liegt: +1 Aktionspunkt.\"\ndrawCardForPlayer('Jeff Bezos');const hasPlatform=newState.board[player].innen.some(c=>c.kind==='spec'&&c.tag==='Plattform');if(hasPlatform){newState.actionPoints[player]+=1;log(\"\\uD83D\\uDD25 JEFF BEZOS: +1 AP durch Plattform-Synergie! (\".concat(newState.actionPoints[player]-1,\" \\u2192 \").concat(newState.actionPoints[player],\")\"));}}else if(specCard.name==='Warren Buffett'){// Effect: \"Ziehe 1 Karte. Bei einer Wirtschafts-Initiative: +1 Effekt.\"\ndrawCardForPlayer('Warren Buffett');// TODO: Implement \"Wirtschafts-Initiative +1 Effect\" logic\nlog(\"\\uD83D\\uDCCA WARREN BUFFETT: Bei Wirtschafts-Initiativen +1 Effekt! (TODO: Implementierung)\");}else if(specCard.name==='Gautam Adani'){// Effect: \"Ziehe 1 Karte. Bei einer Infrastruktur-Initiative: +1 Effekt.\"\ndrawCardForPlayer('Gautam Adani');// TODO: Implement \"Infrastruktur-Initiative +1 Effect\" logic\nlog(\"\\uD83D\\uDCCA GAUTAM ADANI: Bei Infrastruktur-Initiativen +1 Effekt! (TODO: Implementierung)\");}else if(specCard.name==='Zhang Yiming'){// Effect: \"Ziehe 1 Karte. Bei Medien auf dem Feld: -1 Aktionspunkt auf deine nächste Initiative.\"\ndrawCardForPlayer('Zhang Yiming');const hasMedia=newState.board[player].innen.some(c=>c.kind==='spec'&&c.tag==='Medien');if(hasMedia){// TODO: Implement \"nächste Initiative -1 AP\" logic\nlog(\"\\uD83D\\uDD25 ZHANG YIMING: N\\xE4chste Initiative kostet 1 AP weniger durch Medien-Synergie! (TODO: Implementierung)\");}}else if(specCard.name==='George Soros'){// Effect: \"+1 Aktionspunkt wenn der Gegner eine autoritäre Regierungskarte hat.\"\nconst opponent=player===1?2:1;const hasAuthoritarianCard=newState.board[opponent].aussen.some(card=>{const polCard=card;return polCard.tag==='Staatsoberhaupt'&&polCard.influence>=8;// High influence leaders\n});if(hasAuthoritarianCard){newState.actionPoints[player]+=1;log(\"\\uD83D\\uDD25 GEORGE SOROS EFFEKT: +1 AP durch autorit\\xE4re Regierung des Gegners!\");log(\"\\uD83D\\uDCCA SOROS: Aktionspunkte \".concat(newState.actionPoints[player]-1,\" \\u2192 \").concat(newState.actionPoints[player]));}else{log(\"\\uD83D\\uDCAD George Soros: Keine autorit\\xE4ren Karten beim Gegner - Effekt nicht ausgel\\xF6st\");}}// 🔗 NGO-Synergie: Wenn eine NGO gelegt wird und Joschka Fischer liegt, erhält P${player} +1 Einfluss (Rundenauswertung)\nif(specCard.tag==='NGO'){const hasJoschka=newState.board[player].aussen.some(c=>c.kind==='pol'&&c.name==='Joschka Fischer'&&!c.deactivated);if(hasJoschka){log(\"\\uD83D\\uDD25\\uD83D\\uDD25\\uD83D\\uDD25 SYNERGIE AKTIVIERT! \\uD83D\\uDD25\\uD83D\\uDD25\\uD83D\\uDD25 Joschka Fischer + \".concat(playedCard.name,\"[NGO] \\u2192 +1 Einfluss bei Rundenauswertung\"));}}}else{log(\"\\u274C ERROR: Lane full - \\xD6ffentlichkeit ist voll (5/5)\");}// 🔥 AP-REFUNDS nach dem Kartenspielen anwenden\napplyApRefundsAfterPlay(newState,player,selectedCard);return newState;}// 4) Default: Traps/Interventions\n// Falls \"Boykott-Kampagne\" als Trap gelegt wird\nif(isBoycottTrap(playedCard)){registerTrap(newState,player,playedCard,log);// NICHT sofort checken – sie wartet auf den Gegner\nreturn newState;}newState.traps[player]=[...newState.traps[player],playedCard];log(\"P\".concat(player,\" spielt \").concat(playedCard.name,\" als \").concat(specCard.type));// 6) Karteneffekte enqueuen + Queue auflösen\ntriggerCardEffects(newState,player,playedCard);// Queue needs array of events\nif(newState._queue&&newState._queue.length>0){resolveQueue(newState,newState._queue);newState._queue=[];}// 🔥 AP-REFUNDS nach dem Kartenspielen anwenden\napplyApRefundsAfterPlay(newState,player,selectedCard);return newState;}// 6) Karteneffekte enqueuen + Queue auflösen (fallback für unbekannte Kartentypen)\ntriggerCardEffects(newState,player,selectedCard);// Queue needs array of events\nif(newState._queue&&newState._queue.length>0){resolveQueue(newState,newState._queue);newState._queue=[];}// 🔥 AP-REFUNDS nach dem Kartenspielen anwenden\napplyApRefundsAfterPlay(newState,player,selectedCard);// Kein Aktionenlimit mehr → automatischer Turnwechsel entfällt\nreturn newState;});},[setGameState,log]);const activateInstantInitiative=useCallback(player=>{setGameState(prev=>{if(prev.current!==player){log(\"\\u274C ERROR: Not player turn - Current: \".concat(prev.current,\", Attempted: \").concat(player));return prev;}const instantCard=prev.board[player].sofort[0];if(!instantCard){log(\"\\u274C ERROR: No Sofort-Initiative in slot for player \".concat(player));return prev;}const newState=_objectSpread({},prev);// 1) Normale Karten-Effekte der Sofort-Karte feuern\ntriggerCardEffects(newState,player,instantCard);// 2) Karte nach Aktivierung in den Ablagestapel\nconst[played]=newState.board[player].sofort.splice(0,1);newState.discard.push(played);// 3) Queue auflösen\n// Queue needs array of events\nif(newState._queue&&newState._queue.length>0){resolveQueue(newState,newState._queue);newState._queue=[];}return newState;});},[setGameState,log]);const endTurn=useCallback(function(){let reason=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'button_end_turn';setGameState(prev=>{// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst current=prev.current;// 1) Schon im Abschluss? -> Nichts tun (Idempotenz)\nif(prev.isEndingTurn){log('🔁 Zugabschluss läuft bereits – warte auf Queue.');return prev;}const newState=_objectSpread(_objectSpread({},prev),{},{isEndingTurn:true});// 2) Hängen noch Effekte in der Queue? -> Auflösen lassen\nif(newState._effectQueue&&newState._effectQueue.length>0){log('⏳ Effekte werden noch aufgelöst – Zugwechsel folgt automatisch.');resolveQueue(newState,[...newState._effectQueue]);newState._effectQueue=[];// Nach Queue-Auflösung: Wenn Flag noch gesetzt, Zug beenden\nif(newState.isEndingTurn){return reallyEndTurn(newState,log);}return newState;}// 3) Keine Effekte mehr -> sofort beenden\nreturn reallyEndTurn(newState,log);});},[setGameState,log]);// Legacy: nextTurn als Alias für endTurn für Kompatibilität\nconst nextTurn=useCallback(()=>{endTurn('auto');},[endTurn]);const passTurn=useCallback(player=>{console.log(\"\\uD83D\\uDD27 DEBUG: passTurn called for player \".concat(player));setGameState(prev=>{console.log(\"\\uD83D\\uDD27 DEBUG: passTurn setState - current: \".concat(prev.current,\", player: \").concat(player));if(prev.current!==player){console.log(\"\\uD83D\\uDD27 DEBUG: Wrong player turn - current: \".concat(prev.current,\", attempted: \").concat(player));return prev;}const newState=_objectSpread(_objectSpread({},prev),{},{passed:_objectSpread(_objectSpread({},prev.passed),{},{[player]:true})});console.log(\"\\uD83D\\uDD27 DEBUG: Pass status updated - P1: \".concat(newState.passed[1],\", P2: \").concat(newState.passed[2]));log(\"\\uD83D\\uDEAB Spieler \".concat(player,\" passt.\"));// ❗ Kein Nachziehen bei Pass:\n// Der passierende Spieler kommt in dieser Runde nicht mehr dran.\n// Die nächste Runde startet ohnehin mit 5 neuen Handkarten.\n// Check if round should end (both players passed)\nconst shouldEndRound=checkRoundEnd(newState);console.log(\"\\uD83D\\uDD27 DEBUG: Should end round? \".concat(shouldEndRound));if(shouldEndRound){log(\"\\uD83C\\uDFC1 Runde \".concat(newState.round,\" wird beendet und ausgewertet.\"));return resolveRound(newState,log);}else{// Switch turn to other player for their final chance\nconst otherPlayer=player===1?2:1;console.log(\"\\uD83D\\uDD27 DEBUG: Switching to other player \".concat(otherPlayer,\", has passed: \").concat(newState.passed[otherPlayer]));// Only switch if other player hasn't passed yet\nif(!newState.passed[otherPlayer]){newState.current=otherPlayer;newState.actionPoints=_objectSpread(_objectSpread({},newState.actionPoints),{},{[otherPlayer]:2});newState.actionsUsed=_objectSpread(_objectSpread({},newState.actionsUsed),{},{[otherPlayer]:0});// Apply new start-of-turn hooks\napplyStartOfTurnFlags(newState,otherPlayer,log);// 🔥 CLUSTER 3: Auren-Flags beim Zugstart neu berechnen\nrecomputeAuraFlags(newState);log(\"\\u23ED\\uFE0F Spieler \".concat(otherPlayer,\" hat noch einen letzten Zug.\"));console.log(\"\\uD83D\\uDD27 DEBUG: Turn switched to player \".concat(otherPlayer));}else{// Both players have passed now, end round\nlog(\"\\uD83C\\uDFC1 Runde \".concat(newState.round,\" wird beendet (beide Spieler haben gepasst).\"));return resolveRound(newState,log);}}return newState;});},[setGameState,log]);return{startMatchWithDecks,startMatchVsAI,playCard,activateInstantInitiative,passTurn,nextTurn,endTurn};}","map":{"version":3,"names":["useCallback","createDefaultEffectFlags","buildDeckFromEntries","sumGovernmentInfluenceWithAuras","PRESET_DECKS","getCardActionPointCost","applyApRefundsAfterPlay","getNetApCost","canPlayCard","triggerCardEffects","ensureTestBaselineAP","resolveQueue","applyStartOfTurnFlags","checkTrapsOnOpponentPlay","registerTrap","isSystemrelevant","grantOneTimeProtection","isBoycottTrap","recomputeAuraFlags","emptyBoard","other","p","ensureFlags","s","effectFlags","_objectSpread","pickLane","c","tag","kind","isCardPlayableNow","state","player","card","deactivated","lane","board","length","t","String","type","toLowerCase","innen","slot","permanentSlots","hasPlayableZeroCost","hands","cost","applyAurasForPlayer","log","hasNgo","some","newAussen","aussen","map","pol","baseInfluence","influence","prev","bonus","name","effect","concat","checkRoundEnd","gameState","result","passed","console","drawCardsFromDeck","count","deck","decks","drawnCards","splice","Math","min","reallyEndTurn","current","isEndingTurn","drawnCard","shift","push","shouldEndRound","round","resolveRound","newCurrent","actionPoints","actionsUsed","p1Influence","p2Influence","roundWinner","cardsToDiscard","government","public","sofort","newP1Hand","newP2Hand","newRoundsWon","roundsWon","p1Wins","p2Wins","gameWinner","newState","slice","discard","useGameActions","setGameState","startMatchWithDecks","p1DeckEntries","p2DeckEntries","p1Cards","p2Cards","p1NgoCarten","filter","p1PlatformCards","p1JoschaCards","p1PublicCards","join","d1","d2","h1","h2","traps","shields","Set","activeRefresh","startMatchVsAI","presetKey","arguments","undefined","playCard","handIndex","_prev$actionsUsed$pla","_type","hand","i","ngoCards","platformCards","selectedCard","refund","net","prevAp","prevAct","max","ef","govRefundAvailable","isInstant","test","initiativeRefund","initiativeDiscount","newHand","playedCard","currentBoard","publicCardsOnBoard","_tag","polCard","targetLane","laneArray","playerBoardCloned","isNGOorPlatform","includes","uid","_queue","opponent","opponentBoard","romanAbramovich","find","regierungKarten","öffentlichkeitKarten","joschaFischer","specCard","typeStr","isInitiative","ownBoard","candidates","target","slotType","_newState$permanentSl","_newState$effectFlags","effectKey","_newState$board$playe","msg","markZuckerberg","markZuckerbergUsed","samAltman","_tag2","innenArray","drawCardForPlayer","cardName","toUpperCase","hasPlatform","hasMedia","hasAuthoritarianCard","hasJoschka","activateInstantInitiative","instantCard","played","endTurn","reason","_effectQueue","nextTurn","passTurn","otherPlayer"],"sources":["C:/Users/skank/Videos/Cards/Milchcards/src/hooks/useGameActions.ts"],"sourcesContent":["import { useCallback } from 'react';\r\nimport { GameState, Card, Player, BuilderEntry, PoliticianCard } from '../types/game';\r\nimport { createDefaultEffectFlags } from '../types/game';\r\nimport { buildDeckFromEntries, sumGovernmentInfluenceWithAuras } from '../utils/gameUtils';\r\nimport { PRESET_DECKS } from '../data/gameData';\r\nimport { getCardActionPointCost, applyApRefundsAfterPlay, getNetApCost, canPlayCard, isInitiativeCard, isGovernmentCard } from '../utils/ap';\r\nimport { triggerCardEffects } from '../effects/cards';\r\nimport { ensureTestBaselineAP } from '../utils/testCompat';\r\nimport { resolveQueue } from '../utils/queue';\r\nimport { applyStartOfTurnFlags } from '../utils/startOfTurnHooks';\r\nimport { checkTrapsOnOpponentPlay, registerTrap, isSystemrelevant, grantOneTimeProtection, isBoycottTrap } from '../utils/traps';\r\nimport { recomputeAuraFlags } from '../state/effects';\r\nimport { activateInstantInitiative as activateInstantInitiativeRuntime } from '../state/instantRuntime';\r\nimport { isInstantInitiative } from '../utils/initiative';\r\nimport { emptyBoard } from '../state/board';\r\n\r\n// Helper function for getting the other player\r\nconst other = (p: Player): Player => (p === 1 ? 2 : 1) as Player;\r\n\r\n// Hilfsfunktion: stellt sicher, dass effectFlags vorhanden sind\r\nconst ensureFlags = (s: GameState, p: Player) => {\r\n  if (!s.effectFlags) {\r\n    (s as any).effectFlags = { 1: createDefaultEffectFlags(), 2: createDefaultEffectFlags() };\r\n  } else {\r\n    s.effectFlags[p] = { ...createDefaultEffectFlags(), ...s.effectFlags[p] };\r\n  }\r\n};\r\n\r\n// Lane-Heuristik wie in playCard\r\nconst pickLane = (c: Card): 'innen'|'aussen' => {\r\n  const tag = (c as any).tag;\r\n  if (c.kind === 'pol' && (tag === 'Staatsoberhaupt' || tag === 'Regierungschef' || tag === 'Diplomat')) return 'aussen';\r\n  return 'innen';\r\n};\r\n\r\nconst isCardPlayableNow = (state: GameState, player: Player, card: Card): boolean => {\r\n  if ((card as any).deactivated) return false;\r\n\r\n  if (card.kind === 'pol') {\r\n    const lane = pickLane(card);\r\n    return state.board[player][lane].length < 5;\r\n  }\r\n\r\n  if (card.kind === 'spec') {\r\n    const t = String((card as any).type || '').toLowerCase();\r\n    if (t === 'öffentlichkeitskarte' || t === 'oeffentlichkeitskarte' || t === 'public') {\r\n      return state.board[player].innen.length < 5;\r\n    }\r\n    if (t === 'dauerhaft-initiative') {\r\n      const slot = 'government'; // wie bei dir „simplified\"\r\n      return !state.permanentSlots[player][slot];\r\n    }\r\n    // sonst: Fallen/Interventionen – aktuell immer erlaubt\r\n    return true;\r\n  }\r\n\r\n  return false;\r\n};\r\n\r\nexport const hasPlayableZeroCost = (state: GameState, player: Player): boolean => {\r\n  for (const c of state.hands[player]) {\r\n    const { cost } = getCardActionPointCost(state, player, c);\r\n    if (cost === 0 && isCardPlayableNow(state, player, c)) return true;\r\n  }\r\n  return false;\r\n};\r\n\r\n// Helper function to apply auras for a player (instant updates for Joschka Fischer + NGO synergy)\r\nfunction applyAurasForPlayer(state: GameState, player: Player, log?: (msg: string) => void) {\r\n  const board = state.board[player];\r\n  const hasNgo = board.innen.some(c =>\r\n    c.kind === 'spec' &&\r\n    (c as any).type === 'Öffentlichkeitskarte' &&\r\n    (c as any).tag === 'NGO' &&\r\n    !(c as any).deactivated\r\n  );\r\n\r\n  const newAussen = board.aussen.map(card => {\r\n    if (card.kind !== 'pol') return card;\r\n    const pol: any = { ...card };\r\n    if (pol.baseInfluence == null) pol.baseInfluence = pol.influence;\r\n    const prev = pol.influence as number;\r\n\r\n    let bonus = 0;\r\n    if (!pol.deactivated && pol.name === 'Joschka Fischer' && pol.effect === 'ngo_boost' && hasNgo) {\r\n      bonus += 1;\r\n    }\r\n    pol.influence = (pol.baseInfluence as number) + bonus;\r\n    if (log && pol.influence > prev) log(`PASSIV: ${pol.name} +${pol.influence - prev} I (jetzt ${pol.influence}).`);\r\n    return pol;\r\n  });\r\n\r\n  state.board = {\r\n    ...state.board,\r\n    [player]: { ...state.board[player], aussen: newAussen },\r\n  } as any;\r\n}\r\n\r\n\r\n\r\n// Helper function to check if round should end\r\nfunction checkRoundEnd(gameState: GameState): boolean {\r\n  // Round ends if both players have passed\r\n  const result = gameState.passed[1] && gameState.passed[2];\r\n  console.log(`🔧 DEBUG: checkRoundEnd - P1 passed: ${gameState.passed[1]}, P2 passed: ${gameState.passed[2]}, result: ${result}`);\r\n  return result;\r\n}\r\n\r\n// Helper function to draw cards from deck\r\nfunction drawCardsFromDeck(gameState: GameState, player: Player, count: number): Card[] {\r\n  const deck = [...gameState.decks[player]];\r\n  const drawnCards = deck.splice(0, Math.min(count, deck.length));\r\n  return drawnCards;\r\n}\r\n\r\n// Helper function to really end a turn (extracted from nextTurn logic)\r\nfunction reallyEndTurn(gameState: GameState, log: (msg: string) => void): GameState {\r\n  const current = gameState.current;\r\n\r\n  // Flag zurücksetzen - Zug-Ende wird jetzt wirklich durchgeführt\r\n  gameState.isEndingTurn = false;\r\n\r\n  // ✅ Karte nachziehen am Ende eines Zugs (nur wenn NICHT \"pass\")\r\n  if (!gameState.passed[current]) {\r\n    const drawnCard = gameState.decks[current].shift();\r\n    if (drawnCard) {\r\n      gameState.hands[current].push(drawnCard);\r\n      log(`🔥 Zug-Ende: +1 Karte gezogen (${drawnCard.name})`);\r\n    }\r\n  } else {\r\n    log(`⏭️ P${current} hat gepasst – kein Nachziehen.`);\r\n  }\r\n\r\n  // Check if round should end\r\n  const shouldEndRound = checkRoundEnd(gameState);\r\n  if (shouldEndRound) {\r\n    log(`🏁 Runde ${gameState.round} wird beendet (Zug-Ende).`);\r\n    return resolveRound(gameState, log);\r\n  }\r\n\r\n  // Spielerwechsel + AP/Actions reset\r\n  const newCurrent: Player = current === 1 ? 2 : 1;\r\n  gameState.current = newCurrent;\r\n  gameState.actionPoints = { ...gameState.actionPoints, [newCurrent]: 2 };\r\n  gameState.actionsUsed = { ...gameState.actionsUsed, [newCurrent]: 0 };\r\n  gameState.passed = { ...gameState.passed, [newCurrent]: false };\r\n\r\n            // Apply new start-of-turn hooks\r\n          applyStartOfTurnFlags(gameState, newCurrent, log);\r\n\r\n        // 🔥 CLUSTER 3: Auren-Flags beim Zugstart neu berechnen\r\n        recomputeAuraFlags(gameState);\r\n\r\n  // Reset turn-bezogener Flag-Nutzungen (handled in applyStartOfTurnFlags)\r\n\r\n  log(`🔄 Zug-Ende: Spieler ${newCurrent} ist am Zug (2 AP verfügbar)`);\r\n\r\n  return gameState;\r\n}\r\n\r\n// Helper function to resolve round and start new one\r\nfunction resolveRound(gameState: GameState, log: (msg: string) => void): GameState {\r\n  // Calculate influence for both players\r\n  const p1Influence = sumGovernmentInfluenceWithAuras(gameState, 1);\r\n  const p2Influence = sumGovernmentInfluenceWithAuras(gameState, 2);\r\n\r\n  log(`📊 Rundenauswertung: P1 ${p1Influence} Einfluss vs P2 ${p2Influence} Einfluss`);\r\n\r\n  // Determine winner\r\n  let roundWinner: Player;\r\n  if (p1Influence > p2Influence) {\r\n    roundWinner = 1;\r\n    log(`🏆 Spieler 1 gewinnt die Runde! (${p1Influence} > ${p2Influence})`);\r\n  } else if (p2Influence > p1Influence) {\r\n    roundWinner = 2;\r\n    log(`🏆 Spieler 2 gewinnt die Runde! (${p2Influence} > ${p1Influence})`);\r\n  } else {\r\n    // Tie - current player wins\r\n    roundWinner = gameState.current;\r\n    log(`🤝 Unentschieden! Spieler ${roundWinner} gewinnt als aktiver Spieler.`);\r\n  }\r\n\r\n  // Collect all cards to move to discard\r\n  const cardsToDiscard: Card[] = [\r\n    ...gameState.board[1].innen,\r\n    ...gameState.board[1].aussen,\r\n    ...gameState.board[2].innen,\r\n    ...gameState.board[2].aussen,\r\n    ...(gameState.permanentSlots[1].government ? [gameState.permanentSlots[1].government] : []),\r\n    ...(gameState.permanentSlots[1].public ? [gameState.permanentSlots[1].public] : []),\r\n    ...(gameState.permanentSlots[2].government ? [gameState.permanentSlots[2].government] : []),\r\n    ...(gameState.permanentSlots[2].public ? [gameState.permanentSlots[2].public] : []),\r\n    ...gameState.board[1].sofort,\r\n    ...gameState.board[2].sofort\r\n  ];\r\n\r\n  // Draw 5 new cards for each player\r\n  const newP1Hand = drawCardsFromDeck(gameState, 1, 5);\r\n  const newP2Hand = drawCardsFromDeck(gameState, 2, 5);\r\n\r\n  // Calculate new rounds won\r\n  const newRoundsWon = {\r\n    ...gameState.roundsWon,\r\n    [roundWinner]: gameState.roundsWon[roundWinner] + 1\r\n  };\r\n\r\n  // Check if game should end (Best of 3: first to 2 wins)\r\n  const p1Wins = newRoundsWon[1];\r\n  const p2Wins = newRoundsWon[2];\r\n\r\n  if (p1Wins >= 2 || p2Wins >= 2) {\r\n    const gameWinner = p1Wins >= 2 ? 1 : 2;\r\n    log(`🏆🎉 SPIEL BEENDET! Spieler ${gameWinner} gewinnt das Match! (${p1Wins}-${p2Wins})`);\r\n    log(`🔥 Gesamtergebnis: Player ${gameWinner} ist der Sieger!`);\r\n\r\n    // Return final state with game winner\r\n    return {\r\n      ...gameState,\r\n      roundsWon: newRoundsWon,\r\n      gameWinner,\r\n      // Keep current board state for final display\r\n      passed: { 1: true, 2: true }, // Both passed to indicate game end\r\n    };\r\n  }\r\n\r\n  // Create new state for next round\r\n  const newState: GameState = {\r\n    ...gameState,\r\n    round: gameState.round + 1,\r\n    current: roundWinner, // Winner starts next round\r\n    passed: { 1: false, 2: false }, // Reset pass status\r\n    actionPoints: { 1: 2, 2: 2 }, // Reset AP\r\n    actionsUsed: { 1: 0, 2: 0 }, // Reset actions\r\n    roundsWon: newRoundsWon,\r\n    effectFlags: {\r\n      1: createDefaultEffectFlags(),\r\n      2: createDefaultEffectFlags()\r\n    },\r\n    // Clear all board positions\r\n    board: emptyBoard(),\r\n    // Clear permanent slots\r\n    permanentSlots: {\r\n      1: { government: null, public: null },\r\n      2: { government: null, public: null }\r\n    },\r\n    // instantSlot wird nicht mehr verwendet - Sofort-Initiativen gehen in board[player].sofort\r\n    // New hands with 5 cards each\r\n    hands: {\r\n      1: newP1Hand,\r\n      2: newP2Hand\r\n    },\r\n    // Update decks (cards were removed during drawing)\r\n    decks: {\r\n      1: gameState.decks[1].slice(newP1Hand.length),\r\n      2: gameState.decks[2].slice(newP2Hand.length)\r\n    },\r\n    // Update discard pile\r\n    discard: [...gameState.discard, ...cardsToDiscard]\r\n  };\r\n\r\n  log(`🆕 Runde ${newState.round} startet! Spieler ${roundWinner} beginnt. (Rundenstand: P1 ${newState.roundsWon[1]} - P2 ${newState.roundsWon[2]})`);\r\n  log(`🃏 Beide Spieler erhalten 5 neue Handkarten.`);\r\n\r\n  return newState;\r\n}\r\n\r\nexport function useGameActions(\r\n  gameState: GameState,\r\n  setGameState: React.Dispatch<React.SetStateAction<GameState>>,\r\n  log: (msg: string) => void\r\n) {\r\n  const startMatchWithDecks = useCallback((p1DeckEntries: BuilderEntry[], p2DeckEntries: BuilderEntry[]) => {\r\n    const p1Cards = buildDeckFromEntries(p1DeckEntries);\r\n    const p2Cards = buildDeckFromEntries(p2DeckEntries);\r\n\r\n        // Debug: Log deck composition with detailed tag analysis\r\n    const p1NgoCarten = p1Cards.filter(c => (c as any).tag === 'NGO');\r\n    const p1PlatformCards = p1Cards.filter(c => (c as any).tag === 'Plattform');\r\n    const p1JoschaCards = p1Cards.filter(c => (c as any).effect === 'ngo_boost');\r\n    const p1PublicCards = p1Cards.filter(c => c.kind === 'spec' && (c as any).type === 'Öffentlichkeitskarte');\r\n\r\n    log(`🔍 DECK DEBUG P1: ${p1Cards.length} Karten total`);\r\n    log(`🧪 P1 Public Cards: ${p1PublicCards.map(c => `${c.name}${(c as any).tag ? `[${(c as any).tag}]` : ''}`).join(', ')}`);\r\n    log(`🌱 P1 NGO-Karten: ${p1NgoCarten.length > 0 ? p1NgoCarten.map(c => c.name).join(', ') : 'Keine'}`);\r\n    log(`💻 P1 Plattform-Karten: ${p1PlatformCards.length > 0 ? p1PlatformCards.map(c => c.name).join(', ') : 'Keine'}`);\r\n    log(`🎯 JOSCHKA FISCHER: ${p1JoschaCards.length > 0 ? '✅ IM DECK' : '❌ NICHT IM DECK'}`);\r\n\r\n    const d1 = [...p1Cards];\r\n    const d2 = [...p2Cards];\r\n    const h1 = d1.splice(0, Math.min(5, d1.length));\r\n    const h2 = d2.splice(0, Math.min(5, d2.length));\r\n\r\n    setGameState({\r\n      ...gameState,\r\n      round: 1,\r\n      current: 1,\r\n      passed: { 1: false, 2: false },\r\n      decks: { 1: d1, 2: d2 },\r\n      hands: { 1: h1, 2: h2 },\r\n      board: { 1: { innen: [], aussen: [], sofort: [] }, 2: { innen: [], aussen: [], sofort: [] } },\r\n      traps: { 1: [], 2: [] },\r\n      permanentSlots: {\r\n        1: { government: null, public: null },\r\n        2: { government: null, public: null },\r\n      },\r\n      // instantSlot wird nicht mehr verwendet - Sofort-Initiativen gehen in board[player].sofort\r\n      discard: [],\r\n      shields: new Set(), // Set<UID>\r\n      effectFlags: {\r\n        1: createDefaultEffectFlags(),\r\n        2: createDefaultEffectFlags()\r\n      },\r\n      log: [\r\n        `Match gestartet. P1 und P2 erhalten je ${h1.length}/${h2.length} Startkarten.`,\r\n        `🔍 DECK DEBUG P1: ${p1Cards.length} Karten total`,\r\n        `🧪 P1 Public Cards: ${p1PublicCards.map(c => `${c.name}${(c as any).tag ? `[${(c as any).tag}]` : ''}`).join(', ')}`,\r\n        `🌱 P1 NGO-Karten: ${p1NgoCarten.length > 0 ? p1NgoCarten.map(c => c.name).join(', ') : 'Keine'}`,\r\n        `💻 P1 Plattform-Karten: ${p1PlatformCards.length > 0 ? p1PlatformCards.map(c => c.name).join(', ') : 'Keine'}`,\r\n        `🎯 JOSCHKA FISCHER: ${p1JoschaCards.length > 0 ? '✅ IM DECK' : '❌ NICHT IM DECK'}`,\r\n        `📋 INITIAL BOARD P1: Regierung=[] | Öffentlichkeit=[]`,\r\n        `📋 INITIAL BOARD P2: Regierung=[] | Öffentlichkeit=[]`,\r\n        `🏠 PERMANENT SLOTS: Alle leer`\r\n      ],\r\n      activeRefresh: { 1: 0, 2: 0 },\r\n    });\r\n  }, [gameState, setGameState, log]);\r\n\r\n  const startMatchVsAI = useCallback((p1DeckEntries: BuilderEntry[], presetKey: keyof typeof PRESET_DECKS = 'AUTORITAERER_REALIST') => {\r\n    const p2DeckEntries = PRESET_DECKS[presetKey] as BuilderEntry[];\r\n    startMatchWithDecks(p1DeckEntries, p2DeckEntries);\r\n  }, [startMatchWithDecks]);\r\n\r\n  const playCard = useCallback((player: Player, handIndex: number, lane?: 'innen' | 'aussen') => {\r\n    setGameState(prev => {\r\n      // Test-only baseline fix – ensures AP=5 at game start inside test runner\r\n      ensureTestBaselineAP(prev);\r\n\r\n      // Validate input parameters\r\n      if (prev.current !== player) {\r\n        log(`❌ ERROR: Not player turn - Current: ${prev.current}, Attempted: ${player}`);\r\n        return prev;\r\n      }\r\n\r\n      const hand = prev.hands[player];\r\n      if (handIndex < 0 || handIndex >= hand.length) {\r\n        log(`❌ ERROR: Invalid hand index - Index: ${handIndex}, Hand length: ${hand.length}`);\r\n        return prev;\r\n      }\r\n\r\n      // Debug: Log current hand contents with detailed tag info\r\n      log(`🔍 HAND DEBUG P${player}: ${hand.map((c, i) => `${i}:${c.name}${(c as any).tag ? `[${(c as any).tag}]` : ''}`).join(', ')}`);\r\n      const ngoCards = hand.filter(c => (c as any).tag === 'NGO');\r\n      const platformCards = hand.filter(c => (c as any).tag === 'Plattform');\r\n      if (ngoCards.length > 0) {\r\n        log(`🌱 NGO-Karten in Hand P${player}: ${ngoCards.map(c => c.name).join(', ')}`);\r\n      }\r\n      if (platformCards.length > 0) {\r\n        log(`💻 Plattform-Karten in Hand P${player}: ${platformCards.map(c => c.name).join(', ')}`);\r\n      }\r\n\r\n      const selectedCard = hand[handIndex];\r\n      if (!canPlayCard(prev, player, selectedCard)) {\r\n        log('🚫 Kann Karte nicht spielen (Aktionslimit & nicht 0-AP).');\r\n        return prev;\r\n      }\r\n\r\n      const { cost, refund, net } = getNetApCost(prev, player, selectedCard);\r\n      const prevAp = prev.actionPoints[player];\r\n      const prevAct = prev.actionsUsed[player] ?? 0;\r\n\r\n      const newState = { ...prev };\r\n\r\n      // AP abbuchen & refund gutschreiben\r\n      newState.actionPoints[player] = Math.max(0, newState.actionPoints[player] - cost + refund);\r\n\r\n      // Action-Zähler: nur wenn net > 0\r\n      if (net > 0) {\r\n        newState.actionsUsed[player] += 1;\r\n        log(`💳 Kosten verbucht: AP ${prevAp}→${newState.actionPoints[player]} | Aktionen ${prevAct}→${newState.actionsUsed[player]}`);\r\n      } else {\r\n        log(`🆓 Netto-0-Zug: −${cost} AP (+${refund} Refund) → keine Aktion verbraucht.`);\r\n      }\r\n\r\n      // Flags KONSUMIEREN (einheitlich, NUR HIER!)\r\n      ensureFlags(newState, player);\r\n      const ef = newState.effectFlags[player];\r\n\r\n      // Regierung: Refund einmalig pro Zug\r\n      if (selectedCard.kind === 'pol' && ef.govRefundAvailable) {\r\n        ef.govRefundAvailable = false;\r\n      }\r\n\r\n      // Initiative: pro Karte je 1 Refund & 1 Discount abbauen, falls vorhanden\r\n      const isInstant = (selectedCard.kind === 'spec' && /Sofort-?Initiative/i.test((selectedCard as any).type ?? ''));\r\n      if (isInstant) {\r\n        if (ef.initiativeRefund > 0) ef.initiativeRefund -= 1;\r\n        if (ef.initiativeDiscount > 0) ef.initiativeDiscount -= 1;\r\n      }\r\n\r\n      // Remove card from hand\r\n      const newHand = [...newState.hands[player]];\r\n      const [playedCard] = newHand.splice(handIndex, 1);\r\n      newState.hands = { ...newState.hands, [player]: newHand };\r\n\r\n      // 🔧 CLUSTER 3 DEBUG: Zeige jede gespielte Karte\r\n      log(`🔧 CLUSTER 3 GLOBAL DEBUG: P${player} spielt ${(playedCard as any).name} (${playedCard.kind}) - Type: ${(playedCard as any).type || 'KEIN TYPE'}`);\r\n\r\n      // 🔧 CLUSTER 3 DEBUG: Zeige aktuelles Board\r\n      const currentBoard = newState.board[player];\r\n      const publicCardsOnBoard = currentBoard.innen.filter(card => card.kind === 'spec');\r\n      log(`🔧 CLUSTER 3 GLOBAL DEBUG: Öffentlichkeitskarten auf dem Feld: ${publicCardsOnBoard.map(c => (c as any).name).join(', ')}`);\r\n\r\n      // Jennifer Doudna check removed - not needed for current game logic\r\n\r\n      // Handle different card types\r\n      if (playedCard.kind === 'pol') {\r\n        const polCard = playedCard as any;\r\n        const targetLane = lane || (polCard.tag === 'Staatsoberhaupt' || polCard.tag === 'Regierungschef' || polCard.tag === 'Diplomat' ? 'aussen' : 'innen');\r\n\r\n        if (newState.board[player][targetLane].length >= 5) {\r\n          log(`❌ ERROR: Lane full - Lane: ${targetLane}, Current: ${newState.board[player][targetLane].length}/5`);\r\n          return prev;\r\n        }\r\n\r\n        // Add to board (immutable clone to avoid accidental double references)\r\n        const laneArray = [...newState.board[player][targetLane], playedCard];\r\n        const playerBoardCloned = { ...newState.board[player], [targetLane]: laneArray } as any;\r\n        newState.board = { ...newState.board, [player]: playerBoardCloned } as any;\r\n        log(`🃏 Player ${player}: ${playedCard.name} gespielt in ${targetLane === 'aussen' ? 'Regierung' : 'Öffentlichkeit'}`);\r\n\r\n        // 3) Nachdem die Karte gelegt wurde: gegnerische Traps prüfen\r\n        const tag = (playedCard as any).tag ?? '';\r\n        const isNGOorPlatform = ['NGO', 'Plattform'].includes(tag);\r\n        checkTrapsOnOpponentPlay(newState, player === 1 ? 2 : 1, playedCard.uid, isNGOorPlatform, log);\r\n\r\n\r\n\r\n        // 👉 Erst JETZT Auren anwenden (damit +2 Basis erhalten bleibt)\r\n        applyAurasForPlayer(newState, player, log);\r\n\r\n        // 6) Karteneffekte enqueuen + Queue auflösen\r\n        triggerCardEffects(newState, player, playedCard);\r\n        // Queue needs array of events\r\n        if (newState._queue && newState._queue.length > 0) {\r\n          resolveQueue(newState, newState._queue);\r\n          newState._queue = [];\r\n        }\r\n\r\n        // 🔥 ROMAN ABRAMOVICH EFFEKT: Wenn Regierungskarte mit Einfluss ≤5 gespielt wird\r\n        if (playedCard.kind === 'pol' && (playedCard as any).influence <= 5) {\r\n          const opponent = player === 1 ? 2 : 1;\r\n          const opponentBoard = newState.board[opponent];\r\n          const romanAbramovich = opponentBoard.innen.find(card =>\r\n            card.kind === 'spec' && (card as any).name === 'Roman Abramovich'\r\n          );\r\n\r\n          if (romanAbramovich) {\r\n            // Ziehe eine Karte für den Gegner\r\n            if (newState.decks[opponent].length > 0) {\r\n              const drawnCard = newState.decks[opponent].shift();\r\n              if (drawnCard) {\r\n                newState.hands[opponent].push(drawnCard);\r\n                log(`🔥 ROMAN ABRAMOVICH EFFEKT: P${opponent} zieht 1 Karte (${drawnCard.name}) - Regierungskarte mit Einfluss ≤5 gespielt`);\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        // 🔍 BOARD DEBUG: Zeige aktuelles Board nach dem Spielen\r\n        const currentBoard = newState.board[player];\r\n        const regierungKarten = currentBoard.aussen.map(c => `${c.name}[${c.kind === 'pol' ? (c as any).influence + 'I' : 'S'}]`);\r\n        const öffentlichkeitKarten = currentBoard.innen.map(c => `${c.name}[${c.kind === 'spec' ? (c as any).tag || 'S' : 'P'}]`);\r\n        log(`📋 P${player} BOARD: Regierung=[${regierungKarten.join(', ')}] | Öffentlichkeit=[${öffentlichkeitKarten.join(', ')}]`);\r\n\r\n                // 🔥 JOSCHKA FISCHER NGO-EFFEKT: Jetzt als kontinuierlicher Aura-Effekt in sumRowWithAuras implementiert\r\n        log(`🔍 DEBUG: Karte gespielt - Name: ${playedCard.name}, Tag: ${(playedCard as any).tag || 'Kein Tag'}, Lane: ${targetLane}, Kind: ${playedCard.kind}`);\r\n\r\n        if ((playedCard as any).tag === 'NGO') {\r\n          log(`🔍 NGO-Karte gespielt: ${playedCard.name} [NGO] - Kontinuierliche Aura-Effekte werden bei Rundenauswertung berechnet`);\r\n\r\n          // 🎯 SOFORTIGE SYNERGIE-PRÜFUNG: Joschka Fischer + NGO\r\n          const joschaFischer = currentBoard.aussen.find(card =>\r\n            card.kind === 'pol' && (card as any).effect === 'ngo_boost'\r\n          );\r\n\r\n          if (joschaFischer) {\r\n            log(`🔥🔥🔥 SYNERGIE AKTIVIERT! 🔥🔥🔥 Joschka Fischer + ${playedCard.name}[NGO] → +1 Einfluss bei Rundenauswertung`);\r\n          }\r\n        }\r\n\r\n      } else if (playedCard.kind === 'spec') {\r\n        const specCard = playedCard as any;\r\n        const typeStr = String(specCard.type || '').toLowerCase();\r\n        const isInitiative = /initiative/.test(typeStr); // matcht \"Initiative\", \"Sofort-Initiative\", etc.\r\n\r\n                  // 1) Falls es eine \"Systemrelevant\" ist (sofortiger Buff auf letzte eigene Regierungskarte)\r\n        if (isSystemrelevant(playedCard)) {\r\n          const ownBoard = newState.board[player];\r\n          const candidates = [...ownBoard.aussen, ...ownBoard.innen].filter(c => c.kind === 'pol') as PoliticianCard[];\r\n          const target = candidates[candidates.length - 1]; // letzte eigene Regierungskarte\r\n          if (target) {\r\n            grantOneTimeProtection(target, log);\r\n          } else {\r\n            log('🛈 Systemrelevant: Keine eigene Regierungskarte im Spiel – Effekt verpufft.');\r\n          }\r\n          // danach die Spezialkarte normal entsorgen\r\n          newState.discard.push(playedCard);\r\n          return newState;\r\n        }\r\n\r\n        // 1) Dauerhaft-Initiative (Ongoing)\r\n        if (typeStr.includes('dauerhaft')) {\r\n          const slotType = 'government'; // ggf. später per specCard.slot dynamisch\r\n          if (!newState.permanentSlots[player][slotType]) {\r\n            newState.permanentSlots[player][slotType] = playedCard;\r\n            log(`P${player} spielt ${playedCard.name} als Dauerhafte Initiative`);\r\n          } else {\r\n            log(`⚠️ WARN: Slot occupied - Slot ${slotType} already has ${newState.permanentSlots[player][slotType]?.name}`);\r\n          }\r\n\r\n          // 6) Karteneffekte enqueuen + Queue auflösen\r\n          triggerCardEffects(newState, player, playedCard);\r\n          // Queue needs array of events\r\n        if (newState._queue && newState._queue.length > 0) {\r\n          resolveQueue(newState, newState._queue);\r\n          newState._queue = [];\r\n        }\r\n\r\n\r\n          return newState;\r\n        }\r\n\r\n        // 2) Sofort-/Sofort-Initiativen (Instant)\r\n        if (isInitiative) {\r\n          if (!specCard.effectKey) {\r\n            log(`❌ Initiative ohne effectKey: ${specCard.name}`);\r\n          } else {\r\n            log(`🧩 INIT: ${specCard.name} [${String(specCard.effectKey)}] gespielt`);\r\n          }\r\n\r\n          // 🔧 NEU: Sofort-Initiativen werden in das sofort Array gelegt statt sofort aktiviert\r\n          if (typeStr.includes('sofort')) {\r\n            // Prüfe ob bereits eine Sofort-Initiative im Slot liegt\r\n            if (newState.board[player].sofort.length > 0) {\r\n              log(`❌ ERROR: Sofort-Initiative-Slot bereits besetzt - ${newState.board[player].sofort[0]?.name} muss erst aktiviert werden`);\r\n              // Karte zurück in die Hand\r\n              newState.hands[player] = [...newState.hands[player], playedCard];\r\n              // AP zurückgeben\r\n              newState.actionPoints[player] += net;\r\n              // Aktion rückgängig machen\r\n              if (net > 0) {\r\n                newState.actionsUsed[player] = Math.max(0, newState.actionsUsed[player] - 1);\r\n              }\r\n              return newState;\r\n            }\r\n\r\n            // Sofort-Initiative in das sofort Array legen\r\n            newState.board[player].sofort = [playedCard];\r\n            log(`🎯 P${player} legt ${playedCard.name} in Sofort-Initiative-Slot (kann später aktiviert werden)`);\r\n\r\n            // Sofort-Initiativen: auf Board.sofort legen (nicht direkt entsorgen)\r\n            if (!newState._queue) newState._queue = [];\r\n            newState._queue.push({ type: 'LOG', msg: `🔔 Sofort-Initiative bereit: ${playedCard.name} (zum Aktivieren anklicken oder Taste 'A')` });\r\n            return newState;\r\n          }\r\n\r\n          // Dauerhaft-Initiativen werden weiterhin sofort aktiviert\r\n          // Initiative in den Ablagestapel\r\n          newState.discard = [...newState.discard, playedCard];\r\n          log(`P${player} spielt Initiative: ${playedCard.name}`);\r\n\r\n          // 6) Karteneffekte enqueuen + Queue auflösen\r\n          triggerCardEffects(newState, player, playedCard);\r\n          // Queue needs array of events\r\n        if (newState._queue && newState._queue.length > 0) {\r\n          resolveQueue(newState, newState._queue);\r\n          newState._queue = [];\r\n        }\r\n\r\n          // 🔥 CLUSTER 3: Auren-Flags neu berechnen (nach Kartenspielen)\r\n          recomputeAuraFlags(newState);\r\n\r\n          // 🔥 CLUSTER 3: Ai Weiwei Bonus wird bei Aktivierung angewendet (nicht beim Spielen)\r\n\r\n          // 🔥 PASSIVE EFFEKTE NACH INITIATIVE: Mark Zuckerberg & Sam Altman\r\n\r\n          // Mark Zuckerberg: \"Nach einer Initiative: +1 Aktionspunkt zurück (einmal pro Runde)\"\r\n          const markZuckerberg = newState.board[player].innen.find(card =>\r\n            card.kind === 'spec' && (card as any).name === 'Mark Zuckerberg'\r\n          );\r\n          if (markZuckerberg && !newState.effectFlags[player]?.markZuckerbergUsed) {\r\n            newState.actionPoints[player] += 1;\r\n            newState.effectFlags[player] = { ...newState.effectFlags[player], markZuckerbergUsed: true };\r\n            log(`🔥 MARK ZUCKERBERG EFFEKT: +1 AP zurück nach Initiative (${newState.actionPoints[player] - 1} → ${newState.actionPoints[player]})`);\r\n          }\r\n\r\n          // Sam Altman: \"Bei einer KI-bezogenen Initiative: ziehe 1 Karte + 1 Aktionspunkt zurück\"\r\n          const samAltman = newState.board[player].innen.find(card =>\r\n            card.kind === 'spec' && (card as any).name === 'Sam Altman'\r\n          );\r\n          if (samAltman && (playedCard as any).tag === 'Intelligenz') {\r\n            // Ziehe 1 Karte\r\n            if (newState.decks[player].length > 0) {\r\n              const drawnCard = newState.decks[player].shift();\r\n              if (drawnCard) {\r\n                newState.hands[player].push(drawnCard);\r\n                log(`🔥 SAM ALTMAN EFFEKT: +1 Karte gezogen (${drawnCard.name}) - KI-Initiative`);\r\n              }\r\n            }\r\n            // +1 AP zurück\r\n            newState.actionPoints[player] += 1;\r\n            log(`🔥 SAM ALTMAN EFFEKT: +1 AP zurück (${newState.actionPoints[player] - 1} → ${newState.actionPoints[player]}) - KI-Initiative`);\r\n          }\r\n\r\n\r\n          return newState;\r\n        }\r\n\r\n        // 3) Öffentlichkeit (Public)\r\n        if (\r\n          typeStr === 'öffentlichkeitskarte' ||\r\n          typeStr === 'oeffentlichkeitskarte' ||\r\n          typeStr === 'öffentlichkeit' ||\r\n          typeStr === 'public'\r\n        ) {\r\n          if (newState.board[player].innen.length < 5) {\r\n            const innenArray = [...newState.board[player].innen, playedCard];\r\n            const playerBoardCloned = { ...newState.board[player], innen: innenArray } as any;\r\n            newState.board = { ...newState.board, [player]: playerBoardCloned } as any;\r\n            log(`P${player} spielt ${playedCard.name} in Öffentlichkeit`);\r\n\r\n            // Sofort Auren prüfen (z.B. JF +1, wenn JF schon liegt)\r\n            applyAurasForPlayer(newState, player, log);\r\n\r\n            // 6) Karteneffekte enqueuen + Queue auflösen\r\n            triggerCardEffects(newState, player, playedCard);\r\n            // Queue needs array of events\r\n        if (newState._queue && newState._queue.length > 0) {\r\n          resolveQueue(newState, newState._queue);\r\n          newState._queue = [];\r\n        }\r\n\r\n            // 3) Nachdem die Karte gelegt wurde: gegnerische Traps prüfen\r\n            const tag = (playedCard as any).tag ?? '';\r\n            const isNGOorPlatform = ['NGO', 'Plattform'].includes(tag);\r\n            checkTrapsOnOpponentPlay(newState, player === 1 ? 2 : 1, playedCard.uid, isNGOorPlatform, log);\r\n\r\n            // 🔥 PUBLIC CARD EFFECTS - Passive effects when played\r\n\r\n            // Helper function to draw a card for the player\r\n            const drawCardForPlayer = (cardName: string) => {\r\n              if (newState.decks[player].length > 0) {\r\n                const drawnCard = newState.decks[player].shift();\r\n                if (drawnCard) {\r\n                  newState.hands[player].push(drawnCard);\r\n                  log(`🔥 ${cardName.toUpperCase()} EFFEKT: +1 Karte gezogen (${drawnCard.name})`);\r\n                  return true;\r\n                }\r\n              }\r\n              return false;\r\n            };\r\n\r\n            if (specCard.name === 'Elon Musk') {\r\n              // Effect: \"Ziehe 1 Karte. Deine erste Initiative pro Runde kostet 1 Aktionspunkt weniger.\"\r\n              drawCardForPlayer('Elon Musk');\r\n              // 🔥 QUEUE-SYSTEM: Erste Initiative pro Runde → Refund wird über triggerCardEffects gehandhabt\r\n\r\n            } else if (specCard.name === 'Bill Gates') {\r\n              // Effect: \"Ziehe 1 Karte. Deine nächste Initiative kostet 1 Aktionspunkt weniger.\"\r\n              drawCardForPlayer('Bill Gates');\r\n              // 🔥 QUEUE-SYSTEM: Nächste Initiative → Refund wird über triggerCardEffects gehandhabt\r\n\r\n            } else if (specCard.name === 'Jeff Bezos') {\r\n              // Effect: \"Ziehe 1 Karte beim Ausspielen. Wenn eine Plattform liegt: +1 Aktionspunkt.\"\r\n              drawCardForPlayer('Jeff Bezos');\r\n              const hasPlatform = newState.board[player].innen.some(c =>\r\n                c.kind === 'spec' && (c as any).tag === 'Plattform'\r\n              );\r\n              if (hasPlatform) {\r\n                newState.actionPoints[player] += 1;\r\n                log(`🔥 JEFF BEZOS: +1 AP durch Plattform-Synergie! (${newState.actionPoints[player] - 1} → ${newState.actionPoints[player]})`);\r\n              }\r\n\r\n            } else if (specCard.name === 'Warren Buffett') {\r\n              // Effect: \"Ziehe 1 Karte. Bei einer Wirtschafts-Initiative: +1 Effekt.\"\r\n              drawCardForPlayer('Warren Buffett');\r\n              // TODO: Implement \"Wirtschafts-Initiative +1 Effect\" logic\r\n              log(`📊 WARREN BUFFETT: Bei Wirtschafts-Initiativen +1 Effekt! (TODO: Implementierung)`);\r\n\r\n            } else if (specCard.name === 'Gautam Adani') {\r\n              // Effect: \"Ziehe 1 Karte. Bei einer Infrastruktur-Initiative: +1 Effekt.\"\r\n              drawCardForPlayer('Gautam Adani');\r\n              // TODO: Implement \"Infrastruktur-Initiative +1 Effect\" logic\r\n              log(`📊 GAUTAM ADANI: Bei Infrastruktur-Initiativen +1 Effekt! (TODO: Implementierung)`);\r\n\r\n            } else if (specCard.name === 'Zhang Yiming') {\r\n              // Effect: \"Ziehe 1 Karte. Bei Medien auf dem Feld: -1 Aktionspunkt auf deine nächste Initiative.\"\r\n              drawCardForPlayer('Zhang Yiming');\r\n              const hasMedia = newState.board[player].innen.some(c =>\r\n                c.kind === 'spec' && (c as any).tag === 'Medien'\r\n              );\r\n              if (hasMedia) {\r\n                // TODO: Implement \"nächste Initiative -1 AP\" logic\r\n                log(`🔥 ZHANG YIMING: Nächste Initiative kostet 1 AP weniger durch Medien-Synergie! (TODO: Implementierung)`);\r\n              }\r\n\r\n            } else if (specCard.name === 'George Soros') {\r\n              // Effect: \"+1 Aktionspunkt wenn der Gegner eine autoritäre Regierungskarte hat.\"\r\n              const opponent = player === 1 ? 2 : 1;\r\n              const hasAuthoritarianCard = newState.board[opponent].aussen.some(card => {\r\n                const polCard = card as any;\r\n                return polCard.tag === 'Staatsoberhaupt' && polCard.influence >= 8; // High influence leaders\r\n              });\r\n\r\n              if (hasAuthoritarianCard) {\r\n                newState.actionPoints[player] += 1;\r\n                log(`🔥 GEORGE SOROS EFFEKT: +1 AP durch autoritäre Regierung des Gegners!`);\r\n                log(`📊 SOROS: Aktionspunkte ${newState.actionPoints[player] - 1} → ${newState.actionPoints[player]}`);\r\n              } else {\r\n                log(`💭 George Soros: Keine autoritären Karten beim Gegner - Effekt nicht ausgelöst`);\r\n              }\r\n            }\r\n\r\n            // 🔗 NGO-Synergie: Wenn eine NGO gelegt wird und Joschka Fischer liegt, erhält P${player} +1 Einfluss (Rundenauswertung)\r\n            if ((specCard as any).tag === 'NGO') {\r\n              const hasJoschka = newState.board[player].aussen.some(c => c.kind === 'pol' && (c as any).name === 'Joschka Fischer' && !(c as any).deactivated);\r\n              if (hasJoschka) {\r\n                log(`🔥🔥🔥 SYNERGIE AKTIVIERT! 🔥🔥🔥 Joschka Fischer + ${playedCard.name}[NGO] → +1 Einfluss bei Rundenauswertung`);\r\n              }\r\n            }\r\n          } else {\r\n            log(`❌ ERROR: Lane full - Öffentlichkeit ist voll (5/5)`);\r\n          }\r\n\r\n          // 🔥 AP-REFUNDS nach dem Kartenspielen anwenden\r\n          applyApRefundsAfterPlay(newState, player, selectedCard);\r\n          return newState;\r\n        }\r\n\r\n                  // 4) Default: Traps/Interventions\r\n        // Falls \"Boykott-Kampagne\" als Trap gelegt wird\r\n        if (isBoycottTrap(playedCard)) {\r\n          registerTrap(newState, player, playedCard, log);\r\n          // NICHT sofort checken – sie wartet auf den Gegner\r\n          return newState;\r\n        }\r\n\r\n        newState.traps[player] = [...newState.traps[player], playedCard];\r\n        log(`P${player} spielt ${playedCard.name} als ${specCard.type}`);\r\n\r\n        // 6) Karteneffekte enqueuen + Queue auflösen\r\n        triggerCardEffects(newState, player, playedCard);\r\n        // Queue needs array of events\r\n        if (newState._queue && newState._queue.length > 0) {\r\n          resolveQueue(newState, newState._queue);\r\n          newState._queue = [];\r\n        }\r\n\r\n        // 🔥 AP-REFUNDS nach dem Kartenspielen anwenden\r\n        applyApRefundsAfterPlay(newState, player, selectedCard);\r\n        return newState;\r\n      }\r\n\r\n      // 6) Karteneffekte enqueuen + Queue auflösen (fallback für unbekannte Kartentypen)\r\n      triggerCardEffects(newState, player, selectedCard);\r\n      // Queue needs array of events\r\n        if (newState._queue && newState._queue.length > 0) {\r\n          resolveQueue(newState, newState._queue);\r\n          newState._queue = [];\r\n        }\r\n\r\n      // 🔥 AP-REFUNDS nach dem Kartenspielen anwenden\r\n      applyApRefundsAfterPlay(newState, player, selectedCard);\r\n\r\n      // Kein Aktionenlimit mehr → automatischer Turnwechsel entfällt\r\n\r\n\r\n      return newState;\r\n    });\r\n  }, [setGameState, log]);\r\n\r\n  const activateInstantInitiative = useCallback((player: Player) => {\r\n    setGameState(prev => {\r\n      if (prev.current !== player) {\r\n        log(`❌ ERROR: Not player turn - Current: ${prev.current}, Attempted: ${player}`);\r\n        return prev;\r\n      }\r\n\r\n      const instantCard = prev.board[player].sofort[0];\r\n      if (!instantCard) {\r\n        log(`❌ ERROR: No Sofort-Initiative in slot for player ${player}`);\r\n        return prev;\r\n      }\r\n\r\n      const newState = { ...prev };\r\n\r\n      // 1) Normale Karten-Effekte der Sofort-Karte feuern\r\n      triggerCardEffects(newState, player, instantCard);\r\n\r\n      // 2) Karte nach Aktivierung in den Ablagestapel\r\n      const [played] = newState.board[player].sofort.splice(0, 1);\r\n      newState.discard.push(played);\r\n\r\n      // 3) Queue auflösen\r\n      // Queue needs array of events\r\n        if (newState._queue && newState._queue.length > 0) {\r\n          resolveQueue(newState, newState._queue);\r\n          newState._queue = [];\r\n        }\r\n\r\n      return newState;\r\n    });\r\n  }, [setGameState, log]);\r\n\r\n  const endTurn = useCallback((reason: 'button_end_turn' | 'auto' = 'button_end_turn') => {\r\n    setGameState((prev): GameState => {\r\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n      const current = prev.current;\r\n\r\n      // 1) Schon im Abschluss? -> Nichts tun (Idempotenz)\r\n      if (prev.isEndingTurn) {\r\n        log('🔁 Zugabschluss läuft bereits – warte auf Queue.');\r\n        return prev;\r\n      }\r\n\r\n      const newState = { ...prev, isEndingTurn: true };\r\n\r\n      // 2) Hängen noch Effekte in der Queue? -> Auflösen lassen\r\n      if (newState._effectQueue && newState._effectQueue.length > 0) {\r\n        log('⏳ Effekte werden noch aufgelöst – Zugwechsel folgt automatisch.');\r\n        resolveQueue(newState, [...newState._effectQueue]);\r\n        newState._effectQueue = [];\r\n        // Nach Queue-Auflösung: Wenn Flag noch gesetzt, Zug beenden\r\n        if (newState.isEndingTurn) {\r\n          return reallyEndTurn(newState, log);\r\n        }\r\n        return newState;\r\n      }\r\n\r\n      // 3) Keine Effekte mehr -> sofort beenden\r\n      return reallyEndTurn(newState, log);\r\n    });\r\n  }, [setGameState, log]);\r\n\r\n  // Legacy: nextTurn als Alias für endTurn für Kompatibilität\r\n  const nextTurn = useCallback(() => {\r\n    endTurn('auto');\r\n  }, [endTurn]);\r\n\r\n    const passTurn = useCallback((player: Player) => {\r\n    console.log(`🔧 DEBUG: passTurn called for player ${player}`);\r\n\r\n    setGameState(prev => {\r\n      console.log(`🔧 DEBUG: passTurn setState - current: ${prev.current}, player: ${player}`);\r\n\r\n      if (prev.current !== player) {\r\n        console.log(`🔧 DEBUG: Wrong player turn - current: ${prev.current}, attempted: ${player}`);\r\n        return prev;\r\n      }\r\n\r\n      const newState = { ...prev, passed: { ...prev.passed, [player]: true } };\r\n      console.log(`🔧 DEBUG: Pass status updated - P1: ${newState.passed[1]}, P2: ${newState.passed[2]}`);\r\n      log(`🚫 Spieler ${player} passt.`);\r\n\r\n      // ❗ Kein Nachziehen bei Pass:\r\n      // Der passierende Spieler kommt in dieser Runde nicht mehr dran.\r\n      // Die nächste Runde startet ohnehin mit 5 neuen Handkarten.\r\n\r\n      // Check if round should end (both players passed)\r\n      const shouldEndRound = checkRoundEnd(newState);\r\n      console.log(`🔧 DEBUG: Should end round? ${shouldEndRound}`);\r\n\r\n      if (shouldEndRound) {\r\n        log(`🏁 Runde ${newState.round} wird beendet und ausgewertet.`);\r\n        return resolveRound(newState, log);\r\n      } else {\r\n        // Switch turn to other player for their final chance\r\n        const otherPlayer: Player = player === 1 ? 2 : 1;\r\n        console.log(`🔧 DEBUG: Switching to other player ${otherPlayer}, has passed: ${newState.passed[otherPlayer]}`);\r\n\r\n        // Only switch if other player hasn't passed yet\r\n        if (!newState.passed[otherPlayer]) {\r\n          newState.current = otherPlayer;\r\n          newState.actionPoints = { ...newState.actionPoints, [otherPlayer]: 2 };\r\n          newState.actionsUsed = { ...newState.actionsUsed, [otherPlayer]: 0 };\r\n\r\n          // Apply new start-of-turn hooks\r\n          applyStartOfTurnFlags(newState, otherPlayer, log);\r\n\r\n        // 🔥 CLUSTER 3: Auren-Flags beim Zugstart neu berechnen\r\n        recomputeAuraFlags(newState);\r\n\r\n          log(`⏭️ Spieler ${otherPlayer} hat noch einen letzten Zug.`);\r\n          console.log(`🔧 DEBUG: Turn switched to player ${otherPlayer}`);\r\n        } else {\r\n          // Both players have passed now, end round\r\n          log(`🏁 Runde ${newState.round} wird beendet (beide Spieler haben gepasst).`);\r\n          return resolveRound(newState, log);\r\n        }\r\n      }\r\n\r\n      return newState;\r\n    });\r\n  }, [setGameState, log]);\r\n\r\n  return {\r\n    startMatchWithDecks,\r\n    startMatchVsAI,\r\n    playCard,\r\n    activateInstantInitiative,\r\n    passTurn,\r\n    nextTurn,\r\n    endTurn,\r\n  };\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}